{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/NamingEventCoordinator.java", "func_name": "NamingEventCoordinator.fireEvent", "original_string": "void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) {\n        final String target = name.toString();\n        final Set<Integer> scopeSet = new HashSet<Integer>(Arrays.asList(scopes));\n        final NamingEvent event = new NamingEvent(context, type, newBinding, existingBinding, changeInfo);\n\n        final Set<ListenerHolder> holdersToFire = new HashSet<ListenerHolder>();\n\n        // Check for OBJECT_SCOPE based listeners\n        if (scopeSet.contains(EventContext.OBJECT_SCOPE)) {\n            final TargetScope targetScope = new TargetScope(target, EventContext.OBJECT_SCOPE);\n            final List<ListenerHolder> holders = holdersByTarget.get(targetScope);\n            if (holders != null) {\n                for (ListenerHolder holder : holders) {\n                    holdersToFire.add(holder);\n                }\n            }\n        }\n\n        // Check for ONELEVEL_SCOPE based listeners\n        if (scopeSet.contains(EventContext.ONELEVEL_SCOPE) && !name.isEmpty()) {\n            final TargetScope targetScope = new TargetScope(name.getPrefix(name.size() - 1).toString(), EventContext.ONELEVEL_SCOPE);\n            final List<ListenerHolder> holders = holdersByTarget.get(targetScope);\n            if (holders != null) {\n                for (ListenerHolder holder : holders) {\n                    holdersToFire.add(holder);\n                }\n            }\n        }\n\n        // Check for SUBTREE_SCOPE based listeners\n        if (scopeSet.contains(EventContext.SUBTREE_SCOPE) && !name.isEmpty()) {\n            for (int i = 1; i < name.size(); i++) {\n                final Name parentName = name.getPrefix(i);\n                final TargetScope targetScope = new TargetScope(parentName.toString(), EventContext.SUBTREE_SCOPE);\n                final List<ListenerHolder> holders = holdersByTarget.get(targetScope);\n                if (holders != null) {\n                    for (ListenerHolder holder : holders) {\n                        holdersToFire.add(holder);\n                    }\n                }\n            }\n        }\n\n        executor.execute(new FireEventTask(holdersToFire, event));\n    }", "language": "java", "code": "void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) {\n        final String target = name.toString();\n        final Set<Integer> scopeSet = new HashSet<Integer>(Arrays.asList(scopes));\n        final NamingEvent event = new NamingEvent(context, type, newBinding, existingBinding, changeInfo);\n\n        final Set<ListenerHolder> holdersToFire = new HashSet<ListenerHolder>();\n\n        // Check for OBJECT_SCOPE based listeners\n        if (scopeSet.contains(EventContext.OBJECT_SCOPE)) {\n            final TargetScope targetScope = new TargetScope(target, EventContext.OBJECT_SCOPE);\n            final List<ListenerHolder> holders = holdersByTarget.get(targetScope);\n            if (holders != null) {\n                for (ListenerHolder holder : holders) {\n                    holdersToFire.add(holder);\n                }\n            }\n        }\n\n        // Check for ONELEVEL_SCOPE based listeners\n        if (scopeSet.contains(EventContext.ONELEVEL_SCOPE) && !name.isEmpty()) {\n            final TargetScope targetScope = new TargetScope(name.getPrefix(name.size() - 1).toString(), EventContext.ONELEVEL_SCOPE);\n            final List<ListenerHolder> holders = holdersByTarget.get(targetScope);\n            if (holders != null) {\n                for (ListenerHolder holder : holders) {\n                    holdersToFire.add(holder);\n                }\n            }\n        }\n\n        // Check for SUBTREE_SCOPE based listeners\n        if (scopeSet.contains(EventContext.SUBTREE_SCOPE) && !name.isEmpty()) {\n            for (int i = 1; i < name.size(); i++) {\n                final Name parentName = name.getPrefix(i);\n                final TargetScope targetScope = new TargetScope(parentName.toString(), EventContext.SUBTREE_SCOPE);\n                final List<ListenerHolder> holders = holdersByTarget.get(targetScope);\n                if (holders != null) {\n                    for (ListenerHolder holder : holders) {\n                        holdersToFire.add(holder);\n                    }\n                }\n            }\n        }\n\n        executor.execute(new FireEventTask(holdersToFire, event));\n    }", "code_tokens": ["void", "fireEvent", "(", "final", "EventContext", "context", ",", "final", "Name", "name", ",", "final", "Binding", "existingBinding", ",", "final", "Binding", "newBinding", ",", "int", "type", ",", "final", "String", "changeInfo", ",", "final", "Integer", "...", "scopes", ")", "{", "final", "String", "target", "=", "name", ".", "toString", "(", ")", ";", "final", "Set", "<", "Integer", ">", "scopeSet", "=", "new", "HashSet", "<", "Integer", ">", "(", "Arrays", ".", "asList", "(", "scopes", ")", ")", ";", "final", "NamingEvent", "event", "=", "new", "NamingEvent", "(", "context", ",", "type", ",", "newBinding", ",", "existingBinding", ",", "changeInfo", ")", ";", "final", "Set", "<", "ListenerHolder", ">", "holdersToFire", "=", "new", "HashSet", "<", "ListenerHolder", ">", "(", ")", ";", "// Check for OBJECT_SCOPE based listeners", "if", "(", "scopeSet", ".", "contains", "(", "EventContext", ".", "OBJECT_SCOPE", ")", ")", "{", "final", "TargetScope", "targetScope", "=", "new", "TargetScope", "(", "target", ",", "EventContext", ".", "OBJECT_SCOPE", ")", ";", "final", "List", "<", "ListenerHolder", ">", "holders", "=", "holdersByTarget", ".", "get", "(", "targetScope", ")", ";", "if", "(", "holders", "!=", "null", ")", "{", "for", "(", "ListenerHolder", "holder", ":", "holders", ")", "{", "holdersToFire", ".", "add", "(", "holder", ")", ";", "}", "}", "}", "// Check for ONELEVEL_SCOPE based listeners", "if", "(", "scopeSet", ".", "contains", "(", "EventContext", ".", "ONELEVEL_SCOPE", ")", "&&", "!", "name", ".", "isEmpty", "(", ")", ")", "{", "final", "TargetScope", "targetScope", "=", "new", "TargetScope", "(", "name", ".", "getPrefix", "(", "name", ".", "size", "(", ")", "-", "1", ")", ".", "toString", "(", ")", ",", "EventContext", ".", "ONELEVEL_SCOPE", ")", ";", "final", "List", "<", "ListenerHolder", ">", "holders", "=", "holdersByTarget", ".", "get", "(", "targetScope", ")", ";", "if", "(", "holders", "!=", "null", ")", "{", "for", "(", "ListenerHolder", "holder", ":", "holders", ")", "{", "holdersToFire", ".", "add", "(", "holder", ")", ";", "}", "}", "}", "// Check for SUBTREE_SCOPE based listeners", "if", "(", "scopeSet", ".", "contains", "(", "EventContext", ".", "SUBTREE_SCOPE", ")", "&&", "!", "name", ".", "isEmpty", "(", ")", ")", "{", "for", "(", "int", "i", "=", "1", ";", "i", "<", "name", ".", "size", "(", ")", ";", "i", "++", ")", "{", "final", "Name", "parentName", "=", "name", ".", "getPrefix", "(", "i", ")", ";", "final", "TargetScope", "targetScope", "=", "new", "TargetScope", "(", "parentName", ".", "toString", "(", ")", ",", "EventContext", ".", "SUBTREE_SCOPE", ")", ";", "final", "List", "<", "ListenerHolder", ">", "holders", "=", "holdersByTarget", ".", "get", "(", "targetScope", ")", ";", "if", "(", "holders", "!=", "null", ")", "{", "for", "(", "ListenerHolder", "holder", ":", "holders", ")", "{", "holdersToFire", ".", "add", "(", "holder", ")", ";", "}", "}", "}", "}", "executor", ".", "execute", "(", "new", "FireEventTask", "(", "holdersToFire", ",", "event", ")", ")", ";", "}"], "docstring": "Fire a naming event.  An event will be created with the provided information and sent to each listener that matches\nthe target and scope information.\n\n@param context The event context generating the event.\n@param name The target name the event represents\n@param existingBinding The existing binding at the provided name\n@param newBinding The new binding at the provided name\n@param type The event type\n@param changeInfo The change info for the event\n@param scopes The scopes this event should be fired against", "docstring_tokens": ["Fire", "a", "naming", "event", ".", "An", "event", "will", "be", "created", "with", "the", "provided", "information", "and", "sent", "to", "each", "listener", "that", "matches", "the", "target", "and", "scope", "information", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/NamingEventCoordinator.java#L141-L185", "partition": "test", "index": 2645, "time": "2010-08-17 18:22:24"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/NamingEventCoordinator.java", "func_name": "NamingEventCoordinator.removeListener", "original_string": "synchronized void removeListener(final NamingListener namingListener) {\n        // Do we have a holder for this listener\n        final ListenerHolder holder = holdersByListener.get(namingListener);\n        if (holder == null) {\n            return;\n        }\n\n        final Map<NamingListener, ListenerHolder> byListenerCopy = new FastCopyHashMap<NamingListener, ListenerHolder>(holdersByListener);\n        byListenerCopy.remove(namingListener);\n        holdersByListener = byListenerCopy;\n\n        final Map<TargetScope, List<ListenerHolder>> byTargetCopy = new FastCopyHashMap<TargetScope, List<ListenerHolder>>(holdersByTarget);\n        for (TargetScope targetScope : holder.targets) {\n            final List<ListenerHolder> holders = holdersByTarget.get(targetScope);\n            holders.remove(holder);\n            if (holders.isEmpty()) {\n                byTargetCopy.remove(targetScope);\n            }\n        }\n        holdersByTarget = byTargetCopy;\n    }", "language": "java", "code": "synchronized void removeListener(final NamingListener namingListener) {\n        // Do we have a holder for this listener\n        final ListenerHolder holder = holdersByListener.get(namingListener);\n        if (holder == null) {\n            return;\n        }\n\n        final Map<NamingListener, ListenerHolder> byListenerCopy = new FastCopyHashMap<NamingListener, ListenerHolder>(holdersByListener);\n        byListenerCopy.remove(namingListener);\n        holdersByListener = byListenerCopy;\n\n        final Map<TargetScope, List<ListenerHolder>> byTargetCopy = new FastCopyHashMap<TargetScope, List<ListenerHolder>>(holdersByTarget);\n        for (TargetScope targetScope : holder.targets) {\n            final List<ListenerHolder> holders = holdersByTarget.get(targetScope);\n            holders.remove(holder);\n            if (holders.isEmpty()) {\n                byTargetCopy.remove(targetScope);\n            }\n        }\n        holdersByTarget = byTargetCopy;\n    }", "code_tokens": ["synchronized", "void", "removeListener", "(", "final", "NamingListener", "namingListener", ")", "{", "// Do we have a holder for this listener", "final", "ListenerHolder", "holder", "=", "holdersByListener", ".", "get", "(", "namingListener", ")", ";", "if", "(", "holder", "==", "null", ")", "{", "return", ";", "}", "final", "Map", "<", "NamingListener", ",", "ListenerHolder", ">", "byListenerCopy", "=", "new", "FastCopyHashMap", "<", "NamingListener", ",", "ListenerHolder", ">", "(", "holdersByListener", ")", ";", "byListenerCopy", ".", "remove", "(", "namingListener", ")", ";", "holdersByListener", "=", "byListenerCopy", ";", "final", "Map", "<", "TargetScope", ",", "List", "<", "ListenerHolder", ">", ">", "byTargetCopy", "=", "new", "FastCopyHashMap", "<", "TargetScope", ",", "List", "<", "ListenerHolder", ">", ">", "(", "holdersByTarget", ")", ";", "for", "(", "TargetScope", "targetScope", ":", "holder", ".", "targets", ")", "{", "final", "List", "<", "ListenerHolder", ">", "holders", "=", "holdersByTarget", ".", "get", "(", "targetScope", ")", ";", "holders", ".", "remove", "(", "holder", ")", ";", "if", "(", "holders", ".", "isEmpty", "(", ")", ")", "{", "byTargetCopy", ".", "remove", "(", "targetScope", ")", ";", "}", "}", "holdersByTarget", "=", "byTargetCopy", ";", "}"], "docstring": "Remove a listener.  Will remove it from all target mappings.  Once this method returns, the listener will no longer\nreceive any events.\n\n@param namingListener The listener", "docstring_tokens": ["Remove", "a", "listener", ".", "Will", "remove", "it", "from", "all", "target", "mappings", ".", "Once", "this", "method", "returns", "the", "listener", "will", "no", "longer", "receive", "any", "events", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/NamingEventCoordinator.java#L107-L127", "partition": "test", "index": 2644, "time": "2010-08-17 18:22:24"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/NamingEventCoordinator.java", "func_name": "NamingEventCoordinator.addListener", "original_string": "synchronized void addListener(final String target, final int scope, final NamingListener namingListener) {\n        final TargetScope targetScope = new TargetScope(target, scope);\n        // Do we have a holder for this listener\n        ListenerHolder holder = holdersByListener.get(namingListener);\n        if (holder == null) {\n            holder = new ListenerHolder(namingListener, targetScope);\n            final Map<NamingListener, ListenerHolder> byListenerCopy = new FastCopyHashMap<NamingListener, ListenerHolder>(holdersByListener);\n            byListenerCopy.put(namingListener, holder);\n            holdersByListener = byListenerCopy;\n        } else {\n            holder.addTarget(targetScope);\n        }\n\n        List<ListenerHolder> holdersForTarget = holdersByTarget.get(targetScope);\n        if (holdersForTarget == null) {\n            holdersForTarget = new CopyOnWriteArrayList<ListenerHolder>();\n            final Map<TargetScope, List<ListenerHolder>> byTargetCopy = new FastCopyHashMap<TargetScope, List<ListenerHolder>>(holdersByTarget);\n            byTargetCopy.put(targetScope, holdersForTarget);\n            holdersByTarget = byTargetCopy;\n        }\n        holdersForTarget.add(holder);\n    }", "language": "java", "code": "synchronized void addListener(final String target, final int scope, final NamingListener namingListener) {\n        final TargetScope targetScope = new TargetScope(target, scope);\n        // Do we have a holder for this listener\n        ListenerHolder holder = holdersByListener.get(namingListener);\n        if (holder == null) {\n            holder = new ListenerHolder(namingListener, targetScope);\n            final Map<NamingListener, ListenerHolder> byListenerCopy = new FastCopyHashMap<NamingListener, ListenerHolder>(holdersByListener);\n            byListenerCopy.put(namingListener, holder);\n            holdersByListener = byListenerCopy;\n        } else {\n            holder.addTarget(targetScope);\n        }\n\n        List<ListenerHolder> holdersForTarget = holdersByTarget.get(targetScope);\n        if (holdersForTarget == null) {\n            holdersForTarget = new CopyOnWriteArrayList<ListenerHolder>();\n            final Map<TargetScope, List<ListenerHolder>> byTargetCopy = new FastCopyHashMap<TargetScope, List<ListenerHolder>>(holdersByTarget);\n            byTargetCopy.put(targetScope, holdersForTarget);\n            holdersByTarget = byTargetCopy;\n        }\n        holdersForTarget.add(holder);\n    }", "code_tokens": ["synchronized", "void", "addListener", "(", "final", "String", "target", ",", "final", "int", "scope", ",", "final", "NamingListener", "namingListener", ")", "{", "final", "TargetScope", "targetScope", "=", "new", "TargetScope", "(", "target", ",", "scope", ")", ";", "// Do we have a holder for this listener", "ListenerHolder", "holder", "=", "holdersByListener", ".", "get", "(", "namingListener", ")", ";", "if", "(", "holder", "==", "null", ")", "{", "holder", "=", "new", "ListenerHolder", "(", "namingListener", ",", "targetScope", ")", ";", "final", "Map", "<", "NamingListener", ",", "ListenerHolder", ">", "byListenerCopy", "=", "new", "FastCopyHashMap", "<", "NamingListener", ",", "ListenerHolder", ">", "(", "holdersByListener", ")", ";", "byListenerCopy", ".", "put", "(", "namingListener", ",", "holder", ")", ";", "holdersByListener", "=", "byListenerCopy", ";", "}", "else", "{", "holder", ".", "addTarget", "(", "targetScope", ")", ";", "}", "List", "<", "ListenerHolder", ">", "holdersForTarget", "=", "holdersByTarget", ".", "get", "(", "targetScope", ")", ";", "if", "(", "holdersForTarget", "==", "null", ")", "{", "holdersForTarget", "=", "new", "CopyOnWriteArrayList", "<", "ListenerHolder", ">", "(", ")", ";", "final", "Map", "<", "TargetScope", ",", "List", "<", "ListenerHolder", ">", ">", "byTargetCopy", "=", "new", "FastCopyHashMap", "<", "TargetScope", ",", "List", "<", "ListenerHolder", ">", ">", "(", "holdersByTarget", ")", ";", "byTargetCopy", ".", "put", "(", "targetScope", ",", "holdersForTarget", ")", ";", "holdersByTarget", "=", "byTargetCopy", ";", "}", "holdersForTarget", ".", "add", "(", "holder", ")", ";", "}"], "docstring": "Add a listener to the coordinator with a given target name and event scope.  This information is used when an\nevent is fired to determine whether or not to fire this listener.\n\n@param target The target name to lister\n@param scope The event scope\n@param namingListener The listener", "docstring_tokens": ["Add", "a", "listener", "to", "the", "coordinator", "with", "a", "given", "target", "name", "and", "event", "scope", ".", "This", "information", "is", "used", "when", "an", "event", "is", "fired", "to", "determine", "whether", "or", "not", "to", "fire", "this", "listener", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/NamingEventCoordinator.java#L78-L99", "partition": "test", "index": 2643, "time": "2010-08-17 18:22:24"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/util/NamingUtils.java", "func_name": "NamingUtils.cannotProceedException", "original_string": "public static CannotProceedException cannotProceedException(final Object resolvedObject, final Name remainingName) {\n        final CannotProceedException cpe = new CannotProceedException();\n        cpe.setResolvedObj(resolvedObject);\n        cpe.setRemainingName(remainingName);\n        return cpe;\n    }", "language": "java", "code": "public static CannotProceedException cannotProceedException(final Object resolvedObject, final Name remainingName) {\n        final CannotProceedException cpe = new CannotProceedException();\n        cpe.setResolvedObj(resolvedObject);\n        cpe.setRemainingName(remainingName);\n        return cpe;\n    }", "code_tokens": ["public", "static", "CannotProceedException", "cannotProceedException", "(", "final", "Object", "resolvedObject", ",", "final", "Name", "remainingName", ")", "{", "final", "CannotProceedException", "cpe", "=", "new", "CannotProceedException", "(", ")", ";", "cpe", ".", "setResolvedObj", "(", "resolvedObject", ")", ";", "cpe", ".", "setRemainingName", "(", "remainingName", ")", ";", "return", "cpe", ";", "}"], "docstring": "Return a cannot-proceed exception.\n\n@param resolvedObject the resolved object\n@param remainingName the remaining name\n@return the exception", "docstring_tokens": ["Return", "a", "cannot", "-", "proceed", "exception", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/util/NamingUtils.java#L176-L181", "partition": "test", "index": 2546, "time": "2010-08-18 12:33:45"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/service/BinderService.java", "func_name": "BinderService.stop", "original_string": "public void stop(StopContext context) {\n        final ServiceBasedNamingStore namingStore = namingStoreValue.getValue();\n        namingStore.remove(controller.getName());\n        ROOT_LOGGER.tracef(\"Unbound resource %s into naming store %s (service name %s)\", name, namingStore, context.getController().getName());\n    }", "language": "java", "code": "public void stop(StopContext context) {\n        final ServiceBasedNamingStore namingStore = namingStoreValue.getValue();\n        namingStore.remove(controller.getName());\n        ROOT_LOGGER.tracef(\"Unbound resource %s into naming store %s (service name %s)\", name, namingStore, context.getController().getName());\n    }", "code_tokens": ["public", "void", "stop", "(", "StopContext", "context", ")", "{", "final", "ServiceBasedNamingStore", "namingStore", "=", "namingStoreValue", ".", "getValue", "(", ")", ";", "namingStore", ".", "remove", "(", "controller", ".", "getName", "(", ")", ")", ";", "ROOT_LOGGER", ".", "tracef", "(", "\"Unbound resource %s into naming store %s (service name %s)\"", ",", "name", ",", "namingStore", ",", "context", ".", "getController", "(", ")", ".", "getName", "(", ")", ")", ";", "}"], "docstring": "Unbind the entry from the injected context.\n\n@param context The stop context", "docstring_tokens": ["Unbind", "the", "entry", "from", "the", "injected", "context", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/service/BinderService.java#L135-L139", "partition": "test", "index": 2590, "time": "2010-08-19 13:10:03"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/context/NamespaceContextSelector.java", "func_name": "NamespaceContextSelector.getCurrentSelector", "original_string": "public static NamespaceContextSelector getCurrentSelector() {\n        NamespaceContextSelector selector = currentSelector.peek();\n        if(selector != null) {\n            return selector;\n        }\n        return defaultSelector;\n    }", "language": "java", "code": "public static NamespaceContextSelector getCurrentSelector() {\n        NamespaceContextSelector selector = currentSelector.peek();\n        if(selector != null) {\n            return selector;\n        }\n        return defaultSelector;\n    }", "code_tokens": ["public", "static", "NamespaceContextSelector", "getCurrentSelector", "(", ")", "{", "NamespaceContextSelector", "selector", "=", "currentSelector", ".", "peek", "(", ")", ";", "if", "(", "selector", "!=", "null", ")", "{", "return", "selector", ";", "}", "return", "defaultSelector", ";", "}"], "docstring": "Get the current context selector for the current thread.\n\n@return The current context selector.", "docstring_tokens": ["Get", "the", "current", "context", "selector", "for", "the", "current", "thread", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/context/NamespaceContextSelector.java#L65-L71", "partition": "test", "index": 2714, "time": "2010-08-19 13:10:03"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/service/BinderService.java", "func_name": "BinderService.start", "original_string": "public void start(StartContext context) throws StartException {\n        final ServiceBasedNamingStore namingStore = namingStoreValue.getValue();\n        controller = context.getController();\n        namingStore.add(controller.getName());\n        ROOT_LOGGER.tracef(\"Bound resource %s into naming store %s (service name %s)\", name, namingStore, controller.getName());\n    }", "language": "java", "code": "public void start(StartContext context) throws StartException {\n        final ServiceBasedNamingStore namingStore = namingStoreValue.getValue();\n        controller = context.getController();\n        namingStore.add(controller.getName());\n        ROOT_LOGGER.tracef(\"Bound resource %s into naming store %s (service name %s)\", name, namingStore, controller.getName());\n    }", "code_tokens": ["public", "void", "start", "(", "StartContext", "context", ")", "throws", "StartException", "{", "final", "ServiceBasedNamingStore", "namingStore", "=", "namingStoreValue", ".", "getValue", "(", ")", ";", "controller", "=", "context", ".", "getController", "(", ")", ";", "namingStore", ".", "add", "(", "controller", ".", "getName", "(", ")", ")", ";", "ROOT_LOGGER", ".", "tracef", "(", "\"Bound resource %s into naming store %s (service name %s)\"", ",", "name", ",", "namingStore", ",", "controller", ".", "getName", "(", ")", ")", ";", "}"], "docstring": "Bind the entry into the injected context.\n\n@param context The start context\n@throws StartException If the entity can not be bound", "docstring_tokens": ["Bind", "the", "entry", "into", "the", "injected", "context", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/service/BinderService.java#L123-L128", "partition": "test", "index": 2589, "time": "2010-08-19 13:10:03"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/deployment/JndiName.java", "func_name": "JndiName.getAbsoluteName", "original_string": "public String getAbsoluteName() {\n        final StringBuilder absolute = new StringBuilder();\n        if (parent != null) {\n            absolute.append(parent).append(ENTRY_SEPARATOR);\n        }\n        absolute.append(local);\n        return absolute.toString();\n    }", "language": "java", "code": "public String getAbsoluteName() {\n        final StringBuilder absolute = new StringBuilder();\n        if (parent != null) {\n            absolute.append(parent).append(ENTRY_SEPARATOR);\n        }\n        absolute.append(local);\n        return absolute.toString();\n    }", "code_tokens": ["public", "String", "getAbsoluteName", "(", ")", "{", "final", "StringBuilder", "absolute", "=", "new", "StringBuilder", "(", ")", ";", "if", "(", "parent", "!=", "null", ")", "{", "absolute", ".", "append", "(", "parent", ")", ".", "append", "(", "ENTRY_SEPARATOR", ")", ";", "}", "absolute", ".", "append", "(", "local", ")", ";", "return", "absolute", ".", "toString", "(", ")", ";", "}"], "docstring": "Get the absolute JNDI name as a string.\n\n@return The absolute JNDI name as a string", "docstring_tokens": ["Get", "the", "absolute", "JNDI", "name", "as", "a", "string", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/deployment/JndiName.java#L69-L76", "partition": "test", "index": 2534, "time": "2010-08-24 13:56:52"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/deployment/JndiName.java", "func_name": "JndiName.of", "original_string": "public static JndiName of(final String name) {\n        if(name == null || name.isEmpty()) throw NamingLogger.ROOT_LOGGER.invalidJndiName(name);\n        final String[] parts = name.split(ENTRY_SEPARATOR);\n        JndiName current = null;\n        for(String part : parts) {\n            current = new JndiName(current, part);\n        }\n        return current;\n    }", "language": "java", "code": "public static JndiName of(final String name) {\n        if(name == null || name.isEmpty()) throw NamingLogger.ROOT_LOGGER.invalidJndiName(name);\n        final String[] parts = name.split(ENTRY_SEPARATOR);\n        JndiName current = null;\n        for(String part : parts) {\n            current = new JndiName(current, part);\n        }\n        return current;\n    }", "code_tokens": ["public", "static", "JndiName", "of", "(", "final", "String", "name", ")", "{", "if", "(", "name", "==", "null", "||", "name", ".", "isEmpty", "(", ")", ")", "throw", "NamingLogger", ".", "ROOT_LOGGER", ".", "invalidJndiName", "(", "name", ")", ";", "final", "String", "[", "]", "parts", "=", "name", ".", "split", "(", "ENTRY_SEPARATOR", ")", ";", "JndiName", "current", "=", "null", ";", "for", "(", "String", "part", ":", "parts", ")", "{", "current", "=", "new", "JndiName", "(", "current", ",", "part", ")", ";", "}", "return", "current", ";", "}"], "docstring": "Create a new instance of the JndiName by breaking the provided string format into a JndiName parts.\n\n@param name The string representation of a JNDI name.\n@return The JndiName representation", "docstring_tokens": ["Create", "a", "new", "instance", "of", "the", "JndiName", "by", "breaking", "the", "provided", "string", "format", "into", "a", "JndiName", "parts", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/deployment/JndiName.java#L94-L102", "partition": "test", "index": 2535, "time": "2010-08-24 13:56:52"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/ConnectorServices.java", "func_name": "ConnectorServices.notNull", "original_string": "public static <T> T notNull(T value) {\n        if (value == null)\n            throw ConnectorLogger.ROOT_LOGGER.serviceNotStarted();\n        return value;\n    }", "language": "java", "code": "public static <T> T notNull(T value) {\n        if (value == null)\n            throw ConnectorLogger.ROOT_LOGGER.serviceNotStarted();\n        return value;\n    }", "code_tokens": ["public", "static", "<", "T", ">", "T", "notNull", "(", "T", "value", ")", "{", "if", "(", "value", "==", "null", ")", "throw", "ConnectorLogger", ".", "ROOT_LOGGER", ".", "serviceNotStarted", "(", ")", ";", "return", "value", ";", "}"], "docstring": "convenient method to check notNull of value\n\n@param <T> type of the value\n@param value the value\n@return the value or throw an {@link IllegalStateException} if value is null (a.k.a. service not started)", "docstring_tokens": ["convenient", "method", "to", "check", "notNull", "of", "value"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/ConnectorServices.java#L134-L138", "partition": "test", "index": 2797, "time": "2010-08-24 17:20:15"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/deployers/ra/processors/IronJacamarDeploymentParsingProcessor.java", "func_name": "IronJacamarDeploymentParsingProcessor.deploy", "original_string": "@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ResourceRoot resourceRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);\n        final VirtualFile deploymentRoot = resourceRoot.getRoot();\n        final boolean resolveProperties = Util.shouldResolveJBoss(deploymentUnit);\n\n        IronJacamarXmlDescriptor xmlDescriptor = process(deploymentRoot, resolveProperties);\n        if (xmlDescriptor != null) {\n            deploymentUnit.putAttachment(IronJacamarXmlDescriptor.ATTACHMENT_KEY, xmlDescriptor);\n        }\n    }", "language": "java", "code": "@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ResourceRoot resourceRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);\n        final VirtualFile deploymentRoot = resourceRoot.getRoot();\n        final boolean resolveProperties = Util.shouldResolveJBoss(deploymentUnit);\n\n        IronJacamarXmlDescriptor xmlDescriptor = process(deploymentRoot, resolveProperties);\n        if (xmlDescriptor != null) {\n            deploymentUnit.putAttachment(IronJacamarXmlDescriptor.ATTACHMENT_KEY, xmlDescriptor);\n        }\n    }", "code_tokens": ["@", "Override", "public", "void", "deploy", "(", "DeploymentPhaseContext", "phaseContext", ")", "throws", "DeploymentUnitProcessingException", "{", "final", "DeploymentUnit", "deploymentUnit", "=", "phaseContext", ".", "getDeploymentUnit", "(", ")", ";", "final", "ResourceRoot", "resourceRoot", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "DEPLOYMENT_ROOT", ")", ";", "final", "VirtualFile", "deploymentRoot", "=", "resourceRoot", ".", "getRoot", "(", ")", ";", "final", "boolean", "resolveProperties", "=", "Util", ".", "shouldResolveJBoss", "(", "deploymentUnit", ")", ";", "IronJacamarXmlDescriptor", "xmlDescriptor", "=", "process", "(", "deploymentRoot", ",", "resolveProperties", ")", ";", "if", "(", "xmlDescriptor", "!=", "null", ")", "{", "deploymentUnit", ".", "putAttachment", "(", "IronJacamarXmlDescriptor", ".", "ATTACHMENT_KEY", ",", "xmlDescriptor", ")", ";", "}", "}"], "docstring": "Process a deployment for iron-jacamar.xml files. Will parse the xml file\nand attach metadata discovered during processing.\n\n@param phaseContext the deployment unit context\n@throws DeploymentUnitProcessingException", "docstring_tokens": ["Process", "a", "deployment", "for", "iron", "-", "jacamar", ".", "xml", "files", ".", "Will", "parse", "the", "xml", "file", "and", "attach", "metadata", "discovered", "during", "processing", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/deployers/ra/processors/IronJacamarDeploymentParsingProcessor.java#L65-L76", "partition": "test", "index": 2536, "time": "2010-09-20 15:07:45"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/Injection.java", "func_name": "Injection.findField", "original_string": "protected Field findField(Class<?> clz, String fieldName, String fieldType) {\n        while (!clz.equals(Object.class)) {\n            List<Field> hits = null;\n            Field[] fields = SecurityActions.getDeclaredFields(clz);\n            for (int i = 0; i < fields.length; i++) {\n                final Field field = fields[i];\n                if (fieldName.equals(field.getName())) {\n                    if (fieldType == null || argumentMatches(fieldType, field.getType().getName())) {\n                        if (hits == null)\n                            hits = new ArrayList<Field>(1);\n\n                        SecurityActions.setAccessible(field);\n\n                        hits.add(field);\n                    }\n                }\n            }\n\n            if (hits != null) {\n                if (hits.size() == 1) {\n                    return hits.get(0);\n                } else {\n                    Collections.sort(hits, new FieldSorter());\n                    if (fieldType != null) {\n                        for (Field f : hits) {\n                            if (fieldType.equals(f.getType().getName()))\n                                return f;\n                        }\n                    }\n\n                    return hits.get(0);\n                }\n            }\n\n            clz = clz.getSuperclass();\n        }\n\n        return null;\n    }", "language": "java", "code": "protected Field findField(Class<?> clz, String fieldName, String fieldType) {\n        while (!clz.equals(Object.class)) {\n            List<Field> hits = null;\n            Field[] fields = SecurityActions.getDeclaredFields(clz);\n            for (int i = 0; i < fields.length; i++) {\n                final Field field = fields[i];\n                if (fieldName.equals(field.getName())) {\n                    if (fieldType == null || argumentMatches(fieldType, field.getType().getName())) {\n                        if (hits == null)\n                            hits = new ArrayList<Field>(1);\n\n                        SecurityActions.setAccessible(field);\n\n                        hits.add(field);\n                    }\n                }\n            }\n\n            if (hits != null) {\n                if (hits.size() == 1) {\n                    return hits.get(0);\n                } else {\n                    Collections.sort(hits, new FieldSorter());\n                    if (fieldType != null) {\n                        for (Field f : hits) {\n                            if (fieldType.equals(f.getType().getName()))\n                                return f;\n                        }\n                    }\n\n                    return hits.get(0);\n                }\n            }\n\n            clz = clz.getSuperclass();\n        }\n\n        return null;\n    }", "code_tokens": ["protected", "Field", "findField", "(", "Class", "<", "?", ">", "clz", ",", "String", "fieldName", ",", "String", "fieldType", ")", "{", "while", "(", "!", "clz", ".", "equals", "(", "Object", ".", "class", ")", ")", "{", "List", "<", "Field", ">", "hits", "=", "null", ";", "Field", "[", "]", "fields", "=", "SecurityActions", ".", "getDeclaredFields", "(", "clz", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "fields", ".", "length", ";", "i", "++", ")", "{", "final", "Field", "field", "=", "fields", "[", "i", "]", ";", "if", "(", "fieldName", ".", "equals", "(", "field", ".", "getName", "(", ")", ")", ")", "{", "if", "(", "fieldType", "==", "null", "||", "argumentMatches", "(", "fieldType", ",", "field", ".", "getType", "(", ")", ".", "getName", "(", ")", ")", ")", "{", "if", "(", "hits", "==", "null", ")", "hits", "=", "new", "ArrayList", "<", "Field", ">", "(", "1", ")", ";", "SecurityActions", ".", "setAccessible", "(", "field", ")", ";", "hits", ".", "add", "(", "field", ")", ";", "}", "}", "}", "if", "(", "hits", "!=", "null", ")", "{", "if", "(", "hits", ".", "size", "(", ")", "==", "1", ")", "{", "return", "hits", ".", "get", "(", "0", ")", ";", "}", "else", "{", "Collections", ".", "sort", "(", "hits", ",", "new", "FieldSorter", "(", ")", ")", ";", "if", "(", "fieldType", "!=", "null", ")", "{", "for", "(", "Field", "f", ":", "hits", ")", "{", "if", "(", "fieldType", ".", "equals", "(", "f", ".", "getType", "(", ")", ".", "getName", "(", ")", ")", ")", "return", "f", ";", "}", "}", "return", "hits", ".", "get", "(", "0", ")", ";", "}", "}", "clz", "=", "clz", ".", "getSuperclass", "(", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Find a field\n\n@param clz       The class\n@param fieldName The field name\n@param fieldType The field type; can be <code>null</code>\n@return The field; <code>null</code> if not found", "docstring_tokens": ["Find", "a", "field"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/Injection.java#L231-L269", "partition": "test", "index": 2511, "time": "2010-10-12 14:19:32"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/Injection.java", "func_name": "Injection.findMethod", "original_string": "protected Method findMethod(Class<?> clz, String methodName, String propertyType) {\n        while (!clz.equals(Object.class)) {\n            List<Method> hits = null;\n            Method[] methods = SecurityActions.getDeclaredMethods(clz);\n            for (int i = 0; i < methods.length; i++) {\n                final Method method = methods[i];\n                if (methodName.equals(method.getName()) && method.getParameterTypes().length == 1) {\n                    if (propertyType == null || argumentMatches(propertyType, method.getParameterTypes()[0].getName())) {\n                        if (hits == null)\n                            hits = new ArrayList<Method>(1);\n\n                        SecurityActions.setAccessible(method);\n\n                        hits.add(method);\n                    }\n                }\n            }\n\n            if (hits != null) {\n                if (hits.size() == 1) {\n                    return hits.get(0);\n                } else {\n                    Collections.sort(hits, new MethodSorter());\n                    if (propertyType != null) {\n                        for (Method m : hits) {\n                            if (propertyType.equals(m.getParameterTypes()[0].getName()))\n                                return m;\n                        }\n                    }\n\n                    return hits.get(0);\n                }\n            }\n\n            clz = clz.getSuperclass();\n        }\n\n        return null;\n    }", "language": "java", "code": "protected Method findMethod(Class<?> clz, String methodName, String propertyType) {\n        while (!clz.equals(Object.class)) {\n            List<Method> hits = null;\n            Method[] methods = SecurityActions.getDeclaredMethods(clz);\n            for (int i = 0; i < methods.length; i++) {\n                final Method method = methods[i];\n                if (methodName.equals(method.getName()) && method.getParameterTypes().length == 1) {\n                    if (propertyType == null || argumentMatches(propertyType, method.getParameterTypes()[0].getName())) {\n                        if (hits == null)\n                            hits = new ArrayList<Method>(1);\n\n                        SecurityActions.setAccessible(method);\n\n                        hits.add(method);\n                    }\n                }\n            }\n\n            if (hits != null) {\n                if (hits.size() == 1) {\n                    return hits.get(0);\n                } else {\n                    Collections.sort(hits, new MethodSorter());\n                    if (propertyType != null) {\n                        for (Method m : hits) {\n                            if (propertyType.equals(m.getParameterTypes()[0].getName()))\n                                return m;\n                        }\n                    }\n\n                    return hits.get(0);\n                }\n            }\n\n            clz = clz.getSuperclass();\n        }\n\n        return null;\n    }", "code_tokens": ["protected", "Method", "findMethod", "(", "Class", "<", "?", ">", "clz", ",", "String", "methodName", ",", "String", "propertyType", ")", "{", "while", "(", "!", "clz", ".", "equals", "(", "Object", ".", "class", ")", ")", "{", "List", "<", "Method", ">", "hits", "=", "null", ";", "Method", "[", "]", "methods", "=", "SecurityActions", ".", "getDeclaredMethods", "(", "clz", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "methods", ".", "length", ";", "i", "++", ")", "{", "final", "Method", "method", "=", "methods", "[", "i", "]", ";", "if", "(", "methodName", ".", "equals", "(", "method", ".", "getName", "(", ")", ")", "&&", "method", ".", "getParameterTypes", "(", ")", ".", "length", "==", "1", ")", "{", "if", "(", "propertyType", "==", "null", "||", "argumentMatches", "(", "propertyType", ",", "method", ".", "getParameterTypes", "(", ")", "[", "0", "]", ".", "getName", "(", ")", ")", ")", "{", "if", "(", "hits", "==", "null", ")", "hits", "=", "new", "ArrayList", "<", "Method", ">", "(", "1", ")", ";", "SecurityActions", ".", "setAccessible", "(", "method", ")", ";", "hits", ".", "add", "(", "method", ")", ";", "}", "}", "}", "if", "(", "hits", "!=", "null", ")", "{", "if", "(", "hits", ".", "size", "(", ")", "==", "1", ")", "{", "return", "hits", ".", "get", "(", "0", ")", ";", "}", "else", "{", "Collections", ".", "sort", "(", "hits", ",", "new", "MethodSorter", "(", ")", ")", ";", "if", "(", "propertyType", "!=", "null", ")", "{", "for", "(", "Method", "m", ":", "hits", ")", "{", "if", "(", "propertyType", ".", "equals", "(", "m", ".", "getParameterTypes", "(", ")", "[", "0", "]", ".", "getName", "(", ")", ")", ")", "return", "m", ";", "}", "}", "return", "hits", ".", "get", "(", "0", ")", ";", "}", "}", "clz", "=", "clz", ".", "getSuperclass", "(", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Find a method\n\n@param clz          The class\n@param methodName   The method name\n@param propertyType The property type; can be <code>null</code>\n@return The method; <code>null</code> if not found", "docstring_tokens": ["Find", "a", "method"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/Injection.java#L183-L221", "partition": "test", "index": 2510, "time": "2010-10-12 14:19:32"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/context/ObjectFactoryBuilder.java", "func_name": "ObjectFactoryBuilder.getObjectInstance", "original_string": "public Object getObjectInstance(final Object ref, final Name name, final Context nameCtx, final Hashtable<?, ?> environment) throws Exception {\n        final ClassLoader classLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        if (classLoader == null) {\n            return ref;\n        }\n        final String factoriesProp = (String) environment.get(Context.OBJECT_FACTORIES);\n        if (factoriesProp != null) {\n            final String[] classes = factoriesProp.split(\":\");\n            for (String className : classes) {\n                try {\n                    final Class<?> factoryClass = classLoader.loadClass(className);\n                    final ObjectFactory objectFactory = ObjectFactory.class.cast(factoryClass.newInstance());\n                    final Object result = objectFactory.getObjectInstance(ref, name, nameCtx, environment);\n                    if (result != null) {\n                        return result;\n                    }\n                } catch (Throwable ignored) {\n                }\n            }\n        }\n        return ref;\n    }", "language": "java", "code": "public Object getObjectInstance(final Object ref, final Name name, final Context nameCtx, final Hashtable<?, ?> environment) throws Exception {\n        final ClassLoader classLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        if (classLoader == null) {\n            return ref;\n        }\n        final String factoriesProp = (String) environment.get(Context.OBJECT_FACTORIES);\n        if (factoriesProp != null) {\n            final String[] classes = factoriesProp.split(\":\");\n            for (String className : classes) {\n                try {\n                    final Class<?> factoryClass = classLoader.loadClass(className);\n                    final ObjectFactory objectFactory = ObjectFactory.class.cast(factoryClass.newInstance());\n                    final Object result = objectFactory.getObjectInstance(ref, name, nameCtx, environment);\n                    if (result != null) {\n                        return result;\n                    }\n                } catch (Throwable ignored) {\n                }\n            }\n        }\n        return ref;\n    }", "code_tokens": ["public", "Object", "getObjectInstance", "(", "final", "Object", "ref", ",", "final", "Name", "name", ",", "final", "Context", "nameCtx", ",", "final", "Hashtable", "<", "?", ",", "?", ">", "environment", ")", "throws", "Exception", "{", "final", "ClassLoader", "classLoader", "=", "WildFlySecurityManager", ".", "getCurrentContextClassLoaderPrivileged", "(", ")", ";", "if", "(", "classLoader", "==", "null", ")", "{", "return", "ref", ";", "}", "final", "String", "factoriesProp", "=", "(", "String", ")", "environment", ".", "get", "(", "Context", ".", "OBJECT_FACTORIES", ")", ";", "if", "(", "factoriesProp", "!=", "null", ")", "{", "final", "String", "[", "]", "classes", "=", "factoriesProp", ".", "split", "(", "\":\"", ")", ";", "for", "(", "String", "className", ":", "classes", ")", "{", "try", "{", "final", "Class", "<", "?", ">", "factoryClass", "=", "classLoader", ".", "loadClass", "(", "className", ")", ";", "final", "ObjectFactory", "objectFactory", "=", "ObjectFactory", ".", "class", ".", "cast", "(", "factoryClass", ".", "newInstance", "(", ")", ")", ";", "final", "Object", "result", "=", "objectFactory", ".", "getObjectInstance", "(", "ref", ",", "name", ",", "nameCtx", ",", "environment", ")", ";", "if", "(", "result", "!=", "null", ")", "{", "return", "result", ";", "}", "}", "catch", "(", "Throwable", "ignored", ")", "{", "}", "}", "}", "return", "ref", ";", "}"], "docstring": "Create an object instance.\n\n@param ref         Object containing reference information\n@param name        The name relative to nameCtx\n@param nameCtx     The naming context\n@param environment The environment information\n@return The object\n@throws Exception If any error occur", "docstring_tokens": ["Create", "an", "object", "instance", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/context/ObjectFactoryBuilder.java#L89-L110", "partition": "test", "index": 2648, "time": "2010-10-12 16:09:37"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/services/resourceadapters/deployment/registry/ResourceAdapterDeploymentRegistryImpl.java", "func_name": "ResourceAdapterDeploymentRegistryImpl.unregisterResourceAdapterDeployment", "original_string": "public void unregisterResourceAdapterDeployment(ResourceAdapterDeployment deployment) {\n        if (deployment == null)\n            throw new IllegalArgumentException(ConnectorLogger.ROOT_LOGGER.nullVar(\"Deployment\"));\n\n        DEPLOYMENT_CONNECTOR_REGISTRY_LOGGER.tracef(\"Removing deployment: %s\", deployment);\n\n        deployments.remove(deployment);\n    }", "language": "java", "code": "public void unregisterResourceAdapterDeployment(ResourceAdapterDeployment deployment) {\n        if (deployment == null)\n            throw new IllegalArgumentException(ConnectorLogger.ROOT_LOGGER.nullVar(\"Deployment\"));\n\n        DEPLOYMENT_CONNECTOR_REGISTRY_LOGGER.tracef(\"Removing deployment: %s\", deployment);\n\n        deployments.remove(deployment);\n    }", "code_tokens": ["public", "void", "unregisterResourceAdapterDeployment", "(", "ResourceAdapterDeployment", "deployment", ")", "{", "if", "(", "deployment", "==", "null", ")", "throw", "new", "IllegalArgumentException", "(", "ConnectorLogger", ".", "ROOT_LOGGER", ".", "nullVar", "(", "\"Deployment\"", ")", ")", ";", "DEPLOYMENT_CONNECTOR_REGISTRY_LOGGER", ".", "tracef", "(", "\"Removing deployment: %s\"", ",", "deployment", ")", ";", "deployments", ".", "remove", "(", "deployment", ")", ";", "}"], "docstring": "Unregister a resource adapter deployment\n@param deployment The deployment", "docstring_tokens": ["Unregister", "a", "resource", "adapter", "deployment"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/services/resourceadapters/deployment/registry/ResourceAdapterDeploymentRegistryImpl.java#L67-L74", "partition": "test", "index": 2517, "time": "2010-10-27 16:20:38"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/services/resourceadapters/deployment/registry/ResourceAdapterDeploymentRegistryImpl.java", "func_name": "ResourceAdapterDeploymentRegistryImpl.registerResourceAdapterDeployment", "original_string": "public void registerResourceAdapterDeployment(ResourceAdapterDeployment deployment) {\n        if (deployment == null)\n            throw new IllegalArgumentException(ConnectorLogger.ROOT_LOGGER.nullVar(\"Deployment\"));\n\n        DEPLOYMENT_CONNECTOR_REGISTRY_LOGGER.tracef(\"Adding deployment: %s\", deployment);\n\n        deployments.add(deployment);\n    }", "language": "java", "code": "public void registerResourceAdapterDeployment(ResourceAdapterDeployment deployment) {\n        if (deployment == null)\n            throw new IllegalArgumentException(ConnectorLogger.ROOT_LOGGER.nullVar(\"Deployment\"));\n\n        DEPLOYMENT_CONNECTOR_REGISTRY_LOGGER.tracef(\"Adding deployment: %s\", deployment);\n\n        deployments.add(deployment);\n    }", "code_tokens": ["public", "void", "registerResourceAdapterDeployment", "(", "ResourceAdapterDeployment", "deployment", ")", "{", "if", "(", "deployment", "==", "null", ")", "throw", "new", "IllegalArgumentException", "(", "ConnectorLogger", ".", "ROOT_LOGGER", ".", "nullVar", "(", "\"Deployment\"", ")", ")", ";", "DEPLOYMENT_CONNECTOR_REGISTRY_LOGGER", ".", "tracef", "(", "\"Adding deployment: %s\"", ",", "deployment", ")", ";", "deployments", ".", "add", "(", "deployment", ")", ";", "}"], "docstring": "Register a resource adapter deployment\n@param deployment The deployment", "docstring_tokens": ["Register", "a", "resource", "adapter", "deployment"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/services/resourceadapters/deployment/registry/ResourceAdapterDeploymentRegistryImpl.java#L54-L61", "partition": "test", "index": 2516, "time": "2010-10-27 16:20:38"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/context/ModularReference.java", "func_name": "ModularReference.create", "original_string": "public static ModularReference create(final Class<?> type, final Class<?> factoryClass) {\n        return create(type.getName(), factoryClass);\n    }", "language": "java", "code": "public static ModularReference create(final Class<?> type, final Class<?> factoryClass) {\n        return create(type.getName(), factoryClass);\n    }", "code_tokens": ["public", "static", "ModularReference", "create", "(", "final", "Class", "<", "?", ">", "type", ",", "final", "Class", "<", "?", ">", "factoryClass", ")", "{", "return", "create", "(", "type", ".", "getName", "(", ")", ",", "factoryClass", ")", ";", "}"], "docstring": "Create a ModuleReference from a target type and factory class.\n\n@param type The class type for the reference\n@param factoryClass The factory class\n@return A ModularReference", "docstring_tokens": ["Create", "a", "ModuleReference", "from", "a", "target", "type", "and", "factory", "class", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/context/ModularReference.java#L47-L49", "partition": "test", "index": 2786, "time": "2010-10-28 10:54:59"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/context/ModularReference.java", "func_name": "ModularReference.create", "original_string": "public static ModularReference create(final String className, final Class<?> factoryClass) {\n        return new ModularReference(className, factoryClass.getName(), Module.forClass(factoryClass).getIdentifier());\n    }", "language": "java", "code": "public static ModularReference create(final String className, final Class<?> factoryClass) {\n        return new ModularReference(className, factoryClass.getName(), Module.forClass(factoryClass).getIdentifier());\n    }", "code_tokens": ["public", "static", "ModularReference", "create", "(", "final", "String", "className", ",", "final", "Class", "<", "?", ">", "factoryClass", ")", "{", "return", "new", "ModularReference", "(", "className", ",", "factoryClass", ".", "getName", "(", ")", ",", "Module", ".", "forClass", "(", "factoryClass", ")", ".", "getIdentifier", "(", ")", ")", ";", "}"], "docstring": "Create a ModuleReference from a target class name and factory class.\n\n@param className The class name for the reference\n@param factoryClass The factory class\n@return A ModularReference", "docstring_tokens": ["Create", "a", "ModuleReference", "from", "a", "target", "class", "name", "and", "factory", "class", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/context/ModularReference.java#L58-L60", "partition": "test", "index": 2787, "time": "2010-10-28 10:54:59"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/context/ModularReference.java", "func_name": "ModularReference.create", "original_string": "public static ModularReference create(final Class<?> type, final RefAddr addr, final Class<?> factoryClass) {\n        return create(type.getName(), addr, factoryClass);\n    }", "language": "java", "code": "public static ModularReference create(final Class<?> type, final RefAddr addr, final Class<?> factoryClass) {\n        return create(type.getName(), addr, factoryClass);\n    }", "code_tokens": ["public", "static", "ModularReference", "create", "(", "final", "Class", "<", "?", ">", "type", ",", "final", "RefAddr", "addr", ",", "final", "Class", "<", "?", ">", "factoryClass", ")", "{", "return", "create", "(", "type", ".", "getName", "(", ")", ",", "addr", ",", "factoryClass", ")", ";", "}"], "docstring": "Create a ModuleReference from a target type, reference address and factory class.\n\n@param type The class type for the reference\n@param addr The address of the object\n@param factoryClass The factory class\n@return A ModularReference", "docstring_tokens": ["Create", "a", "ModuleReference", "from", "a", "target", "type", "reference", "address", "and", "factory", "class", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/context/ModularReference.java#L71-L73", "partition": "test", "index": 2788, "time": "2010-10-28 10:54:59"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/deployers/deployment/AbstractDeploymentModelBuilder.java", "func_name": "AbstractDeploymentModelBuilder.newHttpEndpoint", "original_string": "protected final Endpoint newHttpEndpoint(final String endpointClass, final String endpointName, final Deployment dep) {\n        if (endpointName == null) throw WSLogger.ROOT_LOGGER.nullEndpointName();\n        if (endpointClass == null) throw WSLogger.ROOT_LOGGER.nullEndpointClass();\n\n        final Endpoint endpoint = this.deploymentModelFactory.newHttpEndpoint(endpointClass);\n        endpoint.setShortName(endpointName);\n        endpoint.setType(endpointType);\n        dep.getService().addEndpoint(endpoint);\n\n        return endpoint;\n    }", "language": "java", "code": "protected final Endpoint newHttpEndpoint(final String endpointClass, final String endpointName, final Deployment dep) {\n        if (endpointName == null) throw WSLogger.ROOT_LOGGER.nullEndpointName();\n        if (endpointClass == null) throw WSLogger.ROOT_LOGGER.nullEndpointClass();\n\n        final Endpoint endpoint = this.deploymentModelFactory.newHttpEndpoint(endpointClass);\n        endpoint.setShortName(endpointName);\n        endpoint.setType(endpointType);\n        dep.getService().addEndpoint(endpoint);\n\n        return endpoint;\n    }", "code_tokens": ["protected", "final", "Endpoint", "newHttpEndpoint", "(", "final", "String", "endpointClass", ",", "final", "String", "endpointName", ",", "final", "Deployment", "dep", ")", "{", "if", "(", "endpointName", "==", "null", ")", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "nullEndpointName", "(", ")", ";", "if", "(", "endpointClass", "==", "null", ")", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "nullEndpointClass", "(", ")", ";", "final", "Endpoint", "endpoint", "=", "this", ".", "deploymentModelFactory", ".", "newHttpEndpoint", "(", "endpointClass", ")", ";", "endpoint", ".", "setShortName", "(", "endpointName", ")", ";", "endpoint", ".", "setType", "(", "endpointType", ")", ";", "dep", ".", "getService", "(", ")", ".", "addEndpoint", "(", "endpoint", ")", ";", "return", "endpoint", ";", "}"], "docstring": "Creates new Http Web Service endpoint.\n\n@param endpointClass endpoint class name\n@param endpointName endpoint name\n@param dep deployment\n@return WS endpoint", "docstring_tokens": ["Creates", "new", "Http", "Web", "Service", "endpoint", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/deployers/deployment/AbstractDeploymentModelBuilder.java#L146-L156", "partition": "test", "index": 2686, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getOptionalAttachment", "original_string": "public static <A> A getOptionalAttachment(final DeploymentUnit unit, final AttachmentKey<A> key) {\n        return unit.getAttachment(key);\n    }", "language": "java", "code": "public static <A> A getOptionalAttachment(final DeploymentUnit unit, final AttachmentKey<A> key) {\n        return unit.getAttachment(key);\n    }", "code_tokens": ["public", "static", "<", "A", ">", "A", "getOptionalAttachment", "(", "final", "DeploymentUnit", "unit", ",", "final", "AttachmentKey", "<", "A", ">", "key", ")", "{", "return", "unit", ".", "getAttachment", "(", "key", ")", ";", "}"], "docstring": "Returns optional attachment value from deployment unit or null if not bound.\n\n@param <A> expected value\n@param unit deployment unit\n@param key attachment key\n@return optional attachment value or null", "docstring_tokens": ["Returns", "optional", "attachment", "value", "from", "deployment", "unit", "or", "null", "if", "not", "bound", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L172-L174", "partition": "test", "index": 2671, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getRequiredAttachment", "original_string": "public static <A> A getRequiredAttachment(final DeploymentUnit unit, final AttachmentKey<A> key) {\n        final A value = unit.getAttachment(key);\n        if (value == null) {\n            throw new IllegalStateException();\n        }\n\n        return value;\n    }", "language": "java", "code": "public static <A> A getRequiredAttachment(final DeploymentUnit unit, final AttachmentKey<A> key) {\n        final A value = unit.getAttachment(key);\n        if (value == null) {\n            throw new IllegalStateException();\n        }\n\n        return value;\n    }", "code_tokens": ["public", "static", "<", "A", ">", "A", "getRequiredAttachment", "(", "final", "DeploymentUnit", "unit", ",", "final", "AttachmentKey", "<", "A", ">", "key", ")", "{", "final", "A", "value", "=", "unit", ".", "getAttachment", "(", "key", ")", ";", "if", "(", "value", "==", "null", ")", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "return", "value", ";", "}"], "docstring": "Returns required attachment value from deployment unit.\n\n@param <A> expected value\n@param unit deployment unit\n@param key attachment key\n@return required attachment\n@throws IllegalStateException if attachment value is null", "docstring_tokens": ["Returns", "required", "attachment", "value", "from", "deployment", "unit", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L155-L162", "partition": "test", "index": 2670, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getServletForName", "original_string": "public static ServletMetaData getServletForName(final JBossWebMetaData jbossWebMD, final String servletName) {\n        for (JBossServletMetaData servlet : jbossWebMD.getServlets()) {\n            if (servlet.getName().equals(servletName)) {\n                return servlet;\n            }\n        }\n\n        return null;\n    }", "language": "java", "code": "public static ServletMetaData getServletForName(final JBossWebMetaData jbossWebMD, final String servletName) {\n        for (JBossServletMetaData servlet : jbossWebMD.getServlets()) {\n            if (servlet.getName().equals(servletName)) {\n                return servlet;\n            }\n        }\n\n        return null;\n    }", "code_tokens": ["public", "static", "ServletMetaData", "getServletForName", "(", "final", "JBossWebMetaData", "jbossWebMD", ",", "final", "String", "servletName", ")", "{", "for", "(", "JBossServletMetaData", "servlet", ":", "jbossWebMD", ".", "getServlets", "(", ")", ")", "{", "if", "(", "servlet", ".", "getName", "(", ")", ".", "equals", "(", "servletName", ")", ")", "{", "return", "servlet", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Returns servlet meta data for requested servlet name.\n\n@param jbossWebMD jboss web meta data\n@param servletName servlet name\n@return servlet meta data", "docstring_tokens": ["Returns", "servlet", "meta", "data", "for", "requested", "servlet", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L136-L144", "partition": "test", "index": 2669, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getEndpointClassName", "original_string": "public static String getEndpointClassName(final ServletMetaData servletMD) {\n        final String endpointClass = servletMD.getServletClass();\n        return endpointClass != null ? endpointClass.trim() : null;\n    }", "language": "java", "code": "public static String getEndpointClassName(final ServletMetaData servletMD) {\n        final String endpointClass = servletMD.getServletClass();\n        return endpointClass != null ? endpointClass.trim() : null;\n    }", "code_tokens": ["public", "static", "String", "getEndpointClassName", "(", "final", "ServletMetaData", "servletMD", ")", "{", "final", "String", "endpointClass", "=", "servletMD", ".", "getServletClass", "(", ")", ";", "return", "endpointClass", "!=", "null", "?", "endpointClass", ".", "trim", "(", ")", ":", "null", ";", "}"], "docstring": "Returns endpoint class name.\n\n@param servletMD servlet meta data\n@return endpoint class name", "docstring_tokens": ["Returns", "endpoint", "class", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L124-L127", "partition": "test", "index": 2668, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.newServletMapping", "original_string": "public static ServletMappingMetaData newServletMapping(final String servletName, final List<String> urlPatterns,\n            final List<ServletMappingMetaData> servletMappingsMD) {\n        final ServletMappingMetaData servletMappingMD = new ServletMappingMetaData();\n\n        servletMappingMD.setServletName(servletName);\n        servletMappingMD.setUrlPatterns(urlPatterns);\n        servletMappingsMD.add(servletMappingMD);\n\n        return servletMappingMD;\n    }", "language": "java", "code": "public static ServletMappingMetaData newServletMapping(final String servletName, final List<String> urlPatterns,\n            final List<ServletMappingMetaData> servletMappingsMD) {\n        final ServletMappingMetaData servletMappingMD = new ServletMappingMetaData();\n\n        servletMappingMD.setServletName(servletName);\n        servletMappingMD.setUrlPatterns(urlPatterns);\n        servletMappingsMD.add(servletMappingMD);\n\n        return servletMappingMD;\n    }", "code_tokens": ["public", "static", "ServletMappingMetaData", "newServletMapping", "(", "final", "String", "servletName", ",", "final", "List", "<", "String", ">", "urlPatterns", ",", "final", "List", "<", "ServletMappingMetaData", ">", "servletMappingsMD", ")", "{", "final", "ServletMappingMetaData", "servletMappingMD", "=", "new", "ServletMappingMetaData", "(", ")", ";", "servletMappingMD", ".", "setServletName", "(", "servletName", ")", ";", "servletMappingMD", ".", "setUrlPatterns", "(", "urlPatterns", ")", ";", "servletMappingsMD", ".", "add", "(", "servletMappingMD", ")", ";", "return", "servletMappingMD", ";", "}"], "docstring": "Creates new servlet mapping meta data and associates them with servlet mappings meta data.\n\n@param servletName servlet name\n@param urlPatterns URL patterns\n@param servletMappingsMD servlet mapping meta data\n@return new servlet mapping meta data", "docstring_tokens": ["Creates", "new", "servlet", "mapping", "meta", "data", "and", "associates", "them", "with", "servlet", "mappings", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L310-L319", "partition": "test", "index": 2568, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/AbstractSecurityMetaDataAccessorEJB.java", "func_name": "AbstractSecurityMetaDataAccessorEJB.getEjbSecurityMetaData", "original_string": "private EJBSecurityMetaData getEjbSecurityMetaData(final Endpoint endpoint) {\n        final String ejbName = endpoint.getShortName();\n        final Deployment dep = endpoint.getService().getDeployment();\n        final EJBArchiveMetaData ejbArchiveMD = WSHelper.getOptionalAttachment(dep, EJBArchiveMetaData.class);\n        final EJBMetaData ejbMD = ejbArchiveMD != null ? ejbArchiveMD.getBeanByEjbName(ejbName) : null;\n\n        return ejbMD != null ? ejbMD.getSecurityMetaData() : null;\n    }", "language": "java", "code": "private EJBSecurityMetaData getEjbSecurityMetaData(final Endpoint endpoint) {\n        final String ejbName = endpoint.getShortName();\n        final Deployment dep = endpoint.getService().getDeployment();\n        final EJBArchiveMetaData ejbArchiveMD = WSHelper.getOptionalAttachment(dep, EJBArchiveMetaData.class);\n        final EJBMetaData ejbMD = ejbArchiveMD != null ? ejbArchiveMD.getBeanByEjbName(ejbName) : null;\n\n        return ejbMD != null ? ejbMD.getSecurityMetaData() : null;\n    }", "code_tokens": ["private", "EJBSecurityMetaData", "getEjbSecurityMetaData", "(", "final", "Endpoint", "endpoint", ")", "{", "final", "String", "ejbName", "=", "endpoint", ".", "getShortName", "(", ")", ";", "final", "Deployment", "dep", "=", "endpoint", ".", "getService", "(", ")", ".", "getDeployment", "(", ")", ";", "final", "EJBArchiveMetaData", "ejbArchiveMD", "=", "WSHelper", ".", "getOptionalAttachment", "(", "dep", ",", "EJBArchiveMetaData", ".", "class", ")", ";", "final", "EJBMetaData", "ejbMD", "=", "ejbArchiveMD", "!=", "null", "?", "ejbArchiveMD", ".", "getBeanByEjbName", "(", "ejbName", ")", ":", "null", ";", "return", "ejbMD", "!=", "null", "?", "ejbMD", ".", "getSecurityMetaData", "(", ")", ":", "null", ";", "}"], "docstring": "Gets EJB security meta data if associated with EJB endpoint.\n\n@param endpoint EJB webservice endpoint\n@return EJB security meta data or null", "docstring_tokens": ["Gets", "EJB", "security", "meta", "data", "if", "associated", "with", "EJB", "endpoint", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/AbstractSecurityMetaDataAccessorEJB.java#L153-L160", "partition": "test", "index": 2530, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.newServlet", "original_string": "public static JBossServletMetaData newServlet(final String servletName, final String servletClass,\n            final JBossServletsMetaData servletsMD) {\n        final JBossServletMetaData servletMD = new JBossServletMetaData();\n\n        servletMD.setServletName(servletName);\n        servletMD.setServletClass(servletClass);\n        servletsMD.add(servletMD);\n\n        return servletMD;\n    }", "language": "java", "code": "public static JBossServletMetaData newServlet(final String servletName, final String servletClass,\n            final JBossServletsMetaData servletsMD) {\n        final JBossServletMetaData servletMD = new JBossServletMetaData();\n\n        servletMD.setServletName(servletName);\n        servletMD.setServletClass(servletClass);\n        servletsMD.add(servletMD);\n\n        return servletMD;\n    }", "code_tokens": ["public", "static", "JBossServletMetaData", "newServlet", "(", "final", "String", "servletName", ",", "final", "String", "servletClass", ",", "final", "JBossServletsMetaData", "servletsMD", ")", "{", "final", "JBossServletMetaData", "servletMD", "=", "new", "JBossServletMetaData", "(", ")", ";", "servletMD", ".", "setServletName", "(", "servletName", ")", ";", "servletMD", ".", "setServletClass", "(", "servletClass", ")", ";", "servletsMD", ".", "add", "(", "servletMD", ")", ";", "return", "servletMD", ";", "}"], "docstring": "Creates new servlet meta data and associates them with servlets meta data.\n\n@param servletName servlet name\n@param servletClass servlet class name\n@param servletsMD servlets meta data\n@return new servlet meta data", "docstring_tokens": ["Creates", "new", "servlet", "meta", "data", "and", "associates", "them", "with", "servlets", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L291-L300", "partition": "test", "index": 2567, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.newWebResourceCollection", "original_string": "public static WebResourceCollectionMetaData newWebResourceCollection(final String servletName, final String urlPattern,\n            final boolean securedWsdl, final WebResourceCollectionsMetaData webResourceCollectionsMD) {\n        final WebResourceCollectionMetaData webResourceCollectionMD = new WebResourceCollectionMetaData();\n\n        webResourceCollectionMD.setWebResourceName(servletName);\n        webResourceCollectionMD.setUrlPatterns(WebMetaDataHelper.getUrlPatterns(urlPattern));\n        webResourceCollectionMD.setHttpMethods(WebMetaDataHelper.getHttpMethods(securedWsdl));\n        webResourceCollectionsMD.add(webResourceCollectionMD);\n\n        return webResourceCollectionMD;\n    }", "language": "java", "code": "public static WebResourceCollectionMetaData newWebResourceCollection(final String servletName, final String urlPattern,\n            final boolean securedWsdl, final WebResourceCollectionsMetaData webResourceCollectionsMD) {\n        final WebResourceCollectionMetaData webResourceCollectionMD = new WebResourceCollectionMetaData();\n\n        webResourceCollectionMD.setWebResourceName(servletName);\n        webResourceCollectionMD.setUrlPatterns(WebMetaDataHelper.getUrlPatterns(urlPattern));\n        webResourceCollectionMD.setHttpMethods(WebMetaDataHelper.getHttpMethods(securedWsdl));\n        webResourceCollectionsMD.add(webResourceCollectionMD);\n\n        return webResourceCollectionMD;\n    }", "code_tokens": ["public", "static", "WebResourceCollectionMetaData", "newWebResourceCollection", "(", "final", "String", "servletName", ",", "final", "String", "urlPattern", ",", "final", "boolean", "securedWsdl", ",", "final", "WebResourceCollectionsMetaData", "webResourceCollectionsMD", ")", "{", "final", "WebResourceCollectionMetaData", "webResourceCollectionMD", "=", "new", "WebResourceCollectionMetaData", "(", ")", ";", "webResourceCollectionMD", ".", "setWebResourceName", "(", "servletName", ")", ";", "webResourceCollectionMD", ".", "setUrlPatterns", "(", "WebMetaDataHelper", ".", "getUrlPatterns", "(", "urlPattern", ")", ")", ";", "webResourceCollectionMD", ".", "setHttpMethods", "(", "WebMetaDataHelper", ".", "getHttpMethods", "(", "securedWsdl", ")", ")", ";", "webResourceCollectionsMD", ".", "add", "(", "webResourceCollectionMD", ")", ";", "return", "webResourceCollectionMD", ";", "}"], "docstring": "Creates new web resource collection meta data and associates them with web resource collections meta data.\n\n@param servletName servlet name\n@param urlPattern URL pattern\n@param securedWsdl whether WSDL access is secured\n@param webResourceCollectionsMD web resource collections meta data\n@return new web resource collection meta data", "docstring_tokens": ["Creates", "new", "web", "resource", "collection", "meta", "data", "and", "associates", "them", "with", "web", "resource", "collections", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L271-L281", "partition": "test", "index": 2566, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.newSecurityConstraint", "original_string": "public static SecurityConstraintMetaData newSecurityConstraint(final List<SecurityConstraintMetaData> securityConstraintsMD) {\n        final SecurityConstraintMetaData securityConstraintMD = new SecurityConstraintMetaData();\n\n        securityConstraintsMD.add(securityConstraintMD);\n\n        return securityConstraintMD;\n    }", "language": "java", "code": "public static SecurityConstraintMetaData newSecurityConstraint(final List<SecurityConstraintMetaData> securityConstraintsMD) {\n        final SecurityConstraintMetaData securityConstraintMD = new SecurityConstraintMetaData();\n\n        securityConstraintsMD.add(securityConstraintMD);\n\n        return securityConstraintMD;\n    }", "code_tokens": ["public", "static", "SecurityConstraintMetaData", "newSecurityConstraint", "(", "final", "List", "<", "SecurityConstraintMetaData", ">", "securityConstraintsMD", ")", "{", "final", "SecurityConstraintMetaData", "securityConstraintMD", "=", "new", "SecurityConstraintMetaData", "(", ")", ";", "securityConstraintsMD", ".", "add", "(", "securityConstraintMD", ")", ";", "return", "securityConstraintMD", ";", "}"], "docstring": "Creates new security constraint meta data and associates them with security constraints meta data.\n\n@param securityConstraintsMD security constraints meta data\n@return new security constraing meta data", "docstring_tokens": ["Creates", "new", "security", "constraint", "meta", "data", "and", "associates", "them", "with", "security", "constraints", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L254-L260", "partition": "test", "index": 2565, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.getServletInitParams", "original_string": "public static List<ParamValueMetaData> getServletInitParams(final ServletMetaData servletMD) {\n        List<ParamValueMetaData> initParamsMD = servletMD.getInitParam();\n\n        if (initParamsMD == null) {\n            initParamsMD = new LinkedList<ParamValueMetaData>();\n            servletMD.setInitParam(initParamsMD);\n        }\n\n        return initParamsMD;\n    }", "language": "java", "code": "public static List<ParamValueMetaData> getServletInitParams(final ServletMetaData servletMD) {\n        List<ParamValueMetaData> initParamsMD = servletMD.getInitParam();\n\n        if (initParamsMD == null) {\n            initParamsMD = new LinkedList<ParamValueMetaData>();\n            servletMD.setInitParam(initParamsMD);\n        }\n\n        return initParamsMD;\n    }", "code_tokens": ["public", "static", "List", "<", "ParamValueMetaData", ">", "getServletInitParams", "(", "final", "ServletMetaData", "servletMD", ")", "{", "List", "<", "ParamValueMetaData", ">", "initParamsMD", "=", "servletMD", ".", "getInitParam", "(", ")", ";", "if", "(", "initParamsMD", "==", "null", ")", "{", "initParamsMD", "=", "new", "LinkedList", "<", "ParamValueMetaData", ">", "(", ")", ";", "servletMD", ".", "setInitParam", "(", "initParamsMD", ")", ";", "}", "return", "initParamsMD", ";", "}"], "docstring": "Gets init parameters meta data from servlet meta data. If not found it creates new init parameters meta data and\nassociates them with servlet meta data.\n\n@param servletMD servlet meta data\n@return init parameters meta data", "docstring_tokens": ["Gets", "init", "parameters", "meta", "data", "from", "servlet", "meta", "data", ".", "If", "not", "found", "it", "creates", "new", "init", "parameters", "meta", "data", "and", "associates", "them", "with", "servlet", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L237-L246", "partition": "test", "index": 2564, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.newAuthConstraint", "original_string": "public static AuthConstraintMetaData newAuthConstraint(final List<String> roleNames,\n            final SecurityConstraintMetaData securityConstraintMD) {\n        final AuthConstraintMetaData authConstraintMD = new AuthConstraintMetaData();\n\n        authConstraintMD.setRoleNames(roleNames);\n        securityConstraintMD.setAuthConstraint(authConstraintMD);\n\n        return authConstraintMD;\n    }", "language": "java", "code": "public static AuthConstraintMetaData newAuthConstraint(final List<String> roleNames,\n            final SecurityConstraintMetaData securityConstraintMD) {\n        final AuthConstraintMetaData authConstraintMD = new AuthConstraintMetaData();\n\n        authConstraintMD.setRoleNames(roleNames);\n        securityConstraintMD.setAuthConstraint(authConstraintMD);\n\n        return authConstraintMD;\n    }", "code_tokens": ["public", "static", "AuthConstraintMetaData", "newAuthConstraint", "(", "final", "List", "<", "String", ">", "roleNames", ",", "final", "SecurityConstraintMetaData", "securityConstraintMD", ")", "{", "final", "AuthConstraintMetaData", "authConstraintMD", "=", "new", "AuthConstraintMetaData", "(", ")", ";", "authConstraintMD", ".", "setRoleNames", "(", "roleNames", ")", ";", "securityConstraintMD", ".", "setAuthConstraint", "(", "authConstraintMD", ")", ";", "return", "authConstraintMD", ";", "}"], "docstring": "Creates new authentication constraint and associates it with security constraint meta data.\n\n@param roleNames roles\n@param securityConstraintMD security constraint meta data\n@return new authentication constraint meta data", "docstring_tokens": ["Creates", "new", "authentication", "constraint", "and", "associates", "it", "with", "security", "constraint", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L328-L336", "partition": "test", "index": 2569, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.getWebResourceCollections", "original_string": "public static WebResourceCollectionsMetaData getWebResourceCollections(final SecurityConstraintMetaData securityConstraintMD) {\n        WebResourceCollectionsMetaData webResourceCollectionsMD = securityConstraintMD.getResourceCollections();\n\n        if (webResourceCollectionsMD == null) {\n            webResourceCollectionsMD = new WebResourceCollectionsMetaData();\n            securityConstraintMD.setResourceCollections(webResourceCollectionsMD);\n        }\n\n        return webResourceCollectionsMD;\n    }", "language": "java", "code": "public static WebResourceCollectionsMetaData getWebResourceCollections(final SecurityConstraintMetaData securityConstraintMD) {\n        WebResourceCollectionsMetaData webResourceCollectionsMD = securityConstraintMD.getResourceCollections();\n\n        if (webResourceCollectionsMD == null) {\n            webResourceCollectionsMD = new WebResourceCollectionsMetaData();\n            securityConstraintMD.setResourceCollections(webResourceCollectionsMD);\n        }\n\n        return webResourceCollectionsMD;\n    }", "code_tokens": ["public", "static", "WebResourceCollectionsMetaData", "getWebResourceCollections", "(", "final", "SecurityConstraintMetaData", "securityConstraintMD", ")", "{", "WebResourceCollectionsMetaData", "webResourceCollectionsMD", "=", "securityConstraintMD", ".", "getResourceCollections", "(", ")", ";", "if", "(", "webResourceCollectionsMD", "==", "null", ")", "{", "webResourceCollectionsMD", "=", "new", "WebResourceCollectionsMetaData", "(", ")", ";", "securityConstraintMD", ".", "setResourceCollections", "(", "webResourceCollectionsMD", ")", ";", "}", "return", "webResourceCollectionsMD", ";", "}"], "docstring": "Gets web resource collections meta data from security constraint meta data. If not found it creates new web resource\ncollections meta data and associates them with security constraint meta data.\n\n@param securityConstraintMD security constraint meta data\n@return web resource collections meta data", "docstring_tokens": ["Gets", "web", "resource", "collections", "meta", "data", "from", "security", "constraint", "meta", "data", ".", "If", "not", "found", "it", "creates", "new", "web", "resource", "collections", "meta", "data", "and", "associates", "them", "with", "security", "constraint", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L219-L228", "partition": "test", "index": 2563, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.getContextParams", "original_string": "public static List<ParamValueMetaData> getContextParams(final JBossWebMetaData jbossWebMD) {\n        List<ParamValueMetaData> contextParamsMD = jbossWebMD.getContextParams();\n\n        if (contextParamsMD == null) {\n            contextParamsMD = new LinkedList<ParamValueMetaData>();\n            jbossWebMD.setContextParams(contextParamsMD);\n        }\n\n        return contextParamsMD;\n    }", "language": "java", "code": "public static List<ParamValueMetaData> getContextParams(final JBossWebMetaData jbossWebMD) {\n        List<ParamValueMetaData> contextParamsMD = jbossWebMD.getContextParams();\n\n        if (contextParamsMD == null) {\n            contextParamsMD = new LinkedList<ParamValueMetaData>();\n            jbossWebMD.setContextParams(contextParamsMD);\n        }\n\n        return contextParamsMD;\n    }", "code_tokens": ["public", "static", "List", "<", "ParamValueMetaData", ">", "getContextParams", "(", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "List", "<", "ParamValueMetaData", ">", "contextParamsMD", "=", "jbossWebMD", ".", "getContextParams", "(", ")", ";", "if", "(", "contextParamsMD", "==", "null", ")", "{", "contextParamsMD", "=", "new", "LinkedList", "<", "ParamValueMetaData", ">", "(", ")", ";", "jbossWebMD", ".", "setContextParams", "(", "contextParamsMD", ")", ";", "}", "return", "contextParamsMD", ";", "}"], "docstring": "Gets context parameters meta data from jboss web meta data. If not found it creates new context parameters meta data and\nassociates them with jboss web meta data.\n\n@param jbossWebMD jboss web meta data\n@return context parameters meta data", "docstring_tokens": ["Gets", "context", "parameters", "meta", "data", "from", "jboss", "web", "meta", "data", ".", "If", "not", "found", "it", "creates", "new", "context", "parameters", "meta", "data", "and", "associates", "them", "with", "jboss", "web", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L201-L210", "partition": "test", "index": 2562, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.getLoginConfig", "original_string": "public static LoginConfigMetaData getLoginConfig(final JBossWebMetaData jbossWebMD) {\n        LoginConfigMetaData loginConfigMD = jbossWebMD.getLoginConfig();\n\n        if (loginConfigMD == null) {\n            loginConfigMD = new LoginConfigMetaData();\n            jbossWebMD.setLoginConfig(loginConfigMD);\n        }\n\n        return loginConfigMD;\n    }", "language": "java", "code": "public static LoginConfigMetaData getLoginConfig(final JBossWebMetaData jbossWebMD) {\n        LoginConfigMetaData loginConfigMD = jbossWebMD.getLoginConfig();\n\n        if (loginConfigMD == null) {\n            loginConfigMD = new LoginConfigMetaData();\n            jbossWebMD.setLoginConfig(loginConfigMD);\n        }\n\n        return loginConfigMD;\n    }", "code_tokens": ["public", "static", "LoginConfigMetaData", "getLoginConfig", "(", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "LoginConfigMetaData", "loginConfigMD", "=", "jbossWebMD", ".", "getLoginConfig", "(", ")", ";", "if", "(", "loginConfigMD", "==", "null", ")", "{", "loginConfigMD", "=", "new", "LoginConfigMetaData", "(", ")", ";", "jbossWebMD", ".", "setLoginConfig", "(", "loginConfigMD", ")", ";", "}", "return", "loginConfigMD", ";", "}"], "docstring": "Gets login config meta data from jboss web meta data. If not found it creates new login config meta data and associates\nthem with jboss web meta data.\n\n@param jbossWebMD jboss web meta data\n@return login config meta data", "docstring_tokens": ["Gets", "login", "config", "meta", "data", "from", "jboss", "web", "meta", "data", ".", "If", "not", "found", "it", "creates", "new", "login", "config", "meta", "data", "and", "associates", "them", "with", "jboss", "web", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L183-L192", "partition": "test", "index": 2561, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.getSecurityConstraints", "original_string": "public static List<SecurityConstraintMetaData> getSecurityConstraints(final JBossWebMetaData jbossWebMD) {\n        List<SecurityConstraintMetaData> securityConstraintsMD = jbossWebMD.getSecurityConstraints();\n\n        if (securityConstraintsMD == null) {\n            securityConstraintsMD = new LinkedList<SecurityConstraintMetaData>();\n            jbossWebMD.setSecurityConstraints(securityConstraintsMD);\n        }\n\n        return securityConstraintsMD;\n    }", "language": "java", "code": "public static List<SecurityConstraintMetaData> getSecurityConstraints(final JBossWebMetaData jbossWebMD) {\n        List<SecurityConstraintMetaData> securityConstraintsMD = jbossWebMD.getSecurityConstraints();\n\n        if (securityConstraintsMD == null) {\n            securityConstraintsMD = new LinkedList<SecurityConstraintMetaData>();\n            jbossWebMD.setSecurityConstraints(securityConstraintsMD);\n        }\n\n        return securityConstraintsMD;\n    }", "code_tokens": ["public", "static", "List", "<", "SecurityConstraintMetaData", ">", "getSecurityConstraints", "(", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "List", "<", "SecurityConstraintMetaData", ">", "securityConstraintsMD", "=", "jbossWebMD", ".", "getSecurityConstraints", "(", ")", ";", "if", "(", "securityConstraintsMD", "==", "null", ")", "{", "securityConstraintsMD", "=", "new", "LinkedList", "<", "SecurityConstraintMetaData", ">", "(", ")", ";", "jbossWebMD", ".", "setSecurityConstraints", "(", "securityConstraintsMD", ")", ";", "}", "return", "securityConstraintsMD", ";", "}"], "docstring": "Gets security constraints meta data from jboss web meta data. If not found it creates new security constraints meta data\nand associates them with jboss web meta data.\n\n@param jbossWebMD jboss web meta data\n@return security constraints meta data", "docstring_tokens": ["Gets", "security", "constraints", "meta", "data", "from", "jboss", "web", "meta", "data", ".", "If", "not", "found", "it", "creates", "new", "security", "constraints", "meta", "data", "and", "associates", "them", "with", "jboss", "web", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L165-L174", "partition": "test", "index": 2560, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.getServletMappings", "original_string": "public static List<ServletMappingMetaData> getServletMappings(final JBossWebMetaData jbossWebMD) {\n        List<ServletMappingMetaData> servletMappingsMD = jbossWebMD.getServletMappings();\n\n        if (servletMappingsMD == null) {\n            servletMappingsMD = new LinkedList<ServletMappingMetaData>();\n            jbossWebMD.setServletMappings(servletMappingsMD);\n        }\n\n        return servletMappingsMD;\n    }", "language": "java", "code": "public static List<ServletMappingMetaData> getServletMappings(final JBossWebMetaData jbossWebMD) {\n        List<ServletMappingMetaData> servletMappingsMD = jbossWebMD.getServletMappings();\n\n        if (servletMappingsMD == null) {\n            servletMappingsMD = new LinkedList<ServletMappingMetaData>();\n            jbossWebMD.setServletMappings(servletMappingsMD);\n        }\n\n        return servletMappingsMD;\n    }", "code_tokens": ["public", "static", "List", "<", "ServletMappingMetaData", ">", "getServletMappings", "(", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "List", "<", "ServletMappingMetaData", ">", "servletMappingsMD", "=", "jbossWebMD", ".", "getServletMappings", "(", ")", ";", "if", "(", "servletMappingsMD", "==", "null", ")", "{", "servletMappingsMD", "=", "new", "LinkedList", "<", "ServletMappingMetaData", ">", "(", ")", ";", "jbossWebMD", ".", "setServletMappings", "(", "servletMappingsMD", ")", ";", "}", "return", "servletMappingsMD", ";", "}"], "docstring": "Gets servlet mappings meta data from jboss web meta data. If not found it creates new servlet mappings meta data and\nassociates them with jboss web meta data.\n\n@param jbossWebMD jboss web meta data\n@return servlet mappings meta data", "docstring_tokens": ["Gets", "servlet", "mappings", "meta", "data", "from", "jboss", "web", "meta", "data", ".", "If", "not", "found", "it", "creates", "new", "servlet", "mappings", "meta", "data", "and", "associates", "them", "with", "jboss", "web", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L147-L156", "partition": "test", "index": 2559, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java", "func_name": "AbstractMetaDataBuilderPOJO.getServletUrlPatternsMappings", "original_string": "private Map<String, String> getServletUrlPatternsMappings(final JBossWebMetaData jbossWebMD, final List<POJOEndpoint> pojoEndpoints) {\n        final Map<String, String> mappings = new HashMap<String, String>();\n        final List<ServletMappingMetaData> servletMappings = WebMetaDataHelper.getServletMappings(jbossWebMD);\n\n        for (final POJOEndpoint pojoEndpoint : pojoEndpoints) {\n            mappings.put(pojoEndpoint.getName(), pojoEndpoint.getUrlPattern());\n            if (!pojoEndpoint.isDeclared()) {\n                final String endpointName = pojoEndpoint.getName();\n                final List<String> urlPatterns = WebMetaDataHelper.getUrlPatterns(pojoEndpoint.getUrlPattern());\n                WebMetaDataHelper.newServletMapping(endpointName, urlPatterns, servletMappings);\n            }\n        }\n\n        return mappings;\n    }", "language": "java", "code": "private Map<String, String> getServletUrlPatternsMappings(final JBossWebMetaData jbossWebMD, final List<POJOEndpoint> pojoEndpoints) {\n        final Map<String, String> mappings = new HashMap<String, String>();\n        final List<ServletMappingMetaData> servletMappings = WebMetaDataHelper.getServletMappings(jbossWebMD);\n\n        for (final POJOEndpoint pojoEndpoint : pojoEndpoints) {\n            mappings.put(pojoEndpoint.getName(), pojoEndpoint.getUrlPattern());\n            if (!pojoEndpoint.isDeclared()) {\n                final String endpointName = pojoEndpoint.getName();\n                final List<String> urlPatterns = WebMetaDataHelper.getUrlPatterns(pojoEndpoint.getUrlPattern());\n                WebMetaDataHelper.newServletMapping(endpointName, urlPatterns, servletMappings);\n            }\n        }\n\n        return mappings;\n    }", "code_tokens": ["private", "Map", "<", "String", ",", "String", ">", "getServletUrlPatternsMappings", "(", "final", "JBossWebMetaData", "jbossWebMD", ",", "final", "List", "<", "POJOEndpoint", ">", "pojoEndpoints", ")", "{", "final", "Map", "<", "String", ",", "String", ">", "mappings", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "final", "List", "<", "ServletMappingMetaData", ">", "servletMappings", "=", "WebMetaDataHelper", ".", "getServletMappings", "(", "jbossWebMD", ")", ";", "for", "(", "final", "POJOEndpoint", "pojoEndpoint", ":", "pojoEndpoints", ")", "{", "mappings", ".", "put", "(", "pojoEndpoint", ".", "getName", "(", ")", ",", "pojoEndpoint", ".", "getUrlPattern", "(", ")", ")", ";", "if", "(", "!", "pojoEndpoint", ".", "isDeclared", "(", ")", ")", "{", "final", "String", "endpointName", "=", "pojoEndpoint", ".", "getName", "(", ")", ";", "final", "List", "<", "String", ">", "urlPatterns", "=", "WebMetaDataHelper", ".", "getUrlPatterns", "(", "pojoEndpoint", ".", "getUrlPattern", "(", ")", ")", ";", "WebMetaDataHelper", ".", "newServletMapping", "(", "endpointName", ",", "urlPatterns", ",", "servletMappings", ")", ";", "}", "}", "return", "mappings", ";", "}"], "docstring": "Returns servlet name to url pattern mappings.\n\n@param jbossWebMD jboss web meta data\n@return servlet name to url pattern mappings", "docstring_tokens": ["Returns", "servlet", "name", "to", "url", "pattern", "mappings", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java#L185-L199", "partition": "test", "index": 2481, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java", "func_name": "AbstractMetaDataBuilderPOJO.getSecurityMetaData", "original_string": "private List<JSESecurityMetaData> getSecurityMetaData(final List<SecurityConstraintMetaData> securityConstraintsMD) {\n        final List<JSESecurityMetaData> jseSecurityMDs = new LinkedList<JSESecurityMetaData>();\n\n        if (securityConstraintsMD != null) {\n            for (final SecurityConstraintMetaData securityConstraintMD : securityConstraintsMD) {\n                final JSESecurityMetaData.Builder jseSecurityMDBuilder = new JSESecurityMetaData.Builder();\n\n                // transport guarantee\n                jseSecurityMDBuilder.setTransportGuarantee(securityConstraintMD.getTransportGuarantee().name());\n\n                // web resources\n                for (final WebResourceCollectionMetaData webResourceMD : securityConstraintMD.getResourceCollections()) {\n                    jseSecurityMDBuilder.addWebResource(webResourceMD.getName(), webResourceMD.getUrlPatterns());\n                }\n\n                jseSecurityMDs.add(jseSecurityMDBuilder.build());\n            }\n        }\n\n        return jseSecurityMDs;\n    }", "language": "java", "code": "private List<JSESecurityMetaData> getSecurityMetaData(final List<SecurityConstraintMetaData> securityConstraintsMD) {\n        final List<JSESecurityMetaData> jseSecurityMDs = new LinkedList<JSESecurityMetaData>();\n\n        if (securityConstraintsMD != null) {\n            for (final SecurityConstraintMetaData securityConstraintMD : securityConstraintsMD) {\n                final JSESecurityMetaData.Builder jseSecurityMDBuilder = new JSESecurityMetaData.Builder();\n\n                // transport guarantee\n                jseSecurityMDBuilder.setTransportGuarantee(securityConstraintMD.getTransportGuarantee().name());\n\n                // web resources\n                for (final WebResourceCollectionMetaData webResourceMD : securityConstraintMD.getResourceCollections()) {\n                    jseSecurityMDBuilder.addWebResource(webResourceMD.getName(), webResourceMD.getUrlPatterns());\n                }\n\n                jseSecurityMDs.add(jseSecurityMDBuilder.build());\n            }\n        }\n\n        return jseSecurityMDs;\n    }", "code_tokens": ["private", "List", "<", "JSESecurityMetaData", ">", "getSecurityMetaData", "(", "final", "List", "<", "SecurityConstraintMetaData", ">", "securityConstraintsMD", ")", "{", "final", "List", "<", "JSESecurityMetaData", ">", "jseSecurityMDs", "=", "new", "LinkedList", "<", "JSESecurityMetaData", ">", "(", ")", ";", "if", "(", "securityConstraintsMD", "!=", "null", ")", "{", "for", "(", "final", "SecurityConstraintMetaData", "securityConstraintMD", ":", "securityConstraintsMD", ")", "{", "final", "JSESecurityMetaData", ".", "Builder", "jseSecurityMDBuilder", "=", "new", "JSESecurityMetaData", ".", "Builder", "(", ")", ";", "// transport guarantee", "jseSecurityMDBuilder", ".", "setTransportGuarantee", "(", "securityConstraintMD", ".", "getTransportGuarantee", "(", ")", ".", "name", "(", ")", ")", ";", "// web resources", "for", "(", "final", "WebResourceCollectionMetaData", "webResourceMD", ":", "securityConstraintMD", ".", "getResourceCollections", "(", ")", ")", "{", "jseSecurityMDBuilder", ".", "addWebResource", "(", "webResourceMD", ".", "getName", "(", ")", ",", "webResourceMD", ".", "getUrlPatterns", "(", ")", ")", ";", "}", "jseSecurityMDs", ".", "add", "(", "jseSecurityMDBuilder", ".", "build", "(", ")", ")", ";", "}", "}", "return", "jseSecurityMDs", ";", "}"], "docstring": "Builds security meta data.\n\n@param securityConstraintsMD security constraints meta data\n@return universal JSE security meta data model", "docstring_tokens": ["Builds", "security", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java#L157-L177", "partition": "test", "index": 2480, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java", "func_name": "AbstractMetaDataBuilderPOJO.setConfigNameAndFile", "original_string": "private void setConfigNameAndFile(final JSEArchiveMetaData.Builder builder, final JBossWebMetaData jbossWebMD, final JBossWebservicesMetaData jbossWebservicesMD) {\n        if (jbossWebservicesMD != null) {\n           if (jbossWebservicesMD.getConfigName() != null) {\n              final String configName = jbossWebservicesMD.getConfigName();\n              builder.setConfigName(configName);\n              WSLogger.ROOT_LOGGER.tracef(\"Setting config name: %s\", configName);\n              final String configFile = jbossWebservicesMD.getConfigFile();\n              builder.setConfigFile(configFile);\n               WSLogger.ROOT_LOGGER.tracef(\"Setting config file: %s\", configFile);\n\n              // ensure higher priority against web.xml context parameters\n              return;\n           }\n        }\n\n        final List<ParamValueMetaData> contextParams = jbossWebMD.getContextParams();\n        if (contextParams != null) {\n            for (final ParamValueMetaData contextParam : contextParams) {\n                if (WSConstants.JBOSSWS_CONFIG_NAME.equals(contextParam.getParamName())) {\n                    final String configName = contextParam.getParamValue();\n                    builder.setConfigName(configName);\n                    WSLogger.ROOT_LOGGER.tracef(\"Setting config name: %s\", configName);\n                }\n                if (WSConstants.JBOSSWS_CONFIG_FILE.equals(contextParam.getParamName())) {\n                    final String configFile = contextParam.getParamValue();\n                    builder.setConfigFile(configFile);\n                    WSLogger.ROOT_LOGGER.tracef(\"Setting config file: %s\", configFile);\n                }\n            }\n        }\n    }", "language": "java", "code": "private void setConfigNameAndFile(final JSEArchiveMetaData.Builder builder, final JBossWebMetaData jbossWebMD, final JBossWebservicesMetaData jbossWebservicesMD) {\n        if (jbossWebservicesMD != null) {\n           if (jbossWebservicesMD.getConfigName() != null) {\n              final String configName = jbossWebservicesMD.getConfigName();\n              builder.setConfigName(configName);\n              WSLogger.ROOT_LOGGER.tracef(\"Setting config name: %s\", configName);\n              final String configFile = jbossWebservicesMD.getConfigFile();\n              builder.setConfigFile(configFile);\n               WSLogger.ROOT_LOGGER.tracef(\"Setting config file: %s\", configFile);\n\n              // ensure higher priority against web.xml context parameters\n              return;\n           }\n        }\n\n        final List<ParamValueMetaData> contextParams = jbossWebMD.getContextParams();\n        if (contextParams != null) {\n            for (final ParamValueMetaData contextParam : contextParams) {\n                if (WSConstants.JBOSSWS_CONFIG_NAME.equals(contextParam.getParamName())) {\n                    final String configName = contextParam.getParamValue();\n                    builder.setConfigName(configName);\n                    WSLogger.ROOT_LOGGER.tracef(\"Setting config name: %s\", configName);\n                }\n                if (WSConstants.JBOSSWS_CONFIG_FILE.equals(contextParam.getParamName())) {\n                    final String configFile = contextParam.getParamValue();\n                    builder.setConfigFile(configFile);\n                    WSLogger.ROOT_LOGGER.tracef(\"Setting config file: %s\", configFile);\n                }\n            }\n        }\n    }", "code_tokens": ["private", "void", "setConfigNameAndFile", "(", "final", "JSEArchiveMetaData", ".", "Builder", "builder", ",", "final", "JBossWebMetaData", "jbossWebMD", ",", "final", "JBossWebservicesMetaData", "jbossWebservicesMD", ")", "{", "if", "(", "jbossWebservicesMD", "!=", "null", ")", "{", "if", "(", "jbossWebservicesMD", ".", "getConfigName", "(", ")", "!=", "null", ")", "{", "final", "String", "configName", "=", "jbossWebservicesMD", ".", "getConfigName", "(", ")", ";", "builder", ".", "setConfigName", "(", "configName", ")", ";", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Setting config name: %s\"", ",", "configName", ")", ";", "final", "String", "configFile", "=", "jbossWebservicesMD", ".", "getConfigFile", "(", ")", ";", "builder", ".", "setConfigFile", "(", "configFile", ")", ";", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Setting config file: %s\"", ",", "configFile", ")", ";", "// ensure higher priority against web.xml context parameters", "return", ";", "}", "}", "final", "List", "<", "ParamValueMetaData", ">", "contextParams", "=", "jbossWebMD", ".", "getContextParams", "(", ")", ";", "if", "(", "contextParams", "!=", "null", ")", "{", "for", "(", "final", "ParamValueMetaData", "contextParam", ":", "contextParams", ")", "{", "if", "(", "WSConstants", ".", "JBOSSWS_CONFIG_NAME", ".", "equals", "(", "contextParam", ".", "getParamName", "(", ")", ")", ")", "{", "final", "String", "configName", "=", "contextParam", ".", "getParamValue", "(", ")", ";", "builder", ".", "setConfigName", "(", "configName", ")", ";", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Setting config name: %s\"", ",", "configName", ")", ";", "}", "if", "(", "WSConstants", ".", "JBOSSWS_CONFIG_FILE", ".", "equals", "(", "contextParam", ".", "getParamName", "(", ")", ")", ")", "{", "final", "String", "configFile", "=", "contextParam", ".", "getParamValue", "(", ")", ";", "builder", ".", "setConfigFile", "(", "configFile", ")", ";", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Setting config file: %s\"", ",", "configFile", ")", ";", "}", "}", "}", "}"], "docstring": "Sets config name and config file.\n\n@param builder universal JSE meta data model builder\n@param jbossWebMD jboss web meta data", "docstring_tokens": ["Sets", "config", "name", "and", "config", "file", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java#L119-L149", "partition": "test", "index": 2479, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java", "func_name": "AbstractMetaDataBuilderPOJO.create", "original_string": "JSEArchiveMetaData create(final Deployment dep) {\n        if (WSLogger.ROOT_LOGGER.isTraceEnabled()) {\n            WSLogger.ROOT_LOGGER.tracef(\"Creating JBoss agnostic meta data for POJO webservice deployment: %s\", dep.getSimpleName());\n        }\n        final JBossWebMetaData jbossWebMD = WSHelper.getRequiredAttachment(dep, JBossWebMetaData.class);\n        final DeploymentUnit unit = WSHelper.getRequiredAttachment(dep, DeploymentUnit.class);\n        final List<POJOEndpoint> pojoEndpoints = getPojoEndpoints(unit);\n        final JSEArchiveMetaData.Builder builder = new JSEArchiveMetaData.Builder();\n\n        // set context root\n        final String contextRoot = getContextRoot(dep, jbossWebMD);\n        builder.setContextRoot(contextRoot);\n        WSLogger.ROOT_LOGGER.tracef(\"Setting context root: %s\", contextRoot);\n\n        // set servlet url patterns mappings\n        final Map<String, String> servletMappings = getServletUrlPatternsMappings(jbossWebMD, pojoEndpoints);\n        builder.setServletMappings(servletMappings);\n\n        // set servlet class names mappings\n        final Map<String, String> servletClassNamesMappings = getServletClassMappings(jbossWebMD, pojoEndpoints);\n        builder.setServletClassNames(servletClassNamesMappings);\n\n        // set security domain\n        final String securityDomain = jbossWebMD.getSecurityDomain();\n        builder.setSecurityDomain(securityDomain);\n\n        // set wsdl location resolver\n        final JBossWebservicesMetaData jbossWebservicesMD = WSHelper.getOptionalAttachment(dep, JBossWebservicesMetaData.class);\n        if (jbossWebservicesMD != null) {\n            final PublishLocationAdapter resolver = new PublishLocationAdapterImpl(jbossWebservicesMD.getWebserviceDescriptions());\n            builder.setPublishLocationAdapter(resolver);\n        }\n\n        // set security meta data\n        final List<JSESecurityMetaData> jseSecurityMDs = getSecurityMetaData(jbossWebMD.getSecurityConstraints());\n        builder.setSecurityMetaData(jseSecurityMDs);\n\n        // set config name and file\n        setConfigNameAndFile(builder, jbossWebMD, jbossWebservicesMD);\n\n        return builder.build();\n    }", "language": "java", "code": "JSEArchiveMetaData create(final Deployment dep) {\n        if (WSLogger.ROOT_LOGGER.isTraceEnabled()) {\n            WSLogger.ROOT_LOGGER.tracef(\"Creating JBoss agnostic meta data for POJO webservice deployment: %s\", dep.getSimpleName());\n        }\n        final JBossWebMetaData jbossWebMD = WSHelper.getRequiredAttachment(dep, JBossWebMetaData.class);\n        final DeploymentUnit unit = WSHelper.getRequiredAttachment(dep, DeploymentUnit.class);\n        final List<POJOEndpoint> pojoEndpoints = getPojoEndpoints(unit);\n        final JSEArchiveMetaData.Builder builder = new JSEArchiveMetaData.Builder();\n\n        // set context root\n        final String contextRoot = getContextRoot(dep, jbossWebMD);\n        builder.setContextRoot(contextRoot);\n        WSLogger.ROOT_LOGGER.tracef(\"Setting context root: %s\", contextRoot);\n\n        // set servlet url patterns mappings\n        final Map<String, String> servletMappings = getServletUrlPatternsMappings(jbossWebMD, pojoEndpoints);\n        builder.setServletMappings(servletMappings);\n\n        // set servlet class names mappings\n        final Map<String, String> servletClassNamesMappings = getServletClassMappings(jbossWebMD, pojoEndpoints);\n        builder.setServletClassNames(servletClassNamesMappings);\n\n        // set security domain\n        final String securityDomain = jbossWebMD.getSecurityDomain();\n        builder.setSecurityDomain(securityDomain);\n\n        // set wsdl location resolver\n        final JBossWebservicesMetaData jbossWebservicesMD = WSHelper.getOptionalAttachment(dep, JBossWebservicesMetaData.class);\n        if (jbossWebservicesMD != null) {\n            final PublishLocationAdapter resolver = new PublishLocationAdapterImpl(jbossWebservicesMD.getWebserviceDescriptions());\n            builder.setPublishLocationAdapter(resolver);\n        }\n\n        // set security meta data\n        final List<JSESecurityMetaData> jseSecurityMDs = getSecurityMetaData(jbossWebMD.getSecurityConstraints());\n        builder.setSecurityMetaData(jseSecurityMDs);\n\n        // set config name and file\n        setConfigNameAndFile(builder, jbossWebMD, jbossWebservicesMD);\n\n        return builder.build();\n    }", "code_tokens": ["JSEArchiveMetaData", "create", "(", "final", "Deployment", "dep", ")", "{", "if", "(", "WSLogger", ".", "ROOT_LOGGER", ".", "isTraceEnabled", "(", ")", ")", "{", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Creating JBoss agnostic meta data for POJO webservice deployment: %s\"", ",", "dep", ".", "getSimpleName", "(", ")", ")", ";", "}", "final", "JBossWebMetaData", "jbossWebMD", "=", "WSHelper", ".", "getRequiredAttachment", "(", "dep", ",", "JBossWebMetaData", ".", "class", ")", ";", "final", "DeploymentUnit", "unit", "=", "WSHelper", ".", "getRequiredAttachment", "(", "dep", ",", "DeploymentUnit", ".", "class", ")", ";", "final", "List", "<", "POJOEndpoint", ">", "pojoEndpoints", "=", "getPojoEndpoints", "(", "unit", ")", ";", "final", "JSEArchiveMetaData", ".", "Builder", "builder", "=", "new", "JSEArchiveMetaData", ".", "Builder", "(", ")", ";", "// set context root", "final", "String", "contextRoot", "=", "getContextRoot", "(", "dep", ",", "jbossWebMD", ")", ";", "builder", ".", "setContextRoot", "(", "contextRoot", ")", ";", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Setting context root: %s\"", ",", "contextRoot", ")", ";", "// set servlet url patterns mappings", "final", "Map", "<", "String", ",", "String", ">", "servletMappings", "=", "getServletUrlPatternsMappings", "(", "jbossWebMD", ",", "pojoEndpoints", ")", ";", "builder", ".", "setServletMappings", "(", "servletMappings", ")", ";", "// set servlet class names mappings", "final", "Map", "<", "String", ",", "String", ">", "servletClassNamesMappings", "=", "getServletClassMappings", "(", "jbossWebMD", ",", "pojoEndpoints", ")", ";", "builder", ".", "setServletClassNames", "(", "servletClassNamesMappings", ")", ";", "// set security domain", "final", "String", "securityDomain", "=", "jbossWebMD", ".", "getSecurityDomain", "(", ")", ";", "builder", ".", "setSecurityDomain", "(", "securityDomain", ")", ";", "// set wsdl location resolver", "final", "JBossWebservicesMetaData", "jbossWebservicesMD", "=", "WSHelper", ".", "getOptionalAttachment", "(", "dep", ",", "JBossWebservicesMetaData", ".", "class", ")", ";", "if", "(", "jbossWebservicesMD", "!=", "null", ")", "{", "final", "PublishLocationAdapter", "resolver", "=", "new", "PublishLocationAdapterImpl", "(", "jbossWebservicesMD", ".", "getWebserviceDescriptions", "(", ")", ")", ";", "builder", ".", "setPublishLocationAdapter", "(", "resolver", ")", ";", "}", "// set security meta data", "final", "List", "<", "JSESecurityMetaData", ">", "jseSecurityMDs", "=", "getSecurityMetaData", "(", "jbossWebMD", ".", "getSecurityConstraints", "(", ")", ")", ";", "builder", ".", "setSecurityMetaData", "(", "jseSecurityMDs", ")", ";", "// set config name and file", "setConfigNameAndFile", "(", "builder", ",", "jbossWebMD", ",", "jbossWebservicesMD", ")", ";", "return", "builder", ".", "build", "(", ")", ";", "}"], "docstring": "Builds universal JSE meta data model that is AS agnostic.\n\n@param dep webservice deployment\n@return universal JSE meta data model", "docstring_tokens": ["Builds", "universal", "JSE", "meta", "data", "model", "that", "is", "AS", "agnostic", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java#L68-L109", "partition": "test", "index": 2478, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.getServlets", "original_string": "public static JBossServletsMetaData getServlets(final JBossWebMetaData jbossWebMD) {\n        JBossServletsMetaData servletsMD = jbossWebMD.getServlets();\n\n        if (servletsMD == null) {\n            servletsMD = new JBossServletsMetaData();\n            jbossWebMD.setServlets(servletsMD);\n        }\n\n        return servletsMD;\n    }", "language": "java", "code": "public static JBossServletsMetaData getServlets(final JBossWebMetaData jbossWebMD) {\n        JBossServletsMetaData servletsMD = jbossWebMD.getServlets();\n\n        if (servletsMD == null) {\n            servletsMD = new JBossServletsMetaData();\n            jbossWebMD.setServlets(servletsMD);\n        }\n\n        return servletsMD;\n    }", "code_tokens": ["public", "static", "JBossServletsMetaData", "getServlets", "(", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "JBossServletsMetaData", "servletsMD", "=", "jbossWebMD", ".", "getServlets", "(", ")", ";", "if", "(", "servletsMD", "==", "null", ")", "{", "servletsMD", "=", "new", "JBossServletsMetaData", "(", ")", ";", "jbossWebMD", ".", "setServlets", "(", "servletsMD", ")", ";", "}", "return", "servletsMD", ";", "}"], "docstring": "Gets servlets meta data from jboss web meta data. If not found it creates new servlets meta data and associates them\nwith jboss web meta data.\n\n@param jbossWebMD jboss web meta data\n@return servlets meta data", "docstring_tokens": ["Gets", "servlets", "meta", "data", "from", "jboss", "web", "meta", "data", ".", "If", "not", "found", "it", "creates", "new", "servlets", "meta", "data", "and", "associates", "them", "with", "jboss", "web", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L129-L138", "partition": "test", "index": 2558, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.getUrlPatterns", "original_string": "public static List<String> getUrlPatterns(final String urlPattern) {\n        final List<String> linkedList = new LinkedList<String>();\n\n        linkedList.add(urlPattern);\n\n        return linkedList;\n    }", "language": "java", "code": "public static List<String> getUrlPatterns(final String urlPattern) {\n        final List<String> linkedList = new LinkedList<String>();\n\n        linkedList.add(urlPattern);\n\n        return linkedList;\n    }", "code_tokens": ["public", "static", "List", "<", "String", ">", "getUrlPatterns", "(", "final", "String", "urlPattern", ")", "{", "final", "List", "<", "String", ">", "linkedList", "=", "new", "LinkedList", "<", "String", ">", "(", ")", ";", "linkedList", ".", "add", "(", "urlPattern", ")", ";", "return", "linkedList", ";", "}"], "docstring": "Creates URL pattern list from passed string.\n\n@param urlPattern URL pattern\n@return list wrapping passed parameter", "docstring_tokens": ["Creates", "URL", "pattern", "list", "from", "passed", "string", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L95-L101", "partition": "test", "index": 2557, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java", "func_name": "AbstractMetaDataBuilderPOJO.getServletClassMappings", "original_string": "private Map<String, String> getServletClassMappings(final JBossWebMetaData jbossWebMD, final List<POJOEndpoint> pojoEndpoints) {\n        final Map<String, String> mappings = new HashMap<String, String>();\n        final JBossServletsMetaData servlets = WebMetaDataHelper.getServlets(jbossWebMD);\n\n        for (final POJOEndpoint pojoEndpoint : pojoEndpoints) {\n            final String pojoName = pojoEndpoint.getName();\n            final String pojoClassName = pojoEndpoint.getClassName();\n            mappings.put(pojoName, pojoClassName);\n            if (!pojoEndpoint.isDeclared()) {\n                final String endpointName = pojoEndpoint.getName();\n                final String endpointClassName = pojoEndpoint.getClassName();\n                WebMetaDataHelper.newServlet(endpointName, endpointClassName, servlets);\n            }\n        }\n\n        return mappings;\n    }", "language": "java", "code": "private Map<String, String> getServletClassMappings(final JBossWebMetaData jbossWebMD, final List<POJOEndpoint> pojoEndpoints) {\n        final Map<String, String> mappings = new HashMap<String, String>();\n        final JBossServletsMetaData servlets = WebMetaDataHelper.getServlets(jbossWebMD);\n\n        for (final POJOEndpoint pojoEndpoint : pojoEndpoints) {\n            final String pojoName = pojoEndpoint.getName();\n            final String pojoClassName = pojoEndpoint.getClassName();\n            mappings.put(pojoName, pojoClassName);\n            if (!pojoEndpoint.isDeclared()) {\n                final String endpointName = pojoEndpoint.getName();\n                final String endpointClassName = pojoEndpoint.getClassName();\n                WebMetaDataHelper.newServlet(endpointName, endpointClassName, servlets);\n            }\n        }\n\n        return mappings;\n    }", "code_tokens": ["private", "Map", "<", "String", ",", "String", ">", "getServletClassMappings", "(", "final", "JBossWebMetaData", "jbossWebMD", ",", "final", "List", "<", "POJOEndpoint", ">", "pojoEndpoints", ")", "{", "final", "Map", "<", "String", ",", "String", ">", "mappings", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "final", "JBossServletsMetaData", "servlets", "=", "WebMetaDataHelper", ".", "getServlets", "(", "jbossWebMD", ")", ";", "for", "(", "final", "POJOEndpoint", "pojoEndpoint", ":", "pojoEndpoints", ")", "{", "final", "String", "pojoName", "=", "pojoEndpoint", ".", "getName", "(", ")", ";", "final", "String", "pojoClassName", "=", "pojoEndpoint", ".", "getClassName", "(", ")", ";", "mappings", ".", "put", "(", "pojoName", ",", "pojoClassName", ")", ";", "if", "(", "!", "pojoEndpoint", ".", "isDeclared", "(", ")", ")", "{", "final", "String", "endpointName", "=", "pojoEndpoint", ".", "getName", "(", ")", ";", "final", "String", "endpointClassName", "=", "pojoEndpoint", ".", "getClassName", "(", ")", ";", "WebMetaDataHelper", ".", "newServlet", "(", "endpointName", ",", "endpointClassName", ",", "servlets", ")", ";", "}", "}", "return", "mappings", ";", "}"], "docstring": "Returns servlet name to servlet class mappings.\n\n@param jbossWebMD jboss web meta data\n@return servlet name to servlet mappings", "docstring_tokens": ["Returns", "servlet", "name", "to", "servlet", "class", "mappings", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderPOJO.java#L207-L223", "partition": "test", "index": 2482, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.newUserDataConstraint", "original_string": "public static UserDataConstraintMetaData newUserDataConstraint(final String transportGuarantee,\n            final SecurityConstraintMetaData securityConstraintMD) {\n        final UserDataConstraintMetaData userDataConstraintMD = new UserDataConstraintMetaData();\n        final TransportGuaranteeType transportGuaranteeValue = TransportGuaranteeType.valueOf(transportGuarantee);\n\n        userDataConstraintMD.setTransportGuarantee(transportGuaranteeValue);\n        securityConstraintMD.setUserDataConstraint(userDataConstraintMD);\n\n        return userDataConstraintMD;\n    }", "language": "java", "code": "public static UserDataConstraintMetaData newUserDataConstraint(final String transportGuarantee,\n            final SecurityConstraintMetaData securityConstraintMD) {\n        final UserDataConstraintMetaData userDataConstraintMD = new UserDataConstraintMetaData();\n        final TransportGuaranteeType transportGuaranteeValue = TransportGuaranteeType.valueOf(transportGuarantee);\n\n        userDataConstraintMD.setTransportGuarantee(transportGuaranteeValue);\n        securityConstraintMD.setUserDataConstraint(userDataConstraintMD);\n\n        return userDataConstraintMD;\n    }", "code_tokens": ["public", "static", "UserDataConstraintMetaData", "newUserDataConstraint", "(", "final", "String", "transportGuarantee", ",", "final", "SecurityConstraintMetaData", "securityConstraintMD", ")", "{", "final", "UserDataConstraintMetaData", "userDataConstraintMD", "=", "new", "UserDataConstraintMetaData", "(", ")", ";", "final", "TransportGuaranteeType", "transportGuaranteeValue", "=", "TransportGuaranteeType", ".", "valueOf", "(", "transportGuarantee", ")", ";", "userDataConstraintMD", ".", "setTransportGuarantee", "(", "transportGuaranteeValue", ")", ";", "securityConstraintMD", ".", "setUserDataConstraint", "(", "userDataConstraintMD", ")", ";", "return", "userDataConstraintMD", ";", "}"], "docstring": "Creates new user constraint meta data and associates it with security constraint meta data.\n\n@param transportGuarantee transport guarantee value\n@param securityConstraintMD security constraint meta data\n@return new user data constraint meta data", "docstring_tokens": ["Creates", "new", "user", "constraint", "meta", "data", "and", "associates", "it", "with", "security", "constraint", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L345-L354", "partition": "test", "index": 2570, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getJBossWebMetaData", "original_string": "public static JBossWebMetaData getJBossWebMetaData(final DeploymentUnit unit) {\n        final WarMetaData warMetaData = getOptionalAttachment(unit, WarMetaData.ATTACHMENT_KEY);\n        JBossWebMetaData result = null;\n        if (warMetaData != null) {\n            result = warMetaData.getMergedJBossWebMetaData();\n            if (result == null) {\n                result = warMetaData.getJBossWebMetaData();\n            }\n        } else {\n            result = getOptionalAttachment(unit, WSAttachmentKeys.JBOSSWEB_METADATA_KEY);\n        }\n        return result;\n    }", "language": "java", "code": "public static JBossWebMetaData getJBossWebMetaData(final DeploymentUnit unit) {\n        final WarMetaData warMetaData = getOptionalAttachment(unit, WarMetaData.ATTACHMENT_KEY);\n        JBossWebMetaData result = null;\n        if (warMetaData != null) {\n            result = warMetaData.getMergedJBossWebMetaData();\n            if (result == null) {\n                result = warMetaData.getJBossWebMetaData();\n            }\n        } else {\n            result = getOptionalAttachment(unit, WSAttachmentKeys.JBOSSWEB_METADATA_KEY);\n        }\n        return result;\n    }", "code_tokens": ["public", "static", "JBossWebMetaData", "getJBossWebMetaData", "(", "final", "DeploymentUnit", "unit", ")", "{", "final", "WarMetaData", "warMetaData", "=", "getOptionalAttachment", "(", "unit", ",", "WarMetaData", ".", "ATTACHMENT_KEY", ")", ";", "JBossWebMetaData", "result", "=", "null", ";", "if", "(", "warMetaData", "!=", "null", ")", "{", "result", "=", "warMetaData", ".", "getMergedJBossWebMetaData", "(", ")", ";", "if", "(", "result", "==", "null", ")", "{", "result", "=", "warMetaData", ".", "getJBossWebMetaData", "(", ")", ";", "}", "}", "else", "{", "result", "=", "getOptionalAttachment", "(", "unit", ",", "WSAttachmentKeys", ".", "JBOSSWEB_METADATA_KEY", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Gets the JBossWebMetaData from the WarMetaData attached to the provided deployment unit, if any.\n\n@param unit\n@return the JBossWebMetaData or null if either that or the parent WarMetaData are not found.", "docstring_tokens": ["Gets", "the", "JBossWebMetaData", "from", "the", "WarMetaData", "attached", "to", "the", "provided", "deployment", "unit", "if", "any", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L288-L300", "partition": "test", "index": 2672, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataModifier.java", "func_name": "WebMetaDataModifier.modify", "original_string": "void modify(final Deployment dep) {\n        final JBossWebMetaData jbossWebMD = WSHelper.getOptionalAttachment(dep, JBossWebMetaData.class);\n\n        if (jbossWebMD != null) {\n            this.configureEndpoints(dep, jbossWebMD);\n            this.modifyContextRoot(dep, jbossWebMD);\n        }\n    }", "language": "java", "code": "void modify(final Deployment dep) {\n        final JBossWebMetaData jbossWebMD = WSHelper.getOptionalAttachment(dep, JBossWebMetaData.class);\n\n        if (jbossWebMD != null) {\n            this.configureEndpoints(dep, jbossWebMD);\n            this.modifyContextRoot(dep, jbossWebMD);\n        }\n    }", "code_tokens": ["void", "modify", "(", "final", "Deployment", "dep", ")", "{", "final", "JBossWebMetaData", "jbossWebMD", "=", "WSHelper", ".", "getOptionalAttachment", "(", "dep", ",", "JBossWebMetaData", ".", "class", ")", ";", "if", "(", "jbossWebMD", "!=", "null", ")", "{", "this", ".", "configureEndpoints", "(", "dep", ",", "jbossWebMD", ")", ";", "this", ".", "modifyContextRoot", "(", "dep", ",", "jbossWebMD", ")", ";", "}", "}"], "docstring": "Modifies web meta data to configure webservice stack transport and properties.\n\n@param dep webservice deployment", "docstring_tokens": ["Modifies", "web", "meta", "data", "to", "configure", "webservice", "stack", "transport", "and", "properties", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataModifier.java#L59-L66", "partition": "test", "index": 2501, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.newParamValue", "original_string": "public static ParamValueMetaData newParamValue(final String key, final String value, final List<ParamValueMetaData> paramsMD) {\n        final ParamValueMetaData paramValueMD = WebMetaDataHelper.newParamValue(key, value);\n\n        paramsMD.add(paramValueMD);\n\n        return paramValueMD;\n    }", "language": "java", "code": "public static ParamValueMetaData newParamValue(final String key, final String value, final List<ParamValueMetaData> paramsMD) {\n        final ParamValueMetaData paramValueMD = WebMetaDataHelper.newParamValue(key, value);\n\n        paramsMD.add(paramValueMD);\n\n        return paramValueMD;\n    }", "code_tokens": ["public", "static", "ParamValueMetaData", "newParamValue", "(", "final", "String", "key", ",", "final", "String", "value", ",", "final", "List", "<", "ParamValueMetaData", ">", "paramsMD", ")", "{", "final", "ParamValueMetaData", "paramValueMD", "=", "WebMetaDataHelper", ".", "newParamValue", "(", "key", ",", "value", ")", ";", "paramsMD", ".", "add", "(", "paramValueMD", ")", ";", "return", "paramValueMD", ";", "}"], "docstring": "Creates new parameter meta data and associates it with parameters meta data.\n\n@param key parameter key\n@param value parameter value\n@param paramsMD parameters meta data\n@return new parameter meta data", "docstring_tokens": ["Creates", "new", "parameter", "meta", "data", "and", "associates", "it", "with", "parameters", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L364-L370", "partition": "test", "index": 2571, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataModifier.java", "func_name": "WebMetaDataModifier.configureEndpoints", "original_string": "private void configureEndpoints(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        final String transportClassName = this.getTransportClassName(dep);\n        WSLogger.ROOT_LOGGER.trace(\"Modifying servlets\");\n\n        // get a list of the endpoint bean class names\n        final Set<String> epNames = new HashSet<String>();\n        for (Endpoint ep : dep.getService().getEndpoints()) {\n            epNames.add(ep.getTargetBeanName());\n        }\n\n        // fix servlet class names for endpoints\n        for (final ServletMetaData servletMD : jbossWebMD.getServlets()) {\n            final String endpointClassName = ASHelper.getEndpointClassName(servletMD);\n            if (endpointClassName != null && endpointClassName.length() > 0) { // exclude JSP\n                if (epNames.contains(endpointClassName)) {\n                    // set transport servlet\n                    servletMD.setServletClass(WSFServlet.class.getName());\n                    WSLogger.ROOT_LOGGER.tracef(\"Setting transport class: %s for endpoint: %s\", transportClassName, endpointClassName);\n                    final List<ParamValueMetaData> initParams = WebMetaDataHelper.getServletInitParams(servletMD);\n                    // configure transport class name\n                    WebMetaDataHelper.newParamValue(WSFServlet.STACK_SERVLET_DELEGATE_CLASS, transportClassName, initParams);\n                    // configure webservice endpoint\n                    WebMetaDataHelper.newParamValue(Endpoint.SEPID_DOMAIN_ENDPOINT, endpointClassName, initParams);\n                } else if (endpointClassName.startsWith(\"org.apache.cxf\")) {\n                    throw WSLogger.ROOT_LOGGER.invalidWSServlet(endpointClassName);\n                }\n            }\n        }\n    }", "language": "java", "code": "private void configureEndpoints(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        final String transportClassName = this.getTransportClassName(dep);\n        WSLogger.ROOT_LOGGER.trace(\"Modifying servlets\");\n\n        // get a list of the endpoint bean class names\n        final Set<String> epNames = new HashSet<String>();\n        for (Endpoint ep : dep.getService().getEndpoints()) {\n            epNames.add(ep.getTargetBeanName());\n        }\n\n        // fix servlet class names for endpoints\n        for (final ServletMetaData servletMD : jbossWebMD.getServlets()) {\n            final String endpointClassName = ASHelper.getEndpointClassName(servletMD);\n            if (endpointClassName != null && endpointClassName.length() > 0) { // exclude JSP\n                if (epNames.contains(endpointClassName)) {\n                    // set transport servlet\n                    servletMD.setServletClass(WSFServlet.class.getName());\n                    WSLogger.ROOT_LOGGER.tracef(\"Setting transport class: %s for endpoint: %s\", transportClassName, endpointClassName);\n                    final List<ParamValueMetaData> initParams = WebMetaDataHelper.getServletInitParams(servletMD);\n                    // configure transport class name\n                    WebMetaDataHelper.newParamValue(WSFServlet.STACK_SERVLET_DELEGATE_CLASS, transportClassName, initParams);\n                    // configure webservice endpoint\n                    WebMetaDataHelper.newParamValue(Endpoint.SEPID_DOMAIN_ENDPOINT, endpointClassName, initParams);\n                } else if (endpointClassName.startsWith(\"org.apache.cxf\")) {\n                    throw WSLogger.ROOT_LOGGER.invalidWSServlet(endpointClassName);\n                }\n            }\n        }\n    }", "code_tokens": ["private", "void", "configureEndpoints", "(", "final", "Deployment", "dep", ",", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "final", "String", "transportClassName", "=", "this", ".", "getTransportClassName", "(", "dep", ")", ";", "WSLogger", ".", "ROOT_LOGGER", ".", "trace", "(", "\"Modifying servlets\"", ")", ";", "// get a list of the endpoint bean class names", "final", "Set", "<", "String", ">", "epNames", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "for", "(", "Endpoint", "ep", ":", "dep", ".", "getService", "(", ")", ".", "getEndpoints", "(", ")", ")", "{", "epNames", ".", "add", "(", "ep", ".", "getTargetBeanName", "(", ")", ")", ";", "}", "// fix servlet class names for endpoints", "for", "(", "final", "ServletMetaData", "servletMD", ":", "jbossWebMD", ".", "getServlets", "(", ")", ")", "{", "final", "String", "endpointClassName", "=", "ASHelper", ".", "getEndpointClassName", "(", "servletMD", ")", ";", "if", "(", "endpointClassName", "!=", "null", "&&", "endpointClassName", ".", "length", "(", ")", ">", "0", ")", "{", "// exclude JSP", "if", "(", "epNames", ".", "contains", "(", "endpointClassName", ")", ")", "{", "// set transport servlet", "servletMD", ".", "setServletClass", "(", "WSFServlet", ".", "class", ".", "getName", "(", ")", ")", ";", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Setting transport class: %s for endpoint: %s\"", ",", "transportClassName", ",", "endpointClassName", ")", ";", "final", "List", "<", "ParamValueMetaData", ">", "initParams", "=", "WebMetaDataHelper", ".", "getServletInitParams", "(", "servletMD", ")", ";", "// configure transport class name", "WebMetaDataHelper", ".", "newParamValue", "(", "WSFServlet", ".", "STACK_SERVLET_DELEGATE_CLASS", ",", "transportClassName", ",", "initParams", ")", ";", "// configure webservice endpoint", "WebMetaDataHelper", ".", "newParamValue", "(", "Endpoint", ".", "SEPID_DOMAIN_ENDPOINT", ",", "endpointClassName", ",", "initParams", ")", ";", "}", "else", "if", "(", "endpointClassName", ".", "startsWith", "(", "\"org.apache.cxf\"", ")", ")", "{", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "invalidWSServlet", "(", "endpointClassName", ")", ";", "}", "}", "}", "}"], "docstring": "Configures transport servlet class for every found webservice endpoint.\n\n@param dep webservice deployment\n@param jbossWebMD web meta data", "docstring_tokens": ["Configures", "transport", "servlet", "class", "for", "every", "found", "webservice", "endpoint", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataModifier.java#L74-L102", "partition": "test", "index": 2502, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java", "func_name": "WebMetaDataHelper.newParamValue", "original_string": "private static ParamValueMetaData newParamValue(final String key, final String value) {\n        final ParamValueMetaData paramMD = new ParamValueMetaData();\n\n        paramMD.setParamName(key);\n        paramMD.setParamValue(value);\n\n        return paramMD;\n    }", "language": "java", "code": "private static ParamValueMetaData newParamValue(final String key, final String value) {\n        final ParamValueMetaData paramMD = new ParamValueMetaData();\n\n        paramMD.setParamName(key);\n        paramMD.setParamValue(value);\n\n        return paramMD;\n    }", "code_tokens": ["private", "static", "ParamValueMetaData", "newParamValue", "(", "final", "String", "key", ",", "final", "String", "value", ")", "{", "final", "ParamValueMetaData", "paramMD", "=", "new", "ParamValueMetaData", "(", ")", ";", "paramMD", ".", "setParamName", "(", "key", ")", ";", "paramMD", ".", "setParamValue", "(", "value", ")", ";", "return", "paramMD", ";", "}"], "docstring": "Creates new parameter with specified key and value.\n\n@param key the key\n@param value the value\n@return new parameter", "docstring_tokens": ["Creates", "new", "parameter", "with", "specified", "key", "and", "value", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/WebMetaDataHelper.java#L379-L386", "partition": "test", "index": 2572, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataModifier.java", "func_name": "WebMetaDataModifier.modifyContextRoot", "original_string": "private void modifyContextRoot(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        final String contextRoot = dep.getService().getContextRoot();\n        if (WSLogger.ROOT_LOGGER.isTraceEnabled()) {\n            WSLogger.ROOT_LOGGER.tracef(\"Setting context root: %s for deployment: %s\", contextRoot, dep.getSimpleName());\n        }\n        jbossWebMD.setContextRoot(contextRoot);\n    }", "language": "java", "code": "private void modifyContextRoot(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        final String contextRoot = dep.getService().getContextRoot();\n        if (WSLogger.ROOT_LOGGER.isTraceEnabled()) {\n            WSLogger.ROOT_LOGGER.tracef(\"Setting context root: %s for deployment: %s\", contextRoot, dep.getSimpleName());\n        }\n        jbossWebMD.setContextRoot(contextRoot);\n    }", "code_tokens": ["private", "void", "modifyContextRoot", "(", "final", "Deployment", "dep", ",", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "final", "String", "contextRoot", "=", "dep", ".", "getService", "(", ")", ".", "getContextRoot", "(", ")", ";", "if", "(", "WSLogger", ".", "ROOT_LOGGER", ".", "isTraceEnabled", "(", ")", ")", "{", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Setting context root: %s for deployment: %s\"", ",", "contextRoot", ",", "dep", ".", "getSimpleName", "(", ")", ")", ";", "}", "jbossWebMD", ".", "setContextRoot", "(", "contextRoot", ")", ";", "}"], "docstring": "Modifies context root.\n\n@param dep webservice deployment\n@param jbossWebMD web meta data", "docstring_tokens": ["Modifies", "context", "root", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataModifier.java#L110-L116", "partition": "test", "index": 2503, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataModifier.java", "func_name": "WebMetaDataModifier.getTransportClassName", "original_string": "private String getTransportClassName(final Deployment dep) {\n        String transportClassName = (String) dep.getProperty(WSConstants.STACK_TRANSPORT_CLASS);\n        if (transportClassName == null) throw WSLogger.ROOT_LOGGER.missingDeploymentProperty(WSConstants.STACK_TRANSPORT_CLASS);\n        return transportClassName;\n    }", "language": "java", "code": "private String getTransportClassName(final Deployment dep) {\n        String transportClassName = (String) dep.getProperty(WSConstants.STACK_TRANSPORT_CLASS);\n        if (transportClassName == null) throw WSLogger.ROOT_LOGGER.missingDeploymentProperty(WSConstants.STACK_TRANSPORT_CLASS);\n        return transportClassName;\n    }", "code_tokens": ["private", "String", "getTransportClassName", "(", "final", "Deployment", "dep", ")", "{", "String", "transportClassName", "=", "(", "String", ")", "dep", ".", "getProperty", "(", "WSConstants", ".", "STACK_TRANSPORT_CLASS", ")", ";", "if", "(", "transportClassName", "==", "null", ")", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "missingDeploymentProperty", "(", "WSConstants", ".", "STACK_TRANSPORT_CLASS", ")", ";", "return", "transportClassName", ";", "}"], "docstring": "Returns stack specific transport class name.\n\n@param dep webservice deployment\n@return stack specific transport class name\n@throws IllegalStateException if transport class name is not found in deployment properties map", "docstring_tokens": ["Returns", "stack", "specific", "transport", "class", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataModifier.java#L125-L129", "partition": "test", "index": 2504, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/deployers/deployment/AbstractDeploymentModelBuilder.java", "func_name": "AbstractDeploymentModelBuilder.newDeployment", "original_string": "private ArchiveDeployment newDeployment(final DeploymentUnit unit) {\n        WSLogger.ROOT_LOGGER.tracef(\"Creating new unified WS deployment model for %s\", unit);\n        final ResourceRoot deploymentRoot = unit.getAttachment(Attachments.DEPLOYMENT_ROOT);\n        final VirtualFile root = deploymentRoot != null ? deploymentRoot.getRoot() : null;\n        final ClassLoader classLoader;\n        final Module module = unit.getAttachment(Attachments.MODULE);\n        if (module == null) {\n            classLoader = unit.getAttachment(CLASSLOADER_KEY);\n            if (classLoader == null) {\n                throw WSLogger.ROOT_LOGGER.classLoaderResolutionFailed(unit);\n            }\n        } else {\n            classLoader = module.getClassLoader();\n        }\n\n        ArchiveDeployment parentDep = null;\n        if (unit.getParent() != null) {\n            final Module parentModule = unit.getParent().getAttachment(Attachments.MODULE);\n            if (parentModule == null) {\n                throw WSLogger.ROOT_LOGGER.classLoaderResolutionFailed(deploymentRoot);\n            }\n            WSLogger.ROOT_LOGGER.tracef(\"Creating new unified WS deployment model for %s\", unit.getParent());\n            parentDep = this.newDeployment(null, unit.getParent().getName(), parentModule.getClassLoader(), null);\n        }\n\n        final UnifiedVirtualFile uvf = root != null ? new VirtualFileAdaptor(root) : new ResourceLoaderAdapter(classLoader);\n        final ArchiveDeployment dep = this.newDeployment(parentDep, unit.getName(), classLoader, uvf);\n\n        //add an AnnotationInfo attachment that uses composite jandex index\n        dep.addAttachment(AnnotationsInfo.class, new JandexAnnotationsInfo(unit));\n\n        return dep;\n    }", "language": "java", "code": "private ArchiveDeployment newDeployment(final DeploymentUnit unit) {\n        WSLogger.ROOT_LOGGER.tracef(\"Creating new unified WS deployment model for %s\", unit);\n        final ResourceRoot deploymentRoot = unit.getAttachment(Attachments.DEPLOYMENT_ROOT);\n        final VirtualFile root = deploymentRoot != null ? deploymentRoot.getRoot() : null;\n        final ClassLoader classLoader;\n        final Module module = unit.getAttachment(Attachments.MODULE);\n        if (module == null) {\n            classLoader = unit.getAttachment(CLASSLOADER_KEY);\n            if (classLoader == null) {\n                throw WSLogger.ROOT_LOGGER.classLoaderResolutionFailed(unit);\n            }\n        } else {\n            classLoader = module.getClassLoader();\n        }\n\n        ArchiveDeployment parentDep = null;\n        if (unit.getParent() != null) {\n            final Module parentModule = unit.getParent().getAttachment(Attachments.MODULE);\n            if (parentModule == null) {\n                throw WSLogger.ROOT_LOGGER.classLoaderResolutionFailed(deploymentRoot);\n            }\n            WSLogger.ROOT_LOGGER.tracef(\"Creating new unified WS deployment model for %s\", unit.getParent());\n            parentDep = this.newDeployment(null, unit.getParent().getName(), parentModule.getClassLoader(), null);\n        }\n\n        final UnifiedVirtualFile uvf = root != null ? new VirtualFileAdaptor(root) : new ResourceLoaderAdapter(classLoader);\n        final ArchiveDeployment dep = this.newDeployment(parentDep, unit.getName(), classLoader, uvf);\n\n        //add an AnnotationInfo attachment that uses composite jandex index\n        dep.addAttachment(AnnotationsInfo.class, new JandexAnnotationsInfo(unit));\n\n        return dep;\n    }", "code_tokens": ["private", "ArchiveDeployment", "newDeployment", "(", "final", "DeploymentUnit", "unit", ")", "{", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Creating new unified WS deployment model for %s\"", ",", "unit", ")", ";", "final", "ResourceRoot", "deploymentRoot", "=", "unit", ".", "getAttachment", "(", "Attachments", ".", "DEPLOYMENT_ROOT", ")", ";", "final", "VirtualFile", "root", "=", "deploymentRoot", "!=", "null", "?", "deploymentRoot", ".", "getRoot", "(", ")", ":", "null", ";", "final", "ClassLoader", "classLoader", ";", "final", "Module", "module", "=", "unit", ".", "getAttachment", "(", "Attachments", ".", "MODULE", ")", ";", "if", "(", "module", "==", "null", ")", "{", "classLoader", "=", "unit", ".", "getAttachment", "(", "CLASSLOADER_KEY", ")", ";", "if", "(", "classLoader", "==", "null", ")", "{", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "classLoaderResolutionFailed", "(", "unit", ")", ";", "}", "}", "else", "{", "classLoader", "=", "module", ".", "getClassLoader", "(", ")", ";", "}", "ArchiveDeployment", "parentDep", "=", "null", ";", "if", "(", "unit", ".", "getParent", "(", ")", "!=", "null", ")", "{", "final", "Module", "parentModule", "=", "unit", ".", "getParent", "(", ")", ".", "getAttachment", "(", "Attachments", ".", "MODULE", ")", ";", "if", "(", "parentModule", "==", "null", ")", "{", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "classLoaderResolutionFailed", "(", "deploymentRoot", ")", ";", "}", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Creating new unified WS deployment model for %s\"", ",", "unit", ".", "getParent", "(", ")", ")", ";", "parentDep", "=", "this", ".", "newDeployment", "(", "null", ",", "unit", ".", "getParent", "(", ")", ".", "getName", "(", ")", ",", "parentModule", ".", "getClassLoader", "(", ")", ",", "null", ")", ";", "}", "final", "UnifiedVirtualFile", "uvf", "=", "root", "!=", "null", "?", "new", "VirtualFileAdaptor", "(", "root", ")", ":", "new", "ResourceLoaderAdapter", "(", "classLoader", ")", ";", "final", "ArchiveDeployment", "dep", "=", "this", ".", "newDeployment", "(", "parentDep", ",", "unit", ".", "getName", "(", ")", ",", "classLoader", ",", "uvf", ")", ";", "//add an AnnotationInfo attachment that uses composite jandex index", "dep", ".", "addAttachment", "(", "AnnotationsInfo", ".", "class", ",", "new", "JandexAnnotationsInfo", "(", "unit", ")", ")", ";", "return", "dep", ";", "}"], "docstring": "Creates new Web Service deployment.\n\n@param unit deployment unit\n@return archive deployment", "docstring_tokens": ["Creates", "new", "Web", "Service", "deployment", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/deployers/deployment/AbstractDeploymentModelBuilder.java#L185-L217", "partition": "test", "index": 2687, "time": "2010-11-05 19:00:42"}
{"repo": "wildfly/wildfly", "path": "sar/src/main/java/org/jboss/as/service/SarModuleDependencyProcessor.java", "func_name": "SarModuleDependencyProcessor.deploy", "original_string": "public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n        final JBossServiceXmlDescriptor serviceXmlDescriptor = deploymentUnit.getAttachment(JBossServiceXmlDescriptor.ATTACHMENT_KEY);\n        if(serviceXmlDescriptor == null) {\n            return; // Skip deployments with out a service xml descriptor\n        }\n\n        moduleSpecification.addSystemDependency(new ModuleDependency(Module.getBootModuleLoader(), JBOSS_MODULES_ID, false, false, false, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(Module.getBootModuleLoader(), JBOSS_AS_SYSTEM_JMX_ID, true, false, false, false));\n        // depend on Properties editor module which uses ServiceLoader approach to load the appropriate org.jboss.common.beans.property.finder.PropertyEditorFinder\n        moduleSpecification.addSystemDependency(new ModuleDependency(Module.getBootModuleLoader(), PROPERTIES_EDITOR_MODULE_ID, false, false, true, false));\n\n        // All SARs require the ability to register MBeans.\n        moduleSpecification.addPermissionFactory(REGISTER_PERMISSION_FACTORY);\n    }", "language": "java", "code": "public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n        final JBossServiceXmlDescriptor serviceXmlDescriptor = deploymentUnit.getAttachment(JBossServiceXmlDescriptor.ATTACHMENT_KEY);\n        if(serviceXmlDescriptor == null) {\n            return; // Skip deployments with out a service xml descriptor\n        }\n\n        moduleSpecification.addSystemDependency(new ModuleDependency(Module.getBootModuleLoader(), JBOSS_MODULES_ID, false, false, false, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(Module.getBootModuleLoader(), JBOSS_AS_SYSTEM_JMX_ID, true, false, false, false));\n        // depend on Properties editor module which uses ServiceLoader approach to load the appropriate org.jboss.common.beans.property.finder.PropertyEditorFinder\n        moduleSpecification.addSystemDependency(new ModuleDependency(Module.getBootModuleLoader(), PROPERTIES_EDITOR_MODULE_ID, false, false, true, false));\n\n        // All SARs require the ability to register MBeans.\n        moduleSpecification.addPermissionFactory(REGISTER_PERMISSION_FACTORY);\n    }", "code_tokens": ["public", "void", "deploy", "(", "DeploymentPhaseContext", "phaseContext", ")", "throws", "DeploymentUnitProcessingException", "{", "final", "DeploymentUnit", "deploymentUnit", "=", "phaseContext", ".", "getDeploymentUnit", "(", ")", ";", "final", "ModuleSpecification", "moduleSpecification", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE_SPECIFICATION", ")", ";", "final", "JBossServiceXmlDescriptor", "serviceXmlDescriptor", "=", "deploymentUnit", ".", "getAttachment", "(", "JBossServiceXmlDescriptor", ".", "ATTACHMENT_KEY", ")", ";", "if", "(", "serviceXmlDescriptor", "==", "null", ")", "{", "return", ";", "// Skip deployments with out a service xml descriptor", "}", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "Module", ".", "getBootModuleLoader", "(", ")", ",", "JBOSS_MODULES_ID", ",", "false", ",", "false", ",", "false", ",", "false", ")", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "Module", ".", "getBootModuleLoader", "(", ")", ",", "JBOSS_AS_SYSTEM_JMX_ID", ",", "true", ",", "false", ",", "false", ",", "false", ")", ")", ";", "// depend on Properties editor module which uses ServiceLoader approach to load the appropriate org.jboss.common.beans.property.finder.PropertyEditorFinder", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "Module", ".", "getBootModuleLoader", "(", ")", ",", "PROPERTIES_EDITOR_MODULE_ID", ",", "false", ",", "false", ",", "true", ",", "false", ")", ")", ";", "// All SARs require the ability to register MBeans.", "moduleSpecification", ".", "addPermissionFactory", "(", "REGISTER_PERMISSION_FACTORY", ")", ";", "}"], "docstring": "Add dependencies for modules required for manged bean deployments, if managed bean configurations are attached\nto the deployment.\n\n@param phaseContext the deployment unit context\n@throws DeploymentUnitProcessingException", "docstring_tokens": ["Add", "dependencies", "for", "modules", "required", "for", "manged", "bean", "deployments", "if", "managed", "bean", "configurations", "are", "attached", "to", "the", "deployment", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/sar/src/main/java/org/jboss/as/service/SarModuleDependencyProcessor.java#L59-L74", "partition": "test", "index": 2732, "time": "2010-11-17 09:38:50"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/managedbean/processors/JavaEEDependencyProcessor.java", "func_name": "JavaEEDependencyProcessor.deploy", "original_string": "public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n\n        //add jboss-invocation classes needed by the proxies\n        ModuleDependency invocation = new ModuleDependency(moduleLoader, JBOSS_INVOCATION_ID, false, false, false, false);\n        invocation.addImportFilter(PathFilters.is(\"org/jboss/invocation/proxy/classloading\"), true);\n        invocation.addImportFilter(PathFilters.acceptAll(), false);\n        moduleSpecification.addSystemDependency(invocation);\n\n        ModuleDependency ee = new ModuleDependency(moduleLoader, JBOSS_AS_EE, false, false, false, false);\n        ee.addImportFilter(PathFilters.is(\"org/jboss/as/ee/component/serialization\"), true);\n        ee.addImportFilter(PathFilters.is(\"org/jboss/as/ee/concurrent\"), true);\n        ee.addImportFilter(PathFilters.is(\"org/jboss/as/ee/concurrent/handle\"), true);\n        ee.addImportFilter(PathFilters.acceptAll(), false);\n        moduleSpecification.addSystemDependency(ee);\n\n        // add dep for naming permission\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, ModuleIdentifier.create(WILDFLY_NAMING), false, false, false, false));\n\n        //we always add all Java EE API modules, as the platform spec requires them to always be available\n        //we do not just add the javaee.api module, as this breaks excludes\n\n        for (final ModuleIdentifier moduleIdentifier : JAVA_EE_API_MODULES) {\n            moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, moduleIdentifier, true, false, true, false));\n        }\n    }", "language": "java", "code": "public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n\n        //add jboss-invocation classes needed by the proxies\n        ModuleDependency invocation = new ModuleDependency(moduleLoader, JBOSS_INVOCATION_ID, false, false, false, false);\n        invocation.addImportFilter(PathFilters.is(\"org/jboss/invocation/proxy/classloading\"), true);\n        invocation.addImportFilter(PathFilters.acceptAll(), false);\n        moduleSpecification.addSystemDependency(invocation);\n\n        ModuleDependency ee = new ModuleDependency(moduleLoader, JBOSS_AS_EE, false, false, false, false);\n        ee.addImportFilter(PathFilters.is(\"org/jboss/as/ee/component/serialization\"), true);\n        ee.addImportFilter(PathFilters.is(\"org/jboss/as/ee/concurrent\"), true);\n        ee.addImportFilter(PathFilters.is(\"org/jboss/as/ee/concurrent/handle\"), true);\n        ee.addImportFilter(PathFilters.acceptAll(), false);\n        moduleSpecification.addSystemDependency(ee);\n\n        // add dep for naming permission\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, ModuleIdentifier.create(WILDFLY_NAMING), false, false, false, false));\n\n        //we always add all Java EE API modules, as the platform spec requires them to always be available\n        //we do not just add the javaee.api module, as this breaks excludes\n\n        for (final ModuleIdentifier moduleIdentifier : JAVA_EE_API_MODULES) {\n            moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, moduleIdentifier, true, false, true, false));\n        }\n    }", "code_tokens": ["public", "void", "deploy", "(", "DeploymentPhaseContext", "phaseContext", ")", "throws", "DeploymentUnitProcessingException", "{", "final", "DeploymentUnit", "deploymentUnit", "=", "phaseContext", ".", "getDeploymentUnit", "(", ")", ";", "final", "ModuleSpecification", "moduleSpecification", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE_SPECIFICATION", ")", ";", "final", "ModuleLoader", "moduleLoader", "=", "Module", ".", "getBootModuleLoader", "(", ")", ";", "//add jboss-invocation classes needed by the proxies", "ModuleDependency", "invocation", "=", "new", "ModuleDependency", "(", "moduleLoader", ",", "JBOSS_INVOCATION_ID", ",", "false", ",", "false", ",", "false", ",", "false", ")", ";", "invocation", ".", "addImportFilter", "(", "PathFilters", ".", "is", "(", "\"org/jboss/invocation/proxy/classloading\"", ")", ",", "true", ")", ";", "invocation", ".", "addImportFilter", "(", "PathFilters", ".", "acceptAll", "(", ")", ",", "false", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "invocation", ")", ";", "ModuleDependency", "ee", "=", "new", "ModuleDependency", "(", "moduleLoader", ",", "JBOSS_AS_EE", ",", "false", ",", "false", ",", "false", ",", "false", ")", ";", "ee", ".", "addImportFilter", "(", "PathFilters", ".", "is", "(", "\"org/jboss/as/ee/component/serialization\"", ")", ",", "true", ")", ";", "ee", ".", "addImportFilter", "(", "PathFilters", ".", "is", "(", "\"org/jboss/as/ee/concurrent\"", ")", ",", "true", ")", ";", "ee", ".", "addImportFilter", "(", "PathFilters", ".", "is", "(", "\"org/jboss/as/ee/concurrent/handle\"", ")", ",", "true", ")", ";", "ee", ".", "addImportFilter", "(", "PathFilters", ".", "acceptAll", "(", ")", ",", "false", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "ee", ")", ";", "// add dep for naming permission", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "ModuleIdentifier", ".", "create", "(", "WILDFLY_NAMING", ")", ",", "false", ",", "false", ",", "false", ",", "false", ")", ")", ";", "//we always add all Java EE API modules, as the platform spec requires them to always be available", "//we do not just add the javaee.api module, as this breaks excludes", "for", "(", "final", "ModuleIdentifier", "moduleIdentifier", ":", "JAVA_EE_API_MODULES", ")", "{", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "moduleIdentifier", ",", "true", ",", "false", ",", "true", ",", "false", ")", ")", ";", "}", "}"], "docstring": "Add the EE APIs as a dependency to all deployments\n\n@param phaseContext the deployment unit context\n@throws DeploymentUnitProcessingException", "docstring_tokens": ["Add", "the", "EE", "APIs", "as", "a", "dependency", "to", "all", "deployments"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/managedbean/processors/JavaEEDependencyProcessor.java#L79-L107", "partition": "test", "index": 2692, "time": "2010-11-17 09:38:50"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/plugins/JNDIBasedSecurityManagement.java", "func_name": "JNDIBasedSecurityManagement.lookUpJNDI", "original_string": "private Object lookUpJNDI(String contextName) {\n        Object result = null;\n        try {\n            Context ctx = new InitialContext();\n            if (contextName.startsWith(SecurityConstants.JAAS_CONTEXT_ROOT))\n                result = ctx.lookup(contextName);\n            else\n                result = ctx.lookup(SecurityConstants.JAAS_CONTEXT_ROOT + contextName);\n        } catch (Exception e) {\n            SecurityLogger.ROOT_LOGGER.tracef(\"Look up of JNDI for %s failed with %s\", contextName, e.getLocalizedMessage());\n            return null;\n        }\n        return result;\n    }", "language": "java", "code": "private Object lookUpJNDI(String contextName) {\n        Object result = null;\n        try {\n            Context ctx = new InitialContext();\n            if (contextName.startsWith(SecurityConstants.JAAS_CONTEXT_ROOT))\n                result = ctx.lookup(contextName);\n            else\n                result = ctx.lookup(SecurityConstants.JAAS_CONTEXT_ROOT + contextName);\n        } catch (Exception e) {\n            SecurityLogger.ROOT_LOGGER.tracef(\"Look up of JNDI for %s failed with %s\", contextName, e.getLocalizedMessage());\n            return null;\n        }\n        return result;\n    }", "code_tokens": ["private", "Object", "lookUpJNDI", "(", "String", "contextName", ")", "{", "Object", "result", "=", "null", ";", "try", "{", "Context", "ctx", "=", "new", "InitialContext", "(", ")", ";", "if", "(", "contextName", ".", "startsWith", "(", "SecurityConstants", ".", "JAAS_CONTEXT_ROOT", ")", ")", "result", "=", "ctx", ".", "lookup", "(", "contextName", ")", ";", "else", "result", "=", "ctx", ".", "lookup", "(", "SecurityConstants", ".", "JAAS_CONTEXT_ROOT", "+", "contextName", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "SecurityLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Look up of JNDI for %s failed with %s\"", ",", "contextName", ",", "e", ".", "getLocalizedMessage", "(", ")", ")", ";", "return", "null", ";", "}", "return", "result", ";", "}"], "docstring": "Lookup a context in JNDI\n\n@param contextName the context\n@return the Object found at the context or null if there is nothing bound", "docstring_tokens": ["Lookup", "a", "context", "in", "JNDI"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/plugins/JNDIBasedSecurityManagement.java#L249-L262", "partition": "test", "index": 2785, "time": "2010-12-15 16:25:14"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/WeldBootstrapService.java", "func_name": "WeldBootstrapService.start", "original_string": "public synchronized void start(final StartContext context) {\n        if (started) {\n            throw WeldLogger.ROOT_LOGGER.alreadyRunning(\"WeldContainer\");\n        }\n        started = true;\n\n        WeldLogger.DEPLOYMENT_LOGGER.startingWeldService(deploymentName);\n        // set up injected services\n        addWeldService(SecurityServices.class, securityServicesSupplier.get());\n\n        TransactionServices transactionServices = weldTransactionServicesSupplier != null ? weldTransactionServicesSupplier.get() : null;\n        if (transactionServices != null) {\n            addWeldService(TransactionServices.class, transactionServices);\n        }\n\n        if (!deployment.getServices().contains(ExecutorServices.class)) {\n            addWeldService(ExecutorServices.class, executorServicesSupplier.get());\n        }\n\n        ModuleGroupSingletonProvider.addClassLoaders(deployment.getModule().getClassLoader(),\n                deployment.getSubDeploymentClassLoaders());\n\n        ClassLoader oldTccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(deployment.getModule().getClassLoader());\n            bootstrap.startContainer(deploymentName, environment, deployment);\n            WeldProvider.containerInitialized(Container.instance(deploymentName), getBeanManager(), deployment);\n        } finally {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl);\n        }\n        weldBootstrapServiceConsumer.accept(this);\n    }", "language": "java", "code": "public synchronized void start(final StartContext context) {\n        if (started) {\n            throw WeldLogger.ROOT_LOGGER.alreadyRunning(\"WeldContainer\");\n        }\n        started = true;\n\n        WeldLogger.DEPLOYMENT_LOGGER.startingWeldService(deploymentName);\n        // set up injected services\n        addWeldService(SecurityServices.class, securityServicesSupplier.get());\n\n        TransactionServices transactionServices = weldTransactionServicesSupplier != null ? weldTransactionServicesSupplier.get() : null;\n        if (transactionServices != null) {\n            addWeldService(TransactionServices.class, transactionServices);\n        }\n\n        if (!deployment.getServices().contains(ExecutorServices.class)) {\n            addWeldService(ExecutorServices.class, executorServicesSupplier.get());\n        }\n\n        ModuleGroupSingletonProvider.addClassLoaders(deployment.getModule().getClassLoader(),\n                deployment.getSubDeploymentClassLoaders());\n\n        ClassLoader oldTccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(deployment.getModule().getClassLoader());\n            bootstrap.startContainer(deploymentName, environment, deployment);\n            WeldProvider.containerInitialized(Container.instance(deploymentName), getBeanManager(), deployment);\n        } finally {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl);\n        }\n        weldBootstrapServiceConsumer.accept(this);\n    }", "code_tokens": ["public", "synchronized", "void", "start", "(", "final", "StartContext", "context", ")", "{", "if", "(", "started", ")", "{", "throw", "WeldLogger", ".", "ROOT_LOGGER", ".", "alreadyRunning", "(", "\"WeldContainer\"", ")", ";", "}", "started", "=", "true", ";", "WeldLogger", ".", "DEPLOYMENT_LOGGER", ".", "startingWeldService", "(", "deploymentName", ")", ";", "// set up injected services", "addWeldService", "(", "SecurityServices", ".", "class", ",", "securityServicesSupplier", ".", "get", "(", ")", ")", ";", "TransactionServices", "transactionServices", "=", "weldTransactionServicesSupplier", "!=", "null", "?", "weldTransactionServicesSupplier", ".", "get", "(", ")", ":", "null", ";", "if", "(", "transactionServices", "!=", "null", ")", "{", "addWeldService", "(", "TransactionServices", ".", "class", ",", "transactionServices", ")", ";", "}", "if", "(", "!", "deployment", ".", "getServices", "(", ")", ".", "contains", "(", "ExecutorServices", ".", "class", ")", ")", "{", "addWeldService", "(", "ExecutorServices", ".", "class", ",", "executorServicesSupplier", ".", "get", "(", ")", ")", ";", "}", "ModuleGroupSingletonProvider", ".", "addClassLoaders", "(", "deployment", ".", "getModule", "(", ")", ".", "getClassLoader", "(", ")", ",", "deployment", ".", "getSubDeploymentClassLoaders", "(", ")", ")", ";", "ClassLoader", "oldTccl", "=", "WildFlySecurityManager", ".", "getCurrentContextClassLoaderPrivileged", "(", ")", ";", "try", "{", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "deployment", ".", "getModule", "(", ")", ".", "getClassLoader", "(", ")", ")", ";", "bootstrap", ".", "startContainer", "(", "deploymentName", ",", "environment", ",", "deployment", ")", ";", "WeldProvider", ".", "containerInitialized", "(", "Container", ".", "instance", "(", "deploymentName", ")", ",", "getBeanManager", "(", ")", ",", "deployment", ")", ";", "}", "finally", "{", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "oldTccl", ")", ";", "}", "weldBootstrapServiceConsumer", ".", "accept", "(", "this", ")", ";", "}"], "docstring": "Starts the weld container\n\n@throws IllegalStateException if the container is already running", "docstring_tokens": ["Starts", "the", "weld", "container"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/WeldBootstrapService.java#L117-L148", "partition": "test", "index": 2896, "time": "2011-01-04 07:30:04"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/WeldModuleResourceLoader.java", "func_name": "WeldModuleResourceLoader.classForName", "original_string": "@Override\n    public Class<?> classForName(String name) {\n        try {\n            if (classes.containsKey(name)) {\n                return classes.get(name);\n            }\n            final Class<?> clazz = module.getClassLoader().loadClass(name);\n            classes.put(name, clazz);\n            return clazz;\n        } catch (ClassNotFoundException | LinkageError e) {\n            throw new ResourceLoadingException(e);\n        }\n    }", "language": "java", "code": "@Override\n    public Class<?> classForName(String name) {\n        try {\n            if (classes.containsKey(name)) {\n                return classes.get(name);\n            }\n            final Class<?> clazz = module.getClassLoader().loadClass(name);\n            classes.put(name, clazz);\n            return clazz;\n        } catch (ClassNotFoundException | LinkageError e) {\n            throw new ResourceLoadingException(e);\n        }\n    }", "code_tokens": ["@", "Override", "public", "Class", "<", "?", ">", "classForName", "(", "String", "name", ")", "{", "try", "{", "if", "(", "classes", ".", "containsKey", "(", "name", ")", ")", "{", "return", "classes", ".", "get", "(", "name", ")", ";", "}", "final", "Class", "<", "?", ">", "clazz", "=", "module", ".", "getClassLoader", "(", ")", ".", "loadClass", "(", "name", ")", ";", "classes", ".", "put", "(", "name", ",", "clazz", ")", ";", "return", "clazz", ";", "}", "catch", "(", "ClassNotFoundException", "|", "LinkageError", "e", ")", "{", "throw", "new", "ResourceLoadingException", "(", "e", ")", ";", "}", "}"], "docstring": "If the class name is found in additionalClasses then return it.\n\nOtherwise the class will be loaded from the module ClassLoader", "docstring_tokens": ["If", "the", "class", "name", "is", "found", "in", "additionalClasses", "then", "return", "it", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/WeldModuleResourceLoader.java#L62-L74", "partition": "test", "index": 2676, "time": "2011-01-04 07:30:04"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/WeldModuleResourceLoader.java", "func_name": "WeldModuleResourceLoader.getResource", "original_string": "@Override\n    public URL getResource(String name) {\n        try {\n            return module.getClassLoader().getResource(name);\n        } catch (Exception e) {\n            throw new ResourceLoadingException(e);\n        }\n    }", "language": "java", "code": "@Override\n    public URL getResource(String name) {\n        try {\n            return module.getClassLoader().getResource(name);\n        } catch (Exception e) {\n            throw new ResourceLoadingException(e);\n        }\n    }", "code_tokens": ["@", "Override", "public", "URL", "getResource", "(", "String", "name", ")", "{", "try", "{", "return", "module", ".", "getClassLoader", "(", ")", ".", "getResource", "(", "name", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "ResourceLoadingException", "(", "e", ")", ";", "}", "}"], "docstring": "Loads a resource from the module class loader", "docstring_tokens": ["Loads", "a", "resource", "from", "the", "module", "class", "loader"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/WeldModuleResourceLoader.java#L83-L90", "partition": "test", "index": 2677, "time": "2011-01-04 07:30:04"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/WeldModuleResourceLoader.java", "func_name": "WeldModuleResourceLoader.getResources", "original_string": "@Override\n    public Collection<URL> getResources(String name) {\n        try {\n            final HashSet<URL> resources = new HashSet<URL>();\n            Enumeration<URL> urls = module.getClassLoader().getResources(name);\n            while (urls.hasMoreElements()) {\n                resources.add(urls.nextElement());\n            }\n            return resources;\n        } catch (Exception e) {\n            throw new ResourceLoadingException(e);\n        }\n\n    }", "language": "java", "code": "@Override\n    public Collection<URL> getResources(String name) {\n        try {\n            final HashSet<URL> resources = new HashSet<URL>();\n            Enumeration<URL> urls = module.getClassLoader().getResources(name);\n            while (urls.hasMoreElements()) {\n                resources.add(urls.nextElement());\n            }\n            return resources;\n        } catch (Exception e) {\n            throw new ResourceLoadingException(e);\n        }\n\n    }", "code_tokens": ["@", "Override", "public", "Collection", "<", "URL", ">", "getResources", "(", "String", "name", ")", "{", "try", "{", "final", "HashSet", "<", "URL", ">", "resources", "=", "new", "HashSet", "<", "URL", ">", "(", ")", ";", "Enumeration", "<", "URL", ">", "urls", "=", "module", ".", "getClassLoader", "(", ")", ".", "getResources", "(", "name", ")", ";", "while", "(", "urls", ".", "hasMoreElements", "(", ")", ")", "{", "resources", ".", "add", "(", "urls", ".", "nextElement", "(", ")", ")", ";", "}", "return", "resources", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "ResourceLoadingException", "(", "e", ")", ";", "}", "}"], "docstring": "Loads resources from the module class loader", "docstring_tokens": ["Loads", "resources", "from", "the", "module", "class", "loader"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/WeldModuleResourceLoader.java#L95-L108", "partition": "test", "index": 2678, "time": "2011-01-04 07:30:04"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/deployment/processors/WeldDependencyProcessor.java", "func_name": "WeldDependencyProcessor.deploy", "original_string": "public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n        addDependency(moduleSpecification, moduleLoader, JAVAX_ENTERPRISE_API);\n        addDependency(moduleSpecification, moduleLoader, JAVAX_INJECT_API);\n\n        if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {\n            return; // Skip if there are no beans.xml files in the deployment\n        }\n        addDependency(moduleSpecification, moduleLoader, JAVAX_PERSISTENCE_API_ID);\n        addDependency(moduleSpecification, moduleLoader, WELD_CORE_ID);\n        addDependency(moduleSpecification, moduleLoader, WELD_PROBE_ID, true);\n        addDependency(moduleSpecification, moduleLoader, WELD_API_ID);\n        addDependency(moduleSpecification, moduleLoader, WELD_SPI_ID);\n\n        ModuleDependency weldSubsystemDependency = new ModuleDependency(moduleLoader, JBOSS_AS_WELD_ID, false, false, false, false);\n        weldSubsystemDependency.addImportFilter(PathFilters.getMetaInfFilter(), true);\n        weldSubsystemDependency.addImportFilter(PathFilters.is(\"org/jboss/as/weld/injection\"), true);\n        weldSubsystemDependency.addImportFilter(PathFilters.acceptAll(), false);\n        weldSubsystemDependency.addExportFilter(PathFilters.getMetaInfFilter(), true);\n        moduleSpecification.addSystemDependency(weldSubsystemDependency);\n\n        // Due to serialization of EJBs\n        ModuleDependency weldEjbDependency = new ModuleDependency(moduleLoader, JBOSS_AS_WELD_EJB_ID, true, false, false, false);\n        weldEjbDependency.addImportFilter(PathFilters.is(\"org/jboss/as/weld/ejb\"), true);\n        weldEjbDependency.addImportFilter(PathFilters.acceptAll(), false);\n        moduleSpecification.addSystemDependency(weldEjbDependency);\n    }", "language": "java", "code": "public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n        addDependency(moduleSpecification, moduleLoader, JAVAX_ENTERPRISE_API);\n        addDependency(moduleSpecification, moduleLoader, JAVAX_INJECT_API);\n\n        if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) {\n            return; // Skip if there are no beans.xml files in the deployment\n        }\n        addDependency(moduleSpecification, moduleLoader, JAVAX_PERSISTENCE_API_ID);\n        addDependency(moduleSpecification, moduleLoader, WELD_CORE_ID);\n        addDependency(moduleSpecification, moduleLoader, WELD_PROBE_ID, true);\n        addDependency(moduleSpecification, moduleLoader, WELD_API_ID);\n        addDependency(moduleSpecification, moduleLoader, WELD_SPI_ID);\n\n        ModuleDependency weldSubsystemDependency = new ModuleDependency(moduleLoader, JBOSS_AS_WELD_ID, false, false, false, false);\n        weldSubsystemDependency.addImportFilter(PathFilters.getMetaInfFilter(), true);\n        weldSubsystemDependency.addImportFilter(PathFilters.is(\"org/jboss/as/weld/injection\"), true);\n        weldSubsystemDependency.addImportFilter(PathFilters.acceptAll(), false);\n        weldSubsystemDependency.addExportFilter(PathFilters.getMetaInfFilter(), true);\n        moduleSpecification.addSystemDependency(weldSubsystemDependency);\n\n        // Due to serialization of EJBs\n        ModuleDependency weldEjbDependency = new ModuleDependency(moduleLoader, JBOSS_AS_WELD_EJB_ID, true, false, false, false);\n        weldEjbDependency.addImportFilter(PathFilters.is(\"org/jboss/as/weld/ejb\"), true);\n        weldEjbDependency.addImportFilter(PathFilters.acceptAll(), false);\n        moduleSpecification.addSystemDependency(weldEjbDependency);\n    }", "code_tokens": ["public", "void", "deploy", "(", "DeploymentPhaseContext", "phaseContext", ")", "throws", "DeploymentUnitProcessingException", "{", "final", "DeploymentUnit", "deploymentUnit", "=", "phaseContext", ".", "getDeploymentUnit", "(", ")", ";", "final", "ModuleSpecification", "moduleSpecification", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE_SPECIFICATION", ")", ";", "final", "ModuleLoader", "moduleLoader", "=", "Module", ".", "getBootModuleLoader", "(", ")", ";", "addDependency", "(", "moduleSpecification", ",", "moduleLoader", ",", "JAVAX_ENTERPRISE_API", ")", ";", "addDependency", "(", "moduleSpecification", ",", "moduleLoader", ",", "JAVAX_INJECT_API", ")", ";", "if", "(", "!", "WeldDeploymentMarker", ".", "isPartOfWeldDeployment", "(", "deploymentUnit", ")", ")", "{", "return", ";", "// Skip if there are no beans.xml files in the deployment", "}", "addDependency", "(", "moduleSpecification", ",", "moduleLoader", ",", "JAVAX_PERSISTENCE_API_ID", ")", ";", "addDependency", "(", "moduleSpecification", ",", "moduleLoader", ",", "WELD_CORE_ID", ")", ";", "addDependency", "(", "moduleSpecification", ",", "moduleLoader", ",", "WELD_PROBE_ID", ",", "true", ")", ";", "addDependency", "(", "moduleSpecification", ",", "moduleLoader", ",", "WELD_API_ID", ")", ";", "addDependency", "(", "moduleSpecification", ",", "moduleLoader", ",", "WELD_SPI_ID", ")", ";", "ModuleDependency", "weldSubsystemDependency", "=", "new", "ModuleDependency", "(", "moduleLoader", ",", "JBOSS_AS_WELD_ID", ",", "false", ",", "false", ",", "false", ",", "false", ")", ";", "weldSubsystemDependency", ".", "addImportFilter", "(", "PathFilters", ".", "getMetaInfFilter", "(", ")", ",", "true", ")", ";", "weldSubsystemDependency", ".", "addImportFilter", "(", "PathFilters", ".", "is", "(", "\"org/jboss/as/weld/injection\"", ")", ",", "true", ")", ";", "weldSubsystemDependency", ".", "addImportFilter", "(", "PathFilters", ".", "acceptAll", "(", ")", ",", "false", ")", ";", "weldSubsystemDependency", ".", "addExportFilter", "(", "PathFilters", ".", "getMetaInfFilter", "(", ")", ",", "true", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "weldSubsystemDependency", ")", ";", "// Due to serialization of EJBs", "ModuleDependency", "weldEjbDependency", "=", "new", "ModuleDependency", "(", "moduleLoader", ",", "JBOSS_AS_WELD_EJB_ID", ",", "true", ",", "false", ",", "false", ",", "false", ")", ";", "weldEjbDependency", ".", "addImportFilter", "(", "PathFilters", ".", "is", "(", "\"org/jboss/as/weld/ejb\"", ")", ",", "true", ")", ";", "weldEjbDependency", ".", "addImportFilter", "(", "PathFilters", ".", "acceptAll", "(", ")", ",", "false", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "weldEjbDependency", ")", ";", "}"], "docstring": "Add dependencies for modules required for weld deployments, if managed weld configurations are attached to the deployment", "docstring_tokens": ["Add", "dependencies", "for", "modules", "required", "for", "weld", "deployments", "if", "managed", "weld", "configurations", "are", "attached", "to", "the", "deployment"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/deployment/processors/WeldDependencyProcessor.java#L59-L88", "partition": "test", "index": 2626, "time": "2011-01-04 07:30:04"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/service/NamingStoreService.java", "func_name": "NamingStoreService.stop", "original_string": "public void stop(StopContext context) {\n        if(store != null) {\n            try {\n                store.close();\n                store = null;\n            } catch (NamingException e) {\n                throw NamingLogger.ROOT_LOGGER.failedToDestroyRootContext(e);\n            }\n        }\n    }", "language": "java", "code": "public void stop(StopContext context) {\n        if(store != null) {\n            try {\n                store.close();\n                store = null;\n            } catch (NamingException e) {\n                throw NamingLogger.ROOT_LOGGER.failedToDestroyRootContext(e);\n            }\n        }\n    }", "code_tokens": ["public", "void", "stop", "(", "StopContext", "context", ")", "{", "if", "(", "store", "!=", "null", ")", "{", "try", "{", "store", ".", "close", "(", ")", ";", "store", "=", "null", ";", "}", "catch", "(", "NamingException", "e", ")", "{", "throw", "NamingLogger", ".", "ROOT_LOGGER", ".", "failedToDestroyRootContext", "(", "e", ")", ";", "}", "}", "}"], "docstring": "Destroys the naming store.\n\n@param context The stop context", "docstring_tokens": ["Destroys", "the", "naming", "store", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/service/NamingStoreService.java#L78-L87", "partition": "test", "index": 2858, "time": "2011-01-11 11:58:54"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/service/NamingStoreService.java", "func_name": "NamingStoreService.start", "original_string": "public void start(final StartContext context) throws StartException {\n        if(store == null) {\n            final ServiceRegistry serviceRegistry = context.getController().getServiceContainer();\n            final ServiceName serviceNameBase = context.getController().getName();\n            final ServiceTarget serviceTarget = context.getChildTarget();\n            store = readOnly ? new ServiceBasedNamingStore(serviceRegistry, serviceNameBase) : new WritableServiceBasedNamingStore(serviceRegistry, serviceNameBase, serviceTarget);\n        }\n    }", "language": "java", "code": "public void start(final StartContext context) throws StartException {\n        if(store == null) {\n            final ServiceRegistry serviceRegistry = context.getController().getServiceContainer();\n            final ServiceName serviceNameBase = context.getController().getName();\n            final ServiceTarget serviceTarget = context.getChildTarget();\n            store = readOnly ? new ServiceBasedNamingStore(serviceRegistry, serviceNameBase) : new WritableServiceBasedNamingStore(serviceRegistry, serviceNameBase, serviceTarget);\n        }\n    }", "code_tokens": ["public", "void", "start", "(", "final", "StartContext", "context", ")", "throws", "StartException", "{", "if", "(", "store", "==", "null", ")", "{", "final", "ServiceRegistry", "serviceRegistry", "=", "context", ".", "getController", "(", ")", ".", "getServiceContainer", "(", ")", ";", "final", "ServiceName", "serviceNameBase", "=", "context", ".", "getController", "(", ")", ".", "getName", "(", ")", ";", "final", "ServiceTarget", "serviceTarget", "=", "context", ".", "getChildTarget", "(", ")", ";", "store", "=", "readOnly", "?", "new", "ServiceBasedNamingStore", "(", "serviceRegistry", ",", "serviceNameBase", ")", ":", "new", "WritableServiceBasedNamingStore", "(", "serviceRegistry", ",", "serviceNameBase", ",", "serviceTarget", ")", ";", "}", "}"], "docstring": "Creates the naming store if not provided by the constructor.\n\n@param context The start context\n@throws StartException If any problems occur creating the context", "docstring_tokens": ["Creates", "the", "naming", "store", "if", "not", "provided", "by", "the", "constructor", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/service/NamingStoreService.java#L64-L71", "partition": "test", "index": 2857, "time": "2011-01-11 11:58:54"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java", "func_name": "PersistenceUnitServiceHandler.getPersistenceProviderAdaptor", "original_string": "private static PersistenceProviderAdaptor getPersistenceProviderAdaptor(\n            final PersistenceUnitMetadata pu,\n            final PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder,\n            final DeploymentUnit deploymentUnit,\n            final PersistenceProvider provider,\n            final Platform platform) throws\n        DeploymentUnitProcessingException {\n        String adapterClass = pu.getProperties().getProperty(Configuration.ADAPTER_CLASS);\n\n        /**\n         * use adapter packaged in application deployment.\n         */\n        if (persistenceProviderDeploymentHolder != null && adapterClass != null) {\n            List<PersistenceProviderAdaptor> persistenceProviderAdaptors = persistenceProviderDeploymentHolder.getAdapters();\n            for(PersistenceProviderAdaptor persistenceProviderAdaptor:persistenceProviderAdaptors) {\n                if(adapterClass.equals(persistenceProviderAdaptor.getClass().getName())) {\n                    return persistenceProviderAdaptor;\n                }\n            }\n        }\n\n        String adaptorModule = pu.getProperties().getProperty(Configuration.ADAPTER_MODULE);\n        PersistenceProviderAdaptor adaptor;\n        adaptor = getPerDeploymentSharedPersistenceProviderAdaptor(deploymentUnit, adaptorModule, provider);\n        if (adaptor == null) {\n            try {\n                // will load the persistence provider adaptor (integration classes).  if adaptorModule is null\n                // the noop adaptor is returned (can be used against any provider but the integration classes\n                // are handled externally via properties or code in the persistence provider).\n                if (adaptorModule != null) { // legacy way of loading adapter module\n                    adaptor = PersistenceProviderAdaptorLoader.loadPersistenceAdapterModule(adaptorModule, platform, createManager(deploymentUnit));\n                }\n                else {\n                    adaptor = PersistenceProviderAdaptorLoader.loadPersistenceAdapter(provider, platform, createManager(deploymentUnit));\n                }\n            } catch (ModuleLoadException e) {\n                throw JpaLogger.ROOT_LOGGER.persistenceProviderAdaptorModuleLoadError(e, adaptorModule);\n            }\n            adaptor = savePerDeploymentSharedPersistenceProviderAdaptor(deploymentUnit, adaptorModule, adaptor, provider);\n        }\n\n        if (adaptor == null) {\n            throw JpaLogger.ROOT_LOGGER.failedToGetAdapter(pu.getPersistenceProviderClassName());\n        }\n        return adaptor;\n    }", "language": "java", "code": "private static PersistenceProviderAdaptor getPersistenceProviderAdaptor(\n            final PersistenceUnitMetadata pu,\n            final PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder,\n            final DeploymentUnit deploymentUnit,\n            final PersistenceProvider provider,\n            final Platform platform) throws\n        DeploymentUnitProcessingException {\n        String adapterClass = pu.getProperties().getProperty(Configuration.ADAPTER_CLASS);\n\n        /**\n         * use adapter packaged in application deployment.\n         */\n        if (persistenceProviderDeploymentHolder != null && adapterClass != null) {\n            List<PersistenceProviderAdaptor> persistenceProviderAdaptors = persistenceProviderDeploymentHolder.getAdapters();\n            for(PersistenceProviderAdaptor persistenceProviderAdaptor:persistenceProviderAdaptors) {\n                if(adapterClass.equals(persistenceProviderAdaptor.getClass().getName())) {\n                    return persistenceProviderAdaptor;\n                }\n            }\n        }\n\n        String adaptorModule = pu.getProperties().getProperty(Configuration.ADAPTER_MODULE);\n        PersistenceProviderAdaptor adaptor;\n        adaptor = getPerDeploymentSharedPersistenceProviderAdaptor(deploymentUnit, adaptorModule, provider);\n        if (adaptor == null) {\n            try {\n                // will load the persistence provider adaptor (integration classes).  if adaptorModule is null\n                // the noop adaptor is returned (can be used against any provider but the integration classes\n                // are handled externally via properties or code in the persistence provider).\n                if (adaptorModule != null) { // legacy way of loading adapter module\n                    adaptor = PersistenceProviderAdaptorLoader.loadPersistenceAdapterModule(adaptorModule, platform, createManager(deploymentUnit));\n                }\n                else {\n                    adaptor = PersistenceProviderAdaptorLoader.loadPersistenceAdapter(provider, platform, createManager(deploymentUnit));\n                }\n            } catch (ModuleLoadException e) {\n                throw JpaLogger.ROOT_LOGGER.persistenceProviderAdaptorModuleLoadError(e, adaptorModule);\n            }\n            adaptor = savePerDeploymentSharedPersistenceProviderAdaptor(deploymentUnit, adaptorModule, adaptor, provider);\n        }\n\n        if (adaptor == null) {\n            throw JpaLogger.ROOT_LOGGER.failedToGetAdapter(pu.getPersistenceProviderClassName());\n        }\n        return adaptor;\n    }", "code_tokens": ["private", "static", "PersistenceProviderAdaptor", "getPersistenceProviderAdaptor", "(", "final", "PersistenceUnitMetadata", "pu", ",", "final", "PersistenceProviderDeploymentHolder", "persistenceProviderDeploymentHolder", ",", "final", "DeploymentUnit", "deploymentUnit", ",", "final", "PersistenceProvider", "provider", ",", "final", "Platform", "platform", ")", "throws", "DeploymentUnitProcessingException", "{", "String", "adapterClass", "=", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "Configuration", ".", "ADAPTER_CLASS", ")", ";", "/**\n         * use adapter packaged in application deployment.\n         */", "if", "(", "persistenceProviderDeploymentHolder", "!=", "null", "&&", "adapterClass", "!=", "null", ")", "{", "List", "<", "PersistenceProviderAdaptor", ">", "persistenceProviderAdaptors", "=", "persistenceProviderDeploymentHolder", ".", "getAdapters", "(", ")", ";", "for", "(", "PersistenceProviderAdaptor", "persistenceProviderAdaptor", ":", "persistenceProviderAdaptors", ")", "{", "if", "(", "adapterClass", ".", "equals", "(", "persistenceProviderAdaptor", ".", "getClass", "(", ")", ".", "getName", "(", ")", ")", ")", "{", "return", "persistenceProviderAdaptor", ";", "}", "}", "}", "String", "adaptorModule", "=", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "Configuration", ".", "ADAPTER_MODULE", ")", ";", "PersistenceProviderAdaptor", "adaptor", ";", "adaptor", "=", "getPerDeploymentSharedPersistenceProviderAdaptor", "(", "deploymentUnit", ",", "adaptorModule", ",", "provider", ")", ";", "if", "(", "adaptor", "==", "null", ")", "{", "try", "{", "// will load the persistence provider adaptor (integration classes).  if adaptorModule is null", "// the noop adaptor is returned (can be used against any provider but the integration classes", "// are handled externally via properties or code in the persistence provider).", "if", "(", "adaptorModule", "!=", "null", ")", "{", "// legacy way of loading adapter module", "adaptor", "=", "PersistenceProviderAdaptorLoader", ".", "loadPersistenceAdapterModule", "(", "adaptorModule", ",", "platform", ",", "createManager", "(", "deploymentUnit", ")", ")", ";", "}", "else", "{", "adaptor", "=", "PersistenceProviderAdaptorLoader", ".", "loadPersistenceAdapter", "(", "provider", ",", "platform", ",", "createManager", "(", "deploymentUnit", ")", ")", ";", "}", "}", "catch", "(", "ModuleLoadException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "persistenceProviderAdaptorModuleLoadError", "(", "e", ",", "adaptorModule", ")", ";", "}", "adaptor", "=", "savePerDeploymentSharedPersistenceProviderAdaptor", "(", "deploymentUnit", ",", "adaptorModule", ",", "adaptor", ",", "provider", ")", ";", "}", "if", "(", "adaptor", "==", "null", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "failedToGetAdapter", "(", "pu", ".", "getPersistenceProviderClassName", "(", ")", ")", ";", "}", "return", "adaptor", ";", "}"], "docstring": "Get the persistence provider adaptor.  Will load the adapter module if needed.\n\n\n@param pu\n@param persistenceProviderDeploymentHolder\n\n@param provider\n@param platform\n@return\n@throws DeploymentUnitProcessingException", "docstring_tokens": ["Get", "the", "persistence", "provider", "adaptor", ".", "Will", "load", "the", "adapter", "module", "if", "needed", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java#L804-L849", "partition": "test", "index": 2735, "time": "2011-01-22 15:41:34"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java", "func_name": "SFSBCallStack.pushCall", "original_string": "public static void pushCall(Map<String, ExtendedEntityManager> entityManagers) {\n        currentSFSBCallStack().add(entityManagers);\n\n        if (entityManagers != null) {\n            /**\n             * JPA 2.0 spec section 7.9.1 Container Responsibilities:\n             * \"When a business method of the stateful session bean is invoked,\n             *  if the stateful session bean uses container managed transaction demarcation,\n             *  and the entity manager is not already associated with the current JTA transaction,\n             *  the container associates the entity manager with the current JTA transaction and\n             *  calls EntityManager.joinTransaction.\n             *  \"\n             */\n            for(ExtendedEntityManager extendedEntityManager: entityManagers.values()) {\n                extendedEntityManager.internalAssociateWithJtaTx();\n            }\n        }\n\n    }", "language": "java", "code": "public static void pushCall(Map<String, ExtendedEntityManager> entityManagers) {\n        currentSFSBCallStack().add(entityManagers);\n\n        if (entityManagers != null) {\n            /**\n             * JPA 2.0 spec section 7.9.1 Container Responsibilities:\n             * \"When a business method of the stateful session bean is invoked,\n             *  if the stateful session bean uses container managed transaction demarcation,\n             *  and the entity manager is not already associated with the current JTA transaction,\n             *  the container associates the entity manager with the current JTA transaction and\n             *  calls EntityManager.joinTransaction.\n             *  \"\n             */\n            for(ExtendedEntityManager extendedEntityManager: entityManagers.values()) {\n                extendedEntityManager.internalAssociateWithJtaTx();\n            }\n        }\n\n    }", "code_tokens": ["public", "static", "void", "pushCall", "(", "Map", "<", "String", ",", "ExtendedEntityManager", ">", "entityManagers", ")", "{", "currentSFSBCallStack", "(", ")", ".", "add", "(", "entityManagers", ")", ";", "if", "(", "entityManagers", "!=", "null", ")", "{", "/**\n             * JPA 2.0 spec section 7.9.1 Container Responsibilities:\n             * \"When a business method of the stateful session bean is invoked,\n             *  if the stateful session bean uses container managed transaction demarcation,\n             *  and the entity manager is not already associated with the current JTA transaction,\n             *  the container associates the entity manager with the current JTA transaction and\n             *  calls EntityManager.joinTransaction.\n             *  \"\n             */", "for", "(", "ExtendedEntityManager", "extendedEntityManager", ":", "entityManagers", ".", "values", "(", ")", ")", "{", "extendedEntityManager", ".", "internalAssociateWithJtaTx", "(", ")", ";", "}", "}", "}"], "docstring": "Push the passed SFSB context handle onto the invocation call stack\n\n@param entityManagers the entity manager map", "docstring_tokens": ["Push", "the", "passed", "SFSB", "context", "handle", "onto", "the", "invocation", "call", "stack"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java#L126-L144", "partition": "test", "index": 2623, "time": "2011-01-22 15:41:34"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderResolverImpl.java", "func_name": "PersistenceProviderResolverImpl.getPersistenceProviders", "original_string": "@Override\n    public List<PersistenceProvider> getPersistenceProviders() {\n        List<PersistenceProvider> providersCopy = new ArrayList<>(providers.size());\n\n        /**\n         * Add the application specified providers first so they are found before the global providers\n         */\n        synchronized(persistenceProviderPerClassLoader) {\n            if (persistenceProviderPerClassLoader.size() > 0) {\n                // get the deployment or subdeployment classloader\n                ClassLoader deploymentClassLoader = findParentModuleCl(WildFlySecurityManager.getCurrentContextClassLoaderPrivileged());\n                ROOT_LOGGER.tracef(\"get application level Persistence Provider for classloader %s\" , deploymentClassLoader);\n                // collect persistence providers associated with deployment/each sub-deployment\n                List<Class<? extends PersistenceProvider>> deploymentSpecificPersistenceProviders = persistenceProviderPerClassLoader.get(deploymentClassLoader);\n                ROOT_LOGGER.tracef(\"got application level Persistence Provider list %s\" , deploymentSpecificPersistenceProviders);\n                if (deploymentSpecificPersistenceProviders != null) {\n\n                    for (Class<? extends PersistenceProvider> providerClass : deploymentSpecificPersistenceProviders) {\n                        try {\n                            ROOT_LOGGER.tracef(\"application has its own Persistence Provider %s\", providerClass.getName());\n                            providersCopy.add(providerClass.newInstance());\n                        } catch (InstantiationException e) {\n                            throw JpaLogger.ROOT_LOGGER.couldNotCreateInstanceProvider(e, providerClass.getName());\n                        } catch (IllegalAccessException e) {\n                            throw JpaLogger.ROOT_LOGGER.couldNotCreateInstanceProvider(e, providerClass.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        // add global persistence providers last (so application packaged providers have priority)\n        for (Class<?> providerClass : providers) {\n            try {\n                providersCopy.add((PersistenceProvider) providerClass.newInstance());\n                ROOT_LOGGER.tracef(\"returning global (module) Persistence Provider %s\", providerClass.getName());\n            } catch (InstantiationException e) {\n                throw JpaLogger.ROOT_LOGGER.couldNotCreateInstanceProvider(e, providerClass.getName());\n            } catch (IllegalAccessException e) {\n                throw JpaLogger.ROOT_LOGGER.couldNotCreateInstanceProvider(e, providerClass.getName());\n            }\n        }\n        return providersCopy;\n    }", "language": "java", "code": "@Override\n    public List<PersistenceProvider> getPersistenceProviders() {\n        List<PersistenceProvider> providersCopy = new ArrayList<>(providers.size());\n\n        /**\n         * Add the application specified providers first so they are found before the global providers\n         */\n        synchronized(persistenceProviderPerClassLoader) {\n            if (persistenceProviderPerClassLoader.size() > 0) {\n                // get the deployment or subdeployment classloader\n                ClassLoader deploymentClassLoader = findParentModuleCl(WildFlySecurityManager.getCurrentContextClassLoaderPrivileged());\n                ROOT_LOGGER.tracef(\"get application level Persistence Provider for classloader %s\" , deploymentClassLoader);\n                // collect persistence providers associated with deployment/each sub-deployment\n                List<Class<? extends PersistenceProvider>> deploymentSpecificPersistenceProviders = persistenceProviderPerClassLoader.get(deploymentClassLoader);\n                ROOT_LOGGER.tracef(\"got application level Persistence Provider list %s\" , deploymentSpecificPersistenceProviders);\n                if (deploymentSpecificPersistenceProviders != null) {\n\n                    for (Class<? extends PersistenceProvider> providerClass : deploymentSpecificPersistenceProviders) {\n                        try {\n                            ROOT_LOGGER.tracef(\"application has its own Persistence Provider %s\", providerClass.getName());\n                            providersCopy.add(providerClass.newInstance());\n                        } catch (InstantiationException e) {\n                            throw JpaLogger.ROOT_LOGGER.couldNotCreateInstanceProvider(e, providerClass.getName());\n                        } catch (IllegalAccessException e) {\n                            throw JpaLogger.ROOT_LOGGER.couldNotCreateInstanceProvider(e, providerClass.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        // add global persistence providers last (so application packaged providers have priority)\n        for (Class<?> providerClass : providers) {\n            try {\n                providersCopy.add((PersistenceProvider) providerClass.newInstance());\n                ROOT_LOGGER.tracef(\"returning global (module) Persistence Provider %s\", providerClass.getName());\n            } catch (InstantiationException e) {\n                throw JpaLogger.ROOT_LOGGER.couldNotCreateInstanceProvider(e, providerClass.getName());\n            } catch (IllegalAccessException e) {\n                throw JpaLogger.ROOT_LOGGER.couldNotCreateInstanceProvider(e, providerClass.getName());\n            }\n        }\n        return providersCopy;\n    }", "code_tokens": ["@", "Override", "public", "List", "<", "PersistenceProvider", ">", "getPersistenceProviders", "(", ")", "{", "List", "<", "PersistenceProvider", ">", "providersCopy", "=", "new", "ArrayList", "<>", "(", "providers", ".", "size", "(", ")", ")", ";", "/**\n         * Add the application specified providers first so they are found before the global providers\n         */", "synchronized", "(", "persistenceProviderPerClassLoader", ")", "{", "if", "(", "persistenceProviderPerClassLoader", ".", "size", "(", ")", ">", "0", ")", "{", "// get the deployment or subdeployment classloader", "ClassLoader", "deploymentClassLoader", "=", "findParentModuleCl", "(", "WildFlySecurityManager", ".", "getCurrentContextClassLoaderPrivileged", "(", ")", ")", ";", "ROOT_LOGGER", ".", "tracef", "(", "\"get application level Persistence Provider for classloader %s\"", ",", "deploymentClassLoader", ")", ";", "// collect persistence providers associated with deployment/each sub-deployment", "List", "<", "Class", "<", "?", "extends", "PersistenceProvider", ">", ">", "deploymentSpecificPersistenceProviders", "=", "persistenceProviderPerClassLoader", ".", "get", "(", "deploymentClassLoader", ")", ";", "ROOT_LOGGER", ".", "tracef", "(", "\"got application level Persistence Provider list %s\"", ",", "deploymentSpecificPersistenceProviders", ")", ";", "if", "(", "deploymentSpecificPersistenceProviders", "!=", "null", ")", "{", "for", "(", "Class", "<", "?", "extends", "PersistenceProvider", ">", "providerClass", ":", "deploymentSpecificPersistenceProviders", ")", "{", "try", "{", "ROOT_LOGGER", ".", "tracef", "(", "\"application has its own Persistence Provider %s\"", ",", "providerClass", ".", "getName", "(", ")", ")", ";", "providersCopy", ".", "add", "(", "providerClass", ".", "newInstance", "(", ")", ")", ";", "}", "catch", "(", "InstantiationException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "couldNotCreateInstanceProvider", "(", "e", ",", "providerClass", ".", "getName", "(", ")", ")", ";", "}", "catch", "(", "IllegalAccessException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "couldNotCreateInstanceProvider", "(", "e", ",", "providerClass", ".", "getName", "(", ")", ")", ";", "}", "}", "}", "}", "}", "// add global persistence providers last (so application packaged providers have priority)", "for", "(", "Class", "<", "?", ">", "providerClass", ":", "providers", ")", "{", "try", "{", "providersCopy", ".", "add", "(", "(", "PersistenceProvider", ")", "providerClass", ".", "newInstance", "(", ")", ")", ";", "ROOT_LOGGER", ".", "tracef", "(", "\"returning global (module) Persistence Provider %s\"", ",", "providerClass", ".", "getName", "(", ")", ")", ";", "}", "catch", "(", "InstantiationException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "couldNotCreateInstanceProvider", "(", "e", ",", "providerClass", ".", "getName", "(", ")", ")", ";", "}", "catch", "(", "IllegalAccessException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "couldNotCreateInstanceProvider", "(", "e", ",", "providerClass", ".", "getName", "(", ")", ")", ";", "}", "}", "return", "providersCopy", ";", "}"], "docstring": "Return a new instance of each persistence provider class\n\n@return", "docstring_tokens": ["Return", "a", "new", "instance", "of", "each", "persistence", "provider", "class"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderResolverImpl.java#L66-L109", "partition": "test", "index": 2728, "time": "2011-01-22 15:41:34"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderResolverImpl.java", "func_name": "PersistenceProviderResolverImpl.clearCachedDeploymentSpecificProviders", "original_string": "public void clearCachedDeploymentSpecificProviders(Set<ClassLoader> deploymentClassLoaders) {\n\n        synchronized(persistenceProviderPerClassLoader) {\n            for (ClassLoader deploymentClassLoader: deploymentClassLoaders) {\n                persistenceProviderPerClassLoader.remove(deploymentClassLoader);\n            }\n        }\n    }", "language": "java", "code": "public void clearCachedDeploymentSpecificProviders(Set<ClassLoader> deploymentClassLoaders) {\n\n        synchronized(persistenceProviderPerClassLoader) {\n            for (ClassLoader deploymentClassLoader: deploymentClassLoaders) {\n                persistenceProviderPerClassLoader.remove(deploymentClassLoader);\n            }\n        }\n    }", "code_tokens": ["public", "void", "clearCachedDeploymentSpecificProviders", "(", "Set", "<", "ClassLoader", ">", "deploymentClassLoaders", ")", "{", "synchronized", "(", "persistenceProviderPerClassLoader", ")", "{", "for", "(", "ClassLoader", "deploymentClassLoader", ":", "deploymentClassLoaders", ")", "{", "persistenceProviderPerClassLoader", ".", "remove", "(", "deploymentClassLoader", ")", ";", "}", "}", "}"], "docstring": "Cleared at application undeployment time to remove any persistence providers that were deployed with the application\n\n@param deploymentClassLoaders", "docstring_tokens": ["Cleared", "at", "application", "undeployment", "time", "to", "remove", "any", "persistence", "providers", "that", "were", "deployed", "with", "the", "application"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderResolverImpl.java#L121-L128", "partition": "test", "index": 2729, "time": "2011-01-22 15:41:34"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitParseProcessor.java", "func_name": "PersistenceUnitParseProcessor.postParseSteps", "original_string": "private void postParseSteps(\n        final VirtualFile persistence_xml,\n        final PersistenceUnitMetadataHolder puHolder,\n        final DeploymentUnit deploymentUnit ) {\n\n        for (PersistenceUnitMetadata pu : puHolder.getPersistenceUnits()) {\n            // set URLs\n            List<URL> jarfilesUrls = new ArrayList<URL>();\n            if (pu.getJarFiles() != null) {\n                for (String jar : pu.getJarFiles()) {\n                    jarfilesUrls.add(getRelativeURL(persistence_xml, jar));\n                }\n            }\n            pu.setJarFileUrls(jarfilesUrls);\n            URL url = getPersistenceUnitURL(persistence_xml);\n            pu.setPersistenceUnitRootUrl(url);\n            String scopedPersistenceUnitName;\n\n            /**\n             * WFLY-5478 allow custom scoped persistence unit name hint in persistence unit definition.\n             * Specified scoped persistence unit name needs to be unique across application server deployments.\n             * Application is responsible for picking a unique name.\n             * Currently, a non-unique name will result in a DuplicateServiceException deployment failure:\n             *   org.jboss.msc.service.DuplicateServiceException: Service jboss.persistenceunit.my2lccustom#test_pu.__FIRST_PHASE__ is already registered\n             */\n            scopedPersistenceUnitName = Configuration.getScopedPersistenceUnitName(pu);\n            if (scopedPersistenceUnitName == null) {\n                scopedPersistenceUnitName = createBeanName(deploymentUnit, pu.getPersistenceUnitName());\n            } else {\n                ROOT_LOGGER.tracef(\"persistence unit '%s' specified a custom scoped persistence unit name hint \" +\n                        \"(jboss.as.jpa.scopedname=%s).  The specified name *must* be unique across all application server deployments.\",\n                        pu.getPersistenceUnitName(),\n                        scopedPersistenceUnitName);\n                if (scopedPersistenceUnitName.indexOf('/') != -1) {\n                    throw JpaLogger.ROOT_LOGGER.invalidScopedName(scopedPersistenceUnitName, '/');\n                }\n            }\n\n            pu.setScopedPersistenceUnitName(scopedPersistenceUnitName);\n        }\n    }", "language": "java", "code": "private void postParseSteps(\n        final VirtualFile persistence_xml,\n        final PersistenceUnitMetadataHolder puHolder,\n        final DeploymentUnit deploymentUnit ) {\n\n        for (PersistenceUnitMetadata pu : puHolder.getPersistenceUnits()) {\n            // set URLs\n            List<URL> jarfilesUrls = new ArrayList<URL>();\n            if (pu.getJarFiles() != null) {\n                for (String jar : pu.getJarFiles()) {\n                    jarfilesUrls.add(getRelativeURL(persistence_xml, jar));\n                }\n            }\n            pu.setJarFileUrls(jarfilesUrls);\n            URL url = getPersistenceUnitURL(persistence_xml);\n            pu.setPersistenceUnitRootUrl(url);\n            String scopedPersistenceUnitName;\n\n            /**\n             * WFLY-5478 allow custom scoped persistence unit name hint in persistence unit definition.\n             * Specified scoped persistence unit name needs to be unique across application server deployments.\n             * Application is responsible for picking a unique name.\n             * Currently, a non-unique name will result in a DuplicateServiceException deployment failure:\n             *   org.jboss.msc.service.DuplicateServiceException: Service jboss.persistenceunit.my2lccustom#test_pu.__FIRST_PHASE__ is already registered\n             */\n            scopedPersistenceUnitName = Configuration.getScopedPersistenceUnitName(pu);\n            if (scopedPersistenceUnitName == null) {\n                scopedPersistenceUnitName = createBeanName(deploymentUnit, pu.getPersistenceUnitName());\n            } else {\n                ROOT_LOGGER.tracef(\"persistence unit '%s' specified a custom scoped persistence unit name hint \" +\n                        \"(jboss.as.jpa.scopedname=%s).  The specified name *must* be unique across all application server deployments.\",\n                        pu.getPersistenceUnitName(),\n                        scopedPersistenceUnitName);\n                if (scopedPersistenceUnitName.indexOf('/') != -1) {\n                    throw JpaLogger.ROOT_LOGGER.invalidScopedName(scopedPersistenceUnitName, '/');\n                }\n            }\n\n            pu.setScopedPersistenceUnitName(scopedPersistenceUnitName);\n        }\n    }", "code_tokens": ["private", "void", "postParseSteps", "(", "final", "VirtualFile", "persistence_xml", ",", "final", "PersistenceUnitMetadataHolder", "puHolder", ",", "final", "DeploymentUnit", "deploymentUnit", ")", "{", "for", "(", "PersistenceUnitMetadata", "pu", ":", "puHolder", ".", "getPersistenceUnits", "(", ")", ")", "{", "// set URLs", "List", "<", "URL", ">", "jarfilesUrls", "=", "new", "ArrayList", "<", "URL", ">", "(", ")", ";", "if", "(", "pu", ".", "getJarFiles", "(", ")", "!=", "null", ")", "{", "for", "(", "String", "jar", ":", "pu", ".", "getJarFiles", "(", ")", ")", "{", "jarfilesUrls", ".", "add", "(", "getRelativeURL", "(", "persistence_xml", ",", "jar", ")", ")", ";", "}", "}", "pu", ".", "setJarFileUrls", "(", "jarfilesUrls", ")", ";", "URL", "url", "=", "getPersistenceUnitURL", "(", "persistence_xml", ")", ";", "pu", ".", "setPersistenceUnitRootUrl", "(", "url", ")", ";", "String", "scopedPersistenceUnitName", ";", "/**\n             * WFLY-5478 allow custom scoped persistence unit name hint in persistence unit definition.\n             * Specified scoped persistence unit name needs to be unique across application server deployments.\n             * Application is responsible for picking a unique name.\n             * Currently, a non-unique name will result in a DuplicateServiceException deployment failure:\n             *   org.jboss.msc.service.DuplicateServiceException: Service jboss.persistenceunit.my2lccustom#test_pu.__FIRST_PHASE__ is already registered\n             */", "scopedPersistenceUnitName", "=", "Configuration", ".", "getScopedPersistenceUnitName", "(", "pu", ")", ";", "if", "(", "scopedPersistenceUnitName", "==", "null", ")", "{", "scopedPersistenceUnitName", "=", "createBeanName", "(", "deploymentUnit", ",", "pu", ".", "getPersistenceUnitName", "(", ")", ")", ";", "}", "else", "{", "ROOT_LOGGER", ".", "tracef", "(", "\"persistence unit '%s' specified a custom scoped persistence unit name hint \"", "+", "\"(jboss.as.jpa.scopedname=%s).  The specified name *must* be unique across all application server deployments.\"", ",", "pu", ".", "getPersistenceUnitName", "(", ")", ",", "scopedPersistenceUnitName", ")", ";", "if", "(", "scopedPersistenceUnitName", ".", "indexOf", "(", "'", "'", ")", "!=", "-", "1", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "invalidScopedName", "(", "scopedPersistenceUnitName", ",", "'", "'", ")", ";", "}", "}", "pu", ".", "setScopedPersistenceUnitName", "(", "scopedPersistenceUnitName", ")", ";", "}", "}"], "docstring": "Some of this might need to move to the install phase\n\n@param persistence_xml\n@param puHolder", "docstring_tokens": ["Some", "of", "this", "might", "need", "to", "move", "to", "the", "install", "phase"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitParseProcessor.java#L247-L287", "partition": "test", "index": 2719, "time": "2011-01-22 15:41:34"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java", "func_name": "PersistenceUnitServiceHandler.addPuService", "original_string": "private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList,\n                                     final boolean startEarly, final Platform platform)\n        throws DeploymentUnitProcessingException {\n\n        if (puList.size() > 0) {\n            final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n            final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n            final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);\n            final ServiceTarget serviceTarget = phaseContext.getServiceTarget();\n            final ModuleClassLoader classLoader = module.getClassLoader();\n\n            for (PersistenceUnitMetadataHolder holder : puList) {\n                setAnnotationIndexes(holder, deploymentUnit);\n                for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) {\n\n                    // only start the persistence unit if JPA_CONTAINER_MANAGED is true\n                    String jpaContainerManaged = pu.getProperties().getProperty(Configuration.JPA_CONTAINER_MANAGED);\n                    boolean deployPU = (jpaContainerManaged == null? true : Boolean.parseBoolean(jpaContainerManaged));\n\n                    if (deployPU) {\n                        final PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder = getPersistenceProviderDeploymentHolder(deploymentUnit);\n                        final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit);\n                        final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform);\n                        final boolean twoPhaseBootStrapCapable = (adaptor instanceof TwoPhaseBootstrapCapable) && Configuration.allowTwoPhaseBootstrap(pu);\n\n                        if (startEarly) {\n                            if (twoPhaseBootStrapCapable) {\n                                deployPersistenceUnitPhaseOne(deploymentUnit, eeModuleDescription, serviceTarget, classLoader, pu, adaptor);\n                            }\n                            else if (false == Configuration.needClassFileTransformer(pu)) {\n                                // will start later when startEarly == false\n                                ROOT_LOGGER.tracef(\"persistence unit %s in deployment %s is configured to not need class transformer to be set, no class rewriting will be allowed\",\n                                    pu.getPersistenceUnitName(), deploymentUnit.getName());\n                            }\n                            else {\n                                // we need class file transformer to work, don't allow cdi bean manager to be access since that\n                                // could cause application classes to be loaded (workaround by setting jboss.as.jpa.classtransformer to false).  WFLY-1463\n                                final boolean allowCdiBeanManagerAccess = false;\n                                deployPersistenceUnit(deploymentUnit, eeModuleDescription, serviceTarget, classLoader, pu, provider, adaptor, allowCdiBeanManagerAccess);\n                            }\n                        }\n                        else { // !startEarly\n                            if (twoPhaseBootStrapCapable) {\n                                deployPersistenceUnitPhaseTwo(deploymentUnit, eeModuleDescription, serviceTarget, classLoader, pu, provider, adaptor);\n                            } else if (false == Configuration.needClassFileTransformer(pu)) {\n                                final boolean allowCdiBeanManagerAccess = true;\n                                // PUs that have Configuration.JPA_CONTAINER_CLASS_TRANSFORMER = false will start during INSTALL phase\n                                deployPersistenceUnit(deploymentUnit, eeModuleDescription, serviceTarget, classLoader, pu, provider, adaptor, allowCdiBeanManagerAccess);\n                            }\n                        }\n\n                    }\n                    else {\n                        ROOT_LOGGER.tracef(\"persistence unit %s in deployment %s is not container managed (%s is set to false)\",\n                                pu.getPersistenceUnitName(), deploymentUnit.getName(), Configuration.JPA_CONTAINER_MANAGED);\n                    }\n                }\n            }\n        }\n    }", "language": "java", "code": "private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList,\n                                     final boolean startEarly, final Platform platform)\n        throws DeploymentUnitProcessingException {\n\n        if (puList.size() > 0) {\n            final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n            final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n            final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);\n            final ServiceTarget serviceTarget = phaseContext.getServiceTarget();\n            final ModuleClassLoader classLoader = module.getClassLoader();\n\n            for (PersistenceUnitMetadataHolder holder : puList) {\n                setAnnotationIndexes(holder, deploymentUnit);\n                for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) {\n\n                    // only start the persistence unit if JPA_CONTAINER_MANAGED is true\n                    String jpaContainerManaged = pu.getProperties().getProperty(Configuration.JPA_CONTAINER_MANAGED);\n                    boolean deployPU = (jpaContainerManaged == null? true : Boolean.parseBoolean(jpaContainerManaged));\n\n                    if (deployPU) {\n                        final PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder = getPersistenceProviderDeploymentHolder(deploymentUnit);\n                        final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit);\n                        final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform);\n                        final boolean twoPhaseBootStrapCapable = (adaptor instanceof TwoPhaseBootstrapCapable) && Configuration.allowTwoPhaseBootstrap(pu);\n\n                        if (startEarly) {\n                            if (twoPhaseBootStrapCapable) {\n                                deployPersistenceUnitPhaseOne(deploymentUnit, eeModuleDescription, serviceTarget, classLoader, pu, adaptor);\n                            }\n                            else if (false == Configuration.needClassFileTransformer(pu)) {\n                                // will start later when startEarly == false\n                                ROOT_LOGGER.tracef(\"persistence unit %s in deployment %s is configured to not need class transformer to be set, no class rewriting will be allowed\",\n                                    pu.getPersistenceUnitName(), deploymentUnit.getName());\n                            }\n                            else {\n                                // we need class file transformer to work, don't allow cdi bean manager to be access since that\n                                // could cause application classes to be loaded (workaround by setting jboss.as.jpa.classtransformer to false).  WFLY-1463\n                                final boolean allowCdiBeanManagerAccess = false;\n                                deployPersistenceUnit(deploymentUnit, eeModuleDescription, serviceTarget, classLoader, pu, provider, adaptor, allowCdiBeanManagerAccess);\n                            }\n                        }\n                        else { // !startEarly\n                            if (twoPhaseBootStrapCapable) {\n                                deployPersistenceUnitPhaseTwo(deploymentUnit, eeModuleDescription, serviceTarget, classLoader, pu, provider, adaptor);\n                            } else if (false == Configuration.needClassFileTransformer(pu)) {\n                                final boolean allowCdiBeanManagerAccess = true;\n                                // PUs that have Configuration.JPA_CONTAINER_CLASS_TRANSFORMER = false will start during INSTALL phase\n                                deployPersistenceUnit(deploymentUnit, eeModuleDescription, serviceTarget, classLoader, pu, provider, adaptor, allowCdiBeanManagerAccess);\n                            }\n                        }\n\n                    }\n                    else {\n                        ROOT_LOGGER.tracef(\"persistence unit %s in deployment %s is not container managed (%s is set to false)\",\n                                pu.getPersistenceUnitName(), deploymentUnit.getName(), Configuration.JPA_CONTAINER_MANAGED);\n                    }\n                }\n            }\n        }\n    }", "code_tokens": ["private", "static", "void", "addPuService", "(", "final", "DeploymentPhaseContext", "phaseContext", ",", "final", "ArrayList", "<", "PersistenceUnitMetadataHolder", ">", "puList", ",", "final", "boolean", "startEarly", ",", "final", "Platform", "platform", ")", "throws", "DeploymentUnitProcessingException", "{", "if", "(", "puList", ".", "size", "(", ")", ">", "0", ")", "{", "final", "DeploymentUnit", "deploymentUnit", "=", "phaseContext", ".", "getDeploymentUnit", "(", ")", ";", "final", "Module", "module", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE", ")", ";", "final", "EEModuleDescription", "eeModuleDescription", "=", "deploymentUnit", ".", "getAttachment", "(", "org", ".", "jboss", ".", "as", ".", "ee", ".", "component", ".", "Attachments", ".", "EE_MODULE_DESCRIPTION", ")", ";", "final", "ServiceTarget", "serviceTarget", "=", "phaseContext", ".", "getServiceTarget", "(", ")", ";", "final", "ModuleClassLoader", "classLoader", "=", "module", ".", "getClassLoader", "(", ")", ";", "for", "(", "PersistenceUnitMetadataHolder", "holder", ":", "puList", ")", "{", "setAnnotationIndexes", "(", "holder", ",", "deploymentUnit", ")", ";", "for", "(", "PersistenceUnitMetadata", "pu", ":", "holder", ".", "getPersistenceUnits", "(", ")", ")", "{", "// only start the persistence unit if JPA_CONTAINER_MANAGED is true", "String", "jpaContainerManaged", "=", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "Configuration", ".", "JPA_CONTAINER_MANAGED", ")", ";", "boolean", "deployPU", "=", "(", "jpaContainerManaged", "==", "null", "?", "true", ":", "Boolean", ".", "parseBoolean", "(", "jpaContainerManaged", ")", ")", ";", "if", "(", "deployPU", ")", "{", "final", "PersistenceProviderDeploymentHolder", "persistenceProviderDeploymentHolder", "=", "getPersistenceProviderDeploymentHolder", "(", "deploymentUnit", ")", ";", "final", "PersistenceProvider", "provider", "=", "lookupProvider", "(", "pu", ",", "persistenceProviderDeploymentHolder", ",", "deploymentUnit", ")", ";", "final", "PersistenceProviderAdaptor", "adaptor", "=", "getPersistenceProviderAdaptor", "(", "pu", ",", "persistenceProviderDeploymentHolder", ",", "deploymentUnit", ",", "provider", ",", "platform", ")", ";", "final", "boolean", "twoPhaseBootStrapCapable", "=", "(", "adaptor", "instanceof", "TwoPhaseBootstrapCapable", ")", "&&", "Configuration", ".", "allowTwoPhaseBootstrap", "(", "pu", ")", ";", "if", "(", "startEarly", ")", "{", "if", "(", "twoPhaseBootStrapCapable", ")", "{", "deployPersistenceUnitPhaseOne", "(", "deploymentUnit", ",", "eeModuleDescription", ",", "serviceTarget", ",", "classLoader", ",", "pu", ",", "adaptor", ")", ";", "}", "else", "if", "(", "false", "==", "Configuration", ".", "needClassFileTransformer", "(", "pu", ")", ")", "{", "// will start later when startEarly == false", "ROOT_LOGGER", ".", "tracef", "(", "\"persistence unit %s in deployment %s is configured to not need class transformer to be set, no class rewriting will be allowed\"", ",", "pu", ".", "getPersistenceUnitName", "(", ")", ",", "deploymentUnit", ".", "getName", "(", ")", ")", ";", "}", "else", "{", "// we need class file transformer to work, don't allow cdi bean manager to be access since that", "// could cause application classes to be loaded (workaround by setting jboss.as.jpa.classtransformer to false).  WFLY-1463", "final", "boolean", "allowCdiBeanManagerAccess", "=", "false", ";", "deployPersistenceUnit", "(", "deploymentUnit", ",", "eeModuleDescription", ",", "serviceTarget", ",", "classLoader", ",", "pu", ",", "provider", ",", "adaptor", ",", "allowCdiBeanManagerAccess", ")", ";", "}", "}", "else", "{", "// !startEarly", "if", "(", "twoPhaseBootStrapCapable", ")", "{", "deployPersistenceUnitPhaseTwo", "(", "deploymentUnit", ",", "eeModuleDescription", ",", "serviceTarget", ",", "classLoader", ",", "pu", ",", "provider", ",", "adaptor", ")", ";", "}", "else", "if", "(", "false", "==", "Configuration", ".", "needClassFileTransformer", "(", "pu", ")", ")", "{", "final", "boolean", "allowCdiBeanManagerAccess", "=", "true", ";", "// PUs that have Configuration.JPA_CONTAINER_CLASS_TRANSFORMER = false will start during INSTALL phase", "deployPersistenceUnit", "(", "deploymentUnit", ",", "eeModuleDescription", ",", "serviceTarget", ",", "classLoader", ",", "pu", ",", "provider", ",", "adaptor", ",", "allowCdiBeanManagerAccess", ")", ";", "}", "}", "}", "else", "{", "ROOT_LOGGER", ".", "tracef", "(", "\"persistence unit %s in deployment %s is not container managed (%s is set to false)\"", ",", "pu", ".", "getPersistenceUnitName", "(", ")", ",", "deploymentUnit", ".", "getName", "(", ")", ",", "Configuration", ".", "JPA_CONTAINER_MANAGED", ")", ";", "}", "}", "}", "}", "}"], "docstring": "Add one PU service per top level deployment that represents\n\n\n@param phaseContext\n@param puList\n@param startEarly\n@param platform\n@throws DeploymentUnitProcessingException", "docstring_tokens": ["Add", "one", "PU", "service", "per", "top", "level", "deployment", "that", "represents"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java#L243-L302", "partition": "test", "index": 2733, "time": "2011-01-22 15:41:34"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java", "func_name": "SFSBCallStack.popCall", "original_string": "public static Map<String, ExtendedEntityManager> popCall() {\n        ArrayList<Map<String, ExtendedEntityManager>> stack = currentSFSBCallStack();\n        Map<String, ExtendedEntityManager> result = stack.remove(stack.size() - 1);\n        stack.trimToSize();\n        return result;\n    }", "language": "java", "code": "public static Map<String, ExtendedEntityManager> popCall() {\n        ArrayList<Map<String, ExtendedEntityManager>> stack = currentSFSBCallStack();\n        Map<String, ExtendedEntityManager> result = stack.remove(stack.size() - 1);\n        stack.trimToSize();\n        return result;\n    }", "code_tokens": ["public", "static", "Map", "<", "String", ",", "ExtendedEntityManager", ">", "popCall", "(", ")", "{", "ArrayList", "<", "Map", "<", "String", ",", "ExtendedEntityManager", ">", ">", "stack", "=", "currentSFSBCallStack", "(", ")", ";", "Map", "<", "String", ",", "ExtendedEntityManager", ">", "result", "=", "stack", ".", "remove", "(", "stack", ".", "size", "(", ")", "-", "1", ")", ";", "stack", ".", "trimToSize", "(", ")", ";", "return", "result", ";", "}"], "docstring": "Pops the current SFSB invocation off the invocation call stack\n\n@return the entity manager map", "docstring_tokens": ["Pops", "the", "current", "SFSB", "invocation", "off", "the", "invocation", "call", "stack"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java#L151-L156", "partition": "test", "index": 2624, "time": "2011-01-22 15:41:34"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbDependencyDeploymentUnitProcessor.java", "func_name": "EjbDependencyDeploymentUnitProcessor.deploy", "original_string": "@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n\n\n        // get hold of the deployment unit\n        DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n\n        //always add EE API\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_API, false, false, true, false));\n        // previously exported by EJB_API prior to WFLY-5922 TODO WFLY-5967 look into moving this to WS subsystem\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, JAX_RPC_API, false, false, true, false));\n        //we always give them the EJB client\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_CLIENT, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_NAMING_CLIENT, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_IIOP_CLIENT, false, false, false, false));\n\n        //we always have to add this, as even non-ejb deployments may still lookup IIOP ejb's\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_SUBSYSTEM, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, HTTP_EJB, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, HTTP_NAMING, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, HTTP_TRANSACTION, false, false, true, false));\n\n        if (IIOPDeploymentMarker.isIIOPDeployment(deploymentUnit)) {\n            //needed for dynamic IIOP stubs\n            moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, IIOP_OPENJDK, false, false, false, false));\n        }\n\n        // fetch the EjbJarMetaData\n        //TODO: remove the app client bit after the next EJB release\n        if (!isEjbDeployment(deploymentUnit) && !DeploymentTypeMarker.isType(DeploymentType.APPLICATION_CLIENT, deploymentUnit)) {\n            // nothing to do\n            return;\n        }\n\n\n        // FIXME: still not the best way to do it\n        //this must be the first dep listed in the module\n        if (Boolean.getBoolean(\"org.jboss.as.ejb3.EMBEDDED\"))\n            moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, ModuleIdentifier.CLASSPATH, false, false, false, false));\n\n    }", "language": "java", "code": "@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n\n\n        // get hold of the deployment unit\n        DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n\n        //always add EE API\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_API, false, false, true, false));\n        // previously exported by EJB_API prior to WFLY-5922 TODO WFLY-5967 look into moving this to WS subsystem\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, JAX_RPC_API, false, false, true, false));\n        //we always give them the EJB client\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_CLIENT, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_NAMING_CLIENT, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_IIOP_CLIENT, false, false, false, false));\n\n        //we always have to add this, as even non-ejb deployments may still lookup IIOP ejb's\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, EJB_SUBSYSTEM, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, HTTP_EJB, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, HTTP_NAMING, false, false, true, false));\n        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, HTTP_TRANSACTION, false, false, true, false));\n\n        if (IIOPDeploymentMarker.isIIOPDeployment(deploymentUnit)) {\n            //needed for dynamic IIOP stubs\n            moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, IIOP_OPENJDK, false, false, false, false));\n        }\n\n        // fetch the EjbJarMetaData\n        //TODO: remove the app client bit after the next EJB release\n        if (!isEjbDeployment(deploymentUnit) && !DeploymentTypeMarker.isType(DeploymentType.APPLICATION_CLIENT, deploymentUnit)) {\n            // nothing to do\n            return;\n        }\n\n\n        // FIXME: still not the best way to do it\n        //this must be the first dep listed in the module\n        if (Boolean.getBoolean(\"org.jboss.as.ejb3.EMBEDDED\"))\n            moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader, ModuleIdentifier.CLASSPATH, false, false, false, false));\n\n    }", "code_tokens": ["@", "Override", "public", "void", "deploy", "(", "DeploymentPhaseContext", "phaseContext", ")", "throws", "DeploymentUnitProcessingException", "{", "// get hold of the deployment unit", "DeploymentUnit", "deploymentUnit", "=", "phaseContext", ".", "getDeploymentUnit", "(", ")", ";", "final", "ModuleLoader", "moduleLoader", "=", "Module", ".", "getBootModuleLoader", "(", ")", ";", "final", "ModuleSpecification", "moduleSpecification", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE_SPECIFICATION", ")", ";", "//always add EE API", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "EJB_API", ",", "false", ",", "false", ",", "true", ",", "false", ")", ")", ";", "// previously exported by EJB_API prior to WFLY-5922 TODO WFLY-5967 look into moving this to WS subsystem", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "JAX_RPC_API", ",", "false", ",", "false", ",", "true", ",", "false", ")", ")", ";", "//we always give them the EJB client", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "EJB_CLIENT", ",", "false", ",", "false", ",", "true", ",", "false", ")", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "EJB_NAMING_CLIENT", ",", "false", ",", "false", ",", "true", ",", "false", ")", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "EJB_IIOP_CLIENT", ",", "false", ",", "false", ",", "false", ",", "false", ")", ")", ";", "//we always have to add this, as even non-ejb deployments may still lookup IIOP ejb's", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "EJB_SUBSYSTEM", ",", "false", ",", "false", ",", "true", ",", "false", ")", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "HTTP_EJB", ",", "false", ",", "false", ",", "true", ",", "false", ")", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "HTTP_NAMING", ",", "false", ",", "false", ",", "true", ",", "false", ")", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "HTTP_TRANSACTION", ",", "false", ",", "false", ",", "true", ",", "false", ")", ")", ";", "if", "(", "IIOPDeploymentMarker", ".", "isIIOPDeployment", "(", "deploymentUnit", ")", ")", "{", "//needed for dynamic IIOP stubs", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "IIOP_OPENJDK", ",", "false", ",", "false", ",", "false", ",", "false", ")", ")", ";", "}", "// fetch the EjbJarMetaData", "//TODO: remove the app client bit after the next EJB release", "if", "(", "!", "isEjbDeployment", "(", "deploymentUnit", ")", "&&", "!", "DeploymentTypeMarker", ".", "isType", "(", "DeploymentType", ".", "APPLICATION_CLIENT", ",", "deploymentUnit", ")", ")", "{", "// nothing to do", "return", ";", "}", "// FIXME: still not the best way to do it", "//this must be the first dep listed in the module", "if", "(", "Boolean", ".", "getBoolean", "(", "\"org.jboss.as.ejb3.EMBEDDED\"", ")", ")", "moduleSpecification", ".", "addSystemDependency", "(", "new", "ModuleDependency", "(", "moduleLoader", ",", "ModuleIdentifier", ".", "CLASSPATH", ",", "false", ",", "false", ",", "false", ",", "false", ")", ")", ";", "}"], "docstring": "Adds Java EE module as a dependency to any deployment unit which is an EJB deployment\n\n@param phaseContext the deployment unit context\n@throws DeploymentUnitProcessingException", "docstring_tokens": ["Adds", "Java", "EE", "module", "as", "a", "dependency", "to", "any", "deployment", "unit", "which", "is", "an", "EJB", "deployment"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbDependencyDeploymentUnitProcessor.java#L71-L114", "partition": "test", "index": 2761, "time": "2011-02-03 21:25:36"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/util/NamingUtils.java", "func_name": "NamingUtils.rebind", "original_string": "public static void rebind(final Context ctx, final String name, final Object value) throws NamingException {\n       final Name n = ctx.getNameParser(\"\").parse(name);\n       rebind(ctx, n, value);\n    }", "language": "java", "code": "public static void rebind(final Context ctx, final String name, final Object value) throws NamingException {\n       final Name n = ctx.getNameParser(\"\").parse(name);\n       rebind(ctx, n, value);\n    }", "code_tokens": ["public", "static", "void", "rebind", "(", "final", "Context", "ctx", ",", "final", "String", "name", ",", "final", "Object", "value", ")", "throws", "NamingException", "{", "final", "Name", "n", "=", "ctx", ".", "getNameParser", "(", "\"\"", ")", ".", "parse", "(", "name", ")", ";", "rebind", "(", "ctx", ",", "n", ",", "value", ")", ";", "}"], "docstring": "Rebind val to name in ctx, and make sure that all intermediate contexts exist\n\n@param ctx the parent JNDI Context under which value will be bound\n@param name the name relative to ctx where value will be bound\n@param value the value to bind.\n@throws NamingException for any error", "docstring_tokens": ["Rebind", "val", "to", "name", "in", "ctx", "and", "make", "sure", "that", "all", "intermediate", "contexts", "exist"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/util/NamingUtils.java#L222-L225", "partition": "test", "index": 2548, "time": "2011-02-04 16:26:01"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/EEModuleDescription.java", "func_name": "EEModuleDescription.addComponent", "original_string": "public void addComponent(ComponentDescription description) {\n        final String componentName = description.getComponentName();\n        final String componentClassName = description.getComponentClassName();\n        if (componentName == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"componentName\", \"module\", moduleName);\n        }\n        if (componentClassName == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"componentClassName\",\"module\", moduleName);\n        }\n        if (componentsByName.containsKey(componentName)) {\n            throw EeLogger.ROOT_LOGGER.componentAlreadyDefined(componentName);\n        }\n        componentsByName.put(componentName, description);\n        List<ComponentDescription> list = componentsByClassName.get(componentClassName);\n        if (list == null) {\n            componentsByClassName.put(componentClassName, list = new ArrayList<ComponentDescription>(1));\n        }\n        list.add(description);\n    }", "language": "java", "code": "public void addComponent(ComponentDescription description) {\n        final String componentName = description.getComponentName();\n        final String componentClassName = description.getComponentClassName();\n        if (componentName == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"componentName\", \"module\", moduleName);\n        }\n        if (componentClassName == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"componentClassName\",\"module\", moduleName);\n        }\n        if (componentsByName.containsKey(componentName)) {\n            throw EeLogger.ROOT_LOGGER.componentAlreadyDefined(componentName);\n        }\n        componentsByName.put(componentName, description);\n        List<ComponentDescription> list = componentsByClassName.get(componentClassName);\n        if (list == null) {\n            componentsByClassName.put(componentClassName, list = new ArrayList<ComponentDescription>(1));\n        }\n        list.add(description);\n    }", "code_tokens": ["public", "void", "addComponent", "(", "ComponentDescription", "description", ")", "{", "final", "String", "componentName", "=", "description", ".", "getComponentName", "(", ")", ";", "final", "String", "componentClassName", "=", "description", ".", "getComponentClassName", "(", ")", ";", "if", "(", "componentName", "==", "null", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "nullVar", "(", "\"componentName\"", ",", "\"module\"", ",", "moduleName", ")", ";", "}", "if", "(", "componentClassName", "==", "null", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "nullVar", "(", "\"componentClassName\"", ",", "\"module\"", ",", "moduleName", ")", ";", "}", "if", "(", "componentsByName", ".", "containsKey", "(", "componentName", ")", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "componentAlreadyDefined", "(", "componentName", ")", ";", "}", "componentsByName", ".", "put", "(", "componentName", ",", "description", ")", ";", "List", "<", "ComponentDescription", ">", "list", "=", "componentsByClassName", ".", "get", "(", "componentClassName", ")", ";", "if", "(", "list", "==", "null", ")", "{", "componentsByClassName", ".", "put", "(", "componentClassName", ",", "list", "=", "new", "ArrayList", "<", "ComponentDescription", ">", "(", "1", ")", ")", ";", "}", "list", ".", "add", "(", "description", ")", ";", "}"], "docstring": "Add a component to this module.\n\n@param description the component description", "docstring_tokens": ["Add", "a", "component", "to", "this", "module", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/EEModuleDescription.java#L157-L175", "partition": "test", "index": 2879, "time": "2011-02-22 21:37:11"}
{"repo": "wildfly/wildfly", "path": "jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsDeploymentMarker.java", "func_name": "JaxrsDeploymentMarker.isJaxrsDeployment", "original_string": "public static boolean isJaxrsDeployment(DeploymentUnit deploymentUnit) {\n        DeploymentUnit deployment = deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();\n        Boolean val = deployment.getAttachment(ATTACHMENT_KEY);\n        return val != null && val;\n    }", "language": "java", "code": "public static boolean isJaxrsDeployment(DeploymentUnit deploymentUnit) {\n        DeploymentUnit deployment = deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();\n        Boolean val = deployment.getAttachment(ATTACHMENT_KEY);\n        return val != null && val;\n    }", "code_tokens": ["public", "static", "boolean", "isJaxrsDeployment", "(", "DeploymentUnit", "deploymentUnit", ")", "{", "DeploymentUnit", "deployment", "=", "deploymentUnit", ".", "getParent", "(", ")", "==", "null", "?", "deploymentUnit", ":", "deploymentUnit", ".", "getParent", "(", ")", ";", "Boolean", "val", "=", "deployment", ".", "getAttachment", "(", "ATTACHMENT_KEY", ")", ";", "return", "val", "!=", "null", "&&", "val", ";", "}"], "docstring": "JAX-RS annotations are found in the deployment, especially if it's an EAR one)", "docstring_tokens": ["JAX", "-", "RS", "annotations", "are", "found", "in", "the", "deployment", "especially", "if", "it", "s", "an", "EAR", "one", ")"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsDeploymentMarker.java#L46-L50", "partition": "test", "index": 2688, "time": "2011-02-26 09:28:00"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java", "func_name": "EEApplicationDescription.addComponent", "original_string": "public void addComponent(final ComponentDescription description, final VirtualFile deploymentRoot) {\n        for (final ViewDescription viewDescription : description.getViews()) {\n            List<ViewInformation> viewComponents = componentsByViewName.get(viewDescription.getViewClassName());\n            if (viewComponents == null) {\n                viewComponents = new ArrayList<ViewInformation>(1);\n                componentsByViewName.put(viewDescription.getViewClassName(), viewComponents);\n            }\n            viewComponents.add(new ViewInformation(viewDescription, deploymentRoot, description.getComponentName()));\n        }\n        List<Description> components = componentsByName.get(description.getComponentName());\n        if (components == null) {\n            componentsByName.put(description.getComponentName(), components = new ArrayList<Description>(1));\n        }\n        components.add(new Description(description, deploymentRoot));\n    }", "language": "java", "code": "public void addComponent(final ComponentDescription description, final VirtualFile deploymentRoot) {\n        for (final ViewDescription viewDescription : description.getViews()) {\n            List<ViewInformation> viewComponents = componentsByViewName.get(viewDescription.getViewClassName());\n            if (viewComponents == null) {\n                viewComponents = new ArrayList<ViewInformation>(1);\n                componentsByViewName.put(viewDescription.getViewClassName(), viewComponents);\n            }\n            viewComponents.add(new ViewInformation(viewDescription, deploymentRoot, description.getComponentName()));\n        }\n        List<Description> components = componentsByName.get(description.getComponentName());\n        if (components == null) {\n            componentsByName.put(description.getComponentName(), components = new ArrayList<Description>(1));\n        }\n        components.add(new Description(description, deploymentRoot));\n    }", "code_tokens": ["public", "void", "addComponent", "(", "final", "ComponentDescription", "description", ",", "final", "VirtualFile", "deploymentRoot", ")", "{", "for", "(", "final", "ViewDescription", "viewDescription", ":", "description", ".", "getViews", "(", ")", ")", "{", "List", "<", "ViewInformation", ">", "viewComponents", "=", "componentsByViewName", ".", "get", "(", "viewDescription", ".", "getViewClassName", "(", ")", ")", ";", "if", "(", "viewComponents", "==", "null", ")", "{", "viewComponents", "=", "new", "ArrayList", "<", "ViewInformation", ">", "(", "1", ")", ";", "componentsByViewName", ".", "put", "(", "viewDescription", ".", "getViewClassName", "(", ")", ",", "viewComponents", ")", ";", "}", "viewComponents", ".", "add", "(", "new", "ViewInformation", "(", "viewDescription", ",", "deploymentRoot", ",", "description", ".", "getComponentName", "(", ")", ")", ")", ";", "}", "List", "<", "Description", ">", "components", "=", "componentsByName", ".", "get", "(", "description", ".", "getComponentName", "(", ")", ")", ";", "if", "(", "components", "==", "null", ")", "{", "componentsByName", ".", "put", "(", "description", ".", "getComponentName", "(", ")", ",", "components", "=", "new", "ArrayList", "<", "Description", ">", "(", "1", ")", ")", ";", "}", "components", ".", "add", "(", "new", "Description", "(", "description", ",", "deploymentRoot", ")", ")", ";", "}"], "docstring": "Add a component to this application.\n\n@param description    the component description\n@param deploymentRoot", "docstring_tokens": ["Add", "a", "component", "to", "this", "application", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java#L52-L66", "partition": "test", "index": 2833, "time": "2011-03-09 17:50:05"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java", "func_name": "EEApplicationDescription.getComponents", "original_string": "public Set<ViewDescription> getComponents(final String componentName, final String viewName, final VirtualFile deploymentRoot) {\n        final List<ViewInformation> info = componentsByViewName.get(viewName);\n        if (info == null) {\n            return Collections.<ViewDescription>emptySet();\n        }\n        if (componentName.contains(\"#\")) {\n            final String[] parts = componentName.split(\"#\");\n            String path = parts[0];\n            if (!path.startsWith(\"../\")) {\n                path = \"../\" + path;\n            }\n            final VirtualFile virtualPath = deploymentRoot.getChild(path);\n            final String name = parts[1];\n            final Set<ViewDescription> ret = new HashSet<ViewDescription>();\n            for (ViewInformation i : info) {\n                if (i.beanName.equals(name)) {\n                    //now we need to check the path\n                    if (virtualPath.equals(i.deploymentRoot)) {\n                        ret.add(i.viewDescription);\n                    }\n                }\n            }\n            return ret;\n        } else {\n            final Set<ViewDescription> all = new HashSet<ViewDescription>();\n            final Set<ViewDescription> thisDeployment = new HashSet<ViewDescription>();\n            for (ViewInformation i : info) {\n                if (i.beanName.equals(componentName)) {\n                    all.add(i.viewDescription);\n                    if (i.deploymentRoot.equals(deploymentRoot)) {\n                        thisDeployment.add(i.viewDescription);\n                    }\n                }\n            }\n            if (all.size() > 1) {\n                return thisDeployment;\n            }\n            return all;\n        }\n    }", "language": "java", "code": "public Set<ViewDescription> getComponents(final String componentName, final String viewName, final VirtualFile deploymentRoot) {\n        final List<ViewInformation> info = componentsByViewName.get(viewName);\n        if (info == null) {\n            return Collections.<ViewDescription>emptySet();\n        }\n        if (componentName.contains(\"#\")) {\n            final String[] parts = componentName.split(\"#\");\n            String path = parts[0];\n            if (!path.startsWith(\"../\")) {\n                path = \"../\" + path;\n            }\n            final VirtualFile virtualPath = deploymentRoot.getChild(path);\n            final String name = parts[1];\n            final Set<ViewDescription> ret = new HashSet<ViewDescription>();\n            for (ViewInformation i : info) {\n                if (i.beanName.equals(name)) {\n                    //now we need to check the path\n                    if (virtualPath.equals(i.deploymentRoot)) {\n                        ret.add(i.viewDescription);\n                    }\n                }\n            }\n            return ret;\n        } else {\n            final Set<ViewDescription> all = new HashSet<ViewDescription>();\n            final Set<ViewDescription> thisDeployment = new HashSet<ViewDescription>();\n            for (ViewInformation i : info) {\n                if (i.beanName.equals(componentName)) {\n                    all.add(i.viewDescription);\n                    if (i.deploymentRoot.equals(deploymentRoot)) {\n                        thisDeployment.add(i.viewDescription);\n                    }\n                }\n            }\n            if (all.size() > 1) {\n                return thisDeployment;\n            }\n            return all;\n        }\n    }", "code_tokens": ["public", "Set", "<", "ViewDescription", ">", "getComponents", "(", "final", "String", "componentName", ",", "final", "String", "viewName", ",", "final", "VirtualFile", "deploymentRoot", ")", "{", "final", "List", "<", "ViewInformation", ">", "info", "=", "componentsByViewName", ".", "get", "(", "viewName", ")", ";", "if", "(", "info", "==", "null", ")", "{", "return", "Collections", ".", "<", "ViewDescription", ">", "emptySet", "(", ")", ";", "}", "if", "(", "componentName", ".", "contains", "(", "\"#\"", ")", ")", "{", "final", "String", "[", "]", "parts", "=", "componentName", ".", "split", "(", "\"#\"", ")", ";", "String", "path", "=", "parts", "[", "0", "]", ";", "if", "(", "!", "path", ".", "startsWith", "(", "\"../\"", ")", ")", "{", "path", "=", "\"../\"", "+", "path", ";", "}", "final", "VirtualFile", "virtualPath", "=", "deploymentRoot", ".", "getChild", "(", "path", ")", ";", "final", "String", "name", "=", "parts", "[", "1", "]", ";", "final", "Set", "<", "ViewDescription", ">", "ret", "=", "new", "HashSet", "<", "ViewDescription", ">", "(", ")", ";", "for", "(", "ViewInformation", "i", ":", "info", ")", "{", "if", "(", "i", ".", "beanName", ".", "equals", "(", "name", ")", ")", "{", "//now we need to check the path", "if", "(", "virtualPath", ".", "equals", "(", "i", ".", "deploymentRoot", ")", ")", "{", "ret", ".", "add", "(", "i", ".", "viewDescription", ")", ";", "}", "}", "}", "return", "ret", ";", "}", "else", "{", "final", "Set", "<", "ViewDescription", ">", "all", "=", "new", "HashSet", "<", "ViewDescription", ">", "(", ")", ";", "final", "Set", "<", "ViewDescription", ">", "thisDeployment", "=", "new", "HashSet", "<", "ViewDescription", ">", "(", ")", ";", "for", "(", "ViewInformation", "i", ":", "info", ")", "{", "if", "(", "i", ".", "beanName", ".", "equals", "(", "componentName", ")", ")", "{", "all", ".", "add", "(", "i", ".", "viewDescription", ")", ";", "if", "(", "i", ".", "deploymentRoot", ".", "equals", "(", "deploymentRoot", ")", ")", "{", "thisDeployment", ".", "add", "(", "i", ".", "viewDescription", ")", ";", "}", "}", "}", "if", "(", "all", ".", "size", "(", ")", ">", "1", ")", "{", "return", "thisDeployment", ";", "}", "return", "all", ";", "}", "}"], "docstring": "Get all views in the application that have the given name and view type\n\n@param componentName  The name of the component\n@param viewName       The view type\n@param deploymentRoot The deployment root of the component doing the lookup\n@return A set of all views for the given component name and type", "docstring_tokens": ["Get", "all", "views", "in", "the", "application", "that", "have", "the", "given", "name", "and", "view", "type"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java#L166-L205", "partition": "test", "index": 2837, "time": "2011-03-09 17:50:05"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/deployment/BeanDeploymentModule.java", "func_name": "BeanDeploymentModule.addService", "original_string": "public synchronized <S extends Service> void addService(Class<S> clazz, S service) {\n        for (BeanDeploymentArchiveImpl bda : beanDeploymentArchives) {\n            bda.getServices().add(clazz,service);\n        }\n    }", "language": "java", "code": "public synchronized <S extends Service> void addService(Class<S> clazz, S service) {\n        for (BeanDeploymentArchiveImpl bda : beanDeploymentArchives) {\n            bda.getServices().add(clazz,service);\n        }\n    }", "code_tokens": ["public", "synchronized", "<", "S", "extends", "Service", ">", "void", "addService", "(", "Class", "<", "S", ">", "clazz", ",", "S", "service", ")", "{", "for", "(", "BeanDeploymentArchiveImpl", "bda", ":", "beanDeploymentArchives", ")", "{", "bda", ".", "getServices", "(", ")", ".", "add", "(", "clazz", ",", "service", ")", ";", "}", "}"], "docstring": "Adds a service to all bean deployment archives in the module\n@param clazz The service type\n@param service The service\n@param <S> The service type", "docstring_tokens": ["Adds", "a", "service", "to", "all", "bean", "deployment", "archives", "in", "the", "module"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/deployment/BeanDeploymentModule.java#L98-L102", "partition": "test", "index": 2474, "time": "2011-03-14 10:33:32"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/services/ModuleGroupSingletonProvider.java", "func_name": "ModuleGroupSingletonProvider.addClassLoaders", "original_string": "public static void addClassLoaders(ClassLoader topLevel, Set<ClassLoader> allClassLoaders) {\n        deploymentClassLoaders.put(topLevel, allClassLoaders);\n    }", "language": "java", "code": "public static void addClassLoaders(ClassLoader topLevel, Set<ClassLoader> allClassLoaders) {\n        deploymentClassLoaders.put(topLevel, allClassLoaders);\n    }", "code_tokens": ["public", "static", "void", "addClassLoaders", "(", "ClassLoader", "topLevel", ",", "Set", "<", "ClassLoader", ">", "allClassLoaders", ")", "{", "deploymentClassLoaders", ".", "put", "(", "topLevel", ",", "allClassLoaders", ")", ";", "}"], "docstring": "Maps a top level class loader to all CL's in the deployment", "docstring_tokens": ["Maps", "a", "top", "level", "class", "loader", "to", "all", "CL", "s", "in", "the", "deployment"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/services/ModuleGroupSingletonProvider.java#L52-L54", "partition": "test", "index": 2880, "time": "2011-03-15 16:32:52"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataCreator.java", "func_name": "WebMetaDataCreator.create", "original_string": "void create(final Deployment dep) {\n        final DeploymentUnit unit = WSHelper.getRequiredAttachment(dep, DeploymentUnit.class);\n        WarMetaData warMD = ASHelper.getOptionalAttachment(unit, WarMetaData.ATTACHMENT_KEY);\n        JBossWebMetaData jbossWebMD = warMD != null ? warMD.getMergedJBossWebMetaData() : null;\n\n        if (warMD == null) {\n            warMD = new WarMetaData();\n        }\n        if (jbossWebMD == null) {\n            jbossWebMD = new JBossWebMetaData();\n            warMD.setMergedJBossWebMetaData(jbossWebMD);\n            unit.putAttachment(WarMetaData.ATTACHMENT_KEY, warMD);\n        }\n\n        createWebAppDescriptor(dep, jbossWebMD);\n        createJBossWebAppDescriptor(dep, jbossWebMD);\n\n        dep.addAttachment(JBossWebMetaData.class, jbossWebMD);\n    }", "language": "java", "code": "void create(final Deployment dep) {\n        final DeploymentUnit unit = WSHelper.getRequiredAttachment(dep, DeploymentUnit.class);\n        WarMetaData warMD = ASHelper.getOptionalAttachment(unit, WarMetaData.ATTACHMENT_KEY);\n        JBossWebMetaData jbossWebMD = warMD != null ? warMD.getMergedJBossWebMetaData() : null;\n\n        if (warMD == null) {\n            warMD = new WarMetaData();\n        }\n        if (jbossWebMD == null) {\n            jbossWebMD = new JBossWebMetaData();\n            warMD.setMergedJBossWebMetaData(jbossWebMD);\n            unit.putAttachment(WarMetaData.ATTACHMENT_KEY, warMD);\n        }\n\n        createWebAppDescriptor(dep, jbossWebMD);\n        createJBossWebAppDescriptor(dep, jbossWebMD);\n\n        dep.addAttachment(JBossWebMetaData.class, jbossWebMD);\n    }", "code_tokens": ["void", "create", "(", "final", "Deployment", "dep", ")", "{", "final", "DeploymentUnit", "unit", "=", "WSHelper", ".", "getRequiredAttachment", "(", "dep", ",", "DeploymentUnit", ".", "class", ")", ";", "WarMetaData", "warMD", "=", "ASHelper", ".", "getOptionalAttachment", "(", "unit", ",", "WarMetaData", ".", "ATTACHMENT_KEY", ")", ";", "JBossWebMetaData", "jbossWebMD", "=", "warMD", "!=", "null", "?", "warMD", ".", "getMergedJBossWebMetaData", "(", ")", ":", "null", ";", "if", "(", "warMD", "==", "null", ")", "{", "warMD", "=", "new", "WarMetaData", "(", ")", ";", "}", "if", "(", "jbossWebMD", "==", "null", ")", "{", "jbossWebMD", "=", "new", "JBossWebMetaData", "(", ")", ";", "warMD", ".", "setMergedJBossWebMetaData", "(", "jbossWebMD", ")", ";", "unit", ".", "putAttachment", "(", "WarMetaData", ".", "ATTACHMENT_KEY", ",", "warMD", ")", ";", "}", "createWebAppDescriptor", "(", "dep", ",", "jbossWebMD", ")", ";", "createJBossWebAppDescriptor", "(", "dep", ",", "jbossWebMD", ")", ";", "dep", ".", "addAttachment", "(", "JBossWebMetaData", ".", "class", ",", "jbossWebMD", ")", ";", "}"], "docstring": "Creates web meta data for EJB deployments.\n\n@param dep webservice deployment", "docstring_tokens": ["Creates", "web", "meta", "data", "for", "EJB", "deployments", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataCreator.java#L65-L83", "partition": "test", "index": 2721, "time": "2011-03-17 10:15:02"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataCreator.java", "func_name": "WebMetaDataCreator.createWebAppDescriptor", "original_string": "private void createWebAppDescriptor(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        WSLogger.ROOT_LOGGER.trace(\"Creating web.xml descriptor\");\n        createServlets(dep, jbossWebMD);\n        createServletMappings(dep, jbossWebMD);\n        createSecurityConstraints(dep, jbossWebMD);\n        createLoginConfig(dep, jbossWebMD);\n        createSecurityRoles(dep, jbossWebMD);\n    }", "language": "java", "code": "private void createWebAppDescriptor(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        WSLogger.ROOT_LOGGER.trace(\"Creating web.xml descriptor\");\n        createServlets(dep, jbossWebMD);\n        createServletMappings(dep, jbossWebMD);\n        createSecurityConstraints(dep, jbossWebMD);\n        createLoginConfig(dep, jbossWebMD);\n        createSecurityRoles(dep, jbossWebMD);\n    }", "code_tokens": ["private", "void", "createWebAppDescriptor", "(", "final", "Deployment", "dep", ",", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "WSLogger", ".", "ROOT_LOGGER", ".", "trace", "(", "\"Creating web.xml descriptor\"", ")", ";", "createServlets", "(", "dep", ",", "jbossWebMD", ")", ";", "createServletMappings", "(", "dep", ",", "jbossWebMD", ")", ";", "createSecurityConstraints", "(", "dep", ",", "jbossWebMD", ")", ";", "createLoginConfig", "(", "dep", ",", "jbossWebMD", ")", ";", "createSecurityRoles", "(", "dep", ",", "jbossWebMD", ")", ";", "}"], "docstring": "Creates web.xml descriptor meta data.\n\n@param dep        webservice deployment\n@param jbossWebMD jboss web meta data", "docstring_tokens": ["Creates", "web", ".", "xml", "descriptor", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataCreator.java#L91-L98", "partition": "test", "index": 2722, "time": "2011-03-17 10:15:02"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataCreator.java", "func_name": "WebMetaDataCreator.getAuthMethod", "original_string": "private String getAuthMethod(final Deployment dep) {\n        for (final Endpoint ejbEndpoint : dep.getService().getEndpoints()) {\n            final String beanAuthMethod = ejb3SecurityAccessor.getAuthMethod(ejbEndpoint);\n            final boolean hasBeanAuthMethod = beanAuthMethod != null;\n\n            if (hasBeanAuthMethod) {\n                // First found auth-method defines war\n                // login-config/auth-method\n                return beanAuthMethod;\n            }\n        }\n\n        return null;\n    }", "language": "java", "code": "private String getAuthMethod(final Deployment dep) {\n        for (final Endpoint ejbEndpoint : dep.getService().getEndpoints()) {\n            final String beanAuthMethod = ejb3SecurityAccessor.getAuthMethod(ejbEndpoint);\n            final boolean hasBeanAuthMethod = beanAuthMethod != null;\n\n            if (hasBeanAuthMethod) {\n                // First found auth-method defines war\n                // login-config/auth-method\n                return beanAuthMethod;\n            }\n        }\n\n        return null;\n    }", "code_tokens": ["private", "String", "getAuthMethod", "(", "final", "Deployment", "dep", ")", "{", "for", "(", "final", "Endpoint", "ejbEndpoint", ":", "dep", ".", "getService", "(", ")", ".", "getEndpoints", "(", ")", ")", "{", "final", "String", "beanAuthMethod", "=", "ejb3SecurityAccessor", ".", "getAuthMethod", "(", "ejbEndpoint", ")", ";", "final", "boolean", "hasBeanAuthMethod", "=", "beanAuthMethod", "!=", "null", ";", "if", "(", "hasBeanAuthMethod", ")", "{", "// First found auth-method defines war", "// login-config/auth-method", "return", "beanAuthMethod", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Returns deployment authentication method.\n\n@param dep webservice deployment\n@return deployment authentication method", "docstring_tokens": ["Returns", "deployment", "authentication", "method", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/WebMetaDataCreator.java#L341-L354", "partition": "test", "index": 2723, "time": "2011-03-17 10:15:02"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderEJB.java", "func_name": "AbstractMetaDataBuilderEJB.create", "original_string": "final EJBArchiveMetaData create(final Deployment dep) {\n        if (WSLogger.ROOT_LOGGER.isTraceEnabled()) {\n            WSLogger.ROOT_LOGGER.tracef(\"Building JBoss agnostic meta data for EJB webservice deployment: %s\", dep.getSimpleName());\n        }\n        final EJBArchiveMetaData.Builder ejbArchiveMDBuilder = new EJBArchiveMetaData.Builder();\n\n        this.buildEnterpriseBeansMetaData(dep, ejbArchiveMDBuilder);\n        this.buildWebservicesMetaData(dep, ejbArchiveMDBuilder);\n\n        return ejbArchiveMDBuilder.build();\n    }", "language": "java", "code": "final EJBArchiveMetaData create(final Deployment dep) {\n        if (WSLogger.ROOT_LOGGER.isTraceEnabled()) {\n            WSLogger.ROOT_LOGGER.tracef(\"Building JBoss agnostic meta data for EJB webservice deployment: %s\", dep.getSimpleName());\n        }\n        final EJBArchiveMetaData.Builder ejbArchiveMDBuilder = new EJBArchiveMetaData.Builder();\n\n        this.buildEnterpriseBeansMetaData(dep, ejbArchiveMDBuilder);\n        this.buildWebservicesMetaData(dep, ejbArchiveMDBuilder);\n\n        return ejbArchiveMDBuilder.build();\n    }", "code_tokens": ["final", "EJBArchiveMetaData", "create", "(", "final", "Deployment", "dep", ")", "{", "if", "(", "WSLogger", ".", "ROOT_LOGGER", ".", "isTraceEnabled", "(", ")", ")", "{", "WSLogger", ".", "ROOT_LOGGER", ".", "tracef", "(", "\"Building JBoss agnostic meta data for EJB webservice deployment: %s\"", ",", "dep", ".", "getSimpleName", "(", ")", ")", ";", "}", "final", "EJBArchiveMetaData", ".", "Builder", "ejbArchiveMDBuilder", "=", "new", "EJBArchiveMetaData", ".", "Builder", "(", ")", ";", "this", ".", "buildEnterpriseBeansMetaData", "(", "dep", ",", "ejbArchiveMDBuilder", ")", ";", "this", ".", "buildWebservicesMetaData", "(", "dep", ",", "ejbArchiveMDBuilder", ")", ";", "return", "ejbArchiveMDBuilder", ".", "build", "(", ")", ";", "}"], "docstring": "Builds universal EJB meta data model that is AS agnostic.\n\n@param dep\nwebservice deployment\n@return universal EJB meta data model", "docstring_tokens": ["Builds", "universal", "EJB", "meta", "data", "model", "that", "is", "AS", "agnostic", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderEJB.java#L51-L61", "partition": "test", "index": 2739, "time": "2011-03-17 10:15:02"}
{"repo": "wildfly/wildfly", "path": "jsf/injection/src/main/java/org/jboss/as/jsf/injection/JandexAnnotationProvider.java", "func_name": "JandexAnnotationProvider.getAnnotatedClasses", "original_string": "@Override\n    public Map<Class<? extends Annotation>, Set<Class<?>>> getAnnotatedClasses(final Set uris) {\n        return annotations; // TODO:  Should this be limited by URI\n    }", "language": "java", "code": "@Override\n    public Map<Class<? extends Annotation>, Set<Class<?>>> getAnnotatedClasses(final Set uris) {\n        return annotations; // TODO:  Should this be limited by URI\n    }", "code_tokens": ["@", "Override", "public", "Map", "<", "Class", "<", "?", "extends", "Annotation", ">", ",", "Set", "<", "Class", "<", "?", ">", ">", ">", "getAnnotatedClasses", "(", "final", "Set", "uris", ")", "{", "return", "annotations", ";", "// TODO:  Should this be limited by URI", "}"], "docstring": "use a plain Set and it should work for both versions.", "docstring_tokens": ["use", "a", "plain", "Set", "and", "it", "should", "work", "for", "both", "versions", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jsf/injection/src/main/java/org/jboss/as/jsf/injection/JandexAnnotationProvider.java#L51-L54", "partition": "test", "index": 2738, "time": "2011-03-18 00:15:21"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/deployers/AbstractDeploymentDescriptorBindingsProcessor.java", "func_name": "AbstractDeploymentDescriptorBindingsProcessor.processInjectionTargets", "original_string": "protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException {\n        if (entry.getInjectionTargets() != null) {\n            for (ResourceInjectionTargetMetaData injectionTarget : entry.getInjectionTargets()) {\n                final String injectionTargetClassName = injectionTarget.getInjectionTargetClass();\n                final String injectionTargetName = injectionTarget.getInjectionTargetName();\n                final AccessibleObject fieldOrMethod = getInjectionTarget(injectionTargetClassName, injectionTargetName, classLoader, deploymentReflectionIndex);\n                final Class<?> injectionTargetType = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getType() : ((Method) fieldOrMethod).getParameterTypes()[0];\n                final String memberName = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getName() : ((Method) fieldOrMethod).getName();\n\n                if (classType != null) {\n                    if (!injectionTargetType.isAssignableFrom(classType)) {\n                        boolean ok = false;\n                        if (classType.isPrimitive()) {\n                            if (BOXED_TYPES.get(classType).equals(injectionTargetType)) {\n                                ok = true;\n                            }\n                        } else if (injectionTargetType.isPrimitive()) {\n                            if (BOXED_TYPES.get(injectionTargetType).equals(classType)) {\n                                ok = true;\n                            }\n                        }\n                        if (!ok) {\n                            throw EeLogger.ROOT_LOGGER.invalidInjectionTarget(injectionTarget.getInjectionTargetName(), injectionTarget.getInjectionTargetClass(), classType);\n                        }\n                        classType = injectionTargetType;\n                    }\n                } else {\n                    classType = injectionTargetType;\n                }\n                final InjectionTarget injectionTargetDescription = fieldOrMethod instanceof Field ?\n                        new FieldInjectionTarget(injectionTargetClassName, memberName, classType.getName()) :\n                        new MethodInjectionTarget(injectionTargetClassName, memberName, classType.getName());\n\n                final ResourceInjectionConfiguration injectionConfiguration = new ResourceInjectionConfiguration(injectionTargetDescription, injectionSource);\n                resourceInjectionTarget.addResourceInjection(injectionConfiguration);\n            }\n        }\n        return classType;\n    }", "language": "java", "code": "protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException {\n        if (entry.getInjectionTargets() != null) {\n            for (ResourceInjectionTargetMetaData injectionTarget : entry.getInjectionTargets()) {\n                final String injectionTargetClassName = injectionTarget.getInjectionTargetClass();\n                final String injectionTargetName = injectionTarget.getInjectionTargetName();\n                final AccessibleObject fieldOrMethod = getInjectionTarget(injectionTargetClassName, injectionTargetName, classLoader, deploymentReflectionIndex);\n                final Class<?> injectionTargetType = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getType() : ((Method) fieldOrMethod).getParameterTypes()[0];\n                final String memberName = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getName() : ((Method) fieldOrMethod).getName();\n\n                if (classType != null) {\n                    if (!injectionTargetType.isAssignableFrom(classType)) {\n                        boolean ok = false;\n                        if (classType.isPrimitive()) {\n                            if (BOXED_TYPES.get(classType).equals(injectionTargetType)) {\n                                ok = true;\n                            }\n                        } else if (injectionTargetType.isPrimitive()) {\n                            if (BOXED_TYPES.get(injectionTargetType).equals(classType)) {\n                                ok = true;\n                            }\n                        }\n                        if (!ok) {\n                            throw EeLogger.ROOT_LOGGER.invalidInjectionTarget(injectionTarget.getInjectionTargetName(), injectionTarget.getInjectionTargetClass(), classType);\n                        }\n                        classType = injectionTargetType;\n                    }\n                } else {\n                    classType = injectionTargetType;\n                }\n                final InjectionTarget injectionTargetDescription = fieldOrMethod instanceof Field ?\n                        new FieldInjectionTarget(injectionTargetClassName, memberName, classType.getName()) :\n                        new MethodInjectionTarget(injectionTargetClassName, memberName, classType.getName());\n\n                final ResourceInjectionConfiguration injectionConfiguration = new ResourceInjectionConfiguration(injectionTargetDescription, injectionSource);\n                resourceInjectionTarget.addResourceInjection(injectionConfiguration);\n            }\n        }\n        return classType;\n    }", "code_tokens": ["protected", "Class", "<", "?", ">", "processInjectionTargets", "(", "final", "ResourceInjectionTarget", "resourceInjectionTarget", ",", "InjectionSource", "injectionSource", ",", "ClassLoader", "classLoader", ",", "DeploymentReflectionIndex", "deploymentReflectionIndex", ",", "ResourceInjectionMetaData", "entry", ",", "Class", "<", "?", ">", "classType", ")", "throws", "DeploymentUnitProcessingException", "{", "if", "(", "entry", ".", "getInjectionTargets", "(", ")", "!=", "null", ")", "{", "for", "(", "ResourceInjectionTargetMetaData", "injectionTarget", ":", "entry", ".", "getInjectionTargets", "(", ")", ")", "{", "final", "String", "injectionTargetClassName", "=", "injectionTarget", ".", "getInjectionTargetClass", "(", ")", ";", "final", "String", "injectionTargetName", "=", "injectionTarget", ".", "getInjectionTargetName", "(", ")", ";", "final", "AccessibleObject", "fieldOrMethod", "=", "getInjectionTarget", "(", "injectionTargetClassName", ",", "injectionTargetName", ",", "classLoader", ",", "deploymentReflectionIndex", ")", ";", "final", "Class", "<", "?", ">", "injectionTargetType", "=", "fieldOrMethod", "instanceof", "Field", "?", "(", "(", "Field", ")", "fieldOrMethod", ")", ".", "getType", "(", ")", ":", "(", "(", "Method", ")", "fieldOrMethod", ")", ".", "getParameterTypes", "(", ")", "[", "0", "]", ";", "final", "String", "memberName", "=", "fieldOrMethod", "instanceof", "Field", "?", "(", "(", "Field", ")", "fieldOrMethod", ")", ".", "getName", "(", ")", ":", "(", "(", "Method", ")", "fieldOrMethod", ")", ".", "getName", "(", ")", ";", "if", "(", "classType", "!=", "null", ")", "{", "if", "(", "!", "injectionTargetType", ".", "isAssignableFrom", "(", "classType", ")", ")", "{", "boolean", "ok", "=", "false", ";", "if", "(", "classType", ".", "isPrimitive", "(", ")", ")", "{", "if", "(", "BOXED_TYPES", ".", "get", "(", "classType", ")", ".", "equals", "(", "injectionTargetType", ")", ")", "{", "ok", "=", "true", ";", "}", "}", "else", "if", "(", "injectionTargetType", ".", "isPrimitive", "(", ")", ")", "{", "if", "(", "BOXED_TYPES", ".", "get", "(", "injectionTargetType", ")", ".", "equals", "(", "classType", ")", ")", "{", "ok", "=", "true", ";", "}", "}", "if", "(", "!", "ok", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "invalidInjectionTarget", "(", "injectionTarget", ".", "getInjectionTargetName", "(", ")", ",", "injectionTarget", ".", "getInjectionTargetClass", "(", ")", ",", "classType", ")", ";", "}", "classType", "=", "injectionTargetType", ";", "}", "}", "else", "{", "classType", "=", "injectionTargetType", ";", "}", "final", "InjectionTarget", "injectionTargetDescription", "=", "fieldOrMethod", "instanceof", "Field", "?", "new", "FieldInjectionTarget", "(", "injectionTargetClassName", ",", "memberName", ",", "classType", ".", "getName", "(", ")", ")", ":", "new", "MethodInjectionTarget", "(", "injectionTargetClassName", ",", "memberName", ",", "classType", ".", "getName", "(", ")", ")", ";", "final", "ResourceInjectionConfiguration", "injectionConfiguration", "=", "new", "ResourceInjectionConfiguration", "(", "injectionTargetDescription", ",", "injectionSource", ")", ";", "resourceInjectionTarget", ".", "addResourceInjection", "(", "injectionConfiguration", ")", ";", "}", "}", "return", "classType", ";", "}"], "docstring": "Processes the injection targets of a resource binding\n\n\n@param injectionSource           The injection source for the injection target\n@param classLoader               The module class loader\n@param deploymentReflectionIndex The deployment reflection index\n@param entry                     The resource with injection targets\n@param classType                 The expected type of the injection point, may be null if this is to be inferred from the injection target\n@return The actual class type of the injection point\n@throws DeploymentUnitProcessingException\nIf the injection points could not be resolved", "docstring_tokens": ["Processes", "the", "injection", "targets", "of", "a", "resource", "binding"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/deployers/AbstractDeploymentDescriptorBindingsProcessor.java#L130-L168", "partition": "test", "index": 2574, "time": "2011-03-25 12:07:48"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/JPAAnnotationProcessor.java", "func_name": "JPAAnnotationProcessor.getClassLevelInjectionType", "original_string": "private String getClassLevelInjectionType(final AnnotationInstance annotation) {\n        boolean isPC = annotation.name().local().equals(\"PersistenceContext\");\n        return isPC ? ENTITY_MANAGER_CLASS : ENTITY_MANAGERFACTORY_CLASS;\n    }", "language": "java", "code": "private String getClassLevelInjectionType(final AnnotationInstance annotation) {\n        boolean isPC = annotation.name().local().equals(\"PersistenceContext\");\n        return isPC ? ENTITY_MANAGER_CLASS : ENTITY_MANAGERFACTORY_CLASS;\n    }", "code_tokens": ["private", "String", "getClassLevelInjectionType", "(", "final", "AnnotationInstance", "annotation", ")", "{", "boolean", "isPC", "=", "annotation", ".", "name", "(", ")", ".", "local", "(", ")", ".", "equals", "(", "\"PersistenceContext\"", ")", ";", "return", "isPC", "?", "ENTITY_MANAGER_CLASS", ":", "ENTITY_MANAGERFACTORY_CLASS", ";", "}"], "docstring": "Based on the the annotation type, its either entitymanager or entitymanagerfactory\n\n@param annotation\n@return", "docstring_tokens": ["Based", "on", "the", "the", "annotation", "type", "its", "either", "entitymanager", "or", "entitymanagerfactory"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/JPAAnnotationProcessor.java#L358-L361", "partition": "test", "index": 2855, "time": "2011-03-31 20:00:34"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.addPreDestroyInterceptor", "original_string": "public void addPreDestroyInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        preDestroyInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "language": "java", "code": "public void addPreDestroyInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        preDestroyInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "code_tokens": ["public", "void", "addPreDestroyInterceptor", "(", "InterceptorFactory", "interceptorFactory", ",", "int", "priority", ")", "{", "preDestroyInterceptors", ".", "add", "(", "Collections", ".", "singletonList", "(", "interceptorFactory", ")", ",", "priority", ")", ";", "}"], "docstring": "Adds a pre destroy interceptor\n\n@param interceptorFactory The interceptor factory to add\n@param priority           The factories priority", "docstring_tokens": ["Adds", "a", "pre", "destroy", "interceptor"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L397-L399", "partition": "test", "index": 2815, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java", "func_name": "ViewConfiguration.getViewInterceptors", "original_string": "public List<InterceptorFactory> getViewInterceptors(Method method) {\n        OrderedItemContainer<InterceptorFactory> container = viewInterceptors.get(method);\n        if (container == null) {\n            return Collections.emptyList();\n        }\n        return container.getSortedItems();\n    }", "language": "java", "code": "public List<InterceptorFactory> getViewInterceptors(Method method) {\n        OrderedItemContainer<InterceptorFactory> container = viewInterceptors.get(method);\n        if (container == null) {\n            return Collections.emptyList();\n        }\n        return container.getSortedItems();\n    }", "code_tokens": ["public", "List", "<", "InterceptorFactory", ">", "getViewInterceptors", "(", "Method", "method", ")", "{", "OrderedItemContainer", "<", "InterceptorFactory", ">", "container", "=", "viewInterceptors", ".", "get", "(", "method", ")", ";", "if", "(", "container", "==", "null", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "return", "container", ".", "getSortedItems", "(", ")", ";", "}"], "docstring": "Get the view interceptors for a method.  These interceptors are run sequentially on the \"server side\" of an\ninvocation.  The interceptor factories are used every time a new view instance is constructed, called with a\nnew factory context each time.  The factory may return the same interceptor instance or a new interceptor\ninstance as appropriate.\n\n@param method the method to look up\n@return the interceptors for this method", "docstring_tokens": ["Get", "the", "view", "interceptors", "for", "a", "method", ".", "These", "interceptors", "are", "run", "sequentially", "on", "the", "server", "side", "of", "an", "invocation", ".", "The", "interceptor", "factories", "are", "used", "every", "time", "a", "new", "view", "instance", "is", "constructed", "called", "with", "a", "new", "factory", "context", "each", "time", ".", "The", "factory", "may", "return", "the", "same", "interceptor", "instance", "or", "a", "new", "interceptor", "instance", "as", "appropriate", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java#L104-L110", "partition": "test", "index": 2657, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java", "func_name": "ComponentDescription.addMethodInterceptor", "original_string": "public void addMethodInterceptor(MethodIdentifier method, InterceptorDescription description) {\n        //we do not add method level interceptors to the set of interceptor classes,\n        //as their around invoke annotations\n        List<InterceptorDescription> interceptors = methodInterceptors.get(method);\n        if (interceptors == null) {\n            methodInterceptors.put(method, interceptors = new ArrayList<InterceptorDescription>());\n        }\n        final String name = description.getInterceptorClassName();\n        // add the interceptor class to the EEModuleDescription\n        interceptors.add(description);\n        this.allInterceptors = null;\n    }", "language": "java", "code": "public void addMethodInterceptor(MethodIdentifier method, InterceptorDescription description) {\n        //we do not add method level interceptors to the set of interceptor classes,\n        //as their around invoke annotations\n        List<InterceptorDescription> interceptors = methodInterceptors.get(method);\n        if (interceptors == null) {\n            methodInterceptors.put(method, interceptors = new ArrayList<InterceptorDescription>());\n        }\n        final String name = description.getInterceptorClassName();\n        // add the interceptor class to the EEModuleDescription\n        interceptors.add(description);\n        this.allInterceptors = null;\n    }", "code_tokens": ["public", "void", "addMethodInterceptor", "(", "MethodIdentifier", "method", ",", "InterceptorDescription", "description", ")", "{", "//we do not add method level interceptors to the set of interceptor classes,", "//as their around invoke annotations", "List", "<", "InterceptorDescription", ">", "interceptors", "=", "methodInterceptors", ".", "get", "(", "method", ")", ";", "if", "(", "interceptors", "==", "null", ")", "{", "methodInterceptors", ".", "put", "(", "method", ",", "interceptors", "=", "new", "ArrayList", "<", "InterceptorDescription", ">", "(", ")", ")", ";", "}", "final", "String", "name", "=", "description", ".", "getInterceptorClassName", "(", ")", ";", "// add the interceptor class to the EEModuleDescription", "interceptors", ".", "add", "(", "description", ")", ";", "this", ".", "allInterceptors", "=", "null", ";", "}"], "docstring": "Add a method interceptor class name.\n\n@param method      the method\n@param description the interceptor descriptor", "docstring_tokens": ["Add", "a", "method", "interceptor", "class", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java#L362-L373", "partition": "test", "index": 2808, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java", "func_name": "ComponentDescription.addDependency", "original_string": "public void addDependency(ServiceName serviceName) {\n        if (serviceName == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"serviceName\", \"component\", componentName);\n        }\n        dependencies.add(serviceName);\n    }", "language": "java", "code": "public void addDependency(ServiceName serviceName) {\n        if (serviceName == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"serviceName\", \"component\", componentName);\n        }\n        dependencies.add(serviceName);\n    }", "code_tokens": ["public", "void", "addDependency", "(", "ServiceName", "serviceName", ")", "{", "if", "(", "serviceName", "==", "null", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "nullVar", "(", "\"serviceName\"", ",", "\"component\"", ",", "componentName", ")", ";", "}", "dependencies", ".", "add", "(", "serviceName", ")", ";", "}"], "docstring": "Add a dependency to this component.  If the same dependency is added multiple times, only the first will\ntake effect.\n\n@param serviceName the service name of the dependency", "docstring_tokens": ["Add", "a", "dependency", "to", "this", "component", ".", "If", "the", "same", "dependency", "is", "added", "multiple", "times", "only", "the", "first", "will", "take", "effect", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java#L433-L438", "partition": "test", "index": 2809, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java", "func_name": "ViewConfiguration.getClientInterceptors", "original_string": "public List<InterceptorFactory> getClientInterceptors(Method method) {\n        OrderedItemContainer<InterceptorFactory> container = clientInterceptors.get(method);\n        if (container == null) {\n            return Collections.emptyList();\n        }\n        return container.getSortedItems();\n    }", "language": "java", "code": "public List<InterceptorFactory> getClientInterceptors(Method method) {\n        OrderedItemContainer<InterceptorFactory> container = clientInterceptors.get(method);\n        if (container == null) {\n            return Collections.emptyList();\n        }\n        return container.getSortedItems();\n    }", "code_tokens": ["public", "List", "<", "InterceptorFactory", ">", "getClientInterceptors", "(", "Method", "method", ")", "{", "OrderedItemContainer", "<", "InterceptorFactory", ">", "container", "=", "clientInterceptors", ".", "get", "(", "method", ")", ";", "if", "(", "container", "==", "null", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "return", "container", ".", "getSortedItems", "(", ")", ";", "}"], "docstring": "Get the client interceptors for a method.  These interceptors are run sequentially on the \"client side\" of an\ninvocation.  The interceptor factories are used every time a new client proxy instance is constructed, called with a\nnew factory context each time.  The factory may return the same interceptor instance or a new interceptor\ninstance as appropriate.\n\n@param method the method to look up\n@return the interceptors for this method", "docstring_tokens": ["Get", "the", "client", "interceptors", "for", "a", "method", ".", "These", "interceptors", "are", "run", "sequentially", "on", "the", "client", "side", "of", "an", "invocation", ".", "The", "interceptor", "factories", "are", "used", "every", "time", "a", "new", "client", "proxy", "instance", "is", "constructed", "called", "with", "a", "new", "factory", "context", "each", "time", ".", "The", "factory", "may", "return", "the", "same", "interceptor", "instance", "or", "a", "new", "interceptor", "instance", "as", "appropriate", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java#L148-L154", "partition": "test", "index": 2660, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java", "func_name": "ViewConfiguration.addClientInterceptor", "original_string": "public void addClientInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        for (Method method : proxyFactory.getCachedMethods()) {\n            addClientInterceptor(method, interceptorFactory, priority);\n        }\n    }", "language": "java", "code": "public void addClientInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        for (Method method : proxyFactory.getCachedMethods()) {\n            addClientInterceptor(method, interceptorFactory, priority);\n        }\n    }", "code_tokens": ["public", "void", "addClientInterceptor", "(", "InterceptorFactory", "interceptorFactory", ",", "int", "priority", ")", "{", "for", "(", "Method", "method", ":", "proxyFactory", ".", "getCachedMethods", "(", ")", ")", "{", "addClientInterceptor", "(", "method", ",", "interceptorFactory", ",", "priority", ")", ";", "}", "}"], "docstring": "Adds a client interceptor factory to all methods of a view\n\n@param interceptorFactory The factory to add\n@param priority           The interceptor order", "docstring_tokens": ["Adds", "a", "client", "interceptor", "factory", "to", "all", "methods", "of", "a", "view"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java#L162-L166", "partition": "test", "index": 2661, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java", "func_name": "ViewConfiguration.addClientInterceptor", "original_string": "public void addClientInterceptor(Method method, InterceptorFactory interceptorFactory, int priority) {\n        OrderedItemContainer<InterceptorFactory> container = clientInterceptors.get(method);\n        if (container == null) {\n            clientInterceptors.put(method, container = new OrderedItemContainer<InterceptorFactory>());\n        }\n        container.add(interceptorFactory, priority);\n    }", "language": "java", "code": "public void addClientInterceptor(Method method, InterceptorFactory interceptorFactory, int priority) {\n        OrderedItemContainer<InterceptorFactory> container = clientInterceptors.get(method);\n        if (container == null) {\n            clientInterceptors.put(method, container = new OrderedItemContainer<InterceptorFactory>());\n        }\n        container.add(interceptorFactory, priority);\n    }", "code_tokens": ["public", "void", "addClientInterceptor", "(", "Method", "method", ",", "InterceptorFactory", "interceptorFactory", ",", "int", "priority", ")", "{", "OrderedItemContainer", "<", "InterceptorFactory", ">", "container", "=", "clientInterceptors", ".", "get", "(", "method", ")", ";", "if", "(", "container", "==", "null", ")", "{", "clientInterceptors", ".", "put", "(", "method", ",", "container", "=", "new", "OrderedItemContainer", "<", "InterceptorFactory", ">", "(", ")", ")", ";", "}", "container", ".", "add", "(", "interceptorFactory", ",", "priority", ")", ";", "}"], "docstring": "Adds a client interceptor to the given method\n\n@param method             The method to add\n@param interceptorFactory The interceptor factory\n@param priority           The priority", "docstring_tokens": ["Adds", "a", "client", "interceptor", "to", "the", "given", "method"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java#L175-L181", "partition": "test", "index": 2662, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.getComponentInterceptors", "original_string": "public List<InterceptorFactory> getComponentInterceptors(Method method) {\n        Map<Method, OrderedItemContainer<List<InterceptorFactory>>> map = componentInterceptors;\n        OrderedItemContainer<List<InterceptorFactory>> interceptors = map.get(method);\n        if (interceptors == null) {\n            return Collections.emptyList();\n        }\n        List<List<InterceptorFactory>> sortedItems = interceptors.getSortedItems();\n        List<InterceptorFactory> ret = new ArrayList<>();\n        for(List<InterceptorFactory> item : sortedItems) {\n            ret.addAll(item);\n        }\n        return ret;\n    }", "language": "java", "code": "public List<InterceptorFactory> getComponentInterceptors(Method method) {\n        Map<Method, OrderedItemContainer<List<InterceptorFactory>>> map = componentInterceptors;\n        OrderedItemContainer<List<InterceptorFactory>> interceptors = map.get(method);\n        if (interceptors == null) {\n            return Collections.emptyList();\n        }\n        List<List<InterceptorFactory>> sortedItems = interceptors.getSortedItems();\n        List<InterceptorFactory> ret = new ArrayList<>();\n        for(List<InterceptorFactory> item : sortedItems) {\n            ret.addAll(item);\n        }\n        return ret;\n    }", "code_tokens": ["public", "List", "<", "InterceptorFactory", ">", "getComponentInterceptors", "(", "Method", "method", ")", "{", "Map", "<", "Method", ",", "OrderedItemContainer", "<", "List", "<", "InterceptorFactory", ">", ">", ">", "map", "=", "componentInterceptors", ";", "OrderedItemContainer", "<", "List", "<", "InterceptorFactory", ">", ">", "interceptors", "=", "map", ".", "get", "(", "method", ")", ";", "if", "(", "interceptors", "==", "null", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "List", "<", "List", "<", "InterceptorFactory", ">", ">", "sortedItems", "=", "interceptors", ".", "getSortedItems", "(", ")", ";", "List", "<", "InterceptorFactory", ">", "ret", "=", "new", "ArrayList", "<>", "(", ")", ";", "for", "(", "List", "<", "InterceptorFactory", ">", "item", ":", "sortedItems", ")", "{", "ret", ".", "addAll", "(", "item", ")", ";", "}", "return", "ret", ";", "}"], "docstring": "Gets the interceptor list for a given method. This should not be called until\nall interceptors have been added.\n\n@param method the component method\n@return the deque", "docstring_tokens": ["Gets", "the", "interceptor", "list", "for", "a", "given", "method", ".", "This", "should", "not", "be", "called", "until", "all", "interceptors", "have", "been", "added", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L148-L160", "partition": "test", "index": 2810, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewDescription.java", "func_name": "ViewDescription.getServiceName", "original_string": "public ServiceName getServiceName() {\n        //TODO: need to set viewNameParts somewhere\n        if (!viewNameParts.isEmpty()) {\n            return componentDescription.getServiceName().append(\"VIEW\").append(viewNameParts.toArray(new String[viewNameParts.size()]));\n        } else {\n            return componentDescription.getServiceName().append(\"VIEW\").append(viewClassName);\n        }\n    }", "language": "java", "code": "public ServiceName getServiceName() {\n        //TODO: need to set viewNameParts somewhere\n        if (!viewNameParts.isEmpty()) {\n            return componentDescription.getServiceName().append(\"VIEW\").append(viewNameParts.toArray(new String[viewNameParts.size()]));\n        } else {\n            return componentDescription.getServiceName().append(\"VIEW\").append(viewClassName);\n        }\n    }", "code_tokens": ["public", "ServiceName", "getServiceName", "(", ")", "{", "//TODO: need to set viewNameParts somewhere", "if", "(", "!", "viewNameParts", ".", "isEmpty", "(", ")", ")", "{", "return", "componentDescription", ".", "getServiceName", "(", ")", ".", "append", "(", "\"VIEW\"", ")", ".", "append", "(", "viewNameParts", ".", "toArray", "(", "new", "String", "[", "viewNameParts", ".", "size", "(", ")", "]", ")", ")", ";", "}", "else", "{", "return", "componentDescription", ".", "getServiceName", "(", ")", ".", "append", "(", "\"VIEW\"", ")", ".", "append", "(", "viewClassName", ")", ";", "}", "}"], "docstring": "Get the service name for this view.\n\n@return the service name", "docstring_tokens": ["Get", "the", "service", "name", "for", "this", "view", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewDescription.java#L133-L140", "partition": "test", "index": 2654, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java", "func_name": "ComponentDescription.getAllInterceptors", "original_string": "public Set<InterceptorDescription> getAllInterceptors() {\n        if (allInterceptors == null) {\n            allInterceptors = new HashSet<InterceptorDescription>();\n            allInterceptors.addAll(classInterceptors);\n            if (!excludeDefaultInterceptors) {\n                allInterceptors.addAll(defaultInterceptors);\n            }\n            for (List<InterceptorDescription> interceptors : methodInterceptors.values()) {\n                allInterceptors.addAll(interceptors);\n            }\n        }\n        return allInterceptors;\n    }", "language": "java", "code": "public Set<InterceptorDescription> getAllInterceptors() {\n        if (allInterceptors == null) {\n            allInterceptors = new HashSet<InterceptorDescription>();\n            allInterceptors.addAll(classInterceptors);\n            if (!excludeDefaultInterceptors) {\n                allInterceptors.addAll(defaultInterceptors);\n            }\n            for (List<InterceptorDescription> interceptors : methodInterceptors.values()) {\n                allInterceptors.addAll(interceptors);\n            }\n        }\n        return allInterceptors;\n    }", "code_tokens": ["public", "Set", "<", "InterceptorDescription", ">", "getAllInterceptors", "(", ")", "{", "if", "(", "allInterceptors", "==", "null", ")", "{", "allInterceptors", "=", "new", "HashSet", "<", "InterceptorDescription", ">", "(", ")", ";", "allInterceptors", ".", "addAll", "(", "classInterceptors", ")", ";", "if", "(", "!", "excludeDefaultInterceptors", ")", "{", "allInterceptors", ".", "addAll", "(", "defaultInterceptors", ")", ";", "}", "for", "(", "List", "<", "InterceptorDescription", ">", "interceptors", ":", "methodInterceptors", ".", "values", "(", ")", ")", "{", "allInterceptors", ".", "addAll", "(", "interceptors", ")", ";", "}", "}", "return", "allInterceptors", ";", "}"], "docstring": "Returns a combined map of class and method level interceptors\n\n@return all interceptors on the class", "docstring_tokens": ["Returns", "a", "combined", "map", "of", "class", "and", "method", "level", "interceptors"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java#L259-L271", "partition": "test", "index": 2807, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.setComponentCreateServiceFactory", "original_string": "public void setComponentCreateServiceFactory(final ComponentCreateServiceFactory componentCreateServiceFactory) {\n        if (componentCreateServiceFactory == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"componentCreateServiceFactory\", \"component\", getComponentName());\n        }\n        this.componentCreateServiceFactory = componentCreateServiceFactory;\n    }", "language": "java", "code": "public void setComponentCreateServiceFactory(final ComponentCreateServiceFactory componentCreateServiceFactory) {\n        if (componentCreateServiceFactory == null) {\n            throw EeLogger.ROOT_LOGGER.nullVar(\"componentCreateServiceFactory\", \"component\", getComponentName());\n        }\n        this.componentCreateServiceFactory = componentCreateServiceFactory;\n    }", "code_tokens": ["public", "void", "setComponentCreateServiceFactory", "(", "final", "ComponentCreateServiceFactory", "componentCreateServiceFactory", ")", "{", "if", "(", "componentCreateServiceFactory", "==", "null", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "nullVar", "(", "\"componentCreateServiceFactory\"", ",", "\"component\"", ",", "getComponentName", "(", ")", ")", ";", "}", "this", ".", "componentCreateServiceFactory", "=", "componentCreateServiceFactory", ";", "}"], "docstring": "Set the component create service factory for this component.\n\n@param componentCreateServiceFactory the component create service factory", "docstring_tokens": ["Set", "the", "component", "create", "service", "factory", "for", "this", "component", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L526-L531", "partition": "test", "index": 2818, "time": "2011-04-04 10:19:28"}
{"repo": "wildfly/wildfly", "path": "web-common/src/main/java/org/jboss/as/web/common/ConcurrentReferenceHashMap.java", "func_name": "ConcurrentReferenceHashMap.put", "original_string": "public V put(K key, V value) {\n        if (value == null)\n            throw new NullPointerException();\n        int hash = hashOf(key);\n        return segmentFor(hash).put(key, hash, value, false);\n    }", "language": "java", "code": "public V put(K key, V value) {\n        if (value == null)\n            throw new NullPointerException();\n        int hash = hashOf(key);\n        return segmentFor(hash).put(key, hash, value, false);\n    }", "code_tokens": ["public", "V", "put", "(", "K", "key", ",", "V", "value", ")", "{", "if", "(", "value", "==", "null", ")", "throw", "new", "NullPointerException", "(", ")", ";", "int", "hash", "=", "hashOf", "(", "key", ")", ";", "return", "segmentFor", "(", "hash", ")", ".", "put", "(", "key", ",", "hash", ",", "value", ",", "false", ")", ";", "}"], "docstring": "Maps the specified key to the specified value in this table.\nNeither the key nor the value can be null.\n\n<p> The value can be retrieved by calling the <tt>get</tt> method\nwith a key that is equal to the original key.\n\n@param key key with which the specified value is to be associated\n@param value value to be associated with the specified key\n@return the previous value associated with <tt>key</tt>, or\n<tt>null</tt> if there was no mapping for <tt>key</tt>\n@throws NullPointerException if the specified key or value is null", "docstring_tokens": ["Maps", "the", "specified", "key", "to", "the", "specified", "value", "in", "this", "table", ".", "Neither", "the", "key", "nor", "the", "value", "can", "be", "null", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/web-common/src/main/java/org/jboss/as/web/common/ConcurrentReferenceHashMap.java#L1219-L1224", "partition": "test", "index": 2638, "time": "2011-04-11 17:23:47"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbInjectionSource.java", "func_name": "EjbInjectionSource.resolve", "original_string": "private void resolve() {\n        if (!resolved) {\n            synchronized (this) {\n                if (!resolved) {\n\n                    final Set<ViewDescription> views = getViews();\n\n                    final Set<EJBViewDescription> ejbsForViewName = new HashSet<EJBViewDescription>();\n                    for (final ViewDescription view : views) {\n                        if (view instanceof EJBViewDescription) {\n                            final MethodIntf viewType = ((EJBViewDescription) view).getMethodIntf();\n                            // @EJB injection *shouldn't* consider the @WebService endpoint view or MDBs\n                            if (viewType == MethodIntf.SERVICE_ENDPOINT || viewType == MethodIntf.MESSAGE_ENDPOINT) {\n                                continue;\n                            }\n                            ejbsForViewName.add((EJBViewDescription) view);\n                        }\n                    }\n\n\n                    if (ejbsForViewName.isEmpty()) {\n                        if (beanName == null) {\n                            error = EjbLogger.ROOT_LOGGER.ejbNotFound(typeName, bindingName);\n                        } else {\n                            error = EjbLogger.ROOT_LOGGER.ejbNotFound(typeName, beanName, bindingName);\n                        }\n                    } else if (ejbsForViewName.size() > 1) {\n                        if (beanName == null) {\n                            error = EjbLogger.ROOT_LOGGER.moreThanOneEjbFound(typeName, bindingName, ejbsForViewName);\n                        } else {\n                            error = EjbLogger.ROOT_LOGGER.moreThanOneEjbFound(typeName, beanName, bindingName, ejbsForViewName);\n                        }\n                    } else {\n                        final EJBViewDescription description = ejbsForViewName.iterator().next();\n                        final EJBViewDescription ejbViewDescription = (EJBViewDescription) description;\n                        //for remote interfaces we do not want to use a normal binding\n                        //we need to bind the remote proxy factory into JNDI instead to get the correct behaviour\n\n                        if (ejbViewDescription.getMethodIntf() == MethodIntf.REMOTE || ejbViewDescription.getMethodIntf() == MethodIntf.HOME) {\n                            final EJBComponentDescription componentDescription = (EJBComponentDescription) description.getComponentDescription();\n                            final EEModuleDescription moduleDescription = componentDescription.getModuleDescription();\n                            final String earApplicationName = moduleDescription.getEarApplicationName();\n                            final Value<ClassLoader> viewClassLoader = new Value<ClassLoader>() {\n                                @Override\n                                public ClassLoader getValue() throws IllegalStateException, IllegalArgumentException {\n                                    final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n                                    return module != null ? module.getClassLoader() : null;\n                                }\n                            };\n                            remoteFactory = new RemoteViewManagedReferenceFactory(earApplicationName, moduleDescription.getModuleName(), moduleDescription.getDistinctName(), componentDescription.getComponentName(), description.getViewClassName(), componentDescription.isStateful(), viewClassLoader, appclient);\n                        }\n                        final ServiceName serviceName = description.getServiceName();\n                        resolvedViewName = serviceName;\n                    }\n                    resolved = true;\n                }\n            }\n        }\n    }", "language": "java", "code": "private void resolve() {\n        if (!resolved) {\n            synchronized (this) {\n                if (!resolved) {\n\n                    final Set<ViewDescription> views = getViews();\n\n                    final Set<EJBViewDescription> ejbsForViewName = new HashSet<EJBViewDescription>();\n                    for (final ViewDescription view : views) {\n                        if (view instanceof EJBViewDescription) {\n                            final MethodIntf viewType = ((EJBViewDescription) view).getMethodIntf();\n                            // @EJB injection *shouldn't* consider the @WebService endpoint view or MDBs\n                            if (viewType == MethodIntf.SERVICE_ENDPOINT || viewType == MethodIntf.MESSAGE_ENDPOINT) {\n                                continue;\n                            }\n                            ejbsForViewName.add((EJBViewDescription) view);\n                        }\n                    }\n\n\n                    if (ejbsForViewName.isEmpty()) {\n                        if (beanName == null) {\n                            error = EjbLogger.ROOT_LOGGER.ejbNotFound(typeName, bindingName);\n                        } else {\n                            error = EjbLogger.ROOT_LOGGER.ejbNotFound(typeName, beanName, bindingName);\n                        }\n                    } else if (ejbsForViewName.size() > 1) {\n                        if (beanName == null) {\n                            error = EjbLogger.ROOT_LOGGER.moreThanOneEjbFound(typeName, bindingName, ejbsForViewName);\n                        } else {\n                            error = EjbLogger.ROOT_LOGGER.moreThanOneEjbFound(typeName, beanName, bindingName, ejbsForViewName);\n                        }\n                    } else {\n                        final EJBViewDescription description = ejbsForViewName.iterator().next();\n                        final EJBViewDescription ejbViewDescription = (EJBViewDescription) description;\n                        //for remote interfaces we do not want to use a normal binding\n                        //we need to bind the remote proxy factory into JNDI instead to get the correct behaviour\n\n                        if (ejbViewDescription.getMethodIntf() == MethodIntf.REMOTE || ejbViewDescription.getMethodIntf() == MethodIntf.HOME) {\n                            final EJBComponentDescription componentDescription = (EJBComponentDescription) description.getComponentDescription();\n                            final EEModuleDescription moduleDescription = componentDescription.getModuleDescription();\n                            final String earApplicationName = moduleDescription.getEarApplicationName();\n                            final Value<ClassLoader> viewClassLoader = new Value<ClassLoader>() {\n                                @Override\n                                public ClassLoader getValue() throws IllegalStateException, IllegalArgumentException {\n                                    final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n                                    return module != null ? module.getClassLoader() : null;\n                                }\n                            };\n                            remoteFactory = new RemoteViewManagedReferenceFactory(earApplicationName, moduleDescription.getModuleName(), moduleDescription.getDistinctName(), componentDescription.getComponentName(), description.getViewClassName(), componentDescription.isStateful(), viewClassLoader, appclient);\n                        }\n                        final ServiceName serviceName = description.getServiceName();\n                        resolvedViewName = serviceName;\n                    }\n                    resolved = true;\n                }\n            }\n        }\n    }", "code_tokens": ["private", "void", "resolve", "(", ")", "{", "if", "(", "!", "resolved", ")", "{", "synchronized", "(", "this", ")", "{", "if", "(", "!", "resolved", ")", "{", "final", "Set", "<", "ViewDescription", ">", "views", "=", "getViews", "(", ")", ";", "final", "Set", "<", "EJBViewDescription", ">", "ejbsForViewName", "=", "new", "HashSet", "<", "EJBViewDescription", ">", "(", ")", ";", "for", "(", "final", "ViewDescription", "view", ":", "views", ")", "{", "if", "(", "view", "instanceof", "EJBViewDescription", ")", "{", "final", "MethodIntf", "viewType", "=", "(", "(", "EJBViewDescription", ")", "view", ")", ".", "getMethodIntf", "(", ")", ";", "// @EJB injection *shouldn't* consider the @WebService endpoint view or MDBs", "if", "(", "viewType", "==", "MethodIntf", ".", "SERVICE_ENDPOINT", "||", "viewType", "==", "MethodIntf", ".", "MESSAGE_ENDPOINT", ")", "{", "continue", ";", "}", "ejbsForViewName", ".", "add", "(", "(", "EJBViewDescription", ")", "view", ")", ";", "}", "}", "if", "(", "ejbsForViewName", ".", "isEmpty", "(", ")", ")", "{", "if", "(", "beanName", "==", "null", ")", "{", "error", "=", "EjbLogger", ".", "ROOT_LOGGER", ".", "ejbNotFound", "(", "typeName", ",", "bindingName", ")", ";", "}", "else", "{", "error", "=", "EjbLogger", ".", "ROOT_LOGGER", ".", "ejbNotFound", "(", "typeName", ",", "beanName", ",", "bindingName", ")", ";", "}", "}", "else", "if", "(", "ejbsForViewName", ".", "size", "(", ")", ">", "1", ")", "{", "if", "(", "beanName", "==", "null", ")", "{", "error", "=", "EjbLogger", ".", "ROOT_LOGGER", ".", "moreThanOneEjbFound", "(", "typeName", ",", "bindingName", ",", "ejbsForViewName", ")", ";", "}", "else", "{", "error", "=", "EjbLogger", ".", "ROOT_LOGGER", ".", "moreThanOneEjbFound", "(", "typeName", ",", "beanName", ",", "bindingName", ",", "ejbsForViewName", ")", ";", "}", "}", "else", "{", "final", "EJBViewDescription", "description", "=", "ejbsForViewName", ".", "iterator", "(", ")", ".", "next", "(", ")", ";", "final", "EJBViewDescription", "ejbViewDescription", "=", "(", "EJBViewDescription", ")", "description", ";", "//for remote interfaces we do not want to use a normal binding", "//we need to bind the remote proxy factory into JNDI instead to get the correct behaviour", "if", "(", "ejbViewDescription", ".", "getMethodIntf", "(", ")", "==", "MethodIntf", ".", "REMOTE", "||", "ejbViewDescription", ".", "getMethodIntf", "(", ")", "==", "MethodIntf", ".", "HOME", ")", "{", "final", "EJBComponentDescription", "componentDescription", "=", "(", "EJBComponentDescription", ")", "description", ".", "getComponentDescription", "(", ")", ";", "final", "EEModuleDescription", "moduleDescription", "=", "componentDescription", ".", "getModuleDescription", "(", ")", ";", "final", "String", "earApplicationName", "=", "moduleDescription", ".", "getEarApplicationName", "(", ")", ";", "final", "Value", "<", "ClassLoader", ">", "viewClassLoader", "=", "new", "Value", "<", "ClassLoader", ">", "(", ")", "{", "@", "Override", "public", "ClassLoader", "getValue", "(", ")", "throws", "IllegalStateException", ",", "IllegalArgumentException", "{", "final", "Module", "module", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE", ")", ";", "return", "module", "!=", "null", "?", "module", ".", "getClassLoader", "(", ")", ":", "null", ";", "}", "}", ";", "remoteFactory", "=", "new", "RemoteViewManagedReferenceFactory", "(", "earApplicationName", ",", "moduleDescription", ".", "getModuleName", "(", ")", ",", "moduleDescription", ".", "getDistinctName", "(", ")", ",", "componentDescription", ".", "getComponentName", "(", ")", ",", "description", ".", "getViewClassName", "(", ")", ",", "componentDescription", ".", "isStateful", "(", ")", ",", "viewClassLoader", ",", "appclient", ")", ";", "}", "final", "ServiceName", "serviceName", "=", "description", ".", "getServiceName", "(", ")", ";", "resolvedViewName", "=", "serviceName", ";", "}", "resolved", "=", "true", ";", "}", "}", "}", "}"], "docstring": "Checks if this ejb injection has been resolved yet, and if not resolves it.", "docstring_tokens": ["Checks", "if", "this", "ejb", "injection", "has", "been", "resolved", "yet", "and", "if", "not", "resolves", "it", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbInjectionSource.java#L106-L164", "partition": "test", "index": 2483, "time": "2011-04-14 17:06:27"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/plugins/JNDIBasedSecurityManagement.java", "func_name": "JNDIBasedSecurityManagement.removeSecurityDomain", "original_string": "public void removeSecurityDomain(String securityDomain) {\n        securityMgrMap.remove(securityDomain);\n        auditMgrMap.remove(securityDomain);\n        authMgrMap.remove(securityDomain);\n        authzMgrMap.remove(securityDomain);\n        idmMgrMap.remove(securityDomain);\n        mappingMgrMap.remove(securityDomain);\n        jsseMap.remove(securityDomain);\n    }", "language": "java", "code": "public void removeSecurityDomain(String securityDomain) {\n        securityMgrMap.remove(securityDomain);\n        auditMgrMap.remove(securityDomain);\n        authMgrMap.remove(securityDomain);\n        authzMgrMap.remove(securityDomain);\n        idmMgrMap.remove(securityDomain);\n        mappingMgrMap.remove(securityDomain);\n        jsseMap.remove(securityDomain);\n    }", "code_tokens": ["public", "void", "removeSecurityDomain", "(", "String", "securityDomain", ")", "{", "securityMgrMap", ".", "remove", "(", "securityDomain", ")", ";", "auditMgrMap", ".", "remove", "(", "securityDomain", ")", ";", "authMgrMap", ".", "remove", "(", "securityDomain", ")", ";", "authzMgrMap", ".", "remove", "(", "securityDomain", ")", ";", "idmMgrMap", ".", "remove", "(", "securityDomain", ")", ";", "mappingMgrMap", ".", "remove", "(", "securityDomain", ")", ";", "jsseMap", ".", "remove", "(", "securityDomain", ")", ";", "}"], "docstring": "Removes one security domain from the maps\n\n@param securityDomain name of the security domain", "docstring_tokens": ["Removes", "one", "security", "domain", "from", "the", "maps"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/plugins/JNDIBasedSecurityManagement.java#L233-L241", "partition": "test", "index": 2784, "time": "2011-04-15 13:41:48"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/NonTxEmCloser.java", "func_name": "NonTxEmCloser.get", "original_string": "public static EntityManager get(String puScopedName) {\n        Map<String, EntityManager> map = nonTxStack.peek();\n        if (map != null) {\n            return map.get(puScopedName);\n        }\n        return null;\n    }", "language": "java", "code": "public static EntityManager get(String puScopedName) {\n        Map<String, EntityManager> map = nonTxStack.peek();\n        if (map != null) {\n            return map.get(puScopedName);\n        }\n        return null;\n    }", "code_tokens": ["public", "static", "EntityManager", "get", "(", "String", "puScopedName", ")", "{", "Map", "<", "String", ",", "EntityManager", ">", "map", "=", "nonTxStack", ".", "peek", "(", ")", ";", "if", "(", "map", "!=", "null", ")", "{", "return", "map", ".", "get", "(", "puScopedName", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Return the transactional entity manager for the specified scoped persistence unit name\n\n@param puScopedName\n@return", "docstring_tokens": ["Return", "the", "transactional", "entity", "manager", "for", "the", "specified", "scoped", "persistence", "unit", "name"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/NonTxEmCloser.java#L83-L89", "partition": "test", "index": 2681, "time": "2011-04-16 10:26:40"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/NonTxEmCloser.java", "func_name": "NonTxEmCloser.popCall", "original_string": "public static void popCall() {\n        Map<String, EntityManager> emStack = nonTxStack.pop();\n        if (emStack != null) {\n            for (EntityManager entityManager : emStack.values()) {\n                try {\n                    if (entityManager.isOpen()) {\n                        entityManager.close();\n                    }\n                } catch (RuntimeException safeToIgnore) {\n                    if (ROOT_LOGGER.isTraceEnabled()) {\n                        ROOT_LOGGER.trace(\"Could not close (non-transactional) container managed entity manager.\" +\n                            \"  This shouldn't impact application functionality (only read \" +\n                            \"operations occur in non-transactional mode)\", safeToIgnore);\n                    }\n                }\n            }\n        }\n    }", "language": "java", "code": "public static void popCall() {\n        Map<String, EntityManager> emStack = nonTxStack.pop();\n        if (emStack != null) {\n            for (EntityManager entityManager : emStack.values()) {\n                try {\n                    if (entityManager.isOpen()) {\n                        entityManager.close();\n                    }\n                } catch (RuntimeException safeToIgnore) {\n                    if (ROOT_LOGGER.isTraceEnabled()) {\n                        ROOT_LOGGER.trace(\"Could not close (non-transactional) container managed entity manager.\" +\n                            \"  This shouldn't impact application functionality (only read \" +\n                            \"operations occur in non-transactional mode)\", safeToIgnore);\n                    }\n                }\n            }\n        }\n    }", "code_tokens": ["public", "static", "void", "popCall", "(", ")", "{", "Map", "<", "String", ",", "EntityManager", ">", "emStack", "=", "nonTxStack", ".", "pop", "(", ")", ";", "if", "(", "emStack", "!=", "null", ")", "{", "for", "(", "EntityManager", "entityManager", ":", "emStack", ".", "values", "(", ")", ")", "{", "try", "{", "if", "(", "entityManager", ".", "isOpen", "(", ")", ")", "{", "entityManager", ".", "close", "(", ")", ";", "}", "}", "catch", "(", "RuntimeException", "safeToIgnore", ")", "{", "if", "(", "ROOT_LOGGER", ".", "isTraceEnabled", "(", ")", ")", "{", "ROOT_LOGGER", ".", "trace", "(", "\"Could not close (non-transactional) container managed entity manager.\"", "+", "\"  This shouldn't impact application functionality (only read \"", "+", "\"operations occur in non-transactional mode)\"", ",", "safeToIgnore", ")", ";", "}", "}", "}", "}", "}"], "docstring": "current session bean invocation is ending, close any transactional entity managers created without a JTA\ntransaction.", "docstring_tokens": ["current", "session", "bean", "invocation", "is", "ending", "close", "any", "transactional", "entity", "managers", "created", "without", "a", "JTA", "transaction", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/NonTxEmCloser.java#L58-L75", "partition": "test", "index": 2680, "time": "2011-04-16 10:26:40"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/session/SessionBeanComponentDescription.java", "func_name": "SessionBeanComponentDescription.addTxManagementInterceptorForView", "original_string": "protected static void addTxManagementInterceptorForView(ViewDescription view) {\n        // add a Tx configurator\n        view.getConfigurators().add(new ViewConfigurator() {\n            @Override\n            public void configure(DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration configuration) throws DeploymentUnitProcessingException {\n                EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentConfiguration.getComponentDescription();\n                // Add CMT interceptor factory\n                if (TransactionManagementType.CONTAINER.equals(ejbComponentDescription.getTransactionManagementType())) {\n                    configuration.addViewInterceptor(CMTTxInterceptor.FACTORY, InterceptorOrder.View.CMT_TRANSACTION_INTERCEPTOR);\n                }\n            }\n        });\n    }", "language": "java", "code": "protected static void addTxManagementInterceptorForView(ViewDescription view) {\n        // add a Tx configurator\n        view.getConfigurators().add(new ViewConfigurator() {\n            @Override\n            public void configure(DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration configuration) throws DeploymentUnitProcessingException {\n                EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentConfiguration.getComponentDescription();\n                // Add CMT interceptor factory\n                if (TransactionManagementType.CONTAINER.equals(ejbComponentDescription.getTransactionManagementType())) {\n                    configuration.addViewInterceptor(CMTTxInterceptor.FACTORY, InterceptorOrder.View.CMT_TRANSACTION_INTERCEPTOR);\n                }\n            }\n        });\n    }", "code_tokens": ["protected", "static", "void", "addTxManagementInterceptorForView", "(", "ViewDescription", "view", ")", "{", "// add a Tx configurator", "view", ".", "getConfigurators", "(", ")", ".", "add", "(", "new", "ViewConfigurator", "(", ")", "{", "@", "Override", "public", "void", "configure", "(", "DeploymentPhaseContext", "context", ",", "ComponentConfiguration", "componentConfiguration", ",", "ViewDescription", "description", ",", "ViewConfiguration", "configuration", ")", "throws", "DeploymentUnitProcessingException", "{", "EJBComponentDescription", "ejbComponentDescription", "=", "(", "EJBComponentDescription", ")", "componentConfiguration", ".", "getComponentDescription", "(", ")", ";", "// Add CMT interceptor factory", "if", "(", "TransactionManagementType", ".", "CONTAINER", ".", "equals", "(", "ejbComponentDescription", ".", "getTransactionManagementType", "(", ")", ")", ")", "{", "configuration", ".", "addViewInterceptor", "(", "CMTTxInterceptor", ".", "FACTORY", ",", "InterceptorOrder", ".", "View", ".", "CMT_TRANSACTION_INTERCEPTOR", ")", ";", "}", "}", "}", ")", ";", "}"], "docstring": "Sets up the transaction management interceptor for all methods of the passed view.\n\n@param view The EJB bean view", "docstring_tokens": ["Sets", "up", "the", "transaction", "management", "interceptor", "for", "all", "methods", "of", "the", "passed", "view", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/session/SessionBeanComponentDescription.java#L358-L370", "partition": "test", "index": 2649, "time": "2011-04-18 15:52:25"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/deployment/ContextNames.java", "func_name": "ContextNames.contextServiceNameOfModule", "original_string": "public static ServiceName contextServiceNameOfModule(String app, String module) {\n        return MODULE_CONTEXT_SERVICE_NAME.append(app, module);\n    }", "language": "java", "code": "public static ServiceName contextServiceNameOfModule(String app, String module) {\n        return MODULE_CONTEXT_SERVICE_NAME.append(app, module);\n    }", "code_tokens": ["public", "static", "ServiceName", "contextServiceNameOfModule", "(", "String", "app", ",", "String", "module", ")", "{", "return", "MODULE_CONTEXT_SERVICE_NAME", ".", "append", "(", "app", ",", "module", ")", ";", "}"], "docstring": "Get the base service name of a module's JNDI namespace.\n\n@param app    the application name (must not be {@code null})\n@param module the module name (must not be {@code null})\n@return the base service name", "docstring_tokens": ["Get", "the", "base", "service", "name", "of", "a", "module", "s", "JNDI", "namespace", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/deployment/ContextNames.java#L107-L109", "partition": "test", "index": 2822, "time": "2011-05-04 13:47:26"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/deployment/ContextNames.java", "func_name": "ContextNames.contextServiceNameOfComponent", "original_string": "public static ServiceName contextServiceNameOfComponent(String app, String module, String comp) {\n        return COMPONENT_CONTEXT_SERVICE_NAME.append(app, module, comp);\n    }", "language": "java", "code": "public static ServiceName contextServiceNameOfComponent(String app, String module, String comp) {\n        return COMPONENT_CONTEXT_SERVICE_NAME.append(app, module, comp);\n    }", "code_tokens": ["public", "static", "ServiceName", "contextServiceNameOfComponent", "(", "String", "app", ",", "String", "module", ",", "String", "comp", ")", "{", "return", "COMPONENT_CONTEXT_SERVICE_NAME", ".", "append", "(", "app", ",", "module", ",", "comp", ")", ";", "}"], "docstring": "Get the base service name of a component's JNDI namespace.\n\n@param app    the application name (must not be {@code null})\n@param module the module name (must not be {@code null})\n@param comp   the component name (must not be {@code null})\n@return the base service name", "docstring_tokens": ["Get", "the", "base", "service", "name", "of", "a", "component", "s", "JNDI", "namespace", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/deployment/ContextNames.java#L96-L98", "partition": "test", "index": 2821, "time": "2011-05-04 13:47:26"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/deployment/ContextNames.java", "func_name": "ContextNames.bindInfoForEnvEntry", "original_string": "public static BindInfo bindInfoForEnvEntry(String app, String module, String comp, boolean useCompNamespace, final String envEntryName) {\n        if (envEntryName.startsWith(\"java:\")) {\n            if (useCompNamespace) {\n                return bindInfoFor(app, module, comp, envEntryName);\n            } else {\n                if (envEntryName.startsWith(\"java:comp\")) {\n                    return bindInfoFor(app, module, module, \"java:module\" + envEntryName.substring(\"java:comp\".length()));\n                } else {\n                    return bindInfoFor(app, module, module, envEntryName);\n                }\n            }\n        } else {\n            if (useCompNamespace) {\n                return bindInfoFor(app, module, comp, \"java:comp/env/\" + envEntryName);\n            } else {\n                return bindInfoFor(app, module, module, \"java:module/env/\" + envEntryName);\n            }\n        }\n    }", "language": "java", "code": "public static BindInfo bindInfoForEnvEntry(String app, String module, String comp, boolean useCompNamespace, final String envEntryName) {\n        if (envEntryName.startsWith(\"java:\")) {\n            if (useCompNamespace) {\n                return bindInfoFor(app, module, comp, envEntryName);\n            } else {\n                if (envEntryName.startsWith(\"java:comp\")) {\n                    return bindInfoFor(app, module, module, \"java:module\" + envEntryName.substring(\"java:comp\".length()));\n                } else {\n                    return bindInfoFor(app, module, module, envEntryName);\n                }\n            }\n        } else {\n            if (useCompNamespace) {\n                return bindInfoFor(app, module, comp, \"java:comp/env/\" + envEntryName);\n            } else {\n                return bindInfoFor(app, module, module, \"java:module/env/\" + envEntryName);\n            }\n        }\n    }", "code_tokens": ["public", "static", "BindInfo", "bindInfoForEnvEntry", "(", "String", "app", ",", "String", "module", ",", "String", "comp", ",", "boolean", "useCompNamespace", ",", "final", "String", "envEntryName", ")", "{", "if", "(", "envEntryName", ".", "startsWith", "(", "\"java:\"", ")", ")", "{", "if", "(", "useCompNamespace", ")", "{", "return", "bindInfoFor", "(", "app", ",", "module", ",", "comp", ",", "envEntryName", ")", ";", "}", "else", "{", "if", "(", "envEntryName", ".", "startsWith", "(", "\"java:comp\"", ")", ")", "{", "return", "bindInfoFor", "(", "app", ",", "module", ",", "module", ",", "\"java:module\"", "+", "envEntryName", ".", "substring", "(", "\"java:comp\"", ".", "length", "(", ")", ")", ")", ";", "}", "else", "{", "return", "bindInfoFor", "(", "app", ",", "module", ",", "module", ",", "envEntryName", ")", ";", "}", "}", "}", "else", "{", "if", "(", "useCompNamespace", ")", "{", "return", "bindInfoFor", "(", "app", ",", "module", ",", "comp", ",", "\"java:comp/env/\"", "+", "envEntryName", ")", ";", "}", "else", "{", "return", "bindInfoFor", "(", "app", ",", "module", ",", "module", ",", "\"java:module/env/\"", "+", "envEntryName", ")", ";", "}", "}", "}"], "docstring": "Get the service name of an environment entry\n\n@param app              the application name\n@param module           the module name\n@param comp             the component name\n@param useCompNamespace If the component has its own comp namespace\n@param envEntryName     The env entry name\n@return the service name or {@code null} if there is no service", "docstring_tokens": ["Get", "the", "service", "name", "of", "an", "environment", "entry"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/deployment/ContextNames.java#L184-L202", "partition": "test", "index": 2823, "time": "2011-05-04 13:47:26"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/deployment/processors/WeldComponentIntegrationProcessor.java", "func_name": "WeldComponentIntegrationProcessor.addWeldIntegration", "original_string": "private void addWeldIntegration(final Iterable<ComponentIntegrator> componentIntegrators, final ComponentInterceptorSupport componentInterceptorSupport, final ServiceTarget target, final ComponentConfiguration configuration, final ComponentDescription description, final Class<?> componentClass, final String beanName, final ServiceName weldServiceName, final ServiceName weldStartService, final ServiceName beanManagerService, final Set<Class<?>> interceptorClasses, final ClassLoader classLoader, final String beanDeploymentArchiveId) {\n        final ServiceName serviceName = configuration.getComponentDescription().getServiceName().append(\"WeldInstantiator\");\n        final ServiceBuilder<?> builder = target.addService(serviceName);\n        builder.requires(weldStartService);\n\n        configuration.setInstanceFactory(WeldManagedReferenceFactory.INSTANCE);\n        configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>() {\n            @Override\n            public void configureDependency(final ServiceBuilder<?> serviceBuilder, ComponentStartService service) throws DeploymentUnitProcessingException {\n                serviceBuilder.requires(serviceName);\n            }\n        });\n\n        boolean isComponentIntegrationPerformed = false;\n        for (ComponentIntegrator componentIntegrator : componentIntegrators) {\n            Supplier<ServiceName> bindingServiceNameSupplier = () -> {\n                if (componentInterceptorSupport == null) {\n                    throw WeldLogger.DEPLOYMENT_LOGGER.componentInterceptorSupportNotAvailable(componentClass);\n                }\n                return addWeldInterceptorBindingService(target, configuration, componentClass, beanName, weldServiceName, weldStartService,\n                        beanDeploymentArchiveId, componentInterceptorSupport);\n            };\n            DefaultInterceptorIntegrationAction integrationAction = (bindingServiceName) -> {\n                if (componentInterceptorSupport == null) {\n                    throw WeldLogger.DEPLOYMENT_LOGGER.componentInterceptorSupportNotAvailable(componentClass);\n                }\n                addJsr299BindingsCreateInterceptor(configuration, description, beanName, weldServiceName, builder, bindingServiceName,\n                        componentInterceptorSupport);\n                addCommonLifecycleInterceptionSupport(configuration, builder, bindingServiceName, beanManagerService, componentInterceptorSupport);\n                configuration.addComponentInterceptor(\n                        new UserInterceptorFactory(factory(InterceptionType.AROUND_INVOKE, builder, bindingServiceName, componentInterceptorSupport),\n                                factory(InterceptionType.AROUND_TIMEOUT, builder, bindingServiceName, componentInterceptorSupport)),\n                        InterceptorOrder.Component.CDI_INTERCEPTORS, false);\n            };\n            if (componentIntegrator.integrate(beanManagerService, configuration, description, builder, bindingServiceNameSupplier, integrationAction,\n                    componentInterceptorSupport)) {\n                isComponentIntegrationPerformed = true;\n                break;\n            }\n        }", "language": "java", "code": "private void addWeldIntegration(final Iterable<ComponentIntegrator> componentIntegrators, final ComponentInterceptorSupport componentInterceptorSupport, final ServiceTarget target, final ComponentConfiguration configuration, final ComponentDescription description, final Class<?> componentClass, final String beanName, final ServiceName weldServiceName, final ServiceName weldStartService, final ServiceName beanManagerService, final Set<Class<?>> interceptorClasses, final ClassLoader classLoader, final String beanDeploymentArchiveId) {\n        final ServiceName serviceName = configuration.getComponentDescription().getServiceName().append(\"WeldInstantiator\");\n        final ServiceBuilder<?> builder = target.addService(serviceName);\n        builder.requires(weldStartService);\n\n        configuration.setInstanceFactory(WeldManagedReferenceFactory.INSTANCE);\n        configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>() {\n            @Override\n            public void configureDependency(final ServiceBuilder<?> serviceBuilder, ComponentStartService service) throws DeploymentUnitProcessingException {\n                serviceBuilder.requires(serviceName);\n            }\n        });\n\n        boolean isComponentIntegrationPerformed = false;\n        for (ComponentIntegrator componentIntegrator : componentIntegrators) {\n            Supplier<ServiceName> bindingServiceNameSupplier = () -> {\n                if (componentInterceptorSupport == null) {\n                    throw WeldLogger.DEPLOYMENT_LOGGER.componentInterceptorSupportNotAvailable(componentClass);\n                }\n                return addWeldInterceptorBindingService(target, configuration, componentClass, beanName, weldServiceName, weldStartService,\n                        beanDeploymentArchiveId, componentInterceptorSupport);\n            };\n            DefaultInterceptorIntegrationAction integrationAction = (bindingServiceName) -> {\n                if (componentInterceptorSupport == null) {\n                    throw WeldLogger.DEPLOYMENT_LOGGER.componentInterceptorSupportNotAvailable(componentClass);\n                }\n                addJsr299BindingsCreateInterceptor(configuration, description, beanName, weldServiceName, builder, bindingServiceName,\n                        componentInterceptorSupport);\n                addCommonLifecycleInterceptionSupport(configuration, builder, bindingServiceName, beanManagerService, componentInterceptorSupport);\n                configuration.addComponentInterceptor(\n                        new UserInterceptorFactory(factory(InterceptionType.AROUND_INVOKE, builder, bindingServiceName, componentInterceptorSupport),\n                                factory(InterceptionType.AROUND_TIMEOUT, builder, bindingServiceName, componentInterceptorSupport)),\n                        InterceptorOrder.Component.CDI_INTERCEPTORS, false);\n            };\n            if (componentIntegrator.integrate(beanManagerService, configuration, description, builder, bindingServiceNameSupplier, integrationAction,\n                    componentInterceptorSupport)) {\n                isComponentIntegrationPerformed = true;\n                break;\n            }\n        }", "code_tokens": ["private", "void", "addWeldIntegration", "(", "final", "Iterable", "<", "ComponentIntegrator", ">", "componentIntegrators", ",", "final", "ComponentInterceptorSupport", "componentInterceptorSupport", ",", "final", "ServiceTarget", "target", ",", "final", "ComponentConfiguration", "configuration", ",", "final", "ComponentDescription", "description", ",", "final", "Class", "<", "?", ">", "componentClass", ",", "final", "String", "beanName", ",", "final", "ServiceName", "weldServiceName", ",", "final", "ServiceName", "weldStartService", ",", "final", "ServiceName", "beanManagerService", ",", "final", "Set", "<", "Class", "<", "?", ">", ">", "interceptorClasses", ",", "final", "ClassLoader", "classLoader", ",", "final", "String", "beanDeploymentArchiveId", ")", "{", "final", "ServiceName", "serviceName", "=", "configuration", ".", "getComponentDescription", "(", ")", ".", "getServiceName", "(", ")", ".", "append", "(", "\"WeldInstantiator\"", ")", ";", "final", "ServiceBuilder", "<", "?", ">", "builder", "=", "target", ".", "addService", "(", "serviceName", ")", ";", "builder", ".", "requires", "(", "weldStartService", ")", ";", "configuration", ".", "setInstanceFactory", "(", "WeldManagedReferenceFactory", ".", "INSTANCE", ")", ";", "configuration", ".", "getStartDependencies", "(", ")", ".", "add", "(", "new", "DependencyConfigurator", "<", "ComponentStartService", ">", "(", ")", "{", "@", "Override", "public", "void", "configureDependency", "(", "final", "ServiceBuilder", "<", "?", ">", "serviceBuilder", ",", "ComponentStartService", "service", ")", "throws", "DeploymentUnitProcessingException", "{", "serviceBuilder", ".", "requires", "(", "serviceName", ")", ";", "}", "}", ")", ";", "boolean", "isComponentIntegrationPerformed", "=", "false", ";", "for", "(", "ComponentIntegrator", "componentIntegrator", ":", "componentIntegrators", ")", "{", "Supplier", "<", "ServiceName", ">", "bindingServiceNameSupplier", "=", "(", ")", "->", "{", "if", "(", "componentInterceptorSupport", "==", "null", ")", "{", "throw", "WeldLogger", ".", "DEPLOYMENT_LOGGER", ".", "componentInterceptorSupportNotAvailable", "(", "componentClass", ")", ";", "}", "return", "addWeldInterceptorBindingService", "(", "target", ",", "configuration", ",", "componentClass", ",", "beanName", ",", "weldServiceName", ",", "weldStartService", ",", "beanDeploymentArchiveId", ",", "componentInterceptorSupport", ")", ";", "}", ";", "DefaultInterceptorIntegrationAction", "integrationAction", "=", "(", "bindingServiceName", ")", "-", ">", "{", "if", "(", "componentInterceptorSupport", "==", "null", ")", "", "{", "throw", "WeldLogger", ".", "DEPLOYMENT_LOGGER", ".", "componentInterceptorSupportNotAvailable", "(", "componentClass", ")", ";", "}", "addJsr299BindingsCreateInterceptor", "(", "configuration", ",", "description", ",", "beanName", ",", "weldServiceName", ",", "builder", ",", "bindingServiceName", ",", "componentInterceptorSupport", ")", ";", "addCommonLifecycleInterceptionSupport", "(", "configuration", ",", "builder", ",", "bindingServiceName", ",", "beanManagerService", ",", "componentInterceptorSupport", ")", ";", "configuration", ".", "addComponentInterceptor", "(", "new", "UserInterceptorFactory", "(", "factory", "(", "InterceptionType", ".", "AROUND_INVOKE", ",", "builder", ",", "bindingServiceName", ",", "componentInterceptorSupport", ")", ",", "factory", "(", "InterceptionType", ".", "AROUND_TIMEOUT", ",", "builder", ",", "bindingServiceName", ",", "componentInterceptorSupport", ")", ")", ",", "InterceptorOrder", ".", "Component", ".", "CDI_INTERCEPTORS", ",", "false", ")", ";", "}", ";", "if", "(", "componentIntegrator", ".", "integrate", "(", "beanManagerService", ",", "configuration", ",", "description", ",", "builder", ",", "bindingServiceNameSupplier", ",", "integrationAction", ",", "componentInterceptorSupport", ")", ")", "{", "isComponentIntegrationPerformed", "=", "true", ";", "break", ";", "}", "}"], "docstring": "As the weld based instantiator needs access to the bean manager it is installed as a service.", "docstring_tokens": ["As", "the", "weld", "based", "instantiator", "needs", "access", "to", "the", "bean", "manager", "it", "is", "installed", "as", "a", "service", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/deployment/processors/WeldComponentIntegrationProcessor.java#L180-L219", "partition": "test", "index": 2831, "time": "2011-05-09 11:17:09"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/plugins/DefaultAuthenticationCacheFactory.java", "func_name": "DefaultAuthenticationCacheFactory.getCache", "original_string": "public ConcurrentMap<Principal, DomainInfo> getCache() {\n        return new LRUCache<>(1000, (key, value) -> {\n            if (value != null) {\n                value.logout();\n            }\n        });\n    }", "language": "java", "code": "public ConcurrentMap<Principal, DomainInfo> getCache() {\n        return new LRUCache<>(1000, (key, value) -> {\n            if (value != null) {\n                value.logout();\n            }\n        });\n    }", "code_tokens": ["public", "ConcurrentMap", "<", "Principal", ",", "DomainInfo", ">", "getCache", "(", ")", "{", "return", "new", "LRUCache", "<>", "(", "1000", ",", "(", "key", ",", "value", ")", "->", "{", "if", "(", "value", "!=", "null", ")", "{", "value", ".", "logout", "(", ")", ";", "}", "}", ")", ";", "}"], "docstring": "Returns a default cache implementation\n\n@return cache implementation", "docstring_tokens": ["Returns", "a", "default", "cache", "implementation"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/plugins/DefaultAuthenticationCacheFactory.java#L43-L49", "partition": "test", "index": 2825, "time": "2011-05-10 15:23:16"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/BasicComponent.java", "func_name": "BasicComponent.createInstance", "original_string": "public ComponentInstance createInstance(Object instance) {\n        BasicComponentInstance obj = constructComponentInstance(new ImmediateManagedReference(instance), true);\n        obj.constructionFinished();\n        return obj;\n    }", "language": "java", "code": "public ComponentInstance createInstance(Object instance) {\n        BasicComponentInstance obj = constructComponentInstance(new ImmediateManagedReference(instance), true);\n        obj.constructionFinished();\n        return obj;\n    }", "code_tokens": ["public", "ComponentInstance", "createInstance", "(", "Object", "instance", ")", "{", "BasicComponentInstance", "obj", "=", "constructComponentInstance", "(", "new", "ImmediateManagedReference", "(", "instance", ")", ",", "true", ")", ";", "obj", ".", "constructionFinished", "(", ")", ";", "return", "obj", ";", "}"], "docstring": "Wraps an existing object instance in a ComponentInstance, and run the post construct interceptor chain on it.\n\n@param instance The instance to wrap\n@return The new ComponentInstance", "docstring_tokens": ["Wraps", "an", "existing", "object", "instance", "in", "a", "ComponentInstance", "and", "run", "the", "post", "construct", "interceptor", "chain", "on", "it", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/BasicComponent.java#L98-L102", "partition": "test", "index": 2551, "time": "2011-05-17 09:11:15"}
{"repo": "wildfly/wildfly", "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFComponentProcessor.java", "func_name": "JSFComponentProcessor.processXmlManagedBeans", "original_string": "private void processXmlManagedBeans(final DeploymentUnit deploymentUnit, final Set<String> managedBeanClasses) {\n        for (final VirtualFile facesConfig : getConfigurationFiles(deploymentUnit)) {\n            InputStream is = null;\n            try {\n                is = facesConfig.openStream();\n                final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n                inputFactory.setXMLResolver(NoopXMLResolver.create());\n                XMLStreamReader parser = inputFactory.createXMLStreamReader(is);\n                StringBuilder className = null;\n                int indent = 0;\n                boolean managedBean = false;\n                boolean managedBeanClass = false;\n                while (true) {\n                    int event = parser.next();\n                    if (event == XMLStreamConstants.END_DOCUMENT) {\n                        parser.close();\n                        break;\n                    }\n                    if (event == XMLStreamConstants.START_ELEMENT) {\n                        indent++;\n                        if (indent == 2) {\n                            if (parser.getLocalName().equals(MANAGED_BEAN)) {\n                                managedBean = true;\n                            }\n                        } else if (indent == 3 && managedBean) {\n                            if (parser.getLocalName().equals(MANAGED_BEAN_CLASS)) {\n                                managedBeanClass = true;\n                                className = new StringBuilder();\n                            }\n                        }\n\n                    } else if (event == XMLStreamConstants.END_ELEMENT) {\n                        indent--;\n                        managedBeanClass = false;\n                        if (indent == 1) {\n                            managedBean = false;\n                        }\n                        if (className != null) {\n                            managedBeanClasses.add(className.toString().trim());\n                            className = null;\n                        }\n                    } else if (managedBeanClass && event == XMLStreamConstants.CHARACTERS) {\n                        className.append(parser.getText());\n                    }\n                }\n            } catch (Exception e) {\n                JSFLogger.ROOT_LOGGER.managedBeansConfigParseFailed(facesConfig);\n            } finally {\n                try {\n                    if (is != null) {\n                        is.close();\n                    }\n                } catch (IOException e) {\n                    // Ignore\n                }\n            }\n        }\n    }", "language": "java", "code": "private void processXmlManagedBeans(final DeploymentUnit deploymentUnit, final Set<String> managedBeanClasses) {\n        for (final VirtualFile facesConfig : getConfigurationFiles(deploymentUnit)) {\n            InputStream is = null;\n            try {\n                is = facesConfig.openStream();\n                final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n                inputFactory.setXMLResolver(NoopXMLResolver.create());\n                XMLStreamReader parser = inputFactory.createXMLStreamReader(is);\n                StringBuilder className = null;\n                int indent = 0;\n                boolean managedBean = false;\n                boolean managedBeanClass = false;\n                while (true) {\n                    int event = parser.next();\n                    if (event == XMLStreamConstants.END_DOCUMENT) {\n                        parser.close();\n                        break;\n                    }\n                    if (event == XMLStreamConstants.START_ELEMENT) {\n                        indent++;\n                        if (indent == 2) {\n                            if (parser.getLocalName().equals(MANAGED_BEAN)) {\n                                managedBean = true;\n                            }\n                        } else if (indent == 3 && managedBean) {\n                            if (parser.getLocalName().equals(MANAGED_BEAN_CLASS)) {\n                                managedBeanClass = true;\n                                className = new StringBuilder();\n                            }\n                        }\n\n                    } else if (event == XMLStreamConstants.END_ELEMENT) {\n                        indent--;\n                        managedBeanClass = false;\n                        if (indent == 1) {\n                            managedBean = false;\n                        }\n                        if (className != null) {\n                            managedBeanClasses.add(className.toString().trim());\n                            className = null;\n                        }\n                    } else if (managedBeanClass && event == XMLStreamConstants.CHARACTERS) {\n                        className.append(parser.getText());\n                    }\n                }\n            } catch (Exception e) {\n                JSFLogger.ROOT_LOGGER.managedBeansConfigParseFailed(facesConfig);\n            } finally {\n                try {\n                    if (is != null) {\n                        is.close();\n                    }\n                } catch (IOException e) {\n                    // Ignore\n                }\n            }\n        }\n    }", "code_tokens": ["private", "void", "processXmlManagedBeans", "(", "final", "DeploymentUnit", "deploymentUnit", ",", "final", "Set", "<", "String", ">", "managedBeanClasses", ")", "{", "for", "(", "final", "VirtualFile", "facesConfig", ":", "getConfigurationFiles", "(", "deploymentUnit", ")", ")", "{", "InputStream", "is", "=", "null", ";", "try", "{", "is", "=", "facesConfig", ".", "openStream", "(", ")", ";", "final", "XMLInputFactory", "inputFactory", "=", "XMLInputFactory", ".", "newInstance", "(", ")", ";", "inputFactory", ".", "setXMLResolver", "(", "NoopXMLResolver", ".", "create", "(", ")", ")", ";", "XMLStreamReader", "parser", "=", "inputFactory", ".", "createXMLStreamReader", "(", "is", ")", ";", "StringBuilder", "className", "=", "null", ";", "int", "indent", "=", "0", ";", "boolean", "managedBean", "=", "false", ";", "boolean", "managedBeanClass", "=", "false", ";", "while", "(", "true", ")", "{", "int", "event", "=", "parser", ".", "next", "(", ")", ";", "if", "(", "event", "==", "XMLStreamConstants", ".", "END_DOCUMENT", ")", "{", "parser", ".", "close", "(", ")", ";", "break", ";", "}", "if", "(", "event", "==", "XMLStreamConstants", ".", "START_ELEMENT", ")", "{", "indent", "++", ";", "if", "(", "indent", "==", "2", ")", "{", "if", "(", "parser", ".", "getLocalName", "(", ")", ".", "equals", "(", "MANAGED_BEAN", ")", ")", "{", "managedBean", "=", "true", ";", "}", "}", "else", "if", "(", "indent", "==", "3", "&&", "managedBean", ")", "{", "if", "(", "parser", ".", "getLocalName", "(", ")", ".", "equals", "(", "MANAGED_BEAN_CLASS", ")", ")", "{", "managedBeanClass", "=", "true", ";", "className", "=", "new", "StringBuilder", "(", ")", ";", "}", "}", "}", "else", "if", "(", "event", "==", "XMLStreamConstants", ".", "END_ELEMENT", ")", "{", "indent", "--", ";", "managedBeanClass", "=", "false", ";", "if", "(", "indent", "==", "1", ")", "{", "managedBean", "=", "false", ";", "}", "if", "(", "className", "!=", "null", ")", "{", "managedBeanClasses", ".", "add", "(", "className", ".", "toString", "(", ")", ".", "trim", "(", ")", ")", ";", "className", "=", "null", ";", "}", "}", "else", "if", "(", "managedBeanClass", "&&", "event", "==", "XMLStreamConstants", ".", "CHARACTERS", ")", "{", "className", ".", "append", "(", "parser", ".", "getText", "(", ")", ")", ";", "}", "}", "}", "catch", "(", "Exception", "e", ")", "{", "JSFLogger", ".", "ROOT_LOGGER", ".", "managedBeansConfigParseFailed", "(", "facesConfig", ")", ";", "}", "finally", "{", "try", "{", "if", "(", "is", "!=", "null", ")", "{", "is", ".", "close", "(", ")", ";", "}", "}", "catch", "(", "IOException", "e", ")", "{", "// Ignore", "}", "}", "}", "}"], "docstring": "Parse the faces config files looking for managed bean classes. The parser is quite\nsimplistic as the only information we need is the managed-bean-class element", "docstring_tokens": ["Parse", "the", "faces", "config", "files", "looking", "for", "managed", "bean", "classes", ".", "The", "parser", "is", "quite", "simplistic", "as", "the", "only", "information", "we", "need", "is", "the", "managed", "-", "bean", "-", "class", "element"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFComponentProcessor.java#L123-L180", "partition": "test", "index": 2627, "time": "2011-05-17 09:11:15"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java", "func_name": "EEApplicationDescription.getComponentsForViewName", "original_string": "public Set<ViewDescription> getComponentsForViewName(final String viewType, final VirtualFile deploymentRoot) {\n        final List<ViewInformation> info = componentsByViewName.get(viewType);\n\n        if (info == null) {\n            return Collections.<ViewDescription>emptySet();\n        }\n        final Set<ViewDescription> ret = new HashSet<ViewDescription>();\n        final Set<ViewDescription> currentDep = new HashSet<ViewDescription>();\n        for (ViewInformation i : info) {\n            if (deploymentRoot.equals(i.deploymentRoot)) {\n                currentDep.add(i.viewDescription);\n            }\n            ret.add(i.viewDescription);\n        }\n        if(!currentDep.isEmpty()) {\n            return currentDep;\n        }\n        return ret;\n    }", "language": "java", "code": "public Set<ViewDescription> getComponentsForViewName(final String viewType, final VirtualFile deploymentRoot) {\n        final List<ViewInformation> info = componentsByViewName.get(viewType);\n\n        if (info == null) {\n            return Collections.<ViewDescription>emptySet();\n        }\n        final Set<ViewDescription> ret = new HashSet<ViewDescription>();\n        final Set<ViewDescription> currentDep = new HashSet<ViewDescription>();\n        for (ViewInformation i : info) {\n            if (deploymentRoot.equals(i.deploymentRoot)) {\n                currentDep.add(i.viewDescription);\n            }\n            ret.add(i.viewDescription);\n        }\n        if(!currentDep.isEmpty()) {\n            return currentDep;\n        }\n        return ret;\n    }", "code_tokens": ["public", "Set", "<", "ViewDescription", ">", "getComponentsForViewName", "(", "final", "String", "viewType", ",", "final", "VirtualFile", "deploymentRoot", ")", "{", "final", "List", "<", "ViewInformation", ">", "info", "=", "componentsByViewName", ".", "get", "(", "viewType", ")", ";", "if", "(", "info", "==", "null", ")", "{", "return", "Collections", ".", "<", "ViewDescription", ">", "emptySet", "(", ")", ";", "}", "final", "Set", "<", "ViewDescription", ">", "ret", "=", "new", "HashSet", "<", "ViewDescription", ">", "(", ")", ";", "final", "Set", "<", "ViewDescription", ">", "currentDep", "=", "new", "HashSet", "<", "ViewDescription", ">", "(", ")", ";", "for", "(", "ViewInformation", "i", ":", "info", ")", "{", "if", "(", "deploymentRoot", ".", "equals", "(", "i", ".", "deploymentRoot", ")", ")", "{", "currentDep", ".", "add", "(", "i", ".", "viewDescription", ")", ";", "}", "ret", ".", "add", "(", "i", ".", "viewDescription", ")", ";", "}", "if", "(", "!", "currentDep", ".", "isEmpty", "(", ")", ")", "{", "return", "currentDep", ";", "}", "return", "ret", ";", "}"], "docstring": "Get all views that have the given type in the application\n\n@param viewType The view type\n@return All views of the given type", "docstring_tokens": ["Get", "all", "views", "that", "have", "the", "given", "type", "in", "the", "application"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java#L89-L107", "partition": "test", "index": 2835, "time": "2011-05-18 10:12:55"}
{"repo": "wildfly/wildfly", "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFComponentProcessor.java", "func_name": "JSFComponentProcessor.processPhaseListeners", "original_string": "private void processPhaseListeners(final DeploymentUnit deploymentUnit, final Set<String> managedBeanClasses) {\n        for (final VirtualFile facesConfig : getConfigurationFiles(deploymentUnit)) {\n            InputStream is = null;\n            try {\n                is = facesConfig.openStream();\n                final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n                inputFactory.setXMLResolver(NoopXMLResolver.create());\n                XMLStreamReader parser = inputFactory.createXMLStreamReader(is);\n                StringBuilder phaseListenerName = null;\n                int indent = 0;\n                boolean lifecycle = false;\n                boolean phaseListener = false;\n                while (true) {\n                    int event = parser.next();\n                    if (event == XMLStreamConstants.END_DOCUMENT) {\n                        parser.close();\n                        break;\n                    }\n                    if (event == XMLStreamConstants.START_ELEMENT) {\n                        indent++;\n                        if (indent == 2) {\n                            if(parser.getLocalName().equals(LIFECYCLE)){\n                                lifecycle = true;\n                            }\n                        } else if (indent == 3 && lifecycle) {\n                            if(parser.getLocalName().equals(PHASE_LISTENER)){\n                                phaseListener = true;\n                                phaseListenerName = new StringBuilder();\n                            }\n                        }\n                    } else if (event == XMLStreamConstants.END_ELEMENT) {\n                        indent--;\n                        phaseListener = false;\n                        if (indent == 1) {\n                            lifecycle = false;\n                        }\n                        if(phaseListenerName != null){\n                            managedBeanClasses.add(phaseListenerName.toString().trim());\n                            phaseListenerName = null;\n                        }\n                    } else if (phaseListener && event == XMLStreamConstants.CHARACTERS) {\n                        phaseListenerName.append(parser.getText());\n                    }\n                }\n            } catch (Exception e) {\n                JSFLogger.ROOT_LOGGER.phaseListenersConfigParseFailed(facesConfig);\n            } finally {\n                try {\n                    if (is != null) {\n                        is.close();\n                    }\n                } catch (IOException e) {\n                    // Ignore\n                }\n            }\n        }\n    }", "language": "java", "code": "private void processPhaseListeners(final DeploymentUnit deploymentUnit, final Set<String> managedBeanClasses) {\n        for (final VirtualFile facesConfig : getConfigurationFiles(deploymentUnit)) {\n            InputStream is = null;\n            try {\n                is = facesConfig.openStream();\n                final XMLInputFactory inputFactory = XMLInputFactory.newInstance();\n                inputFactory.setXMLResolver(NoopXMLResolver.create());\n                XMLStreamReader parser = inputFactory.createXMLStreamReader(is);\n                StringBuilder phaseListenerName = null;\n                int indent = 0;\n                boolean lifecycle = false;\n                boolean phaseListener = false;\n                while (true) {\n                    int event = parser.next();\n                    if (event == XMLStreamConstants.END_DOCUMENT) {\n                        parser.close();\n                        break;\n                    }\n                    if (event == XMLStreamConstants.START_ELEMENT) {\n                        indent++;\n                        if (indent == 2) {\n                            if(parser.getLocalName().equals(LIFECYCLE)){\n                                lifecycle = true;\n                            }\n                        } else if (indent == 3 && lifecycle) {\n                            if(parser.getLocalName().equals(PHASE_LISTENER)){\n                                phaseListener = true;\n                                phaseListenerName = new StringBuilder();\n                            }\n                        }\n                    } else if (event == XMLStreamConstants.END_ELEMENT) {\n                        indent--;\n                        phaseListener = false;\n                        if (indent == 1) {\n                            lifecycle = false;\n                        }\n                        if(phaseListenerName != null){\n                            managedBeanClasses.add(phaseListenerName.toString().trim());\n                            phaseListenerName = null;\n                        }\n                    } else if (phaseListener && event == XMLStreamConstants.CHARACTERS) {\n                        phaseListenerName.append(parser.getText());\n                    }\n                }\n            } catch (Exception e) {\n                JSFLogger.ROOT_LOGGER.phaseListenersConfigParseFailed(facesConfig);\n            } finally {\n                try {\n                    if (is != null) {\n                        is.close();\n                    }\n                } catch (IOException e) {\n                    // Ignore\n                }\n            }\n        }\n    }", "code_tokens": ["private", "void", "processPhaseListeners", "(", "final", "DeploymentUnit", "deploymentUnit", ",", "final", "Set", "<", "String", ">", "managedBeanClasses", ")", "{", "for", "(", "final", "VirtualFile", "facesConfig", ":", "getConfigurationFiles", "(", "deploymentUnit", ")", ")", "{", "InputStream", "is", "=", "null", ";", "try", "{", "is", "=", "facesConfig", ".", "openStream", "(", ")", ";", "final", "XMLInputFactory", "inputFactory", "=", "XMLInputFactory", ".", "newInstance", "(", ")", ";", "inputFactory", ".", "setXMLResolver", "(", "NoopXMLResolver", ".", "create", "(", ")", ")", ";", "XMLStreamReader", "parser", "=", "inputFactory", ".", "createXMLStreamReader", "(", "is", ")", ";", "StringBuilder", "phaseListenerName", "=", "null", ";", "int", "indent", "=", "0", ";", "boolean", "lifecycle", "=", "false", ";", "boolean", "phaseListener", "=", "false", ";", "while", "(", "true", ")", "{", "int", "event", "=", "parser", ".", "next", "(", ")", ";", "if", "(", "event", "==", "XMLStreamConstants", ".", "END_DOCUMENT", ")", "{", "parser", ".", "close", "(", ")", ";", "break", ";", "}", "if", "(", "event", "==", "XMLStreamConstants", ".", "START_ELEMENT", ")", "{", "indent", "++", ";", "if", "(", "indent", "==", "2", ")", "{", "if", "(", "parser", ".", "getLocalName", "(", ")", ".", "equals", "(", "LIFECYCLE", ")", ")", "{", "lifecycle", "=", "true", ";", "}", "}", "else", "if", "(", "indent", "==", "3", "&&", "lifecycle", ")", "{", "if", "(", "parser", ".", "getLocalName", "(", ")", ".", "equals", "(", "PHASE_LISTENER", ")", ")", "{", "phaseListener", "=", "true", ";", "phaseListenerName", "=", "new", "StringBuilder", "(", ")", ";", "}", "}", "}", "else", "if", "(", "event", "==", "XMLStreamConstants", ".", "END_ELEMENT", ")", "{", "indent", "--", ";", "phaseListener", "=", "false", ";", "if", "(", "indent", "==", "1", ")", "{", "lifecycle", "=", "false", ";", "}", "if", "(", "phaseListenerName", "!=", "null", ")", "{", "managedBeanClasses", ".", "add", "(", "phaseListenerName", ".", "toString", "(", ")", ".", "trim", "(", ")", ")", ";", "phaseListenerName", "=", "null", ";", "}", "}", "else", "if", "(", "phaseListener", "&&", "event", "==", "XMLStreamConstants", ".", "CHARACTERS", ")", "{", "phaseListenerName", ".", "append", "(", "parser", ".", "getText", "(", ")", ")", ";", "}", "}", "}", "catch", "(", "Exception", "e", ")", "{", "JSFLogger", ".", "ROOT_LOGGER", ".", "phaseListenersConfigParseFailed", "(", "facesConfig", ")", ";", "}", "finally", "{", "try", "{", "if", "(", "is", "!=", "null", ")", "{", "is", ".", "close", "(", ")", ";", "}", "}", "catch", "(", "IOException", "e", ")", "{", "// Ignore", "}", "}", "}", "}"], "docstring": "WFLY-6617\nAccording to  JSF 2.2 spec, it should be possible to inject beans using @EJB annotation into\nPhaseListeners.", "docstring_tokens": ["WFLY", "-", "6617", "According", "to", "JSF", "2", ".", "2", "spec", "it", "should", "be", "possible", "to", "inject", "beans", "using"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFComponentProcessor.java#L187-L243", "partition": "test", "index": 2628, "time": "2011-05-19 09:12:10"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewDescription.java", "func_name": "ViewDescription.createViewConfiguration", "original_string": "public ViewConfiguration createViewConfiguration(final Class<?> viewClass, final ComponentConfiguration componentConfiguration, final ProxyFactory<?> proxyFactory) {\n        return new ViewConfiguration(viewClass, componentConfiguration, getServiceName(), proxyFactory);\n    }", "language": "java", "code": "public ViewConfiguration createViewConfiguration(final Class<?> viewClass, final ComponentConfiguration componentConfiguration, final ProxyFactory<?> proxyFactory) {\n        return new ViewConfiguration(viewClass, componentConfiguration, getServiceName(), proxyFactory);\n    }", "code_tokens": ["public", "ViewConfiguration", "createViewConfiguration", "(", "final", "Class", "<", "?", ">", "viewClass", ",", "final", "ComponentConfiguration", "componentConfiguration", ",", "final", "ProxyFactory", "<", "?", ">", "proxyFactory", ")", "{", "return", "new", "ViewConfiguration", "(", "viewClass", ",", "componentConfiguration", ",", "getServiceName", "(", ")", ",", "proxyFactory", ")", ";", "}"], "docstring": "Creates view configuration. Allows for extensibility in EE sub components.\n\n@param viewClass              view class\n@param componentConfiguration component config\n@param proxyFactory           proxy factory\n@return new view configuration", "docstring_tokens": ["Creates", "view", "configuration", ".", "Allows", "for", "extensibility", "in", "EE", "sub", "components", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewDescription.java#L150-L152", "partition": "test", "index": 2655, "time": "2011-05-23 22:31:43"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java", "func_name": "ViewConfiguration.addViewInterceptor", "original_string": "public void addViewInterceptor(Method method, InterceptorFactory interceptorFactory, int priority) {\n        OrderedItemContainer<InterceptorFactory> container = viewInterceptors.get(method);\n        if (container == null) {\n            viewInterceptors.put(method, container = new OrderedItemContainer<InterceptorFactory>());\n        }\n        container.add(interceptorFactory, priority);\n    }", "language": "java", "code": "public void addViewInterceptor(Method method, InterceptorFactory interceptorFactory, int priority) {\n        OrderedItemContainer<InterceptorFactory> container = viewInterceptors.get(method);\n        if (container == null) {\n            viewInterceptors.put(method, container = new OrderedItemContainer<InterceptorFactory>());\n        }\n        container.add(interceptorFactory, priority);\n    }", "code_tokens": ["public", "void", "addViewInterceptor", "(", "Method", "method", ",", "InterceptorFactory", "interceptorFactory", ",", "int", "priority", ")", "{", "OrderedItemContainer", "<", "InterceptorFactory", ">", "container", "=", "viewInterceptors", ".", "get", "(", "method", ")", ";", "if", "(", "container", "==", "null", ")", "{", "viewInterceptors", ".", "put", "(", "method", ",", "container", "=", "new", "OrderedItemContainer", "<", "InterceptorFactory", ">", "(", ")", ")", ";", "}", "container", ".", "add", "(", "interceptorFactory", ",", "priority", ")", ";", "}"], "docstring": "Adds a view interceptor to the given method\n\n@param method             The method to add\n@param interceptorFactory The interceptor factory\n@param priority           The priority", "docstring_tokens": ["Adds", "a", "view", "interceptor", "to", "the", "given", "method"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java#L131-L137", "partition": "test", "index": 2659, "time": "2011-05-24 11:03:12"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java", "func_name": "ViewConfiguration.addViewInterceptor", "original_string": "public void addViewInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        for (Method method : proxyFactory.getCachedMethods()) {\n            addViewInterceptor(method, interceptorFactory, priority);\n        }\n    }", "language": "java", "code": "public void addViewInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        for (Method method : proxyFactory.getCachedMethods()) {\n            addViewInterceptor(method, interceptorFactory, priority);\n        }\n    }", "code_tokens": ["public", "void", "addViewInterceptor", "(", "InterceptorFactory", "interceptorFactory", ",", "int", "priority", ")", "{", "for", "(", "Method", "method", ":", "proxyFactory", ".", "getCachedMethods", "(", ")", ")", "{", "addViewInterceptor", "(", "method", ",", "interceptorFactory", ",", "priority", ")", ";", "}", "}"], "docstring": "Adds an interceptor factory to all methods of a view\n\n@param interceptorFactory The factory to add\n@param priority           The interceptor order", "docstring_tokens": ["Adds", "an", "interceptor", "factory", "to", "all", "methods", "of", "a", "view"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java#L118-L122", "partition": "test", "index": 2658, "time": "2011-05-24 11:03:12"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java", "func_name": "EEApplicationDescription.getComponents", "original_string": "public Set<ComponentDescription> getComponents(final String componentName, final VirtualFile deploymentRoot) {\n        if (componentName.contains(\"#\")) {\n            final String[] parts = componentName.split(\"#\");\n            String path = parts[0];\n            if (!path.startsWith(\"../\")) {\n                path = \"../\" + path;\n            }\n            final VirtualFile virtualPath = deploymentRoot.getChild(path);\n            final String name = parts[1];\n            final List<Description> info = componentsByName.get(name);\n            if (info == null) {\n                return Collections.emptySet();\n            }\n            final Set<ComponentDescription> ret = new HashSet<ComponentDescription>();\n            for (Description i : info) {\n                //now we need to check the path\n                if (virtualPath.equals(i.deploymentRoot)) {\n                    ret.add(i.componentDescription);\n                }\n            }\n            return ret;\n        } else {\n            final List<Description> info = componentsByName.get(componentName);\n            if (info == null) {\n                return Collections.emptySet();\n            }\n            final Set<ComponentDescription> all = new HashSet<ComponentDescription>();\n            final Set<ComponentDescription> thisDeployment = new HashSet<ComponentDescription>();\n            for (Description i : info) {\n                all.add(i.componentDescription);\n                if (i.deploymentRoot.equals(deploymentRoot)) {\n                    thisDeployment.add(i.componentDescription);\n                }\n            }\n            //if there are multiple e\n            if (all.size() > 1) {\n                return thisDeployment;\n            }\n            return all;\n        }\n    }", "language": "java", "code": "public Set<ComponentDescription> getComponents(final String componentName, final VirtualFile deploymentRoot) {\n        if (componentName.contains(\"#\")) {\n            final String[] parts = componentName.split(\"#\");\n            String path = parts[0];\n            if (!path.startsWith(\"../\")) {\n                path = \"../\" + path;\n            }\n            final VirtualFile virtualPath = deploymentRoot.getChild(path);\n            final String name = parts[1];\n            final List<Description> info = componentsByName.get(name);\n            if (info == null) {\n                return Collections.emptySet();\n            }\n            final Set<ComponentDescription> ret = new HashSet<ComponentDescription>();\n            for (Description i : info) {\n                //now we need to check the path\n                if (virtualPath.equals(i.deploymentRoot)) {\n                    ret.add(i.componentDescription);\n                }\n            }\n            return ret;\n        } else {\n            final List<Description> info = componentsByName.get(componentName);\n            if (info == null) {\n                return Collections.emptySet();\n            }\n            final Set<ComponentDescription> all = new HashSet<ComponentDescription>();\n            final Set<ComponentDescription> thisDeployment = new HashSet<ComponentDescription>();\n            for (Description i : info) {\n                all.add(i.componentDescription);\n                if (i.deploymentRoot.equals(deploymentRoot)) {\n                    thisDeployment.add(i.componentDescription);\n                }\n            }\n            //if there are multiple e\n            if (all.size() > 1) {\n                return thisDeployment;\n            }\n            return all;\n        }\n    }", "code_tokens": ["public", "Set", "<", "ComponentDescription", ">", "getComponents", "(", "final", "String", "componentName", ",", "final", "VirtualFile", "deploymentRoot", ")", "{", "if", "(", "componentName", ".", "contains", "(", "\"#\"", ")", ")", "{", "final", "String", "[", "]", "parts", "=", "componentName", ".", "split", "(", "\"#\"", ")", ";", "String", "path", "=", "parts", "[", "0", "]", ";", "if", "(", "!", "path", ".", "startsWith", "(", "\"../\"", ")", ")", "{", "path", "=", "\"../\"", "+", "path", ";", "}", "final", "VirtualFile", "virtualPath", "=", "deploymentRoot", ".", "getChild", "(", "path", ")", ";", "final", "String", "name", "=", "parts", "[", "1", "]", ";", "final", "List", "<", "Description", ">", "info", "=", "componentsByName", ".", "get", "(", "name", ")", ";", "if", "(", "info", "==", "null", ")", "{", "return", "Collections", ".", "emptySet", "(", ")", ";", "}", "final", "Set", "<", "ComponentDescription", ">", "ret", "=", "new", "HashSet", "<", "ComponentDescription", ">", "(", ")", ";", "for", "(", "Description", "i", ":", "info", ")", "{", "//now we need to check the path", "if", "(", "virtualPath", ".", "equals", "(", "i", ".", "deploymentRoot", ")", ")", "{", "ret", ".", "add", "(", "i", ".", "componentDescription", ")", ";", "}", "}", "return", "ret", ";", "}", "else", "{", "final", "List", "<", "Description", ">", "info", "=", "componentsByName", ".", "get", "(", "componentName", ")", ";", "if", "(", "info", "==", "null", ")", "{", "return", "Collections", ".", "emptySet", "(", ")", ";", "}", "final", "Set", "<", "ComponentDescription", ">", "all", "=", "new", "HashSet", "<", "ComponentDescription", ">", "(", ")", ";", "final", "Set", "<", "ComponentDescription", ">", "thisDeployment", "=", "new", "HashSet", "<", "ComponentDescription", ">", "(", ")", ";", "for", "(", "Description", "i", ":", "info", ")", "{", "all", ".", "add", "(", "i", ".", "componentDescription", ")", ";", "if", "(", "i", ".", "deploymentRoot", ".", "equals", "(", "deploymentRoot", ")", ")", "{", "thisDeployment", ".", "add", "(", "i", ".", "componentDescription", ")", ";", "}", "}", "//if there are multiple e", "if", "(", "all", ".", "size", "(", ")", ">", "1", ")", "{", "return", "thisDeployment", ";", "}", "return", "all", ";", "}", "}"], "docstring": "Get all components in the application that have the given name\n\n@param componentName  The name of the component\n@param deploymentRoot The deployment root of the component doing the lookup\n@return A set of all views for the given component name and type", "docstring_tokens": ["Get", "all", "components", "in", "the", "application", "that", "have", "the", "given", "name"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java#L116-L156", "partition": "test", "index": 2836, "time": "2011-05-30 15:39:17"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/stateful/StatefulSessionSynchronizationInterceptor.java", "func_name": "StatefulSessionSynchronizationInterceptor.releaseLock", "original_string": "static void releaseLock(final StatefulSessionComponentInstance instance) {\n        instance.getLock().unlock(getLockOwner(instance.getComponent().getTransactionSynchronizationRegistry()));\n        ROOT_LOGGER.tracef(\"Released lock: %s\", instance.getLock());\n    }", "language": "java", "code": "static void releaseLock(final StatefulSessionComponentInstance instance) {\n        instance.getLock().unlock(getLockOwner(instance.getComponent().getTransactionSynchronizationRegistry()));\n        ROOT_LOGGER.tracef(\"Released lock: %s\", instance.getLock());\n    }", "code_tokens": ["static", "void", "releaseLock", "(", "final", "StatefulSessionComponentInstance", "instance", ")", "{", "instance", ".", "getLock", "(", ")", ".", "unlock", "(", "getLockOwner", "(", "instance", ".", "getComponent", "(", ")", ".", "getTransactionSynchronizationRegistry", "(", ")", ")", ")", ";", "ROOT_LOGGER", ".", "tracef", "(", "\"Released lock: %s\"", ",", "instance", ".", "getLock", "(", ")", ")", ";", "}"], "docstring": "Releases the lock, held by this thread, on the stateful component instance.", "docstring_tokens": ["Releases", "the", "lock", "held", "by", "this", "thread", "on", "the", "stateful", "component", "instance", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/stateful/StatefulSessionSynchronizationInterceptor.java#L222-L225", "partition": "test", "index": 2522, "time": "2011-06-10 08:29:51"}
{"repo": "wildfly/wildfly", "path": "jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/ResteasyDeploymentData.java", "func_name": "ResteasyDeploymentData.merge", "original_string": "public void merge(final List<ResteasyDeploymentData> deploymentData) throws DeploymentUnitProcessingException {\n        for (ResteasyDeploymentData data : deploymentData) {\n            scannedApplicationClasses.addAll(data.getScannedApplicationClasses());\n            if (scanResources) {\n                scannedResourceClasses.addAll(data.getScannedResourceClasses());\n                scannedJndiComponentResources.addAll(data.getScannedJndiComponentResources());\n            }\n            if (scanProviders) {\n                scannedProviderClasses.addAll(data.getScannedProviderClasses());\n            }\n        }\n    }", "language": "java", "code": "public void merge(final List<ResteasyDeploymentData> deploymentData) throws DeploymentUnitProcessingException {\n        for (ResteasyDeploymentData data : deploymentData) {\n            scannedApplicationClasses.addAll(data.getScannedApplicationClasses());\n            if (scanResources) {\n                scannedResourceClasses.addAll(data.getScannedResourceClasses());\n                scannedJndiComponentResources.addAll(data.getScannedJndiComponentResources());\n            }\n            if (scanProviders) {\n                scannedProviderClasses.addAll(data.getScannedProviderClasses());\n            }\n        }\n    }", "code_tokens": ["public", "void", "merge", "(", "final", "List", "<", "ResteasyDeploymentData", ">", "deploymentData", ")", "throws", "DeploymentUnitProcessingException", "{", "for", "(", "ResteasyDeploymentData", "data", ":", "deploymentData", ")", "{", "scannedApplicationClasses", ".", "addAll", "(", "data", ".", "getScannedApplicationClasses", "(", ")", ")", ";", "if", "(", "scanResources", ")", "{", "scannedResourceClasses", ".", "addAll", "(", "data", ".", "getScannedResourceClasses", "(", ")", ")", ";", "scannedJndiComponentResources", ".", "addAll", "(", "data", ".", "getScannedJndiComponentResources", "(", ")", ")", ";", "}", "if", "(", "scanProviders", ")", "{", "scannedProviderClasses", ".", "addAll", "(", "data", ".", "getScannedProviderClasses", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Merges a list of additional JAX-RS deployment data with this lot of deployment data.\n\n@param deploymentData", "docstring_tokens": ["Merges", "a", "list", "of", "additional", "JAX", "-", "RS", "deployment", "data", "with", "this", "lot", "of", "deployment", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/ResteasyDeploymentData.java#L53-L64", "partition": "test", "index": 2691, "time": "2011-06-22 10:47:29"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/JPAInterceptorProcessor.java", "func_name": "JPAInterceptorProcessor.registerSessionBeanInterceptors", "original_string": "private void registerSessionBeanInterceptors(SessionBeanComponentDescription componentDescription, final DeploymentUnit deploymentUnit) {\n        // if it's a SFSB then setup appropriate interceptors\n        if (componentDescription.isStateful()) {\n\n            // first setup the post construct and pre destroy component interceptors\n            componentDescription.getConfigurators().addFirst(new ComponentConfigurator() {\n                @Override\n                public void configure(DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration) throws\n                    DeploymentUnitProcessingException {\n                    configuration.addPostConstructInterceptor(SFSBPreCreateInterceptor.FACTORY, InterceptorOrder.ComponentPostConstruct.JPA_SFSB_PRE_CREATE);\n                    configuration.addPostConstructInterceptor(SFSBCreateInterceptor.FACTORY, InterceptorOrder.ComponentPostConstruct.JPA_SFSB_CREATE);\n                    configuration.addPreDestroyInterceptor(SFSBDestroyInterceptor.FACTORY, InterceptorOrder.ComponentPreDestroy.JPA_SFSB_DESTROY);\n                    configuration.addComponentInterceptor(SFSBInvocationInterceptor.FACTORY, InterceptorOrder.Component.JPA_SFSB_INTERCEPTOR, false);\n\n                    //we need to serialized the entity manager state\n                    configuration.getInterceptorContextKeys().add(SFSBInvocationInterceptor.CONTEXT_KEY);\n                }\n            });\n        }\n        // register interceptor on stateful/stateless SB with transactional entity manager.\n        if ((componentDescription.isStateful() || componentDescription.isStateless())) {\n            componentDescription.getConfigurators().add(new ComponentConfigurator() {\n                @Override\n                public void configure(DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration) throws\n                    DeploymentUnitProcessingException {\n                    configuration.addComponentInterceptor(SBInvocationInterceptor.FACTORY, InterceptorOrder.Component.JPA_SESSION_BEAN_INTERCEPTOR, false);\n                }\n            });\n        }\n    }", "language": "java", "code": "private void registerSessionBeanInterceptors(SessionBeanComponentDescription componentDescription, final DeploymentUnit deploymentUnit) {\n        // if it's a SFSB then setup appropriate interceptors\n        if (componentDescription.isStateful()) {\n\n            // first setup the post construct and pre destroy component interceptors\n            componentDescription.getConfigurators().addFirst(new ComponentConfigurator() {\n                @Override\n                public void configure(DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration) throws\n                    DeploymentUnitProcessingException {\n                    configuration.addPostConstructInterceptor(SFSBPreCreateInterceptor.FACTORY, InterceptorOrder.ComponentPostConstruct.JPA_SFSB_PRE_CREATE);\n                    configuration.addPostConstructInterceptor(SFSBCreateInterceptor.FACTORY, InterceptorOrder.ComponentPostConstruct.JPA_SFSB_CREATE);\n                    configuration.addPreDestroyInterceptor(SFSBDestroyInterceptor.FACTORY, InterceptorOrder.ComponentPreDestroy.JPA_SFSB_DESTROY);\n                    configuration.addComponentInterceptor(SFSBInvocationInterceptor.FACTORY, InterceptorOrder.Component.JPA_SFSB_INTERCEPTOR, false);\n\n                    //we need to serialized the entity manager state\n                    configuration.getInterceptorContextKeys().add(SFSBInvocationInterceptor.CONTEXT_KEY);\n                }\n            });\n        }\n        // register interceptor on stateful/stateless SB with transactional entity manager.\n        if ((componentDescription.isStateful() || componentDescription.isStateless())) {\n            componentDescription.getConfigurators().add(new ComponentConfigurator() {\n                @Override\n                public void configure(DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration) throws\n                    DeploymentUnitProcessingException {\n                    configuration.addComponentInterceptor(SBInvocationInterceptor.FACTORY, InterceptorOrder.Component.JPA_SESSION_BEAN_INTERCEPTOR, false);\n                }\n            });\n        }\n    }", "code_tokens": ["private", "void", "registerSessionBeanInterceptors", "(", "SessionBeanComponentDescription", "componentDescription", ",", "final", "DeploymentUnit", "deploymentUnit", ")", "{", "// if it's a SFSB then setup appropriate interceptors", "if", "(", "componentDescription", ".", "isStateful", "(", ")", ")", "{", "// first setup the post construct and pre destroy component interceptors", "componentDescription", ".", "getConfigurators", "(", ")", ".", "addFirst", "(", "new", "ComponentConfigurator", "(", ")", "{", "@", "Override", "public", "void", "configure", "(", "DeploymentPhaseContext", "context", ",", "ComponentDescription", "description", ",", "ComponentConfiguration", "configuration", ")", "throws", "DeploymentUnitProcessingException", "{", "configuration", ".", "addPostConstructInterceptor", "(", "SFSBPreCreateInterceptor", ".", "FACTORY", ",", "InterceptorOrder", ".", "ComponentPostConstruct", ".", "JPA_SFSB_PRE_CREATE", ")", ";", "configuration", ".", "addPostConstructInterceptor", "(", "SFSBCreateInterceptor", ".", "FACTORY", ",", "InterceptorOrder", ".", "ComponentPostConstruct", ".", "JPA_SFSB_CREATE", ")", ";", "configuration", ".", "addPreDestroyInterceptor", "(", "SFSBDestroyInterceptor", ".", "FACTORY", ",", "InterceptorOrder", ".", "ComponentPreDestroy", ".", "JPA_SFSB_DESTROY", ")", ";", "configuration", ".", "addComponentInterceptor", "(", "SFSBInvocationInterceptor", ".", "FACTORY", ",", "InterceptorOrder", ".", "Component", ".", "JPA_SFSB_INTERCEPTOR", ",", "false", ")", ";", "//we need to serialized the entity manager state", "configuration", ".", "getInterceptorContextKeys", "(", ")", ".", "add", "(", "SFSBInvocationInterceptor", ".", "CONTEXT_KEY", ")", ";", "}", "}", ")", ";", "}", "// register interceptor on stateful/stateless SB with transactional entity manager.", "if", "(", "(", "componentDescription", ".", "isStateful", "(", ")", "||", "componentDescription", ".", "isStateless", "(", ")", ")", ")", "{", "componentDescription", ".", "getConfigurators", "(", ")", ".", "add", "(", "new", "ComponentConfigurator", "(", ")", "{", "@", "Override", "public", "void", "configure", "(", "DeploymentPhaseContext", "context", ",", "ComponentDescription", "description", ",", "ComponentConfiguration", "configuration", ")", "throws", "DeploymentUnitProcessingException", "{", "configuration", ".", "addComponentInterceptor", "(", "SBInvocationInterceptor", ".", "FACTORY", ",", "InterceptorOrder", ".", "Component", ".", "JPA_SESSION_BEAN_INTERCEPTOR", ",", "false", ")", ";", "}", "}", ")", ";", "}", "}"], "docstring": "Register our listeners on SFSB that will be created", "docstring_tokens": ["Register", "our", "listeners", "on", "SFSB", "that", "will", "be", "created"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/JPAInterceptorProcessor.java#L61-L90", "partition": "test", "index": 2573, "time": "2011-06-27 18:10:26"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java", "func_name": "SFSBCallStack.beginSfsbCreation", "original_string": "public static void beginSfsbCreation() {\n        SFSBCallStackThreadData data = CURRENT.get();\n        int no = data.creationBeanNestingLevel;\n        if (no == 0) {\n            data.creationTimeXPCRegistration = new HashMap<String, ExtendedEntityManager>();\n            // create new tracking structure (passing in parent levels tracking structure or null if toplevel)\n            data.creationTimeInjectedXPCs = new SFSBInjectedXPCs(data.creationTimeInjectedXPCs, null);\n        }\n        else {\n            // create new tracking structure (passing in parent levels tracking structure or null if toplevel)\n            SFSBInjectedXPCs parent = data.creationTimeInjectedXPCs;\n            data.creationTimeInjectedXPCs = new SFSBInjectedXPCs(parent, parent.getTopLevel());\n        }\n        data.creationBeanNestingLevel++;\n    }", "language": "java", "code": "public static void beginSfsbCreation() {\n        SFSBCallStackThreadData data = CURRENT.get();\n        int no = data.creationBeanNestingLevel;\n        if (no == 0) {\n            data.creationTimeXPCRegistration = new HashMap<String, ExtendedEntityManager>();\n            // create new tracking structure (passing in parent levels tracking structure or null if toplevel)\n            data.creationTimeInjectedXPCs = new SFSBInjectedXPCs(data.creationTimeInjectedXPCs, null);\n        }\n        else {\n            // create new tracking structure (passing in parent levels tracking structure or null if toplevel)\n            SFSBInjectedXPCs parent = data.creationTimeInjectedXPCs;\n            data.creationTimeInjectedXPCs = new SFSBInjectedXPCs(parent, parent.getTopLevel());\n        }\n        data.creationBeanNestingLevel++;\n    }", "code_tokens": ["public", "static", "void", "beginSfsbCreation", "(", ")", "{", "SFSBCallStackThreadData", "data", "=", "CURRENT", ".", "get", "(", ")", ";", "int", "no", "=", "data", ".", "creationBeanNestingLevel", ";", "if", "(", "no", "==", "0", ")", "{", "data", ".", "creationTimeXPCRegistration", "=", "new", "HashMap", "<", "String", ",", "ExtendedEntityManager", ">", "(", ")", ";", "// create new tracking structure (passing in parent levels tracking structure or null if toplevel)", "data", ".", "creationTimeInjectedXPCs", "=", "new", "SFSBInjectedXPCs", "(", "data", ".", "creationTimeInjectedXPCs", ",", "null", ")", ";", "}", "else", "{", "// create new tracking structure (passing in parent levels tracking structure or null if toplevel)", "SFSBInjectedXPCs", "parent", "=", "data", ".", "creationTimeInjectedXPCs", ";", "data", ".", "creationTimeInjectedXPCs", "=", "new", "SFSBInjectedXPCs", "(", "parent", ",", "parent", ".", "getTopLevel", "(", ")", ")", ";", "}", "data", ".", "creationBeanNestingLevel", "++", ";", "}"], "docstring": "called from SFSBPreCreateInterceptor, before bean creation", "docstring_tokens": ["called", "from", "SFSBPreCreateInterceptor", "before", "bean", "creation"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java#L54-L68", "partition": "test", "index": 2620, "time": "2011-06-27 20:25:59"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java", "func_name": "SFSBCallStack.endSfsbCreation", "original_string": "public static void endSfsbCreation() {\n        SFSBCallStackThreadData data = CURRENT.get();\n        int no =  data.creationBeanNestingLevel;\n        no--;\n        data.creationBeanNestingLevel = no;\n\n        if (no == 0) {\n            // Completed creating top level bean, remove 'xpc creation tracking' thread local\n            data.creationTimeXPCRegistration = null;\n            data.creationTimeInjectedXPCs = null;\n        }\n        else {\n            // finished creating a sub-bean, switch to parent level 'xpc creation tracking'\n            data.creationTimeInjectedXPCs = data.creationTimeInjectedXPCs.getParent();\n        }\n    }", "language": "java", "code": "public static void endSfsbCreation() {\n        SFSBCallStackThreadData data = CURRENT.get();\n        int no =  data.creationBeanNestingLevel;\n        no--;\n        data.creationBeanNestingLevel = no;\n\n        if (no == 0) {\n            // Completed creating top level bean, remove 'xpc creation tracking' thread local\n            data.creationTimeXPCRegistration = null;\n            data.creationTimeInjectedXPCs = null;\n        }\n        else {\n            // finished creating a sub-bean, switch to parent level 'xpc creation tracking'\n            data.creationTimeInjectedXPCs = data.creationTimeInjectedXPCs.getParent();\n        }\n    }", "code_tokens": ["public", "static", "void", "endSfsbCreation", "(", ")", "{", "SFSBCallStackThreadData", "data", "=", "CURRENT", ".", "get", "(", ")", ";", "int", "no", "=", "data", ".", "creationBeanNestingLevel", ";", "no", "--", ";", "data", ".", "creationBeanNestingLevel", "=", "no", ";", "if", "(", "no", "==", "0", ")", "{", "// Completed creating top level bean, remove 'xpc creation tracking' thread local", "data", ".", "creationTimeXPCRegistration", "=", "null", ";", "data", ".", "creationTimeInjectedXPCs", "=", "null", ";", "}", "else", "{", "// finished creating a sub-bean, switch to parent level 'xpc creation tracking'", "data", ".", "creationTimeInjectedXPCs", "=", "data", ".", "creationTimeInjectedXPCs", ".", "getParent", "(", ")", ";", "}", "}"], "docstring": "called from SFSBPreCreateInterceptor, after bean creation", "docstring_tokens": ["called", "from", "SFSBPreCreateInterceptor", "after", "bean", "creation"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java#L73-L88", "partition": "test", "index": 2621, "time": "2011-06-27 20:25:59"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/deployment/ContextNames.java", "func_name": "ContextNames.bindInfoFor", "original_string": "public static BindInfo bindInfoFor(final String jndiName) {\n        // TODO: handle non java: schemes\n        String bindName;\n        if (jndiName.startsWith(\"java:\")) {\n            bindName = jndiName.substring(5);\n        } else if (!jndiName.startsWith(\"jboss\") && !jndiName.startsWith(\"global\") && !jndiName.startsWith(\"/\")) {\n            bindName = \"/\" + jndiName;\n        } else {\n            bindName = jndiName;\n        }\n        final ServiceName parentContextName;\n        if(bindName.startsWith(\"jboss/exported/\")) {\n            parentContextName = EXPORTED_CONTEXT_SERVICE_NAME;\n            bindName = bindName.substring(15);\n        } else if (bindName.startsWith(\"jboss/\")) {\n            parentContextName = JBOSS_CONTEXT_SERVICE_NAME;\n            bindName = bindName.substring(6);\n        } else if (bindName.startsWith(\"global/\")) {\n            parentContextName = GLOBAL_CONTEXT_SERVICE_NAME;\n            bindName = bindName.substring(7);\n        } else if (bindName.startsWith(\"/\")) {\n            parentContextName = JAVA_CONTEXT_SERVICE_NAME;\n            bindName = bindName.substring(1);\n        } else {\n            throw NamingLogger.ROOT_LOGGER.illegalContextInName(jndiName);\n        }\n        return new BindInfo(parentContextName, bindName);\n    }", "language": "java", "code": "public static BindInfo bindInfoFor(final String jndiName) {\n        // TODO: handle non java: schemes\n        String bindName;\n        if (jndiName.startsWith(\"java:\")) {\n            bindName = jndiName.substring(5);\n        } else if (!jndiName.startsWith(\"jboss\") && !jndiName.startsWith(\"global\") && !jndiName.startsWith(\"/\")) {\n            bindName = \"/\" + jndiName;\n        } else {\n            bindName = jndiName;\n        }\n        final ServiceName parentContextName;\n        if(bindName.startsWith(\"jboss/exported/\")) {\n            parentContextName = EXPORTED_CONTEXT_SERVICE_NAME;\n            bindName = bindName.substring(15);\n        } else if (bindName.startsWith(\"jboss/\")) {\n            parentContextName = JBOSS_CONTEXT_SERVICE_NAME;\n            bindName = bindName.substring(6);\n        } else if (bindName.startsWith(\"global/\")) {\n            parentContextName = GLOBAL_CONTEXT_SERVICE_NAME;\n            bindName = bindName.substring(7);\n        } else if (bindName.startsWith(\"/\")) {\n            parentContextName = JAVA_CONTEXT_SERVICE_NAME;\n            bindName = bindName.substring(1);\n        } else {\n            throw NamingLogger.ROOT_LOGGER.illegalContextInName(jndiName);\n        }\n        return new BindInfo(parentContextName, bindName);\n    }", "code_tokens": ["public", "static", "BindInfo", "bindInfoFor", "(", "final", "String", "jndiName", ")", "{", "// TODO: handle non java: schemes", "String", "bindName", ";", "if", "(", "jndiName", ".", "startsWith", "(", "\"java:\"", ")", ")", "{", "bindName", "=", "jndiName", ".", "substring", "(", "5", ")", ";", "}", "else", "if", "(", "!", "jndiName", ".", "startsWith", "(", "\"jboss\"", ")", "&&", "!", "jndiName", ".", "startsWith", "(", "\"global\"", ")", "&&", "!", "jndiName", ".", "startsWith", "(", "\"/\"", ")", ")", "{", "bindName", "=", "\"/\"", "+", "jndiName", ";", "}", "else", "{", "bindName", "=", "jndiName", ";", "}", "final", "ServiceName", "parentContextName", ";", "if", "(", "bindName", ".", "startsWith", "(", "\"jboss/exported/\"", ")", ")", "{", "parentContextName", "=", "EXPORTED_CONTEXT_SERVICE_NAME", ";", "bindName", "=", "bindName", ".", "substring", "(", "15", ")", ";", "}", "else", "if", "(", "bindName", ".", "startsWith", "(", "\"jboss/\"", ")", ")", "{", "parentContextName", "=", "JBOSS_CONTEXT_SERVICE_NAME", ";", "bindName", "=", "bindName", ".", "substring", "(", "6", ")", ";", "}", "else", "if", "(", "bindName", ".", "startsWith", "(", "\"global/\"", ")", ")", "{", "parentContextName", "=", "GLOBAL_CONTEXT_SERVICE_NAME", ";", "bindName", "=", "bindName", ".", "substring", "(", "7", ")", ";", "}", "else", "if", "(", "bindName", ".", "startsWith", "(", "\"/\"", ")", ")", "{", "parentContextName", "=", "JAVA_CONTEXT_SERVICE_NAME", ";", "bindName", "=", "bindName", ".", "substring", "(", "1", ")", ";", "}", "else", "{", "throw", "NamingLogger", ".", "ROOT_LOGGER", ".", "illegalContextInName", "(", "jndiName", ")", ";", "}", "return", "new", "BindInfo", "(", "parentContextName", ",", "bindName", ")", ";", "}"], "docstring": "Get the service name of a NamingStore\n\n@param jndiName the jndi name\n@return the bind info for the jndi name", "docstring_tokens": ["Get", "the", "service", "name", "of", "a", "NamingStore"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/deployment/ContextNames.java#L348-L375", "partition": "test", "index": 2824, "time": "2011-07-07 11:18:04"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/EEApplicationClasses.java", "func_name": "EEApplicationClasses.getClassByName", "original_string": "public EEModuleClassDescription getClassByName(String name) {\n        for(EEModuleDescription module : availableModules) {\n            final EEModuleClassDescription desc = module.getClassDescription(name);\n            if(desc != null) {\n                return desc;\n            }\n        }\n        return null;\n    }", "language": "java", "code": "public EEModuleClassDescription getClassByName(String name) {\n        for(EEModuleDescription module : availableModules) {\n            final EEModuleClassDescription desc = module.getClassDescription(name);\n            if(desc != null) {\n                return desc;\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "EEModuleClassDescription", "getClassByName", "(", "String", "name", ")", "{", "for", "(", "EEModuleDescription", "module", ":", "availableModules", ")", "{", "final", "EEModuleClassDescription", "desc", "=", "module", ".", "getClassDescription", "(", "name", ")", ";", "if", "(", "desc", "!=", "null", ")", "{", "return", "desc", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Look for a class description in all available modules.\n@param name The class to lookup\n@return", "docstring_tokens": ["Look", "for", "a", "class", "description", "in", "all", "available", "modules", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/EEApplicationClasses.java#L50-L58", "partition": "test", "index": 2717, "time": "2011-07-08 14:00:34"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java", "func_name": "PersistenceUnitServiceHandler.lookupProvider", "original_string": "private static PersistenceProvider lookupProvider(\n            PersistenceUnitMetadata pu,\n            PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder,\n            DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException {\n\n        /**\n         * check if the deployment is already associated with the specified persistence provider\n         */\n        Map<String, PersistenceProvider> providerMap = persistenceProviderDeploymentHolder != null ?\n                persistenceProviderDeploymentHolder.getProviders() : null;\n        if (providerMap != null) {\n            synchronized (providerMap) {\n                if(providerMap.containsKey(pu.getPersistenceProviderClassName())){\n                    ROOT_LOGGER.tracef(\"deployment %s is using %s\", deploymentUnit.getName(), pu.getPersistenceProviderClassName());\n                    return providerMap.get(pu.getPersistenceProviderClassName());\n                }\n            }\n        }\n\n        String configuredPersistenceProviderModule = pu.getProperties().getProperty(Configuration.PROVIDER_MODULE);\n        String persistenceProviderClassName = pu.getPersistenceProviderClassName();\n\n        if (persistenceProviderClassName == null) {\n            persistenceProviderClassName = Configuration.PROVIDER_CLASS_DEFAULT;\n        }\n\n        /**\n         * locate persistence provider in specified static module\n         */\n        if (configuredPersistenceProviderModule != null) {\n            List<PersistenceProvider> providers;\n            if (Configuration.PROVIDER_MODULE_APPLICATION_SUPPLIED.equals(configuredPersistenceProviderModule)) {\n                try {\n                    // load the persistence provider from the application deployment\n                    final ModuleClassLoader classLoader = deploymentUnit.getAttachment(Attachments.MODULE).getClassLoader();\n                    PersistenceProvider provider = PersistenceProviderLoader.loadProviderFromDeployment(classLoader, persistenceProviderClassName);\n                    providers = new ArrayList<>();\n                    providers.add(provider);\n                    PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit, providers, null);\n                    return provider;\n\n                } catch (ClassNotFoundException e) {\n                    throw JpaLogger.ROOT_LOGGER.cannotDeployApp(e, persistenceProviderClassName);\n                } catch (InstantiationException e) {\n                    throw JpaLogger.ROOT_LOGGER.cannotDeployApp(e, persistenceProviderClassName);\n                } catch (IllegalAccessException e) {\n                    throw JpaLogger.ROOT_LOGGER.cannotDeployApp(e, persistenceProviderClassName);\n                }\n            } else {\n                try {\n                    providers = PersistenceProviderLoader.loadProviderModuleByName(configuredPersistenceProviderModule);\n                    PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit, providers, null);\n                    PersistenceProvider provider = getProviderByName(pu, providers);\n                    if (provider != null) {\n                        return provider;\n                    }\n                } catch (ModuleLoadException e) {\n                    throw JpaLogger.ROOT_LOGGER.cannotLoadPersistenceProviderModule(e, configuredPersistenceProviderModule, persistenceProviderClassName);\n                }\n            }\n        }\n\n        // try to determine the static module name based on the persistence provider class name\n        String providerNameDerivedFromClassName = Configuration.getProviderModuleNameFromProviderClassName(persistenceProviderClassName);\n\n        // see if the providerNameDerivedFromClassName has been loaded yet\n        PersistenceProvider provider = getProviderByName(pu);\n\n        // if we haven't loaded the provider yet, try loading now\n        if (provider == null && providerNameDerivedFromClassName != null) {\n            try {\n                List<PersistenceProvider> providers = PersistenceProviderLoader.loadProviderModuleByName(providerNameDerivedFromClassName);\n                PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit, providers, null);\n                provider = getProviderByName(pu, providers);\n            } catch (ModuleLoadException e) {\n                throw JpaLogger.ROOT_LOGGER.cannotLoadPersistenceProviderModule(e, providerNameDerivedFromClassName, persistenceProviderClassName);\n            }\n        }\n\n        if (provider == null)\n            throw JpaLogger.ROOT_LOGGER.persistenceProviderNotFound(persistenceProviderClassName);\n\n        return provider;\n    }", "language": "java", "code": "private static PersistenceProvider lookupProvider(\n            PersistenceUnitMetadata pu,\n            PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder,\n            DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException {\n\n        /**\n         * check if the deployment is already associated with the specified persistence provider\n         */\n        Map<String, PersistenceProvider> providerMap = persistenceProviderDeploymentHolder != null ?\n                persistenceProviderDeploymentHolder.getProviders() : null;\n        if (providerMap != null) {\n            synchronized (providerMap) {\n                if(providerMap.containsKey(pu.getPersistenceProviderClassName())){\n                    ROOT_LOGGER.tracef(\"deployment %s is using %s\", deploymentUnit.getName(), pu.getPersistenceProviderClassName());\n                    return providerMap.get(pu.getPersistenceProviderClassName());\n                }\n            }\n        }\n\n        String configuredPersistenceProviderModule = pu.getProperties().getProperty(Configuration.PROVIDER_MODULE);\n        String persistenceProviderClassName = pu.getPersistenceProviderClassName();\n\n        if (persistenceProviderClassName == null) {\n            persistenceProviderClassName = Configuration.PROVIDER_CLASS_DEFAULT;\n        }\n\n        /**\n         * locate persistence provider in specified static module\n         */\n        if (configuredPersistenceProviderModule != null) {\n            List<PersistenceProvider> providers;\n            if (Configuration.PROVIDER_MODULE_APPLICATION_SUPPLIED.equals(configuredPersistenceProviderModule)) {\n                try {\n                    // load the persistence provider from the application deployment\n                    final ModuleClassLoader classLoader = deploymentUnit.getAttachment(Attachments.MODULE).getClassLoader();\n                    PersistenceProvider provider = PersistenceProviderLoader.loadProviderFromDeployment(classLoader, persistenceProviderClassName);\n                    providers = new ArrayList<>();\n                    providers.add(provider);\n                    PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit, providers, null);\n                    return provider;\n\n                } catch (ClassNotFoundException e) {\n                    throw JpaLogger.ROOT_LOGGER.cannotDeployApp(e, persistenceProviderClassName);\n                } catch (InstantiationException e) {\n                    throw JpaLogger.ROOT_LOGGER.cannotDeployApp(e, persistenceProviderClassName);\n                } catch (IllegalAccessException e) {\n                    throw JpaLogger.ROOT_LOGGER.cannotDeployApp(e, persistenceProviderClassName);\n                }\n            } else {\n                try {\n                    providers = PersistenceProviderLoader.loadProviderModuleByName(configuredPersistenceProviderModule);\n                    PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit, providers, null);\n                    PersistenceProvider provider = getProviderByName(pu, providers);\n                    if (provider != null) {\n                        return provider;\n                    }\n                } catch (ModuleLoadException e) {\n                    throw JpaLogger.ROOT_LOGGER.cannotLoadPersistenceProviderModule(e, configuredPersistenceProviderModule, persistenceProviderClassName);\n                }\n            }\n        }\n\n        // try to determine the static module name based on the persistence provider class name\n        String providerNameDerivedFromClassName = Configuration.getProviderModuleNameFromProviderClassName(persistenceProviderClassName);\n\n        // see if the providerNameDerivedFromClassName has been loaded yet\n        PersistenceProvider provider = getProviderByName(pu);\n\n        // if we haven't loaded the provider yet, try loading now\n        if (provider == null && providerNameDerivedFromClassName != null) {\n            try {\n                List<PersistenceProvider> providers = PersistenceProviderLoader.loadProviderModuleByName(providerNameDerivedFromClassName);\n                PersistenceProviderDeploymentHolder.savePersistenceProviderInDeploymentUnit(deploymentUnit, providers, null);\n                provider = getProviderByName(pu, providers);\n            } catch (ModuleLoadException e) {\n                throw JpaLogger.ROOT_LOGGER.cannotLoadPersistenceProviderModule(e, providerNameDerivedFromClassName, persistenceProviderClassName);\n            }\n        }\n\n        if (provider == null)\n            throw JpaLogger.ROOT_LOGGER.persistenceProviderNotFound(persistenceProviderClassName);\n\n        return provider;\n    }", "code_tokens": ["private", "static", "PersistenceProvider", "lookupProvider", "(", "PersistenceUnitMetadata", "pu", ",", "PersistenceProviderDeploymentHolder", "persistenceProviderDeploymentHolder", ",", "DeploymentUnit", "deploymentUnit", ")", "throws", "DeploymentUnitProcessingException", "{", "/**\n         * check if the deployment is already associated with the specified persistence provider\n         */", "Map", "<", "String", ",", "PersistenceProvider", ">", "providerMap", "=", "persistenceProviderDeploymentHolder", "!=", "null", "?", "persistenceProviderDeploymentHolder", ".", "getProviders", "(", ")", ":", "null", ";", "if", "(", "providerMap", "!=", "null", ")", "{", "synchronized", "(", "providerMap", ")", "{", "if", "(", "providerMap", ".", "containsKey", "(", "pu", ".", "getPersistenceProviderClassName", "(", ")", ")", ")", "{", "ROOT_LOGGER", ".", "tracef", "(", "\"deployment %s is using %s\"", ",", "deploymentUnit", ".", "getName", "(", ")", ",", "pu", ".", "getPersistenceProviderClassName", "(", ")", ")", ";", "return", "providerMap", ".", "get", "(", "pu", ".", "getPersistenceProviderClassName", "(", ")", ")", ";", "}", "}", "}", "String", "configuredPersistenceProviderModule", "=", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "Configuration", ".", "PROVIDER_MODULE", ")", ";", "String", "persistenceProviderClassName", "=", "pu", ".", "getPersistenceProviderClassName", "(", ")", ";", "if", "(", "persistenceProviderClassName", "==", "null", ")", "{", "persistenceProviderClassName", "=", "Configuration", ".", "PROVIDER_CLASS_DEFAULT", ";", "}", "/**\n         * locate persistence provider in specified static module\n         */", "if", "(", "configuredPersistenceProviderModule", "!=", "null", ")", "{", "List", "<", "PersistenceProvider", ">", "providers", ";", "if", "(", "Configuration", ".", "PROVIDER_MODULE_APPLICATION_SUPPLIED", ".", "equals", "(", "configuredPersistenceProviderModule", ")", ")", "{", "try", "{", "// load the persistence provider from the application deployment", "final", "ModuleClassLoader", "classLoader", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE", ")", ".", "getClassLoader", "(", ")", ";", "PersistenceProvider", "provider", "=", "PersistenceProviderLoader", ".", "loadProviderFromDeployment", "(", "classLoader", ",", "persistenceProviderClassName", ")", ";", "providers", "=", "new", "ArrayList", "<>", "(", ")", ";", "providers", ".", "add", "(", "provider", ")", ";", "PersistenceProviderDeploymentHolder", ".", "savePersistenceProviderInDeploymentUnit", "(", "deploymentUnit", ",", "providers", ",", "null", ")", ";", "return", "provider", ";", "}", "catch", "(", "ClassNotFoundException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "cannotDeployApp", "(", "e", ",", "persistenceProviderClassName", ")", ";", "}", "catch", "(", "InstantiationException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "cannotDeployApp", "(", "e", ",", "persistenceProviderClassName", ")", ";", "}", "catch", "(", "IllegalAccessException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "cannotDeployApp", "(", "e", ",", "persistenceProviderClassName", ")", ";", "}", "}", "else", "{", "try", "{", "providers", "=", "PersistenceProviderLoader", ".", "loadProviderModuleByName", "(", "configuredPersistenceProviderModule", ")", ";", "PersistenceProviderDeploymentHolder", ".", "savePersistenceProviderInDeploymentUnit", "(", "deploymentUnit", ",", "providers", ",", "null", ")", ";", "PersistenceProvider", "provider", "=", "getProviderByName", "(", "pu", ",", "providers", ")", ";", "if", "(", "provider", "!=", "null", ")", "{", "return", "provider", ";", "}", "}", "catch", "(", "ModuleLoadException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "cannotLoadPersistenceProviderModule", "(", "e", ",", "configuredPersistenceProviderModule", ",", "persistenceProviderClassName", ")", ";", "}", "}", "}", "// try to determine the static module name based on the persistence provider class name", "String", "providerNameDerivedFromClassName", "=", "Configuration", ".", "getProviderModuleNameFromProviderClassName", "(", "persistenceProviderClassName", ")", ";", "// see if the providerNameDerivedFromClassName has been loaded yet", "PersistenceProvider", "provider", "=", "getProviderByName", "(", "pu", ")", ";", "// if we haven't loaded the provider yet, try loading now", "if", "(", "provider", "==", "null", "&&", "providerNameDerivedFromClassName", "!=", "null", ")", "{", "try", "{", "List", "<", "PersistenceProvider", ">", "providers", "=", "PersistenceProviderLoader", ".", "loadProviderModuleByName", "(", "providerNameDerivedFromClassName", ")", ";", "PersistenceProviderDeploymentHolder", ".", "savePersistenceProviderInDeploymentUnit", "(", "deploymentUnit", ",", "providers", ",", "null", ")", ";", "provider", "=", "getProviderByName", "(", "pu", ",", "providers", ")", ";", "}", "catch", "(", "ModuleLoadException", "e", ")", "{", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "cannotLoadPersistenceProviderModule", "(", "e", ",", "providerNameDerivedFromClassName", ",", "persistenceProviderClassName", ")", ";", "}", "}", "if", "(", "provider", "==", "null", ")", "throw", "JpaLogger", ".", "ROOT_LOGGER", ".", "persistenceProviderNotFound", "(", "persistenceProviderClassName", ")", ";", "return", "provider", ";", "}"], "docstring": "Look up the persistence provider\n\n\n@param pu\n@param deploymentUnit\n@return", "docstring_tokens": ["Look", "up", "the", "persistence", "provider"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java#L919-L1002", "partition": "test", "index": 2737, "time": "2011-07-12 12:53:44"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java", "func_name": "EndpointPublisherImpl.stopWebApp", "original_string": "protected void stopWebApp(Deployment deployment) throws Exception {\n        WebDeploymentController context;\n        try {\n            context = deployment.getAttachment(WebDeploymentController.class);\n            context.stop();\n        } catch (Exception e) {\n            throw WSLogger.ROOT_LOGGER.stopContextPhaseFailed(e);\n        }\n        try {\n            context.destroy();\n        } catch (Exception e) {\n            throw WSLogger.ROOT_LOGGER.destroyContextPhaseFailed(e);\n        }\n    }", "language": "java", "code": "protected void stopWebApp(Deployment deployment) throws Exception {\n        WebDeploymentController context;\n        try {\n            context = deployment.getAttachment(WebDeploymentController.class);\n            context.stop();\n        } catch (Exception e) {\n            throw WSLogger.ROOT_LOGGER.stopContextPhaseFailed(e);\n        }\n        try {\n            context.destroy();\n        } catch (Exception e) {\n            throw WSLogger.ROOT_LOGGER.destroyContextPhaseFailed(e);\n        }\n    }", "code_tokens": ["protected", "void", "stopWebApp", "(", "Deployment", "deployment", ")", "throws", "Exception", "{", "WebDeploymentController", "context", ";", "try", "{", "context", "=", "deployment", ".", "getAttachment", "(", "WebDeploymentController", ".", "class", ")", ";", "context", ".", "stop", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "stopContextPhaseFailed", "(", "e", ")", ";", "}", "try", "{", "context", ".", "destroy", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "destroyContextPhaseFailed", "(", "e", ")", ";", "}", "}"], "docstring": "Stops the webapp serving the provided ws deployment\n\n@param deployment\n@throws Exception", "docstring_tokens": ["Stops", "the", "webapp", "serving", "the", "provided", "ws", "deployment"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java#L300-L313", "partition": "test", "index": 2895, "time": "2011-07-14 15:51:34"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java", "func_name": "EndpointPublisherImpl.doPublish", "original_string": "protected Context doPublish(ServiceTarget target, DeploymentUnit unit) throws Exception {\n        Deployment deployment = unit.getAttachment(WSAttachmentKeys.DEPLOYMENT_KEY);\n        List<Endpoint> endpoints = deployment.getService().getEndpoints();\n        //If we're running in a Service, that will already have proper dependencies set on the installed endpoint services,\n        //otherwise we need to explicitly wait for the endpoint services to be started before creating the webapp.\n        if (!runningInService) {\n            final ServiceRegistry registry = unit.getServiceRegistry();\n            final StabilityMonitor monitor = new StabilityMonitor();\n            for (Endpoint ep : endpoints) {\n                final ServiceName serviceName = EndpointService.getServiceName(unit, ep.getShortName());\n                monitor.addController(registry.getRequiredService(serviceName));\n            }\n            try {\n                monitor.awaitStability();\n            } finally {\n                monitor.clear();\n            }\n        }\n        deployment.addAttachment(WebDeploymentController.class, startWebApp(host, unit)); //TODO simplify and use findChild later in destroy()/stopWebApp()\n        return new Context(unit.getAttachment(WSAttachmentKeys.JBOSSWEB_METADATA_KEY).getContextRoot(), endpoints);\n    }", "language": "java", "code": "protected Context doPublish(ServiceTarget target, DeploymentUnit unit) throws Exception {\n        Deployment deployment = unit.getAttachment(WSAttachmentKeys.DEPLOYMENT_KEY);\n        List<Endpoint> endpoints = deployment.getService().getEndpoints();\n        //If we're running in a Service, that will already have proper dependencies set on the installed endpoint services,\n        //otherwise we need to explicitly wait for the endpoint services to be started before creating the webapp.\n        if (!runningInService) {\n            final ServiceRegistry registry = unit.getServiceRegistry();\n            final StabilityMonitor monitor = new StabilityMonitor();\n            for (Endpoint ep : endpoints) {\n                final ServiceName serviceName = EndpointService.getServiceName(unit, ep.getShortName());\n                monitor.addController(registry.getRequiredService(serviceName));\n            }\n            try {\n                monitor.awaitStability();\n            } finally {\n                monitor.clear();\n            }\n        }\n        deployment.addAttachment(WebDeploymentController.class, startWebApp(host, unit)); //TODO simplify and use findChild later in destroy()/stopWebApp()\n        return new Context(unit.getAttachment(WSAttachmentKeys.JBOSSWEB_METADATA_KEY).getContextRoot(), endpoints);\n    }", "code_tokens": ["protected", "Context", "doPublish", "(", "ServiceTarget", "target", ",", "DeploymentUnit", "unit", ")", "throws", "Exception", "{", "Deployment", "deployment", "=", "unit", ".", "getAttachment", "(", "WSAttachmentKeys", ".", "DEPLOYMENT_KEY", ")", ";", "List", "<", "Endpoint", ">", "endpoints", "=", "deployment", ".", "getService", "(", ")", ".", "getEndpoints", "(", ")", ";", "//If we're running in a Service, that will already have proper dependencies set on the installed endpoint services,", "//otherwise we need to explicitly wait for the endpoint services to be started before creating the webapp.", "if", "(", "!", "runningInService", ")", "{", "final", "ServiceRegistry", "registry", "=", "unit", ".", "getServiceRegistry", "(", ")", ";", "final", "StabilityMonitor", "monitor", "=", "new", "StabilityMonitor", "(", ")", ";", "for", "(", "Endpoint", "ep", ":", "endpoints", ")", "{", "final", "ServiceName", "serviceName", "=", "EndpointService", ".", "getServiceName", "(", "unit", ",", "ep", ".", "getShortName", "(", ")", ")", ";", "monitor", ".", "addController", "(", "registry", ".", "getRequiredService", "(", "serviceName", ")", ")", ";", "}", "try", "{", "monitor", ".", "awaitStability", "(", ")", ";", "}", "finally", "{", "monitor", ".", "clear", "(", ")", ";", "}", "}", "deployment", ".", "addAttachment", "(", "WebDeploymentController", ".", "class", ",", "startWebApp", "(", "host", ",", "unit", ")", ")", ";", "//TODO simplify and use findChild later in destroy()/stopWebApp()", "return", "new", "Context", "(", "unit", ".", "getAttachment", "(", "WSAttachmentKeys", ".", "JBOSSWEB_METADATA_KEY", ")", ".", "getContextRoot", "(", ")", ",", "endpoints", ")", ";", "}"], "docstring": "Publish the webapp for the WS deployment unit\n\n@param target\n@param unit\n@return\n@throws Exception", "docstring_tokens": ["Publish", "the", "webapp", "for", "the", "WS", "deployment", "unit"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java#L177-L197", "partition": "test", "index": 2894, "time": "2011-07-14 15:51:34"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java", "func_name": "EndpointPublisherImpl.doDeploy", "original_string": "protected void doDeploy(ServiceTarget target, DeploymentUnit unit) {\n        List<DeploymentAspect> aspects = getDeploymentAspects();\n        ClassLoader origClassLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        Deployment dep = null;\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(ClassLoaderProvider.getDefaultProvider().getServerIntegrationClassLoader());\n            dep = unit.getAttachment(WSAttachmentKeys.DEPLOYMENT_KEY);\n            dep.addAttachment(ServiceTarget.class, target);\n            DeploymentAspectManager dam = new DeploymentAspectManagerImpl();\n            dam.setDeploymentAspects(aspects);\n            dam.deploy(dep);\n        } finally {\n            if (dep != null) {\n                dep.removeAttachment(ServiceTarget.class);\n            }\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(origClassLoader);\n        }\n    }", "language": "java", "code": "protected void doDeploy(ServiceTarget target, DeploymentUnit unit) {\n        List<DeploymentAspect> aspects = getDeploymentAspects();\n        ClassLoader origClassLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        Deployment dep = null;\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(ClassLoaderProvider.getDefaultProvider().getServerIntegrationClassLoader());\n            dep = unit.getAttachment(WSAttachmentKeys.DEPLOYMENT_KEY);\n            dep.addAttachment(ServiceTarget.class, target);\n            DeploymentAspectManager dam = new DeploymentAspectManagerImpl();\n            dam.setDeploymentAspects(aspects);\n            dam.deploy(dep);\n        } finally {\n            if (dep != null) {\n                dep.removeAttachment(ServiceTarget.class);\n            }\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(origClassLoader);\n        }\n    }", "code_tokens": ["protected", "void", "doDeploy", "(", "ServiceTarget", "target", ",", "DeploymentUnit", "unit", ")", "{", "List", "<", "DeploymentAspect", ">", "aspects", "=", "getDeploymentAspects", "(", ")", ";", "ClassLoader", "origClassLoader", "=", "WildFlySecurityManager", ".", "getCurrentContextClassLoaderPrivileged", "(", ")", ";", "Deployment", "dep", "=", "null", ";", "try", "{", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "ClassLoaderProvider", ".", "getDefaultProvider", "(", ")", ".", "getServerIntegrationClassLoader", "(", ")", ")", ";", "dep", "=", "unit", ".", "getAttachment", "(", "WSAttachmentKeys", ".", "DEPLOYMENT_KEY", ")", ";", "dep", ".", "addAttachment", "(", "ServiceTarget", ".", "class", ",", "target", ")", ";", "DeploymentAspectManager", "dam", "=", "new", "DeploymentAspectManagerImpl", "(", ")", ";", "dam", ".", "setDeploymentAspects", "(", "aspects", ")", ";", "dam", ".", "deploy", "(", "dep", ")", ";", "}", "finally", "{", "if", "(", "dep", "!=", "null", ")", "{", "dep", ".", "removeAttachment", "(", "ServiceTarget", ".", "class", ")", ";", "}", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "origClassLoader", ")", ";", "}", "}"], "docstring": "Triggers the WS deployment aspects, which process the deployment and\ninstall the endpoint services.\n\n@param target\n@param unit", "docstring_tokens": ["Triggers", "the", "WS", "deployment", "aspects", "which", "process", "the", "deployment", "and", "install", "the", "endpoint", "services", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java#L150-L167", "partition": "test", "index": 2893, "time": "2011-07-14 15:51:34"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.addTimeoutViewInterceptor", "original_string": "public void addTimeoutViewInterceptor(final Method method, InterceptorFactory factory, int priority) {\n        OrderedItemContainer<InterceptorFactory> interceptors = timeoutInterceptors.get(method);\n        if (interceptors == null) {\n            timeoutInterceptors.put(method, interceptors = new OrderedItemContainer<InterceptorFactory>());\n        }\n        interceptors.add(factory, priority);\n    }", "language": "java", "code": "public void addTimeoutViewInterceptor(final Method method, InterceptorFactory factory, int priority) {\n        OrderedItemContainer<InterceptorFactory> interceptors = timeoutInterceptors.get(method);\n        if (interceptors == null) {\n            timeoutInterceptors.put(method, interceptors = new OrderedItemContainer<InterceptorFactory>());\n        }\n        interceptors.add(factory, priority);\n    }", "code_tokens": ["public", "void", "addTimeoutViewInterceptor", "(", "final", "Method", "method", ",", "InterceptorFactory", "factory", ",", "int", "priority", ")", "{", "OrderedItemContainer", "<", "InterceptorFactory", ">", "interceptors", "=", "timeoutInterceptors", ".", "get", "(", "method", ")", ";", "if", "(", "interceptors", "==", "null", ")", "{", "timeoutInterceptors", ".", "put", "(", "method", ",", "interceptors", "=", "new", "OrderedItemContainer", "<", "InterceptorFactory", ">", "(", ")", ")", ";", "}", "interceptors", ".", "add", "(", "factory", ",", "priority", ")", ";", "}"], "docstring": "Adds a timeout interceptor factory to every method on the component.\n\n@param method   The method to add it to\n@param factory  The interceptor factory to add\n@param priority The interceptors relative order", "docstring_tokens": ["Adds", "a", "timeout", "interceptor", "factory", "to", "every", "method", "on", "the", "component", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L260-L266", "partition": "test", "index": 2812, "time": "2011-07-25 13:59:48"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.getAroundTimeoutInterceptors", "original_string": "public List<InterceptorFactory> getAroundTimeoutInterceptors(Method method) {\n        Map<Method, OrderedItemContainer<InterceptorFactory>> map = timeoutInterceptors;\n        OrderedItemContainer<InterceptorFactory> interceptors = map.get(method);\n        if (interceptors == null) {\n            return Collections.emptyList();\n        }\n        return interceptors.getSortedItems();\n    }", "language": "java", "code": "public List<InterceptorFactory> getAroundTimeoutInterceptors(Method method) {\n        Map<Method, OrderedItemContainer<InterceptorFactory>> map = timeoutInterceptors;\n        OrderedItemContainer<InterceptorFactory> interceptors = map.get(method);\n        if (interceptors == null) {\n            return Collections.emptyList();\n        }\n        return interceptors.getSortedItems();\n    }", "code_tokens": ["public", "List", "<", "InterceptorFactory", ">", "getAroundTimeoutInterceptors", "(", "Method", "method", ")", "{", "Map", "<", "Method", ",", "OrderedItemContainer", "<", "InterceptorFactory", ">", ">", "map", "=", "timeoutInterceptors", ";", "OrderedItemContainer", "<", "InterceptorFactory", ">", "interceptors", "=", "map", ".", "get", "(", "method", ")", ";", "if", "(", "interceptors", "==", "null", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "return", "interceptors", ".", "getSortedItems", "(", ")", ";", "}"], "docstring": "Gets the around timeout interceptor list for a given method. This should not be called until\nall interceptors have been added.\n\n@param method the component method\n@return the deque", "docstring_tokens": ["Gets", "the", "around", "timeout", "interceptor", "list", "for", "a", "given", "method", ".", "This", "should", "not", "be", "called", "until", "all", "interceptors", "have", "been", "added", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L169-L176", "partition": "test", "index": 2811, "time": "2011-07-25 13:59:48"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/descriptor/AbstractConfigVisitorNode.java", "func_name": "AbstractConfigVisitorNode.getType", "original_string": "protected static Class<?> getType(ConfigVisitor visitor, String className) {\n        if (className != null) {\n            try {\n                return visitor.getModule().getClassLoader().loadClass(className);\n            } catch (Exception e) {\n                throw new IllegalArgumentException(e);\n            }\n        }\n        return null;\n    }", "language": "java", "code": "protected static Class<?> getType(ConfigVisitor visitor, String className) {\n        if (className != null) {\n            try {\n                return visitor.getModule().getClassLoader().loadClass(className);\n            } catch (Exception e) {\n                throw new IllegalArgumentException(e);\n            }\n        }\n        return null;\n    }", "code_tokens": ["protected", "static", "Class", "<", "?", ">", "getType", "(", "ConfigVisitor", "visitor", ",", "String", "className", ")", "{", "if", "(", "className", "!=", "null", ")", "{", "try", "{", "return", "visitor", ".", "getModule", "(", ")", ".", "getClassLoader", "(", ")", ".", "loadClass", "(", "className", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "IllegalArgumentException", "(", "e", ")", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Load class.\n\n@param visitor   the visitor\n@param className the class name\n@return class or null if null class name", "docstring_tokens": ["Load", "class", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/descriptor/AbstractConfigVisitorNode.java#L101-L110", "partition": "test", "index": 2697, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/descriptor/AbstractConfigVisitorNode.java", "func_name": "AbstractConfigVisitorNode.getComponentType", "original_string": "static Type getComponentType(ParameterizedType type, int index) {\n        Type[] tp = type.getActualTypeArguments();\n        if (index + 1 > tp.length)\n            return null;\n\n        return tp[index];\n    }", "language": "java", "code": "static Type getComponentType(ParameterizedType type, int index) {\n        Type[] tp = type.getActualTypeArguments();\n        if (index + 1 > tp.length)\n            return null;\n\n        return tp[index];\n    }", "code_tokens": ["static", "Type", "getComponentType", "(", "ParameterizedType", "type", ",", "int", "index", ")", "{", "Type", "[", "]", "tp", "=", "type", ".", "getActualTypeArguments", "(", ")", ";", "if", "(", "index", "+", "1", ">", "tp", ".", "length", ")", "return", "null", ";", "return", "tp", "[", "index", "]", ";", "}"], "docstring": "Get component type.\n\n@param type the type\n@param index the component index\n@return component's class or null if cannot be determined", "docstring_tokens": ["Get", "component", "type", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/descriptor/AbstractConfigVisitorNode.java#L119-L125", "partition": "test", "index": 2698, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/service/DefaultBeanInfo.java", "func_name": "DefaultBeanInfo.lookup", "original_string": "protected <U> U lookup(Lookup<U> lookup, int start, int depth) {\n        int size;\n        synchronized (indexes) {\n            size = indexes.size();\n            for (int i = start; i < depth && i < size; i++) {\n                U result = lookup.lookup(indexes.get(i));\n                if (result != null)\n                    return result;\n            }\n        }\n\n        if (currentClass == null)\n            return null;\n\n        synchronized (indexes) {\n            ClassReflectionIndex cri = index.getClassIndex(currentClass);\n            indexes.add(cri);\n            currentClass = currentClass.getSuperclass();\n        }\n        return lookup(lookup, size, depth);\n    }", "language": "java", "code": "protected <U> U lookup(Lookup<U> lookup, int start, int depth) {\n        int size;\n        synchronized (indexes) {\n            size = indexes.size();\n            for (int i = start; i < depth && i < size; i++) {\n                U result = lookup.lookup(indexes.get(i));\n                if (result != null)\n                    return result;\n            }\n        }\n\n        if (currentClass == null)\n            return null;\n\n        synchronized (indexes) {\n            ClassReflectionIndex cri = index.getClassIndex(currentClass);\n            indexes.add(cri);\n            currentClass = currentClass.getSuperclass();\n        }\n        return lookup(lookup, size, depth);\n    }", "code_tokens": ["protected", "<", "U", ">", "U", "lookup", "(", "Lookup", "<", "U", ">", "lookup", ",", "int", "start", ",", "int", "depth", ")", "{", "int", "size", ";", "synchronized", "(", "indexes", ")", "{", "size", "=", "indexes", ".", "size", "(", ")", ";", "for", "(", "int", "i", "=", "start", ";", "i", "<", "depth", "&&", "i", "<", "size", ";", "i", "++", ")", "{", "U", "result", "=", "lookup", ".", "lookup", "(", "indexes", ".", "get", "(", "i", ")", ")", ";", "if", "(", "result", "!=", "null", ")", "return", "result", ";", "}", "}", "if", "(", "currentClass", "==", "null", ")", "return", "null", ";", "synchronized", "(", "indexes", ")", "{", "ClassReflectionIndex", "cri", "=", "index", ".", "getClassIndex", "(", "currentClass", ")", ";", "indexes", ".", "add", "(", "cri", ")", ";", "currentClass", "=", "currentClass", ".", "getSuperclass", "(", ")", ";", "}", "return", "lookup", "(", "lookup", ",", "size", ",", "depth", ")", ";", "}"], "docstring": "Do lazy lookup.\n\n@param lookup the lookup\n@param start the start\n@param depth the depth\n@return reflection index result", "docstring_tokens": ["Do", "lazy", "lookup", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/service/DefaultBeanInfo.java#L63-L83", "partition": "test", "index": 2619, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/descriptor/BeanMetaDataConfig.java", "func_name": "BeanMetaDataConfig.toBeanName", "original_string": "public static ServiceName toBeanName(String name, BeanState state) {\n        if (state == null)\n            state = BeanState.INSTALLED;\n\n        return JBOSS_POJO.append(name).append(state.name());\n    }", "language": "java", "code": "public static ServiceName toBeanName(String name, BeanState state) {\n        if (state == null)\n            state = BeanState.INSTALLED;\n\n        return JBOSS_POJO.append(name).append(state.name());\n    }", "code_tokens": ["public", "static", "ServiceName", "toBeanName", "(", "String", "name", ",", "BeanState", "state", ")", "{", "if", "(", "state", "==", "null", ")", "state", "=", "BeanState", ".", "INSTALLED", ";", "return", "JBOSS_POJO", ".", "append", "(", "name", ")", ".", "append", "(", "state", ".", "name", "(", ")", ")", ";", "}"], "docstring": "Get MC bean name.\n\n@param name the original bean name\n@param state the state\n@return bean service name", "docstring_tokens": ["Get", "MC", "bean", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/descriptor/BeanMetaDataConfig.java#L50-L55", "partition": "test", "index": 2715, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/descriptor/BeanMetaDataConfig.java", "func_name": "BeanMetaDataConfig.toInstancesName", "original_string": "public static ServiceName toInstancesName(Class<?> clazz, BeanState state) {\n        String clName;\n        ClassLoader classLoader = clazz.getClassLoader();\n        if (classLoader != null)\n            clName = classLoader.toString();\n        else\n            clName = \"SystemClassLoader\";\n\n        if (state == null)\n            state = BeanState.INSTALLED;\n\n        return JBOSS_POJO.append(clName, clazz.getName(), state.name());\n    }", "language": "java", "code": "public static ServiceName toInstancesName(Class<?> clazz, BeanState state) {\n        String clName;\n        ClassLoader classLoader = clazz.getClassLoader();\n        if (classLoader != null)\n            clName = classLoader.toString();\n        else\n            clName = \"SystemClassLoader\";\n\n        if (state == null)\n            state = BeanState.INSTALLED;\n\n        return JBOSS_POJO.append(clName, clazz.getName(), state.name());\n    }", "code_tokens": ["public", "static", "ServiceName", "toInstancesName", "(", "Class", "<", "?", ">", "clazz", ",", "BeanState", "state", ")", "{", "String", "clName", ";", "ClassLoader", "classLoader", "=", "clazz", ".", "getClassLoader", "(", ")", ";", "if", "(", "classLoader", "!=", "null", ")", "clName", "=", "classLoader", ".", "toString", "(", ")", ";", "else", "clName", "=", "\"SystemClassLoader\"", ";", "if", "(", "state", "==", "null", ")", "state", "=", "BeanState", ".", "INSTALLED", ";", "return", "JBOSS_POJO", ".", "append", "(", "clName", ",", "clazz", ".", "getName", "(", ")", ",", "state", ".", "name", "(", ")", ")", ";", "}"], "docstring": "To instances name.\n\n@param clazz the class\n@param state the bean state\n@return unique instance name", "docstring_tokens": ["To", "instances", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/descriptor/BeanMetaDataConfig.java#L64-L76", "partition": "test", "index": 2716, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/descriptor/ValueConfig.java", "func_name": "ValueConfig.getValue", "original_string": "public Object getValue(Type type) {\n        if (type == null || (type instanceof Class)) {\n            return getClassValue((Class) type);\n        } else if (type instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) type;\n            return getPtValue(pt);\n        } else {\n            throw PojoLogger.ROOT_LOGGER.unknownType(type);\n        }\n    }", "language": "java", "code": "public Object getValue(Type type) {\n        if (type == null || (type instanceof Class)) {\n            return getClassValue((Class) type);\n        } else if (type instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) type;\n            return getPtValue(pt);\n        } else {\n            throw PojoLogger.ROOT_LOGGER.unknownType(type);\n        }\n    }", "code_tokens": ["public", "Object", "getValue", "(", "Type", "type", ")", "{", "if", "(", "type", "==", "null", "||", "(", "type", "instanceof", "Class", ")", ")", "{", "return", "getClassValue", "(", "(", "Class", ")", "type", ")", ";", "}", "else", "if", "(", "type", "instanceof", "ParameterizedType", ")", "{", "ParameterizedType", "pt", "=", "(", "ParameterizedType", ")", "type", ";", "return", "getPtValue", "(", "pt", ")", ";", "}", "else", "{", "throw", "PojoLogger", ".", "ROOT_LOGGER", ".", "unknownType", "(", "type", ")", ";", "}", "}"], "docstring": "Get value.\n\n@param type the type\n@return value", "docstring_tokens": ["Get", "value", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/descriptor/ValueConfig.java#L48-L57", "partition": "test", "index": 2805, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/service/Configurator.java", "func_name": "Configurator.simpleCheck", "original_string": "protected static boolean simpleCheck(String[] typeNames, Class<?>[] typeInfos) {\n        return typeNames != null && typeInfos != null && typeNames.length == typeInfos.length;\n    }", "language": "java", "code": "protected static boolean simpleCheck(String[] typeNames, Class<?>[] typeInfos) {\n        return typeNames != null && typeInfos != null && typeNames.length == typeInfos.length;\n    }", "code_tokens": ["protected", "static", "boolean", "simpleCheck", "(", "String", "[", "]", "typeNames", ",", "Class", "<", "?", ">", "[", "]", "typeInfos", ")", "{", "return", "typeNames", "!=", "null", "&&", "typeInfos", "!=", "null", "&&", "typeNames", ".", "length", "==", "typeInfos", ".", "length", ";", "}"], "docstring": "A simple null and length check.\n\n@param typeNames the type names\n@param typeInfos the type infos\n@return false if either argument is null or lengths differ, else true", "docstring_tokens": ["A", "simple", "null", "and", "length", "check", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/service/Configurator.java#L239-L241", "partition": "test", "index": 2868, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/service/Configurator.java", "func_name": "Configurator.toClass", "original_string": "public static Class<?> toClass(Type type) {\n        if (type instanceof Class) {\n            return (Class) type;\n        } else if (type instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) type;\n            return toClass(pt.getRawType());\n        } else {\n            throw PojoLogger.ROOT_LOGGER.unknownType(type);\n        }\n    }", "language": "java", "code": "public static Class<?> toClass(Type type) {\n        if (type instanceof Class) {\n            return (Class) type;\n        } else if (type instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) type;\n            return toClass(pt.getRawType());\n        } else {\n            throw PojoLogger.ROOT_LOGGER.unknownType(type);\n        }\n    }", "code_tokens": ["public", "static", "Class", "<", "?", ">", "toClass", "(", "Type", "type", ")", "{", "if", "(", "type", "instanceof", "Class", ")", "{", "return", "(", "Class", ")", "type", ";", "}", "else", "if", "(", "type", "instanceof", "ParameterizedType", ")", "{", "ParameterizedType", "pt", "=", "(", "ParameterizedType", ")", "type", ";", "return", "toClass", "(", "pt", ".", "getRawType", "(", ")", ")", ";", "}", "else", "{", "throw", "PojoLogger", ".", "ROOT_LOGGER", ".", "unknownType", "(", "type", ")", ";", "}", "}"], "docstring": "Turn type into class.\n\n@param type the type\n@return class", "docstring_tokens": ["Turn", "type", "into", "class", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/service/Configurator.java#L59-L68", "partition": "test", "index": 2865, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/service/Configurator.java", "func_name": "Configurator.convertValue", "original_string": "@SuppressWarnings(\"unchecked\")\n    public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable {\n        if (clazz == null)\n            return value;\n        if (value == null)\n            return null;\n\n        Class<?> valueClass = value.getClass();\n\n        // If we have a string, trim and replace any system properties when requested\n        if (valueClass == String.class) {\n            String string = (String) value;\n            if (trim)\n                string = string.trim();\n            if (replaceProperties)\n                value = PropertiesValueResolver.replaceProperties(string);\n        }\n\n        if (clazz.isAssignableFrom(valueClass))\n            return value;\n\n        // First see if this is an Enum\n        if (clazz.isEnum()) {\n            Class<? extends Enum> eclazz = clazz.asSubclass(Enum.class);\n            return Enum.valueOf(eclazz, value.toString());\n        }\n\n        // Next look for a property editor\n        if (valueClass == String.class) {\n            PropertyEditor editor = PropertyEditorManager.findEditor(clazz);\n            if (editor != null) {\n                editor.setAsText((String) value);\n                return editor.getValue();\n            }\n        }\n\n        // Try a static clazz.valueOf(value)\n        try {\n            Method method = clazz.getMethod(\"valueOf\", valueClass);\n            int modifiers = method.getModifiers();\n            if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers)\n                    && clazz.isAssignableFrom(method.getReturnType()))\n                return method.invoke(null, value);\n        } catch (Exception ignored) {\n        }\n\n        if (valueClass == String.class) {\n            try {\n                Constructor constructor = clazz.getConstructor(valueClass);\n                if (Modifier.isPublic(constructor.getModifiers()))\n                    return constructor.newInstance(value);\n            } catch (Exception ignored) {\n            }\n        }\n\n        return value;\n    }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n    public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable {\n        if (clazz == null)\n            return value;\n        if (value == null)\n            return null;\n\n        Class<?> valueClass = value.getClass();\n\n        // If we have a string, trim and replace any system properties when requested\n        if (valueClass == String.class) {\n            String string = (String) value;\n            if (trim)\n                string = string.trim();\n            if (replaceProperties)\n                value = PropertiesValueResolver.replaceProperties(string);\n        }\n\n        if (clazz.isAssignableFrom(valueClass))\n            return value;\n\n        // First see if this is an Enum\n        if (clazz.isEnum()) {\n            Class<? extends Enum> eclazz = clazz.asSubclass(Enum.class);\n            return Enum.valueOf(eclazz, value.toString());\n        }\n\n        // Next look for a property editor\n        if (valueClass == String.class) {\n            PropertyEditor editor = PropertyEditorManager.findEditor(clazz);\n            if (editor != null) {\n                editor.setAsText((String) value);\n                return editor.getValue();\n            }\n        }\n\n        // Try a static clazz.valueOf(value)\n        try {\n            Method method = clazz.getMethod(\"valueOf\", valueClass);\n            int modifiers = method.getModifiers();\n            if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers)\n                    && clazz.isAssignableFrom(method.getReturnType()))\n                return method.invoke(null, value);\n        } catch (Exception ignored) {\n        }\n\n        if (valueClass == String.class) {\n            try {\n                Constructor constructor = clazz.getConstructor(valueClass);\n                if (Modifier.isPublic(constructor.getModifiers()))\n                    return constructor.newInstance(value);\n            } catch (Exception ignored) {\n            }\n        }\n\n        return value;\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "static", "Object", "convertValue", "(", "Class", "<", "?", ">", "clazz", ",", "Object", "value", ",", "boolean", "replaceProperties", ",", "boolean", "trim", ")", "throws", "Throwable", "{", "if", "(", "clazz", "==", "null", ")", "return", "value", ";", "if", "(", "value", "==", "null", ")", "return", "null", ";", "Class", "<", "?", ">", "valueClass", "=", "value", ".", "getClass", "(", ")", ";", "// If we have a string, trim and replace any system properties when requested", "if", "(", "valueClass", "==", "String", ".", "class", ")", "{", "String", "string", "=", "(", "String", ")", "value", ";", "if", "(", "trim", ")", "string", "=", "string", ".", "trim", "(", ")", ";", "if", "(", "replaceProperties", ")", "value", "=", "PropertiesValueResolver", ".", "replaceProperties", "(", "string", ")", ";", "}", "if", "(", "clazz", ".", "isAssignableFrom", "(", "valueClass", ")", ")", "return", "value", ";", "// First see if this is an Enum", "if", "(", "clazz", ".", "isEnum", "(", ")", ")", "{", "Class", "<", "?", "extends", "Enum", ">", "eclazz", "=", "clazz", ".", "asSubclass", "(", "Enum", ".", "class", ")", ";", "return", "Enum", ".", "valueOf", "(", "eclazz", ",", "value", ".", "toString", "(", ")", ")", ";", "}", "// Next look for a property editor", "if", "(", "valueClass", "==", "String", ".", "class", ")", "{", "PropertyEditor", "editor", "=", "PropertyEditorManager", ".", "findEditor", "(", "clazz", ")", ";", "if", "(", "editor", "!=", "null", ")", "{", "editor", ".", "setAsText", "(", "(", "String", ")", "value", ")", ";", "return", "editor", ".", "getValue", "(", ")", ";", "}", "}", "// Try a static clazz.valueOf(value)", "try", "{", "Method", "method", "=", "clazz", ".", "getMethod", "(", "\"valueOf\"", ",", "valueClass", ")", ";", "int", "modifiers", "=", "method", ".", "getModifiers", "(", ")", ";", "if", "(", "Modifier", ".", "isPublic", "(", "modifiers", ")", "&&", "Modifier", ".", "isStatic", "(", "modifiers", ")", "&&", "clazz", ".", "isAssignableFrom", "(", "method", ".", "getReturnType", "(", ")", ")", ")", "return", "method", ".", "invoke", "(", "null", ",", "value", ")", ";", "}", "catch", "(", "Exception", "ignored", ")", "{", "}", "if", "(", "valueClass", "==", "String", ".", "class", ")", "{", "try", "{", "Constructor", "constructor", "=", "clazz", ".", "getConstructor", "(", "valueClass", ")", ";", "if", "(", "Modifier", ".", "isPublic", "(", "constructor", ".", "getModifiers", "(", ")", ")", ")", "return", "constructor", ".", "newInstance", "(", "value", ")", ";", "}", "catch", "(", "Exception", "ignored", ")", "{", "}", "}", "return", "value", ";", "}"], "docstring": "Convert a value\n\n@param clazz             the class\n@param value             the value\n@param replaceProperties whether to replace system properties\n@param trim              whether to trim string value\n@return the value or null if there is no editor\n@throws Throwable for any error", "docstring_tokens": ["Convert", "a", "value"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/service/Configurator.java#L80-L136", "partition": "test", "index": 2866, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/service/Configurator.java", "func_name": "Configurator.getTypes", "original_string": "public static String[] getTypes(ValueConfig[] values) {\n        if (values == null || values.length == 0)\n            return NO_PARAMS_TYPES;\n\n        String[] types = new String[values.length];\n        for (int i =0; i < types.length; i++)\n            types[i] = values[i].getType();\n        return types;\n    }", "language": "java", "code": "public static String[] getTypes(ValueConfig[] values) {\n        if (values == null || values.length == 0)\n            return NO_PARAMS_TYPES;\n\n        String[] types = new String[values.length];\n        for (int i =0; i < types.length; i++)\n            types[i] = values[i].getType();\n        return types;\n    }", "code_tokens": ["public", "static", "String", "[", "]", "getTypes", "(", "ValueConfig", "[", "]", "values", ")", "{", "if", "(", "values", "==", "null", "||", "values", ".", "length", "==", "0", ")", "return", "NO_PARAMS_TYPES", ";", "String", "[", "]", "types", "=", "new", "String", "[", "values", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "types", ".", "length", ";", "i", "++", ")", "types", "[", "i", "]", "=", "values", "[", "i", "]", ".", "getType", "(", ")", ";", "return", "types", ";", "}"], "docstring": "Get types from values.\n\n@param values the values\n@return the values' types", "docstring_tokens": ["Get", "types", "from", "values", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/service/Configurator.java#L144-L152", "partition": "test", "index": 2867, "time": "2011-07-25 23:52:07"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/SessionBeanComponentDescriptionFactory.java", "func_name": "SessionBeanComponentDescriptionFactory.processAnnotations", "original_string": "@Override\n    protected void processAnnotations(final DeploymentUnit deploymentUnit, final CompositeIndex compositeIndex) throws DeploymentUnitProcessingException {\n\n        if (MetadataCompleteMarker.isMetadataComplete(deploymentUnit)) {\n            return;\n        }\n\n        // Find and process any @Stateless bean annotations\n        final List<AnnotationInstance> slsbAnnotations = compositeIndex.getAnnotations(STATELESS_ANNOTATION);\n        if (!slsbAnnotations.isEmpty()) {\n            processSessionBeans(deploymentUnit, slsbAnnotations, SessionBeanComponentDescription.SessionBeanType.STATELESS);\n        }\n\n        // Find and process any @Stateful bean annotations\n        final List<AnnotationInstance> sfsbAnnotations = compositeIndex.getAnnotations(STATEFUL_ANNOTATION);\n        if (!sfsbAnnotations.isEmpty()) {\n            processSessionBeans(deploymentUnit, sfsbAnnotations, SessionBeanComponentDescription.SessionBeanType.STATEFUL);\n        }\n\n        // Find and process any @Singleton bean annotations\n        final List<AnnotationInstance> sbAnnotations = compositeIndex.getAnnotations(SINGLETON_ANNOTATION);\n        if (!sbAnnotations.isEmpty()) {\n            processSessionBeans(deploymentUnit, sbAnnotations, SessionBeanComponentDescription.SessionBeanType.SINGLETON);\n        }\n    }", "language": "java", "code": "@Override\n    protected void processAnnotations(final DeploymentUnit deploymentUnit, final CompositeIndex compositeIndex) throws DeploymentUnitProcessingException {\n\n        if (MetadataCompleteMarker.isMetadataComplete(deploymentUnit)) {\n            return;\n        }\n\n        // Find and process any @Stateless bean annotations\n        final List<AnnotationInstance> slsbAnnotations = compositeIndex.getAnnotations(STATELESS_ANNOTATION);\n        if (!slsbAnnotations.isEmpty()) {\n            processSessionBeans(deploymentUnit, slsbAnnotations, SessionBeanComponentDescription.SessionBeanType.STATELESS);\n        }\n\n        // Find and process any @Stateful bean annotations\n        final List<AnnotationInstance> sfsbAnnotations = compositeIndex.getAnnotations(STATEFUL_ANNOTATION);\n        if (!sfsbAnnotations.isEmpty()) {\n            processSessionBeans(deploymentUnit, sfsbAnnotations, SessionBeanComponentDescription.SessionBeanType.STATEFUL);\n        }\n\n        // Find and process any @Singleton bean annotations\n        final List<AnnotationInstance> sbAnnotations = compositeIndex.getAnnotations(SINGLETON_ANNOTATION);\n        if (!sbAnnotations.isEmpty()) {\n            processSessionBeans(deploymentUnit, sbAnnotations, SessionBeanComponentDescription.SessionBeanType.SINGLETON);\n        }\n    }", "code_tokens": ["@", "Override", "protected", "void", "processAnnotations", "(", "final", "DeploymentUnit", "deploymentUnit", ",", "final", "CompositeIndex", "compositeIndex", ")", "throws", "DeploymentUnitProcessingException", "{", "if", "(", "MetadataCompleteMarker", ".", "isMetadataComplete", "(", "deploymentUnit", ")", ")", "{", "return", ";", "}", "// Find and process any @Stateless bean annotations", "final", "List", "<", "AnnotationInstance", ">", "slsbAnnotations", "=", "compositeIndex", ".", "getAnnotations", "(", "STATELESS_ANNOTATION", ")", ";", "if", "(", "!", "slsbAnnotations", ".", "isEmpty", "(", ")", ")", "{", "processSessionBeans", "(", "deploymentUnit", ",", "slsbAnnotations", ",", "SessionBeanComponentDescription", ".", "SessionBeanType", ".", "STATELESS", ")", ";", "}", "// Find and process any @Stateful bean annotations", "final", "List", "<", "AnnotationInstance", ">", "sfsbAnnotations", "=", "compositeIndex", ".", "getAnnotations", "(", "STATEFUL_ANNOTATION", ")", ";", "if", "(", "!", "sfsbAnnotations", ".", "isEmpty", "(", ")", ")", "{", "processSessionBeans", "(", "deploymentUnit", ",", "sfsbAnnotations", ",", "SessionBeanComponentDescription", ".", "SessionBeanType", ".", "STATEFUL", ")", ";", "}", "// Find and process any @Singleton bean annotations", "final", "List", "<", "AnnotationInstance", ">", "sbAnnotations", "=", "compositeIndex", ".", "getAnnotations", "(", "SINGLETON_ANNOTATION", ")", ";", "if", "(", "!", "sbAnnotations", ".", "isEmpty", "(", ")", ")", "{", "processSessionBeans", "(", "deploymentUnit", ",", "sbAnnotations", ",", "SessionBeanComponentDescription", ".", "SessionBeanType", ".", "SINGLETON", ")", ";", "}", "}"], "docstring": "Process annotations and merge any available metadata at the same time.", "docstring_tokens": ["Process", "annotations", "and", "merge", "any", "available", "metadata", "at", "the", "same", "time", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/SessionBeanComponentDescriptionFactory.java#L78-L102", "partition": "test", "index": 2718, "time": "2011-08-09 14:55:22"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/ConnectorServices.java", "func_name": "ConnectorServices.getDeploymentServiceName", "original_string": "public static synchronized ServiceName getDeploymentServiceName(final String raName, final Activation raxml) {\n        if (raName == null)\n            throw ConnectorLogger.ROOT_LOGGER.undefinedVar(\"RaName\");\n\n        ServiceName serviceName = null;\n        ModifiableResourceAdapter ra = (ModifiableResourceAdapter) raxml;\n        if (ra != null && ra.getId() != null) {\n            serviceName = getDeploymentServiceName(raName,ra.getId());\n        } else {\n            serviceName = getDeploymentServiceName(raName,(String)null);\n        }\n        ROOT_LOGGER.tracef(\"ConnectorServices: getDeploymentServiceName(%s,%s) -> %s\", raName, raxml,serviceName);\n        return serviceName;\n    }", "language": "java", "code": "public static synchronized ServiceName getDeploymentServiceName(final String raName, final Activation raxml) {\n        if (raName == null)\n            throw ConnectorLogger.ROOT_LOGGER.undefinedVar(\"RaName\");\n\n        ServiceName serviceName = null;\n        ModifiableResourceAdapter ra = (ModifiableResourceAdapter) raxml;\n        if (ra != null && ra.getId() != null) {\n            serviceName = getDeploymentServiceName(raName,ra.getId());\n        } else {\n            serviceName = getDeploymentServiceName(raName,(String)null);\n        }\n        ROOT_LOGGER.tracef(\"ConnectorServices: getDeploymentServiceName(%s,%s) -> %s\", raName, raxml,serviceName);\n        return serviceName;\n    }", "code_tokens": ["public", "static", "synchronized", "ServiceName", "getDeploymentServiceName", "(", "final", "String", "raName", ",", "final", "Activation", "raxml", ")", "{", "if", "(", "raName", "==", "null", ")", "throw", "ConnectorLogger", ".", "ROOT_LOGGER", ".", "undefinedVar", "(", "\"RaName\"", ")", ";", "ServiceName", "serviceName", "=", "null", ";", "ModifiableResourceAdapter", "ra", "=", "(", "ModifiableResourceAdapter", ")", "raxml", ";", "if", "(", "ra", "!=", "null", "&&", "ra", ".", "getId", "(", ")", "!=", "null", ")", "{", "serviceName", "=", "getDeploymentServiceName", "(", "raName", ",", "ra", ".", "getId", "(", ")", ")", ";", "}", "else", "{", "serviceName", "=", "getDeploymentServiceName", "(", "raName", ",", "(", "String", ")", "null", ")", ";", "}", "ROOT_LOGGER", ".", "tracef", "(", "\"ConnectorServices: getDeploymentServiceName(%s,%s) -> %s\"", ",", "raName", ",", "raxml", ",", "serviceName", ")", ";", "return", "serviceName", ";", "}"], "docstring": "resource-adapter DMR resource", "docstring_tokens": ["resource", "-", "adapter", "DMR", "resource"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/ConnectorServices.java#L142-L155", "partition": "test", "index": 2798, "time": "2011-08-19 14:21:34"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/merging/ResourceAdaptorMergingProcessor.java", "func_name": "ResourceAdaptorMergingProcessor.addEarPrefixIfRelativeName", "original_string": "private String addEarPrefixIfRelativeName(final String configuredName, final DeploymentUnit deploymentUnit,\n            final Class<?> componentClass) throws DeploymentUnitProcessingException {\n        if (!configuredName.startsWith(\"#\")) {\n            return configuredName;\n        }\n        final DeploymentUnit parent = deploymentUnit.getParent();\n        if (parent == null) {\n            throw EjbLogger.ROOT_LOGGER.relativeResourceAdapterNameInStandaloneModule(deploymentUnit.getName(),\n                    componentClass.getName(), configuredName);\n        }\n        return new StringBuilder().append(parent.getName()).append(configuredName).toString();\n    }", "language": "java", "code": "private String addEarPrefixIfRelativeName(final String configuredName, final DeploymentUnit deploymentUnit,\n            final Class<?> componentClass) throws DeploymentUnitProcessingException {\n        if (!configuredName.startsWith(\"#\")) {\n            return configuredName;\n        }\n        final DeploymentUnit parent = deploymentUnit.getParent();\n        if (parent == null) {\n            throw EjbLogger.ROOT_LOGGER.relativeResourceAdapterNameInStandaloneModule(deploymentUnit.getName(),\n                    componentClass.getName(), configuredName);\n        }\n        return new StringBuilder().append(parent.getName()).append(configuredName).toString();\n    }", "code_tokens": ["private", "String", "addEarPrefixIfRelativeName", "(", "final", "String", "configuredName", ",", "final", "DeploymentUnit", "deploymentUnit", ",", "final", "Class", "<", "?", ">", "componentClass", ")", "throws", "DeploymentUnitProcessingException", "{", "if", "(", "!", "configuredName", ".", "startsWith", "(", "\"#\"", ")", ")", "{", "return", "configuredName", ";", "}", "final", "DeploymentUnit", "parent", "=", "deploymentUnit", ".", "getParent", "(", ")", ";", "if", "(", "parent", "==", "null", ")", "{", "throw", "EjbLogger", ".", "ROOT_LOGGER", ".", "relativeResourceAdapterNameInStandaloneModule", "(", "deploymentUnit", ".", "getName", "(", ")", ",", "componentClass", ".", "getName", "(", ")", ",", "configuredName", ")", ";", "}", "return", "new", "StringBuilder", "(", ")", ".", "append", "(", "parent", ".", "getName", "(", ")", ")", ".", "append", "(", "configuredName", ")", ".", "toString", "(", ")", ";", "}"], "docstring": "adds ear prefix to configured adapter name if it is specified in relative form", "docstring_tokens": ["adds", "ear", "prefix", "to", "configured", "adapter", "name", "if", "it", "is", "specified", "in", "relative", "form"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/merging/ResourceAdaptorMergingProcessor.java#L102-L113", "partition": "test", "index": 2652, "time": "2011-08-23 08:05:52"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerServiceImpl.java", "func_name": "TimerServiceImpl.getWaitingOnTxCompletionTimers", "original_string": "private Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }", "language": "java", "code": "private Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }", "code_tokens": ["private", "Map", "<", "String", ",", "TimerImpl", ">", "getWaitingOnTxCompletionTimers", "(", ")", "{", "Map", "<", "String", ",", "TimerImpl", ">", "timers", "=", "null", ";", "if", "(", "getTransaction", "(", ")", "!=", "null", ")", "{", "timers", "=", "(", "Map", "<", "String", ",", "TimerImpl", ">", ")", "tsr", ".", "getResource", "(", "waitingOnTxCompletionKey", ")", ";", "}", "return", "timers", "==", "null", "?", "Collections", ".", "<", "String", ",", "TimerImpl", ">", "emptyMap", "(", ")", ":", "timers", ";", "}"], "docstring": "Returns an unmodifiable view of timers in the current transaction that are waiting for the transaction\nto finish", "docstring_tokens": ["Returns", "an", "unmodifiable", "view", "of", "timers", "in", "the", "current", "transaction", "that", "are", "waiting", "for", "the", "transaction", "to", "finish"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerServiceImpl.java#L943-L949", "partition": "test", "index": 2862, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerImpl.java", "func_name": "TimerImpl.setNextTimeout", "original_string": "public void setNextTimeout(Date next) {\n        if(next == null) {\n            setTimerState(TimerState.EXPIRED, null);\n        }\n        this.nextExpiration = next;\n    }", "language": "java", "code": "public void setNextTimeout(Date next) {\n        if(next == null) {\n            setTimerState(TimerState.EXPIRED, null);\n        }\n        this.nextExpiration = next;\n    }", "code_tokens": ["public", "void", "setNextTimeout", "(", "Date", "next", ")", "{", "if", "(", "next", "==", "null", ")", "{", "setTimerState", "(", "TimerState", ".", "EXPIRED", ",", "null", ")", ";", "}", "this", ".", "nextExpiration", "=", "next", ";", "}"], "docstring": "Sets the next timeout of this timer\n\n@param next The next scheduled timeout of this timer", "docstring_tokens": ["Sets", "the", "next", "timeout", "of", "this", "timer"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerImpl.java#L288-L293", "partition": "test", "index": 2689, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerImpl.java", "func_name": "TimerImpl.setTimerState", "original_string": "protected void setTimerState(TimerState state, Thread thread) {\n        assert ((state == TimerState.IN_TIMEOUT || state == TimerState.RETRY_TIMEOUT) && thread != null) || thread == null : \"Invalid to set timer state \" + state + \" with executing Thread \" + thread;\n        this.timerState = state;\n        this.executingThread = thread;\n    }", "language": "java", "code": "protected void setTimerState(TimerState state, Thread thread) {\n        assert ((state == TimerState.IN_TIMEOUT || state == TimerState.RETRY_TIMEOUT) && thread != null) || thread == null : \"Invalid to set timer state \" + state + \" with executing Thread \" + thread;\n        this.timerState = state;\n        this.executingThread = thread;\n    }", "code_tokens": ["protected", "void", "setTimerState", "(", "TimerState", "state", ",", "Thread", "thread", ")", "{", "assert", "(", "(", "state", "==", "TimerState", ".", "IN_TIMEOUT", "||", "state", "==", "TimerState", ".", "RETRY_TIMEOUT", ")", "&&", "thread", "!=", "null", ")", "||", "thread", "==", "null", ":", "\"Invalid to set timer state \"", "+", "state", "+", "\" with executing Thread \"", "+", "thread", ";", "this", ".", "timerState", "=", "state", ";", "this", ".", "executingThread", "=", "thread", ";", "}"], "docstring": "Sets the state and timer task executing thread of this timer\n\n@param state The state of this timer\n@param thread The executing thread which is processing the timeout task", "docstring_tokens": ["Sets", "the", "state", "and", "timer", "task", "executing", "thread", "of", "this", "timer"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerImpl.java#L498-L502", "partition": "test", "index": 2690, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/tx/util/StatusHelper.java", "func_name": "StatusHelper.statusAsString", "original_string": "public static String statusAsString(int status) {\n        if (status >= Status.STATUS_ACTIVE && status <= Status.STATUS_ROLLING_BACK) {\n            return TxStatusStrings[status];\n        } else {\n            return \"STATUS_INVALID(\" + status + \")\";\n        }\n    }", "language": "java", "code": "public static String statusAsString(int status) {\n        if (status >= Status.STATUS_ACTIVE && status <= Status.STATUS_ROLLING_BACK) {\n            return TxStatusStrings[status];\n        } else {\n            return \"STATUS_INVALID(\" + status + \")\";\n        }\n    }", "code_tokens": ["public", "static", "String", "statusAsString", "(", "int", "status", ")", "{", "if", "(", "status", ">=", "Status", ".", "STATUS_ACTIVE", "&&", "status", "<=", "Status", ".", "STATUS_ROLLING_BACK", ")", "{", "return", "TxStatusStrings", "[", "status", "]", ";", "}", "else", "{", "return", "\"STATUS_INVALID(\"", "+", "status", "+", "\")\"", ";", "}", "}"], "docstring": "Converts a tx Status index to a String\n\n@param status the Status index\n@return status as String or \"STATUS_INVALID(value)\"\n@see javax.transaction.Status", "docstring_tokens": ["Converts", "a", "tx", "Status", "index", "to", "a", "String"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/tx/util/StatusHelper.java#L54-L60", "partition": "test", "index": 2607, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/pool/strictmax/StrictMaxPool.java", "func_name": "StrictMaxPool.get", "original_string": "public T get() {\n        try {\n            boolean acquired = semaphore.tryAcquire(timeout, timeUnit);\n            if (!acquired)\n                throw EjbLogger.ROOT_LOGGER.failedToAcquirePermit(timeout, timeUnit);\n        } catch (InterruptedException e) {\n            throw EjbLogger.ROOT_LOGGER.acquireSemaphoreInterrupted();\n        }\n\n        T bean = pool.poll();\n\n        if( bean !=null) {\n            //we found a bean instance in the pool, return it\n            return bean;\n        }\n\n        try {\n            // Pool is empty, create an instance\n            bean = create();\n        } finally {\n            if (bean == null) {\n                semaphore.release();\n            }\n        }\n        return bean;\n    }", "language": "java", "code": "public T get() {\n        try {\n            boolean acquired = semaphore.tryAcquire(timeout, timeUnit);\n            if (!acquired)\n                throw EjbLogger.ROOT_LOGGER.failedToAcquirePermit(timeout, timeUnit);\n        } catch (InterruptedException e) {\n            throw EjbLogger.ROOT_LOGGER.acquireSemaphoreInterrupted();\n        }\n\n        T bean = pool.poll();\n\n        if( bean !=null) {\n            //we found a bean instance in the pool, return it\n            return bean;\n        }\n\n        try {\n            // Pool is empty, create an instance\n            bean = create();\n        } finally {\n            if (bean == null) {\n                semaphore.release();\n            }\n        }\n        return bean;\n    }", "code_tokens": ["public", "T", "get", "(", ")", "{", "try", "{", "boolean", "acquired", "=", "semaphore", ".", "tryAcquire", "(", "timeout", ",", "timeUnit", ")", ";", "if", "(", "!", "acquired", ")", "throw", "EjbLogger", ".", "ROOT_LOGGER", ".", "failedToAcquirePermit", "(", "timeout", ",", "timeUnit", ")", ";", "}", "catch", "(", "InterruptedException", "e", ")", "{", "throw", "EjbLogger", ".", "ROOT_LOGGER", ".", "acquireSemaphoreInterrupted", "(", ")", ";", "}", "T", "bean", "=", "pool", ".", "poll", "(", ")", ";", "if", "(", "bean", "!=", "null", ")", "{", "//we found a bean instance in the pool, return it", "return", "bean", ";", "}", "try", "{", "// Pool is empty, create an instance", "bean", "=", "create", "(", ")", ";", "}", "finally", "{", "if", "(", "bean", "==", "null", ")", "{", "semaphore", ".", "release", "(", ")", ";", "}", "}", "return", "bean", ";", "}"], "docstring": "Get an instance without identity.\nCan be used by finders,create-methods, and activation\n\n@return Context /w instance", "docstring_tokens": ["Get", "an", "instance", "without", "identity", ".", "Can", "be", "used", "by", "finders", "create", "-", "methods", "and", "activation"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/pool/strictmax/StrictMaxPool.java#L106-L131", "partition": "test", "index": 2889, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/singleton/EJBReadWriteLock.java", "func_name": "EJBReadWriteLock.incReadLockCount", "original_string": "private void incReadLockCount() {\n        Integer current = readLockCount.get();\n        int next;\n        if (current == null)\n            next = 1;\n        else\n            next = current.intValue() + 1;\n        readLockCount.set(new Integer(next));\n    }", "language": "java", "code": "private void incReadLockCount() {\n        Integer current = readLockCount.get();\n        int next;\n        if (current == null)\n            next = 1;\n        else\n            next = current.intValue() + 1;\n        readLockCount.set(new Integer(next));\n    }", "code_tokens": ["private", "void", "incReadLockCount", "(", ")", "{", "Integer", "current", "=", "readLockCount", ".", "get", "(", ")", ";", "int", "next", ";", "if", "(", "current", "==", "null", ")", "next", "=", "1", ";", "else", "next", "=", "current", ".", "intValue", "(", ")", "+", "1", ";", "readLockCount", ".", "set", "(", "new", "Integer", "(", "next", ")", ")", ";", "}"], "docstring": "Increments the read lock count held by the thread", "docstring_tokens": ["Increments", "the", "read", "lock", "count", "held", "by", "the", "thread"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/singleton/EJBReadWriteLock.java#L253-L261", "partition": "test", "index": 2473, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/singleton/EJBReadWriteLock.java", "func_name": "EJBReadWriteLock.decReadLockCount", "original_string": "private void decReadLockCount() {\n        Integer current = readLockCount.get();\n        int next;\n        assert current != null : \"can't decrease, readLockCount is not set\";\n        next = current.intValue() - 1;\n        if (next == 0)\n            readLockCount.remove();\n        else\n            readLockCount.set(new Integer(next));\n    }", "language": "java", "code": "private void decReadLockCount() {\n        Integer current = readLockCount.get();\n        int next;\n        assert current != null : \"can't decrease, readLockCount is not set\";\n        next = current.intValue() - 1;\n        if (next == 0)\n            readLockCount.remove();\n        else\n            readLockCount.set(new Integer(next));\n    }", "code_tokens": ["private", "void", "decReadLockCount", "(", ")", "{", "Integer", "current", "=", "readLockCount", ".", "get", "(", ")", ";", "int", "next", ";", "assert", "current", "!=", "null", ":", "\"can't decrease, readLockCount is not set\"", ";", "next", "=", "current", ".", "intValue", "(", ")", "-", "1", ";", "if", "(", "next", "==", "0", ")", "readLockCount", ".", "remove", "(", ")", ";", "else", "readLockCount", ".", "set", "(", "new", "Integer", "(", "next", ")", ")", ";", "}"], "docstring": "Decrements the read lock count held by the thread", "docstring_tokens": ["Decrements", "the", "read", "lock", "count", "held", "by", "the", "thread"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/singleton/EJBReadWriteLock.java#L239-L248", "partition": "test", "index": 2472, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerTask.java", "func_name": "TimerTask.retryTimeout", "original_string": "protected void retryTimeout(TimerImpl timer) throws Exception {\n        boolean callTimeout = false;\n\n        timer.lock();\n        try {\n            if (timer.isActive()) {\n                EJB3_TIMER_LOGGER.retryingTimeout(timer);\n                timer.setTimerState(TimerState.RETRY_TIMEOUT, Thread.currentThread());\n                timerService.persistTimer(timer, false);\n                callTimeout = true;\n            } else {\n                EJB3_TIMER_LOGGER.timerNotActive(timer);\n            }\n        } finally {\n            timer.unlock();\n        }\n        if(callTimeout) {\n            this.callTimeout(timer);\n        }\n    }", "language": "java", "code": "protected void retryTimeout(TimerImpl timer) throws Exception {\n        boolean callTimeout = false;\n\n        timer.lock();\n        try {\n            if (timer.isActive()) {\n                EJB3_TIMER_LOGGER.retryingTimeout(timer);\n                timer.setTimerState(TimerState.RETRY_TIMEOUT, Thread.currentThread());\n                timerService.persistTimer(timer, false);\n                callTimeout = true;\n            } else {\n                EJB3_TIMER_LOGGER.timerNotActive(timer);\n            }\n        } finally {\n            timer.unlock();\n        }\n        if(callTimeout) {\n            this.callTimeout(timer);\n        }\n    }", "code_tokens": ["protected", "void", "retryTimeout", "(", "TimerImpl", "timer", ")", "throws", "Exception", "{", "boolean", "callTimeout", "=", "false", ";", "timer", ".", "lock", "(", ")", ";", "try", "{", "if", "(", "timer", ".", "isActive", "(", ")", ")", "{", "EJB3_TIMER_LOGGER", ".", "retryingTimeout", "(", "timer", ")", ";", "timer", ".", "setTimerState", "(", "TimerState", ".", "RETRY_TIMEOUT", ",", "Thread", ".", "currentThread", "(", ")", ")", ";", "timerService", ".", "persistTimer", "(", "timer", ",", "false", ")", ";", "callTimeout", "=", "true", ";", "}", "else", "{", "EJB3_TIMER_LOGGER", ".", "timerNotActive", "(", "timer", ")", ";", "}", "}", "finally", "{", "timer", ".", "unlock", "(", ")", ";", "}", "if", "(", "callTimeout", ")", "{", "this", ".", "callTimeout", "(", "timer", ")", ";", "}", "}"], "docstring": "After a timeout failed the timer need to retried.\nThe method must lock the timer for state check and update but not during callTimeout run.\n\n@param timer timer to retry and state updates\n@throws Exception", "docstring_tokens": ["After", "a", "timeout", "failed", "the", "timer", "need", "to", "retried", ".", "The", "method", "must", "lock", "the", "timer", "for", "state", "check", "and", "update", "but", "not", "during", "callTimeout", "run", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerTask.java#L235-L254", "partition": "test", "index": 2898, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerTask.java", "func_name": "TimerTask.postTimeoutProcessing", "original_string": "protected void postTimeoutProcessing(TimerImpl timer) throws InterruptedException {\n        timer.lock();\n        try {\n            TimerState timerState = timer.getState();\n            if (timerState != TimerState.CANCELED\n                    && timerState != TimerState.EXPIRED) {\n                if (timer.getInterval() == 0) {\n                    timerService.expireTimer(timer);\n                } else {\n                    timer.setTimerState(TimerState.ACTIVE, null);\n                }\n                timerService.persistTimer(timer, false);\n            }\n        } finally {\n            timer.unlock();\n        }\n    }", "language": "java", "code": "protected void postTimeoutProcessing(TimerImpl timer) throws InterruptedException {\n        timer.lock();\n        try {\n            TimerState timerState = timer.getState();\n            if (timerState != TimerState.CANCELED\n                    && timerState != TimerState.EXPIRED) {\n                if (timer.getInterval() == 0) {\n                    timerService.expireTimer(timer);\n                } else {\n                    timer.setTimerState(TimerState.ACTIVE, null);\n                }\n                timerService.persistTimer(timer, false);\n            }\n        } finally {\n            timer.unlock();\n        }\n    }", "code_tokens": ["protected", "void", "postTimeoutProcessing", "(", "TimerImpl", "timer", ")", "throws", "InterruptedException", "{", "timer", ".", "lock", "(", ")", ";", "try", "{", "TimerState", "timerState", "=", "timer", ".", "getState", "(", ")", ";", "if", "(", "timerState", "!=", "TimerState", ".", "CANCELED", "&&", "timerState", "!=", "TimerState", ".", "EXPIRED", ")", "{", "if", "(", "timer", ".", "getInterval", "(", ")", "==", "0", ")", "{", "timerService", ".", "expireTimer", "(", "timer", ")", ";", "}", "else", "{", "timer", ".", "setTimerState", "(", "TimerState", ".", "ACTIVE", ",", "null", ")", ";", "}", "timerService", ".", "persistTimer", "(", "timer", ",", "false", ")", ";", "}", "}", "finally", "{", "timer", ".", "unlock", "(", ")", ";", "}", "}"], "docstring": "After running the timer calculate the new state or expire the timer and persist it if changed.\nThe method must lock the timer for state check and updates if overridden.\n\n@param timer timer to post processing and persist", "docstring_tokens": ["After", "running", "the", "timer", "calculate", "the", "new", "state", "or", "expire", "the", "timer", "and", "persist", "it", "if", "changed", ".", "The", "method", "must", "lock", "the", "timer", "for", "state", "check", "and", "updates", "if", "overridden", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/TimerTask.java#L262-L278", "partition": "test", "index": 2899, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/filestore/FileTimerPersistence.java", "func_name": "FileTimerPersistence.getDirectory", "original_string": "private String getDirectory(String timedObjectId) {\n        String dirName = directories.get(timedObjectId);\n        if (dirName == null) {\n            dirName = baseDir.getAbsolutePath() + File.separator + timedObjectId.replace(File.separator, \"-\");\n            File file = new File(dirName);\n            if (!file.exists()) {\n                if (!file.mkdirs()) {\n                    EJB3_TIMER_LOGGER.failToCreateDirectoryForPersistTimers(file);\n                }\n            }\n            directories.put(timedObjectId, dirName);\n        }\n        return dirName;\n    }", "language": "java", "code": "private String getDirectory(String timedObjectId) {\n        String dirName = directories.get(timedObjectId);\n        if (dirName == null) {\n            dirName = baseDir.getAbsolutePath() + File.separator + timedObjectId.replace(File.separator, \"-\");\n            File file = new File(dirName);\n            if (!file.exists()) {\n                if (!file.mkdirs()) {\n                    EJB3_TIMER_LOGGER.failToCreateDirectoryForPersistTimers(file);\n                }\n            }\n            directories.put(timedObjectId, dirName);\n        }\n        return dirName;\n    }", "code_tokens": ["private", "String", "getDirectory", "(", "String", "timedObjectId", ")", "{", "String", "dirName", "=", "directories", ".", "get", "(", "timedObjectId", ")", ";", "if", "(", "dirName", "==", "null", ")", "{", "dirName", "=", "baseDir", ".", "getAbsolutePath", "(", ")", "+", "File", ".", "separator", "+", "timedObjectId", ".", "replace", "(", "File", ".", "separator", ",", "\"-\"", ")", ";", "File", "file", "=", "new", "File", "(", "dirName", ")", ";", "if", "(", "!", "file", ".", "exists", "(", ")", ")", "{", "if", "(", "!", "file", ".", "mkdirs", "(", ")", ")", "{", "EJB3_TIMER_LOGGER", ".", "failToCreateDirectoryForPersistTimers", "(", "file", ")", ";", "}", "}", "directories", ".", "put", "(", "timedObjectId", ",", "dirName", ")", ";", "}", "return", "dirName", ";", "}"], "docstring": "Gets the directory for a given timed object, making sure it exists.\n\n@param timedObjectId The timed object\n@return The directory", "docstring_tokens": ["Gets", "the", "directory", "for", "a", "given", "timed", "object", "making", "sure", "it", "exists", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/filestore/FileTimerPersistence.java#L415-L428", "partition": "test", "index": 2642, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/filestore/FileTimerPersistence.java", "func_name": "FileTimerPersistence.getTimers", "original_string": "private Map<String, TimerImpl> getTimers(final String timedObjectId, final TimerServiceImpl timerService) {\n        return loadTimersFromFile(timedObjectId, timerService);\n    }", "language": "java", "code": "private Map<String, TimerImpl> getTimers(final String timedObjectId, final TimerServiceImpl timerService) {\n        return loadTimersFromFile(timedObjectId, timerService);\n    }", "code_tokens": ["private", "Map", "<", "String", ",", "TimerImpl", ">", "getTimers", "(", "final", "String", "timedObjectId", ",", "final", "TimerServiceImpl", "timerService", ")", "{", "return", "loadTimersFromFile", "(", "timedObjectId", ",", "timerService", ")", ";", "}"], "docstring": "Gets the timer map, loading from the persistent store if necessary. Should be called under lock\n\n@param timedObjectId The timed object id\n@return The timers for the object", "docstring_tokens": ["Gets", "the", "timer", "map", "loading", "from", "the", "persistent", "store", "if", "necessary", ".", "Should", "be", "called", "under", "lock"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/filestore/FileTimerPersistence.java#L333-L335", "partition": "test", "index": 2641, "time": "2011-08-24 17:23:13"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/utils/DescriptorUtils.java", "func_name": "DescriptorUtils.validateDescriptor", "original_string": "public static String validateDescriptor(String descriptor) {\n        if (descriptor.length() == 0) {\n            throw EeLogger.ROOT_LOGGER.cannotBeEmpty(\"descriptors\");\n        }\n        if (descriptor.length() > 1) {\n            if (descriptor.startsWith(\"L\")) {\n                if (!descriptor.endsWith(\";\")) {\n                    throw EeLogger.ROOT_LOGGER.invalidDescriptor(descriptor);\n                }\n            } else if (descriptor.startsWith(\"[\")) {\n\n            } else {\n                    throw EeLogger.ROOT_LOGGER.invalidDescriptor(descriptor);\n            }\n        } else {\n            char type = descriptor.charAt(0);\n            switch (type) {\n                case 'I':\n                case 'Z':\n                case 'S':\n                case 'B':\n                case 'F':\n                case 'D':\n                case 'V':\n                case 'J':\n                case 'C':\n                    break;\n                default:\n                    throw EeLogger.ROOT_LOGGER.invalidDescriptor(descriptor);\n            }\n        }\n        return descriptor;\n    }", "language": "java", "code": "public static String validateDescriptor(String descriptor) {\n        if (descriptor.length() == 0) {\n            throw EeLogger.ROOT_LOGGER.cannotBeEmpty(\"descriptors\");\n        }\n        if (descriptor.length() > 1) {\n            if (descriptor.startsWith(\"L\")) {\n                if (!descriptor.endsWith(\";\")) {\n                    throw EeLogger.ROOT_LOGGER.invalidDescriptor(descriptor);\n                }\n            } else if (descriptor.startsWith(\"[\")) {\n\n            } else {\n                    throw EeLogger.ROOT_LOGGER.invalidDescriptor(descriptor);\n            }\n        } else {\n            char type = descriptor.charAt(0);\n            switch (type) {\n                case 'I':\n                case 'Z':\n                case 'S':\n                case 'B':\n                case 'F':\n                case 'D':\n                case 'V':\n                case 'J':\n                case 'C':\n                    break;\n                default:\n                    throw EeLogger.ROOT_LOGGER.invalidDescriptor(descriptor);\n            }\n        }\n        return descriptor;\n    }", "code_tokens": ["public", "static", "String", "validateDescriptor", "(", "String", "descriptor", ")", "{", "if", "(", "descriptor", ".", "length", "(", ")", "==", "0", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "cannotBeEmpty", "(", "\"descriptors\"", ")", ";", "}", "if", "(", "descriptor", ".", "length", "(", ")", ">", "1", ")", "{", "if", "(", "descriptor", ".", "startsWith", "(", "\"L\"", ")", ")", "{", "if", "(", "!", "descriptor", ".", "endsWith", "(", "\";\"", ")", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "invalidDescriptor", "(", "descriptor", ")", ";", "}", "}", "else", "if", "(", "descriptor", ".", "startsWith", "(", "\"[\"", ")", ")", "{", "}", "else", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "invalidDescriptor", "(", "descriptor", ")", ";", "}", "}", "else", "{", "char", "type", "=", "descriptor", ".", "charAt", "(", "0", ")", ";", "switch", "(", "type", ")", "{", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "case", "'", "'", ":", "break", ";", "default", ":", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "invalidDescriptor", "(", "descriptor", ")", ";", "}", "}", "return", "descriptor", ";", "}"], "docstring": "performs basic validation on a descriptor", "docstring_tokens": ["performs", "basic", "validation", "on", "a", "descriptor"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/utils/DescriptorUtils.java#L184-L216", "partition": "test", "index": 2720, "time": "2011-09-23 09:00:53"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewDescription.java", "func_name": "ViewDescription.createInjectionSource", "original_string": "protected InjectionSource createInjectionSource(final ServiceName serviceName, Value<ClassLoader> viewClassLoader, boolean appclient) {\n        return new ViewBindingInjectionSource(serviceName);\n    }", "language": "java", "code": "protected InjectionSource createInjectionSource(final ServiceName serviceName, Value<ClassLoader> viewClassLoader, boolean appclient) {\n        return new ViewBindingInjectionSource(serviceName);\n    }", "code_tokens": ["protected", "InjectionSource", "createInjectionSource", "(", "final", "ServiceName", "serviceName", ",", "Value", "<", "ClassLoader", ">", "viewClassLoader", ",", "boolean", "appclient", ")", "{", "return", "new", "ViewBindingInjectionSource", "(", "serviceName", ")", ";", "}"], "docstring": "Create the injection source\n\n@param serviceName     The view service name\n@param viewClassLoader", "docstring_tokens": ["Create", "the", "injection", "source"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewDescription.java#L178-L180", "partition": "test", "index": 2656, "time": "2011-09-27 14:53:23"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/InitialContext.java", "func_name": "InitialContext.addUrlContextFactory", "original_string": "public static synchronized void addUrlContextFactory(final String scheme, ObjectFactory factory) {\n        Map<String, ObjectFactory> factories = new HashMap<String, ObjectFactory>(urlContextFactories);\n        factories.put(scheme, factory);\n        urlContextFactories = Collections.unmodifiableMap(factories);\n    }", "language": "java", "code": "public static synchronized void addUrlContextFactory(final String scheme, ObjectFactory factory) {\n        Map<String, ObjectFactory> factories = new HashMap<String, ObjectFactory>(urlContextFactories);\n        factories.put(scheme, factory);\n        urlContextFactories = Collections.unmodifiableMap(factories);\n    }", "code_tokens": ["public", "static", "synchronized", "void", "addUrlContextFactory", "(", "final", "String", "scheme", ",", "ObjectFactory", "factory", ")", "{", "Map", "<", "String", ",", "ObjectFactory", ">", "factories", "=", "new", "HashMap", "<", "String", ",", "ObjectFactory", ">", "(", "urlContextFactories", ")", ";", "factories", ".", "put", "(", "scheme", ",", "factory", ")", ";", "urlContextFactories", "=", "Collections", ".", "unmodifiableMap", "(", "factories", ")", ";", "}"], "docstring": "Add an ObjectFactory to handle requests for a specific URL scheme.\n@param scheme The URL scheme to handle.\n@param factory The ObjectFactory that can handle the requests.", "docstring_tokens": ["Add", "an", "ObjectFactory", "to", "handle", "requests", "for", "a", "specific", "URL", "scheme", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/InitialContext.java#L63-L67", "partition": "test", "index": 2498, "time": "2011-09-28 17:05:08"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/stateful/StatefulSessionSynchronizationInterceptor.java", "func_name": "StatefulSessionSynchronizationInterceptor.getLockOwner", "original_string": "private static Object getLockOwner(final TransactionSynchronizationRegistry transactionSynchronizationRegistry) {\n        Object owner = transactionSynchronizationRegistry.getTransactionKey();\n        return owner != null ? owner : Thread.currentThread();\n    }", "language": "java", "code": "private static Object getLockOwner(final TransactionSynchronizationRegistry transactionSynchronizationRegistry) {\n        Object owner = transactionSynchronizationRegistry.getTransactionKey();\n        return owner != null ? owner : Thread.currentThread();\n    }", "code_tokens": ["private", "static", "Object", "getLockOwner", "(", "final", "TransactionSynchronizationRegistry", "transactionSynchronizationRegistry", ")", "{", "Object", "owner", "=", "transactionSynchronizationRegistry", ".", "getTransactionKey", "(", ")", ";", "return", "owner", "!=", "null", "?", "owner", ":", "Thread", ".", "currentThread", "(", ")", ";", "}"], "docstring": "Use either the active transaction or the current thread as the lock owner\n\n@return The lock owner", "docstring_tokens": ["Use", "either", "the", "active", "transaction", "or", "the", "current", "thread", "as", "the", "lock", "owner"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/stateful/StatefulSessionSynchronizationInterceptor.java#L194-L197", "partition": "test", "index": 2521, "time": "2011-09-29 15:09:04"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderLoader.java", "func_name": "PersistenceProviderLoader.loadProviderModuleByName", "original_string": "public static List<PersistenceProvider> loadProviderModuleByName(String moduleName) throws ModuleLoadException {\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n        Module module = moduleLoader.loadModule(ModuleIdentifier.fromString(moduleName));\n        final ServiceLoader<PersistenceProvider> serviceLoader =\n            module.loadService(PersistenceProvider.class);\n        List<PersistenceProvider> result = new ArrayList<>();\n        if (serviceLoader != null) {\n            for (PersistenceProvider provider1 : serviceLoader) {\n                // persistence provider jar may contain multiple provider service implementations\n                // save each provider\n                PersistenceProviderResolverImpl.getInstance().addPersistenceProvider(provider1);\n                result.add(provider1);\n            }\n        }\n        return result;\n    }", "language": "java", "code": "public static List<PersistenceProvider> loadProviderModuleByName(String moduleName) throws ModuleLoadException {\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n        Module module = moduleLoader.loadModule(ModuleIdentifier.fromString(moduleName));\n        final ServiceLoader<PersistenceProvider> serviceLoader =\n            module.loadService(PersistenceProvider.class);\n        List<PersistenceProvider> result = new ArrayList<>();\n        if (serviceLoader != null) {\n            for (PersistenceProvider provider1 : serviceLoader) {\n                // persistence provider jar may contain multiple provider service implementations\n                // save each provider\n                PersistenceProviderResolverImpl.getInstance().addPersistenceProvider(provider1);\n                result.add(provider1);\n            }\n        }\n        return result;\n    }", "code_tokens": ["public", "static", "List", "<", "PersistenceProvider", ">", "loadProviderModuleByName", "(", "String", "moduleName", ")", "throws", "ModuleLoadException", "{", "final", "ModuleLoader", "moduleLoader", "=", "Module", ".", "getBootModuleLoader", "(", ")", ";", "Module", "module", "=", "moduleLoader", ".", "loadModule", "(", "ModuleIdentifier", ".", "fromString", "(", "moduleName", ")", ")", ";", "final", "ServiceLoader", "<", "PersistenceProvider", ">", "serviceLoader", "=", "module", ".", "loadService", "(", "PersistenceProvider", ".", "class", ")", ";", "List", "<", "PersistenceProvider", ">", "result", "=", "new", "ArrayList", "<>", "(", ")", ";", "if", "(", "serviceLoader", "!=", "null", ")", "{", "for", "(", "PersistenceProvider", "provider1", ":", "serviceLoader", ")", "{", "// persistence provider jar may contain multiple provider service implementations", "// save each provider", "PersistenceProviderResolverImpl", ".", "getInstance", "(", ")", ".", "addPersistenceProvider", "(", "provider1", ")", ";", "result", ".", "add", "(", "provider1", ")", ";", "}", "}", "return", "result", ";", "}"], "docstring": "Loads the specified JPA persistence provider module\n\n@param moduleName is the static module to be loaded\n@throws ModuleLoadException\n@return list of persistence providers in specified module\n\nNote: side effect of saving loaded persistence providers to static api in javax.persistence.spi.PersistenceProvider.", "docstring_tokens": ["Loads", "the", "specified", "JPA", "persistence", "provider", "module"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderLoader.java#L63-L78", "partition": "test", "index": 2759, "time": "2011-09-30 19:39:50"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/injection/WSEndpointHandlersMapping.java", "func_name": "WSEndpointHandlersMapping.registerEndpointHandlers", "original_string": "public void registerEndpointHandlers(final String endpointClass, final Set<String> endpointHandlers) {\n        if ((endpointClass == null) || (endpointHandlers == null)) {\n            throw new IllegalArgumentException();\n        }\n        endpointHandlersMap.put(endpointClass, Collections.unmodifiableSet(endpointHandlers));\n    }", "language": "java", "code": "public void registerEndpointHandlers(final String endpointClass, final Set<String> endpointHandlers) {\n        if ((endpointClass == null) || (endpointHandlers == null)) {\n            throw new IllegalArgumentException();\n        }\n        endpointHandlersMap.put(endpointClass, Collections.unmodifiableSet(endpointHandlers));\n    }", "code_tokens": ["public", "void", "registerEndpointHandlers", "(", "final", "String", "endpointClass", ",", "final", "Set", "<", "String", ">", "endpointHandlers", ")", "{", "if", "(", "(", "endpointClass", "==", "null", ")", "||", "(", "endpointHandlers", "==", "null", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", ")", ";", "}", "endpointHandlersMap", ".", "put", "(", "endpointClass", ",", "Collections", ".", "unmodifiableSet", "(", "endpointHandlers", ")", ")", ";", "}"], "docstring": "Registers endpoint and its associated WS handlers.\n\n@param endpointClass WS endpoint\n@param endpointHandlers WS handlers associated with endpoint", "docstring_tokens": ["Registers", "endpoint", "and", "its", "associated", "WS", "handlers", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/injection/WSEndpointHandlersMapping.java#L45-L50", "partition": "test", "index": 2766, "time": "2011-10-04 16:22:55"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getEndpointName", "original_string": "public static String getEndpointName(final ServletMetaData servletMD) {\n        final String endpointName = servletMD.getName();\n        return endpointName != null ? endpointName.trim() : null;\n    }", "language": "java", "code": "public static String getEndpointName(final ServletMetaData servletMD) {\n        final String endpointName = servletMD.getName();\n        return endpointName != null ? endpointName.trim() : null;\n    }", "code_tokens": ["public", "static", "String", "getEndpointName", "(", "final", "ServletMetaData", "servletMD", ")", "{", "final", "String", "endpointName", "=", "servletMD", ".", "getName", "(", ")", ";", "return", "endpointName", "!=", "null", "?", "endpointName", ".", "trim", "(", ")", ":", "null", ";", "}"], "docstring": "Returns endpoint name.\n\n@param servletMD servlet meta data\n@return endpoint name", "docstring_tokens": ["Returns", "endpoint", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L113-L116", "partition": "test", "index": 2667, "time": "2011-10-06 13:40:26"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java", "func_name": "ComponentDescription.getContextServiceName", "original_string": "public ServiceName getContextServiceName() {\n        if (contextServiceName != null) return contextServiceName;\n        if (getNamingMode() == ComponentNamingMode.CREATE) {\n            return ContextNames.contextServiceNameOfComponent(getApplicationName(), getModuleName(), getComponentName());\n        } else if (getNamingMode() == ComponentNamingMode.USE_MODULE) {\n            return ContextNames.contextServiceNameOfModule(getApplicationName(), getModuleName());\n        } else {\n            throw new IllegalStateException();\n        }\n    }", "language": "java", "code": "public ServiceName getContextServiceName() {\n        if (contextServiceName != null) return contextServiceName;\n        if (getNamingMode() == ComponentNamingMode.CREATE) {\n            return ContextNames.contextServiceNameOfComponent(getApplicationName(), getModuleName(), getComponentName());\n        } else if (getNamingMode() == ComponentNamingMode.USE_MODULE) {\n            return ContextNames.contextServiceNameOfModule(getApplicationName(), getModuleName());\n        } else {\n            throw new IllegalStateException();\n        }\n    }", "code_tokens": ["public", "ServiceName", "getContextServiceName", "(", ")", "{", "if", "(", "contextServiceName", "!=", "null", ")", "return", "contextServiceName", ";", "if", "(", "getNamingMode", "(", ")", "==", "ComponentNamingMode", ".", "CREATE", ")", "{", "return", "ContextNames", ".", "contextServiceNameOfComponent", "(", "getApplicationName", "(", ")", ",", "getModuleName", "(", ")", ",", "getComponentName", "(", ")", ")", ";", "}", "else", "if", "(", "getNamingMode", "(", ")", "==", "ComponentNamingMode", ".", "USE_MODULE", ")", "{", "return", "ContextNames", ".", "contextServiceNameOfModule", "(", "getApplicationName", "(", ")", ",", "getModuleName", "(", ")", ")", ";", "}", "else", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "}"], "docstring": "Get the context service name.\n\n@return the context service name", "docstring_tokens": ["Get", "the", "context", "service", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentDescription.java#L158-L167", "partition": "test", "index": 2806, "time": "2011-10-11 16:10:34"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getContextRoot", "original_string": "public static String getContextRoot(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        final DeploymentUnit unit = WSHelper.getRequiredAttachment(dep, DeploymentUnit.class);\n        final JBossAppMetaData jbossAppMD = unit.getParent() == null ? null : ASHelper.getOptionalAttachment(unit.getParent(),\n                WSAttachmentKeys.JBOSS_APP_METADATA_KEY);\n\n        String contextRoot = null;\n\n        // prefer context root defined in application.xml over one defined in jboss-web.xml\n        if (jbossAppMD != null) {\n            final ModuleMetaData moduleMD = jbossAppMD.getModules().get(dep.getSimpleName());\n            if (moduleMD != null) {\n                final WebModuleMetaData webModuleMD = (WebModuleMetaData) moduleMD.getValue();\n                contextRoot = webModuleMD.getContextRoot();\n            }\n        }\n\n        if (contextRoot == null) {\n            contextRoot = jbossWebMD != null ? jbossWebMD.getContextRoot() : null;\n        }\n\n        return contextRoot;\n    }", "language": "java", "code": "public static String getContextRoot(final Deployment dep, final JBossWebMetaData jbossWebMD) {\n        final DeploymentUnit unit = WSHelper.getRequiredAttachment(dep, DeploymentUnit.class);\n        final JBossAppMetaData jbossAppMD = unit.getParent() == null ? null : ASHelper.getOptionalAttachment(unit.getParent(),\n                WSAttachmentKeys.JBOSS_APP_METADATA_KEY);\n\n        String contextRoot = null;\n\n        // prefer context root defined in application.xml over one defined in jboss-web.xml\n        if (jbossAppMD != null) {\n            final ModuleMetaData moduleMD = jbossAppMD.getModules().get(dep.getSimpleName());\n            if (moduleMD != null) {\n                final WebModuleMetaData webModuleMD = (WebModuleMetaData) moduleMD.getValue();\n                contextRoot = webModuleMD.getContextRoot();\n            }\n        }\n\n        if (contextRoot == null) {\n            contextRoot = jbossWebMD != null ? jbossWebMD.getContextRoot() : null;\n        }\n\n        return contextRoot;\n    }", "code_tokens": ["public", "static", "String", "getContextRoot", "(", "final", "Deployment", "dep", ",", "final", "JBossWebMetaData", "jbossWebMD", ")", "{", "final", "DeploymentUnit", "unit", "=", "WSHelper", ".", "getRequiredAttachment", "(", "dep", ",", "DeploymentUnit", ".", "class", ")", ";", "final", "JBossAppMetaData", "jbossAppMD", "=", "unit", ".", "getParent", "(", ")", "==", "null", "?", "null", ":", "ASHelper", ".", "getOptionalAttachment", "(", "unit", ".", "getParent", "(", ")", ",", "WSAttachmentKeys", ".", "JBOSS_APP_METADATA_KEY", ")", ";", "String", "contextRoot", "=", "null", ";", "// prefer context root defined in application.xml over one defined in jboss-web.xml", "if", "(", "jbossAppMD", "!=", "null", ")", "{", "final", "ModuleMetaData", "moduleMD", "=", "jbossAppMD", ".", "getModules", "(", ")", ".", "get", "(", "dep", ".", "getSimpleName", "(", ")", ")", ";", "if", "(", "moduleMD", "!=", "null", ")", "{", "final", "WebModuleMetaData", "webModuleMD", "=", "(", "WebModuleMetaData", ")", "moduleMD", ".", "getValue", "(", ")", ";", "contextRoot", "=", "webModuleMD", ".", "getContextRoot", "(", ")", ";", "}", "}", "if", "(", "contextRoot", "==", "null", ")", "{", "contextRoot", "=", "jbossWebMD", "!=", "null", "?", "jbossWebMD", ".", "getContextRoot", "(", ")", ":", "null", ";", "}", "return", "contextRoot", ";", "}"], "docstring": "Returns context root associated with webservice deployment.\n\nIf there's application.xml descriptor provided defining nested web module, then context root defined there will be\nreturned. Otherwise context root defined in jboss-web.xml will be returned.\n\n@param dep webservice deployment\n@param jbossWebMD jboss web meta data\n@return context root", "docstring_tokens": ["Returns", "context", "root", "associated", "with", "webservice", "deployment", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L371-L392", "partition": "test", "index": 2675, "time": "2011-10-13 11:39:06"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/EJBComponentDescription.java", "func_name": "EJBComponentDescription.addRemoteTransactionsDependency", "original_string": "protected void addRemoteTransactionsDependency() {\n        this.getConfigurators().add(new ComponentConfigurator() {\n            @Override\n            public void configure(DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration componentConfiguration) throws DeploymentUnitProcessingException {\n                if (this.hasRemoteView((EJBComponentDescription) description)) {\n                    // add a dependency on local transaction service\n                    componentConfiguration.getCreateDependencies().add((sb, cs) -> sb.requires(TxnServices.JBOSS_TXN_REMOTE_TRANSACTION_SERVICE));\n                }\n            }\n\n            /**\n             * Returns true if the passed EJB component description has at least one remote view\n             * @param ejbComponentDescription\n             * @return\n             */\n            private boolean hasRemoteView(final EJBComponentDescription ejbComponentDescription) {\n                final Set<ViewDescription> views = ejbComponentDescription.getViews();\n                for (final ViewDescription view : views) {\n                    if (!(view instanceof EJBViewDescription)) {\n                        continue;\n                    }\n                    final MethodIntf viewType = ((EJBViewDescription) view).getMethodIntf();\n                    if (viewType == MethodIntf.REMOTE || viewType == MethodIntf.HOME) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        });\n    }", "language": "java", "code": "protected void addRemoteTransactionsDependency() {\n        this.getConfigurators().add(new ComponentConfigurator() {\n            @Override\n            public void configure(DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration componentConfiguration) throws DeploymentUnitProcessingException {\n                if (this.hasRemoteView((EJBComponentDescription) description)) {\n                    // add a dependency on local transaction service\n                    componentConfiguration.getCreateDependencies().add((sb, cs) -> sb.requires(TxnServices.JBOSS_TXN_REMOTE_TRANSACTION_SERVICE));\n                }\n            }\n\n            /**\n             * Returns true if the passed EJB component description has at least one remote view\n             * @param ejbComponentDescription\n             * @return\n             */\n            private boolean hasRemoteView(final EJBComponentDescription ejbComponentDescription) {\n                final Set<ViewDescription> views = ejbComponentDescription.getViews();\n                for (final ViewDescription view : views) {\n                    if (!(view instanceof EJBViewDescription)) {\n                        continue;\n                    }\n                    final MethodIntf viewType = ((EJBViewDescription) view).getMethodIntf();\n                    if (viewType == MethodIntf.REMOTE || viewType == MethodIntf.HOME) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        });\n    }", "code_tokens": ["protected", "void", "addRemoteTransactionsDependency", "(", ")", "{", "this", ".", "getConfigurators", "(", ")", ".", "add", "(", "new", "ComponentConfigurator", "(", ")", "{", "@", "Override", "public", "void", "configure", "(", "DeploymentPhaseContext", "context", ",", "ComponentDescription", "description", ",", "ComponentConfiguration", "componentConfiguration", ")", "throws", "DeploymentUnitProcessingException", "{", "if", "(", "this", ".", "hasRemoteView", "(", "(", "EJBComponentDescription", ")", "description", ")", ")", "{", "// add a dependency on local transaction service", "componentConfiguration", ".", "getCreateDependencies", "(", ")", ".", "add", "(", "(", "sb", ",", "cs", ")", "->", "sb", ".", "requires", "(", "TxnServices", ".", "JBOSS_TXN_REMOTE_TRANSACTION_SERVICE", ")", ")", ";", "}", "}", "/**\n             * Returns true if the passed EJB component description has at least one remote view\n             * @param ejbComponentDescription\n             * @return\n             */", "private", "boolean", "hasRemoteView", "(", "final", "EJBComponentDescription", "ejbComponentDescription", ")", "{", "final", "Set", "<", "ViewDescription", ">", "views", "=", "ejbComponentDescription", ".", "getViews", "(", ")", ";", "for", "(", "final", "ViewDescription", "view", ":", "views", ")", "{", "if", "(", "!", "(", "view", "instanceof", "EJBViewDescription", ")", ")", "{", "continue", ";", "}", "final", "MethodIntf", "viewType", "=", "(", "(", "EJBViewDescription", ")", "view", ")", ".", "getMethodIntf", "(", ")", ";", "if", "(", "viewType", "==", "MethodIntf", ".", "REMOTE", "||", "viewType", "==", "MethodIntf", ".", "HOME", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}", "}", ")", ";", "}"], "docstring": "Adds a dependency for the ComponentConfiguration on the remote transaction service if the EJB exposes at least one remote view", "docstring_tokens": ["Adds", "a", "dependency", "for", "the", "ComponentConfiguration", "on", "the", "remote", "transaction", "service", "if", "the", "EJB", "exposes", "at", "least", "one", "remote", "view"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/EJBComponentDescription.java#L527-L556", "partition": "test", "index": 2693, "time": "2011-10-14 20:14:47"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/dd/DeploymentDescriptorMethodProcessor.java", "func_name": "DeploymentDescriptorMethodProcessor.handleStatelessSessionBean", "original_string": "private void handleStatelessSessionBean(final EJBComponentDescription component, final Module module, final DeploymentReflectionIndex reflectionIndex) throws ClassNotFoundException, DeploymentUnitProcessingException {\n\n        final Class<?> componentClass = ClassLoadingUtils.loadClass(component.getComponentClassName(), module);\n        final MethodIdentifier ejbCreateId = MethodIdentifier.getIdentifier(void.class, \"ejbCreate\");\n        final Method ejbCreate = ClassReflectionIndexUtil.findMethod(reflectionIndex, componentClass, ejbCreateId);\n        if (ejbCreate != null) {\n            final InterceptorClassDescription.Builder builder = InterceptorClassDescription.builder();\n            builder.setPostConstruct(ejbCreateId);\n            component.addInterceptorMethodOverride(ejbCreate.getDeclaringClass().getName(), builder.build());\n        }\n        final MethodIdentifier ejbRemoveId = MethodIdentifier.getIdentifier(void.class, \"ejbRemove\");\n        final Method ejbRemove = ClassReflectionIndexUtil.findMethod(reflectionIndex, componentClass, ejbRemoveId);\n        if (ejbRemove != null) {\n            final InterceptorClassDescription.Builder builder = InterceptorClassDescription.builder();\n            builder.setPreDestroy(ejbRemoveId);\n            component.addInterceptorMethodOverride(ejbRemove.getDeclaringClass().getName(), builder.build());\n        }\n    }", "language": "java", "code": "private void handleStatelessSessionBean(final EJBComponentDescription component, final Module module, final DeploymentReflectionIndex reflectionIndex) throws ClassNotFoundException, DeploymentUnitProcessingException {\n\n        final Class<?> componentClass = ClassLoadingUtils.loadClass(component.getComponentClassName(), module);\n        final MethodIdentifier ejbCreateId = MethodIdentifier.getIdentifier(void.class, \"ejbCreate\");\n        final Method ejbCreate = ClassReflectionIndexUtil.findMethod(reflectionIndex, componentClass, ejbCreateId);\n        if (ejbCreate != null) {\n            final InterceptorClassDescription.Builder builder = InterceptorClassDescription.builder();\n            builder.setPostConstruct(ejbCreateId);\n            component.addInterceptorMethodOverride(ejbCreate.getDeclaringClass().getName(), builder.build());\n        }\n        final MethodIdentifier ejbRemoveId = MethodIdentifier.getIdentifier(void.class, \"ejbRemove\");\n        final Method ejbRemove = ClassReflectionIndexUtil.findMethod(reflectionIndex, componentClass, ejbRemoveId);\n        if (ejbRemove != null) {\n            final InterceptorClassDescription.Builder builder = InterceptorClassDescription.builder();\n            builder.setPreDestroy(ejbRemoveId);\n            component.addInterceptorMethodOverride(ejbRemove.getDeclaringClass().getName(), builder.build());\n        }\n    }", "code_tokens": ["private", "void", "handleStatelessSessionBean", "(", "final", "EJBComponentDescription", "component", ",", "final", "Module", "module", ",", "final", "DeploymentReflectionIndex", "reflectionIndex", ")", "throws", "ClassNotFoundException", ",", "DeploymentUnitProcessingException", "{", "final", "Class", "<", "?", ">", "componentClass", "=", "ClassLoadingUtils", ".", "loadClass", "(", "component", ".", "getComponentClassName", "(", ")", ",", "module", ")", ";", "final", "MethodIdentifier", "ejbCreateId", "=", "MethodIdentifier", ".", "getIdentifier", "(", "void", ".", "class", ",", "\"ejbCreate\"", ")", ";", "final", "Method", "ejbCreate", "=", "ClassReflectionIndexUtil", ".", "findMethod", "(", "reflectionIndex", ",", "componentClass", ",", "ejbCreateId", ")", ";", "if", "(", "ejbCreate", "!=", "null", ")", "{", "final", "InterceptorClassDescription", ".", "Builder", "builder", "=", "InterceptorClassDescription", ".", "builder", "(", ")", ";", "builder", ".", "setPostConstruct", "(", "ejbCreateId", ")", ";", "component", ".", "addInterceptorMethodOverride", "(", "ejbCreate", ".", "getDeclaringClass", "(", ")", ".", "getName", "(", ")", ",", "builder", ".", "build", "(", ")", ")", ";", "}", "final", "MethodIdentifier", "ejbRemoveId", "=", "MethodIdentifier", ".", "getIdentifier", "(", "void", ".", "class", ",", "\"ejbRemove\"", ")", ";", "final", "Method", "ejbRemove", "=", "ClassReflectionIndexUtil", ".", "findMethod", "(", "reflectionIndex", ",", "componentClass", ",", "ejbRemoveId", ")", ";", "if", "(", "ejbRemove", "!=", "null", ")", "{", "final", "InterceptorClassDescription", ".", "Builder", "builder", "=", "InterceptorClassDescription", ".", "builder", "(", ")", ";", "builder", ".", "setPreDestroy", "(", "ejbRemoveId", ")", ";", "component", ".", "addInterceptorMethodOverride", "(", "ejbRemove", ".", "getDeclaringClass", "(", ")", ".", "getName", "(", ")", ",", "builder", ".", "build", "(", ")", ")", ";", "}", "}"], "docstring": "Handles setting up the ejbCreate and ejbRemove methods  for stateless session beans and MDB's\n\n@param component       The component\n@param module      The module\n@param reflectionIndex The reflection index", "docstring_tokens": ["Handles", "setting", "up", "the", "ejbCreate", "and", "ejbRemove", "methods", "for", "stateless", "session", "beans", "and", "MDB", "s"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/dd/DeploymentDescriptorMethodProcessor.java#L95-L112", "partition": "test", "index": 2725, "time": "2011-10-17 15:44:17"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getJaxwsEjbs", "original_string": "public static List<EJBEndpoint> getJaxwsEjbs(final DeploymentUnit unit) {\n        final JAXWSDeployment jaxwsDeployment = getOptionalAttachment(unit, WSAttachmentKeys.JAXWS_ENDPOINTS_KEY);\n        return jaxwsDeployment != null ? jaxwsDeployment.getEjbEndpoints() : Collections.<EJBEndpoint>emptyList();\n    }", "language": "java", "code": "public static List<EJBEndpoint> getJaxwsEjbs(final DeploymentUnit unit) {\n        final JAXWSDeployment jaxwsDeployment = getOptionalAttachment(unit, WSAttachmentKeys.JAXWS_ENDPOINTS_KEY);\n        return jaxwsDeployment != null ? jaxwsDeployment.getEjbEndpoints() : Collections.<EJBEndpoint>emptyList();\n    }", "code_tokens": ["public", "static", "List", "<", "EJBEndpoint", ">", "getJaxwsEjbs", "(", "final", "DeploymentUnit", "unit", ")", "{", "final", "JAXWSDeployment", "jaxwsDeployment", "=", "getOptionalAttachment", "(", "unit", ",", "WSAttachmentKeys", ".", "JAXWS_ENDPOINTS_KEY", ")", ";", "return", "jaxwsDeployment", "!=", "null", "?", "jaxwsDeployment", ".", "getEjbEndpoints", "(", ")", ":", "Collections", ".", "<", "EJBEndpoint", ">", "emptyList", "(", ")", ";", "}"], "docstring": "Gets list of JAXWS EJBs meta data.\n\n@param unit deployment unit\n@return list of JAXWS EJBs meta data", "docstring_tokens": ["Gets", "list", "of", "JAXWS", "EJBs", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L91-L94", "partition": "test", "index": 2665, "time": "2011-10-20 07:54:04"}
{"repo": "wildfly/wildfly", "path": "legacy/web/src/main/java/org/jboss/as/web/WebSubsystemParser.java", "func_name": "WebSubsystemParser.writeAttribute", "original_string": "private boolean writeAttribute(XMLExtendedStreamWriter writer, SimpleAttributeDefinition attribute, ModelNode node,\n                                   boolean startWriten, String origin) throws XMLStreamException {\n\n        if (attribute.isMarshallable(node, false)) {\n            if (!startWriten) {\n                startWriten = true;\n                writer.writeStartElement(origin);\n            }\n            attribute.marshallAsAttribute(node, false, writer);\n        }\n        return startWriten;\n    }", "language": "java", "code": "private boolean writeAttribute(XMLExtendedStreamWriter writer, SimpleAttributeDefinition attribute, ModelNode node,\n                                   boolean startWriten, String origin) throws XMLStreamException {\n\n        if (attribute.isMarshallable(node, false)) {\n            if (!startWriten) {\n                startWriten = true;\n                writer.writeStartElement(origin);\n            }\n            attribute.marshallAsAttribute(node, false, writer);\n        }\n        return startWriten;\n    }", "code_tokens": ["private", "boolean", "writeAttribute", "(", "XMLExtendedStreamWriter", "writer", ",", "SimpleAttributeDefinition", "attribute", ",", "ModelNode", "node", ",", "boolean", "startWriten", ",", "String", "origin", ")", "throws", "XMLStreamException", "{", "if", "(", "attribute", ".", "isMarshallable", "(", "node", ",", "false", ")", ")", "{", "if", "(", "!", "startWriten", ")", "{", "startWriten", "=", "true", ";", "writer", ".", "writeStartElement", "(", "origin", ")", ";", "}", "attribute", ".", "marshallAsAttribute", "(", "node", ",", "false", ",", "writer", ")", ";", "}", "return", "startWriten", ";", "}"], "docstring": "todo, attribute.marshallAsAttribute should return boolean", "docstring_tokens": ["todo", "attribute", ".", "marshallAsAttribute", "should", "return", "boolean"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/web/src/main/java/org/jboss/as/web/WebSubsystemParser.java#L1171-L1182", "partition": "test", "index": 2762, "time": "2011-10-20 13:06:08"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getJaxwsPojos", "original_string": "public static List<POJOEndpoint> getJaxwsPojos(final DeploymentUnit unit) {\n        final JAXWSDeployment jaxwsDeployment = unit.getAttachment(WSAttachmentKeys.JAXWS_ENDPOINTS_KEY);\n        return jaxwsDeployment != null ? jaxwsDeployment.getPojoEndpoints() : Collections.<POJOEndpoint>emptyList();\n    }", "language": "java", "code": "public static List<POJOEndpoint> getJaxwsPojos(final DeploymentUnit unit) {\n        final JAXWSDeployment jaxwsDeployment = unit.getAttachment(WSAttachmentKeys.JAXWS_ENDPOINTS_KEY);\n        return jaxwsDeployment != null ? jaxwsDeployment.getPojoEndpoints() : Collections.<POJOEndpoint>emptyList();\n    }", "code_tokens": ["public", "static", "List", "<", "POJOEndpoint", ">", "getJaxwsPojos", "(", "final", "DeploymentUnit", "unit", ")", "{", "final", "JAXWSDeployment", "jaxwsDeployment", "=", "unit", ".", "getAttachment", "(", "WSAttachmentKeys", ".", "JAXWS_ENDPOINTS_KEY", ")", ";", "return", "jaxwsDeployment", "!=", "null", "?", "jaxwsDeployment", ".", "getPojoEndpoints", "(", ")", ":", "Collections", ".", "<", "POJOEndpoint", ">", "emptyList", "(", ")", ";", "}"], "docstring": "Gets list of JAXWS POJOs meta data.\n\n@param unit deployment unit\n@return list of JAXWS POJOs meta data", "docstring_tokens": ["Gets", "list", "of", "JAXWS", "POJOs", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L102-L105", "partition": "test", "index": 2666, "time": "2011-10-24 14:10:03"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CorbaUtils.java", "func_name": "CorbaUtils.initAppletORB", "original_string": "private static ORB initAppletORB(Object applet, Properties orbProp) {\n        try {\n            Class<?> appletClass = Class.forName(\"java.applet.Applet\", true, null);\n            if (!appletClass.isInstance(applet)) {\n                throw new ClassCastException(applet.getClass().getName());\n            }\n\n            // invoke the static method ORB.init(applet, orbProp);\n            Method method = ORB.class.getMethod(\"init\", appletClass, Properties.class);\n            return (ORB) method.invoke(null, applet, orbProp);\n        } catch (ClassNotFoundException e) {\n            // java.applet.Applet doesn't exist and the applet parameter is\n            // non-null; so throw CCE\n            throw new ClassCastException(applet.getClass().getName());\n        } catch (NoSuchMethodException e) {\n            throw new AssertionError(e);\n        } catch (InvocationTargetException e) {\n            Throwable cause = e.getCause();\n            if (cause instanceof RuntimeException) {\n                throw (RuntimeException) cause;\n            } else if (cause instanceof Error) {\n                throw (Error) cause;\n            }\n            throw new AssertionError(e);\n        } catch (IllegalAccessException iae) {\n            throw new AssertionError(iae);\n        }\n    }", "language": "java", "code": "private static ORB initAppletORB(Object applet, Properties orbProp) {\n        try {\n            Class<?> appletClass = Class.forName(\"java.applet.Applet\", true, null);\n            if (!appletClass.isInstance(applet)) {\n                throw new ClassCastException(applet.getClass().getName());\n            }\n\n            // invoke the static method ORB.init(applet, orbProp);\n            Method method = ORB.class.getMethod(\"init\", appletClass, Properties.class);\n            return (ORB) method.invoke(null, applet, orbProp);\n        } catch (ClassNotFoundException e) {\n            // java.applet.Applet doesn't exist and the applet parameter is\n            // non-null; so throw CCE\n            throw new ClassCastException(applet.getClass().getName());\n        } catch (NoSuchMethodException e) {\n            throw new AssertionError(e);\n        } catch (InvocationTargetException e) {\n            Throwable cause = e.getCause();\n            if (cause instanceof RuntimeException) {\n                throw (RuntimeException) cause;\n            } else if (cause instanceof Error) {\n                throw (Error) cause;\n            }\n            throw new AssertionError(e);\n        } catch (IllegalAccessException iae) {\n            throw new AssertionError(iae);\n        }\n    }", "code_tokens": ["private", "static", "ORB", "initAppletORB", "(", "Object", "applet", ",", "Properties", "orbProp", ")", "{", "try", "{", "Class", "<", "?", ">", "appletClass", "=", "Class", ".", "forName", "(", "\"java.applet.Applet\"", ",", "true", ",", "null", ")", ";", "if", "(", "!", "appletClass", ".", "isInstance", "(", "applet", ")", ")", "{", "throw", "new", "ClassCastException", "(", "applet", ".", "getClass", "(", ")", ".", "getName", "(", ")", ")", ";", "}", "// invoke the static method ORB.init(applet, orbProp);", "Method", "method", "=", "ORB", ".", "class", ".", "getMethod", "(", "\"init\"", ",", "appletClass", ",", "Properties", ".", "class", ")", ";", "return", "(", "ORB", ")", "method", ".", "invoke", "(", "null", ",", "applet", ",", "orbProp", ")", ";", "}", "catch", "(", "ClassNotFoundException", "e", ")", "{", "// java.applet.Applet doesn't exist and the applet parameter is", "// non-null; so throw CCE", "throw", "new", "ClassCastException", "(", "applet", ".", "getClass", "(", ")", ".", "getName", "(", ")", ")", ";", "}", "catch", "(", "NoSuchMethodException", "e", ")", "{", "throw", "new", "AssertionError", "(", "e", ")", ";", "}", "catch", "(", "InvocationTargetException", "e", ")", "{", "Throwable", "cause", "=", "e", ".", "getCause", "(", ")", ";", "if", "(", "cause", "instanceof", "RuntimeException", ")", "{", "throw", "(", "RuntimeException", ")", "cause", ";", "}", "else", "if", "(", "cause", "instanceof", "Error", ")", "{", "throw", "(", "Error", ")", "cause", ";", "}", "throw", "new", "AssertionError", "(", "e", ")", ";", "}", "catch", "(", "IllegalAccessException", "iae", ")", "{", "throw", "new", "AssertionError", "(", "iae", ")", ";", "}", "}"], "docstring": "This method returns a new ORB instance for the given applet\nwithout creating a static dependency on java.applet.", "docstring_tokens": ["This", "method", "returns", "a", "new", "ORB", "instance", "for", "the", "given", "applet", "without", "creating", "a", "static", "dependency", "on", "java", ".", "applet", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CorbaUtils.java#L211-L238", "partition": "test", "index": 2599, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.isMutator", "original_string": "protected boolean isMutator(Method m) {\n        // JBAS-4473, look for set<name>()\n        String name = m.getName();\n        if (!(name.startsWith(\"set\") && name.length() > \"set\".length()))\n            return false;\n        if (m.getReturnType() != Void.TYPE)\n            return false;\n        if (m.getParameterTypes().length != 1)\n            return false;\n        return hasNonAppExceptions(m);\n    }", "language": "java", "code": "protected boolean isMutator(Method m) {\n        // JBAS-4473, look for set<name>()\n        String name = m.getName();\n        if (!(name.startsWith(\"set\") && name.length() > \"set\".length()))\n            return false;\n        if (m.getReturnType() != Void.TYPE)\n            return false;\n        if (m.getParameterTypes().length != 1)\n            return false;\n        return hasNonAppExceptions(m);\n    }", "code_tokens": ["protected", "boolean", "isMutator", "(", "Method", "m", ")", "{", "// JBAS-4473, look for set<name>()", "String", "name", "=", "m", ".", "getName", "(", ")", ";", "if", "(", "!", "(", "name", ".", "startsWith", "(", "\"set\"", ")", "&&", "name", ".", "length", "(", ")", ">", "\"set\"", ".", "length", "(", ")", ")", ")", "return", "false", ";", "if", "(", "m", ".", "getReturnType", "(", ")", "!=", "Void", ".", "TYPE", ")", "return", "false", ";", "if", "(", "m", ".", "getParameterTypes", "(", ")", ".", "length", "!=", "1", ")", "return", "false", ";", "return", "hasNonAppExceptions", "(", "m", ")", ";", "}"], "docstring": "Check if a method is a mutator.", "docstring_tokens": ["Check", "if", "a", "method", "is", "a", "mutator", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L311-L321", "partition": "test", "index": 2749, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.fixupCaseNames", "original_string": "protected void fixupCaseNames()\n            throws RMIIIOPViolationException {\n        ArrayList entries = getContainedEntries();\n        boolean[] clash = new boolean[entries.size()];\n        String[] upperNames = new String[entries.size()];\n\n        for (int i = 0; i < entries.size(); ++i) {\n            AbstractAnalysis aa = (AbstractAnalysis) entries.get(i);\n\n            clash[i] = false;\n            upperNames[i] = aa.getIDLName().toUpperCase(Locale.ENGLISH);\n\n            for (int j = 0; j < i; ++j) {\n                if (upperNames[i].equals(upperNames[j])) {\n                    clash[i] = true;\n                    clash[j] = true;\n                }\n            }\n        }\n\n        for (int i = 0; i < entries.size(); ++i) {\n            if (!clash[i])\n                continue;\n\n            AbstractAnalysis aa = (AbstractAnalysis) entries.get(i);\n            boolean noUpper = true;\n            String name = aa.getIDLName();\n            StringBuffer b = new StringBuffer(name);\n            b.append('_');\n            for (int j = 0; j < name.length(); ++j) {\n                if (!Character.isUpperCase(name.charAt(j)))\n                    continue;\n                if (noUpper)\n                    noUpper = false;\n                else\n                    b.append('_');\n                b.append(j);\n            }\n\n            aa.setIDLName(b.toString());\n        }\n    }", "language": "java", "code": "protected void fixupCaseNames()\n            throws RMIIIOPViolationException {\n        ArrayList entries = getContainedEntries();\n        boolean[] clash = new boolean[entries.size()];\n        String[] upperNames = new String[entries.size()];\n\n        for (int i = 0; i < entries.size(); ++i) {\n            AbstractAnalysis aa = (AbstractAnalysis) entries.get(i);\n\n            clash[i] = false;\n            upperNames[i] = aa.getIDLName().toUpperCase(Locale.ENGLISH);\n\n            for (int j = 0; j < i; ++j) {\n                if (upperNames[i].equals(upperNames[j])) {\n                    clash[i] = true;\n                    clash[j] = true;\n                }\n            }\n        }\n\n        for (int i = 0; i < entries.size(); ++i) {\n            if (!clash[i])\n                continue;\n\n            AbstractAnalysis aa = (AbstractAnalysis) entries.get(i);\n            boolean noUpper = true;\n            String name = aa.getIDLName();\n            StringBuffer b = new StringBuffer(name);\n            b.append('_');\n            for (int j = 0; j < name.length(); ++j) {\n                if (!Character.isUpperCase(name.charAt(j)))\n                    continue;\n                if (noUpper)\n                    noUpper = false;\n                else\n                    b.append('_');\n                b.append(j);\n            }\n\n            aa.setIDLName(b.toString());\n        }\n    }", "code_tokens": ["protected", "void", "fixupCaseNames", "(", ")", "throws", "RMIIIOPViolationException", "{", "ArrayList", "entries", "=", "getContainedEntries", "(", ")", ";", "boolean", "[", "]", "clash", "=", "new", "boolean", "[", "entries", ".", "size", "(", ")", "]", ";", "String", "[", "]", "upperNames", "=", "new", "String", "[", "entries", ".", "size", "(", ")", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "entries", ".", "size", "(", ")", ";", "++", "i", ")", "{", "AbstractAnalysis", "aa", "=", "(", "AbstractAnalysis", ")", "entries", ".", "get", "(", "i", ")", ";", "clash", "[", "i", "]", "=", "false", ";", "upperNames", "[", "i", "]", "=", "aa", ".", "getIDLName", "(", ")", ".", "toUpperCase", "(", "Locale", ".", "ENGLISH", ")", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "i", ";", "++", "j", ")", "{", "if", "(", "upperNames", "[", "i", "]", ".", "equals", "(", "upperNames", "[", "j", "]", ")", ")", "{", "clash", "[", "i", "]", "=", "true", ";", "clash", "[", "j", "]", "=", "true", ";", "}", "}", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "entries", ".", "size", "(", ")", ";", "++", "i", ")", "{", "if", "(", "!", "clash", "[", "i", "]", ")", "continue", ";", "AbstractAnalysis", "aa", "=", "(", "AbstractAnalysis", ")", "entries", ".", "get", "(", "i", ")", ";", "boolean", "noUpper", "=", "true", ";", "String", "name", "=", "aa", ".", "getIDLName", "(", ")", ";", "StringBuffer", "b", "=", "new", "StringBuffer", "(", "name", ")", ";", "b", ".", "append", "(", "'", "'", ")", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "name", ".", "length", "(", ")", ";", "++", "j", ")", "{", "if", "(", "!", "Character", ".", "isUpperCase", "(", "name", ".", "charAt", "(", "j", ")", ")", ")", "continue", ";", "if", "(", "noUpper", ")", "noUpper", "=", "false", ";", "else", "b", ".", "append", "(", "'", "'", ")", ";", "b", ".", "append", "(", "j", ")", ";", "}", "aa", ".", "setIDLName", "(", "b", ".", "toString", "(", ")", ")", ";", "}", "}"], "docstring": "Fixup names differing only in case.\nAs specified in section 1.3.2.7.", "docstring_tokens": ["Fixup", "names", "differing", "only", "in", "case", ".", "As", "specified", "in", "section", "1", ".", "3", ".", "2", ".", "7", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L644-L685", "partition": "test", "index": 2754, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/RmiIdlUtil.java", "func_name": "RmiIdlUtil.isAllFieldsPublic", "original_string": "public static boolean isAllFieldsPublic(Class c) {\n        try {\n            final Field[] list = c.getFields();\n            for (int i = 0; i < list.length; i++)\n                if (!Modifier.isPublic(list[i].getModifiers()))\n                    return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }", "language": "java", "code": "public static boolean isAllFieldsPublic(Class c) {\n        try {\n            final Field[] list = c.getFields();\n            for (int i = 0; i < list.length; i++)\n                if (!Modifier.isPublic(list[i].getModifiers()))\n                    return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "isAllFieldsPublic", "(", "Class", "c", ")", "{", "try", "{", "final", "Field", "[", "]", "list", "=", "c", ".", "getFields", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "list", ".", "length", ";", "i", "++", ")", "if", "(", "!", "Modifier", ".", "isPublic", "(", "list", "[", "i", "]", ".", "getModifiers", "(", ")", ")", ")", "return", "false", ";", "}", "catch", "(", "Exception", "e", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "Checks whether all the fields in the class are declared as public.", "docstring_tokens": ["Checks", "whether", "all", "the", "fields", "in", "the", "class", "are", "declared", "as", "public", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/RmiIdlUtil.java#L145-L155", "partition": "test", "index": 2685, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java", "func_name": "Util.isReservedIDLKeyword", "original_string": "private static boolean isReservedIDLKeyword(String s) {\n        // TODO: faster lookup\n        for (int i = 0; i < reservedIDLKeywords.length; ++i)\n            if (reservedIDLKeywords[i].equals(s))\n                return true;\n        return false;\n    }", "language": "java", "code": "private static boolean isReservedIDLKeyword(String s) {\n        // TODO: faster lookup\n        for (int i = 0; i < reservedIDLKeywords.length; ++i)\n            if (reservedIDLKeywords[i].equals(s))\n                return true;\n        return false;\n    }", "code_tokens": ["private", "static", "boolean", "isReservedIDLKeyword", "(", "String", "s", ")", "{", "// TODO: faster lookup", "for", "(", "int", "i", "=", "0", ";", "i", "<", "reservedIDLKeywords", ".", "length", ";", "++", "i", ")", "if", "(", "reservedIDLKeywords", "[", "i", "]", ".", "equals", "(", "s", ")", ")", "return", "true", ";", "return", "false", ";", "}"], "docstring": "Determine if the argument is a reserved IDL keyword.", "docstring_tokens": ["Determine", "if", "the", "argument", "is", "a", "reserved", "IDL", "keyword", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java#L385-L391", "partition": "test", "index": 2632, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.lookupLink", "original_string": "public java.lang.Object lookupLink(String name) throws NamingException {\n        return lookupLink(new CompositeName(name));\n    }", "language": "java", "code": "public java.lang.Object lookupLink(String name) throws NamingException {\n        return lookupLink(new CompositeName(name));\n    }", "code_tokens": ["public", "java", ".", "lang", ".", "Object", "lookupLink", "(", "String", "name", ")", "throws", "NamingException", "{", "return", "lookupLink", "(", "new", "CompositeName", "(", "name", ")", ")", ";", "}"], "docstring": "Is mapped to resolve in the COS Naming api.\n\n@param name string\n@return the resolved object.\n@throws NamingException See lookup.", "docstring_tokens": ["Is", "mapped", "to", "resolve", "in", "the", "COS", "Naming", "api", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L985-L987", "partition": "test", "index": 2779, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.fixupOverloadedOperationNames", "original_string": "protected void fixupOverloadedOperationNames()\n            throws RMIIIOPViolationException {\n        for (int i = 0; i < methods.length; ++i) {\n            if ((m_flags[i] & M_OVERLOADED) == 0)\n                continue;\n\n            // Find the operation\n            OperationAnalysis oa = null;\n            String javaName = methods[i].getName();\n            for (int opIdx = 0; oa == null && opIdx < operations.length; ++opIdx)\n                if (operations[opIdx].getMethod().equals(methods[i]))\n                    oa = operations[opIdx];\n\n            if (oa == null)\n                continue; // This method is not mapped.\n\n            // Calculate new IDL name\n            ParameterAnalysis[] params = oa.getParameters();\n            StringBuffer b = new StringBuffer(oa.getIDLName());\n            if (params.length == 0)\n                b.append(\"__\");\n            for (int j = 0; j < params.length; ++j) {\n                String s = params[j].getTypeIDLName();\n\n                if (s.startsWith(\"::\"))\n                    s = s.substring(2);\n\n                if (s.startsWith(\"_\")) {\n                    // remove leading underscore in IDL escaped identifier\n                    s = s.substring(1);\n                }\n\n                b.append('_');\n\n                while (!\"\".equals(s)) {\n                    int idx = s.indexOf(\"::\");\n\n                    b.append('_');\n\n                    if (idx == -1) {\n                        b.append(s);\n                        s = \"\";\n                    } else {\n                        b.append(s.substring(0, idx));\n                        if (s.length() > idx + 2 && s.charAt(idx + 2) == '_') {\n                            // remove leading underscore in IDL escaped identifier\n                            s = s.substring(idx + 3);\n                        } else {\n                            s = s.substring(idx + 2);\n                        }\n                    }\n                }\n            }\n\n            // Set new IDL name\n            oa.setIDLName(b.toString());\n        }\n    }", "language": "java", "code": "protected void fixupOverloadedOperationNames()\n            throws RMIIIOPViolationException {\n        for (int i = 0; i < methods.length; ++i) {\n            if ((m_flags[i] & M_OVERLOADED) == 0)\n                continue;\n\n            // Find the operation\n            OperationAnalysis oa = null;\n            String javaName = methods[i].getName();\n            for (int opIdx = 0; oa == null && opIdx < operations.length; ++opIdx)\n                if (operations[opIdx].getMethod().equals(methods[i]))\n                    oa = operations[opIdx];\n\n            if (oa == null)\n                continue; // This method is not mapped.\n\n            // Calculate new IDL name\n            ParameterAnalysis[] params = oa.getParameters();\n            StringBuffer b = new StringBuffer(oa.getIDLName());\n            if (params.length == 0)\n                b.append(\"__\");\n            for (int j = 0; j < params.length; ++j) {\n                String s = params[j].getTypeIDLName();\n\n                if (s.startsWith(\"::\"))\n                    s = s.substring(2);\n\n                if (s.startsWith(\"_\")) {\n                    // remove leading underscore in IDL escaped identifier\n                    s = s.substring(1);\n                }\n\n                b.append('_');\n\n                while (!\"\".equals(s)) {\n                    int idx = s.indexOf(\"::\");\n\n                    b.append('_');\n\n                    if (idx == -1) {\n                        b.append(s);\n                        s = \"\";\n                    } else {\n                        b.append(s.substring(0, idx));\n                        if (s.length() > idx + 2 && s.charAt(idx + 2) == '_') {\n                            // remove leading underscore in IDL escaped identifier\n                            s = s.substring(idx + 3);\n                        } else {\n                            s = s.substring(idx + 2);\n                        }\n                    }\n                }\n            }\n\n            // Set new IDL name\n            oa.setIDLName(b.toString());\n        }\n    }", "code_tokens": ["protected", "void", "fixupOverloadedOperationNames", "(", ")", "throws", "RMIIIOPViolationException", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "methods", ".", "length", ";", "++", "i", ")", "{", "if", "(", "(", "m_flags", "[", "i", "]", "&", "M_OVERLOADED", ")", "==", "0", ")", "continue", ";", "// Find the operation", "OperationAnalysis", "oa", "=", "null", ";", "String", "javaName", "=", "methods", "[", "i", "]", ".", "getName", "(", ")", ";", "for", "(", "int", "opIdx", "=", "0", ";", "oa", "==", "null", "&&", "opIdx", "<", "operations", ".", "length", ";", "++", "opIdx", ")", "if", "(", "operations", "[", "opIdx", "]", ".", "getMethod", "(", ")", ".", "equals", "(", "methods", "[", "i", "]", ")", ")", "oa", "=", "operations", "[", "opIdx", "]", ";", "if", "(", "oa", "==", "null", ")", "continue", ";", "// This method is not mapped.", "// Calculate new IDL name", "ParameterAnalysis", "[", "]", "params", "=", "oa", ".", "getParameters", "(", ")", ";", "StringBuffer", "b", "=", "new", "StringBuffer", "(", "oa", ".", "getIDLName", "(", ")", ")", ";", "if", "(", "params", ".", "length", "==", "0", ")", "b", ".", "append", "(", "\"__\"", ")", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "params", ".", "length", ";", "++", "j", ")", "{", "String", "s", "=", "params", "[", "j", "]", ".", "getTypeIDLName", "(", ")", ";", "if", "(", "s", ".", "startsWith", "(", "\"::\"", ")", ")", "s", "=", "s", ".", "substring", "(", "2", ")", ";", "if", "(", "s", ".", "startsWith", "(", "\"_\"", ")", ")", "{", "// remove leading underscore in IDL escaped identifier", "s", "=", "s", ".", "substring", "(", "1", ")", ";", "}", "b", ".", "append", "(", "'", "'", ")", ";", "while", "(", "!", "\"\"", ".", "equals", "(", "s", ")", ")", "{", "int", "idx", "=", "s", ".", "indexOf", "(", "\"::\"", ")", ";", "b", ".", "append", "(", "'", "'", ")", ";", "if", "(", "idx", "==", "-", "1", ")", "{", "b", ".", "append", "(", "s", ")", ";", "s", "=", "\"\"", ";", "}", "else", "{", "b", ".", "append", "(", "s", ".", "substring", "(", "0", ",", "idx", ")", ")", ";", "if", "(", "s", ".", "length", "(", ")", ">", "idx", "+", "2", "&&", "s", ".", "charAt", "(", "idx", "+", "2", ")", "==", "'", "'", ")", "{", "// remove leading underscore in IDL escaped identifier", "s", "=", "s", ".", "substring", "(", "idx", "+", "3", ")", ";", "}", "else", "{", "s", "=", "s", ".", "substring", "(", "idx", "+", "2", ")", ";", "}", "}", "}", "}", "// Set new IDL name", "oa", ".", "setIDLName", "(", "b", ".", "toString", "(", ")", ")", ";", "}", "}"], "docstring": "Fixup overloaded operation names.\nAs specified in section 1.3.2.6.", "docstring_tokens": ["Fixup", "overloaded", "operation", "names", ".", "As", "specified", "in", "section", "1", ".", "3", ".", "2", ".", "6", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L581-L638", "partition": "test", "index": 2753, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.attributeWriteName", "original_string": "protected String attributeWriteName(String name) {\n        if (name.startsWith(\"set\"))\n            name = name.substring(3);\n        else\n            throw IIOPLogger.ROOT_LOGGER.notAnAccessor(name);\n\n        return name;\n    }", "language": "java", "code": "protected String attributeWriteName(String name) {\n        if (name.startsWith(\"set\"))\n            name = name.substring(3);\n        else\n            throw IIOPLogger.ROOT_LOGGER.notAnAccessor(name);\n\n        return name;\n    }", "code_tokens": ["protected", "String", "attributeWriteName", "(", "String", "name", ")", "{", "if", "(", "name", ".", "startsWith", "(", "\"set\"", ")", ")", "name", "=", "name", ".", "substring", "(", "3", ")", ";", "else", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notAnAccessor", "(", "name", ")", ";", "return", "name", ";", "}"], "docstring": "Convert an attribute write method name in Java format to\nan attribute name in Java format.", "docstring_tokens": ["Convert", "an", "attribute", "write", "method", "name", "in", "Java", "format", "to", "an", "attribute", "name", "in", "Java", "format", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L490-L497", "partition": "test", "index": 2752, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.addToEnvironment", "original_string": "public java.lang.Object addToEnvironment(String propName,\n                                             java.lang.Object propValue)\n            throws NamingException {\n        if (_env == null) {\n            _env = new Hashtable(7, 0.75f);\n        } else {\n            // copy-on-write\n            _env = (Hashtable) _env.clone();\n        }\n\n        return _env.put(propName, propValue);\n    }", "language": "java", "code": "public java.lang.Object addToEnvironment(String propName,\n                                             java.lang.Object propValue)\n            throws NamingException {\n        if (_env == null) {\n            _env = new Hashtable(7, 0.75f);\n        } else {\n            // copy-on-write\n            _env = (Hashtable) _env.clone();\n        }\n\n        return _env.put(propName, propValue);\n    }", "code_tokens": ["public", "java", ".", "lang", ".", "Object", "addToEnvironment", "(", "String", "propName", ",", "java", ".", "lang", ".", "Object", "propValue", ")", "throws", "NamingException", "{", "if", "(", "_env", "==", "null", ")", "{", "_env", "=", "new", "Hashtable", "(", "7", ",", "0.75f", ")", ";", "}", "else", "{", "// copy-on-write", "_env", "=", "(", "Hashtable", ")", "_env", ".", "clone", "(", ")", ";", "}", "return", "_env", ".", "put", "(", "propName", ",", "propValue", ")", ";", "}"], "docstring": "Adds to the environment for the current context.\nRecord change but do not reinitialize ORB.\n\n@param propName The property name.\n@param propValue  The ORB.\n@return the previous value of this property if any.", "docstring_tokens": ["Adds", "to", "the", "environment", "for", "the", "current", "context", ".", "Record", "change", "but", "do", "not", "reinitialize", "ORB", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L1055-L1066", "partition": "test", "index": 2780, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CorbaUtils.java", "func_name": "CorbaUtils.initMethodHandles", "original_string": "private static void initMethodHandles() throws ClassNotFoundException {\n        // Get javax.rmi.CORBA.Stub class\n        corbaStubClass = Class.forName(\"javax.rmi.CORBA.Stub\");\n\n        // Get javax.rmi.CORBA.Stub.connect(org.omg.CORBA.ORB) method\n\n        try {\n            connectMethod = corbaStubClass.getMethod(\"connect\", new Class[]{org.omg.CORBA.ORB.class});\n        } catch (NoSuchMethodException e) {\n            throw IIOPLogger.ROOT_LOGGER.noMethodDefForStubConnect();\n        }\n\n        // Get javax.rmi.PortableRemoteObject method\n        Class proClass = Class.forName(\"javax.rmi.PortableRemoteObject\");\n\n        // Get javax.rmi.PortableRemoteObject(java.rmi.Remote) method\n        try {\n            toStubMethod = proClass.getMethod(\"toStub\", new Class[]{java.rmi.Remote.class});\n\n        } catch (NoSuchMethodException e) {\n            throw IIOPLogger.ROOT_LOGGER.noMethodDefForPortableRemoteObjectToStub();\n        }\n    }", "language": "java", "code": "private static void initMethodHandles() throws ClassNotFoundException {\n        // Get javax.rmi.CORBA.Stub class\n        corbaStubClass = Class.forName(\"javax.rmi.CORBA.Stub\");\n\n        // Get javax.rmi.CORBA.Stub.connect(org.omg.CORBA.ORB) method\n\n        try {\n            connectMethod = corbaStubClass.getMethod(\"connect\", new Class[]{org.omg.CORBA.ORB.class});\n        } catch (NoSuchMethodException e) {\n            throw IIOPLogger.ROOT_LOGGER.noMethodDefForStubConnect();\n        }\n\n        // Get javax.rmi.PortableRemoteObject method\n        Class proClass = Class.forName(\"javax.rmi.PortableRemoteObject\");\n\n        // Get javax.rmi.PortableRemoteObject(java.rmi.Remote) method\n        try {\n            toStubMethod = proClass.getMethod(\"toStub\", new Class[]{java.rmi.Remote.class});\n\n        } catch (NoSuchMethodException e) {\n            throw IIOPLogger.ROOT_LOGGER.noMethodDefForPortableRemoteObjectToStub();\n        }\n    }", "code_tokens": ["private", "static", "void", "initMethodHandles", "(", ")", "throws", "ClassNotFoundException", "{", "// Get javax.rmi.CORBA.Stub class", "corbaStubClass", "=", "Class", ".", "forName", "(", "\"javax.rmi.CORBA.Stub\"", ")", ";", "// Get javax.rmi.CORBA.Stub.connect(org.omg.CORBA.ORB) method", "try", "{", "connectMethod", "=", "corbaStubClass", ".", "getMethod", "(", "\"connect\"", ",", "new", "Class", "[", "]", "{", "org", ".", "omg", ".", "CORBA", ".", "ORB", ".", "class", "}", ")", ";", "}", "catch", "(", "NoSuchMethodException", "e", ")", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "noMethodDefForStubConnect", "(", ")", ";", "}", "// Get javax.rmi.PortableRemoteObject method", "Class", "proClass", "=", "Class", ".", "forName", "(", "\"javax.rmi.PortableRemoteObject\"", ")", ";", "// Get javax.rmi.PortableRemoteObject(java.rmi.Remote) method", "try", "{", "toStubMethod", "=", "proClass", ".", "getMethod", "(", "\"toStub\"", ",", "new", "Class", "[", "]", "{", "java", ".", "rmi", ".", "Remote", ".", "class", "}", ")", ";", "}", "catch", "(", "NoSuchMethodException", "e", ")", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "noMethodDefForPortableRemoteObjectToStub", "(", ")", ";", "}", "}"], "docstring": "Initializes reflection method handles for RMI-IIOP.\n\n@throws ClassNotFoundException javax.rmi.CORBA.* not available", "docstring_tokens": ["Initializes", "reflection", "method", "handles", "for", "RMI", "-", "IIOP", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CorbaUtils.java#L250-L272", "partition": "test", "index": 2600, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.attributeReadName", "original_string": "protected String attributeReadName(String name) {\n        if (name.startsWith(\"get\"))\n            name = name.substring(3);\n        else if (name.startsWith(\"is\"))\n            name = name.substring(2);\n        else\n            throw IIOPLogger.ROOT_LOGGER.notAnAccessor(name);\n\n        return name;\n    }", "language": "java", "code": "protected String attributeReadName(String name) {\n        if (name.startsWith(\"get\"))\n            name = name.substring(3);\n        else if (name.startsWith(\"is\"))\n            name = name.substring(2);\n        else\n            throw IIOPLogger.ROOT_LOGGER.notAnAccessor(name);\n\n        return name;\n    }", "code_tokens": ["protected", "String", "attributeReadName", "(", "String", "name", ")", "{", "if", "(", "name", ".", "startsWith", "(", "\"get\"", ")", ")", "name", "=", "name", ".", "substring", "(", "3", ")", ";", "else", "if", "(", "name", ".", "startsWith", "(", "\"is\"", ")", ")", "name", "=", "name", ".", "substring", "(", "2", ")", ";", "else", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notAnAccessor", "(", "name", ")", ";", "return", "name", ";", "}"], "docstring": "Convert an attribute read method name in Java format to\nan attribute name in Java format.", "docstring_tokens": ["Convert", "an", "attribute", "read", "method", "name", "in", "Java", "format", "to", "an", "attribute", "name", "in", "Java", "format", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L475-L484", "partition": "test", "index": 2751, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.hasNonAppExceptions", "original_string": "protected boolean hasNonAppExceptions(Method m) {\n        Class[] ex = m.getExceptionTypes();\n\n        for (int i = 0; i < ex.length; ++i)\n            if (!java.rmi.RemoteException.class.isAssignableFrom(ex[i]))\n                return false;\n        return true;\n    }", "language": "java", "code": "protected boolean hasNonAppExceptions(Method m) {\n        Class[] ex = m.getExceptionTypes();\n\n        for (int i = 0; i < ex.length; ++i)\n            if (!java.rmi.RemoteException.class.isAssignableFrom(ex[i]))\n                return false;\n        return true;\n    }", "code_tokens": ["protected", "boolean", "hasNonAppExceptions", "(", "Method", "m", ")", "{", "Class", "[", "]", "ex", "=", "m", ".", "getExceptionTypes", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "ex", ".", "length", ";", "++", "i", ")", "if", "(", "!", "java", ".", "rmi", ".", "RemoteException", ".", "class", ".", "isAssignableFrom", "(", "ex", "[", "i", "]", ")", ")", "return", "false", ";", "return", "true", ";", "}"], "docstring": "Check if a method throws anything checked other than\njava.rmi.RemoteException and its subclasses.", "docstring_tokens": ["Check", "if", "a", "method", "throws", "anything", "checked", "other", "than", "java", ".", "rmi", ".", "RemoteException", "and", "its", "subclasses", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L327-L334", "partition": "test", "index": 2750, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CorbaUtils.java", "func_name": "CorbaUtils.getOrb", "original_string": "public static ORB getOrb(String server, int port, Hashtable env) {\n        // See if we can get info from environment\n        Properties orbProp;\n\n        // Extract any org.omg.CORBA properties from environment\n        if (env != null) {\n            // Get all String properties\n            orbProp = new Properties();\n            final Enumeration envProp = env.keys();\n            while (envProp.hasMoreElements()) {\n                String key = (String) envProp.nextElement();\n                Object val = env.get(key);\n                if (val instanceof String) {\n                    orbProp.put(key, val);\n                }\n            }\n            final Enumeration mainProps = orbProperties.keys();\n            while (mainProps.hasMoreElements()) {\n                String key = (String) mainProps.nextElement();\n                Object val = orbProperties.get(key);\n                if (val instanceof String) {\n                    orbProp.put(key, val);\n                }\n            }\n        } else {\n            orbProp = orbProperties;\n        }\n\n        if (server != null) {\n            orbProp.put(\"org.omg.CORBA.ORBInitialHost\", server);\n        }\n        if (port >= 0) {\n            orbProp.put(\"org.omg.CORBA.ORBInitialPort\", \"\" + port);\n        }\n\n        // Get Applet from environment\n        if (env != null) {\n            Object applet = env.get(Context.APPLET);\n            if (applet != null) {\n                // Create ORBs for an applet\n                return initAppletORB(applet, orbProp);\n            }\n        }\n\n        // Create ORBs using orbProp for a standalone application\n        return ORB.init(new String[0], orbProp);\n    }", "language": "java", "code": "public static ORB getOrb(String server, int port, Hashtable env) {\n        // See if we can get info from environment\n        Properties orbProp;\n\n        // Extract any org.omg.CORBA properties from environment\n        if (env != null) {\n            // Get all String properties\n            orbProp = new Properties();\n            final Enumeration envProp = env.keys();\n            while (envProp.hasMoreElements()) {\n                String key = (String) envProp.nextElement();\n                Object val = env.get(key);\n                if (val instanceof String) {\n                    orbProp.put(key, val);\n                }\n            }\n            final Enumeration mainProps = orbProperties.keys();\n            while (mainProps.hasMoreElements()) {\n                String key = (String) mainProps.nextElement();\n                Object val = orbProperties.get(key);\n                if (val instanceof String) {\n                    orbProp.put(key, val);\n                }\n            }\n        } else {\n            orbProp = orbProperties;\n        }\n\n        if (server != null) {\n            orbProp.put(\"org.omg.CORBA.ORBInitialHost\", server);\n        }\n        if (port >= 0) {\n            orbProp.put(\"org.omg.CORBA.ORBInitialPort\", \"\" + port);\n        }\n\n        // Get Applet from environment\n        if (env != null) {\n            Object applet = env.get(Context.APPLET);\n            if (applet != null) {\n                // Create ORBs for an applet\n                return initAppletORB(applet, orbProp);\n            }\n        }\n\n        // Create ORBs using orbProp for a standalone application\n        return ORB.init(new String[0], orbProp);\n    }", "code_tokens": ["public", "static", "ORB", "getOrb", "(", "String", "server", ",", "int", "port", ",", "Hashtable", "env", ")", "{", "// See if we can get info from environment", "Properties", "orbProp", ";", "// Extract any org.omg.CORBA properties from environment", "if", "(", "env", "!=", "null", ")", "{", "// Get all String properties", "orbProp", "=", "new", "Properties", "(", ")", ";", "final", "Enumeration", "envProp", "=", "env", ".", "keys", "(", ")", ";", "while", "(", "envProp", ".", "hasMoreElements", "(", ")", ")", "{", "String", "key", "=", "(", "String", ")", "envProp", ".", "nextElement", "(", ")", ";", "Object", "val", "=", "env", ".", "get", "(", "key", ")", ";", "if", "(", "val", "instanceof", "String", ")", "{", "orbProp", ".", "put", "(", "key", ",", "val", ")", ";", "}", "}", "final", "Enumeration", "mainProps", "=", "orbProperties", ".", "keys", "(", ")", ";", "while", "(", "mainProps", ".", "hasMoreElements", "(", ")", ")", "{", "String", "key", "=", "(", "String", ")", "mainProps", ".", "nextElement", "(", ")", ";", "Object", "val", "=", "orbProperties", ".", "get", "(", "key", ")", ";", "if", "(", "val", "instanceof", "String", ")", "{", "orbProp", ".", "put", "(", "key", ",", "val", ")", ";", "}", "}", "}", "else", "{", "orbProp", "=", "orbProperties", ";", "}", "if", "(", "server", "!=", "null", ")", "{", "orbProp", ".", "put", "(", "\"org.omg.CORBA.ORBInitialHost\"", ",", "server", ")", ";", "}", "if", "(", "port", ">=", "0", ")", "{", "orbProp", ".", "put", "(", "\"org.omg.CORBA.ORBInitialPort\"", ",", "\"\"", "+", "port", ")", ";", "}", "// Get Applet from environment", "if", "(", "env", "!=", "null", ")", "{", "Object", "applet", "=", "env", ".", "get", "(", "Context", ".", "APPLET", ")", ";", "if", "(", "applet", "!=", "null", ")", "{", "// Create ORBs for an applet", "return", "initAppletORB", "(", "applet", ",", "orbProp", ")", ";", "}", "}", "// Create ORBs using orbProp for a standalone application", "return", "ORB", ".", "init", "(", "new", "String", "[", "0", "]", ",", "orbProp", ")", ";", "}"], "docstring": "Get ORB using given server and port number, and properties from environment.\n\n@param server Possibly null server; if null means use default;\nFor applet, it is the applet host; for app, it is localhost.\n@param port   Port number, -1 means default port\n@param env    Possibly null environment. Contains environment properties.\nCould contain ORB itself; or applet used for initializing ORB.\nUse all String properties from env for initializing ORB\n@return A non-null ORB.", "docstring_tokens": ["Get", "ORB", "using", "given", "server", "and", "port", "number", "and", "properties", "from", "environment", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CorbaUtils.java#L159-L205", "partition": "test", "index": 2598, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.escapeIRName", "original_string": "protected String escapeIRName(String name) {\n        StringBuffer b = new StringBuffer();\n\n        for (int i = 0; i < name.length(); ++i) {\n            char c = name.charAt(i);\n\n            if (c < 256)\n                b.append(c);\n            else\n                b.append(\"\\\\U\").append(toHexString((int) c));\n        }\n        return b.toString();\n    }", "language": "java", "code": "protected String escapeIRName(String name) {\n        StringBuffer b = new StringBuffer();\n\n        for (int i = 0; i < name.length(); ++i) {\n            char c = name.charAt(i);\n\n            if (c < 256)\n                b.append(c);\n            else\n                b.append(\"\\\\U\").append(toHexString((int) c));\n        }\n        return b.toString();\n    }", "code_tokens": ["protected", "String", "escapeIRName", "(", "String", "name", ")", "{", "StringBuffer", "b", "=", "new", "StringBuffer", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "name", ".", "length", "(", ")", ";", "++", "i", ")", "{", "char", "c", "=", "name", ".", "charAt", "(", "i", ")", ";", "if", "(", "c", "<", "256", ")", "b", ".", "append", "(", "c", ")", ";", "else", "b", ".", "append", "(", "\"\\\\U\"", ")", ".", "append", "(", "toHexString", "(", "(", "int", ")", "c", ")", ")", ";", "}", "return", "b", ".", "toString", "(", ")", ";", "}"], "docstring": "Escape non-ISO characters for an IR name.", "docstring_tokens": ["Escape", "non", "-", "ISO", "characters", "for", "an", "IR", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L713-L725", "partition": "test", "index": 2755, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java", "func_name": "Util.getSignature", "original_string": "private static String getSignature(Class cls) {\n        if (cls.isArray())\n            return \"[\" + cls.getComponentType();\n\n        if (cls.isPrimitive()) {\n            if (cls == Byte.TYPE)\n                return \"B\";\n            if (cls == Character.TYPE)\n                return \"C\";\n            if (cls == Double.TYPE)\n                return \"D\";\n            if (cls == Float.TYPE)\n                return \"F\";\n            if (cls == Integer.TYPE)\n                return \"I\";\n            if (cls == Long.TYPE)\n                return \"J\";\n            if (cls == Short.TYPE)\n                return \"S\";\n            if (cls == Boolean.TYPE)\n                return \"Z\";\n            throw IIOPLogger.ROOT_LOGGER.unknownPrimitiveType(cls.getName());\n        }\n\n        return \"L\" + cls.getName().replace('.', '/') + \";\";\n    }", "language": "java", "code": "private static String getSignature(Class cls) {\n        if (cls.isArray())\n            return \"[\" + cls.getComponentType();\n\n        if (cls.isPrimitive()) {\n            if (cls == Byte.TYPE)\n                return \"B\";\n            if (cls == Character.TYPE)\n                return \"C\";\n            if (cls == Double.TYPE)\n                return \"D\";\n            if (cls == Float.TYPE)\n                return \"F\";\n            if (cls == Integer.TYPE)\n                return \"I\";\n            if (cls == Long.TYPE)\n                return \"J\";\n            if (cls == Short.TYPE)\n                return \"S\";\n            if (cls == Boolean.TYPE)\n                return \"Z\";\n            throw IIOPLogger.ROOT_LOGGER.unknownPrimitiveType(cls.getName());\n        }\n\n        return \"L\" + cls.getName().replace('.', '/') + \";\";\n    }", "code_tokens": ["private", "static", "String", "getSignature", "(", "Class", "cls", ")", "{", "if", "(", "cls", ".", "isArray", "(", ")", ")", "return", "\"[\"", "+", "cls", ".", "getComponentType", "(", ")", ";", "if", "(", "cls", ".", "isPrimitive", "(", ")", ")", "{", "if", "(", "cls", "==", "Byte", ".", "TYPE", ")", "return", "\"B\"", ";", "if", "(", "cls", "==", "Character", ".", "TYPE", ")", "return", "\"C\"", ";", "if", "(", "cls", "==", "Double", ".", "TYPE", ")", "return", "\"D\"", ";", "if", "(", "cls", "==", "Float", ".", "TYPE", ")", "return", "\"F\"", ";", "if", "(", "cls", "==", "Integer", ".", "TYPE", ")", "return", "\"I\"", ";", "if", "(", "cls", "==", "Long", ".", "TYPE", ")", "return", "\"J\"", ";", "if", "(", "cls", "==", "Short", ".", "TYPE", ")", "return", "\"S\"", ";", "if", "(", "cls", "==", "Boolean", ".", "TYPE", ")", "return", "\"Z\"", ";", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "unknownPrimitiveType", "(", "cls", ".", "getName", "(", ")", ")", ";", "}", "return", "\"L\"", "+", "cls", ".", "getName", "(", ")", ".", "replace", "(", "'", "'", ",", "'", "'", ")", "+", "\";\"", ";", "}"], "docstring": "Calculate the signature of a class, according to the Java VM\nspecification, section 4.3.2.", "docstring_tokens": ["Calculate", "the", "signature", "of", "a", "class", "according", "to", "the", "Java", "VM", "specification", "section", "4", ".", "3", ".", "2", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java#L536-L561", "partition": "test", "index": 2633, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNNameParser.java", "func_name": "CNNameParser.parseComponent", "original_string": "private static NameComponent parseComponent(String compStr)\n            throws InvalidNameException {\n        NameComponent comp = new NameComponent();\n        int kindSep = -1;\n        int len = compStr.length();\n\n        int j = 0;\n        char[] newStr = new char[len];\n        boolean escaped = false;\n\n        // Find the kind separator\n        for (int i = 0; i < len && kindSep < 0; i++) {\n            if (escaped) {\n                newStr[j++] = compStr.charAt(i);\n                escaped = false;\n            } else if (compStr.charAt(i) == escapeChar) {\n                if (i + 1 >= len) {\n                    throw IIOPLogger.ROOT_LOGGER.unescapedCharacter(compStr);\n                } else if (isMeta(compStr.charAt(i + 1))) {\n                    escaped = true;\n                } else {\n                    throw IIOPLogger.ROOT_LOGGER.invalidEscapedCharacter(compStr);\n                }\n            } else if (compStr.charAt(i) == kindSeparator) {\n                kindSep = i;\n            } else {\n                newStr[j++] = compStr.charAt(i);\n            }\n        }\n\n        // Set id\n        comp.id = new String(newStr, 0, j);\n\n        // Set kind\n        if (kindSep < 0) {\n            comp.kind = \"\";  // no kind separator\n        } else {\n            // unescape kind\n            j = 0;\n            escaped = false;\n            for (int i = kindSep + 1; i < len; i++) {\n                if (escaped) {\n                    newStr[j++] = compStr.charAt(i);\n                    escaped = false;\n                } else if (compStr.charAt(i) == escapeChar) {\n                    if (i + 1 >= len) {\n                        throw IIOPLogger.ROOT_LOGGER.unescapedCharacter(compStr);\n                    } else if (isMeta(compStr.charAt(i + 1))) {\n                        escaped = true;\n                    } else {\n                        throw IIOPLogger.ROOT_LOGGER.invalidEscapedCharacter(compStr);\n                    }\n                } else {\n                    newStr[j++] = compStr.charAt(i);\n                }\n            }\n            comp.kind = new String(newStr, 0, j);\n        }\n        return comp;\n    }", "language": "java", "code": "private static NameComponent parseComponent(String compStr)\n            throws InvalidNameException {\n        NameComponent comp = new NameComponent();\n        int kindSep = -1;\n        int len = compStr.length();\n\n        int j = 0;\n        char[] newStr = new char[len];\n        boolean escaped = false;\n\n        // Find the kind separator\n        for (int i = 0; i < len && kindSep < 0; i++) {\n            if (escaped) {\n                newStr[j++] = compStr.charAt(i);\n                escaped = false;\n            } else if (compStr.charAt(i) == escapeChar) {\n                if (i + 1 >= len) {\n                    throw IIOPLogger.ROOT_LOGGER.unescapedCharacter(compStr);\n                } else if (isMeta(compStr.charAt(i + 1))) {\n                    escaped = true;\n                } else {\n                    throw IIOPLogger.ROOT_LOGGER.invalidEscapedCharacter(compStr);\n                }\n            } else if (compStr.charAt(i) == kindSeparator) {\n                kindSep = i;\n            } else {\n                newStr[j++] = compStr.charAt(i);\n            }\n        }\n\n        // Set id\n        comp.id = new String(newStr, 0, j);\n\n        // Set kind\n        if (kindSep < 0) {\n            comp.kind = \"\";  // no kind separator\n        } else {\n            // unescape kind\n            j = 0;\n            escaped = false;\n            for (int i = kindSep + 1; i < len; i++) {\n                if (escaped) {\n                    newStr[j++] = compStr.charAt(i);\n                    escaped = false;\n                } else if (compStr.charAt(i) == escapeChar) {\n                    if (i + 1 >= len) {\n                        throw IIOPLogger.ROOT_LOGGER.unescapedCharacter(compStr);\n                    } else if (isMeta(compStr.charAt(i + 1))) {\n                        escaped = true;\n                    } else {\n                        throw IIOPLogger.ROOT_LOGGER.invalidEscapedCharacter(compStr);\n                    }\n                } else {\n                    newStr[j++] = compStr.charAt(i);\n                }\n            }\n            comp.kind = new String(newStr, 0, j);\n        }\n        return comp;\n    }", "code_tokens": ["private", "static", "NameComponent", "parseComponent", "(", "String", "compStr", ")", "throws", "InvalidNameException", "{", "NameComponent", "comp", "=", "new", "NameComponent", "(", ")", ";", "int", "kindSep", "=", "-", "1", ";", "int", "len", "=", "compStr", ".", "length", "(", ")", ";", "int", "j", "=", "0", ";", "char", "[", "]", "newStr", "=", "new", "char", "[", "len", "]", ";", "boolean", "escaped", "=", "false", ";", "// Find the kind separator", "for", "(", "int", "i", "=", "0", ";", "i", "<", "len", "&&", "kindSep", "<", "0", ";", "i", "++", ")", "{", "if", "(", "escaped", ")", "{", "newStr", "[", "j", "++", "]", "=", "compStr", ".", "charAt", "(", "i", ")", ";", "escaped", "=", "false", ";", "}", "else", "if", "(", "compStr", ".", "charAt", "(", "i", ")", "==", "escapeChar", ")", "{", "if", "(", "i", "+", "1", ">=", "len", ")", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "unescapedCharacter", "(", "compStr", ")", ";", "}", "else", "if", "(", "isMeta", "(", "compStr", ".", "charAt", "(", "i", "+", "1", ")", ")", ")", "{", "escaped", "=", "true", ";", "}", "else", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "invalidEscapedCharacter", "(", "compStr", ")", ";", "}", "}", "else", "if", "(", "compStr", ".", "charAt", "(", "i", ")", "==", "kindSeparator", ")", "{", "kindSep", "=", "i", ";", "}", "else", "{", "newStr", "[", "j", "++", "]", "=", "compStr", ".", "charAt", "(", "i", ")", ";", "}", "}", "// Set id", "comp", ".", "id", "=", "new", "String", "(", "newStr", ",", "0", ",", "j", ")", ";", "// Set kind", "if", "(", "kindSep", "<", "0", ")", "{", "comp", ".", "kind", "=", "\"\"", ";", "// no kind separator", "}", "else", "{", "// unescape kind", "j", "=", "0", ";", "escaped", "=", "false", ";", "for", "(", "int", "i", "=", "kindSep", "+", "1", ";", "i", "<", "len", ";", "i", "++", ")", "{", "if", "(", "escaped", ")", "{", "newStr", "[", "j", "++", "]", "=", "compStr", ".", "charAt", "(", "i", ")", ";", "escaped", "=", "false", ";", "}", "else", "if", "(", "compStr", ".", "charAt", "(", "i", ")", "==", "escapeChar", ")", "{", "if", "(", "i", "+", "1", ">=", "len", ")", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "unescapedCharacter", "(", "compStr", ")", ";", "}", "else", "if", "(", "isMeta", "(", "compStr", ".", "charAt", "(", "i", "+", "1", ")", ")", ")", "{", "escaped", "=", "true", ";", "}", "else", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "invalidEscapedCharacter", "(", "compStr", ")", ";", "}", "}", "else", "{", "newStr", "[", "j", "++", "]", "=", "compStr", ".", "charAt", "(", "i", ")", ";", "}", "}", "comp", ".", "kind", "=", "new", "String", "(", "newStr", ",", "0", ",", "j", ")", ";", "}", "return", "comp", ";", "}"], "docstring": "Return a NameComponent given its stringified form.", "docstring_tokens": ["Return", "a", "NameComponent", "given", "its", "stringified", "form", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNNameParser.java#L201-L260", "partition": "test", "index": 2704, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ConstantAnalysis.java", "func_name": "ConstantAnalysis.insertValue", "original_string": "public void insertValue(Any any) {\n        if (type == String.class)\n            any.insert_wstring((String) value); // 1.3.5.10 Map to wstring\n        else\n            Util.insertAnyPrimitive(any, value);\n    }", "language": "java", "code": "public void insertValue(Any any) {\n        if (type == String.class)\n            any.insert_wstring((String) value); // 1.3.5.10 Map to wstring\n        else\n            Util.insertAnyPrimitive(any, value);\n    }", "code_tokens": ["public", "void", "insertValue", "(", "Any", "any", ")", "{", "if", "(", "type", "==", "String", ".", "class", ")", "any", ".", "insert_wstring", "(", "(", "String", ")", "value", ")", ";", "// 1.3.5.10 Map to wstring", "else", "Util", ".", "insertAnyPrimitive", "(", "any", ",", "value", ")", ";", "}"], "docstring": "Insert the constant value into the argument Any.", "docstring_tokens": ["Insert", "the", "constant", "value", "into", "the", "argument", "Any", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ConstantAnalysis.java#L77-L82", "partition": "test", "index": 2799, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.removeFromEnvironment", "original_string": "public java.lang.Object removeFromEnvironment(String propName)\n            throws NamingException {\n        if (_env != null && _env.get(propName) != null) {\n            // copy-on-write\n            _env = (Hashtable) _env.clone();\n            return _env.remove(propName);\n        }\n        return null;\n    }", "language": "java", "code": "public java.lang.Object removeFromEnvironment(String propName)\n            throws NamingException {\n        if (_env != null && _env.get(propName) != null) {\n            // copy-on-write\n            _env = (Hashtable) _env.clone();\n            return _env.remove(propName);\n        }\n        return null;\n    }", "code_tokens": ["public", "java", ".", "lang", ".", "Object", "removeFromEnvironment", "(", "String", "propName", ")", "throws", "NamingException", "{", "if", "(", "_env", "!=", "null", "&&", "_env", ".", "get", "(", "propName", ")", "!=", "null", ")", "{", "// copy-on-write", "_env", "=", "(", "Hashtable", ")", "_env", ".", "clone", "(", ")", ";", "return", "_env", ".", "remove", "(", "propName", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Record change but do not reinitialize ORB", "docstring_tokens": ["Record", "change", "but", "do", "not", "reinitialize", "ORB"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L1069-L1077", "partition": "test", "index": 2781, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/SkeletonStrategy.java", "func_name": "SkeletonStrategy.readParams", "original_string": "public Object[] readParams(InputStream in) {\n        int len = paramReaders.length;\n        Object[] params = new Object[len];\n        for (int i = 0; i < len; i++) {\n            params[i] = paramReaders[i].read(in);\n        }\n        return params;\n    }", "language": "java", "code": "public Object[] readParams(InputStream in) {\n        int len = paramReaders.length;\n        Object[] params = new Object[len];\n        for (int i = 0; i < len; i++) {\n            params[i] = paramReaders[i].read(in);\n        }\n        return params;\n    }", "code_tokens": ["public", "Object", "[", "]", "readParams", "(", "InputStream", "in", ")", "{", "int", "len", "=", "paramReaders", ".", "length", ";", "Object", "[", "]", "params", "=", "new", "Object", "[", "len", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "len", ";", "i", "++", ")", "{", "params", "[", "i", "]", "=", "paramReaders", "[", "i", "]", ".", "read", "(", "in", ")", ";", "}", "return", "params", ";", "}"], "docstring": "Unmarshals the sequence of method parameters from an input stream.\n\n@param in a CDR input stream\n@return an object array with the parameters.", "docstring_tokens": ["Unmarshals", "the", "sequence", "of", "method", "parameters", "from", "an", "input", "stream", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/SkeletonStrategy.java#L120-L127", "partition": "test", "index": 2616, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/WorkCacheManager.java", "func_name": "WorkCacheManager.lookupDone", "original_string": "private ContainerAnalysis lookupDone(Class cls) {\n        SoftReference ref = (SoftReference) workDone.get(cls);\n        if (ref == null)\n            return null;\n        ContainerAnalysis ret = (ContainerAnalysis) ref.get();\n        if (ret == null)\n            workDone.remove(cls); // clear map entry if soft ref. was cleared.\n        return ret;\n    }", "language": "java", "code": "private ContainerAnalysis lookupDone(Class cls) {\n        SoftReference ref = (SoftReference) workDone.get(cls);\n        if (ref == null)\n            return null;\n        ContainerAnalysis ret = (ContainerAnalysis) ref.get();\n        if (ret == null)\n            workDone.remove(cls); // clear map entry if soft ref. was cleared.\n        return ret;\n    }", "code_tokens": ["private", "ContainerAnalysis", "lookupDone", "(", "Class", "cls", ")", "{", "SoftReference", "ref", "=", "(", "SoftReference", ")", "workDone", ".", "get", "(", "cls", ")", ";", "if", "(", "ref", "==", "null", ")", "return", "null", ";", "ContainerAnalysis", "ret", "=", "(", "ContainerAnalysis", ")", "ref", ".", "get", "(", ")", ";", "if", "(", "ret", "==", "null", ")", "workDone", ".", "remove", "(", "cls", ")", ";", "// clear map entry if soft ref. was cleared.", "return", "ret", ";", "}"], "docstring": "Lookup an analysis in the fully done map.", "docstring_tokens": ["Lookup", "an", "analysis", "in", "the", "fully", "done", "map", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/WorkCacheManager.java#L163-L171", "partition": "test", "index": 2743, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/WorkCacheManager.java", "func_name": "WorkCacheManager.createWorkInProgress", "original_string": "private ContainerAnalysis createWorkInProgress(final Class cls) {\n        final ContainerAnalysis analysis;\n        try {\n            analysis = (ContainerAnalysis) constructor.newInstance(cls);\n        } catch (InstantiationException ex) {\n            throw new RuntimeException(ex.toString());\n        } catch (IllegalAccessException ex) {\n            throw new RuntimeException(ex.toString());\n        } catch (InvocationTargetException ex) {\n            throw new RuntimeException(ex.toString());\n        }\n\n        workInProgress.put(new InProgressKey(cls, Thread.currentThread()), analysis);\n\n        return analysis;\n    }", "language": "java", "code": "private ContainerAnalysis createWorkInProgress(final Class cls) {\n        final ContainerAnalysis analysis;\n        try {\n            analysis = (ContainerAnalysis) constructor.newInstance(cls);\n        } catch (InstantiationException ex) {\n            throw new RuntimeException(ex.toString());\n        } catch (IllegalAccessException ex) {\n            throw new RuntimeException(ex.toString());\n        } catch (InvocationTargetException ex) {\n            throw new RuntimeException(ex.toString());\n        }\n\n        workInProgress.put(new InProgressKey(cls, Thread.currentThread()), analysis);\n\n        return analysis;\n    }", "code_tokens": ["private", "ContainerAnalysis", "createWorkInProgress", "(", "final", "Class", "cls", ")", "{", "final", "ContainerAnalysis", "analysis", ";", "try", "{", "analysis", "=", "(", "ContainerAnalysis", ")", "constructor", ".", "newInstance", "(", "cls", ")", ";", "}", "catch", "(", "InstantiationException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ".", "toString", "(", ")", ")", ";", "}", "catch", "(", "IllegalAccessException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ".", "toString", "(", ")", ")", ";", "}", "catch", "(", "InvocationTargetException", "ex", ")", "{", "throw", "new", "RuntimeException", "(", "ex", ".", "toString", "(", ")", ")", ";", "}", "workInProgress", ".", "put", "(", "new", "InProgressKey", "(", "cls", ",", "Thread", ".", "currentThread", "(", ")", ")", ",", "analysis", ")", ";", "return", "analysis", ";", "}"], "docstring": "Create new work-in-progress.", "docstring_tokens": ["Create", "new", "work", "-", "in", "-", "progress", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/WorkCacheManager.java#L176-L191", "partition": "test", "index": 2744, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/InterfaceAnalysis.java", "func_name": "InterfaceAnalysis.calculateOperationAnalysisMap", "original_string": "protected void calculateOperationAnalysisMap() {\n        operationAnalysisMap = new HashMap();\n        OperationAnalysis oa;\n\n        // Map the operations\n        for (int i = 0; i < operations.length; ++i) {\n            oa = operations[i];\n            operationAnalysisMap.put(oa.getIDLName(), oa);\n        }\n\n        // Map the attributes\n        for (int i = 0; i < attributes.length; ++i) {\n            AttributeAnalysis attr = attributes[i];\n\n            oa = attr.getAccessorAnalysis();\n\n            // Not having an accessor analysis means that\n            // the attribute is not in a remote interface\n            if (oa != null) {\n                operationAnalysisMap.put(oa.getIDLName(), oa);\n\n                oa = attr.getMutatorAnalysis();\n                if (oa != null)\n                    operationAnalysisMap.put(oa.getIDLName(), oa);\n            }\n        }\n    }", "language": "java", "code": "protected void calculateOperationAnalysisMap() {\n        operationAnalysisMap = new HashMap();\n        OperationAnalysis oa;\n\n        // Map the operations\n        for (int i = 0; i < operations.length; ++i) {\n            oa = operations[i];\n            operationAnalysisMap.put(oa.getIDLName(), oa);\n        }\n\n        // Map the attributes\n        for (int i = 0; i < attributes.length; ++i) {\n            AttributeAnalysis attr = attributes[i];\n\n            oa = attr.getAccessorAnalysis();\n\n            // Not having an accessor analysis means that\n            // the attribute is not in a remote interface\n            if (oa != null) {\n                operationAnalysisMap.put(oa.getIDLName(), oa);\n\n                oa = attr.getMutatorAnalysis();\n                if (oa != null)\n                    operationAnalysisMap.put(oa.getIDLName(), oa);\n            }\n        }\n    }", "code_tokens": ["protected", "void", "calculateOperationAnalysisMap", "(", ")", "{", "operationAnalysisMap", "=", "new", "HashMap", "(", ")", ";", "OperationAnalysis", "oa", ";", "// Map the operations", "for", "(", "int", "i", "=", "0", ";", "i", "<", "operations", ".", "length", ";", "++", "i", ")", "{", "oa", "=", "operations", "[", "i", "]", ";", "operationAnalysisMap", ".", "put", "(", "oa", ".", "getIDLName", "(", ")", ",", "oa", ")", ";", "}", "// Map the attributes", "for", "(", "int", "i", "=", "0", ";", "i", "<", "attributes", ".", "length", ";", "++", "i", ")", "{", "AttributeAnalysis", "attr", "=", "attributes", "[", "i", "]", ";", "oa", "=", "attr", ".", "getAccessorAnalysis", "(", ")", ";", "// Not having an accessor analysis means that", "// the attribute is not in a remote interface", "if", "(", "oa", "!=", "null", ")", "{", "operationAnalysisMap", ".", "put", "(", "oa", ".", "getIDLName", "(", ")", ",", "oa", ")", ";", "oa", "=", "attr", ".", "getMutatorAnalysis", "(", ")", ";", "if", "(", "oa", "!=", "null", ")", "operationAnalysisMap", ".", "put", "(", "oa", ".", "getIDLName", "(", ")", ",", "oa", ")", ";", "}", "}", "}"], "docstring": "Calculate the map that maps IDL operation names to operation analyses.\nBesides mapped operations, this map also contains the attribute\naccessor and mutator operations.", "docstring_tokens": ["Calculate", "the", "map", "that", "maps", "IDL", "operation", "names", "to", "operation", "analyses", ".", "Besides", "mapped", "operations", "this", "map", "also", "contains", "the", "attribute", "accessor", "and", "mutator", "operations", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/InterfaceAnalysis.java#L131-L157", "partition": "test", "index": 2890, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/SkeletonStrategy.java", "func_name": "SkeletonStrategy.writeRetval", "original_string": "public void writeRetval(OutputStream out, Object retVal) {\n        retvalWriter.write(out, RemoteObjectSubstitutionManager.writeReplaceRemote(retVal));\n    }", "language": "java", "code": "public void writeRetval(OutputStream out, Object retVal) {\n        retvalWriter.write(out, RemoteObjectSubstitutionManager.writeReplaceRemote(retVal));\n    }", "code_tokens": ["public", "void", "writeRetval", "(", "OutputStream", "out", ",", "Object", "retVal", ")", "{", "retvalWriter", ".", "write", "(", "out", ",", "RemoteObjectSubstitutionManager", ".", "writeReplaceRemote", "(", "retVal", ")", ")", ";", "}"], "docstring": "Marshals into an output stream the return value of the method.\n\n@param out    a CDR output stream\n@param retVal the value to be written.", "docstring_tokens": ["Marshals", "into", "an", "output", "stream", "the", "return", "value", "of", "the", "method", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/SkeletonStrategy.java#L150-L152", "partition": "test", "index": 2617, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/RepositoryImpl.java", "func_name": "RepositoryImpl.getAnonymousObjectId", "original_string": "protected byte[] getAnonymousObjectId(long n) {\n        String s = anonOidPrefix + Long.toString(n);\n        return s.getBytes(StandardCharsets.UTF_8);\n    }", "language": "java", "code": "protected byte[] getAnonymousObjectId(long n) {\n        String s = anonOidPrefix + Long.toString(n);\n        return s.getBytes(StandardCharsets.UTF_8);\n    }", "code_tokens": ["protected", "byte", "[", "]", "getAnonymousObjectId", "(", "long", "n", ")", "{", "String", "s", "=", "anonOidPrefix", "+", "Long", ".", "toString", "(", "n", ")", ";", "return", "s", ".", "getBytes", "(", "StandardCharsets", ".", "UTF_8", ")", ";", "}"], "docstring": "Generate the ID of the n-th \"anonymous\" object created in this IR.", "docstring_tokens": ["Generate", "the", "ID", "of", "the", "n", "-", "th", "anonymous", "object", "created", "in", "this", "IR", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/RepositoryImpl.java#L221-L224", "partition": "test", "index": 2727, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/iiop/EjbIIOPService.java", "func_name": "EjbIIOPService.referenceForLocator", "original_string": "public org.omg.CORBA.Object referenceForLocator(final EJBLocator<?> locator) {\n        final EJBComponent ejbComponent = ejbComponentInjectedValue.getValue();\n        try {\n            final String earApplicationName = ejbComponent.getEarApplicationName() == null ? \"\" : ejbComponent.getEarApplicationName();\n            if (locator.getBeanName().equals(ejbComponent.getComponentName()) &&\n                    locator.getAppName().equals(earApplicationName) &&\n                    locator.getModuleName().equals(ejbComponent.getModuleName()) &&\n                    locator.getDistinctName().equals(ejbComponent.getDistinctName())) {\n                if (locator instanceof EJBHomeLocator) {\n                    return (org.omg.CORBA.Object) ejbHome;\n                } else if (locator instanceof StatelessEJBLocator) {\n                    return beanReferenceFactory.createReference(beanRepositoryIds[0]);\n                } else if (locator instanceof StatefulEJBLocator) {\n                    final Marshaller marshaller = factory.createMarshaller(configuration);\n                    final ByteArrayOutputStream stream = new ByteArrayOutputStream();\n                    marshaller.start(new OutputStreamByteOutput(stream));\n                    marshaller.writeObject(((StatefulEJBLocator<?>) locator).getSessionId());\n                    marshaller.finish();\n                    return beanReferenceFactory.createReferenceWithId(stream.toByteArray(), beanRepositoryIds[0]);\n                } else if (locator instanceof EntityEJBLocator) {\n                    final Marshaller marshaller = factory.createMarshaller(configuration);\n                    final ByteArrayOutputStream stream = new ByteArrayOutputStream();\n                    marshaller.start(new OutputStreamByteOutput(stream));\n                    marshaller.writeObject(((EntityEJBLocator<?>) locator).getPrimaryKey());\n                    marshaller.finish();\n                    return beanReferenceFactory.createReferenceWithId(stream.toByteArray(), beanRepositoryIds[0]);\n                }\n                throw EjbLogger.ROOT_LOGGER.unknownEJBLocatorType(locator);\n            } else {\n                throw EjbLogger.ROOT_LOGGER.incorrectEJBLocatorForBean(locator, ejbComponent.getComponentName());\n            }\n        } catch (Exception e) {\n            throw EjbLogger.ROOT_LOGGER.couldNotCreateCorbaObject(e, locator);\n        }\n    }", "language": "java", "code": "public org.omg.CORBA.Object referenceForLocator(final EJBLocator<?> locator) {\n        final EJBComponent ejbComponent = ejbComponentInjectedValue.getValue();\n        try {\n            final String earApplicationName = ejbComponent.getEarApplicationName() == null ? \"\" : ejbComponent.getEarApplicationName();\n            if (locator.getBeanName().equals(ejbComponent.getComponentName()) &&\n                    locator.getAppName().equals(earApplicationName) &&\n                    locator.getModuleName().equals(ejbComponent.getModuleName()) &&\n                    locator.getDistinctName().equals(ejbComponent.getDistinctName())) {\n                if (locator instanceof EJBHomeLocator) {\n                    return (org.omg.CORBA.Object) ejbHome;\n                } else if (locator instanceof StatelessEJBLocator) {\n                    return beanReferenceFactory.createReference(beanRepositoryIds[0]);\n                } else if (locator instanceof StatefulEJBLocator) {\n                    final Marshaller marshaller = factory.createMarshaller(configuration);\n                    final ByteArrayOutputStream stream = new ByteArrayOutputStream();\n                    marshaller.start(new OutputStreamByteOutput(stream));\n                    marshaller.writeObject(((StatefulEJBLocator<?>) locator).getSessionId());\n                    marshaller.finish();\n                    return beanReferenceFactory.createReferenceWithId(stream.toByteArray(), beanRepositoryIds[0]);\n                } else if (locator instanceof EntityEJBLocator) {\n                    final Marshaller marshaller = factory.createMarshaller(configuration);\n                    final ByteArrayOutputStream stream = new ByteArrayOutputStream();\n                    marshaller.start(new OutputStreamByteOutput(stream));\n                    marshaller.writeObject(((EntityEJBLocator<?>) locator).getPrimaryKey());\n                    marshaller.finish();\n                    return beanReferenceFactory.createReferenceWithId(stream.toByteArray(), beanRepositoryIds[0]);\n                }\n                throw EjbLogger.ROOT_LOGGER.unknownEJBLocatorType(locator);\n            } else {\n                throw EjbLogger.ROOT_LOGGER.incorrectEJBLocatorForBean(locator, ejbComponent.getComponentName());\n            }\n        } catch (Exception e) {\n            throw EjbLogger.ROOT_LOGGER.couldNotCreateCorbaObject(e, locator);\n        }\n    }", "code_tokens": ["public", "org", ".", "omg", ".", "CORBA", ".", "Object", "referenceForLocator", "(", "final", "EJBLocator", "<", "?", ">", "locator", ")", "{", "final", "EJBComponent", "ejbComponent", "=", "ejbComponentInjectedValue", ".", "getValue", "(", ")", ";", "try", "{", "final", "String", "earApplicationName", "=", "ejbComponent", ".", "getEarApplicationName", "(", ")", "==", "null", "?", "\"\"", ":", "ejbComponent", ".", "getEarApplicationName", "(", ")", ";", "if", "(", "locator", ".", "getBeanName", "(", ")", ".", "equals", "(", "ejbComponent", ".", "getComponentName", "(", ")", ")", "&&", "locator", ".", "getAppName", "(", ")", ".", "equals", "(", "earApplicationName", ")", "&&", "locator", ".", "getModuleName", "(", ")", ".", "equals", "(", "ejbComponent", ".", "getModuleName", "(", ")", ")", "&&", "locator", ".", "getDistinctName", "(", ")", ".", "equals", "(", "ejbComponent", ".", "getDistinctName", "(", ")", ")", ")", "{", "if", "(", "locator", "instanceof", "EJBHomeLocator", ")", "{", "return", "(", "org", ".", "omg", ".", "CORBA", ".", "Object", ")", "ejbHome", ";", "}", "else", "if", "(", "locator", "instanceof", "StatelessEJBLocator", ")", "{", "return", "beanReferenceFactory", ".", "createReference", "(", "beanRepositoryIds", "[", "0", "]", ")", ";", "}", "else", "if", "(", "locator", "instanceof", "StatefulEJBLocator", ")", "{", "final", "Marshaller", "marshaller", "=", "factory", ".", "createMarshaller", "(", "configuration", ")", ";", "final", "ByteArrayOutputStream", "stream", "=", "new", "ByteArrayOutputStream", "(", ")", ";", "marshaller", ".", "start", "(", "new", "OutputStreamByteOutput", "(", "stream", ")", ")", ";", "marshaller", ".", "writeObject", "(", "(", "(", "StatefulEJBLocator", "<", "?", ">", ")", "locator", ")", ".", "getSessionId", "(", ")", ")", ";", "marshaller", ".", "finish", "(", ")", ";", "return", "beanReferenceFactory", ".", "createReferenceWithId", "(", "stream", ".", "toByteArray", "(", ")", ",", "beanRepositoryIds", "[", "0", "]", ")", ";", "}", "else", "if", "(", "locator", "instanceof", "EntityEJBLocator", ")", "{", "final", "Marshaller", "marshaller", "=", "factory", ".", "createMarshaller", "(", "configuration", ")", ";", "final", "ByteArrayOutputStream", "stream", "=", "new", "ByteArrayOutputStream", "(", ")", ";", "marshaller", ".", "start", "(", "new", "OutputStreamByteOutput", "(", "stream", ")", ")", ";", "marshaller", ".", "writeObject", "(", "(", "(", "EntityEJBLocator", "<", "?", ">", ")", "locator", ")", ".", "getPrimaryKey", "(", ")", ")", ";", "marshaller", ".", "finish", "(", ")", ";", "return", "beanReferenceFactory", ".", "createReferenceWithId", "(", "stream", ".", "toByteArray", "(", ")", ",", "beanRepositoryIds", "[", "0", "]", ")", ";", "}", "throw", "EjbLogger", ".", "ROOT_LOGGER", ".", "unknownEJBLocatorType", "(", "locator", ")", ";", "}", "else", "{", "throw", "EjbLogger", ".", "ROOT_LOGGER", ".", "incorrectEJBLocatorForBean", "(", "locator", ",", "ejbComponent", ".", "getComponentName", "(", ")", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "EjbLogger", ".", "ROOT_LOGGER", ".", "couldNotCreateCorbaObject", "(", "e", ",", "locator", ")", ";", "}", "}"], "docstring": "Returns a corba reference for the given locator\n\n@param locator The locator\n@return The corba reference", "docstring_tokens": ["Returns", "a", "corba", "reference", "for", "the", "given", "locator"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/iiop/EjbIIOPService.java#L445-L479", "partition": "test", "index": 2874, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNNameParser.java", "func_name": "CNNameParser.parse", "original_string": "public Name parse(String name) throws NamingException {\n        Vector comps = insStringToStringifiedComps(name);\n        return new CNCompoundName(comps.elements());\n    }", "language": "java", "code": "public Name parse(String name) throws NamingException {\n        Vector comps = insStringToStringifiedComps(name);\n        return new CNCompoundName(comps.elements());\n    }", "code_tokens": ["public", "Name", "parse", "(", "String", "name", ")", "throws", "NamingException", "{", "Vector", "comps", "=", "insStringToStringifiedComps", "(", "name", ")", ";", "return", "new", "CNCompoundName", "(", "comps", ".", "elements", "(", ")", ")", ";", "}"], "docstring": "Returns a CompoundName given a string in INS syntax.\n\n@param name The non-null string representation of the name.\n@return a non-null CompoundName", "docstring_tokens": ["Returns", "a", "CompoundName", "given", "a", "string", "in", "INS", "syntax", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNNameParser.java#L80-L83", "partition": "test", "index": 2702, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/SkeletonStrategy.java", "func_name": "SkeletonStrategy.writeException", "original_string": "public void writeException(OutputStream out, Throwable e) {\n        int len = excepWriters.length;\n        for (int i = 0; i < len; i++) {\n            if (excepWriters[i].getExceptionClass().isInstance(e)) {\n                excepWriters[i].write(out, e);\n                return;\n            }\n        }\n        throw new UnknownException(e);\n    }", "language": "java", "code": "public void writeException(OutputStream out, Throwable e) {\n        int len = excepWriters.length;\n        for (int i = 0; i < len; i++) {\n            if (excepWriters[i].getExceptionClass().isInstance(e)) {\n                excepWriters[i].write(out, e);\n                return;\n            }\n        }\n        throw new UnknownException(e);\n    }", "code_tokens": ["public", "void", "writeException", "(", "OutputStream", "out", ",", "Throwable", "e", ")", "{", "int", "len", "=", "excepWriters", ".", "length", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "len", ";", "i", "++", ")", "{", "if", "(", "excepWriters", "[", "i", "]", ".", "getExceptionClass", "(", ")", ".", "isInstance", "(", "e", ")", ")", "{", "excepWriters", "[", "i", "]", ".", "write", "(", "out", ",", "e", ")", ";", "return", ";", "}", "}", "throw", "new", "UnknownException", "(", "e", ")", ";", "}"], "docstring": "Marshals into an output stream an exception thrown by the method.\n\n@param out a CDR output stream\n@param e   the exception to be written.", "docstring_tokens": ["Marshals", "into", "an", "output", "stream", "an", "exception", "thrown", "by", "the", "method", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/SkeletonStrategy.java#L160-L169", "partition": "test", "index": 2618, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/RemoteToCorba.java", "func_name": "RemoteToCorba.getStateToBind", "original_string": "public Object getStateToBind(Object orig, Name name, Context ctx,\n                                 Hashtable<?, ?> env) throws NamingException {\n        if (orig instanceof org.omg.CORBA.Object) {\n            // Already a CORBA object, just use it\n            return null;\n        }\n\n        if (orig instanceof Remote) {\n            // Turn remote object into org.omg.CORBA.Object\n            try {\n                // Returns null if JRMP; let next factory try\n                // CNCtx will eventually throw IllegalArgumentException if\n                // no CORBA object gotten\n                return\n                        CorbaUtils.remoteToCorba((Remote) orig, ((CNCtx) ctx)._orb);\n            } catch (ClassNotFoundException e) {\n                // RMI-IIOP library not available\n                throw IIOPLogger.ROOT_LOGGER.unavailableRMIPackages();\n            }\n        }\n        return null; // pass and let next state factory try\n    }", "language": "java", "code": "public Object getStateToBind(Object orig, Name name, Context ctx,\n                                 Hashtable<?, ?> env) throws NamingException {\n        if (orig instanceof org.omg.CORBA.Object) {\n            // Already a CORBA object, just use it\n            return null;\n        }\n\n        if (orig instanceof Remote) {\n            // Turn remote object into org.omg.CORBA.Object\n            try {\n                // Returns null if JRMP; let next factory try\n                // CNCtx will eventually throw IllegalArgumentException if\n                // no CORBA object gotten\n                return\n                        CorbaUtils.remoteToCorba((Remote) orig, ((CNCtx) ctx)._orb);\n            } catch (ClassNotFoundException e) {\n                // RMI-IIOP library not available\n                throw IIOPLogger.ROOT_LOGGER.unavailableRMIPackages();\n            }\n        }\n        return null; // pass and let next state factory try\n    }", "code_tokens": ["public", "Object", "getStateToBind", "(", "Object", "orig", ",", "Name", "name", ",", "Context", "ctx", ",", "Hashtable", "<", "?", ",", "?", ">", "env", ")", "throws", "NamingException", "{", "if", "(", "orig", "instanceof", "org", ".", "omg", ".", "CORBA", ".", "Object", ")", "{", "// Already a CORBA object, just use it", "return", "null", ";", "}", "if", "(", "orig", "instanceof", "Remote", ")", "{", "// Turn remote object into org.omg.CORBA.Object", "try", "{", "// Returns null if JRMP; let next factory try", "// CNCtx will eventually throw IllegalArgumentException if", "// no CORBA object gotten", "return", "CorbaUtils", ".", "remoteToCorba", "(", "(", "Remote", ")", "orig", ",", "(", "(", "CNCtx", ")", "ctx", ")", ".", "_orb", ")", ";", "}", "catch", "(", "ClassNotFoundException", "e", ")", "{", "// RMI-IIOP library not available", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "unavailableRMIPackages", "(", ")", ";", "}", "}", "return", "null", ";", "// pass and let next state factory try", "}"], "docstring": "Returns the CORBA object for a Remote object.\nIf input is not a Remote object, or if Remote object uses JRMP, return null.\nIf the RMI-IIOP library is not available, throw ConfigurationException.\n\n@param orig The object to turn into a CORBA object. If not Remote,\nor if is a JRMP stub or impl, return null.\n@param name Ignored\n@param ctx  The non-null CNCtx whose ORB to use.\n@param env  Ignored\n@return The CORBA object for <tt>orig</tt> or null.\n@throws javax.naming.ConfigurationException If the CORBA object cannot be obtained\ndue to configuration problems, for instance, if RMI-IIOP not available.\n@throws NamingException        If some other problem prevented a CORBA\nobject from being obtained from the Remote object.", "docstring_tokens": ["Returns", "the", "CORBA", "object", "for", "a", "Remote", "object", ".", "If", "input", "is", "not", "a", "Remote", "object", "or", "if", "Remote", "object", "uses", "JRMP", "return", "null", ".", "If", "the", "RMI", "-", "IIOP", "library", "is", "not", "available", "throw", "ConfigurationException", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/RemoteToCorba.java#L65-L86", "partition": "test", "index": 2804, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNBindingEnumeration.java", "func_name": "CNBindingEnumeration.getMore", "original_string": "private boolean getMore() throws NamingException {\n        try {\n            more = _bindingIter.next_n(batchsize, _bindingList);\n            counter = 0; // reset\n        } catch (Exception e) {\n            more = false;\n            NamingException ne = IIOPLogger.ROOT_LOGGER.errorGettingBindingList();\n            ne.setRootCause(e);\n            throw ne;\n        }\n        return more;\n    }", "language": "java", "code": "private boolean getMore() throws NamingException {\n        try {\n            more = _bindingIter.next_n(batchsize, _bindingList);\n            counter = 0; // reset\n        } catch (Exception e) {\n            more = false;\n            NamingException ne = IIOPLogger.ROOT_LOGGER.errorGettingBindingList();\n            ne.setRootCause(e);\n            throw ne;\n        }\n        return more;\n    }", "code_tokens": ["private", "boolean", "getMore", "(", ")", "throws", "NamingException", "{", "try", "{", "more", "=", "_bindingIter", ".", "next_n", "(", "batchsize", ",", "_bindingList", ")", ";", "counter", "=", "0", ";", "// reset", "}", "catch", "(", "Exception", "e", ")", "{", "more", "=", "false", ";", "NamingException", "ne", "=", "IIOPLogger", ".", "ROOT_LOGGER", ".", "errorGettingBindingList", "(", ")", ";", "ne", ".", "setRootCause", "(", "e", ")", ";", "throw", "ne", ";", "}", "return", "more", ";", "}"], "docstring": "Get the next batch using _bindingIter. Update the 'more' field.", "docstring_tokens": ["Get", "the", "next", "batch", "using", "_bindingIter", ".", "Update", "the", "more", "field", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNBindingEnumeration.java#L192-L203", "partition": "test", "index": 2870, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNBindingEnumeration.java", "func_name": "CNBindingEnumeration.next", "original_string": "public java.lang.Object next() throws NamingException {\n        if (more && counter >= _bindingList.value.length) {\n            getMore();\n        }\n        if (more && counter < _bindingList.value.length) {\n            org.omg.CosNaming.Binding bndg = _bindingList.value[counter];\n            counter++;\n            return mapBinding(bndg);\n        } else {\n            throw new NoSuchElementException();\n        }\n    }", "language": "java", "code": "public java.lang.Object next() throws NamingException {\n        if (more && counter >= _bindingList.value.length) {\n            getMore();\n        }\n        if (more && counter < _bindingList.value.length) {\n            org.omg.CosNaming.Binding bndg = _bindingList.value[counter];\n            counter++;\n            return mapBinding(bndg);\n        } else {\n            throw new NoSuchElementException();\n        }\n    }", "code_tokens": ["public", "java", ".", "lang", ".", "Object", "next", "(", ")", "throws", "NamingException", "{", "if", "(", "more", "&&", "counter", ">=", "_bindingList", ".", "value", ".", "length", ")", "{", "getMore", "(", ")", ";", "}", "if", "(", "more", "&&", "counter", "<", "_bindingList", ".", "value", ".", "length", ")", "{", "org", ".", "omg", ".", "CosNaming", ".", "Binding", "bndg", "=", "_bindingList", ".", "value", "[", "counter", "]", ";", "counter", "++", ";", "return", "mapBinding", "(", "bndg", ")", ";", "}", "else", "{", "throw", "new", "NoSuchElementException", "(", ")", ";", "}", "}"], "docstring": "Returns the next binding in the list.\n\n@throws NamingException any naming exception.", "docstring_tokens": ["Returns", "the", "next", "binding", "in", "the", "list", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNBindingEnumeration.java#L105-L116", "partition": "test", "index": 2869, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.getIDLModuleName", "original_string": "public String getIDLModuleName() {\n        if (idlModuleName == null) {\n            String pkgName = cls.getPackage().getName();\n            StringBuffer b = new StringBuffer();\n\n            while (!\"\".equals(pkgName)) {\n                int idx = pkgName.indexOf('.');\n                String n = (idx == -1) ? pkgName : pkgName.substring(0, idx);\n\n                b.append(\"::\").append(Util.javaToIDLName(n));\n\n                pkgName = (idx == -1) ? \"\" : pkgName.substring(idx + 1);\n            }\n            idlModuleName = b.toString();\n        }\n        return idlModuleName;\n    }", "language": "java", "code": "public String getIDLModuleName() {\n        if (idlModuleName == null) {\n            String pkgName = cls.getPackage().getName();\n            StringBuffer b = new StringBuffer();\n\n            while (!\"\".equals(pkgName)) {\n                int idx = pkgName.indexOf('.');\n                String n = (idx == -1) ? pkgName : pkgName.substring(0, idx);\n\n                b.append(\"::\").append(Util.javaToIDLName(n));\n\n                pkgName = (idx == -1) ? \"\" : pkgName.substring(idx + 1);\n            }\n            idlModuleName = b.toString();\n        }\n        return idlModuleName;\n    }", "code_tokens": ["public", "String", "getIDLModuleName", "(", ")", "{", "if", "(", "idlModuleName", "==", "null", ")", "{", "String", "pkgName", "=", "cls", ".", "getPackage", "(", ")", ".", "getName", "(", ")", ";", "StringBuffer", "b", "=", "new", "StringBuffer", "(", ")", ";", "while", "(", "!", "\"\"", ".", "equals", "(", "pkgName", ")", ")", "{", "int", "idx", "=", "pkgName", ".", "indexOf", "(", "'", "'", ")", ";", "String", "n", "=", "(", "idx", "==", "-", "1", ")", "?", "pkgName", ":", "pkgName", ".", "substring", "(", "0", ",", "idx", ")", ";", "b", ".", "append", "(", "\"::\"", ")", ".", "append", "(", "Util", ".", "javaToIDLName", "(", "n", ")", ")", ";", "pkgName", "=", "(", "idx", "==", "-", "1", ")", "?", "\"\"", ":", "pkgName", ".", "substring", "(", "idx", "+", "1", ")", ";", "}", "idlModuleName", "=", "b", ".", "toString", "(", ")", ";", "}", "return", "idlModuleName", ";", "}"], "docstring": "Return the fully qualified IDL module name that this\nanalysis should be placed in.", "docstring_tokens": ["Return", "the", "fully", "qualified", "IDL", "module", "name", "that", "this", "analysis", "should", "be", "placed", "in", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L245-L261", "partition": "test", "index": 2745, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.toHexString", "original_string": "protected String toHexString(int i) {\n        String s = Integer.toHexString(i).toUpperCase(Locale.ENGLISH);\n\n        if (s.length() < 8)\n            return \"00000000\".substring(0, 8 - s.length()) + s;\n        else\n            return s;\n    }", "language": "java", "code": "protected String toHexString(int i) {\n        String s = Integer.toHexString(i).toUpperCase(Locale.ENGLISH);\n\n        if (s.length() < 8)\n            return \"00000000\".substring(0, 8 - s.length()) + s;\n        else\n            return s;\n    }", "code_tokens": ["protected", "String", "toHexString", "(", "int", "i", ")", "{", "String", "s", "=", "Integer", ".", "toHexString", "(", "i", ")", ".", "toUpperCase", "(", "Locale", ".", "ENGLISH", ")", ";", "if", "(", "s", ".", "length", "(", ")", "<", "8", ")", "return", "\"00000000\"", ".", "substring", "(", "0", ",", "8", "-", "s", ".", "length", "(", ")", ")", "+", "s", ";", "else", "return", "s", ";", "}"], "docstring": "Convert an integer to a 16-digit hex string.", "docstring_tokens": ["Convert", "an", "integer", "to", "a", "16", "-", "digit", "hex", "string", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L268-L275", "partition": "test", "index": 2746, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.toHexString", "original_string": "protected String toHexString(long l) {\n        String s = Long.toHexString(l).toUpperCase(Locale.ENGLISH);\n\n        if (s.length() < 16)\n            return \"0000000000000000\".substring(0, 16 - s.length()) + s;\n        else\n            return s;\n    }", "language": "java", "code": "protected String toHexString(long l) {\n        String s = Long.toHexString(l).toUpperCase(Locale.ENGLISH);\n\n        if (s.length() < 16)\n            return \"0000000000000000\".substring(0, 16 - s.length()) + s;\n        else\n            return s;\n    }", "code_tokens": ["protected", "String", "toHexString", "(", "long", "l", ")", "{", "String", "s", "=", "Long", ".", "toHexString", "(", "l", ")", ".", "toUpperCase", "(", "Locale", ".", "ENGLISH", ")", ";", "if", "(", "s", ".", "length", "(", ")", "<", "16", ")", "return", "\"0000000000000000\"", ".", "substring", "(", "0", ",", "16", "-", "s", ".", "length", "(", ")", ")", "+", "s", ";", "else", "return", "s", ";", "}"], "docstring": "Convert a long to a 16-digit hex string.", "docstring_tokens": ["Convert", "a", "long", "to", "a", "16", "-", "digit", "hex", "string", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L280-L287", "partition": "test", "index": 2747, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java", "func_name": "ContainerAnalysis.isAccessor", "original_string": "protected boolean isAccessor(Method m) {\n        Class returnType = m.getReturnType();\n        // JBAS-4473, look for get<name>()\n        String name = m.getName();\n        if (!(name.startsWith(\"get\") && name.length() > \"get\".length()))\n            if (!(name.startsWith(\"is\") && name.length() > \"is\".length())\n                    || !(returnType == Boolean.TYPE))\n                return false;\n        if (returnType == Void.TYPE)\n            return false;\n        if (m.getParameterTypes().length != 0)\n            return false;\n\n        return hasNonAppExceptions(m);\n    }", "language": "java", "code": "protected boolean isAccessor(Method m) {\n        Class returnType = m.getReturnType();\n        // JBAS-4473, look for get<name>()\n        String name = m.getName();\n        if (!(name.startsWith(\"get\") && name.length() > \"get\".length()))\n            if (!(name.startsWith(\"is\") && name.length() > \"is\".length())\n                    || !(returnType == Boolean.TYPE))\n                return false;\n        if (returnType == Void.TYPE)\n            return false;\n        if (m.getParameterTypes().length != 0)\n            return false;\n\n        return hasNonAppExceptions(m);\n    }", "code_tokens": ["protected", "boolean", "isAccessor", "(", "Method", "m", ")", "{", "Class", "returnType", "=", "m", ".", "getReturnType", "(", ")", ";", "// JBAS-4473, look for get<name>()", "String", "name", "=", "m", ".", "getName", "(", ")", ";", "if", "(", "!", "(", "name", ".", "startsWith", "(", "\"get\"", ")", "&&", "name", ".", "length", "(", ")", ">", "\"get\"", ".", "length", "(", ")", ")", ")", "if", "(", "!", "(", "name", ".", "startsWith", "(", "\"is\"", ")", "&&", "name", ".", "length", "(", ")", ">", "\"is\"", ".", "length", "(", ")", ")", "||", "!", "(", "returnType", "==", "Boolean", ".", "TYPE", ")", ")", "return", "false", ";", "if", "(", "returnType", "==", "Void", ".", "TYPE", ")", "return", "false", ";", "if", "(", "m", ".", "getParameterTypes", "(", ")", ".", "length", "!=", "0", ")", "return", "false", ";", "return", "hasNonAppExceptions", "(", "m", ")", ";", "}"], "docstring": "Check if a method is an accessor.", "docstring_tokens": ["Check", "if", "a", "method", "is", "an", "accessor", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ContainerAnalysis.java#L292-L306", "partition": "test", "index": 2748, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/IRObjectImpl.java", "func_name": "IRObjectImpl.servantToReference", "original_string": "protected org.omg.CORBA.Object servantToReference(Servant servant) {\n        byte[] id = getObjectId();\n\n        try {\n            repository.poa.activate_object_with_id(id, servant);\n            org.omg.CORBA.Object ref = repository.poa.id_to_reference(id);\n            return ref;\n        } catch (WrongPolicy ex) {\n            IIOPLogger.ROOT_LOGGER.debug(\"Exception converting CORBA servant to reference\", ex);\n        } catch (ServantAlreadyActive ex) {\n            IIOPLogger.ROOT_LOGGER.debug(\"Exception converting CORBA servant to reference\", ex);\n        } catch (ObjectAlreadyActive ex) {\n            IIOPLogger.ROOT_LOGGER.debug(\"Exception converting CORBA servant to reference\", ex);\n        } catch (ObjectNotActive ex) {\n            IIOPLogger.ROOT_LOGGER.debug(\"Exception converting CORBA servant to reference\", ex);\n        }\n        return null;\n    }", "language": "java", "code": "protected org.omg.CORBA.Object servantToReference(Servant servant) {\n        byte[] id = getObjectId();\n\n        try {\n            repository.poa.activate_object_with_id(id, servant);\n            org.omg.CORBA.Object ref = repository.poa.id_to_reference(id);\n            return ref;\n        } catch (WrongPolicy ex) {\n            IIOPLogger.ROOT_LOGGER.debug(\"Exception converting CORBA servant to reference\", ex);\n        } catch (ServantAlreadyActive ex) {\n            IIOPLogger.ROOT_LOGGER.debug(\"Exception converting CORBA servant to reference\", ex);\n        } catch (ObjectAlreadyActive ex) {\n            IIOPLogger.ROOT_LOGGER.debug(\"Exception converting CORBA servant to reference\", ex);\n        } catch (ObjectNotActive ex) {\n            IIOPLogger.ROOT_LOGGER.debug(\"Exception converting CORBA servant to reference\", ex);\n        }\n        return null;\n    }", "code_tokens": ["protected", "org", ".", "omg", ".", "CORBA", ".", "Object", "servantToReference", "(", "Servant", "servant", ")", "{", "byte", "[", "]", "id", "=", "getObjectId", "(", ")", ";", "try", "{", "repository", ".", "poa", ".", "activate_object_with_id", "(", "id", ",", "servant", ")", ";", "org", ".", "omg", ".", "CORBA", ".", "Object", "ref", "=", "repository", ".", "poa", ".", "id_to_reference", "(", "id", ")", ";", "return", "ref", ";", "}", "catch", "(", "WrongPolicy", "ex", ")", "{", "IIOPLogger", ".", "ROOT_LOGGER", ".", "debug", "(", "\"Exception converting CORBA servant to reference\"", ",", "ex", ")", ";", "}", "catch", "(", "ServantAlreadyActive", "ex", ")", "{", "IIOPLogger", ".", "ROOT_LOGGER", ".", "debug", "(", "\"Exception converting CORBA servant to reference\"", ",", "ex", ")", ";", "}", "catch", "(", "ObjectAlreadyActive", "ex", ")", "{", "IIOPLogger", ".", "ROOT_LOGGER", ".", "debug", "(", "\"Exception converting CORBA servant to reference\"", ",", "ex", ")", ";", "}", "catch", "(", "ObjectNotActive", "ex", ")", "{", "IIOPLogger", ".", "ROOT_LOGGER", ".", "debug", "(", "\"Exception converting CORBA servant to reference\"", ",", "ex", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Convert a servant to a reference.", "docstring_tokens": ["Convert", "a", "servant", "to", "a", "reference", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/IRObjectImpl.java#L106-L123", "partition": "test", "index": 2706, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/IRObjectImpl.java", "func_name": "IRObjectImpl.shutdown", "original_string": "public void shutdown() {\n        POA poa = getPOA();\n        try {\n            poa.deactivate_object(poa.reference_to_id(getReference()));\n        } catch (UserException ex) {\n            IIOPLogger.ROOT_LOGGER.warnCouldNotDeactivateIRObject(ex);\n        }\n    }", "language": "java", "code": "public void shutdown() {\n        POA poa = getPOA();\n        try {\n            poa.deactivate_object(poa.reference_to_id(getReference()));\n        } catch (UserException ex) {\n            IIOPLogger.ROOT_LOGGER.warnCouldNotDeactivateIRObject(ex);\n        }\n    }", "code_tokens": ["public", "void", "shutdown", "(", ")", "{", "POA", "poa", "=", "getPOA", "(", ")", ";", "try", "{", "poa", ".", "deactivate_object", "(", "poa", ".", "reference_to_id", "(", "getReference", "(", ")", ")", ")", ";", "}", "catch", "(", "UserException", "ex", ")", "{", "IIOPLogger", ".", "ROOT_LOGGER", ".", "warnCouldNotDeactivateIRObject", "(", "ex", ")", ";", "}", "}"], "docstring": "Unexport this object.", "docstring_tokens": ["Unexport", "this", "object", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/IRObjectImpl.java#L71-L78", "partition": "test", "index": 2705, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNBindingEnumeration.java", "func_name": "CNBindingEnumeration.mapBinding", "original_string": "private javax.naming.Binding mapBinding(org.omg.CosNaming.Binding bndg)\n            throws NamingException {\n        java.lang.Object obj = _ctx.callResolve(bndg.binding_name);\n\n        Name cname = org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(bndg.binding_name);\n\n        try {\n            obj = NamingManager.getObjectInstance(obj, cname, _ctx, _env);\n        } catch (NamingException e) {\n            throw e;\n        } catch (Exception e) {\n            NamingException ne = IIOPLogger.ROOT_LOGGER.errorGeneratingObjectViaFactory();\n            ne.setRootCause(e);\n            throw ne;\n        }\n\n        // Use cname.toString() instead of bindingName because the name\n        // in the binding should be a composite name\n        String cnameStr = cname.toString();\n        javax.naming.Binding jbndg = new javax.naming.Binding(cnameStr, obj);\n\n        NameComponent[] comps = _ctx.makeFullName(bndg.binding_name);\n        String fullName = org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToInsString(comps);\n        jbndg.setNameInNamespace(fullName);\n        return jbndg;\n    }", "language": "java", "code": "private javax.naming.Binding mapBinding(org.omg.CosNaming.Binding bndg)\n            throws NamingException {\n        java.lang.Object obj = _ctx.callResolve(bndg.binding_name);\n\n        Name cname = org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(bndg.binding_name);\n\n        try {\n            obj = NamingManager.getObjectInstance(obj, cname, _ctx, _env);\n        } catch (NamingException e) {\n            throw e;\n        } catch (Exception e) {\n            NamingException ne = IIOPLogger.ROOT_LOGGER.errorGeneratingObjectViaFactory();\n            ne.setRootCause(e);\n            throw ne;\n        }\n\n        // Use cname.toString() instead of bindingName because the name\n        // in the binding should be a composite name\n        String cnameStr = cname.toString();\n        javax.naming.Binding jbndg = new javax.naming.Binding(cnameStr, obj);\n\n        NameComponent[] comps = _ctx.makeFullName(bndg.binding_name);\n        String fullName = org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToInsString(comps);\n        jbndg.setNameInNamespace(fullName);\n        return jbndg;\n    }", "code_tokens": ["private", "javax", ".", "naming", ".", "Binding", "mapBinding", "(", "org", ".", "omg", ".", "CosNaming", ".", "Binding", "bndg", ")", "throws", "NamingException", "{", "java", ".", "lang", ".", "Object", "obj", "=", "_ctx", ".", "callResolve", "(", "bndg", ".", "binding_name", ")", ";", "Name", "cname", "=", "org", ".", "wildfly", ".", "iiop", ".", "openjdk", ".", "naming", ".", "jndi", ".", "CNNameParser", ".", "cosNameToName", "(", "bndg", ".", "binding_name", ")", ";", "try", "{", "obj", "=", "NamingManager", ".", "getObjectInstance", "(", "obj", ",", "cname", ",", "_ctx", ",", "_env", ")", ";", "}", "catch", "(", "NamingException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "Exception", "e", ")", "{", "NamingException", "ne", "=", "IIOPLogger", ".", "ROOT_LOGGER", ".", "errorGeneratingObjectViaFactory", "(", ")", ";", "ne", ".", "setRootCause", "(", "e", ")", ";", "throw", "ne", ";", "}", "// Use cname.toString() instead of bindingName because the name", "// in the binding should be a composite name", "String", "cnameStr", "=", "cname", ".", "toString", "(", ")", ";", "javax", ".", "naming", ".", "Binding", "jbndg", "=", "new", "javax", ".", "naming", ".", "Binding", "(", "cnameStr", ",", "obj", ")", ";", "NameComponent", "[", "]", "comps", "=", "_ctx", ".", "makeFullName", "(", "bndg", ".", "binding_name", ")", ";", "String", "fullName", "=", "org", ".", "wildfly", ".", "iiop", ".", "openjdk", ".", "naming", ".", "jndi", ".", "CNNameParser", ".", "cosNameToInsString", "(", "comps", ")", ";", "jbndg", ".", "setNameInNamespace", "(", "fullName", ")", ";", "return", "jbndg", ";", "}"], "docstring": "Constructs a JNDI Binding object from the COS Naming binding\nobject.\n\n@throws org.omg.CosNaming.NamingContextPackage.CannotProceed   Unable to obtain a continuation context\n@throws org.omg.CosNaming.NamingContextPackage.InvalidNameCNCtx     Name not understood.\n@throws NamingException One of the above.", "docstring_tokens": ["Constructs", "a", "JNDI", "Binding", "object", "from", "the", "COS", "Naming", "binding", "object", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNBindingEnumeration.java#L214-L239", "partition": "test", "index": 2871, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNNameParser.java", "func_name": "CNNameParser.insStringToStringifiedComps", "original_string": "private static Vector insStringToStringifiedComps(String str)\n            throws InvalidNameException {\n\n        int len = str.length();\n        Vector components = new Vector(10);\n        char[] id = new char[len];\n        char[] kind = new char[len];\n        int idCount, kindCount;\n        boolean idMode;\n        for (int i = 0; i < len; ) {\n            idCount = kindCount = 0; // reset for new component\n            idMode = true;           // always start off parsing id\n            while (i < len) {\n                if (str.charAt(i) == compSeparator) {\n                    break;\n\n                } else if (str.charAt(i) == escapeChar) {\n                    if (i + 1 >= len) {\n                        throw IIOPLogger.ROOT_LOGGER.unescapedCharacter(str);\n                    } else if (isMeta(str.charAt(i + 1))) {\n                        ++i; // skip escape and let meta through\n                        if (idMode) {\n                            id[idCount++] = str.charAt(i++);\n                        } else {\n                            kind[kindCount++] = str.charAt(i++);\n                        }\n                    } else {\n                        throw IIOPLogger.ROOT_LOGGER.invalidEscapedCharacter(str);\n                    }\n\n                } else if (idMode && str.charAt(i) == kindSeparator) {\n                    // just look for the first kindSeparator\n                    ++i; // skip kind separator\n                    idMode = false;\n\n                } else {\n                    if (idMode) {\n                        id[idCount++] = str.charAt(i++);\n                    } else {\n                        kind[kindCount++] = str.charAt(i++);\n                    }\n                }\n            }\n            components.addElement(stringifyComponent(\n                    new NameComponent(new String(id, 0, idCount),\n                            new String(kind, 0, kindCount))));\n\n            if (i < len) {\n                ++i; // skip separator\n            }\n        }\n\n        return components;\n    }", "language": "java", "code": "private static Vector insStringToStringifiedComps(String str)\n            throws InvalidNameException {\n\n        int len = str.length();\n        Vector components = new Vector(10);\n        char[] id = new char[len];\n        char[] kind = new char[len];\n        int idCount, kindCount;\n        boolean idMode;\n        for (int i = 0; i < len; ) {\n            idCount = kindCount = 0; // reset for new component\n            idMode = true;           // always start off parsing id\n            while (i < len) {\n                if (str.charAt(i) == compSeparator) {\n                    break;\n\n                } else if (str.charAt(i) == escapeChar) {\n                    if (i + 1 >= len) {\n                        throw IIOPLogger.ROOT_LOGGER.unescapedCharacter(str);\n                    } else if (isMeta(str.charAt(i + 1))) {\n                        ++i; // skip escape and let meta through\n                        if (idMode) {\n                            id[idCount++] = str.charAt(i++);\n                        } else {\n                            kind[kindCount++] = str.charAt(i++);\n                        }\n                    } else {\n                        throw IIOPLogger.ROOT_LOGGER.invalidEscapedCharacter(str);\n                    }\n\n                } else if (idMode && str.charAt(i) == kindSeparator) {\n                    // just look for the first kindSeparator\n                    ++i; // skip kind separator\n                    idMode = false;\n\n                } else {\n                    if (idMode) {\n                        id[idCount++] = str.charAt(i++);\n                    } else {\n                        kind[kindCount++] = str.charAt(i++);\n                    }\n                }\n            }\n            components.addElement(stringifyComponent(\n                    new NameComponent(new String(id, 0, idCount),\n                            new String(kind, 0, kindCount))));\n\n            if (i < len) {\n                ++i; // skip separator\n            }\n        }\n\n        return components;\n    }", "code_tokens": ["private", "static", "Vector", "insStringToStringifiedComps", "(", "String", "str", ")", "throws", "InvalidNameException", "{", "int", "len", "=", "str", ".", "length", "(", ")", ";", "Vector", "components", "=", "new", "Vector", "(", "10", ")", ";", "char", "[", "]", "id", "=", "new", "char", "[", "len", "]", ";", "char", "[", "]", "kind", "=", "new", "char", "[", "len", "]", ";", "int", "idCount", ",", "kindCount", ";", "boolean", "idMode", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "len", ";", ")", "{", "idCount", "=", "kindCount", "=", "0", ";", "// reset for new component", "idMode", "=", "true", ";", "// always start off parsing id", "while", "(", "i", "<", "len", ")", "{", "if", "(", "str", ".", "charAt", "(", "i", ")", "==", "compSeparator", ")", "{", "break", ";", "}", "else", "if", "(", "str", ".", "charAt", "(", "i", ")", "==", "escapeChar", ")", "{", "if", "(", "i", "+", "1", ">=", "len", ")", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "unescapedCharacter", "(", "str", ")", ";", "}", "else", "if", "(", "isMeta", "(", "str", ".", "charAt", "(", "i", "+", "1", ")", ")", ")", "{", "++", "i", ";", "// skip escape and let meta through", "if", "(", "idMode", ")", "{", "id", "[", "idCount", "++", "]", "=", "str", ".", "charAt", "(", "i", "++", ")", ";", "}", "else", "{", "kind", "[", "kindCount", "++", "]", "=", "str", ".", "charAt", "(", "i", "++", ")", ";", "}", "}", "else", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "invalidEscapedCharacter", "(", "str", ")", ";", "}", "}", "else", "if", "(", "idMode", "&&", "str", ".", "charAt", "(", "i", ")", "==", "kindSeparator", ")", "{", "// just look for the first kindSeparator", "++", "i", ";", "// skip kind separator", "idMode", "=", "false", ";", "}", "else", "{", "if", "(", "idMode", ")", "{", "id", "[", "idCount", "++", "]", "=", "str", ".", "charAt", "(", "i", "++", ")", ";", "}", "else", "{", "kind", "[", "kindCount", "++", "]", "=", "str", ".", "charAt", "(", "i", "++", ")", ";", "}", "}", "}", "components", ".", "addElement", "(", "stringifyComponent", "(", "new", "NameComponent", "(", "new", "String", "(", "id", ",", "0", ",", "idCount", ")", ",", "new", "String", "(", "kind", ",", "0", ",", "kindCount", ")", ")", ")", ")", ";", "if", "(", "i", "<", "len", ")", "{", "++", "i", ";", "// skip separator", "}", "}", "return", "components", ";", "}"], "docstring": "Converts an INS-syntax string name into a Vector in which\neach element of the vector contains a stringified form of\na NameComponent.", "docstring_tokens": ["Converts", "an", "INS", "-", "syntax", "string", "name", "into", "a", "Vector", "in", "which", "each", "element", "of", "the", "vector", "contains", "a", "stringified", "form", "of", "a", "NameComponent", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNNameParser.java#L143-L196", "partition": "test", "index": 2703, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/WorkCacheManager.java", "func_name": "WorkCacheManager.getAnalysis", "original_string": "ContainerAnalysis getAnalysis(final Class cls) throws RMIIIOPViolationException {\n        ContainerAnalysis ret = null;\n        boolean created = false;\n        try {\n            synchronized (this) {\n                ret = lookupDone(cls);\n                if (ret != null) {\n                    return ret;\n                }\n\n                // is it work-in-progress?\n                final ContainerAnalysis inProgress = workInProgress.get(new InProgressKey(cls, Thread.currentThread()));\n                if (inProgress != null) {\n                        return inProgress; // return unfinished\n\n                    // Do not wait for the other thread: We may deadlock\n                    // Double work is better that deadlock...\n                }\n\n                ret = createWorkInProgress(cls);\n            }\n            created = true;\n            // Do the work\n            doTheWork(cls, ret);\n        } finally {\n            // We did it\n            synchronized (this) {\n                if(created) {\n                    workInProgress.remove(new InProgressKey(cls, Thread.currentThread()));\n                    workDone.put(cls, new SoftReference<ContainerAnalysis>(ret));\n                    ClassLoader classLoader = cls.getClassLoader();\n                    if (classLoader != null) {\n                        Set<Class<?>> classes = classesByLoader.get(classLoader);\n                        if (classes == null) {\n                            classesByLoader.put(classLoader, classes = new HashSet<Class<?>>());\n                        }\n                        classes.add(cls);\n                    }\n                }\n                notifyAll();\n            }\n        }\n        return ret;\n    }", "language": "java", "code": "ContainerAnalysis getAnalysis(final Class cls) throws RMIIIOPViolationException {\n        ContainerAnalysis ret = null;\n        boolean created = false;\n        try {\n            synchronized (this) {\n                ret = lookupDone(cls);\n                if (ret != null) {\n                    return ret;\n                }\n\n                // is it work-in-progress?\n                final ContainerAnalysis inProgress = workInProgress.get(new InProgressKey(cls, Thread.currentThread()));\n                if (inProgress != null) {\n                        return inProgress; // return unfinished\n\n                    // Do not wait for the other thread: We may deadlock\n                    // Double work is better that deadlock...\n                }\n\n                ret = createWorkInProgress(cls);\n            }\n            created = true;\n            // Do the work\n            doTheWork(cls, ret);\n        } finally {\n            // We did it\n            synchronized (this) {\n                if(created) {\n                    workInProgress.remove(new InProgressKey(cls, Thread.currentThread()));\n                    workDone.put(cls, new SoftReference<ContainerAnalysis>(ret));\n                    ClassLoader classLoader = cls.getClassLoader();\n                    if (classLoader != null) {\n                        Set<Class<?>> classes = classesByLoader.get(classLoader);\n                        if (classes == null) {\n                            classesByLoader.put(classLoader, classes = new HashSet<Class<?>>());\n                        }\n                        classes.add(cls);\n                    }\n                }\n                notifyAll();\n            }\n        }\n        return ret;\n    }", "code_tokens": ["ContainerAnalysis", "getAnalysis", "(", "final", "Class", "cls", ")", "throws", "RMIIIOPViolationException", "{", "ContainerAnalysis", "ret", "=", "null", ";", "boolean", "created", "=", "false", ";", "try", "{", "synchronized", "(", "this", ")", "{", "ret", "=", "lookupDone", "(", "cls", ")", ";", "if", "(", "ret", "!=", "null", ")", "{", "return", "ret", ";", "}", "// is it work-in-progress?", "final", "ContainerAnalysis", "inProgress", "=", "workInProgress", ".", "get", "(", "new", "InProgressKey", "(", "cls", ",", "Thread", ".", "currentThread", "(", ")", ")", ")", ";", "if", "(", "inProgress", "!=", "null", ")", "{", "return", "inProgress", ";", "// return unfinished", "// Do not wait for the other thread: We may deadlock", "// Double work is better that deadlock...", "}", "ret", "=", "createWorkInProgress", "(", "cls", ")", ";", "}", "created", "=", "true", ";", "// Do the work", "doTheWork", "(", "cls", ",", "ret", ")", ";", "}", "finally", "{", "// We did it", "synchronized", "(", "this", ")", "{", "if", "(", "created", ")", "{", "workInProgress", ".", "remove", "(", "new", "InProgressKey", "(", "cls", ",", "Thread", ".", "currentThread", "(", ")", ")", ")", ";", "workDone", ".", "put", "(", "cls", ",", "new", "SoftReference", "<", "ContainerAnalysis", ">", "(", "ret", ")", ")", ";", "ClassLoader", "classLoader", "=", "cls", ".", "getClassLoader", "(", ")", ";", "if", "(", "classLoader", "!=", "null", ")", "{", "Set", "<", "Class", "<", "?", ">", ">", "classes", "=", "classesByLoader", ".", "get", "(", "classLoader", ")", ";", "if", "(", "classes", "==", "null", ")", "{", "classesByLoader", ".", "put", "(", "classLoader", ",", "classes", "=", "new", "HashSet", "<", "Class", "<", "?", ">", ">", "(", ")", ")", ";", "}", "classes", ".", "add", "(", "cls", ")", ";", "}", "}", "notifyAll", "(", ")", ";", "}", "}", "return", "ret", ";", "}"], "docstring": "Returns an analysis.\nIf the calling thread is currently doing an analysis of this\nclass, an unfinished analysis is returned.", "docstring_tokens": ["Returns", "an", "analysis", ".", "If", "the", "calling", "thread", "is", "currently", "doing", "an", "analysis", "of", "this", "class", "an", "unfinished", "analysis", "is", "returned", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/WorkCacheManager.java#L115-L158", "partition": "test", "index": 2742, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java", "func_name": "InterfaceRepository.addClass", "original_string": "private void addClass(Class cls)\n            throws RMIIIOPViolationException, IRConstructionException {\n        if (cls.isPrimitive())\n            return; // No need to add primitives.\n\n        if (cls.isArray()) {\n            // Add array mapping\n            addArray(cls);\n        } else if (cls.isInterface()) {\n            if (!RmiIdlUtil.isAbstractValueType(cls)) {\n                // Analyse the interface\n                InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls);\n\n                // Add analyzed interface (which may be abstract)\n                addInterface(ia);\n            } else {\n                // Analyse the value\n                ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls);\n\n                // Add analyzed value\n                addValue(va);\n            }\n        } else if (Exception.class.isAssignableFrom(cls)) { // Exception type.\n            // Analyse the exception\n            ExceptionAnalysis ea = ExceptionAnalysis.getExceptionAnalysis(cls);\n\n            // Add analyzed exception\n            addException(ea);\n        } else { // Got to be a value type.\n            // Analyse the value\n            ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls);\n\n            // Add analyzed value\n            addValue(va);\n        }\n    }", "language": "java", "code": "private void addClass(Class cls)\n            throws RMIIIOPViolationException, IRConstructionException {\n        if (cls.isPrimitive())\n            return; // No need to add primitives.\n\n        if (cls.isArray()) {\n            // Add array mapping\n            addArray(cls);\n        } else if (cls.isInterface()) {\n            if (!RmiIdlUtil.isAbstractValueType(cls)) {\n                // Analyse the interface\n                InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls);\n\n                // Add analyzed interface (which may be abstract)\n                addInterface(ia);\n            } else {\n                // Analyse the value\n                ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls);\n\n                // Add analyzed value\n                addValue(va);\n            }\n        } else if (Exception.class.isAssignableFrom(cls)) { // Exception type.\n            // Analyse the exception\n            ExceptionAnalysis ea = ExceptionAnalysis.getExceptionAnalysis(cls);\n\n            // Add analyzed exception\n            addException(ea);\n        } else { // Got to be a value type.\n            // Analyse the value\n            ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls);\n\n            // Add analyzed value\n            addValue(va);\n        }\n    }", "code_tokens": ["private", "void", "addClass", "(", "Class", "cls", ")", "throws", "RMIIIOPViolationException", ",", "IRConstructionException", "{", "if", "(", "cls", ".", "isPrimitive", "(", ")", ")", "return", ";", "// No need to add primitives.", "if", "(", "cls", ".", "isArray", "(", ")", ")", "{", "// Add array mapping", "addArray", "(", "cls", ")", ";", "}", "else", "if", "(", "cls", ".", "isInterface", "(", ")", ")", "{", "if", "(", "!", "RmiIdlUtil", ".", "isAbstractValueType", "(", "cls", ")", ")", "{", "// Analyse the interface", "InterfaceAnalysis", "ia", "=", "InterfaceAnalysis", ".", "getInterfaceAnalysis", "(", "cls", ")", ";", "// Add analyzed interface (which may be abstract)", "addInterface", "(", "ia", ")", ";", "}", "else", "{", "// Analyse the value", "ValueAnalysis", "va", "=", "ValueAnalysis", ".", "getValueAnalysis", "(", "cls", ")", ";", "// Add analyzed value", "addValue", "(", "va", ")", ";", "}", "}", "else", "if", "(", "Exception", ".", "class", ".", "isAssignableFrom", "(", "cls", ")", ")", "{", "// Exception type.", "// Analyse the exception", "ExceptionAnalysis", "ea", "=", "ExceptionAnalysis", ".", "getExceptionAnalysis", "(", "cls", ")", ";", "// Add analyzed exception", "addException", "(", "ea", ")", ";", "}", "else", "{", "// Got to be a value type.", "// Analyse the value", "ValueAnalysis", "va", "=", "ValueAnalysis", ".", "getValueAnalysis", "(", "cls", ")", ";", "// Add analyzed value", "addValue", "(", "va", ")", ";", "}", "}"], "docstring": "Map the class and add its IIOP mapping to the repository.", "docstring_tokens": ["Map", "the", "class", "and", "add", "its", "IIOP", "mapping", "to", "the", "repository", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java#L623-L658", "partition": "test", "index": 2851, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java", "func_name": "Util.javaToIDLName", "original_string": "public static String javaToIDLName(String name) {\n        if (name == null || \"\".equals(name) || name.indexOf('.') != -1)\n            throw IIOPLogger.ROOT_LOGGER.nameCannotBeNullEmptyOrQualified();\n\n        StringBuffer res = new StringBuffer(name.length());\n\n        if (name.charAt(0) == '_')\n            res.append('J'); // 1.3.2.3\n\n        for (int i = 0; i < name.length(); ++i) {\n            char c = name.charAt(i);\n\n            if (isLegalIDLIdentifierChar(c))\n                res.append(c);\n            else // 1.3.2.4\n                res.append('U').append(toHexString((int) c));\n        }\n\n        String s = res.toString();\n\n        if (isReservedIDLKeyword(s))\n            return \"_\" + s;\n        else\n            return s;\n    }", "language": "java", "code": "public static String javaToIDLName(String name) {\n        if (name == null || \"\".equals(name) || name.indexOf('.') != -1)\n            throw IIOPLogger.ROOT_LOGGER.nameCannotBeNullEmptyOrQualified();\n\n        StringBuffer res = new StringBuffer(name.length());\n\n        if (name.charAt(0) == '_')\n            res.append('J'); // 1.3.2.3\n\n        for (int i = 0; i < name.length(); ++i) {\n            char c = name.charAt(i);\n\n            if (isLegalIDLIdentifierChar(c))\n                res.append(c);\n            else // 1.3.2.4\n                res.append('U').append(toHexString((int) c));\n        }\n\n        String s = res.toString();\n\n        if (isReservedIDLKeyword(s))\n            return \"_\" + s;\n        else\n            return s;\n    }", "code_tokens": ["public", "static", "String", "javaToIDLName", "(", "String", "name", ")", "{", "if", "(", "name", "==", "null", "||", "\"\"", ".", "equals", "(", "name", ")", "||", "name", ".", "indexOf", "(", "'", "'", ")", "!=", "-", "1", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "nameCannotBeNullEmptyOrQualified", "(", ")", ";", "StringBuffer", "res", "=", "new", "StringBuffer", "(", "name", ".", "length", "(", ")", ")", ";", "if", "(", "name", ".", "charAt", "(", "0", ")", "==", "'", "'", ")", "res", ".", "append", "(", "'", "'", ")", ";", "// 1.3.2.3", "for", "(", "int", "i", "=", "0", ";", "i", "<", "name", ".", "length", "(", ")", ";", "++", "i", ")", "{", "char", "c", "=", "name", ".", "charAt", "(", "i", ")", ";", "if", "(", "isLegalIDLIdentifierChar", "(", "c", ")", ")", "res", ".", "append", "(", "c", ")", ";", "else", "// 1.3.2.4", "res", ".", "append", "(", "'", "'", ")", ".", "append", "(", "toHexString", "(", "(", "int", ")", "c", ")", ")", ";", "}", "String", "s", "=", "res", ".", "toString", "(", ")", ";", "if", "(", "isReservedIDLKeyword", "(", "s", ")", ")", "return", "\"_\"", "+", "s", ";", "else", "return", "s", ";", "}"], "docstring": "Map Java name to IDL name, as per sections 1.3.2.3, 1.3.2.4 and\n1.3.2.2.\nThis only works for a single name component, without a qualifying\ndot.", "docstring_tokens": ["Map", "Java", "name", "to", "IDL", "name", "as", "per", "sections", "1", ".", "3", ".", "2", ".", "3", "1", ".", "3", ".", "2", ".", "4", "and", "1", ".", "3", ".", "2", ".", "2", ".", "This", "only", "works", "for", "a", "single", "name", "component", "without", "a", "qualifying", "dot", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java#L208-L232", "partition": "test", "index": 2631, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.destroySubcontext", "original_string": "public void destroySubcontext(Name name)\n            throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(name.toString());\n        NamingContext the_nc = _nc;\n        NameComponent[] path = org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.nameToCosName(name);\n        if (name.size() > 0) {\n            try {\n                javax.naming.Context ctx =\n                        (javax.naming.Context) callResolve(path);\n                CNCtx cnc = (CNCtx) ctx;\n                the_nc = cnc._nc;\n                cnc.close(); //remove the reference to the context\n            } catch (ClassCastException e) {\n                throw new NotContextException(name.toString());\n            } catch (CannotProceedException e) {\n                javax.naming.Context cctx = getContinuationContext(e);\n                cctx.destroySubcontext(e.getRemainingName());\n                return;\n            } catch (NameNotFoundException e) {\n                // If leaf is the one missing, return success\n                // as per JNDI spec\n\n                if (e.getRootCause() instanceof NotFound &&\n                        leafNotFound((NotFound) e.getRootCause(),\n                                path[path.length - 1])) {\n                    return; // leaf missing OK\n                }\n                throw e;\n            } catch (NamingException e) {\n                throw e;\n            }\n        }\n        callDestroy(the_nc);\n        callUnbind(path);\n    }", "language": "java", "code": "public void destroySubcontext(Name name)\n            throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(name.toString());\n        NamingContext the_nc = _nc;\n        NameComponent[] path = org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.nameToCosName(name);\n        if (name.size() > 0) {\n            try {\n                javax.naming.Context ctx =\n                        (javax.naming.Context) callResolve(path);\n                CNCtx cnc = (CNCtx) ctx;\n                the_nc = cnc._nc;\n                cnc.close(); //remove the reference to the context\n            } catch (ClassCastException e) {\n                throw new NotContextException(name.toString());\n            } catch (CannotProceedException e) {\n                javax.naming.Context cctx = getContinuationContext(e);\n                cctx.destroySubcontext(e.getRemainingName());\n                return;\n            } catch (NameNotFoundException e) {\n                // If leaf is the one missing, return success\n                // as per JNDI spec\n\n                if (e.getRootCause() instanceof NotFound &&\n                        leafNotFound((NotFound) e.getRootCause(),\n                                path[path.length - 1])) {\n                    return; // leaf missing OK\n                }\n                throw e;\n            } catch (NamingException e) {\n                throw e;\n            }\n        }\n        callDestroy(the_nc);\n        callUnbind(path);\n    }", "code_tokens": ["public", "void", "destroySubcontext", "(", "Name", "name", ")", "throws", "NamingException", "{", "if", "(", "_nc", "==", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notANamingContext", "(", "name", ".", "toString", "(", ")", ")", ";", "NamingContext", "the_nc", "=", "_nc", ";", "NameComponent", "[", "]", "path", "=", "org", ".", "wildfly", ".", "iiop", ".", "openjdk", ".", "naming", ".", "jndi", ".", "CNNameParser", ".", "nameToCosName", "(", "name", ")", ";", "if", "(", "name", ".", "size", "(", ")", ">", "0", ")", "{", "try", "{", "javax", ".", "naming", ".", "Context", "ctx", "=", "(", "javax", ".", "naming", ".", "Context", ")", "callResolve", "(", "path", ")", ";", "CNCtx", "cnc", "=", "(", "CNCtx", ")", "ctx", ";", "the_nc", "=", "cnc", ".", "_nc", ";", "cnc", ".", "close", "(", ")", ";", "//remove the reference to the context", "}", "catch", "(", "ClassCastException", "e", ")", "{", "throw", "new", "NotContextException", "(", "name", ".", "toString", "(", ")", ")", ";", "}", "catch", "(", "CannotProceedException", "e", ")", "{", "javax", ".", "naming", ".", "Context", "cctx", "=", "getContinuationContext", "(", "e", ")", ";", "cctx", ".", "destroySubcontext", "(", "e", ".", "getRemainingName", "(", ")", ")", ";", "return", ";", "}", "catch", "(", "NameNotFoundException", "e", ")", "{", "// If leaf is the one missing, return success", "// as per JNDI spec", "if", "(", "e", ".", "getRootCause", "(", ")", "instanceof", "NotFound", "&&", "leafNotFound", "(", "(", "NotFound", ")", "e", ".", "getRootCause", "(", ")", ",", "path", "[", "path", ".", "length", "-", "1", "]", ")", ")", "{", "return", ";", "// leaf missing OK", "}", "throw", "e", ";", "}", "catch", "(", "NamingException", "e", ")", "{", "throw", "e", ";", "}", "}", "callDestroy", "(", "the_nc", ")", ";", "callUnbind", "(", "path", ")", ";", "}"], "docstring": "Uses the callDestroy function to destroy the context. Destroys\nthe current context if name is empty.\n\n@param name JNDI Name\n@throws javax.naming.OperationNotSupportedException when list is invoked\nwith a non-null argument", "docstring_tokens": ["Uses", "the", "callDestroy", "function", "to", "destroy", "the", "context", ".", "Destroys", "the", "current", "context", "if", "name", "is", "empty", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L885-L920", "partition": "test", "index": 2776, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java", "func_name": "InterfaceRepository.getConstantTypeCode", "original_string": "private TypeCode getConstantTypeCode(Class cls)\n            throws IRConstructionException {\n        if (cls == null)\n            throw IIOPLogger.ROOT_LOGGER.invalidNullClass();\n\n        TypeCode ret = constantTypeCodeMap.get(cls);\n\n        if (ret == null)\n            throw IIOPLogger.ROOT_LOGGER.badClassForConstant(cls.getName());\n        return ret;\n    }", "language": "java", "code": "private TypeCode getConstantTypeCode(Class cls)\n            throws IRConstructionException {\n        if (cls == null)\n            throw IIOPLogger.ROOT_LOGGER.invalidNullClass();\n\n        TypeCode ret = constantTypeCodeMap.get(cls);\n\n        if (ret == null)\n            throw IIOPLogger.ROOT_LOGGER.badClassForConstant(cls.getName());\n        return ret;\n    }", "code_tokens": ["private", "TypeCode", "getConstantTypeCode", "(", "Class", "cls", ")", "throws", "IRConstructionException", "{", "if", "(", "cls", "==", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "invalidNullClass", "(", ")", ";", "TypeCode", "ret", "=", "constantTypeCodeMap", ".", "get", "(", "cls", ")", ";", "if", "(", "ret", "==", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "badClassForConstant", "(", "cls", ".", "getName", "(", ")", ")", ";", "return", "ret", ";", "}"], "docstring": "Returns the TypeCode suitable for an IDL constant.\n\n@param cls The Java class denoting the type of the constant.", "docstring_tokens": ["Returns", "the", "TypeCode", "suitable", "for", "an", "IDL", "constant", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java#L216-L226", "partition": "test", "index": 2846, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java", "func_name": "InterfaceRepository.addTypeCode", "original_string": "private void addTypeCode(Class cls, TypeCode typeCode)\n            throws IRConstructionException {\n        if (cls == null)\n            throw IIOPLogger.ROOT_LOGGER.invalidNullClass();\n\n        TypeCode tc = (TypeCode) typeCodeMap.get(cls);\n\n        if (tc != null)\n            throw IIOPLogger.ROOT_LOGGER.duplicateTypeCodeForClass(cls.getName());\n\n        typeCodeMap.put(cls, typeCode);\n    }", "language": "java", "code": "private void addTypeCode(Class cls, TypeCode typeCode)\n            throws IRConstructionException {\n        if (cls == null)\n            throw IIOPLogger.ROOT_LOGGER.invalidNullClass();\n\n        TypeCode tc = (TypeCode) typeCodeMap.get(cls);\n\n        if (tc != null)\n            throw IIOPLogger.ROOT_LOGGER.duplicateTypeCodeForClass(cls.getName());\n\n        typeCodeMap.put(cls, typeCode);\n    }", "code_tokens": ["private", "void", "addTypeCode", "(", "Class", "cls", ",", "TypeCode", "typeCode", ")", "throws", "IRConstructionException", "{", "if", "(", "cls", "==", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "invalidNullClass", "(", ")", ";", "TypeCode", "tc", "=", "(", "TypeCode", ")", "typeCodeMap", ".", "get", "(", "cls", ")", ";", "if", "(", "tc", "!=", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "duplicateTypeCodeForClass", "(", "cls", ".", "getName", "(", ")", ")", ";", "typeCodeMap", ".", "put", "(", "cls", ",", "typeCode", ")", ";", "}"], "docstring": "Add a new IDL TypeCode for a mapped class.\n\n@param cls      The Java class denoting the java type.\n@param typeCode The IDL type code of the mapped java class.", "docstring_tokens": ["Add", "a", "new", "IDL", "TypeCode", "for", "a", "mapped", "class", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java#L283-L294", "partition": "test", "index": 2847, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.callUnbind", "original_string": "private void callUnbind(NameComponent[] path) throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(path.toString());\n        try {\n            _nc.unbind(path);\n        } catch (NotFound e) {\n            // If leaf is the one missing, return success\n            // as per JNDI spec\n\n            if (leafNotFound(e, path[path.length - 1])) {\n                // do nothing\n            } else {\n                throw org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper.mapException(e, this, path);\n            }\n        } catch (Exception e) {\n            throw org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper.mapException(e, this, path);\n        }\n    }", "language": "java", "code": "private void callUnbind(NameComponent[] path) throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(path.toString());\n        try {\n            _nc.unbind(path);\n        } catch (NotFound e) {\n            // If leaf is the one missing, return success\n            // as per JNDI spec\n\n            if (leafNotFound(e, path[path.length - 1])) {\n                // do nothing\n            } else {\n                throw org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper.mapException(e, this, path);\n            }\n        } catch (Exception e) {\n            throw org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper.mapException(e, this, path);\n        }\n    }", "code_tokens": ["private", "void", "callUnbind", "(", "NameComponent", "[", "]", "path", ")", "throws", "NamingException", "{", "if", "(", "_nc", "==", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notANamingContext", "(", "path", ".", "toString", "(", ")", ")", ";", "try", "{", "_nc", ".", "unbind", "(", "path", ")", ";", "}", "catch", "(", "NotFound", "e", ")", "{", "// If leaf is the one missing, return success", "// as per JNDI spec", "if", "(", "leafNotFound", "(", "e", ",", "path", "[", "path", ".", "length", "-", "1", "]", ")", ")", "{", "// do nothing", "}", "else", "{", "throw", "org", ".", "wildfly", ".", "iiop", ".", "openjdk", ".", "naming", ".", "jndi", ".", "ExceptionMapper", ".", "mapException", "(", "e", ",", "this", ",", "path", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "org", ".", "wildfly", ".", "iiop", ".", "openjdk", ".", "naming", ".", "jndi", ".", "ExceptionMapper", ".", "mapException", "(", "e", ",", "this", ",", "path", ")", ";", "}", "}"], "docstring": "Calls the unbind api of COS Naming and uses the exception mapper\nclass  to map the exceptions\n\n@param path NameComponent[] object\n@throws NotFound      No objects under the name. If leaf\nis not found, that's OK according to the JNDI spec\n@throws org.omg.CosNaming.NamingContextPackage.CannotProceed Unable to obtain a continuation context\n@throws org.omg.CosNaming.NamingContextPackage.InvalidName   Name not understood.", "docstring_tokens": ["Calls", "the", "unbind", "api", "of", "COS", "Naming", "and", "uses", "the", "exception", "mapper", "class", "to", "map", "the", "exceptions"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L673-L690", "partition": "test", "index": 2773, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.bind", "original_string": "public void bind(String name, java.lang.Object obj) throws NamingException {\n        bind(new CompositeName(name), obj);\n    }", "language": "java", "code": "public void bind(String name, java.lang.Object obj) throws NamingException {\n        bind(new CompositeName(name), obj);\n    }", "code_tokens": ["public", "void", "bind", "(", "String", "name", ",", "java", ".", "lang", ".", "Object", "obj", ")", "throws", "NamingException", "{", "bind", "(", "new", "CompositeName", "(", "name", ")", ",", "obj", ")", ";", "}"], "docstring": "Converts the \"String\" name into a CompositeName object and\nperforms the bind operation. Uses callBindOrRebind. Throws an\ninvalid name exception if the name is empty.\n\n@param name string\n@param obj  Object to be bound.\n@throws NamingException See callBindOrRebind", "docstring_tokens": ["Converts", "the", "String", "name", "into", "a", "CompositeName", "object", "and", "performs", "the", "bind", "operation", ".", "Uses", "callBindOrRebind", ".", "Throws", "an", "invalid", "name", "exception", "if", "the", "name", "is", "empty", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L620-L622", "partition": "test", "index": 2772, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java", "func_name": "Util.getTypeIDLName", "original_string": "public static String getTypeIDLName(Class cls)\n            throws RMIIIOPViolationException {\n\n        if (cls.isPrimitive())\n            return PrimitiveAnalysis.getPrimitiveAnalysis(cls).getIDLName();\n\n        if (cls.isArray()) {\n            // boxedRMI 1.3.6\n            Class componentClass = cls;\n            int sequence = 0;\n            while (componentClass.isArray()) {\n                componentClass = componentClass.getComponentType();\n                ++sequence;\n            }\n\n            String idlName = getTypeIDLName(componentClass);\n            int idx = idlName.lastIndexOf(\"::\");\n            String idlModule = idlName.substring(0, idx + 2);\n            String baseName = idlName.substring(idx + 2);\n            return \"::org::omg::boxedRMI\" + idlModule + \"seq\" + sequence + \"_\" + baseName;\n        }\n\n        // special classes\n        if (cls == java.lang.String.class)\n            return \"::CORBA::WStringValue\";\n        if (cls == java.lang.Object.class)\n            return \"::java::lang::_Object\";\n        if (cls == java.lang.Class.class)\n            return \"::javax::rmi::CORBA::ClassDesc\";\n        if (cls == java.io.Serializable.class)\n            return \"::java::io::Serializable\";\n        if (cls == java.io.Externalizable.class)\n            return \"::java::io::Externalizable\";\n        if (cls == java.rmi.Remote.class)\n            return \"::java::rmi::Remote\";\n        if (cls == org.omg.CORBA.Object.class)\n            return \"::CORBA::Object\";\n\n\n        // remote interface?\n        if (cls.isInterface() && java.rmi.Remote.class.isAssignableFrom(cls)) {\n            InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls);\n\n            return ia.getIDLModuleName() + \"::\" + ia.getIDLName();\n        }\n\n        // IDL interface?\n        if (cls.isInterface() &&\n                org.omg.CORBA.Object.class.isAssignableFrom(cls) &&\n                org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) {\n            InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls);\n\n            return ia.getIDLModuleName() + \"::\" + ia.getIDLName();\n        }\n\n        // exception?\n        if (Throwable.class.isAssignableFrom(cls)) {\n            if (Exception.class.isAssignableFrom(cls) &&\n                    !RuntimeException.class.isAssignableFrom(cls)) {\n                ExceptionAnalysis ea = ExceptionAnalysis.getExceptionAnalysis(cls);\n\n                return ea.getIDLModuleName() + \"::\" + ea.getIDLName();\n            }\n        }\n\n        // got to be value\n        ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls);\n\n        return va.getIDLModuleName() + \"::\" + va.getIDLName();\n    }", "language": "java", "code": "public static String getTypeIDLName(Class cls)\n            throws RMIIIOPViolationException {\n\n        if (cls.isPrimitive())\n            return PrimitiveAnalysis.getPrimitiveAnalysis(cls).getIDLName();\n\n        if (cls.isArray()) {\n            // boxedRMI 1.3.6\n            Class componentClass = cls;\n            int sequence = 0;\n            while (componentClass.isArray()) {\n                componentClass = componentClass.getComponentType();\n                ++sequence;\n            }\n\n            String idlName = getTypeIDLName(componentClass);\n            int idx = idlName.lastIndexOf(\"::\");\n            String idlModule = idlName.substring(0, idx + 2);\n            String baseName = idlName.substring(idx + 2);\n            return \"::org::omg::boxedRMI\" + idlModule + \"seq\" + sequence + \"_\" + baseName;\n        }\n\n        // special classes\n        if (cls == java.lang.String.class)\n            return \"::CORBA::WStringValue\";\n        if (cls == java.lang.Object.class)\n            return \"::java::lang::_Object\";\n        if (cls == java.lang.Class.class)\n            return \"::javax::rmi::CORBA::ClassDesc\";\n        if (cls == java.io.Serializable.class)\n            return \"::java::io::Serializable\";\n        if (cls == java.io.Externalizable.class)\n            return \"::java::io::Externalizable\";\n        if (cls == java.rmi.Remote.class)\n            return \"::java::rmi::Remote\";\n        if (cls == org.omg.CORBA.Object.class)\n            return \"::CORBA::Object\";\n\n\n        // remote interface?\n        if (cls.isInterface() && java.rmi.Remote.class.isAssignableFrom(cls)) {\n            InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls);\n\n            return ia.getIDLModuleName() + \"::\" + ia.getIDLName();\n        }\n\n        // IDL interface?\n        if (cls.isInterface() &&\n                org.omg.CORBA.Object.class.isAssignableFrom(cls) &&\n                org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) {\n            InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls);\n\n            return ia.getIDLModuleName() + \"::\" + ia.getIDLName();\n        }\n\n        // exception?\n        if (Throwable.class.isAssignableFrom(cls)) {\n            if (Exception.class.isAssignableFrom(cls) &&\n                    !RuntimeException.class.isAssignableFrom(cls)) {\n                ExceptionAnalysis ea = ExceptionAnalysis.getExceptionAnalysis(cls);\n\n                return ea.getIDLModuleName() + \"::\" + ea.getIDLName();\n            }\n        }\n\n        // got to be value\n        ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls);\n\n        return va.getIDLModuleName() + \"::\" + va.getIDLName();\n    }", "code_tokens": ["public", "static", "String", "getTypeIDLName", "(", "Class", "cls", ")", "throws", "RMIIIOPViolationException", "{", "if", "(", "cls", ".", "isPrimitive", "(", ")", ")", "return", "PrimitiveAnalysis", ".", "getPrimitiveAnalysis", "(", "cls", ")", ".", "getIDLName", "(", ")", ";", "if", "(", "cls", ".", "isArray", "(", ")", ")", "{", "// boxedRMI 1.3.6", "Class", "componentClass", "=", "cls", ";", "int", "sequence", "=", "0", ";", "while", "(", "componentClass", ".", "isArray", "(", ")", ")", "{", "componentClass", "=", "componentClass", ".", "getComponentType", "(", ")", ";", "++", "sequence", ";", "}", "String", "idlName", "=", "getTypeIDLName", "(", "componentClass", ")", ";", "int", "idx", "=", "idlName", ".", "lastIndexOf", "(", "\"::\"", ")", ";", "String", "idlModule", "=", "idlName", ".", "substring", "(", "0", ",", "idx", "+", "2", ")", ";", "String", "baseName", "=", "idlName", ".", "substring", "(", "idx", "+", "2", ")", ";", "return", "\"::org::omg::boxedRMI\"", "+", "idlModule", "+", "\"seq\"", "+", "sequence", "+", "\"_\"", "+", "baseName", ";", "}", "// special classes", "if", "(", "cls", "==", "java", ".", "lang", ".", "String", ".", "class", ")", "return", "\"::CORBA::WStringValue\"", ";", "if", "(", "cls", "==", "java", ".", "lang", ".", "Object", ".", "class", ")", "return", "\"::java::lang::_Object\"", ";", "if", "(", "cls", "==", "java", ".", "lang", ".", "Class", ".", "class", ")", "return", "\"::javax::rmi::CORBA::ClassDesc\"", ";", "if", "(", "cls", "==", "java", ".", "io", ".", "Serializable", ".", "class", ")", "return", "\"::java::io::Serializable\"", ";", "if", "(", "cls", "==", "java", ".", "io", ".", "Externalizable", ".", "class", ")", "return", "\"::java::io::Externalizable\"", ";", "if", "(", "cls", "==", "java", ".", "rmi", ".", "Remote", ".", "class", ")", "return", "\"::java::rmi::Remote\"", ";", "if", "(", "cls", "==", "org", ".", "omg", ".", "CORBA", ".", "Object", ".", "class", ")", "return", "\"::CORBA::Object\"", ";", "// remote interface?", "if", "(", "cls", ".", "isInterface", "(", ")", "&&", "java", ".", "rmi", ".", "Remote", ".", "class", ".", "isAssignableFrom", "(", "cls", ")", ")", "{", "InterfaceAnalysis", "ia", "=", "InterfaceAnalysis", ".", "getInterfaceAnalysis", "(", "cls", ")", ";", "return", "ia", ".", "getIDLModuleName", "(", ")", "+", "\"::\"", "+", "ia", ".", "getIDLName", "(", ")", ";", "}", "// IDL interface?", "if", "(", "cls", ".", "isInterface", "(", ")", "&&", "org", ".", "omg", ".", "CORBA", ".", "Object", ".", "class", ".", "isAssignableFrom", "(", "cls", ")", "&&", "org", ".", "omg", ".", "CORBA", ".", "portable", ".", "IDLEntity", ".", "class", ".", "isAssignableFrom", "(", "cls", ")", ")", "{", "InterfaceAnalysis", "ia", "=", "InterfaceAnalysis", ".", "getInterfaceAnalysis", "(", "cls", ")", ";", "return", "ia", ".", "getIDLModuleName", "(", ")", "+", "\"::\"", "+", "ia", ".", "getIDLName", "(", ")", ";", "}", "// exception?", "if", "(", "Throwable", ".", "class", ".", "isAssignableFrom", "(", "cls", ")", ")", "{", "if", "(", "Exception", ".", "class", ".", "isAssignableFrom", "(", "cls", ")", "&&", "!", "RuntimeException", ".", "class", ".", "isAssignableFrom", "(", "cls", ")", ")", "{", "ExceptionAnalysis", "ea", "=", "ExceptionAnalysis", ".", "getExceptionAnalysis", "(", "cls", ")", ";", "return", "ea", ".", "getIDLModuleName", "(", ")", "+", "\"::\"", "+", "ea", ".", "getIDLName", "(", ")", ";", "}", "}", "// got to be value", "ValueAnalysis", "va", "=", "ValueAnalysis", ".", "getValueAnalysis", "(", "cls", ")", ";", "return", "va", ".", "getIDLModuleName", "(", ")", "+", "\"::\"", "+", "va", ".", "getIDLName", "(", ")", ";", "}"], "docstring": "Return the IDL type name for the given class.\nHere we use the mapping for parameter types and return values.", "docstring_tokens": ["Return", "the", "IDL", "type", "name", "for", "the", "given", "class", ".", "Here", "we", "use", "the", "mapping", "for", "parameter", "types", "and", "return", "values", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java#L63-L132", "partition": "test", "index": 2629, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.lookup", "original_string": "public java.lang.Object lookup(String name) throws NamingException {\n        return lookup(new CompositeName(name));\n    }", "language": "java", "code": "public java.lang.Object lookup(String name) throws NamingException {\n        return lookup(new CompositeName(name));\n    }", "code_tokens": ["public", "java", ".", "lang", ".", "Object", "lookup", "(", "String", "name", ")", "throws", "NamingException", "{", "return", "lookup", "(", "new", "CompositeName", "(", "name", ")", ")", ";", "}"], "docstring": "Converts the \"String\" name into a CompositeName\nreturns the object resolved by the COS Naming api,\nresolve. Returns the current context if the name is empty.\nReturns either an org.omg.CORBA.Object or javax.naming.Context object.\n\n@param name string used to resolve the object.\n@return the resolved object\n@throws NamingException See callResolve.", "docstring_tokens": ["Converts", "the", "String", "name", "into", "a", "CompositeName", "returns", "the", "object", "resolved", "by", "the", "COS", "Naming", "api", "resolve", ".", "Returns", "the", "current", "context", "if", "the", "name", "is", "empty", ".", "Returns", "either", "an", "org", ".", "omg", ".", "CORBA", ".", "Object", "or", "javax", ".", "naming", ".", "Context", "object", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L473-L475", "partition": "test", "index": 2771, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java", "func_name": "InterfaceRepository.ensurePackageExists", "original_string": "private ModuleDefImpl ensurePackageExists(LocalContainer c,\n                                              String previous,\n                                              String remainder)\n            throws IRConstructionException {\n        if (\"\".equals(remainder))\n            return (ModuleDefImpl) c; // done\n\n        int idx = remainder.indexOf('.');\n        String base;\n\n        if (idx == -1)\n            base = remainder;\n        else\n            base = remainder.substring(0, idx);\n        base = Util.javaToIDLName(base);\n\n        if (previous.equals(\"\"))\n            previous = base;\n        else\n            previous = previous + \"/\" + base;\n        if (idx == -1)\n            remainder = \"\";\n        else\n            remainder = remainder.substring(idx + 1);\n\n        LocalContainer next = null;\n        LocalContained contained = (LocalContained) c._lookup(base);\n\n        if (contained instanceof LocalContainer)\n            next = (LocalContainer) contained;\n        else if (contained != null)\n            throw IIOPLogger.ROOT_LOGGER.collisionWhileCreatingPackage();\n\n        if (next == null) {\n            String id = \"IDL:\" + previous + \":1.0\";\n\n            // Create module\n            ModuleDefImpl m = new ModuleDefImpl(id, base, \"1.0\", c, impl);\n\n            c.add(base, m);\n\n            if (idx == -1)\n                return m; // done\n\n            next = (LocalContainer) c._lookup(base); // Better be there now...\n        } else // Check that next _is_ a module\n            if (next.def_kind() != DefinitionKind.dk_Module)\n                throw IIOPLogger.ROOT_LOGGER.collisionWhileCreatingPackage();\n\n        return ensurePackageExists(next, previous, remainder);\n    }", "language": "java", "code": "private ModuleDefImpl ensurePackageExists(LocalContainer c,\n                                              String previous,\n                                              String remainder)\n            throws IRConstructionException {\n        if (\"\".equals(remainder))\n            return (ModuleDefImpl) c; // done\n\n        int idx = remainder.indexOf('.');\n        String base;\n\n        if (idx == -1)\n            base = remainder;\n        else\n            base = remainder.substring(0, idx);\n        base = Util.javaToIDLName(base);\n\n        if (previous.equals(\"\"))\n            previous = base;\n        else\n            previous = previous + \"/\" + base;\n        if (idx == -1)\n            remainder = \"\";\n        else\n            remainder = remainder.substring(idx + 1);\n\n        LocalContainer next = null;\n        LocalContained contained = (LocalContained) c._lookup(base);\n\n        if (contained instanceof LocalContainer)\n            next = (LocalContainer) contained;\n        else if (contained != null)\n            throw IIOPLogger.ROOT_LOGGER.collisionWhileCreatingPackage();\n\n        if (next == null) {\n            String id = \"IDL:\" + previous + \":1.0\";\n\n            // Create module\n            ModuleDefImpl m = new ModuleDefImpl(id, base, \"1.0\", c, impl);\n\n            c.add(base, m);\n\n            if (idx == -1)\n                return m; // done\n\n            next = (LocalContainer) c._lookup(base); // Better be there now...\n        } else // Check that next _is_ a module\n            if (next.def_kind() != DefinitionKind.dk_Module)\n                throw IIOPLogger.ROOT_LOGGER.collisionWhileCreatingPackage();\n\n        return ensurePackageExists(next, previous, remainder);\n    }", "code_tokens": ["private", "ModuleDefImpl", "ensurePackageExists", "(", "LocalContainer", "c", ",", "String", "previous", ",", "String", "remainder", ")", "throws", "IRConstructionException", "{", "if", "(", "\"\"", ".", "equals", "(", "remainder", ")", ")", "return", "(", "ModuleDefImpl", ")", "c", ";", "// done", "int", "idx", "=", "remainder", ".", "indexOf", "(", "'", "'", ")", ";", "String", "base", ";", "if", "(", "idx", "==", "-", "1", ")", "base", "=", "remainder", ";", "else", "base", "=", "remainder", ".", "substring", "(", "0", ",", "idx", ")", ";", "base", "=", "Util", ".", "javaToIDLName", "(", "base", ")", ";", "if", "(", "previous", ".", "equals", "(", "\"\"", ")", ")", "previous", "=", "base", ";", "else", "previous", "=", "previous", "+", "\"/\"", "+", "base", ";", "if", "(", "idx", "==", "-", "1", ")", "remainder", "=", "\"\"", ";", "else", "remainder", "=", "remainder", ".", "substring", "(", "idx", "+", "1", ")", ";", "LocalContainer", "next", "=", "null", ";", "LocalContained", "contained", "=", "(", "LocalContained", ")", "c", ".", "_lookup", "(", "base", ")", ";", "if", "(", "contained", "instanceof", "LocalContainer", ")", "next", "=", "(", "LocalContainer", ")", "contained", ";", "else", "if", "(", "contained", "!=", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "collisionWhileCreatingPackage", "(", ")", ";", "if", "(", "next", "==", "null", ")", "{", "String", "id", "=", "\"IDL:\"", "+", "previous", "+", "\":1.0\"", ";", "// Create module", "ModuleDefImpl", "m", "=", "new", "ModuleDefImpl", "(", "id", ",", "base", ",", "\"1.0\"", ",", "c", ",", "impl", ")", ";", "c", ".", "add", "(", "base", ",", "m", ")", ";", "if", "(", "idx", "==", "-", "1", ")", "return", "m", ";", "// done", "next", "=", "(", "LocalContainer", ")", "c", ".", "_lookup", "(", "base", ")", ";", "// Better be there now...", "}", "else", "// Check that next _is_ a module", "if", "(", "next", ".", "def_kind", "(", ")", "!=", "DefinitionKind", ".", "dk_Module", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "collisionWhileCreatingPackage", "(", ")", ";", "return", "ensurePackageExists", "(", "next", ",", "previous", ",", "remainder", ")", ";", "}"], "docstring": "Ensure that a package exists in the IR.\nThis will create modules in the IR as needed.\n\n@param c         The container that the remainder of modules should be defined in.\n@param previous  The IDL module name, from root to <code>c</code>.\n@param remainder The java package name, relative to <code>c</code>.\n@return A reference to the IR module that represents the package.", "docstring_tokens": ["Ensure", "that", "a", "package", "exists", "in", "the", "IR", ".", "This", "will", "create", "modules", "in", "the", "IR", "as", "needed", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java#L453-L503", "partition": "test", "index": 2848, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java", "func_name": "InterfaceRepository.addInterfaces", "original_string": "private String[] addInterfaces(ContainerAnalysis ca)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceAnalysis[] interfaces = ca.getInterfaces();\n        List base_interfaces = new ArrayList();\n        for (int i = 0; i < interfaces.length; ++i) {\n            InterfaceDefImpl idi = addInterface(interfaces[i]);\n            base_interfaces.add(idi.id());\n        }\n        String[] strArr = new String[base_interfaces.size()];\n        return (String[]) base_interfaces.toArray(strArr);\n    }", "language": "java", "code": "private String[] addInterfaces(ContainerAnalysis ca)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceAnalysis[] interfaces = ca.getInterfaces();\n        List base_interfaces = new ArrayList();\n        for (int i = 0; i < interfaces.length; ++i) {\n            InterfaceDefImpl idi = addInterface(interfaces[i]);\n            base_interfaces.add(idi.id());\n        }\n        String[] strArr = new String[base_interfaces.size()];\n        return (String[]) base_interfaces.toArray(strArr);\n    }", "code_tokens": ["private", "String", "[", "]", "addInterfaces", "(", "ContainerAnalysis", "ca", ")", "throws", "RMIIIOPViolationException", ",", "IRConstructionException", "{", "InterfaceAnalysis", "[", "]", "interfaces", "=", "ca", ".", "getInterfaces", "(", ")", ";", "List", "base_interfaces", "=", "new", "ArrayList", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "interfaces", ".", "length", ";", "++", "i", ")", "{", "InterfaceDefImpl", "idi", "=", "addInterface", "(", "interfaces", "[", "i", "]", ")", ";", "base_interfaces", ".", "add", "(", "idi", ".", "id", "(", ")", ")", ";", "}", "String", "[", "]", "strArr", "=", "new", "String", "[", "base_interfaces", ".", "size", "(", ")", "]", ";", "return", "(", "String", "[", "]", ")", "base_interfaces", ".", "toArray", "(", "strArr", ")", ";", "}"], "docstring": "Add a set of interfaces to the IR.\n\n@return An array of the IR IDs of the interfaces.", "docstring_tokens": ["Add", "a", "set", "of", "interfaces", "to", "the", "IR", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java#L591-L601", "partition": "test", "index": 2849, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/ValueDefImpl.java", "func_name": "ValueDefImpl.getValueMembers", "original_string": "private ValueMember[] getValueMembers() {\n        if (valueMembers != null)\n            return valueMembers;\n\n        LocalContained[] c = _contents(DefinitionKind.dk_ValueMember, false);\n        valueMembers = new ValueMember[c.length];\n        for (int i = 0; i < c.length; ++i) {\n            ValueMemberDefImpl vmdi = (ValueMemberDefImpl) c[i];\n\n            valueMembers[i] = new ValueMember(vmdi.name(), vmdi.id(),\n                    ((LocalContained) vmdi.defined_in).id(),\n                    vmdi.version(),\n                    vmdi.type(), vmdi.type_def(),\n                    vmdi.access());\n        }\n\n        return valueMembers;\n    }", "language": "java", "code": "private ValueMember[] getValueMembers() {\n        if (valueMembers != null)\n            return valueMembers;\n\n        LocalContained[] c = _contents(DefinitionKind.dk_ValueMember, false);\n        valueMembers = new ValueMember[c.length];\n        for (int i = 0; i < c.length; ++i) {\n            ValueMemberDefImpl vmdi = (ValueMemberDefImpl) c[i];\n\n            valueMembers[i] = new ValueMember(vmdi.name(), vmdi.id(),\n                    ((LocalContained) vmdi.defined_in).id(),\n                    vmdi.version(),\n                    vmdi.type(), vmdi.type_def(),\n                    vmdi.access());\n        }\n\n        return valueMembers;\n    }", "code_tokens": ["private", "ValueMember", "[", "]", "getValueMembers", "(", ")", "{", "if", "(", "valueMembers", "!=", "null", ")", "return", "valueMembers", ";", "LocalContained", "[", "]", "c", "=", "_contents", "(", "DefinitionKind", ".", "dk_ValueMember", ",", "false", ")", ";", "valueMembers", "=", "new", "ValueMember", "[", "c", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "c", ".", "length", ";", "++", "i", ")", "{", "ValueMemberDefImpl", "vmdi", "=", "(", "ValueMemberDefImpl", ")", "c", "[", "i", "]", ";", "valueMembers", "[", "i", "]", "=", "new", "ValueMember", "(", "vmdi", ".", "name", "(", ")", ",", "vmdi", ".", "id", "(", ")", ",", "(", "(", "LocalContained", ")", "vmdi", ".", "defined_in", ")", ".", "id", "(", ")", ",", "vmdi", ".", "version", "(", ")", ",", "vmdi", ".", "type", "(", ")", ",", "vmdi", ".", "type_def", "(", ")", ",", "vmdi", ".", "access", "(", ")", ")", ";", "}", "return", "valueMembers", ";", "}"], "docstring": "Create the valueMembers array, and return it.", "docstring_tokens": ["Create", "the", "valueMembers", "array", "and", "return", "it", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/ValueDefImpl.java#L504-L521", "partition": "test", "index": 2826, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java", "func_name": "InterfaceRepository.addAbstractBaseValuetypes", "original_string": "private String[] addAbstractBaseValuetypes(ContainerAnalysis ca)\n            throws RMIIIOPViolationException, IRConstructionException {\n        ValueAnalysis[] abstractValuetypes = ca.getAbstractBaseValuetypes();\n        List abstract_base_valuetypes = new ArrayList();\n        for (int i = 0; i < abstractValuetypes.length; ++i) {\n            ValueDefImpl vdi = addValue(abstractValuetypes[i]);\n            abstract_base_valuetypes.add(vdi.id());\n        }\n        String[] strArr = new String[abstract_base_valuetypes.size()];\n        return (String[]) abstract_base_valuetypes.toArray(strArr);\n    }", "language": "java", "code": "private String[] addAbstractBaseValuetypes(ContainerAnalysis ca)\n            throws RMIIIOPViolationException, IRConstructionException {\n        ValueAnalysis[] abstractValuetypes = ca.getAbstractBaseValuetypes();\n        List abstract_base_valuetypes = new ArrayList();\n        for (int i = 0; i < abstractValuetypes.length; ++i) {\n            ValueDefImpl vdi = addValue(abstractValuetypes[i]);\n            abstract_base_valuetypes.add(vdi.id());\n        }\n        String[] strArr = new String[abstract_base_valuetypes.size()];\n        return (String[]) abstract_base_valuetypes.toArray(strArr);\n    }", "code_tokens": ["private", "String", "[", "]", "addAbstractBaseValuetypes", "(", "ContainerAnalysis", "ca", ")", "throws", "RMIIIOPViolationException", ",", "IRConstructionException", "{", "ValueAnalysis", "[", "]", "abstractValuetypes", "=", "ca", ".", "getAbstractBaseValuetypes", "(", ")", ";", "List", "abstract_base_valuetypes", "=", "new", "ArrayList", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "abstractValuetypes", ".", "length", ";", "++", "i", ")", "{", "ValueDefImpl", "vdi", "=", "addValue", "(", "abstractValuetypes", "[", "i", "]", ")", ";", "abstract_base_valuetypes", ".", "add", "(", "vdi", ".", "id", "(", ")", ")", ";", "}", "String", "[", "]", "strArr", "=", "new", "String", "[", "abstract_base_valuetypes", ".", "size", "(", ")", "]", ";", "return", "(", "String", "[", "]", ")", "abstract_base_valuetypes", ".", "toArray", "(", "strArr", ")", ";", "}"], "docstring": "Add a set of abstract valuetypes to the IR.\n\n@return An array of the IR IDs of the abstract valuetypes.", "docstring_tokens": ["Add", "a", "set", "of", "abstract", "valuetypes", "to", "the", "IR", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java#L608-L618", "partition": "test", "index": 2850, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/PrimitiveAnalysis.java", "func_name": "PrimitiveAnalysis.getPrimitiveAnalysis", "original_string": "public static PrimitiveAnalysis getPrimitiveAnalysis(final Class cls) {\n        if (cls == null)\n            throw IIOPLogger.ROOT_LOGGER.cannotAnalyzeNullClass();\n\n        if (cls == Void.TYPE)\n            return voidAnalysis;\n        if (cls == Boolean.TYPE)\n            return booleanAnalysis;\n        if (cls == Character.TYPE)\n            return charAnalysis;\n        if (cls == Byte.TYPE)\n            return byteAnalysis;\n        if (cls == Short.TYPE)\n            return shortAnalysis;\n        if (cls == Integer.TYPE)\n            return intAnalysis;\n        if (cls == Long.TYPE)\n            return longAnalysis;\n        if (cls == Float.TYPE)\n            return floatAnalysis;\n        if (cls == Double.TYPE)\n            return doubleAnalysis;\n\n        throw IIOPLogger.ROOT_LOGGER.notAPrimitive(cls.getName());\n    }", "language": "java", "code": "public static PrimitiveAnalysis getPrimitiveAnalysis(final Class cls) {\n        if (cls == null)\n            throw IIOPLogger.ROOT_LOGGER.cannotAnalyzeNullClass();\n\n        if (cls == Void.TYPE)\n            return voidAnalysis;\n        if (cls == Boolean.TYPE)\n            return booleanAnalysis;\n        if (cls == Character.TYPE)\n            return charAnalysis;\n        if (cls == Byte.TYPE)\n            return byteAnalysis;\n        if (cls == Short.TYPE)\n            return shortAnalysis;\n        if (cls == Integer.TYPE)\n            return intAnalysis;\n        if (cls == Long.TYPE)\n            return longAnalysis;\n        if (cls == Float.TYPE)\n            return floatAnalysis;\n        if (cls == Double.TYPE)\n            return doubleAnalysis;\n\n        throw IIOPLogger.ROOT_LOGGER.notAPrimitive(cls.getName());\n    }", "code_tokens": ["public", "static", "PrimitiveAnalysis", "getPrimitiveAnalysis", "(", "final", "Class", "cls", ")", "{", "if", "(", "cls", "==", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "cannotAnalyzeNullClass", "(", ")", ";", "if", "(", "cls", "==", "Void", ".", "TYPE", ")", "return", "voidAnalysis", ";", "if", "(", "cls", "==", "Boolean", ".", "TYPE", ")", "return", "booleanAnalysis", ";", "if", "(", "cls", "==", "Character", ".", "TYPE", ")", "return", "charAnalysis", ";", "if", "(", "cls", "==", "Byte", ".", "TYPE", ")", "return", "byteAnalysis", ";", "if", "(", "cls", "==", "Short", ".", "TYPE", ")", "return", "shortAnalysis", ";", "if", "(", "cls", "==", "Integer", ".", "TYPE", ")", "return", "intAnalysis", ";", "if", "(", "cls", "==", "Long", ".", "TYPE", ")", "return", "longAnalysis", ";", "if", "(", "cls", "==", "Float", ".", "TYPE", ")", "return", "floatAnalysis", ";", "if", "(", "cls", "==", "Double", ".", "TYPE", ")", "return", "doubleAnalysis", ";", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notAPrimitive", "(", "cls", ".", "getName", "(", ")", ")", ";", "}"], "docstring": "Get a singleton instance representing one of the primitive types.", "docstring_tokens": ["Get", "a", "singleton", "instance", "representing", "one", "of", "the", "primitive", "types", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/PrimitiveAnalysis.java#L55-L79", "partition": "test", "index": 2555, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/AttributeAnalysis.java", "func_name": "AttributeAnalysis.setIDLName", "original_string": "void setIDLName(String idlName) {\n        super.setIDLName(idlName);\n\n        // If the first char is an uppercase letter and the second char is not\n        // an uppercase letter, then convert the first char to lowercase.\n        if (idlName.charAt(0) >= 0x41 && idlName.charAt(0) <= 0x5a\n                && (idlName.length() <= 1\n                || idlName.charAt(1) < 0x41 || idlName.charAt(1) > 0x5a)) {\n            idlName =\n                    idlName.substring(0, 1).toLowerCase(Locale.ENGLISH) + idlName.substring(1);\n        }\n\n        if (accessorAnalysis != null)\n            accessorAnalysis.setIDLName(\"_get_\" + idlName);\n        if (mutatorAnalysis != null)\n            mutatorAnalysis.setIDLName(\"_set_\" + idlName);\n    }", "language": "java", "code": "void setIDLName(String idlName) {\n        super.setIDLName(idlName);\n\n        // If the first char is an uppercase letter and the second char is not\n        // an uppercase letter, then convert the first char to lowercase.\n        if (idlName.charAt(0) >= 0x41 && idlName.charAt(0) <= 0x5a\n                && (idlName.length() <= 1\n                || idlName.charAt(1) < 0x41 || idlName.charAt(1) > 0x5a)) {\n            idlName =\n                    idlName.substring(0, 1).toLowerCase(Locale.ENGLISH) + idlName.substring(1);\n        }\n\n        if (accessorAnalysis != null)\n            accessorAnalysis.setIDLName(\"_get_\" + idlName);\n        if (mutatorAnalysis != null)\n            mutatorAnalysis.setIDLName(\"_set_\" + idlName);\n    }", "code_tokens": ["void", "setIDLName", "(", "String", "idlName", ")", "{", "super", ".", "setIDLName", "(", "idlName", ")", ";", "// If the first char is an uppercase letter and the second char is not", "// an uppercase letter, then convert the first char to lowercase.", "if", "(", "idlName", ".", "charAt", "(", "0", ")", ">=", "0x41", "&&", "idlName", ".", "charAt", "(", "0", ")", "<=", "0x5a", "&&", "(", "idlName", ".", "length", "(", ")", "<=", "1", "||", "idlName", ".", "charAt", "(", "1", ")", "<", "0x41", "||", "idlName", ".", "charAt", "(", "1", ")", ">", "0x5a", ")", ")", "{", "idlName", "=", "idlName", ".", "substring", "(", "0", ",", "1", ")", ".", "toLowerCase", "(", "Locale", ".", "ENGLISH", ")", "+", "idlName", ".", "substring", "(", "1", ")", ";", "}", "if", "(", "accessorAnalysis", "!=", "null", ")", "accessorAnalysis", ".", "setIDLName", "(", "\"_get_\"", "+", "idlName", ")", ";", "if", "(", "mutatorAnalysis", "!=", "null", ")", "mutatorAnalysis", ".", "setIDLName", "(", "\"_set_\"", "+", "idlName", ")", ";", "}"], "docstring": "Set my unqualified IDL name.\nThis also sets the names of the associated operations.", "docstring_tokens": ["Set", "my", "unqualified", "IDL", "name", ".", "This", "also", "sets", "the", "names", "of", "the", "associated", "operations", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/AttributeAnalysis.java#L159-L175", "partition": "test", "index": 2533, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/ValueDefImpl.java", "func_name": "ValueDefImpl.getValueMembersForTypeCode", "original_string": "private ValueMember[] getValueMembersForTypeCode() {\n        LocalContained[] c = _contents(DefinitionKind.dk_ValueMember, false);\n        ValueMember[] vms = new ValueMember[c.length];\n        for (int i = 0; i < c.length; ++i) {\n            ValueMemberDefImpl vmdi = (ValueMemberDefImpl) c[i];\n\n            vms[i] = new ValueMember(vmdi.name(),\n                    null, // ignore id\n                    null, // ignore defined_in\n                    null, // ignore version\n                    vmdi.type(),\n                    null, // ignore type_def\n                    vmdi.access());\n        }\n\n        return vms;\n    }", "language": "java", "code": "private ValueMember[] getValueMembersForTypeCode() {\n        LocalContained[] c = _contents(DefinitionKind.dk_ValueMember, false);\n        ValueMember[] vms = new ValueMember[c.length];\n        for (int i = 0; i < c.length; ++i) {\n            ValueMemberDefImpl vmdi = (ValueMemberDefImpl) c[i];\n\n            vms[i] = new ValueMember(vmdi.name(),\n                    null, // ignore id\n                    null, // ignore defined_in\n                    null, // ignore version\n                    vmdi.type(),\n                    null, // ignore type_def\n                    vmdi.access());\n        }\n\n        return vms;\n    }", "code_tokens": ["private", "ValueMember", "[", "]", "getValueMembersForTypeCode", "(", ")", "{", "LocalContained", "[", "]", "c", "=", "_contents", "(", "DefinitionKind", ".", "dk_ValueMember", ",", "false", ")", ";", "ValueMember", "[", "]", "vms", "=", "new", "ValueMember", "[", "c", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "c", ".", "length", ";", "++", "i", ")", "{", "ValueMemberDefImpl", "vmdi", "=", "(", "ValueMemberDefImpl", ")", "c", "[", "i", "]", ";", "vms", "[", "i", "]", "=", "new", "ValueMember", "(", "vmdi", ".", "name", "(", ")", ",", "null", ",", "// ignore id", "null", ",", "// ignore defined_in", "null", ",", "// ignore version", "vmdi", ".", "type", "(", ")", ",", "null", ",", "// ignore type_def", "vmdi", ".", "access", "(", ")", ")", ";", "}", "return", "vms", ";", "}"], "docstring": "Create a valueMembers array for TypeCode creation only, and return it.", "docstring_tokens": ["Create", "a", "valueMembers", "array", "for", "TypeCode", "creation", "only", "and", "return", "it", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/ValueDefImpl.java#L526-L542", "partition": "test", "index": 2827, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.callBindNewContext", "original_string": "private javax.naming.Context callBindNewContext(NameComponent[] path)\n            throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(path.toString());\n        try {\n            NamingContext nctx = _nc.bind_new_context(path);\n            return new CNCtx(_orb, nctx, _env, makeFullName(path));\n        } catch (Exception e) {\n            throw org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper.mapException(e, this, path);\n        }\n    }", "language": "java", "code": "private javax.naming.Context callBindNewContext(NameComponent[] path)\n            throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(path.toString());\n        try {\n            NamingContext nctx = _nc.bind_new_context(path);\n            return new CNCtx(_orb, nctx, _env, makeFullName(path));\n        } catch (Exception e) {\n            throw org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper.mapException(e, this, path);\n        }\n    }", "code_tokens": ["private", "javax", ".", "naming", ".", "Context", "callBindNewContext", "(", "NameComponent", "[", "]", "path", ")", "throws", "NamingException", "{", "if", "(", "_nc", "==", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notANamingContext", "(", "path", ".", "toString", "(", ")", ")", ";", "try", "{", "NamingContext", "nctx", "=", "_nc", ".", "bind_new_context", "(", "path", ")", ";", "return", "new", "CNCtx", "(", "_orb", ",", "nctx", ",", "_env", ",", "makeFullName", "(", "path", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "org", ".", "wildfly", ".", "iiop", ".", "openjdk", ".", "naming", ".", "jndi", ".", "ExceptionMapper", ".", "mapException", "(", "e", ",", "this", ",", "path", ")", ";", "}", "}"], "docstring": "Calls the bind_new_context COS naming api to create a new subcontext.\n\n@param path NameComponent[] object\n@return the new context object.\n@throws NotFound      No objects under the name.\n@throws org.omg.CosNaming.NamingContextPackage.CannotProceed Unable to obtain a continuation context\n@throws org.omg.CosNaming.NamingContextPackage.InvalidName   Name not understood.\n@throws org.omg.CosNaming.NamingContextPackage.AlreadyBound  An object is already bound to this name.", "docstring_tokens": ["Calls", "the", "bind_new_context", "COS", "naming", "api", "to", "create", "a", "new", "subcontext", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L932-L942", "partition": "test", "index": 2777, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java", "func_name": "InterfaceRepository.addInterface", "original_string": "private InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }", "language": "java", "code": "private InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }", "code_tokens": ["private", "InterfaceDefImpl", "addInterface", "(", "InterfaceAnalysis", "ia", ")", "throws", "RMIIIOPViolationException", ",", "IRConstructionException", "{", "InterfaceDefImpl", "iDef", ";", "Class", "cls", "=", "ia", ".", "getCls", "(", ")", ";", "// Lookup: Has it already been added?", "iDef", "=", "(", "InterfaceDefImpl", ")", "interfaceMap", ".", "get", "(", "cls", ")", ";", "if", "(", "iDef", "!=", "null", ")", "return", "iDef", ";", "// Yes, just return it.", "// Get module to add interface to.", "ModuleDefImpl", "m", "=", "ensurePackageExists", "(", "cls", ".", "getPackage", "(", ")", ".", "getName", "(", ")", ")", ";", "// Add superinterfaces", "String", "[", "]", "base_interfaces", "=", "addInterfaces", "(", "ia", ")", ";", "// Create the interface", "String", "base", "=", "cls", ".", "getName", "(", ")", ";", "base", "=", "base", ".", "substring", "(", "base", ".", "lastIndexOf", "(", "'", "'", ")", "+", "1", ")", ";", "base", "=", "Util", ".", "javaToIDLName", "(", "base", ")", ";", "iDef", "=", "new", "InterfaceDefImpl", "(", "ia", ".", "getRepositoryId", "(", ")", ",", "base", ",", "\"1.0\"", ",", "m", ",", "base_interfaces", ",", "impl", ")", ";", "addTypeCode", "(", "cls", ",", "iDef", ".", "type", "(", ")", ")", ";", "m", ".", "add", "(", "base", ",", "iDef", ")", ";", "interfaceMap", ".", "put", "(", "cls", ",", "iDef", ")", ";", "// Remember we mapped this.", "// Fill in constants", "addConstants", "(", "iDef", ",", "ia", ")", ";", "// Add attributes", "addAttributes", "(", "iDef", ",", "ia", ")", ";", "// Fill in operations", "addOperations", "(", "iDef", ",", "ia", ")", ";", "return", "iDef", ";", "}"], "docstring": "Add an interface.", "docstring_tokens": ["Add", "an", "interface", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java#L785-L823", "partition": "test", "index": 2852, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java", "func_name": "Util.getSignature", "original_string": "private static String getSignature(Method method) {\n        StringBuffer b = new StringBuffer(\"(\");\n        Class[] parameterTypes = method.getParameterTypes();\n\n        for (int i = 0; i < parameterTypes.length; ++i)\n            b.append(getSignature(parameterTypes[i]));\n\n        b.append(')').append(getSignature(method.getReturnType()));\n\n        return b.toString();\n    }", "language": "java", "code": "private static String getSignature(Method method) {\n        StringBuffer b = new StringBuffer(\"(\");\n        Class[] parameterTypes = method.getParameterTypes();\n\n        for (int i = 0; i < parameterTypes.length; ++i)\n            b.append(getSignature(parameterTypes[i]));\n\n        b.append(')').append(getSignature(method.getReturnType()));\n\n        return b.toString();\n    }", "code_tokens": ["private", "static", "String", "getSignature", "(", "Method", "method", ")", "{", "StringBuffer", "b", "=", "new", "StringBuffer", "(", "\"(\"", ")", ";", "Class", "[", "]", "parameterTypes", "=", "method", ".", "getParameterTypes", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "parameterTypes", ".", "length", ";", "++", "i", ")", "b", ".", "append", "(", "getSignature", "(", "parameterTypes", "[", "i", "]", ")", ")", ";", "b", ".", "append", "(", "'", "'", ")", ".", "append", "(", "getSignature", "(", "method", ".", "getReturnType", "(", ")", ")", ")", ";", "return", "b", ".", "toString", "(", ")", ";", "}"], "docstring": "Calculate the signature of a method, according to the Java VM\nspecification, section 4.3.3.", "docstring_tokens": ["Calculate", "the", "signature", "of", "a", "method", "according", "to", "the", "Java", "VM", "specification", "section", "4", ".", "3", ".", "3", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java#L567-L577", "partition": "test", "index": 2634, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.callDestroy", "original_string": "private void callDestroy(NamingContext nc)\n            throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(nc.toString());\n        try {\n            nc.destroy();\n        } catch (Exception e) {\n            throw org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper.mapException(e, this, null);\n        }\n    }", "language": "java", "code": "private void callDestroy(NamingContext nc)\n            throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(nc.toString());\n        try {\n            nc.destroy();\n        } catch (Exception e) {\n            throw org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper.mapException(e, this, null);\n        }\n    }", "code_tokens": ["private", "void", "callDestroy", "(", "NamingContext", "nc", ")", "throws", "NamingException", "{", "if", "(", "_nc", "==", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notANamingContext", "(", "nc", ".", "toString", "(", ")", ")", ";", "try", "{", "nc", ".", "destroy", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "org", ".", "wildfly", ".", "iiop", ".", "openjdk", ".", "naming", ".", "jndi", ".", "ExceptionMapper", ".", "mapException", "(", "e", ",", "this", ",", "null", ")", ";", "}", "}"], "docstring": "Calls the destroy on the COS Naming Server\n\n@param nc The NamingContext object to use.\n@throws org.omg.CosNaming.NamingContextPackage.NotEmpty when the context is not empty and cannot be destroyed.", "docstring_tokens": ["Calls", "the", "destroy", "on", "the", "COS", "Naming", "Server"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L854-L863", "partition": "test", "index": 2775, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy.java", "func_name": "StubStrategy.writeParams", "original_string": "public void writeParams(OutputStream out, Object[] params) {\n        int len = params.length;\n\n        if (len != paramWriters.length) {\n            throw IIOPLogger.ROOT_LOGGER.errorMashalingParams();\n        }\n        for (int i = 0; i < len; i++) {\n            Object param = params[i];\n            if (param instanceof PortableRemoteObject) {\n                try {\n                    param = PortableRemoteObject.toStub((Remote) param);\n                } catch (NoSuchObjectException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            paramWriters[i].write(out, RemoteObjectSubstitutionManager.writeReplaceRemote(param));\n        }\n    }", "language": "java", "code": "public void writeParams(OutputStream out, Object[] params) {\n        int len = params.length;\n\n        if (len != paramWriters.length) {\n            throw IIOPLogger.ROOT_LOGGER.errorMashalingParams();\n        }\n        for (int i = 0; i < len; i++) {\n            Object param = params[i];\n            if (param instanceof PortableRemoteObject) {\n                try {\n                    param = PortableRemoteObject.toStub((Remote) param);\n                } catch (NoSuchObjectException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            paramWriters[i].write(out, RemoteObjectSubstitutionManager.writeReplaceRemote(param));\n        }\n    }", "code_tokens": ["public", "void", "writeParams", "(", "OutputStream", "out", ",", "Object", "[", "]", "params", ")", "{", "int", "len", "=", "params", ".", "length", ";", "if", "(", "len", "!=", "paramWriters", ".", "length", ")", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "errorMashalingParams", "(", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "len", ";", "i", "++", ")", "{", "Object", "param", "=", "params", "[", "i", "]", ";", "if", "(", "param", "instanceof", "PortableRemoteObject", ")", "{", "try", "{", "param", "=", "PortableRemoteObject", ".", "toStub", "(", "(", "Remote", ")", "param", ")", ";", "}", "catch", "(", "NoSuchObjectException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}", "paramWriters", "[", "i", "]", ".", "write", "(", "out", ",", "RemoteObjectSubstitutionManager", ".", "writeReplaceRemote", "(", "param", ")", ")", ";", "}", "}"], "docstring": "Marshals the sequence of method parameters into an output stream.\n\n@param out    a CDR output stream\n@param params an object array with the parameters.", "docstring_tokens": ["Marshals", "the", "sequence", "of", "method", "parameters", "into", "an", "output", "stream", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy.java#L189-L206", "partition": "test", "index": 2519, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy.java", "func_name": "StubStrategy.readException", "original_string": "public Exception readException(String id, InputStream in) {\n        ExceptionReader exceptionReader = (ExceptionReader) exceptionMap.get(id);\n        if (exceptionReader == null) {\n            return new UnexpectedException(id);\n        } else {\n            return exceptionReader.read(in);\n        }\n    }", "language": "java", "code": "public Exception readException(String id, InputStream in) {\n        ExceptionReader exceptionReader = (ExceptionReader) exceptionMap.get(id);\n        if (exceptionReader == null) {\n            return new UnexpectedException(id);\n        } else {\n            return exceptionReader.read(in);\n        }\n    }", "code_tokens": ["public", "Exception", "readException", "(", "String", "id", ",", "InputStream", "in", ")", "{", "ExceptionReader", "exceptionReader", "=", "(", "ExceptionReader", ")", "exceptionMap", ".", "get", "(", "id", ")", ";", "if", "(", "exceptionReader", "==", "null", ")", "{", "return", "new", "UnexpectedException", "(", "id", ")", ";", "}", "else", "{", "return", "exceptionReader", ".", "read", "(", "in", ")", ";", "}", "}"], "docstring": "Unmarshals from an input stream an exception thrown by the method.\n\n@param id the repository id of the exception to unmarshal\n@param in a CDR input stream\n@return an exception unmarshaled from the stream.", "docstring_tokens": ["Unmarshals", "from", "an", "input", "stream", "an", "exception", "thrown", "by", "the", "method", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy.java#L232-L239", "partition": "test", "index": 2520, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/IDLTypeImpl.java", "func_name": "IDLTypeImpl.getIDLType", "original_string": "static LocalIDLType getIDLType(TypeCode typeCode, RepositoryImpl repository) {\n        TCKind tcKind = typeCode.kind();\n\n        if (PrimitiveDefImpl.isPrimitiveTCKind(tcKind))\n            return new PrimitiveDefImpl(typeCode, repository);\n\n        if (tcKind == TCKind.tk_sequence)\n            return repository.getSequenceImpl(typeCode);\n\n        if (tcKind == TCKind.tk_value || tcKind == TCKind.tk_value_box ||\n                tcKind == TCKind.tk_alias || tcKind == TCKind.tk_struct ||\n                tcKind == TCKind.tk_union || tcKind == TCKind.tk_enum ||\n                tcKind == TCKind.tk_objref) {\n            try {\n                return (LocalIDLType) repository._lookup_id(typeCode.id());\n            } catch (BadKind ex) {\n                throw IIOPLogger.ROOT_LOGGER.badKindForTypeCode(tcKind.value());\n            }\n        }\n\n        throw IIOPLogger.ROOT_LOGGER.badKindForTypeCode(tcKind.value());\n    }", "language": "java", "code": "static LocalIDLType getIDLType(TypeCode typeCode, RepositoryImpl repository) {\n        TCKind tcKind = typeCode.kind();\n\n        if (PrimitiveDefImpl.isPrimitiveTCKind(tcKind))\n            return new PrimitiveDefImpl(typeCode, repository);\n\n        if (tcKind == TCKind.tk_sequence)\n            return repository.getSequenceImpl(typeCode);\n\n        if (tcKind == TCKind.tk_value || tcKind == TCKind.tk_value_box ||\n                tcKind == TCKind.tk_alias || tcKind == TCKind.tk_struct ||\n                tcKind == TCKind.tk_union || tcKind == TCKind.tk_enum ||\n                tcKind == TCKind.tk_objref) {\n            try {\n                return (LocalIDLType) repository._lookup_id(typeCode.id());\n            } catch (BadKind ex) {\n                throw IIOPLogger.ROOT_LOGGER.badKindForTypeCode(tcKind.value());\n            }\n        }\n\n        throw IIOPLogger.ROOT_LOGGER.badKindForTypeCode(tcKind.value());\n    }", "code_tokens": ["static", "LocalIDLType", "getIDLType", "(", "TypeCode", "typeCode", ",", "RepositoryImpl", "repository", ")", "{", "TCKind", "tcKind", "=", "typeCode", ".", "kind", "(", ")", ";", "if", "(", "PrimitiveDefImpl", ".", "isPrimitiveTCKind", "(", "tcKind", ")", ")", "return", "new", "PrimitiveDefImpl", "(", "typeCode", ",", "repository", ")", ";", "if", "(", "tcKind", "==", "TCKind", ".", "tk_sequence", ")", "return", "repository", ".", "getSequenceImpl", "(", "typeCode", ")", ";", "if", "(", "tcKind", "==", "TCKind", ".", "tk_value", "||", "tcKind", "==", "TCKind", ".", "tk_value_box", "||", "tcKind", "==", "TCKind", ".", "tk_alias", "||", "tcKind", "==", "TCKind", ".", "tk_struct", "||", "tcKind", "==", "TCKind", ".", "tk_union", "||", "tcKind", "==", "TCKind", ".", "tk_enum", "||", "tcKind", "==", "TCKind", ".", "tk_objref", ")", "{", "try", "{", "return", "(", "LocalIDLType", ")", "repository", ".", "_lookup_id", "(", "typeCode", ".", "id", "(", ")", ")", ";", "}", "catch", "(", "BadKind", "ex", ")", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "badKindForTypeCode", "(", "tcKind", ".", "value", "(", ")", ")", ";", "}", "}", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "badKindForTypeCode", "(", "tcKind", ".", "value", "(", ")", ")", ";", "}"], "docstring": "Return the LocalIDLType for the given TypeCode.", "docstring_tokens": ["Return", "the", "LocalIDLType", "for", "the", "given", "TypeCode", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/IDLTypeImpl.java#L67-L88", "partition": "test", "index": 2789, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.listBindings", "original_string": "public NamingEnumeration listBindings(Name name)\n            throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(name.toString());\n        if (name.size() > 0) {\n            try {\n                java.lang.Object obj = lookup(name);\n                if (obj instanceof CNCtx) {\n                    return new org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration(\n                            (CNCtx) obj, true, _env);\n                } else {\n                    throw new NotContextException(name.toString());\n                }\n            } catch (NamingException ne) {\n                throw ne;\n            } catch (BAD_PARAM e) {\n                NamingException ne =\n                        new NotContextException(name.toString());\n                ne.setRootCause(e);\n                throw ne;\n            }\n        }\n        return new org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration(this, false, _env);\n    }", "language": "java", "code": "public NamingEnumeration listBindings(Name name)\n            throws NamingException {\n        if (_nc == null)\n            throw IIOPLogger.ROOT_LOGGER.notANamingContext(name.toString());\n        if (name.size() > 0) {\n            try {\n                java.lang.Object obj = lookup(name);\n                if (obj instanceof CNCtx) {\n                    return new org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration(\n                            (CNCtx) obj, true, _env);\n                } else {\n                    throw new NotContextException(name.toString());\n                }\n            } catch (NamingException ne) {\n                throw ne;\n            } catch (BAD_PARAM e) {\n                NamingException ne =\n                        new NotContextException(name.toString());\n                ne.setRootCause(e);\n                throw ne;\n            }\n        }\n        return new org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration(this, false, _env);\n    }", "code_tokens": ["public", "NamingEnumeration", "listBindings", "(", "Name", "name", ")", "throws", "NamingException", "{", "if", "(", "_nc", "==", "null", ")", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notANamingContext", "(", "name", ".", "toString", "(", ")", ")", ";", "if", "(", "name", ".", "size", "(", ")", ">", "0", ")", "{", "try", "{", "java", ".", "lang", ".", "Object", "obj", "=", "lookup", "(", "name", ")", ";", "if", "(", "obj", "instanceof", "CNCtx", ")", "{", "return", "new", "org", ".", "wildfly", ".", "iiop", ".", "openjdk", ".", "naming", ".", "jndi", ".", "CNBindingEnumeration", "(", "(", "CNCtx", ")", "obj", ",", "true", ",", "_env", ")", ";", "}", "else", "{", "throw", "new", "NotContextException", "(", "name", ".", "toString", "(", ")", ")", ";", "}", "}", "catch", "(", "NamingException", "ne", ")", "{", "throw", "ne", ";", "}", "catch", "(", "BAD_PARAM", "e", ")", "{", "NamingException", "ne", "=", "new", "NotContextException", "(", "name", ".", "toString", "(", ")", ")", ";", "ne", ".", "setRootCause", "(", "e", ")", ";", "throw", "ne", ";", "}", "}", "return", "new", "org", ".", "wildfly", ".", "iiop", ".", "openjdk", ".", "naming", ".", "jndi", ".", "CNBindingEnumeration", "(", "this", ",", "false", ",", "_env", ")", ";", "}"], "docstring": "Returns a BindingEnumeration object which has a list of name\nclass pairs. Lists the current context if the name is empty.\n\n@param name JNDI Name\n@return a list of bindings as a BindingEnumeration.\n@throws NamingException all exceptions returned by lookup.", "docstring_tokens": ["Returns", "a", "BindingEnumeration", "object", "which", "has", "a", "list", "of", "name", "class", "pairs", ".", "Lists", "the", "current", "context", "if", "the", "name", "is", "empty", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L823-L846", "partition": "test", "index": 2774, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java", "func_name": "Util.insertAnyPrimitive", "original_string": "public static void insertAnyPrimitive(Any any, Object primitive) {\n        Class type = primitive.getClass();\n\n        if (type == Boolean.class)\n            any.insert_boolean(((Boolean) primitive).booleanValue());\n        else if (type == Character.class)\n            any.insert_wchar(((Character) primitive).charValue());\n        else if (type == Byte.class)\n            any.insert_octet(((Byte) primitive).byteValue());\n        else if (type == Short.class)\n            any.insert_short(((Short) primitive).shortValue());\n        else if (type == Integer.class)\n            any.insert_long(((Integer) primitive).intValue());\n        else if (type == Long.class)\n            any.insert_longlong(((Long) primitive).longValue());\n        else if (type == Float.class)\n            any.insert_float(((Float) primitive).floatValue());\n        else if (type == Double.class)\n            any.insert_double(((Double) primitive).doubleValue());\n        else\n            throw IIOPLogger.ROOT_LOGGER.notAPrimitive(type.getName());\n    }", "language": "java", "code": "public static void insertAnyPrimitive(Any any, Object primitive) {\n        Class type = primitive.getClass();\n\n        if (type == Boolean.class)\n            any.insert_boolean(((Boolean) primitive).booleanValue());\n        else if (type == Character.class)\n            any.insert_wchar(((Character) primitive).charValue());\n        else if (type == Byte.class)\n            any.insert_octet(((Byte) primitive).byteValue());\n        else if (type == Short.class)\n            any.insert_short(((Short) primitive).shortValue());\n        else if (type == Integer.class)\n            any.insert_long(((Integer) primitive).intValue());\n        else if (type == Long.class)\n            any.insert_longlong(((Long) primitive).longValue());\n        else if (type == Float.class)\n            any.insert_float(((Float) primitive).floatValue());\n        else if (type == Double.class)\n            any.insert_double(((Double) primitive).doubleValue());\n        else\n            throw IIOPLogger.ROOT_LOGGER.notAPrimitive(type.getName());\n    }", "code_tokens": ["public", "static", "void", "insertAnyPrimitive", "(", "Any", "any", ",", "Object", "primitive", ")", "{", "Class", "type", "=", "primitive", ".", "getClass", "(", ")", ";", "if", "(", "type", "==", "Boolean", ".", "class", ")", "any", ".", "insert_boolean", "(", "(", "(", "Boolean", ")", "primitive", ")", ".", "booleanValue", "(", ")", ")", ";", "else", "if", "(", "type", "==", "Character", ".", "class", ")", "any", ".", "insert_wchar", "(", "(", "(", "Character", ")", "primitive", ")", ".", "charValue", "(", ")", ")", ";", "else", "if", "(", "type", "==", "Byte", ".", "class", ")", "any", ".", "insert_octet", "(", "(", "(", "Byte", ")", "primitive", ")", ".", "byteValue", "(", ")", ")", ";", "else", "if", "(", "type", "==", "Short", ".", "class", ")", "any", ".", "insert_short", "(", "(", "(", "Short", ")", "primitive", ")", ".", "shortValue", "(", ")", ")", ";", "else", "if", "(", "type", "==", "Integer", ".", "class", ")", "any", ".", "insert_long", "(", "(", "(", "Integer", ")", "primitive", ")", ".", "intValue", "(", ")", ")", ";", "else", "if", "(", "type", "==", "Long", ".", "class", ")", "any", ".", "insert_longlong", "(", "(", "(", "Long", ")", "primitive", ")", ".", "longValue", "(", ")", ")", ";", "else", "if", "(", "type", "==", "Float", ".", "class", ")", "any", ".", "insert_float", "(", "(", "(", "Float", ")", "primitive", ")", ".", "floatValue", "(", ")", ")", ";", "else", "if", "(", "type", "==", "Double", ".", "class", ")", "any", ".", "insert_double", "(", "(", "(", "Double", ")", "primitive", ")", ".", "doubleValue", "(", ")", ")", ";", "else", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notAPrimitive", "(", "type", ".", "getName", "(", ")", ")", ";", "}"], "docstring": "Insert a java primitive into an Any.\nThe primitive is assumed to be wrapped in one of the primitive\nwrapper classes.", "docstring_tokens": ["Insert", "a", "java", "primitive", "into", "an", "Any", ".", "The", "primitive", "is", "assumed", "to", "be", "wrapped", "in", "one", "of", "the", "primitive", "wrapper", "classes", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java#L179-L200", "partition": "test", "index": 2630, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.createUsingURL", "original_string": "public static ResolveResult createUsingURL(String url, Hashtable env)\n            throws NamingException {\n        CNCtx ctx = new CNCtx();\n        if (env != null) {\n            env = (Hashtable) env.clone();\n        }\n        ctx._env = env;\n        String rest = ctx.initUsingUrl(env != null ? (org.omg.CORBA.ORB) env.get(\"java.naming.corba.orb\") : null,\n                url, env);\n\n        // rest is the INS name\n        // Return the parsed form to prevent subsequent lookup\n        // from parsing the string as a composite name\n        // The caller should be aware that a toString() of the name\n        // will yield its INS syntax, rather than a composite syntax\n        return new ResolveResult(ctx, parser.parse(rest));\n    }", "language": "java", "code": "public static ResolveResult createUsingURL(String url, Hashtable env)\n            throws NamingException {\n        CNCtx ctx = new CNCtx();\n        if (env != null) {\n            env = (Hashtable) env.clone();\n        }\n        ctx._env = env;\n        String rest = ctx.initUsingUrl(env != null ? (org.omg.CORBA.ORB) env.get(\"java.naming.corba.orb\") : null,\n                url, env);\n\n        // rest is the INS name\n        // Return the parsed form to prevent subsequent lookup\n        // from parsing the string as a composite name\n        // The caller should be aware that a toString() of the name\n        // will yield its INS syntax, rather than a composite syntax\n        return new ResolveResult(ctx, parser.parse(rest));\n    }", "code_tokens": ["public", "static", "ResolveResult", "createUsingURL", "(", "String", "url", ",", "Hashtable", "env", ")", "throws", "NamingException", "{", "CNCtx", "ctx", "=", "new", "CNCtx", "(", ")", ";", "if", "(", "env", "!=", "null", ")", "{", "env", "=", "(", "Hashtable", ")", "env", ".", "clone", "(", ")", ";", "}", "ctx", ".", "_env", "=", "env", ";", "String", "rest", "=", "ctx", ".", "initUsingUrl", "(", "env", "!=", "null", "?", "(", "org", ".", "omg", ".", "CORBA", ".", "ORB", ")", "env", ".", "get", "(", "\"java.naming.corba.orb\"", ")", ":", "null", ",", "url", ",", "env", ")", ";", "// rest is the INS name", "// Return the parsed form to prevent subsequent lookup", "// from parsing the string as a composite name", "// The caller should be aware that a toString() of the name", "// will yield its INS syntax, rather than a composite syntax", "return", "new", "ResolveResult", "(", "ctx", ",", "parser", ".", "parse", "(", "rest", ")", ")", ";", "}"], "docstring": "This method is used by the iiop and iiopname URL Context factories.", "docstring_tokens": ["This", "method", "is", "used", "by", "the", "iiop", "and", "iiopname", "URL", "Context", "factories", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L108-L124", "partition": "test", "index": 2770, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java", "func_name": "InterfaceRepository.addValue", "original_string": "private ValueDefImpl addValue(ValueAnalysis va)\n            throws RMIIIOPViolationException, IRConstructionException {\n        ValueDefImpl vDef;\n        Class cls = va.getCls();\n\n        // Lookup: Has it already been added?\n        vDef = (ValueDefImpl) valueMap.get(cls);\n        if (vDef != null)\n            return vDef; // Yes, just return it.\n\n        // Get module to add value to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add implemented interfaces\n        String[] supported_interfaces = addInterfaces(va);\n\n        // Add abstract base valuetypes\n        String[] abstract_base_valuetypes = addAbstractBaseValuetypes(va);\n\n        // Add superclass\n        ValueDefImpl superValue = null;\n        ValueAnalysis superAnalysis = va.getSuperAnalysis();\n        if (superAnalysis != null)\n            superValue = addValue(superAnalysis);\n\n        // Create the value\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        TypeCode baseTypeCode;\n        if (superValue == null)\n            baseTypeCode = orb.get_primitive_tc(TCKind.tk_null);\n        else\n            baseTypeCode = superValue.type();\n\n        vDef = new ValueDefImpl(va.getRepositoryId(), base, \"1.0\",\n                m,\n                va.isAbstractValue(),\n                va.isCustom(),\n                supported_interfaces,\n                abstract_base_valuetypes,\n                baseTypeCode,\n                impl);\n        addTypeCode(cls, vDef.type());\n        m.add(base, vDef);\n        valueMap.put(cls, vDef); // Remember we mapped this.\n\n        // Fill in constants.\n        addConstants(vDef, va);\n\n        // Add value members\n        ValueMemberAnalysis[] vmas = va.getMembers();\n        for (int i = 0; i < vmas.length; ++i) {\n            ValueMemberDefImpl vmDef;\n            String vmid = va.getMemberRepositoryId(vmas[i].getJavaName());\n            String vmName = vmas[i].getIDLName();\n\n            Class vmCls = vmas[i].getCls();\n            TypeCode typeCode = getTypeCode(vmCls);\n\n            boolean vmPublic = vmas[i].isPublic();\n\n            vmDef = new ValueMemberDefImpl(vmid, vmName, \"1.0\",\n                    typeCode, vmPublic, vDef, impl);\n            vDef.add(vmName, vmDef);\n        }\n\n        // Add attributes\n        addAttributes(vDef, va);\n\n        // TODO: Fill in operations.\n\n        return vDef;\n    }", "language": "java", "code": "private ValueDefImpl addValue(ValueAnalysis va)\n            throws RMIIIOPViolationException, IRConstructionException {\n        ValueDefImpl vDef;\n        Class cls = va.getCls();\n\n        // Lookup: Has it already been added?\n        vDef = (ValueDefImpl) valueMap.get(cls);\n        if (vDef != null)\n            return vDef; // Yes, just return it.\n\n        // Get module to add value to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add implemented interfaces\n        String[] supported_interfaces = addInterfaces(va);\n\n        // Add abstract base valuetypes\n        String[] abstract_base_valuetypes = addAbstractBaseValuetypes(va);\n\n        // Add superclass\n        ValueDefImpl superValue = null;\n        ValueAnalysis superAnalysis = va.getSuperAnalysis();\n        if (superAnalysis != null)\n            superValue = addValue(superAnalysis);\n\n        // Create the value\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        TypeCode baseTypeCode;\n        if (superValue == null)\n            baseTypeCode = orb.get_primitive_tc(TCKind.tk_null);\n        else\n            baseTypeCode = superValue.type();\n\n        vDef = new ValueDefImpl(va.getRepositoryId(), base, \"1.0\",\n                m,\n                va.isAbstractValue(),\n                va.isCustom(),\n                supported_interfaces,\n                abstract_base_valuetypes,\n                baseTypeCode,\n                impl);\n        addTypeCode(cls, vDef.type());\n        m.add(base, vDef);\n        valueMap.put(cls, vDef); // Remember we mapped this.\n\n        // Fill in constants.\n        addConstants(vDef, va);\n\n        // Add value members\n        ValueMemberAnalysis[] vmas = va.getMembers();\n        for (int i = 0; i < vmas.length; ++i) {\n            ValueMemberDefImpl vmDef;\n            String vmid = va.getMemberRepositoryId(vmas[i].getJavaName());\n            String vmName = vmas[i].getIDLName();\n\n            Class vmCls = vmas[i].getCls();\n            TypeCode typeCode = getTypeCode(vmCls);\n\n            boolean vmPublic = vmas[i].isPublic();\n\n            vmDef = new ValueMemberDefImpl(vmid, vmName, \"1.0\",\n                    typeCode, vmPublic, vDef, impl);\n            vDef.add(vmName, vmDef);\n        }\n\n        // Add attributes\n        addAttributes(vDef, va);\n\n        // TODO: Fill in operations.\n\n        return vDef;\n    }", "code_tokens": ["private", "ValueDefImpl", "addValue", "(", "ValueAnalysis", "va", ")", "throws", "RMIIIOPViolationException", ",", "IRConstructionException", "{", "ValueDefImpl", "vDef", ";", "Class", "cls", "=", "va", ".", "getCls", "(", ")", ";", "// Lookup: Has it already been added?", "vDef", "=", "(", "ValueDefImpl", ")", "valueMap", ".", "get", "(", "cls", ")", ";", "if", "(", "vDef", "!=", "null", ")", "return", "vDef", ";", "// Yes, just return it.", "// Get module to add value to.", "ModuleDefImpl", "m", "=", "ensurePackageExists", "(", "cls", ".", "getPackage", "(", ")", ".", "getName", "(", ")", ")", ";", "// Add implemented interfaces", "String", "[", "]", "supported_interfaces", "=", "addInterfaces", "(", "va", ")", ";", "// Add abstract base valuetypes", "String", "[", "]", "abstract_base_valuetypes", "=", "addAbstractBaseValuetypes", "(", "va", ")", ";", "// Add superclass", "ValueDefImpl", "superValue", "=", "null", ";", "ValueAnalysis", "superAnalysis", "=", "va", ".", "getSuperAnalysis", "(", ")", ";", "if", "(", "superAnalysis", "!=", "null", ")", "superValue", "=", "addValue", "(", "superAnalysis", ")", ";", "// Create the value", "String", "base", "=", "cls", ".", "getName", "(", ")", ";", "base", "=", "base", ".", "substring", "(", "base", ".", "lastIndexOf", "(", "'", "'", ")", "+", "1", ")", ";", "base", "=", "Util", ".", "javaToIDLName", "(", "base", ")", ";", "TypeCode", "baseTypeCode", ";", "if", "(", "superValue", "==", "null", ")", "baseTypeCode", "=", "orb", ".", "get_primitive_tc", "(", "TCKind", ".", "tk_null", ")", ";", "else", "baseTypeCode", "=", "superValue", ".", "type", "(", ")", ";", "vDef", "=", "new", "ValueDefImpl", "(", "va", ".", "getRepositoryId", "(", ")", ",", "base", ",", "\"1.0\"", ",", "m", ",", "va", ".", "isAbstractValue", "(", ")", ",", "va", ".", "isCustom", "(", ")", ",", "supported_interfaces", ",", "abstract_base_valuetypes", ",", "baseTypeCode", ",", "impl", ")", ";", "addTypeCode", "(", "cls", ",", "vDef", ".", "type", "(", ")", ")", ";", "m", ".", "add", "(", "base", ",", "vDef", ")", ";", "valueMap", ".", "put", "(", "cls", ",", "vDef", ")", ";", "// Remember we mapped this.", "// Fill in constants.", "addConstants", "(", "vDef", ",", "va", ")", ";", "// Add value members", "ValueMemberAnalysis", "[", "]", "vmas", "=", "va", ".", "getMembers", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "vmas", ".", "length", ";", "++", "i", ")", "{", "ValueMemberDefImpl", "vmDef", ";", "String", "vmid", "=", "va", ".", "getMemberRepositoryId", "(", "vmas", "[", "i", "]", ".", "getJavaName", "(", ")", ")", ";", "String", "vmName", "=", "vmas", "[", "i", "]", ".", "getIDLName", "(", ")", ";", "Class", "vmCls", "=", "vmas", "[", "i", "]", ".", "getCls", "(", ")", ";", "TypeCode", "typeCode", "=", "getTypeCode", "(", "vmCls", ")", ";", "boolean", "vmPublic", "=", "vmas", "[", "i", "]", ".", "isPublic", "(", ")", ";", "vmDef", "=", "new", "ValueMemberDefImpl", "(", "vmid", ",", "vmName", ",", "\"1.0\"", ",", "typeCode", ",", "vmPublic", ",", "vDef", ",", "impl", ")", ";", "vDef", ".", "add", "(", "vmName", ",", "vmDef", ")", ";", "}", "// Add attributes", "addAttributes", "(", "vDef", ",", "va", ")", ";", "// TODO: Fill in operations.", "return", "vDef", ";", "}"], "docstring": "Add a value type.", "docstring_tokens": ["Add", "a", "value", "type", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java#L828-L902", "partition": "test", "index": 2853, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java", "func_name": "Util.primitiveTypeIDLName", "original_string": "static String primitiveTypeIDLName(Class type) {\n        if (type == Void.TYPE)\n            return \"void\";\n        if (type == Boolean.TYPE)\n            return \"boolean\";\n        if (type == Character.TYPE)\n            return \"wchar\";\n        if (type == Byte.TYPE)\n            return \"octet\";\n        if (type == Short.TYPE)\n            return \"short\";\n        if (type == Integer.TYPE)\n            return \"long\";\n        if (type == Long.TYPE)\n            return \"long long\";\n        if (type == Float.TYPE)\n            return \"float\";\n        if (type == Double.TYPE)\n            return \"double\";\n        throw IIOPLogger.ROOT_LOGGER.notAPrimitive(type.getName());\n    }", "language": "java", "code": "static String primitiveTypeIDLName(Class type) {\n        if (type == Void.TYPE)\n            return \"void\";\n        if (type == Boolean.TYPE)\n            return \"boolean\";\n        if (type == Character.TYPE)\n            return \"wchar\";\n        if (type == Byte.TYPE)\n            return \"octet\";\n        if (type == Short.TYPE)\n            return \"short\";\n        if (type == Integer.TYPE)\n            return \"long\";\n        if (type == Long.TYPE)\n            return \"long long\";\n        if (type == Float.TYPE)\n            return \"float\";\n        if (type == Double.TYPE)\n            return \"double\";\n        throw IIOPLogger.ROOT_LOGGER.notAPrimitive(type.getName());\n    }", "code_tokens": ["static", "String", "primitiveTypeIDLName", "(", "Class", "type", ")", "{", "if", "(", "type", "==", "Void", ".", "TYPE", ")", "return", "\"void\"", ";", "if", "(", "type", "==", "Boolean", ".", "TYPE", ")", "return", "\"boolean\"", ";", "if", "(", "type", "==", "Character", ".", "TYPE", ")", "return", "\"wchar\"", ";", "if", "(", "type", "==", "Byte", ".", "TYPE", ")", "return", "\"octet\"", ";", "if", "(", "type", "==", "Short", ".", "TYPE", ")", "return", "\"short\"", ";", "if", "(", "type", "==", "Integer", ".", "TYPE", ")", "return", "\"long\"", ";", "if", "(", "type", "==", "Long", ".", "TYPE", ")", "return", "\"long long\"", ";", "if", "(", "type", "==", "Float", ".", "TYPE", ")", "return", "\"float\"", ";", "if", "(", "type", "==", "Double", ".", "TYPE", ")", "return", "\"double\"", ";", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "notAPrimitive", "(", "type", ".", "getName", "(", ")", ")", ";", "}"], "docstring": "Handle mappings for primitive types, as per section 1.3.3.", "docstring_tokens": ["Handle", "mappings", "for", "primitive", "types", "as", "per", "section", "1", ".", "3", ".", "3", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/Util.java#L582-L602", "partition": "test", "index": 2635, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java", "func_name": "CNCtx.createSubcontext", "original_string": "public javax.naming.Context createSubcontext(String name)\n            throws NamingException {\n        return createSubcontext(new CompositeName(name));\n    }", "language": "java", "code": "public javax.naming.Context createSubcontext(String name)\n            throws NamingException {\n        return createSubcontext(new CompositeName(name));\n    }", "code_tokens": ["public", "javax", ".", "naming", ".", "Context", "createSubcontext", "(", "String", "name", ")", "throws", "NamingException", "{", "return", "createSubcontext", "(", "new", "CompositeName", "(", "name", ")", ")", ";", "}"], "docstring": "Uses the callBindNewContext convenience function to create a new\ncontext. Throws an invalid name exception if the name is empty.\n\n@param name string\n@return the new context object.\n@throws NamingException See callBindNewContext", "docstring_tokens": ["Uses", "the", "callBindNewContext", "convenience", "function", "to", "create", "a", "new", "context", ".", "Throws", "an", "invalid", "name", "exception", "if", "the", "name", "is", "empty", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/naming/jndi/CNCtx.java#L952-L955", "partition": "test", "index": 2778, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java", "func_name": "InterfaceRepository.addException", "original_string": "private ExceptionDefImpl addException(ExceptionAnalysis ea)\n            throws RMIIIOPViolationException, IRConstructionException {\n        ExceptionDefImpl eDef;\n        Class cls = ea.getCls();\n\n        // Lookup: Has it already been added?\n        eDef = (ExceptionDefImpl) exceptionMap.get(cls);\n        if (eDef != null)\n            return eDef; // Yes, just return it.\n\n        // 1.3.7.1: map to value\n        ValueDefImpl vDef = addValue(ea);\n\n        // 1.3.7.2: map to exception\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        if (base.endsWith(\"Exception\"))\n            base = base.substring(0, base.length() - 9);\n        base = Util.javaToIDLName(base + \"Ex\");\n\n        StructMember[] members = new StructMember[1];\n        members[0] = new StructMember(\"value\", vDef.type(), null/*ignored*/);\n        TypeCode typeCode\n                = orb.create_exception_tc(ea.getExceptionRepositoryId(),\n                base, members);\n\n        eDef = new ExceptionDefImpl(ea.getExceptionRepositoryId(), base, \"1.0\",\n                typeCode, vDef, m, impl);\n        m.add(base, eDef);\n        exceptionMap.put(cls, eDef); // Remember we mapped this.\n\n        return eDef;\n    }", "language": "java", "code": "private ExceptionDefImpl addException(ExceptionAnalysis ea)\n            throws RMIIIOPViolationException, IRConstructionException {\n        ExceptionDefImpl eDef;\n        Class cls = ea.getCls();\n\n        // Lookup: Has it already been added?\n        eDef = (ExceptionDefImpl) exceptionMap.get(cls);\n        if (eDef != null)\n            return eDef; // Yes, just return it.\n\n        // 1.3.7.1: map to value\n        ValueDefImpl vDef = addValue(ea);\n\n        // 1.3.7.2: map to exception\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        if (base.endsWith(\"Exception\"))\n            base = base.substring(0, base.length() - 9);\n        base = Util.javaToIDLName(base + \"Ex\");\n\n        StructMember[] members = new StructMember[1];\n        members[0] = new StructMember(\"value\", vDef.type(), null/*ignored*/);\n        TypeCode typeCode\n                = orb.create_exception_tc(ea.getExceptionRepositoryId(),\n                base, members);\n\n        eDef = new ExceptionDefImpl(ea.getExceptionRepositoryId(), base, \"1.0\",\n                typeCode, vDef, m, impl);\n        m.add(base, eDef);\n        exceptionMap.put(cls, eDef); // Remember we mapped this.\n\n        return eDef;\n    }", "code_tokens": ["private", "ExceptionDefImpl", "addException", "(", "ExceptionAnalysis", "ea", ")", "throws", "RMIIIOPViolationException", ",", "IRConstructionException", "{", "ExceptionDefImpl", "eDef", ";", "Class", "cls", "=", "ea", ".", "getCls", "(", ")", ";", "// Lookup: Has it already been added?", "eDef", "=", "(", "ExceptionDefImpl", ")", "exceptionMap", ".", "get", "(", "cls", ")", ";", "if", "(", "eDef", "!=", "null", ")", "return", "eDef", ";", "// Yes, just return it.", "// 1.3.7.1: map to value", "ValueDefImpl", "vDef", "=", "addValue", "(", "ea", ")", ";", "// 1.3.7.2: map to exception", "ModuleDefImpl", "m", "=", "ensurePackageExists", "(", "cls", ".", "getPackage", "(", ")", ".", "getName", "(", ")", ")", ";", "String", "base", "=", "cls", ".", "getName", "(", ")", ";", "base", "=", "base", ".", "substring", "(", "base", ".", "lastIndexOf", "(", "'", "'", ")", "+", "1", ")", ";", "if", "(", "base", ".", "endsWith", "(", "\"Exception\"", ")", ")", "base", "=", "base", ".", "substring", "(", "0", ",", "base", ".", "length", "(", ")", "-", "9", ")", ";", "base", "=", "Util", ".", "javaToIDLName", "(", "base", "+", "\"Ex\"", ")", ";", "StructMember", "[", "]", "members", "=", "new", "StructMember", "[", "1", "]", ";", "members", "[", "0", "]", "=", "new", "StructMember", "(", "\"value\"", ",", "vDef", ".", "type", "(", ")", ",", "null", "/*ignored*/", ")", ";", "TypeCode", "typeCode", "=", "orb", ".", "create_exception_tc", "(", "ea", ".", "getExceptionRepositoryId", "(", ")", ",", "base", ",", "members", ")", ";", "eDef", "=", "new", "ExceptionDefImpl", "(", "ea", ".", "getExceptionRepositoryId", "(", ")", ",", "base", ",", "\"1.0\"", ",", "typeCode", ",", "vDef", ",", "m", ",", "impl", ")", ";", "m", ".", "add", "(", "base", ",", "eDef", ")", ";", "exceptionMap", ".", "put", "(", "cls", ",", "eDef", ")", ";", "// Remember we mapped this.", "return", "eDef", ";", "}"], "docstring": "Add an exception type.", "docstring_tokens": ["Add", "an", "exception", "type", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/rmi/ir/InterfaceRepository.java#L907-L940", "partition": "test", "index": 2854, "time": "2011-10-31 10:38:40"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/invocation/AbstractInvocationHandler.java", "func_name": "AbstractInvocationHandler.getComponentView", "original_string": "protected ComponentView getComponentView() {\n        ComponentView cv = componentView;\n        // we need to check both, otherwise it is possible for\n        // componentView to be initialized before reference\n        if (cv == null) {\n            synchronized (this) {\n                cv = componentView;\n                if (cv == null) {\n                    cv = getMSCService(componentViewName, ComponentView.class);\n                    if (cv == null) {\n                        throw WSLogger.ROOT_LOGGER.cannotFindComponentView(componentViewName);\n                    }\n                    if (reference == null) {\n                        try {\n                            reference = cv.createInstance();\n                        } catch (Exception e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                    componentView = cv;\n                }\n            }\n        }\n        return cv;\n    }", "language": "java", "code": "protected ComponentView getComponentView() {\n        ComponentView cv = componentView;\n        // we need to check both, otherwise it is possible for\n        // componentView to be initialized before reference\n        if (cv == null) {\n            synchronized (this) {\n                cv = componentView;\n                if (cv == null) {\n                    cv = getMSCService(componentViewName, ComponentView.class);\n                    if (cv == null) {\n                        throw WSLogger.ROOT_LOGGER.cannotFindComponentView(componentViewName);\n                    }\n                    if (reference == null) {\n                        try {\n                            reference = cv.createInstance();\n                        } catch (Exception e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                    componentView = cv;\n                }\n            }\n        }\n        return cv;\n    }", "code_tokens": ["protected", "ComponentView", "getComponentView", "(", ")", "{", "ComponentView", "cv", "=", "componentView", ";", "// we need to check both, otherwise it is possible for", "// componentView to be initialized before reference", "if", "(", "cv", "==", "null", ")", "{", "synchronized", "(", "this", ")", "{", "cv", "=", "componentView", ";", "if", "(", "cv", "==", "null", ")", "{", "cv", "=", "getMSCService", "(", "componentViewName", ",", "ComponentView", ".", "class", ")", ";", "if", "(", "cv", "==", "null", ")", "{", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "cannotFindComponentView", "(", "componentViewName", ")", ";", "}", "if", "(", "reference", "==", "null", ")", "{", "try", "{", "reference", "=", "cv", ".", "createInstance", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}", "componentView", "=", "cv", ";", "}", "}", "}", "return", "cv", ";", "}"], "docstring": "Gets endpoint container lazily.\n\n@return endpoint container", "docstring_tokens": ["Gets", "endpoint", "container", "lazily", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/invocation/AbstractInvocationHandler.java#L76-L100", "partition": "test", "index": 2525, "time": "2011-11-02 08:36:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/invocation/AbstractInvocationHandler.java", "func_name": "AbstractInvocationHandler.getComponentViewMethod", "original_string": "protected Method getComponentViewMethod(final Method seiMethod, final Collection<Method> viewMethods) {\n       for (final Method viewMethod : viewMethods) {\n           if (matches(seiMethod, viewMethod)) {\n               return viewMethod;\n           }\n       }\n       throw new IllegalStateException();\n   }", "language": "java", "code": "protected Method getComponentViewMethod(final Method seiMethod, final Collection<Method> viewMethods) {\n       for (final Method viewMethod : viewMethods) {\n           if (matches(seiMethod, viewMethod)) {\n               return viewMethod;\n           }\n       }\n       throw new IllegalStateException();\n   }", "code_tokens": ["protected", "Method", "getComponentViewMethod", "(", "final", "Method", "seiMethod", ",", "final", "Collection", "<", "Method", ">", "viewMethods", ")", "{", "for", "(", "final", "Method", "viewMethod", ":", "viewMethods", ")", "{", "if", "(", "matches", "(", "seiMethod", ",", "viewMethod", ")", ")", "{", "return", "viewMethod", ";", "}", "}", "throw", "new", "IllegalStateException", "(", ")", ";", "}"], "docstring": "Translates SEI method to component view method.\n\n@param seiMethod SEI method\n@param viewMethods component view methods\n@return matching component view method", "docstring_tokens": ["Translates", "SEI", "method", "to", "component", "view", "method", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/invocation/AbstractInvocationHandler.java#L177-L184", "partition": "test", "index": 2527, "time": "2011-11-02 08:36:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/invocation/AbstractInvocationHandler.java", "func_name": "AbstractInvocationHandler.matches", "original_string": "private boolean matches(final Method seiMethod, final Method viewMethod) {\n       if (!seiMethod.getName().equals(viewMethod.getName())) return false;\n       final Class<?>[] sourceParams = seiMethod.getParameterTypes();\n       final Class<?>[] targetParams = viewMethod.getParameterTypes();\n       if (sourceParams.length != targetParams.length) return false;\n       for (int i = 0; i < sourceParams.length; i++) {\n           if (!sourceParams[i].equals(targetParams[i])) return false;\n       }\n       return true;\n   }", "language": "java", "code": "private boolean matches(final Method seiMethod, final Method viewMethod) {\n       if (!seiMethod.getName().equals(viewMethod.getName())) return false;\n       final Class<?>[] sourceParams = seiMethod.getParameterTypes();\n       final Class<?>[] targetParams = viewMethod.getParameterTypes();\n       if (sourceParams.length != targetParams.length) return false;\n       for (int i = 0; i < sourceParams.length; i++) {\n           if (!sourceParams[i].equals(targetParams[i])) return false;\n       }\n       return true;\n   }", "code_tokens": ["private", "boolean", "matches", "(", "final", "Method", "seiMethod", ",", "final", "Method", "viewMethod", ")", "{", "if", "(", "!", "seiMethod", ".", "getName", "(", ")", ".", "equals", "(", "viewMethod", ".", "getName", "(", ")", ")", ")", "return", "false", ";", "final", "Class", "<", "?", ">", "[", "]", "sourceParams", "=", "seiMethod", ".", "getParameterTypes", "(", ")", ";", "final", "Class", "<", "?", ">", "[", "]", "targetParams", "=", "viewMethod", ".", "getParameterTypes", "(", ")", ";", "if", "(", "sourceParams", ".", "length", "!=", "targetParams", ".", "length", ")", "return", "false", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "sourceParams", ".", "length", ";", "i", "++", ")", "{", "if", "(", "!", "sourceParams", "[", "i", "]", ".", "equals", "(", "targetParams", "[", "i", "]", ")", ")", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "Compares two methods if they are identical.\n\n@param seiMethod reference method\n@param viewMethod target method\n@return true if they match, false otherwise", "docstring_tokens": ["Compares", "two", "methods", "if", "they", "are", "identical", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/invocation/AbstractInvocationHandler.java#L224-L233", "partition": "test", "index": 2528, "time": "2011-11-02 08:36:42"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderEJB.java", "func_name": "AbstractMetaDataBuilderEJB.buildEnterpriseBeanMetaData", "original_string": "protected void buildEnterpriseBeanMetaData(final List<EJBMetaData> wsEjbsMD, final EJBEndpoint ejbEndpoint, final JBossWebservicesMetaData jbossWebservicesMD) {\n        final SLSBMetaData.Builder wsEjbMDBuilder = new SLSBMetaData.Builder();\n\n        // set EJB name and class\n        wsEjbMDBuilder.setEjbName(ejbEndpoint.getName());\n        wsEjbMDBuilder.setEjbClass(ejbEndpoint.getClassName());\n\n        final JBossPortComponentMetaData portComponentMD = getPortComponent(ejbEndpoint.getName(), jbossWebservicesMD);\n        if (portComponentMD != null) {\n            // set port component meta data\n            wsEjbMDBuilder.setPortComponentName(portComponentMD.getPortComponentName());\n            wsEjbMDBuilder.setPortComponentURI(portComponentMD.getPortComponentURI());\n        }\n        // set security meta data\n        // auth method\n        final String authMethod = getAuthMethod(ejbEndpoint, portComponentMD);\n        // transport guarantee\n        final String transportGuarantee = getTransportGuarantee(ejbEndpoint, portComponentMD);\n        // secure wsdl access\n        final boolean secureWsdlAccess = isSecureWsdlAccess(ejbEndpoint, portComponentMD);\n\n        final String realmName = getRealmName(ejbEndpoint, portComponentMD);\n        // propagate\n        wsEjbMDBuilder.setSecurityMetaData(new EJBSecurityMetaData(authMethod, realmName, transportGuarantee, secureWsdlAccess));\n\n        wsEjbsMD.add(wsEjbMDBuilder.build());\n    }", "language": "java", "code": "protected void buildEnterpriseBeanMetaData(final List<EJBMetaData> wsEjbsMD, final EJBEndpoint ejbEndpoint, final JBossWebservicesMetaData jbossWebservicesMD) {\n        final SLSBMetaData.Builder wsEjbMDBuilder = new SLSBMetaData.Builder();\n\n        // set EJB name and class\n        wsEjbMDBuilder.setEjbName(ejbEndpoint.getName());\n        wsEjbMDBuilder.setEjbClass(ejbEndpoint.getClassName());\n\n        final JBossPortComponentMetaData portComponentMD = getPortComponent(ejbEndpoint.getName(), jbossWebservicesMD);\n        if (portComponentMD != null) {\n            // set port component meta data\n            wsEjbMDBuilder.setPortComponentName(portComponentMD.getPortComponentName());\n            wsEjbMDBuilder.setPortComponentURI(portComponentMD.getPortComponentURI());\n        }\n        // set security meta data\n        // auth method\n        final String authMethod = getAuthMethod(ejbEndpoint, portComponentMD);\n        // transport guarantee\n        final String transportGuarantee = getTransportGuarantee(ejbEndpoint, portComponentMD);\n        // secure wsdl access\n        final boolean secureWsdlAccess = isSecureWsdlAccess(ejbEndpoint, portComponentMD);\n\n        final String realmName = getRealmName(ejbEndpoint, portComponentMD);\n        // propagate\n        wsEjbMDBuilder.setSecurityMetaData(new EJBSecurityMetaData(authMethod, realmName, transportGuarantee, secureWsdlAccess));\n\n        wsEjbsMD.add(wsEjbMDBuilder.build());\n    }", "code_tokens": ["protected", "void", "buildEnterpriseBeanMetaData", "(", "final", "List", "<", "EJBMetaData", ">", "wsEjbsMD", ",", "final", "EJBEndpoint", "ejbEndpoint", ",", "final", "JBossWebservicesMetaData", "jbossWebservicesMD", ")", "{", "final", "SLSBMetaData", ".", "Builder", "wsEjbMDBuilder", "=", "new", "SLSBMetaData", ".", "Builder", "(", ")", ";", "// set EJB name and class", "wsEjbMDBuilder", ".", "setEjbName", "(", "ejbEndpoint", ".", "getName", "(", ")", ")", ";", "wsEjbMDBuilder", ".", "setEjbClass", "(", "ejbEndpoint", ".", "getClassName", "(", ")", ")", ";", "final", "JBossPortComponentMetaData", "portComponentMD", "=", "getPortComponent", "(", "ejbEndpoint", ".", "getName", "(", ")", ",", "jbossWebservicesMD", ")", ";", "if", "(", "portComponentMD", "!=", "null", ")", "{", "// set port component meta data", "wsEjbMDBuilder", ".", "setPortComponentName", "(", "portComponentMD", ".", "getPortComponentName", "(", ")", ")", ";", "wsEjbMDBuilder", ".", "setPortComponentURI", "(", "portComponentMD", ".", "getPortComponentURI", "(", ")", ")", ";", "}", "// set security meta data", "// auth method", "final", "String", "authMethod", "=", "getAuthMethod", "(", "ejbEndpoint", ",", "portComponentMD", ")", ";", "// transport guarantee", "final", "String", "transportGuarantee", "=", "getTransportGuarantee", "(", "ejbEndpoint", ",", "portComponentMD", ")", ";", "// secure wsdl access", "final", "boolean", "secureWsdlAccess", "=", "isSecureWsdlAccess", "(", "ejbEndpoint", ",", "portComponentMD", ")", ";", "final", "String", "realmName", "=", "getRealmName", "(", "ejbEndpoint", ",", "portComponentMD", ")", ";", "// propagate", "wsEjbMDBuilder", ".", "setSecurityMetaData", "(", "new", "EJBSecurityMetaData", "(", "authMethod", ",", "realmName", ",", "transportGuarantee", ",", "secureWsdlAccess", ")", ")", ";", "wsEjbsMD", ".", "add", "(", "wsEjbMDBuilder", ".", "build", "(", ")", ")", ";", "}"], "docstring": "Builds JBoss agnostic EJB meta data.\n\n@param wsEjbsMD\njboss agnostic EJBs meta data", "docstring_tokens": ["Builds", "JBoss", "agnostic", "EJB", "meta", "data", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/metadata/AbstractMetaDataBuilderEJB.java#L127-L153", "partition": "test", "index": 2740, "time": "2011-11-02 08:36:42"}
{"repo": "wildfly/wildfly", "path": "jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/JdrReportService.java", "func_name": "JdrReportService.collect", "original_string": "public JdrReport collect() throws OperationFailedException {\n        JdrRunner runner = new JdrRunner(true);\n        serverEnvironment = serverEnvironmentValue.getValue();\n        runner.setJbossHomeDir(serverEnvironment.getHomeDir().getAbsolutePath());\n        runner.setReportLocationDir(serverEnvironment.getServerTempDir().getAbsolutePath());\n        runner.setControllerClient(controllerClient);\n        runner.setHostControllerName(serverEnvironment.getHostControllerName());\n        runner.setServerName(serverEnvironment.getServerName());\n        return runner.collect();\n    }", "language": "java", "code": "public JdrReport collect() throws OperationFailedException {\n        JdrRunner runner = new JdrRunner(true);\n        serverEnvironment = serverEnvironmentValue.getValue();\n        runner.setJbossHomeDir(serverEnvironment.getHomeDir().getAbsolutePath());\n        runner.setReportLocationDir(serverEnvironment.getServerTempDir().getAbsolutePath());\n        runner.setControllerClient(controllerClient);\n        runner.setHostControllerName(serverEnvironment.getHostControllerName());\n        runner.setServerName(serverEnvironment.getServerName());\n        return runner.collect();\n    }", "code_tokens": ["public", "JdrReport", "collect", "(", ")", "throws", "OperationFailedException", "{", "JdrRunner", "runner", "=", "new", "JdrRunner", "(", "true", ")", ";", "serverEnvironment", "=", "serverEnvironmentValue", ".", "getValue", "(", ")", ";", "runner", ".", "setJbossHomeDir", "(", "serverEnvironment", ".", "getHomeDir", "(", ")", ".", "getAbsolutePath", "(", ")", ")", ";", "runner", ".", "setReportLocationDir", "(", "serverEnvironment", ".", "getServerTempDir", "(", ")", ".", "getAbsolutePath", "(", ")", ")", ";", "runner", ".", "setControllerClient", "(", "controllerClient", ")", ";", "runner", ".", "setHostControllerName", "(", "serverEnvironment", ".", "getHostControllerName", "(", ")", ")", ";", "runner", ".", "setServerName", "(", "serverEnvironment", ".", "getServerName", "(", ")", ")", ";", "return", "runner", ".", "collect", "(", ")", ";", "}"], "docstring": "Collect a JDR report.", "docstring_tokens": ["Collect", "a", "JDR", "report", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/JdrReportService.java#L87-L96", "partition": "test", "index": 2515, "time": "2011-11-02 15:21:06"}
{"repo": "wildfly/wildfly", "path": "jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/JdrReportService.java", "func_name": "JdrReportService.standaloneCollect", "original_string": "public JdrReport standaloneCollect(CLI cli, String protocol, String host, int port) throws OperationFailedException {\n        return new JdrRunner(cli, protocol, host, port, null, null).collect();\n    }", "language": "java", "code": "public JdrReport standaloneCollect(CLI cli, String protocol, String host, int port) throws OperationFailedException {\n        return new JdrRunner(cli, protocol, host, port, null, null).collect();\n    }", "code_tokens": ["public", "JdrReport", "standaloneCollect", "(", "CLI", "cli", ",", "String", "protocol", ",", "String", "host", ",", "int", "port", ")", "throws", "OperationFailedException", "{", "return", "new", "JdrRunner", "(", "cli", ",", "protocol", ",", "host", ",", "port", ",", "null", ",", "null", ")", ".", "collect", "(", ")", ";", "}"], "docstring": "Collect a JDR report when run outside the Application Server.\n@param cli", "docstring_tokens": ["Collect", "a", "JDR", "report", "when", "run", "outside", "the", "Application", "Server", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/JdrReportService.java#L80-L82", "partition": "test", "index": 2514, "time": "2011-11-02 15:21:06"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java", "func_name": "PersistenceUnitServiceHandler.setAnnotationIndexes", "original_string": "private static void setAnnotationIndexes(\n            final PersistenceUnitMetadataHolder puHolder,\n            DeploymentUnit deploymentUnit ) {\n\n        final Map<URL, Index> annotationIndexes = new HashMap<>();\n\n        do {\n            for (ResourceRoot root : DeploymentUtils.allResourceRoots(deploymentUnit)) {\n                final Index index = root.getAttachment(Attachments.ANNOTATION_INDEX);\n                if (index != null) {\n                    try {\n                        ROOT_LOGGER.tracef(\"adding '%s' to annotation index map\", root.getRoot().toURL());\n                        annotationIndexes.put(root.getRoot().toURL(), index);\n                    } catch (MalformedURLException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            }\n            deploymentUnit = deploymentUnit.getParent(); // get annotation indexes for top level also\n        }\n        while (deploymentUnit != null);\n\n        for (PersistenceUnitMetadata pu : puHolder.getPersistenceUnits()) {\n            pu.setAnnotationIndex(annotationIndexes);   // hold onto the annotation index for Persistence Provider use during deployment\n        }\n    }", "language": "java", "code": "private static void setAnnotationIndexes(\n            final PersistenceUnitMetadataHolder puHolder,\n            DeploymentUnit deploymentUnit ) {\n\n        final Map<URL, Index> annotationIndexes = new HashMap<>();\n\n        do {\n            for (ResourceRoot root : DeploymentUtils.allResourceRoots(deploymentUnit)) {\n                final Index index = root.getAttachment(Attachments.ANNOTATION_INDEX);\n                if (index != null) {\n                    try {\n                        ROOT_LOGGER.tracef(\"adding '%s' to annotation index map\", root.getRoot().toURL());\n                        annotationIndexes.put(root.getRoot().toURL(), index);\n                    } catch (MalformedURLException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            }\n            deploymentUnit = deploymentUnit.getParent(); // get annotation indexes for top level also\n        }\n        while (deploymentUnit != null);\n\n        for (PersistenceUnitMetadata pu : puHolder.getPersistenceUnits()) {\n            pu.setAnnotationIndex(annotationIndexes);   // hold onto the annotation index for Persistence Provider use during deployment\n        }\n    }", "code_tokens": ["private", "static", "void", "setAnnotationIndexes", "(", "final", "PersistenceUnitMetadataHolder", "puHolder", ",", "DeploymentUnit", "deploymentUnit", ")", "{", "final", "Map", "<", "URL", ",", "Index", ">", "annotationIndexes", "=", "new", "HashMap", "<>", "(", ")", ";", "do", "{", "for", "(", "ResourceRoot", "root", ":", "DeploymentUtils", ".", "allResourceRoots", "(", "deploymentUnit", ")", ")", "{", "final", "Index", "index", "=", "root", ".", "getAttachment", "(", "Attachments", ".", "ANNOTATION_INDEX", ")", ";", "if", "(", "index", "!=", "null", ")", "{", "try", "{", "ROOT_LOGGER", ".", "tracef", "(", "\"adding '%s' to annotation index map\"", ",", "root", ".", "getRoot", "(", ")", ".", "toURL", "(", ")", ")", ";", "annotationIndexes", ".", "put", "(", "root", ".", "getRoot", "(", ")", ".", "toURL", "(", ")", ",", "index", ")", ";", "}", "catch", "(", "MalformedURLException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}", "}", "deploymentUnit", "=", "deploymentUnit", ".", "getParent", "(", ")", ";", "// get annotation indexes for top level also", "}", "while", "(", "deploymentUnit", "!=", "null", ")", ";", "for", "(", "PersistenceUnitMetadata", "pu", ":", "puHolder", ".", "getPersistenceUnits", "(", ")", ")", "{", "pu", ".", "setAnnotationIndex", "(", "annotationIndexes", ")", ";", "// hold onto the annotation index for Persistence Provider use during deployment", "}", "}"], "docstring": "Setup the annotation index map\n\n@param puHolder\n@param deploymentUnit", "docstring_tokens": ["Setup", "the", "annotation", "index", "map"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java#L753-L778", "partition": "test", "index": 2734, "time": "2011-11-03 13:11:07"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/KernelDeploymentModuleProcessor.java", "func_name": "KernelDeploymentModuleProcessor.deploy", "original_string": "@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit unit = phaseContext.getDeploymentUnit();\n        final List<KernelDeploymentXmlDescriptor> kdXmlDescriptors = unit.getAttachment(KernelDeploymentXmlDescriptor.ATTACHMENT_KEY);\n        if (kdXmlDescriptors == null || kdXmlDescriptors.isEmpty())\n            return;\n\n        for (KernelDeploymentXmlDescriptor kdxd : kdXmlDescriptors) {\n            if (kdxd.getBeanFactoriesCount() > 0) {\n                final ModuleSpecification moduleSpecification = unit.getAttachment(Attachments.MODULE_SPECIFICATION);\n                final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n                ModuleDependency dependency = new ModuleDependency(moduleLoader, POJO_MODULE, false, false, false, false);\n                PathFilter filter = PathFilters.isChildOf(BaseBeanFactory.class.getPackage().getName());\n                dependency.addImportFilter(filter, true);\n                dependency.addImportFilter(PathFilters.rejectAll(), false);\n                moduleSpecification.addSystemDependency(dependency);\n                return;\n            }\n        }\n    }", "language": "java", "code": "@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit unit = phaseContext.getDeploymentUnit();\n        final List<KernelDeploymentXmlDescriptor> kdXmlDescriptors = unit.getAttachment(KernelDeploymentXmlDescriptor.ATTACHMENT_KEY);\n        if (kdXmlDescriptors == null || kdXmlDescriptors.isEmpty())\n            return;\n\n        for (KernelDeploymentXmlDescriptor kdxd : kdXmlDescriptors) {\n            if (kdxd.getBeanFactoriesCount() > 0) {\n                final ModuleSpecification moduleSpecification = unit.getAttachment(Attachments.MODULE_SPECIFICATION);\n                final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n                ModuleDependency dependency = new ModuleDependency(moduleLoader, POJO_MODULE, false, false, false, false);\n                PathFilter filter = PathFilters.isChildOf(BaseBeanFactory.class.getPackage().getName());\n                dependency.addImportFilter(filter, true);\n                dependency.addImportFilter(PathFilters.rejectAll(), false);\n                moduleSpecification.addSystemDependency(dependency);\n                return;\n            }\n        }\n    }", "code_tokens": ["@", "Override", "public", "void", "deploy", "(", "DeploymentPhaseContext", "phaseContext", ")", "throws", "DeploymentUnitProcessingException", "{", "final", "DeploymentUnit", "unit", "=", "phaseContext", ".", "getDeploymentUnit", "(", ")", ";", "final", "List", "<", "KernelDeploymentXmlDescriptor", ">", "kdXmlDescriptors", "=", "unit", ".", "getAttachment", "(", "KernelDeploymentXmlDescriptor", ".", "ATTACHMENT_KEY", ")", ";", "if", "(", "kdXmlDescriptors", "==", "null", "||", "kdXmlDescriptors", ".", "isEmpty", "(", ")", ")", "return", ";", "for", "(", "KernelDeploymentXmlDescriptor", "kdxd", ":", "kdXmlDescriptors", ")", "{", "if", "(", "kdxd", ".", "getBeanFactoriesCount", "(", ")", ">", "0", ")", "{", "final", "ModuleSpecification", "moduleSpecification", "=", "unit", ".", "getAttachment", "(", "Attachments", ".", "MODULE_SPECIFICATION", ")", ";", "final", "ModuleLoader", "moduleLoader", "=", "Module", ".", "getBootModuleLoader", "(", ")", ";", "ModuleDependency", "dependency", "=", "new", "ModuleDependency", "(", "moduleLoader", ",", "POJO_MODULE", ",", "false", ",", "false", ",", "false", ",", "false", ")", ";", "PathFilter", "filter", "=", "PathFilters", ".", "isChildOf", "(", "BaseBeanFactory", ".", "class", ".", "getPackage", "(", ")", ".", "getName", "(", ")", ")", ";", "dependency", ".", "addImportFilter", "(", "filter", ",", "true", ")", ";", "dependency", ".", "addImportFilter", "(", "PathFilters", ".", "rejectAll", "(", ")", ",", "false", ")", ";", "moduleSpecification", ".", "addSystemDependency", "(", "dependency", ")", ";", "return", ";", "}", "}", "}"], "docstring": "Add POJO module if we have any bean factories.\n\n@param phaseContext the deployment unit context\n@throws org.jboss.as.server.deployment.DeploymentUnitProcessingException", "docstring_tokens": ["Add", "POJO", "module", "if", "we", "have", "any", "bean", "factories", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/KernelDeploymentModuleProcessor.java#L57-L76", "partition": "test", "index": 2469, "time": "2011-11-06 00:36:34"}
{"repo": "wildfly/wildfly", "path": "transactions/src/main/java/org/jboss/as/txn/subsystem/TransactionSubsystem10Parser.java", "func_name": "TransactionSubsystem10Parser.parseCoreEnvironmentElement", "original_string": "static void parseCoreEnvironmentElement(final XMLExtendedStreamReader reader, final ModelNode operation) throws XMLStreamException {\n\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i++) {\n            requireNoNamespaceAttribute(reader, i);\n            final String value = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            switch (attribute) {\n                case NODE_IDENTIFIER:\n                    TransactionSubsystemRootResourceDefinition.NODE_IDENTIFIER.parseAndSetParameter(value, operation, reader);\n                    break;\n                case PATH:\n                case RELATIVE_TO:\n                    throw TransactionLogger.ROOT_LOGGER.unsupportedAttribute(attribute.getLocalName(), reader.getLocation());\n                default:\n                    throw unexpectedAttribute(reader, i);\n            }\n        }\n        // elements\n        final EnumSet<Element> required = EnumSet.of(Element.PROCESS_ID);\n        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            final Element element = Element.forName(reader.getLocalName());\n            required.remove(element);\n            switch (element) {\n                case PROCESS_ID: {\n                    if (!encountered.add(element)) {\n                        throw duplicateNamedElement(reader, reader.getLocalName());\n                    }\n                    parseProcessIdEnvironmentElement(reader, operation);\n                    break;\n                }\n                default:\n                    throw unexpectedElement(reader);\n            }\n        }\n        if (!required.isEmpty()) {\n            throw missingRequiredElement(reader, required);\n        }\n    }", "language": "java", "code": "static void parseCoreEnvironmentElement(final XMLExtendedStreamReader reader, final ModelNode operation) throws XMLStreamException {\n\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i++) {\n            requireNoNamespaceAttribute(reader, i);\n            final String value = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            switch (attribute) {\n                case NODE_IDENTIFIER:\n                    TransactionSubsystemRootResourceDefinition.NODE_IDENTIFIER.parseAndSetParameter(value, operation, reader);\n                    break;\n                case PATH:\n                case RELATIVE_TO:\n                    throw TransactionLogger.ROOT_LOGGER.unsupportedAttribute(attribute.getLocalName(), reader.getLocation());\n                default:\n                    throw unexpectedAttribute(reader, i);\n            }\n        }\n        // elements\n        final EnumSet<Element> required = EnumSet.of(Element.PROCESS_ID);\n        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            final Element element = Element.forName(reader.getLocalName());\n            required.remove(element);\n            switch (element) {\n                case PROCESS_ID: {\n                    if (!encountered.add(element)) {\n                        throw duplicateNamedElement(reader, reader.getLocalName());\n                    }\n                    parseProcessIdEnvironmentElement(reader, operation);\n                    break;\n                }\n                default:\n                    throw unexpectedElement(reader);\n            }\n        }\n        if (!required.isEmpty()) {\n            throw missingRequiredElement(reader, required);\n        }\n    }", "code_tokens": ["static", "void", "parseCoreEnvironmentElement", "(", "final", "XMLExtendedStreamReader", "reader", ",", "final", "ModelNode", "operation", ")", "throws", "XMLStreamException", "{", "final", "int", "count", "=", "reader", ".", "getAttributeCount", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "count", ";", "i", "++", ")", "{", "requireNoNamespaceAttribute", "(", "reader", ",", "i", ")", ";", "final", "String", "value", "=", "reader", ".", "getAttributeValue", "(", "i", ")", ";", "final", "Attribute", "attribute", "=", "Attribute", ".", "forName", "(", "reader", ".", "getAttributeLocalName", "(", "i", ")", ")", ";", "switch", "(", "attribute", ")", "{", "case", "NODE_IDENTIFIER", ":", "TransactionSubsystemRootResourceDefinition", ".", "NODE_IDENTIFIER", ".", "parseAndSetParameter", "(", "value", ",", "operation", ",", "reader", ")", ";", "break", ";", "case", "PATH", ":", "case", "RELATIVE_TO", ":", "throw", "TransactionLogger", ".", "ROOT_LOGGER", ".", "unsupportedAttribute", "(", "attribute", ".", "getLocalName", "(", ")", ",", "reader", ".", "getLocation", "(", ")", ")", ";", "default", ":", "throw", "unexpectedAttribute", "(", "reader", ",", "i", ")", ";", "}", "}", "// elements", "final", "EnumSet", "<", "Element", ">", "required", "=", "EnumSet", ".", "of", "(", "Element", ".", "PROCESS_ID", ")", ";", "final", "EnumSet", "<", "Element", ">", "encountered", "=", "EnumSet", ".", "noneOf", "(", "Element", ".", "class", ")", ";", "while", "(", "reader", ".", "hasNext", "(", ")", "&&", "reader", ".", "nextTag", "(", ")", "!=", "END_ELEMENT", ")", "{", "final", "Element", "element", "=", "Element", ".", "forName", "(", "reader", ".", "getLocalName", "(", ")", ")", ";", "required", ".", "remove", "(", "element", ")", ";", "switch", "(", "element", ")", "{", "case", "PROCESS_ID", ":", "{", "if", "(", "!", "encountered", ".", "add", "(", "element", ")", ")", "{", "throw", "duplicateNamedElement", "(", "reader", ",", "reader", ".", "getLocalName", "(", ")", ")", ";", "}", "parseProcessIdEnvironmentElement", "(", "reader", ",", "operation", ")", ";", "break", ";", "}", "default", ":", "throw", "unexpectedElement", "(", "reader", ")", ";", "}", "}", "if", "(", "!", "required", ".", "isEmpty", "(", ")", ")", "{", "throw", "missingRequiredElement", "(", "reader", ",", "required", ")", ";", "}", "}"], "docstring": "Handle the core-environment element and children\n\n@param reader\n@return ModelNode for the core-environment\n@throws javax.xml.stream.XMLStreamException", "docstring_tokens": ["Handle", "the", "core", "-", "environment", "element", "and", "children"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/transactions/src/main/java/org/jboss/as/txn/subsystem/TransactionSubsystem10Parser.java#L188-L227", "partition": "test", "index": 2485, "time": "2011-11-06 15:21:34"}
{"repo": "wildfly/wildfly", "path": "transactions/src/main/java/org/jboss/as/txn/subsystem/TransactionSubsystem10Parser.java", "func_name": "TransactionSubsystem10Parser.parseProcessIdEnvironmentElement", "original_string": "static void parseProcessIdEnvironmentElement(XMLExtendedStreamReader reader, ModelNode coreEnvironmentAdd) throws XMLStreamException {\n        // no attributes\n        if (reader.getAttributeCount() > 0) {\n            throw unexpectedAttribute(reader, 0);\n        }\n\n        // elements\n        boolean encountered = false;\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            final Element element = Element.forName(reader.getLocalName());\n            switch (element) {\n                case UUID:\n                    if (encountered) {\n                        throw unexpectedElement(reader);\n                    }\n                    encountered = true;\n                    if (reader.getAttributeCount() > 0) {\n                        throw unexpectedAttribute(reader, 0);\n                    }\n                    coreEnvironmentAdd.get(TransactionSubsystemRootResourceDefinition.PROCESS_ID_UUID.getName()).set(true);\n                    requireNoContent(reader);\n                    break;\n                case SOCKET: {\n                    if (encountered) {\n                        throw unexpectedElement(reader);\n                    }\n                    encountered = true;\n                    parseSocketProcessIdElement(reader, coreEnvironmentAdd);\n                    break;\n                }\n                default:\n                    throw unexpectedElement(reader);\n            }\n        }\n\n        if (!encountered) {\n            throw missingOneOf(reader, EnumSet.of(Element.UUID, Element.SOCKET));\n        }\n    }", "language": "java", "code": "static void parseProcessIdEnvironmentElement(XMLExtendedStreamReader reader, ModelNode coreEnvironmentAdd) throws XMLStreamException {\n        // no attributes\n        if (reader.getAttributeCount() > 0) {\n            throw unexpectedAttribute(reader, 0);\n        }\n\n        // elements\n        boolean encountered = false;\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            final Element element = Element.forName(reader.getLocalName());\n            switch (element) {\n                case UUID:\n                    if (encountered) {\n                        throw unexpectedElement(reader);\n                    }\n                    encountered = true;\n                    if (reader.getAttributeCount() > 0) {\n                        throw unexpectedAttribute(reader, 0);\n                    }\n                    coreEnvironmentAdd.get(TransactionSubsystemRootResourceDefinition.PROCESS_ID_UUID.getName()).set(true);\n                    requireNoContent(reader);\n                    break;\n                case SOCKET: {\n                    if (encountered) {\n                        throw unexpectedElement(reader);\n                    }\n                    encountered = true;\n                    parseSocketProcessIdElement(reader, coreEnvironmentAdd);\n                    break;\n                }\n                default:\n                    throw unexpectedElement(reader);\n            }\n        }\n\n        if (!encountered) {\n            throw missingOneOf(reader, EnumSet.of(Element.UUID, Element.SOCKET));\n        }\n    }", "code_tokens": ["static", "void", "parseProcessIdEnvironmentElement", "(", "XMLExtendedStreamReader", "reader", ",", "ModelNode", "coreEnvironmentAdd", ")", "throws", "XMLStreamException", "{", "// no attributes", "if", "(", "reader", ".", "getAttributeCount", "(", ")", ">", "0", ")", "{", "throw", "unexpectedAttribute", "(", "reader", ",", "0", ")", ";", "}", "// elements", "boolean", "encountered", "=", "false", ";", "while", "(", "reader", ".", "hasNext", "(", ")", "&&", "reader", ".", "nextTag", "(", ")", "!=", "END_ELEMENT", ")", "{", "final", "Element", "element", "=", "Element", ".", "forName", "(", "reader", ".", "getLocalName", "(", ")", ")", ";", "switch", "(", "element", ")", "{", "case", "UUID", ":", "if", "(", "encountered", ")", "{", "throw", "unexpectedElement", "(", "reader", ")", ";", "}", "encountered", "=", "true", ";", "if", "(", "reader", ".", "getAttributeCount", "(", ")", ">", "0", ")", "{", "throw", "unexpectedAttribute", "(", "reader", ",", "0", ")", ";", "}", "coreEnvironmentAdd", ".", "get", "(", "TransactionSubsystemRootResourceDefinition", ".", "PROCESS_ID_UUID", ".", "getName", "(", ")", ")", ".", "set", "(", "true", ")", ";", "requireNoContent", "(", "reader", ")", ";", "break", ";", "case", "SOCKET", ":", "{", "if", "(", "encountered", ")", "{", "throw", "unexpectedElement", "(", "reader", ")", ";", "}", "encountered", "=", "true", ";", "parseSocketProcessIdElement", "(", "reader", ",", "coreEnvironmentAdd", ")", ";", "break", ";", "}", "default", ":", "throw", "unexpectedElement", "(", "reader", ")", ";", "}", "}", "if", "(", "!", "encountered", ")", "{", "throw", "missingOneOf", "(", "reader", ",", "EnumSet", ".", "of", "(", "Element", ".", "UUID", ",", "Element", ".", "SOCKET", ")", ")", ";", "}", "}"], "docstring": "Handle the process-id child elements\n\n@param reader\n@param coreEnvironmentAdd\n@return\n@throws javax.xml.stream.XMLStreamException", "docstring_tokens": ["Handle", "the", "process", "-", "id", "child", "elements"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/transactions/src/main/java/org/jboss/as/txn/subsystem/TransactionSubsystem10Parser.java#L238-L276", "partition": "test", "index": 2486, "time": "2011-11-06 15:21:34"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/service/BeanUtils.java", "func_name": "BeanUtils.instantiateBean", "original_string": "public static Object instantiateBean(BeanMetaDataConfig beanConfig, BeanInfo beanInfo, DeploymentReflectionIndex index, Module module) throws Throwable {\n        Joinpoint instantiateJoinpoint = null;\n        ValueConfig[] parameters = new ValueConfig[0];\n        String[] types = Configurator.NO_PARAMS_TYPES;\n        ConstructorConfig ctorConfig = beanConfig.getConstructor();\n        if (ctorConfig != null) {\n            parameters = ctorConfig.getParameters();\n            types = Configurator.getTypes(parameters);\n\n            String factoryClass = ctorConfig.getFactoryClass();\n            FactoryConfig factory = ctorConfig.getFactory();\n            if (factoryClass != null || factory != null) {\n                String factoryMethod = ctorConfig.getFactoryMethod();\n                if (factoryMethod == null)\n                    throw PojoLogger.ROOT_LOGGER.missingFactoryMethod(beanConfig);\n\n                if (factoryClass != null) {\n                    // static factory\n                    Class<?> factoryClazz = Class.forName(factoryClass, false, module.getClassLoader());\n                    Method method = Configurator.findMethod(index, factoryClazz, factoryMethod, types, true, true, true);\n                    MethodJoinpoint mj = new MethodJoinpoint(method);\n                    mj.setTarget(new ImmediateValue<Object>(null)); // null, since this is static call\n                    mj.setParameters(parameters);\n                    instantiateJoinpoint = mj;\n                } else if (factory != null) {\n                    ReflectionJoinpoint rj = new ReflectionJoinpoint(factory.getBeanInfo(), factoryMethod, types);\n                    // null type is ok, as this should be plain injection\n                    rj.setTarget(new ImmediateValue<Object>(factory.getValue(null)));\n                    rj.setParameters(parameters);\n                    instantiateJoinpoint = rj;\n                }\n            }\n        }\n        // plain bean's ctor\n        if (instantiateJoinpoint == null) {\n            if (beanInfo == null)\n                throw new StartException(PojoLogger.ROOT_LOGGER.missingBeanInfo(beanConfig));\n\n            Constructor ctor = (types.length == 0) ? beanInfo.getConstructor() : beanInfo.findConstructor(types);\n            ConstructorJoinpoint constructorJoinpoint = new ConstructorJoinpoint(ctor);\n            constructorJoinpoint.setParameters(parameters);\n            instantiateJoinpoint = constructorJoinpoint;\n        }\n\n        return instantiateJoinpoint.dispatch();\n    }", "language": "java", "code": "public static Object instantiateBean(BeanMetaDataConfig beanConfig, BeanInfo beanInfo, DeploymentReflectionIndex index, Module module) throws Throwable {\n        Joinpoint instantiateJoinpoint = null;\n        ValueConfig[] parameters = new ValueConfig[0];\n        String[] types = Configurator.NO_PARAMS_TYPES;\n        ConstructorConfig ctorConfig = beanConfig.getConstructor();\n        if (ctorConfig != null) {\n            parameters = ctorConfig.getParameters();\n            types = Configurator.getTypes(parameters);\n\n            String factoryClass = ctorConfig.getFactoryClass();\n            FactoryConfig factory = ctorConfig.getFactory();\n            if (factoryClass != null || factory != null) {\n                String factoryMethod = ctorConfig.getFactoryMethod();\n                if (factoryMethod == null)\n                    throw PojoLogger.ROOT_LOGGER.missingFactoryMethod(beanConfig);\n\n                if (factoryClass != null) {\n                    // static factory\n                    Class<?> factoryClazz = Class.forName(factoryClass, false, module.getClassLoader());\n                    Method method = Configurator.findMethod(index, factoryClazz, factoryMethod, types, true, true, true);\n                    MethodJoinpoint mj = new MethodJoinpoint(method);\n                    mj.setTarget(new ImmediateValue<Object>(null)); // null, since this is static call\n                    mj.setParameters(parameters);\n                    instantiateJoinpoint = mj;\n                } else if (factory != null) {\n                    ReflectionJoinpoint rj = new ReflectionJoinpoint(factory.getBeanInfo(), factoryMethod, types);\n                    // null type is ok, as this should be plain injection\n                    rj.setTarget(new ImmediateValue<Object>(factory.getValue(null)));\n                    rj.setParameters(parameters);\n                    instantiateJoinpoint = rj;\n                }\n            }\n        }\n        // plain bean's ctor\n        if (instantiateJoinpoint == null) {\n            if (beanInfo == null)\n                throw new StartException(PojoLogger.ROOT_LOGGER.missingBeanInfo(beanConfig));\n\n            Constructor ctor = (types.length == 0) ? beanInfo.getConstructor() : beanInfo.findConstructor(types);\n            ConstructorJoinpoint constructorJoinpoint = new ConstructorJoinpoint(ctor);\n            constructorJoinpoint.setParameters(parameters);\n            instantiateJoinpoint = constructorJoinpoint;\n        }\n\n        return instantiateJoinpoint.dispatch();\n    }", "code_tokens": ["public", "static", "Object", "instantiateBean", "(", "BeanMetaDataConfig", "beanConfig", ",", "BeanInfo", "beanInfo", ",", "DeploymentReflectionIndex", "index", ",", "Module", "module", ")", "throws", "Throwable", "{", "Joinpoint", "instantiateJoinpoint", "=", "null", ";", "ValueConfig", "[", "]", "parameters", "=", "new", "ValueConfig", "[", "0", "]", ";", "String", "[", "]", "types", "=", "Configurator", ".", "NO_PARAMS_TYPES", ";", "ConstructorConfig", "ctorConfig", "=", "beanConfig", ".", "getConstructor", "(", ")", ";", "if", "(", "ctorConfig", "!=", "null", ")", "{", "parameters", "=", "ctorConfig", ".", "getParameters", "(", ")", ";", "types", "=", "Configurator", ".", "getTypes", "(", "parameters", ")", ";", "String", "factoryClass", "=", "ctorConfig", ".", "getFactoryClass", "(", ")", ";", "FactoryConfig", "factory", "=", "ctorConfig", ".", "getFactory", "(", ")", ";", "if", "(", "factoryClass", "!=", "null", "||", "factory", "!=", "null", ")", "{", "String", "factoryMethod", "=", "ctorConfig", ".", "getFactoryMethod", "(", ")", ";", "if", "(", "factoryMethod", "==", "null", ")", "throw", "PojoLogger", ".", "ROOT_LOGGER", ".", "missingFactoryMethod", "(", "beanConfig", ")", ";", "if", "(", "factoryClass", "!=", "null", ")", "{", "// static factory", "Class", "<", "?", ">", "factoryClazz", "=", "Class", ".", "forName", "(", "factoryClass", ",", "false", ",", "module", ".", "getClassLoader", "(", ")", ")", ";", "Method", "method", "=", "Configurator", ".", "findMethod", "(", "index", ",", "factoryClazz", ",", "factoryMethod", ",", "types", ",", "true", ",", "true", ",", "true", ")", ";", "MethodJoinpoint", "mj", "=", "new", "MethodJoinpoint", "(", "method", ")", ";", "mj", ".", "setTarget", "(", "new", "ImmediateValue", "<", "Object", ">", "(", "null", ")", ")", ";", "// null, since this is static call", "mj", ".", "setParameters", "(", "parameters", ")", ";", "instantiateJoinpoint", "=", "mj", ";", "}", "else", "if", "(", "factory", "!=", "null", ")", "{", "ReflectionJoinpoint", "rj", "=", "new", "ReflectionJoinpoint", "(", "factory", ".", "getBeanInfo", "(", ")", ",", "factoryMethod", ",", "types", ")", ";", "// null type is ok, as this should be plain injection", "rj", ".", "setTarget", "(", "new", "ImmediateValue", "<", "Object", ">", "(", "factory", ".", "getValue", "(", "null", ")", ")", ")", ";", "rj", ".", "setParameters", "(", "parameters", ")", ";", "instantiateJoinpoint", "=", "rj", ";", "}", "}", "}", "// plain bean's ctor", "if", "(", "instantiateJoinpoint", "==", "null", ")", "{", "if", "(", "beanInfo", "==", "null", ")", "throw", "new", "StartException", "(", "PojoLogger", ".", "ROOT_LOGGER", ".", "missingBeanInfo", "(", "beanConfig", ")", ")", ";", "Constructor", "ctor", "=", "(", "types", ".", "length", "==", "0", ")", "?", "beanInfo", ".", "getConstructor", "(", ")", ":", "beanInfo", ".", "findConstructor", "(", "types", ")", ";", "ConstructorJoinpoint", "constructorJoinpoint", "=", "new", "ConstructorJoinpoint", "(", "ctor", ")", ";", "constructorJoinpoint", ".", "setParameters", "(", "parameters", ")", ";", "instantiateJoinpoint", "=", "constructorJoinpoint", ";", "}", "return", "instantiateJoinpoint", ".", "dispatch", "(", ")", ";", "}"], "docstring": "Instantiate bean.\n\n@param beanConfig the bean metadata config, must not be null\n@param beanInfo the bean info, can be null if enough info\n@param index the reflection index, must not be null\n@param module the current CL module, must not be null\n@return new bean instance\n@throws Throwable for any error", "docstring_tokens": ["Instantiate", "bean", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/service/BeanUtils.java#L60-L105", "partition": "test", "index": 2711, "time": "2011-11-06 16:07:16"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/service/BeanUtils.java", "func_name": "BeanUtils.dispatchLifecycleJoinpoint", "original_string": "public static void dispatchLifecycleJoinpoint(BeanInfo beanInfo, Object bean, LifecycleConfig config, String defaultMethod) throws Throwable {\n        if (config != null && config.isIgnored())\n            return;\n\n        Joinpoint joinpoint = createJoinpoint(beanInfo, bean, config, defaultMethod);\n        if (joinpoint != null)\n            joinpoint.dispatch();\n    }", "language": "java", "code": "public static void dispatchLifecycleJoinpoint(BeanInfo beanInfo, Object bean, LifecycleConfig config, String defaultMethod) throws Throwable {\n        if (config != null && config.isIgnored())\n            return;\n\n        Joinpoint joinpoint = createJoinpoint(beanInfo, bean, config, defaultMethod);\n        if (joinpoint != null)\n            joinpoint.dispatch();\n    }", "code_tokens": ["public", "static", "void", "dispatchLifecycleJoinpoint", "(", "BeanInfo", "beanInfo", ",", "Object", "bean", ",", "LifecycleConfig", "config", ",", "String", "defaultMethod", ")", "throws", "Throwable", "{", "if", "(", "config", "!=", "null", "&&", "config", ".", "isIgnored", "(", ")", ")", "return", ";", "Joinpoint", "joinpoint", "=", "createJoinpoint", "(", "beanInfo", ",", "bean", ",", "config", ",", "defaultMethod", ")", ";", "if", "(", "joinpoint", "!=", "null", ")", "joinpoint", ".", "dispatch", "(", ")", ";", "}"], "docstring": "Dispatch lifecycle joinpoint.\n\n@param beanInfo the bean info\n@param bean the bean instance\n@param config the lifecycle config\n@param defaultMethod the default method\n@throws Throwable for any error", "docstring_tokens": ["Dispatch", "lifecycle", "joinpoint", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/service/BeanUtils.java#L149-L156", "partition": "test", "index": 2713, "time": "2011-11-06 16:07:16"}
{"repo": "wildfly/wildfly", "path": "pojo/src/main/java/org/jboss/as/pojo/service/BeanUtils.java", "func_name": "BeanUtils.configure", "original_string": "public static void configure(BeanMetaDataConfig beanConfig, BeanInfo beanInfo, Module module, Object bean, boolean nullify) throws Throwable {\n        Set<PropertyConfig> properties = beanConfig.getProperties();\n        if (properties != null) {\n            List<PropertyConfig> used = new ArrayList<PropertyConfig>();\n            for (PropertyConfig pc : properties) {\n                try {\n                    configure(beanInfo, module, bean, pc, nullify);\n                    used.add(pc);\n                } catch (Throwable t) {\n                    if (nullify == false) {\n                        for (PropertyConfig upc : used) {\n                            try {\n                                configure(beanInfo, module, bean,upc, true);\n                            } catch (Throwable ignored) {\n                            }\n                        }\n                        throw new StartException(t);\n                    }\n                }\n            }\n        }\n    }", "language": "java", "code": "public static void configure(BeanMetaDataConfig beanConfig, BeanInfo beanInfo, Module module, Object bean, boolean nullify) throws Throwable {\n        Set<PropertyConfig> properties = beanConfig.getProperties();\n        if (properties != null) {\n            List<PropertyConfig> used = new ArrayList<PropertyConfig>();\n            for (PropertyConfig pc : properties) {\n                try {\n                    configure(beanInfo, module, bean, pc, nullify);\n                    used.add(pc);\n                } catch (Throwable t) {\n                    if (nullify == false) {\n                        for (PropertyConfig upc : used) {\n                            try {\n                                configure(beanInfo, module, bean,upc, true);\n                            } catch (Throwable ignored) {\n                            }\n                        }\n                        throw new StartException(t);\n                    }\n                }\n            }\n        }\n    }", "code_tokens": ["public", "static", "void", "configure", "(", "BeanMetaDataConfig", "beanConfig", ",", "BeanInfo", "beanInfo", ",", "Module", "module", ",", "Object", "bean", ",", "boolean", "nullify", ")", "throws", "Throwable", "{", "Set", "<", "PropertyConfig", ">", "properties", "=", "beanConfig", ".", "getProperties", "(", ")", ";", "if", "(", "properties", "!=", "null", ")", "{", "List", "<", "PropertyConfig", ">", "used", "=", "new", "ArrayList", "<", "PropertyConfig", ">", "(", ")", ";", "for", "(", "PropertyConfig", "pc", ":", "properties", ")", "{", "try", "{", "configure", "(", "beanInfo", ",", "module", ",", "bean", ",", "pc", ",", "nullify", ")", ";", "used", ".", "add", "(", "pc", ")", ";", "}", "catch", "(", "Throwable", "t", ")", "{", "if", "(", "nullify", "==", "false", ")", "{", "for", "(", "PropertyConfig", "upc", ":", "used", ")", "{", "try", "{", "configure", "(", "beanInfo", ",", "module", ",", "bean", ",", "upc", ",", "true", ")", ";", "}", "catch", "(", "Throwable", "ignored", ")", "{", "}", "}", "throw", "new", "StartException", "(", "t", ")", ";", "}", "}", "}", "}", "}"], "docstring": "Configure bean.\n\n@param beanConfig the bean metadata config, must not be null\n@param beanInfo the bean info, can be null if enough info\n@param module the current CL module, must not be null\n@param bean the bean instance\n@param nullify do we nullify property\n@throws Throwable for any error", "docstring_tokens": ["Configure", "bean", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/pojo/src/main/java/org/jboss/as/pojo/service/BeanUtils.java#L117-L138", "partition": "test", "index": 2712, "time": "2011-11-06 16:07:16"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/AbstractSecurityMetaDataAccessorEJB.java", "func_name": "AbstractSecurityMetaDataAccessorEJB.getDomain", "original_string": "private String getDomain(final String oldSecurityDomain, final String nextSecurityDomain) {\n        if (nextSecurityDomain == null) {\n            return oldSecurityDomain;\n        }\n\n        if (oldSecurityDomain == null) {\n            return nextSecurityDomain;\n        }\n\n        ensureSameDomains(oldSecurityDomain, nextSecurityDomain);\n\n        return oldSecurityDomain;\n    }", "language": "java", "code": "private String getDomain(final String oldSecurityDomain, final String nextSecurityDomain) {\n        if (nextSecurityDomain == null) {\n            return oldSecurityDomain;\n        }\n\n        if (oldSecurityDomain == null) {\n            return nextSecurityDomain;\n        }\n\n        ensureSameDomains(oldSecurityDomain, nextSecurityDomain);\n\n        return oldSecurityDomain;\n    }", "code_tokens": ["private", "String", "getDomain", "(", "final", "String", "oldSecurityDomain", ",", "final", "String", "nextSecurityDomain", ")", "{", "if", "(", "nextSecurityDomain", "==", "null", ")", "{", "return", "oldSecurityDomain", ";", "}", "if", "(", "oldSecurityDomain", "==", "null", ")", "{", "return", "nextSecurityDomain", ";", "}", "ensureSameDomains", "(", "oldSecurityDomain", ",", "nextSecurityDomain", ")", ";", "return", "oldSecurityDomain", ";", "}"], "docstring": "Returns security domain value. This method checks domain is the same for every EJB 3 endpoint.\n\n@param oldSecurityDomain our security domain\n@param nextSecurityDomain next security domain\n@return security domain value\n@throws IllegalStateException if domains have different values", "docstring_tokens": ["Returns", "security", "domain", "value", ".", "This", "method", "checks", "domain", "is", "the", "same", "for", "every", "EJB", "3", "endpoint", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/AbstractSecurityMetaDataAccessorEJB.java#L170-L182", "partition": "test", "index": 2531, "time": "2011-11-11 02:53:56"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/AbstractSecurityMetaDataAccessorEJB.java", "func_name": "AbstractSecurityMetaDataAccessorEJB.ensureSameDomains", "original_string": "private void ensureSameDomains(final String oldSecurityDomain, final String newSecurityDomain) {\n        final boolean domainsDiffer = !oldSecurityDomain.equals(newSecurityDomain);\n        if (domainsDiffer)\n            throw WSLogger.ROOT_LOGGER.multipleSecurityDomainsDetected(oldSecurityDomain, newSecurityDomain);\n    }", "language": "java", "code": "private void ensureSameDomains(final String oldSecurityDomain, final String newSecurityDomain) {\n        final boolean domainsDiffer = !oldSecurityDomain.equals(newSecurityDomain);\n        if (domainsDiffer)\n            throw WSLogger.ROOT_LOGGER.multipleSecurityDomainsDetected(oldSecurityDomain, newSecurityDomain);\n    }", "code_tokens": ["private", "void", "ensureSameDomains", "(", "final", "String", "oldSecurityDomain", ",", "final", "String", "newSecurityDomain", ")", "{", "final", "boolean", "domainsDiffer", "=", "!", "oldSecurityDomain", ".", "equals", "(", "newSecurityDomain", ")", ";", "if", "(", "domainsDiffer", ")", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "multipleSecurityDomainsDetected", "(", "oldSecurityDomain", ",", "newSecurityDomain", ")", ";", "}"], "docstring": "This method ensures both passed domains contain the same value.\n\n@param oldSecurityDomain our security domain\n@param newSecurityDomain next security domain\n@throws IllegalStateException if domains have different values", "docstring_tokens": ["This", "method", "ensures", "both", "passed", "domains", "contain", "the", "same", "value", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/tomcat/AbstractSecurityMetaDataAccessorEJB.java#L191-L195", "partition": "test", "index": 2532, "time": "2011-11-11 02:53:56"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java", "func_name": "ViewConfiguration.putPrivateData", "original_string": "public <T> void putPrivateData(final Class<T> type, T data ) {\n        privateData.put(type, data);\n    }", "language": "java", "code": "public <T> void putPrivateData(final Class<T> type, T data ) {\n        privateData.put(type, data);\n    }", "code_tokens": ["public", "<", "T", ">", "void", "putPrivateData", "(", "final", "Class", "<", "T", ">", "type", ",", "T", "data", ")", "{", "privateData", ".", "put", "(", "type", ",", "data", ")", ";", "}"], "docstring": "Attaches arbitrary private data to this view instance\n\n@param type The type of data\n@param data The data", "docstring_tokens": ["Attaches", "arbitrary", "private", "data", "to", "this", "view", "instance"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ViewConfiguration.java#L287-L289", "partition": "test", "index": 2663, "time": "2011-11-22 17:07:01"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/structure/EJBClientDescriptor10Parser.java", "func_name": "EJBClientDescriptor10Parser.unexpectedElement", "original_string": "protected static void unexpectedElement(final XMLExtendedStreamReader reader) throws XMLStreamException {\n        throw EeLogger.ROOT_LOGGER.unexpectedElement(reader.getName(), reader.getLocation());\n    }", "language": "java", "code": "protected static void unexpectedElement(final XMLExtendedStreamReader reader) throws XMLStreamException {\n        throw EeLogger.ROOT_LOGGER.unexpectedElement(reader.getName(), reader.getLocation());\n    }", "code_tokens": ["protected", "static", "void", "unexpectedElement", "(", "final", "XMLExtendedStreamReader", "reader", ")", "throws", "XMLStreamException", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "unexpectedElement", "(", "reader", ".", "getName", "(", ")", ",", "reader", ".", "getLocation", "(", ")", ")", ";", "}"], "docstring": "Throws a XMLStreamException for the unexpected element that was encountered during the parse\n\n@param reader the stream reader\n@throws XMLStreamException", "docstring_tokens": ["Throws", "a", "XMLStreamException", "for", "the", "unexpected", "element", "that", "was", "encountered", "during", "the", "parse"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/structure/EJBClientDescriptor10Parser.java#L221-L223", "partition": "test", "index": 2664, "time": "2011-11-23 02:00:30"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java", "func_name": "EEApplicationDescription.addMessageDestination", "original_string": "public void addMessageDestination(final String name, final String resolvedName, final VirtualFile deploymentRoot) {\n        List<MessageDestinationMapping> components = messageDestinationJndiMapping.get(name);\n        if (components == null) {\n            messageDestinationJndiMapping.put(name, components = new ArrayList<MessageDestinationMapping>(1));\n        }\n        components.add(new MessageDestinationMapping(resolvedName, deploymentRoot));\n    }", "language": "java", "code": "public void addMessageDestination(final String name, final String resolvedName, final VirtualFile deploymentRoot) {\n        List<MessageDestinationMapping> components = messageDestinationJndiMapping.get(name);\n        if (components == null) {\n            messageDestinationJndiMapping.put(name, components = new ArrayList<MessageDestinationMapping>(1));\n        }\n        components.add(new MessageDestinationMapping(resolvedName, deploymentRoot));\n    }", "code_tokens": ["public", "void", "addMessageDestination", "(", "final", "String", "name", ",", "final", "String", "resolvedName", ",", "final", "VirtualFile", "deploymentRoot", ")", "{", "List", "<", "MessageDestinationMapping", ">", "components", "=", "messageDestinationJndiMapping", ".", "get", "(", "name", ")", ";", "if", "(", "components", "==", "null", ")", "{", "messageDestinationJndiMapping", ".", "put", "(", "name", ",", "components", "=", "new", "ArrayList", "<", "MessageDestinationMapping", ">", "(", "1", ")", ")", ";", "}", "components", ".", "add", "(", "new", "MessageDestinationMapping", "(", "resolvedName", ",", "deploymentRoot", ")", ")", ";", "}"], "docstring": "Add a message destination to the application\n\n@param name           The message destination name\n@param resolvedName   The resolved JNDI name\n@param deploymentRoot The deployment root", "docstring_tokens": ["Add", "a", "message", "destination", "to", "the", "application"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java#L75-L81", "partition": "test", "index": 2834, "time": "2011-11-25 12:46:09"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java", "func_name": "EEApplicationDescription.resolveMessageDestination", "original_string": "public Set<String> resolveMessageDestination(final String messageDestName, final VirtualFile deploymentRoot) {\n\n        if (messageDestName.contains(\"#\")) {\n            final String[] parts = messageDestName.split(\"#\");\n            String path = parts[0];\n            if (!path.startsWith(\"../\")) {\n                path = \"../\" + path;\n            }\n            final VirtualFile virtualPath = deploymentRoot.getChild(path);\n            final String name = parts[1];\n            final Set<String> ret = new HashSet<String>();\n            final List<MessageDestinationMapping> data = messageDestinationJndiMapping.get(name);\n            if (data != null) {\n                for (final MessageDestinationMapping i : data) {\n                    //now we need to check the path\n                    if (virtualPath.equals(i.deploymentRoot)) {\n                        ret.add(i.jndiName);\n                    }\n                }\n            }\n            return ret;\n        } else {\n            final Set<String> all = new HashSet<String>();\n            final Set<String> thisDeployment = new HashSet<String>();\n            final List<MessageDestinationMapping> data = messageDestinationJndiMapping.get(messageDestName);\n            if (data != null) {\n                for (final MessageDestinationMapping i : data) {\n                    all.add(i.jndiName);\n                    if (i.deploymentRoot.equals(deploymentRoot)) {\n                        thisDeployment.add(i.jndiName);\n                    }\n                }\n            }\n            if (all.size() > 1) {\n                return thisDeployment;\n            }\n            return all;\n        }\n    }", "language": "java", "code": "public Set<String> resolveMessageDestination(final String messageDestName, final VirtualFile deploymentRoot) {\n\n        if (messageDestName.contains(\"#\")) {\n            final String[] parts = messageDestName.split(\"#\");\n            String path = parts[0];\n            if (!path.startsWith(\"../\")) {\n                path = \"../\" + path;\n            }\n            final VirtualFile virtualPath = deploymentRoot.getChild(path);\n            final String name = parts[1];\n            final Set<String> ret = new HashSet<String>();\n            final List<MessageDestinationMapping> data = messageDestinationJndiMapping.get(name);\n            if (data != null) {\n                for (final MessageDestinationMapping i : data) {\n                    //now we need to check the path\n                    if (virtualPath.equals(i.deploymentRoot)) {\n                        ret.add(i.jndiName);\n                    }\n                }\n            }\n            return ret;\n        } else {\n            final Set<String> all = new HashSet<String>();\n            final Set<String> thisDeployment = new HashSet<String>();\n            final List<MessageDestinationMapping> data = messageDestinationJndiMapping.get(messageDestName);\n            if (data != null) {\n                for (final MessageDestinationMapping i : data) {\n                    all.add(i.jndiName);\n                    if (i.deploymentRoot.equals(deploymentRoot)) {\n                        thisDeployment.add(i.jndiName);\n                    }\n                }\n            }\n            if (all.size() > 1) {\n                return thisDeployment;\n            }\n            return all;\n        }\n    }", "code_tokens": ["public", "Set", "<", "String", ">", "resolveMessageDestination", "(", "final", "String", "messageDestName", ",", "final", "VirtualFile", "deploymentRoot", ")", "{", "if", "(", "messageDestName", ".", "contains", "(", "\"#\"", ")", ")", "{", "final", "String", "[", "]", "parts", "=", "messageDestName", ".", "split", "(", "\"#\"", ")", ";", "String", "path", "=", "parts", "[", "0", "]", ";", "if", "(", "!", "path", ".", "startsWith", "(", "\"../\"", ")", ")", "{", "path", "=", "\"../\"", "+", "path", ";", "}", "final", "VirtualFile", "virtualPath", "=", "deploymentRoot", ".", "getChild", "(", "path", ")", ";", "final", "String", "name", "=", "parts", "[", "1", "]", ";", "final", "Set", "<", "String", ">", "ret", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "final", "List", "<", "MessageDestinationMapping", ">", "data", "=", "messageDestinationJndiMapping", ".", "get", "(", "name", ")", ";", "if", "(", "data", "!=", "null", ")", "{", "for", "(", "final", "MessageDestinationMapping", "i", ":", "data", ")", "{", "//now we need to check the path", "if", "(", "virtualPath", ".", "equals", "(", "i", ".", "deploymentRoot", ")", ")", "{", "ret", ".", "add", "(", "i", ".", "jndiName", ")", ";", "}", "}", "}", "return", "ret", ";", "}", "else", "{", "final", "Set", "<", "String", ">", "all", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "final", "Set", "<", "String", ">", "thisDeployment", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "final", "List", "<", "MessageDestinationMapping", ">", "data", "=", "messageDestinationJndiMapping", ".", "get", "(", "messageDestName", ")", ";", "if", "(", "data", "!=", "null", ")", "{", "for", "(", "final", "MessageDestinationMapping", "i", ":", "data", ")", "{", "all", ".", "add", "(", "i", ".", "jndiName", ")", ";", "if", "(", "i", ".", "deploymentRoot", ".", "equals", "(", "deploymentRoot", ")", ")", "{", "thisDeployment", ".", "add", "(", "i", ".", "jndiName", ")", ";", "}", "}", "}", "if", "(", "all", ".", "size", "(", ")", ">", "1", ")", "{", "return", "thisDeployment", ";", "}", "return", "all", ";", "}", "}"], "docstring": "Resolves a message destination name into a JNDI name", "docstring_tokens": ["Resolves", "a", "message", "destination", "name", "into", "a", "JNDI", "name"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/EEApplicationDescription.java#L210-L248", "partition": "test", "index": 2838, "time": "2011-11-25 12:46:09"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/iiop/stub/DynamicStubFactoryFactory.java", "func_name": "DynamicStubFactoryFactory.makeStubClass", "original_string": "public static Class<?> makeStubClass(final Class<?> myClass) {\n        final String stubClassName = myClass + \"_Stub\";\n        ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        if (cl == null) {\n            cl = myClass.getClassLoader();\n        }\n        if (cl == null) {\n            throw EjbLogger.ROOT_LOGGER.couldNotFindClassLoaderForStub(stubClassName);\n        }\n        Class<?> theClass;\n        try {\n            theClass = cl.loadClass(stubClassName);\n        } catch (ClassNotFoundException e) {\n            try {\n                final ClassFile clazz = IIOPStubCompiler.compile(myClass, stubClassName);\n                theClass = clazz.define(cl, myClass.getProtectionDomain());\n            } catch (Throwable ex) {\n                //there is a possibility that another thread may have defined the same class in the meantime\n                try {\n                    theClass = cl.loadClass(stubClassName);\n                } catch (ClassNotFoundException e1) {\n                    EjbLogger.ROOT_LOGGER.dynamicStubCreationFailed(stubClassName, ex);\n                    throw ex;\n                }\n            }\n        }\n        return theClass;\n    }", "language": "java", "code": "public static Class<?> makeStubClass(final Class<?> myClass) {\n        final String stubClassName = myClass + \"_Stub\";\n        ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        if (cl == null) {\n            cl = myClass.getClassLoader();\n        }\n        if (cl == null) {\n            throw EjbLogger.ROOT_LOGGER.couldNotFindClassLoaderForStub(stubClassName);\n        }\n        Class<?> theClass;\n        try {\n            theClass = cl.loadClass(stubClassName);\n        } catch (ClassNotFoundException e) {\n            try {\n                final ClassFile clazz = IIOPStubCompiler.compile(myClass, stubClassName);\n                theClass = clazz.define(cl, myClass.getProtectionDomain());\n            } catch (Throwable ex) {\n                //there is a possibility that another thread may have defined the same class in the meantime\n                try {\n                    theClass = cl.loadClass(stubClassName);\n                } catch (ClassNotFoundException e1) {\n                    EjbLogger.ROOT_LOGGER.dynamicStubCreationFailed(stubClassName, ex);\n                    throw ex;\n                }\n            }\n        }\n        return theClass;\n    }", "code_tokens": ["public", "static", "Class", "<", "?", ">", "makeStubClass", "(", "final", "Class", "<", "?", ">", "myClass", ")", "{", "final", "String", "stubClassName", "=", "myClass", "+", "\"_Stub\"", ";", "ClassLoader", "cl", "=", "WildFlySecurityManager", ".", "getCurrentContextClassLoaderPrivileged", "(", ")", ";", "if", "(", "cl", "==", "null", ")", "{", "cl", "=", "myClass", ".", "getClassLoader", "(", ")", ";", "}", "if", "(", "cl", "==", "null", ")", "{", "throw", "EjbLogger", ".", "ROOT_LOGGER", ".", "couldNotFindClassLoaderForStub", "(", "stubClassName", ")", ";", "}", "Class", "<", "?", ">", "theClass", ";", "try", "{", "theClass", "=", "cl", ".", "loadClass", "(", "stubClassName", ")", ";", "}", "catch", "(", "ClassNotFoundException", "e", ")", "{", "try", "{", "final", "ClassFile", "clazz", "=", "IIOPStubCompiler", ".", "compile", "(", "myClass", ",", "stubClassName", ")", ";", "theClass", "=", "clazz", ".", "define", "(", "cl", ",", "myClass", ".", "getProtectionDomain", "(", ")", ")", ";", "}", "catch", "(", "Throwable", "ex", ")", "{", "//there is a possibility that another thread may have defined the same class in the meantime", "try", "{", "theClass", "=", "cl", ".", "loadClass", "(", "stubClassName", ")", ";", "}", "catch", "(", "ClassNotFoundException", "e1", ")", "{", "EjbLogger", ".", "ROOT_LOGGER", ".", "dynamicStubCreationFailed", "(", "stubClassName", ",", "ex", ")", ";", "throw", "ex", ";", "}", "}", "}", "return", "theClass", ";", "}"], "docstring": "Makes a dynamic stub class, if it does not already exist.\n@param myClass The class to create a stub for\n@return The dynamic stub class", "docstring_tokens": ["Makes", "a", "dynamic", "stub", "class", "if", "it", "does", "not", "already", "exist", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/iiop/stub/DynamicStubFactoryFactory.java#L49-L76", "partition": "test", "index": 2726, "time": "2011-11-26 12:17:49"}
{"repo": "wildfly/wildfly", "path": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/tm/TxServerInterceptor.java", "func_name": "TxServerInterceptor.getCurrentTransaction", "original_string": "public static Transaction getCurrentTransaction() {\n        Transaction tx = null;\n        if (piCurrent != null) {\n            // A non-null piCurrent means that a TxServerInterceptor was\n            // installed: check if there is a transaction propagation context\n            try {\n                Any any = piCurrent.get_slot(slotId);\n                if (any.type().kind().value() != TCKind._tk_null) {\n                    // Yes, there is a TPC: add the foreign transaction marker\n                    tx = ForeignTransaction.INSTANCE;\n                }\n            } catch (InvalidSlot e) {\n                throw IIOPLogger.ROOT_LOGGER.errorGettingSlotInTxInterceptor(e);\n            }\n\n        }\n        return tx;\n    }", "language": "java", "code": "public static Transaction getCurrentTransaction() {\n        Transaction tx = null;\n        if (piCurrent != null) {\n            // A non-null piCurrent means that a TxServerInterceptor was\n            // installed: check if there is a transaction propagation context\n            try {\n                Any any = piCurrent.get_slot(slotId);\n                if (any.type().kind().value() != TCKind._tk_null) {\n                    // Yes, there is a TPC: add the foreign transaction marker\n                    tx = ForeignTransaction.INSTANCE;\n                }\n            } catch (InvalidSlot e) {\n                throw IIOPLogger.ROOT_LOGGER.errorGettingSlotInTxInterceptor(e);\n            }\n\n        }\n        return tx;\n    }", "code_tokens": ["public", "static", "Transaction", "getCurrentTransaction", "(", ")", "{", "Transaction", "tx", "=", "null", ";", "if", "(", "piCurrent", "!=", "null", ")", "{", "// A non-null piCurrent means that a TxServerInterceptor was", "// installed: check if there is a transaction propagation context", "try", "{", "Any", "any", "=", "piCurrent", ".", "get_slot", "(", "slotId", ")", ";", "if", "(", "any", ".", "type", "(", ")", ".", "kind", "(", ")", ".", "value", "(", ")", "!=", "TCKind", ".", "_tk_null", ")", "{", "// Yes, there is a TPC: add the foreign transaction marker", "tx", "=", "ForeignTransaction", ".", "INSTANCE", ";", "}", "}", "catch", "(", "InvalidSlot", "e", ")", "{", "throw", "IIOPLogger", ".", "ROOT_LOGGER", ".", "errorGettingSlotInTxInterceptor", "(", "e", ")", ";", "}", "}", "return", "tx", ";", "}"], "docstring": "Returns the transaction associated with the transaction propagation\ncontext that arrived in the current IIOP request.", "docstring_tokens": ["Returns", "the", "transaction", "associated", "with", "the", "transaction", "propagation", "context", "that", "arrived", "in", "the", "current", "IIOP", "request", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/tm/TxServerInterceptor.java#L79-L96", "partition": "test", "index": 2468, "time": "2011-12-05 12:26:12"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java", "func_name": "PersistenceUnitServiceHandler.savePerDeploymentSharedPersistenceProviderAdaptor", "original_string": "private static PersistenceProviderAdaptor savePerDeploymentSharedPersistenceProviderAdaptor(DeploymentUnit deploymentUnit, String adaptorModule, PersistenceProviderAdaptor adaptor, PersistenceProvider provider) {\n        if (deploymentUnit.getParent() != null) {\n            deploymentUnit = deploymentUnit.getParent();\n        }\n        synchronized (deploymentUnit) {\n            Map<String,PersistenceProviderAdaptor> map = deploymentUnit.getAttachment(providerAdaptorMapKey);\n            String key;\n\n            if (adaptorModule != null) {\n                key = adaptorModule;  // handle legacy adapter module\n            }\n            else {\n                key = provider.getClass().getName();\n            }\n            PersistenceProviderAdaptor current = map.get(key);\n\n            // saved if not already set by another thread\n            if (current == null) {\n                map.put(key, adaptor);\n                current = adaptor;\n            }\n            return current;\n        }\n    }", "language": "java", "code": "private static PersistenceProviderAdaptor savePerDeploymentSharedPersistenceProviderAdaptor(DeploymentUnit deploymentUnit, String adaptorModule, PersistenceProviderAdaptor adaptor, PersistenceProvider provider) {\n        if (deploymentUnit.getParent() != null) {\n            deploymentUnit = deploymentUnit.getParent();\n        }\n        synchronized (deploymentUnit) {\n            Map<String,PersistenceProviderAdaptor> map = deploymentUnit.getAttachment(providerAdaptorMapKey);\n            String key;\n\n            if (adaptorModule != null) {\n                key = adaptorModule;  // handle legacy adapter module\n            }\n            else {\n                key = provider.getClass().getName();\n            }\n            PersistenceProviderAdaptor current = map.get(key);\n\n            // saved if not already set by another thread\n            if (current == null) {\n                map.put(key, adaptor);\n                current = adaptor;\n            }\n            return current;\n        }\n    }", "code_tokens": ["private", "static", "PersistenceProviderAdaptor", "savePerDeploymentSharedPersistenceProviderAdaptor", "(", "DeploymentUnit", "deploymentUnit", ",", "String", "adaptorModule", ",", "PersistenceProviderAdaptor", "adaptor", ",", "PersistenceProvider", "provider", ")", "{", "if", "(", "deploymentUnit", ".", "getParent", "(", ")", "!=", "null", ")", "{", "deploymentUnit", "=", "deploymentUnit", ".", "getParent", "(", ")", ";", "}", "synchronized", "(", "deploymentUnit", ")", "{", "Map", "<", "String", ",", "PersistenceProviderAdaptor", ">", "map", "=", "deploymentUnit", ".", "getAttachment", "(", "providerAdaptorMapKey", ")", ";", "String", "key", ";", "if", "(", "adaptorModule", "!=", "null", ")", "{", "key", "=", "adaptorModule", ";", "// handle legacy adapter module", "}", "else", "{", "key", "=", "provider", ".", "getClass", "(", ")", ".", "getName", "(", ")", ";", "}", "PersistenceProviderAdaptor", "current", "=", "map", ".", "get", "(", "key", ")", ";", "// saved if not already set by another thread", "if", "(", "current", "==", "null", ")", "{", "map", ".", "put", "(", "key", ",", "adaptor", ")", ";", "current", "=", "adaptor", ";", "}", "return", "current", ";", "}", "}"], "docstring": "Will save the PersistenceProviderAdaptor at the top level application deployment unit level for sharing with other persistence units\n\n@param deploymentUnit\n@param adaptorModule\n@param adaptor\n@param provider\n@return the application level shared PersistenceProviderAdaptor (which may of been set by a different thread)", "docstring_tokens": ["Will", "save", "the", "PersistenceProviderAdaptor", "at", "the", "top", "level", "application", "deployment", "unit", "level", "for", "sharing", "with", "other", "persistence", "units"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceUnitServiceHandler.java#L864-L887", "partition": "test", "index": 2736, "time": "2011-12-06 09:30:50"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/MethodIntfHelper.java", "func_name": "MethodIntfHelper.of", "original_string": "public static MethodIntf of(final InterceptorContext invocation) {\n        //for timer invocations there is no view, so the methodInf is attached directly\n        //to the context. Otherwise we retrieve it from the invoked view\n        MethodIntf methodIntf = invocation.getPrivateData(MethodIntf.class);\n        if (methodIntf == null) {\n            final ComponentView componentView = invocation.getPrivateData(ComponentView.class);\n            if (componentView != null) {\n                methodIntf = componentView.getPrivateData(MethodIntf.class);\n            } else {\n                methodIntf = MethodIntf.BEAN;\n            }\n        }\n        return methodIntf;\n    }", "language": "java", "code": "public static MethodIntf of(final InterceptorContext invocation) {\n        //for timer invocations there is no view, so the methodInf is attached directly\n        //to the context. Otherwise we retrieve it from the invoked view\n        MethodIntf methodIntf = invocation.getPrivateData(MethodIntf.class);\n        if (methodIntf == null) {\n            final ComponentView componentView = invocation.getPrivateData(ComponentView.class);\n            if (componentView != null) {\n                methodIntf = componentView.getPrivateData(MethodIntf.class);\n            } else {\n                methodIntf = MethodIntf.BEAN;\n            }\n        }\n        return methodIntf;\n    }", "code_tokens": ["public", "static", "MethodIntf", "of", "(", "final", "InterceptorContext", "invocation", ")", "{", "//for timer invocations there is no view, so the methodInf is attached directly", "//to the context. Otherwise we retrieve it from the invoked view", "MethodIntf", "methodIntf", "=", "invocation", ".", "getPrivateData", "(", "MethodIntf", ".", "class", ")", ";", "if", "(", "methodIntf", "==", "null", ")", "{", "final", "ComponentView", "componentView", "=", "invocation", ".", "getPrivateData", "(", "ComponentView", ".", "class", ")", ";", "if", "(", "componentView", "!=", "null", ")", "{", "methodIntf", "=", "componentView", ".", "getPrivateData", "(", "MethodIntf", ".", "class", ")", ";", "}", "else", "{", "methodIntf", "=", "MethodIntf", ".", "BEAN", ";", "}", "}", "return", "methodIntf", ";", "}"], "docstring": "centralize this hack", "docstring_tokens": ["centralize", "this", "hack"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/MethodIntfHelper.java#L32-L45", "partition": "test", "index": 2763, "time": "2011-12-09 17:11:48"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/iiop/EjbIIOPService.java", "func_name": "EjbIIOPService.handleForLocator", "original_string": "public Object handleForLocator(final EJBLocator<?> locator) {\n        final org.omg.CORBA.Object reference = referenceForLocator(locator);\n        if(locator instanceof EJBHomeLocator) {\n            return new HomeHandleImplIIOP(orb.getValue().object_to_string(reference));\n        }\n        return new HandleImplIIOP(orb.getValue().object_to_string(reference));\n    }", "language": "java", "code": "public Object handleForLocator(final EJBLocator<?> locator) {\n        final org.omg.CORBA.Object reference = referenceForLocator(locator);\n        if(locator instanceof EJBHomeLocator) {\n            return new HomeHandleImplIIOP(orb.getValue().object_to_string(reference));\n        }\n        return new HandleImplIIOP(orb.getValue().object_to_string(reference));\n    }", "code_tokens": ["public", "Object", "handleForLocator", "(", "final", "EJBLocator", "<", "?", ">", "locator", ")", "{", "final", "org", ".", "omg", ".", "CORBA", ".", "Object", "reference", "=", "referenceForLocator", "(", "locator", ")", ";", "if", "(", "locator", "instanceof", "EJBHomeLocator", ")", "{", "return", "new", "HomeHandleImplIIOP", "(", "orb", ".", "getValue", "(", ")", ".", "object_to_string", "(", "reference", ")", ")", ";", "}", "return", "new", "HandleImplIIOP", "(", "orb", ".", "getValue", "(", ")", ".", "object_to_string", "(", "reference", ")", ")", ";", "}"], "docstring": "Gets a handle for the given ejb locator.\n\n@param locator The locator to get the handle for\n@return The {@link org.jboss.ejb.client.EJBHandle} or {@link org.jboss.ejb.client.EJBHomeHandle}", "docstring_tokens": ["Gets", "a", "handle", "for", "the", "given", "ejb", "locator", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/iiop/EjbIIOPService.java#L487-L493", "partition": "test", "index": 2875, "time": "2011-12-16 10:22:35"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/filestore/FileTimerPersistence.java", "func_name": "FileTimerPersistence.mostRecentEntityVersion", "original_string": "private TimerImpl mostRecentEntityVersion(final TimerImpl timerImpl) {\n        try {\n            final int status = ContextTransactionManager.getInstance().getStatus();\n            if (status == Status.STATUS_UNKNOWN ||\n                    status == Status.STATUS_NO_TRANSACTION) {\n                return timerImpl;\n            }\n            final String key = timerTransactionKey(timerImpl);\n            TimerImpl existing = (TimerImpl) transactionSynchronizationRegistry.getValue().getResource(key);\n            return existing != null ? existing : timerImpl;\n        } catch (SystemException e) {\n            throw new RuntimeException(e);\n        }\n    }", "language": "java", "code": "private TimerImpl mostRecentEntityVersion(final TimerImpl timerImpl) {\n        try {\n            final int status = ContextTransactionManager.getInstance().getStatus();\n            if (status == Status.STATUS_UNKNOWN ||\n                    status == Status.STATUS_NO_TRANSACTION) {\n                return timerImpl;\n            }\n            final String key = timerTransactionKey(timerImpl);\n            TimerImpl existing = (TimerImpl) transactionSynchronizationRegistry.getValue().getResource(key);\n            return existing != null ? existing : timerImpl;\n        } catch (SystemException e) {\n            throw new RuntimeException(e);\n        }\n    }", "code_tokens": ["private", "TimerImpl", "mostRecentEntityVersion", "(", "final", "TimerImpl", "timerImpl", ")", "{", "try", "{", "final", "int", "status", "=", "ContextTransactionManager", ".", "getInstance", "(", ")", ".", "getStatus", "(", ")", ";", "if", "(", "status", "==", "Status", ".", "STATUS_UNKNOWN", "||", "status", "==", "Status", ".", "STATUS_NO_TRANSACTION", ")", "{", "return", "timerImpl", ";", "}", "final", "String", "key", "=", "timerTransactionKey", "(", "timerImpl", ")", ";", "TimerImpl", "existing", "=", "(", "TimerImpl", ")", "transactionSynchronizationRegistry", ".", "getValue", "(", ")", ".", "getResource", "(", "key", ")", ";", "return", "existing", "!=", "null", "?", "existing", ":", "timerImpl", ";", "}", "catch", "(", "SystemException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}"], "docstring": "Returns either the loaded entity or the most recent version of the entity that has\nbeen persisted in this transaction.", "docstring_tokens": ["Returns", "either", "the", "loaded", "entity", "or", "the", "most", "recent", "version", "of", "the", "entity", "that", "has", "been", "persisted", "in", "this", "transaction", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/filestore/FileTimerPersistence.java#L300-L313", "partition": "test", "index": 2640, "time": "2011-12-16 15:44:30"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/allowedmethods/AllowedMethodsInformation.java", "func_name": "AllowedMethodsInformation.checkAllowed", "original_string": "public static void checkAllowed(final MethodType methodType) {\n\n        final InterceptorContext context = CurrentInvocationContext.get();\n        if (context == null) {\n            return;\n        }\n\n        final Component component = context.getPrivateData(Component.class);\n        if (!(component instanceof EJBComponent)) {\n            return;\n        }\n        final InvocationType invocationType = context.getPrivateData(InvocationType.class);\n\n        ((EJBComponent) component).getAllowedMethodsInformation().realCheckPermission(methodType, invocationType);\n\n    }", "language": "java", "code": "public static void checkAllowed(final MethodType methodType) {\n\n        final InterceptorContext context = CurrentInvocationContext.get();\n        if (context == null) {\n            return;\n        }\n\n        final Component component = context.getPrivateData(Component.class);\n        if (!(component instanceof EJBComponent)) {\n            return;\n        }\n        final InvocationType invocationType = context.getPrivateData(InvocationType.class);\n\n        ((EJBComponent) component).getAllowedMethodsInformation().realCheckPermission(methodType, invocationType);\n\n    }", "code_tokens": ["public", "static", "void", "checkAllowed", "(", "final", "MethodType", "methodType", ")", "{", "final", "InterceptorContext", "context", "=", "CurrentInvocationContext", ".", "get", "(", ")", ";", "if", "(", "context", "==", "null", ")", "{", "return", ";", "}", "final", "Component", "component", "=", "context", ".", "getPrivateData", "(", "Component", ".", "class", ")", ";", "if", "(", "!", "(", "component", "instanceof", "EJBComponent", ")", ")", "{", "return", ";", "}", "final", "InvocationType", "invocationType", "=", "context", ".", "getPrivateData", "(", "InvocationType", ".", "class", ")", ";", "(", "(", "EJBComponent", ")", "component", ")", ".", "getAllowedMethodsInformation", "(", ")", ".", "realCheckPermission", "(", "methodType", ",", "invocationType", ")", ";", "}"], "docstring": "Checks that the current method", "docstring_tokens": ["Checks", "that", "the", "current", "method"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/allowedmethods/AllowedMethodsInformation.java#L99-L114", "partition": "test", "index": 2859, "time": "2011-12-24 08:53:55"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/allowedmethods/AllowedMethodsInformation.java", "func_name": "AllowedMethodsInformation.checkTransactionSync", "original_string": "private void checkTransactionSync(MethodType methodType) {\n        //first we have to check the synchronization status\n        //as the sync is not affected by the current invocation\n        final CurrentSynchronizationCallback.CallbackType currentSync = CurrentSynchronizationCallback.get();\n        if (currentSync != null) {\n            if (deniedSyncMethods.contains(new DeniedSyncMethodKey(currentSync, methodType))) {\n                throwException(methodType, currentSync);\n            }\n        }\n    }", "language": "java", "code": "private void checkTransactionSync(MethodType methodType) {\n        //first we have to check the synchronization status\n        //as the sync is not affected by the current invocation\n        final CurrentSynchronizationCallback.CallbackType currentSync = CurrentSynchronizationCallback.get();\n        if (currentSync != null) {\n            if (deniedSyncMethods.contains(new DeniedSyncMethodKey(currentSync, methodType))) {\n                throwException(methodType, currentSync);\n            }\n        }\n    }", "code_tokens": ["private", "void", "checkTransactionSync", "(", "MethodType", "methodType", ")", "{", "//first we have to check the synchronization status", "//as the sync is not affected by the current invocation", "final", "CurrentSynchronizationCallback", ".", "CallbackType", "currentSync", "=", "CurrentSynchronizationCallback", ".", "get", "(", ")", ";", "if", "(", "currentSync", "!=", "null", ")", "{", "if", "(", "deniedSyncMethods", ".", "contains", "(", "new", "DeniedSyncMethodKey", "(", "currentSync", ",", "methodType", ")", ")", ")", "{", "throwException", "(", "methodType", ",", "currentSync", ")", ";", "}", "}", "}"], "docstring": "transaction sync is not affected by the current invocation, as multiple ejb methods may be invoked from afterCompletion", "docstring_tokens": ["transaction", "sync", "is", "not", "affected", "by", "the", "current", "invocation", "as", "multiple", "ejb", "methods", "may", "be", "invoked", "from", "afterCompletion"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/allowedmethods/AllowedMethodsInformation.java#L119-L128", "partition": "test", "index": 2860, "time": "2011-12-24 08:53:55"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.addPrePassivateInterceptor", "original_string": "public void addPrePassivateInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        prePassivateInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "language": "java", "code": "public void addPrePassivateInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        prePassivateInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "code_tokens": ["public", "void", "addPrePassivateInterceptor", "(", "InterceptorFactory", "interceptorFactory", ",", "int", "priority", ")", "{", "prePassivateInterceptors", ".", "add", "(", "Collections", ".", "singletonList", "(", "interceptorFactory", ")", ",", "priority", ")", ";", "}"], "docstring": "Adds a pre passivate interceptor\n\n@param interceptorFactory The interceptor to add\n@param priority           The priority", "docstring_tokens": ["Adds", "a", "pre", "passivate", "interceptor"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L433-L435", "partition": "test", "index": 2816, "time": "2011-12-30 11:51:55"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/jboss/as/naming/InitialContext.java", "func_name": "InitialContext.removeUrlContextFactory", "original_string": "public static synchronized void removeUrlContextFactory(final String scheme, ObjectFactory factory) {\n        Map<String, ObjectFactory> factories = new HashMap<String, ObjectFactory>(urlContextFactories);\n\n        ObjectFactory f = factories.get(scheme);\n        if (f == factory) {\n            factories.remove(scheme);\n            urlContextFactories = Collections.unmodifiableMap(factories);\n            return;\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }", "language": "java", "code": "public static synchronized void removeUrlContextFactory(final String scheme, ObjectFactory factory) {\n        Map<String, ObjectFactory> factories = new HashMap<String, ObjectFactory>(urlContextFactories);\n\n        ObjectFactory f = factories.get(scheme);\n        if (f == factory) {\n            factories.remove(scheme);\n            urlContextFactories = Collections.unmodifiableMap(factories);\n            return;\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }", "code_tokens": ["public", "static", "synchronized", "void", "removeUrlContextFactory", "(", "final", "String", "scheme", ",", "ObjectFactory", "factory", ")", "{", "Map", "<", "String", ",", "ObjectFactory", ">", "factories", "=", "new", "HashMap", "<", "String", ",", "ObjectFactory", ">", "(", "urlContextFactories", ")", ";", "ObjectFactory", "f", "=", "factories", ".", "get", "(", "scheme", ")", ";", "if", "(", "f", "==", "factory", ")", "{", "factories", ".", "remove", "(", "scheme", ")", ";", "urlContextFactories", "=", "Collections", ".", "unmodifiableMap", "(", "factories", ")", ";", "return", ";", "}", "else", "{", "throw", "new", "IllegalArgumentException", "(", ")", ";", "}", "}"], "docstring": "Remove an ObjectFactory from the map of registered ones. To make sure that not anybody can remove an\nObjectFactory both the scheme as well as the actual object factory itself need to be supplied. So you\ncan only remove the factory if you have the factory object.\n@param scheme The URL scheme for which the handler is registered.\n@param factory The factory object associated with the scheme\n@throws IllegalArgumentException if the requested scheme/factory combination is not registered.", "docstring_tokens": ["Remove", "an", "ObjectFactory", "from", "the", "map", "of", "registered", "ones", ".", "To", "make", "sure", "that", "not", "anybody", "can", "remove", "an", "ObjectFactory", "both", "the", "scheme", "as", "well", "as", "the", "actual", "object", "factory", "itself", "need", "to", "be", "supplied", ".", "So", "you", "can", "only", "remove", "the", "factory", "if", "you", "have", "the", "factory", "object", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/jboss/as/naming/InitialContext.java#L77-L88", "partition": "test", "index": 2499, "time": "2012-01-24 09:58:12"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/CreatedEntityManagers.java", "func_name": "CreatedEntityManagers.getDeferredEntityManagers", "original_string": "public static ExtendedEntityManager[] getDeferredEntityManagers() {\n        List<ExtendedEntityManager> store = deferToPostConstruct.get();\n        try {\n            if(store.isEmpty()) {\n                return EMPTY;\n            } else {\n                return store.toArray(new ExtendedEntityManager[store.size()]);\n            }\n        } finally {\n            store.clear();\n        }\n    }", "language": "java", "code": "public static ExtendedEntityManager[] getDeferredEntityManagers() {\n        List<ExtendedEntityManager> store = deferToPostConstruct.get();\n        try {\n            if(store.isEmpty()) {\n                return EMPTY;\n            } else {\n                return store.toArray(new ExtendedEntityManager[store.size()]);\n            }\n        } finally {\n            store.clear();\n        }\n    }", "code_tokens": ["public", "static", "ExtendedEntityManager", "[", "]", "getDeferredEntityManagers", "(", ")", "{", "List", "<", "ExtendedEntityManager", ">", "store", "=", "deferToPostConstruct", ".", "get", "(", ")", ";", "try", "{", "if", "(", "store", ".", "isEmpty", "(", ")", ")", "{", "return", "EMPTY", ";", "}", "else", "{", "return", "store", ".", "toArray", "(", "new", "ExtendedEntityManager", "[", "store", ".", "size", "(", ")", "]", ")", ";", "}", "}", "finally", "{", "store", ".", "clear", "(", ")", ";", "}", "}"], "docstring": "Called by postconstruct interceptor", "docstring_tokens": ["Called", "by", "postconstruct", "interceptor"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/CreatedEntityManagers.java#L66-L77", "partition": "test", "index": 2606, "time": "2012-01-28 01:19:38"}
{"repo": "wildfly/wildfly", "path": "mail/src/main/java/org/jboss/as/mail/extension/MailSessionAdd.java", "func_name": "MailSessionAdd.getJndiName", "original_string": "static String getJndiName(final ModelNode modelNode, OperationContext context) throws OperationFailedException {\n        final String rawJndiName = MailSessionDefinition.JNDI_NAME.resolveModelAttribute(context, modelNode).asString();\n        return getJndiName(rawJndiName);\n    }", "language": "java", "code": "static String getJndiName(final ModelNode modelNode, OperationContext context) throws OperationFailedException {\n        final String rawJndiName = MailSessionDefinition.JNDI_NAME.resolveModelAttribute(context, modelNode).asString();\n        return getJndiName(rawJndiName);\n    }", "code_tokens": ["static", "String", "getJndiName", "(", "final", "ModelNode", "modelNode", ",", "OperationContext", "context", ")", "throws", "OperationFailedException", "{", "final", "String", "rawJndiName", "=", "MailSessionDefinition", ".", "JNDI_NAME", ".", "resolveModelAttribute", "(", "context", ",", "modelNode", ")", ".", "asString", "(", ")", ";", "return", "getJndiName", "(", "rawJndiName", ")", ";", "}"], "docstring": "Extracts the raw JNDI_NAME value from the given model node, and depending on the value and\nthe value of any USE_JAVA_CONTEXT child node, converts the raw name into a compliant jndi name.\n\n@param modelNode the model node; either an operation or the model behind a mail session resource\n@return the compliant jndi name", "docstring_tokens": ["Extracts", "the", "raw", "JNDI_NAME", "value", "from", "the", "given", "model", "node", "and", "depending", "on", "the", "value", "and", "the", "value", "of", "any", "USE_JAVA_CONTEXT", "child", "node", "converts", "the", "raw", "name", "into", "a", "compliant", "jndi", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/mail/src/main/java/org/jboss/as/mail/extension/MailSessionAdd.java#L181-L184", "partition": "test", "index": 2464, "time": "2012-02-15 02:25:43"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderResolverImpl.java", "func_name": "PersistenceProviderResolverImpl.findParentModuleCl", "original_string": "private ClassLoader findParentModuleCl(ClassLoader classLoader) {\n        ClassLoader c = classLoader;\n        while (c != null && !(c instanceof ModuleClassLoader)) {\n            c = c.getParent();\n        }\n        return c;\n    }", "language": "java", "code": "private ClassLoader findParentModuleCl(ClassLoader classLoader) {\n        ClassLoader c = classLoader;\n        while (c != null && !(c instanceof ModuleClassLoader)) {\n            c = c.getParent();\n        }\n        return c;\n    }", "code_tokens": ["private", "ClassLoader", "findParentModuleCl", "(", "ClassLoader", "classLoader", ")", "{", "ClassLoader", "c", "=", "classLoader", ";", "while", "(", "c", "!=", "null", "&&", "!", "(", "c", "instanceof", "ModuleClassLoader", ")", ")", "{", "c", "=", "c", ".", "getParent", "(", ")", ";", "}", "return", "c", ";", "}"], "docstring": "If a custom CL is in use we want to get the module CL it delegates to\n@param classLoader The current CL\n@returnThe corresponding module CL", "docstring_tokens": ["If", "a", "custom", "CL", "is", "in", "use", "we", "want", "to", "get", "the", "module", "CL", "it", "delegates", "to"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderResolverImpl.java#L159-L165", "partition": "test", "index": 2731, "time": "2012-02-16 12:00:39"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderResolverImpl.java", "func_name": "PersistenceProviderResolverImpl.addDeploymentSpecificPersistenceProvider", "original_string": "public void addDeploymentSpecificPersistenceProvider(PersistenceProvider persistenceProvider, Set<ClassLoader> deploymentClassLoaders) {\n\n        synchronized(persistenceProviderPerClassLoader) {\n\n            for (ClassLoader deploymentClassLoader: deploymentClassLoaders) {\n                List<Class<? extends PersistenceProvider>> list = persistenceProviderPerClassLoader.get(deploymentClassLoader);\n                ROOT_LOGGER.tracef(\"getting persistence provider list (%s) for deployment (%s)\", list, deploymentClassLoader );\n                if (list == null) {\n                    list = new ArrayList<>();\n                    persistenceProviderPerClassLoader.put(deploymentClassLoader, list);\n                    ROOT_LOGGER.tracef(\"saving new persistence provider list (%s) for deployment (%s)\", list, deploymentClassLoader );\n                }\n                list.add(persistenceProvider.getClass());\n                ROOT_LOGGER.tracef(\"added new persistence provider (%s) to provider list (%s)\", persistenceProvider.getClass().getName(), list);\n            }\n        }\n    }", "language": "java", "code": "public void addDeploymentSpecificPersistenceProvider(PersistenceProvider persistenceProvider, Set<ClassLoader> deploymentClassLoaders) {\n\n        synchronized(persistenceProviderPerClassLoader) {\n\n            for (ClassLoader deploymentClassLoader: deploymentClassLoaders) {\n                List<Class<? extends PersistenceProvider>> list = persistenceProviderPerClassLoader.get(deploymentClassLoader);\n                ROOT_LOGGER.tracef(\"getting persistence provider list (%s) for deployment (%s)\", list, deploymentClassLoader );\n                if (list == null) {\n                    list = new ArrayList<>();\n                    persistenceProviderPerClassLoader.put(deploymentClassLoader, list);\n                    ROOT_LOGGER.tracef(\"saving new persistence provider list (%s) for deployment (%s)\", list, deploymentClassLoader );\n                }\n                list.add(persistenceProvider.getClass());\n                ROOT_LOGGER.tracef(\"added new persistence provider (%s) to provider list (%s)\", persistenceProvider.getClass().getName(), list);\n            }\n        }\n    }", "code_tokens": ["public", "void", "addDeploymentSpecificPersistenceProvider", "(", "PersistenceProvider", "persistenceProvider", ",", "Set", "<", "ClassLoader", ">", "deploymentClassLoaders", ")", "{", "synchronized", "(", "persistenceProviderPerClassLoader", ")", "{", "for", "(", "ClassLoader", "deploymentClassLoader", ":", "deploymentClassLoaders", ")", "{", "List", "<", "Class", "<", "?", "extends", "PersistenceProvider", ">", ">", "list", "=", "persistenceProviderPerClassLoader", ".", "get", "(", "deploymentClassLoader", ")", ";", "ROOT_LOGGER", ".", "tracef", "(", "\"getting persistence provider list (%s) for deployment (%s)\"", ",", "list", ",", "deploymentClassLoader", ")", ";", "if", "(", "list", "==", "null", ")", "{", "list", "=", "new", "ArrayList", "<>", "(", ")", ";", "persistenceProviderPerClassLoader", ".", "put", "(", "deploymentClassLoader", ",", "list", ")", ";", "ROOT_LOGGER", ".", "tracef", "(", "\"saving new persistence provider list (%s) for deployment (%s)\"", ",", "list", ",", "deploymentClassLoader", ")", ";", "}", "list", ".", "add", "(", "persistenceProvider", ".", "getClass", "(", ")", ")", ";", "ROOT_LOGGER", ".", "tracef", "(", "\"added new persistence provider (%s) to provider list (%s)\"", ",", "persistenceProvider", ".", "getClass", "(", ")", ".", "getName", "(", ")", ",", "list", ")", ";", "}", "}", "}"], "docstring": "Set at application deployment time to the persistence providers packaged in the application\n\n@param persistenceProvider\n@param deploymentClassLoaders", "docstring_tokens": ["Set", "at", "application", "deployment", "time", "to", "the", "persistence", "providers", "packaged", "in", "the", "application"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/persistenceprovider/PersistenceProviderResolverImpl.java#L136-L152", "partition": "test", "index": 2730, "time": "2012-02-16 12:00:39"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceProviderHandler.java", "func_name": "PersistenceProviderHandler.allDeploymentModuleClassLoaders", "original_string": "private static Set<ClassLoader> allDeploymentModuleClassLoaders(DeploymentUnit deploymentUnit) {\n        Set<ClassLoader> deploymentClassLoaders = new HashSet<ClassLoader>();\n        final DeploymentUnit topDeploymentUnit = DeploymentUtils.getTopDeploymentUnit(deploymentUnit);\n        final Module toplevelModule = topDeploymentUnit.getAttachment(Attachments.MODULE);\n        if (toplevelModule != null) {\n            deploymentClassLoaders.add(toplevelModule.getClassLoader());\n            final List<DeploymentUnit> subDeployments = topDeploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS);\n            for (DeploymentUnit subDeploymentUnit: subDeployments) {\n                final Module subDeploymentModule = subDeploymentUnit.getAttachment(Attachments.MODULE);\n                if (subDeploymentModule != null) {\n                    deploymentClassLoaders.add(subDeploymentModule.getClassLoader());\n                }\n            }\n        }\n        return deploymentClassLoaders;\n    }", "language": "java", "code": "private static Set<ClassLoader> allDeploymentModuleClassLoaders(DeploymentUnit deploymentUnit) {\n        Set<ClassLoader> deploymentClassLoaders = new HashSet<ClassLoader>();\n        final DeploymentUnit topDeploymentUnit = DeploymentUtils.getTopDeploymentUnit(deploymentUnit);\n        final Module toplevelModule = topDeploymentUnit.getAttachment(Attachments.MODULE);\n        if (toplevelModule != null) {\n            deploymentClassLoaders.add(toplevelModule.getClassLoader());\n            final List<DeploymentUnit> subDeployments = topDeploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS);\n            for (DeploymentUnit subDeploymentUnit: subDeployments) {\n                final Module subDeploymentModule = subDeploymentUnit.getAttachment(Attachments.MODULE);\n                if (subDeploymentModule != null) {\n                    deploymentClassLoaders.add(subDeploymentModule.getClassLoader());\n                }\n            }\n        }\n        return deploymentClassLoaders;\n    }", "code_tokens": ["private", "static", "Set", "<", "ClassLoader", ">", "allDeploymentModuleClassLoaders", "(", "DeploymentUnit", "deploymentUnit", ")", "{", "Set", "<", "ClassLoader", ">", "deploymentClassLoaders", "=", "new", "HashSet", "<", "ClassLoader", ">", "(", ")", ";", "final", "DeploymentUnit", "topDeploymentUnit", "=", "DeploymentUtils", ".", "getTopDeploymentUnit", "(", "deploymentUnit", ")", ";", "final", "Module", "toplevelModule", "=", "topDeploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE", ")", ";", "if", "(", "toplevelModule", "!=", "null", ")", "{", "deploymentClassLoaders", ".", "add", "(", "toplevelModule", ".", "getClassLoader", "(", ")", ")", ";", "final", "List", "<", "DeploymentUnit", ">", "subDeployments", "=", "topDeploymentUnit", ".", "getAttachmentList", "(", "Attachments", ".", "SUB_DEPLOYMENTS", ")", ";", "for", "(", "DeploymentUnit", "subDeploymentUnit", ":", "subDeployments", ")", "{", "final", "Module", "subDeploymentModule", "=", "subDeploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE", ")", ";", "if", "(", "subDeploymentModule", "!=", "null", ")", "{", "deploymentClassLoaders", ".", "add", "(", "subDeploymentModule", ".", "getClassLoader", "(", ")", ")", ";", "}", "}", "}", "return", "deploymentClassLoaders", ";", "}"], "docstring": "returns the toplevel deployment module classloader and all subdeployment classloaders\n\n@param deploymentUnit\n@return", "docstring_tokens": ["returns", "the", "toplevel", "deployment", "module", "classloader", "and", "all", "subdeployment", "classloaders"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/PersistenceProviderHandler.java#L137-L152", "partition": "test", "index": 2593, "time": "2012-02-16 12:00:39"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java", "func_name": "SFSBCallStack.currentSFSBCallStackInvocation", "original_string": "public static Map<String, ExtendedEntityManager> currentSFSBCallStackInvocation() {\n        ArrayList<Map<String, ExtendedEntityManager>> stack = CURRENT.get().invocationStack;\n        if ( stack != null && stack.size() > 0) {\n            return stack.get(stack.size() - 1);\n        }\n        return null;\n    }", "language": "java", "code": "public static Map<String, ExtendedEntityManager> currentSFSBCallStackInvocation() {\n        ArrayList<Map<String, ExtendedEntityManager>> stack = CURRENT.get().invocationStack;\n        if ( stack != null && stack.size() > 0) {\n            return stack.get(stack.size() - 1);\n        }\n        return null;\n    }", "code_tokens": ["public", "static", "Map", "<", "String", ",", "ExtendedEntityManager", ">", "currentSFSBCallStackInvocation", "(", ")", "{", "ArrayList", "<", "Map", "<", "String", ",", "ExtendedEntityManager", ">", ">", "stack", "=", "CURRENT", ".", "get", "(", ")", ".", "invocationStack", ";", "if", "(", "stack", "!=", "null", "&&", "stack", ".", "size", "(", ")", ">", "0", ")", "{", "return", "stack", ".", "get", "(", "stack", ".", "size", "(", ")", "-", "1", ")", ";", "}", "return", "null", ";", "}"], "docstring": "return for just the current entity manager invocation\n\n@return", "docstring_tokens": ["return", "for", "just", "the", "current", "entity", "manager", "invocation"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java#L113-L119", "partition": "test", "index": 2622, "time": "2012-02-22 19:15:52"}
{"repo": "wildfly/wildfly", "path": "transactions/src/main/java/org/jboss/as/txn/subsystem/LogStoreParticipantRecoveryHandler.java", "func_name": "LogStoreParticipantRecoveryHandler.refreshParticipant", "original_string": "void refreshParticipant(OperationContext context) {\n        context.addStep(refreshHandler, OperationContext.Stage.MODEL, true);\n    }", "language": "java", "code": "void refreshParticipant(OperationContext context) {\n        context.addStep(refreshHandler, OperationContext.Stage.MODEL, true);\n    }", "code_tokens": ["void", "refreshParticipant", "(", "OperationContext", "context", ")", "{", "context", ".", "addStep", "(", "refreshHandler", ",", "OperationContext", ".", "Stage", ".", "MODEL", ",", "true", ")", ";", "}"], "docstring": "refresh the attributes of this participant (the status attribute should have changed to PREPARED", "docstring_tokens": ["refresh", "the", "attributes", "of", "this", "participant", "(", "the", "status", "attribute", "should", "have", "changed", "to", "PREPARED"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/transactions/src/main/java/org/jboss/as/txn/subsystem/LogStoreParticipantRecoveryHandler.java#L37-L39", "partition": "test", "index": 2741, "time": "2012-02-28 16:06:37"}
{"repo": "wildfly/wildfly", "path": "xts/src/main/java/org/jboss/as/xts/XTSSubsystemParser.java", "func_name": "XTSSubsystemParser.parseXTSEnvironmentElement", "original_string": "private void parseXTSEnvironmentElement(XMLExtendedStreamReader reader, ModelNode subsystem) throws XMLStreamException {\n        processAttributes(reader, (index, attribute) -> {\n            final String value = reader.getAttributeValue(index);\n            switch (attribute) {\n                case URL:\n                    ENVIRONMENT_URL.parseAndSetParameter(value, subsystem, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, index);\n            }\n        });\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }", "language": "java", "code": "private void parseXTSEnvironmentElement(XMLExtendedStreamReader reader, ModelNode subsystem) throws XMLStreamException {\n        processAttributes(reader, (index, attribute) -> {\n            final String value = reader.getAttributeValue(index);\n            switch (attribute) {\n                case URL:\n                    ENVIRONMENT_URL.parseAndSetParameter(value, subsystem, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, index);\n            }\n        });\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }", "code_tokens": ["private", "void", "parseXTSEnvironmentElement", "(", "XMLExtendedStreamReader", "reader", ",", "ModelNode", "subsystem", ")", "throws", "XMLStreamException", "{", "processAttributes", "(", "reader", ",", "(", "index", ",", "attribute", ")", "->", "{", "final", "String", "value", "=", "reader", ".", "getAttributeValue", "(", "index", ")", ";", "switch", "(", "attribute", ")", "{", "case", "URL", ":", "ENVIRONMENT_URL", ".", "parseAndSetParameter", "(", "value", ",", "subsystem", ",", "reader", ")", ";", "break", ";", "default", ":", "throw", "ParseUtils", ".", "unexpectedAttribute", "(", "reader", ",", "index", ")", ";", "}", "}", ")", ";", "// Handle elements", "ParseUtils", ".", "requireNoContent", "(", "reader", ")", ";", "}"], "docstring": "Handle the xts-environment element\n\n\n@param reader\n@param subsystem\n@return ModelNode for the core-environment\n@throws javax.xml.stream.XMLStreamException", "docstring_tokens": ["Handle", "the", "xts", "-", "environment", "element"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/xts/src/main/java/org/jboss/as/xts/XTSSubsystemParser.java#L168-L181", "partition": "test", "index": 2756, "time": "2012-03-15 11:20:05"}
{"repo": "wildfly/wildfly", "path": "legacy/messaging/src/main/java/org/jboss/as/messaging/MessagingSubsystemParser.java", "func_name": "MessagingSubsystemParser.checkOnlyOneOfElements", "original_string": "protected static void checkOnlyOneOfElements(XMLExtendedStreamReader reader, Set<Element> seen, Element element1, Element element2) throws XMLStreamException {\n        if (!seen.contains(element1) && !seen.contains(element2)) {\n            throw new XMLStreamException(MessagingLogger.ROOT_LOGGER.required(element1.getLocalName(), element2.getLocalName()), reader.getLocation());\n        }\n        if (seen.contains(element1) && seen.contains(element2)) {\n            throw new XMLStreamException(MessagingLogger.ROOT_LOGGER.onlyOneRequired(element1.getLocalName(), element2.getLocalName()), reader.getLocation());\n        }\n    }", "language": "java", "code": "protected static void checkOnlyOneOfElements(XMLExtendedStreamReader reader, Set<Element> seen, Element element1, Element element2) throws XMLStreamException {\n        if (!seen.contains(element1) && !seen.contains(element2)) {\n            throw new XMLStreamException(MessagingLogger.ROOT_LOGGER.required(element1.getLocalName(), element2.getLocalName()), reader.getLocation());\n        }\n        if (seen.contains(element1) && seen.contains(element2)) {\n            throw new XMLStreamException(MessagingLogger.ROOT_LOGGER.onlyOneRequired(element1.getLocalName(), element2.getLocalName()), reader.getLocation());\n        }\n    }", "code_tokens": ["protected", "static", "void", "checkOnlyOneOfElements", "(", "XMLExtendedStreamReader", "reader", ",", "Set", "<", "Element", ">", "seen", ",", "Element", "element1", ",", "Element", "element2", ")", "throws", "XMLStreamException", "{", "if", "(", "!", "seen", ".", "contains", "(", "element1", ")", "&&", "!", "seen", ".", "contains", "(", "element2", ")", ")", "{", "throw", "new", "XMLStreamException", "(", "MessagingLogger", ".", "ROOT_LOGGER", ".", "required", "(", "element1", ".", "getLocalName", "(", ")", ",", "element2", ".", "getLocalName", "(", ")", ")", ",", "reader", ".", "getLocation", "(", ")", ")", ";", "}", "if", "(", "seen", ".", "contains", "(", "element1", ")", "&&", "seen", ".", "contains", "(", "element2", ")", ")", "{", "throw", "new", "XMLStreamException", "(", "MessagingLogger", ".", "ROOT_LOGGER", ".", "onlyOneRequired", "(", "element1", ".", "getLocalName", "(", ")", ",", "element2", ".", "getLocalName", "(", ")", ")", ",", "reader", ".", "getLocation", "(", ")", ")", ";", "}", "}"], "docstring": "Check one and only one of the 2 elements has been defined", "docstring_tokens": ["Check", "one", "and", "only", "one", "of", "the", "2", "elements", "has", "been", "defined"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/messaging/src/main/java/org/jboss/as/messaging/MessagingSubsystemParser.java#L1644-L1651", "partition": "test", "index": 2696, "time": "2012-04-25 14:20:58"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/PersistenceUnitSearch.java", "func_name": "PersistenceUnitSearch.defaultPersistenceUnitName", "original_string": "private static String defaultPersistenceUnitName(String persistenceUnitName, PersistenceUnitMetadataHolder holder) {\n        if ((persistenceUnitName == null || persistenceUnitName.length() == 0)) {\n            for (PersistenceUnitMetadata persistenceUnit : holder.getPersistenceUnits()) {\n                String defaultPU = persistenceUnit.getProperties().getProperty(Configuration.JPA_DEFAULT_PERSISTENCE_UNIT);\n                if(Boolean.TRUE.toString().equals(defaultPU)) {\n                    persistenceUnitName = persistenceUnit.getPersistenceUnitName();\n                }\n            }\n        }\n        return persistenceUnitName;\n    }", "language": "java", "code": "private static String defaultPersistenceUnitName(String persistenceUnitName, PersistenceUnitMetadataHolder holder) {\n        if ((persistenceUnitName == null || persistenceUnitName.length() == 0)) {\n            for (PersistenceUnitMetadata persistenceUnit : holder.getPersistenceUnits()) {\n                String defaultPU = persistenceUnit.getProperties().getProperty(Configuration.JPA_DEFAULT_PERSISTENCE_UNIT);\n                if(Boolean.TRUE.toString().equals(defaultPU)) {\n                    persistenceUnitName = persistenceUnit.getPersistenceUnitName();\n                }\n            }\n        }\n        return persistenceUnitName;\n    }", "code_tokens": ["private", "static", "String", "defaultPersistenceUnitName", "(", "String", "persistenceUnitName", ",", "PersistenceUnitMetadataHolder", "holder", ")", "{", "if", "(", "(", "persistenceUnitName", "==", "null", "||", "persistenceUnitName", ".", "length", "(", ")", "==", "0", ")", ")", "{", "for", "(", "PersistenceUnitMetadata", "persistenceUnit", ":", "holder", ".", "getPersistenceUnits", "(", ")", ")", "{", "String", "defaultPU", "=", "persistenceUnit", ".", "getProperties", "(", ")", ".", "getProperty", "(", "Configuration", ".", "JPA_DEFAULT_PERSISTENCE_UNIT", ")", ";", "if", "(", "Boolean", ".", "TRUE", ".", "toString", "(", ")", ".", "equals", "(", "defaultPU", ")", ")", "{", "persistenceUnitName", "=", "persistenceUnit", ".", "getPersistenceUnitName", "(", ")", ";", "}", "}", "}", "return", "persistenceUnitName", ";", "}"], "docstring": "if no persistence unit name is specified, return name of default persistence unit\n\n@param persistenceUnitName that was specified to be used (null means to use the default persistence unit)\n@param holder\n@return", "docstring_tokens": ["if", "no", "persistence", "unit", "name", "is", "specified", "return", "name", "of", "default", "persistence", "unit"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/PersistenceUnitSearch.java#L199-L209", "partition": "test", "index": 2582, "time": "2012-05-04 10:40:06"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java", "func_name": "VaultSession.computeMaskedPassword", "original_string": "private String computeMaskedPassword() throws Exception {\n\n        // Create the PBE secret key\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(VAULT_ENC_ALGORITHM);\n\n        char[] password = \"somearbitrarycrazystringthatdoesnotmatter\".toCharArray();\n        PBEParameterSpec cipherSpec = new PBEParameterSpec(salt.getBytes(CHARSET), iterationCount);\n        PBEKeySpec keySpec = new PBEKeySpec(password);\n        SecretKey cipherKey = factory.generateSecret(keySpec);\n\n        String maskedPass = PBEUtils.encode64(keystorePassword.getBytes(CHARSET), VAULT_ENC_ALGORITHM, cipherKey, cipherSpec);\n\n        return PicketBoxSecurityVault.PASS_MASK_PREFIX + maskedPass;\n    }", "language": "java", "code": "private String computeMaskedPassword() throws Exception {\n\n        // Create the PBE secret key\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(VAULT_ENC_ALGORITHM);\n\n        char[] password = \"somearbitrarycrazystringthatdoesnotmatter\".toCharArray();\n        PBEParameterSpec cipherSpec = new PBEParameterSpec(salt.getBytes(CHARSET), iterationCount);\n        PBEKeySpec keySpec = new PBEKeySpec(password);\n        SecretKey cipherKey = factory.generateSecret(keySpec);\n\n        String maskedPass = PBEUtils.encode64(keystorePassword.getBytes(CHARSET), VAULT_ENC_ALGORITHM, cipherKey, cipherSpec);\n\n        return PicketBoxSecurityVault.PASS_MASK_PREFIX + maskedPass;\n    }", "code_tokens": ["private", "String", "computeMaskedPassword", "(", ")", "throws", "Exception", "{", "// Create the PBE secret key", "SecretKeyFactory", "factory", "=", "SecretKeyFactory", ".", "getInstance", "(", "VAULT_ENC_ALGORITHM", ")", ";", "char", "[", "]", "password", "=", "\"somearbitrarycrazystringthatdoesnotmatter\"", ".", "toCharArray", "(", ")", ";", "PBEParameterSpec", "cipherSpec", "=", "new", "PBEParameterSpec", "(", "salt", ".", "getBytes", "(", "CHARSET", ")", ",", "iterationCount", ")", ";", "PBEKeySpec", "keySpec", "=", "new", "PBEKeySpec", "(", "password", ")", ";", "SecretKey", "cipherKey", "=", "factory", ".", "generateSecret", "(", "keySpec", ")", ";", "String", "maskedPass", "=", "PBEUtils", ".", "encode64", "(", "keystorePassword", ".", "getBytes", "(", "CHARSET", ")", ",", "VAULT_ENC_ALGORITHM", ",", "cipherKey", ",", "cipherSpec", ")", ";", "return", "PicketBoxSecurityVault", ".", "PASS_MASK_PREFIX", "+", "maskedPass", ";", "}"], "docstring": "Method to compute masked password based on class attributes.\n\n@return masked password prefixed with {link @PicketBoxSecurityVault.PASS_MASK_PREFIX}.\n@throws Exception", "docstring_tokens": ["Method", "to", "compute", "masked", "password", "based", "on", "class", "attributes", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java#L168-L181", "partition": "test", "index": 2791, "time": "2012-05-29 19:08:56"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java", "func_name": "VaultSession.initSecurityVault", "original_string": "private void initSecurityVault() throws Exception {\n        try {\n            this.vault = SecurityVaultFactory.get();\n            this.vault.init(getVaultOptionsMap());\n            handshake();\n        } catch (SecurityVaultException e) {\n            throw SecurityLogger.ROOT_LOGGER.securityVaultException(e);\n        }\n    }", "language": "java", "code": "private void initSecurityVault() throws Exception {\n        try {\n            this.vault = SecurityVaultFactory.get();\n            this.vault.init(getVaultOptionsMap());\n            handshake();\n        } catch (SecurityVaultException e) {\n            throw SecurityLogger.ROOT_LOGGER.securityVaultException(e);\n        }\n    }", "code_tokens": ["private", "void", "initSecurityVault", "(", ")", "throws", "Exception", "{", "try", "{", "this", ".", "vault", "=", "SecurityVaultFactory", ".", "get", "(", ")", ";", "this", ".", "vault", ".", "init", "(", "getVaultOptionsMap", "(", ")", ")", ";", "handshake", "(", ")", ";", "}", "catch", "(", "SecurityVaultException", "e", ")", "{", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "securityVaultException", "(", "e", ")", ";", "}", "}"], "docstring": "Initialize the underlying vault.\n\n@throws Exception", "docstring_tokens": ["Initialize", "the", "underlying", "vault", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java#L188-L196", "partition": "test", "index": 2792, "time": "2012-05-29 19:08:56"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java", "func_name": "VaultSession.startVaultSession", "original_string": "public void startVaultSession(String vaultAlias) throws Exception {\n        if (vaultAlias == null) {\n            throw SecurityLogger.ROOT_LOGGER.vaultAliasNotSpecified();\n        }\n        this.keystoreMaskedPassword = (org.jboss.security.Util.isPasswordCommand(keystorePassword))\n                ? keystorePassword\n                : computeMaskedPassword();\n        this.vaultAlias = vaultAlias;\n        initSecurityVault();\n    }", "language": "java", "code": "public void startVaultSession(String vaultAlias) throws Exception {\n        if (vaultAlias == null) {\n            throw SecurityLogger.ROOT_LOGGER.vaultAliasNotSpecified();\n        }\n        this.keystoreMaskedPassword = (org.jboss.security.Util.isPasswordCommand(keystorePassword))\n                ? keystorePassword\n                : computeMaskedPassword();\n        this.vaultAlias = vaultAlias;\n        initSecurityVault();\n    }", "code_tokens": ["public", "void", "startVaultSession", "(", "String", "vaultAlias", ")", "throws", "Exception", "{", "if", "(", "vaultAlias", "==", "null", ")", "{", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "vaultAliasNotSpecified", "(", ")", ";", "}", "this", ".", "keystoreMaskedPassword", "=", "(", "org", ".", "jboss", ".", "security", ".", "Util", ".", "isPasswordCommand", "(", "keystorePassword", ")", ")", "?", "keystorePassword", ":", "computeMaskedPassword", "(", ")", ";", "this", ".", "vaultAlias", "=", "vaultAlias", ";", "initSecurityVault", "(", ")", ";", "}"], "docstring": "Start the vault with given alias.\n\n@param vaultAlias\n@throws Exception", "docstring_tokens": ["Start", "the", "vault", "with", "given", "alias", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java#L204-L213", "partition": "test", "index": 2793, "time": "2012-05-29 19:08:56"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java", "func_name": "VaultSession.attributeCreatedDisplay", "original_string": "private void attributeCreatedDisplay(String vaultBlock, String attributeName) {\n        System.out.println(SecurityLogger.ROOT_LOGGER.vaultAttributeCreateDisplay(vaultBlock, attributeName, securedAttributeConfigurationString(vaultBlock, attributeName)));\n    }", "language": "java", "code": "private void attributeCreatedDisplay(String vaultBlock, String attributeName) {\n        System.out.println(SecurityLogger.ROOT_LOGGER.vaultAttributeCreateDisplay(vaultBlock, attributeName, securedAttributeConfigurationString(vaultBlock, attributeName)));\n    }", "code_tokens": ["private", "void", "attributeCreatedDisplay", "(", "String", "vaultBlock", ",", "String", "attributeName", ")", "{", "System", ".", "out", ".", "println", "(", "SecurityLogger", ".", "ROOT_LOGGER", ".", "vaultAttributeCreateDisplay", "(", "vaultBlock", ",", "attributeName", ",", "securedAttributeConfigurationString", "(", "vaultBlock", ",", "attributeName", ")", ")", ")", ";", "}"], "docstring": "Display info about stored secured attribute.\n\n@param vaultBlock\n@param attributeName", "docstring_tokens": ["Display", "info", "about", "stored", "secured", "attribute", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java#L310-L312", "partition": "test", "index": 2794, "time": "2012-05-29 19:08:56"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultTool.java", "func_name": "VaultTool.initOptions", "original_string": "private void initOptions() {\n        options = new Options();\n        options.addOption(\"k\", KEYSTORE_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineKeyStoreURL());\n        options.addOption(\"p\", KEYSTORE_PASSWORD_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineKeyStorePassword());\n        options.addOption(\"e\", ENC_DIR_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineEncryptionDirectory());\n        options.addOption(\"s\", SALT_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineSalt());\n        options.addOption(\"i\", ITERATION_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineIterationCount());\n        options.addOption(\"v\", ALIAS_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineVaultKeyStoreAlias());\n        options.addOption(\"b\", VAULT_BLOCK_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineVaultBlock());\n        options.addOption(\"a\", ATTRIBUTE_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineAttributeName());\n        options.addOption(\"t\", CREATE_KEYSTORE_PARAM, false, SecurityLogger.ROOT_LOGGER.cmdLineAutomaticallyCreateKeystore());\n\n        OptionGroup og = new OptionGroup();\n        Option x = new Option(\"x\", SEC_ATTR_VALUE_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineSecuredAttribute());\n        Option c = new Option(\"c\", CHECK_SEC_ATTR_EXISTS_PARAM, false, SecurityLogger.ROOT_LOGGER.cmdLineCheckAttribute());\n        Option r = new Option(\"r\", REMOVE_SEC_ATTR_PARAM, false, SecurityLogger.ROOT_LOGGER.cmdLineRemoveSecuredAttribute());\n        Option h = new Option(\"h\", HELP_PARAM, false, SecurityLogger.ROOT_LOGGER.cmdLineHelp());\n        og.addOption(x);\n        og.addOption(c);\n        og.addOption(r);\n        og.addOption(h);\n        og.setRequired(true);\n        options.addOptionGroup(og);\n    }", "language": "java", "code": "private void initOptions() {\n        options = new Options();\n        options.addOption(\"k\", KEYSTORE_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineKeyStoreURL());\n        options.addOption(\"p\", KEYSTORE_PASSWORD_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineKeyStorePassword());\n        options.addOption(\"e\", ENC_DIR_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineEncryptionDirectory());\n        options.addOption(\"s\", SALT_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineSalt());\n        options.addOption(\"i\", ITERATION_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineIterationCount());\n        options.addOption(\"v\", ALIAS_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineVaultKeyStoreAlias());\n        options.addOption(\"b\", VAULT_BLOCK_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineVaultBlock());\n        options.addOption(\"a\", ATTRIBUTE_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineAttributeName());\n        options.addOption(\"t\", CREATE_KEYSTORE_PARAM, false, SecurityLogger.ROOT_LOGGER.cmdLineAutomaticallyCreateKeystore());\n\n        OptionGroup og = new OptionGroup();\n        Option x = new Option(\"x\", SEC_ATTR_VALUE_PARAM, true, SecurityLogger.ROOT_LOGGER.cmdLineSecuredAttribute());\n        Option c = new Option(\"c\", CHECK_SEC_ATTR_EXISTS_PARAM, false, SecurityLogger.ROOT_LOGGER.cmdLineCheckAttribute());\n        Option r = new Option(\"r\", REMOVE_SEC_ATTR_PARAM, false, SecurityLogger.ROOT_LOGGER.cmdLineRemoveSecuredAttribute());\n        Option h = new Option(\"h\", HELP_PARAM, false, SecurityLogger.ROOT_LOGGER.cmdLineHelp());\n        og.addOption(x);\n        og.addOption(c);\n        og.addOption(r);\n        og.addOption(h);\n        og.setRequired(true);\n        options.addOptionGroup(og);\n    }", "code_tokens": ["private", "void", "initOptions", "(", ")", "{", "options", "=", "new", "Options", "(", ")", ";", "options", ".", "addOption", "(", "\"k\"", ",", "KEYSTORE_PARAM", ",", "true", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineKeyStoreURL", "(", ")", ")", ";", "options", ".", "addOption", "(", "\"p\"", ",", "KEYSTORE_PASSWORD_PARAM", ",", "true", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineKeyStorePassword", "(", ")", ")", ";", "options", ".", "addOption", "(", "\"e\"", ",", "ENC_DIR_PARAM", ",", "true", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineEncryptionDirectory", "(", ")", ")", ";", "options", ".", "addOption", "(", "\"s\"", ",", "SALT_PARAM", ",", "true", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineSalt", "(", ")", ")", ";", "options", ".", "addOption", "(", "\"i\"", ",", "ITERATION_PARAM", ",", "true", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineIterationCount", "(", ")", ")", ";", "options", ".", "addOption", "(", "\"v\"", ",", "ALIAS_PARAM", ",", "true", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineVaultKeyStoreAlias", "(", ")", ")", ";", "options", ".", "addOption", "(", "\"b\"", ",", "VAULT_BLOCK_PARAM", ",", "true", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineVaultBlock", "(", ")", ")", ";", "options", ".", "addOption", "(", "\"a\"", ",", "ATTRIBUTE_PARAM", ",", "true", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineAttributeName", "(", ")", ")", ";", "options", ".", "addOption", "(", "\"t\"", ",", "CREATE_KEYSTORE_PARAM", ",", "false", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineAutomaticallyCreateKeystore", "(", ")", ")", ";", "OptionGroup", "og", "=", "new", "OptionGroup", "(", ")", ";", "Option", "x", "=", "new", "Option", "(", "\"x\"", ",", "SEC_ATTR_VALUE_PARAM", ",", "true", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineSecuredAttribute", "(", ")", ")", ";", "Option", "c", "=", "new", "Option", "(", "\"c\"", ",", "CHECK_SEC_ATTR_EXISTS_PARAM", ",", "false", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineCheckAttribute", "(", ")", ")", ";", "Option", "r", "=", "new", "Option", "(", "\"r\"", ",", "REMOVE_SEC_ATTR_PARAM", ",", "false", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineRemoveSecuredAttribute", "(", ")", ")", ";", "Option", "h", "=", "new", "Option", "(", "\"h\"", ",", "HELP_PARAM", ",", "false", ",", "SecurityLogger", ".", "ROOT_LOGGER", ".", "cmdLineHelp", "(", ")", ")", ";", "og", ".", "addOption", "(", "x", ")", ";", "og", ".", "addOption", "(", "c", ")", ";", "og", ".", "addOption", "(", "r", ")", ";", "og", ".", "addOption", "(", "h", ")", ";", "og", ".", "setRequired", "(", "true", ")", ";", "options", ".", "addOptionGroup", "(", "og", ")", ";", "}"], "docstring": "Build options for non-interactive VaultTool usage scenario.\n\n@return", "docstring_tokens": ["Build", "options", "for", "non", "-", "interactive", "VaultTool", "usage", "scenario", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/vault/VaultTool.java#L152-L175", "partition": "test", "index": 2512, "time": "2012-05-29 19:08:56"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java", "func_name": "VaultSession.vaultConfigurationDisplay", "original_string": "public void vaultConfigurationDisplay() {\n        final String configuration = vaultConfiguration();\n        System.out.println(SecurityLogger.ROOT_LOGGER.vaultConfigurationTitle());\n        System.out.println(\"********************************************\");\n        System.out.println(\"For standalone mode:\");\n        System.out.println(configuration);\n        System.out.println(\"********************************************\");\n        System.out.println(\"For domain mode:\");\n        System.out.println(\"/host=the_host\" + configuration);\n        System.out.println(\"********************************************\");\n    }", "language": "java", "code": "public void vaultConfigurationDisplay() {\n        final String configuration = vaultConfiguration();\n        System.out.println(SecurityLogger.ROOT_LOGGER.vaultConfigurationTitle());\n        System.out.println(\"********************************************\");\n        System.out.println(\"For standalone mode:\");\n        System.out.println(configuration);\n        System.out.println(\"********************************************\");\n        System.out.println(\"For domain mode:\");\n        System.out.println(\"/host=the_host\" + configuration);\n        System.out.println(\"********************************************\");\n    }", "code_tokens": ["public", "void", "vaultConfigurationDisplay", "(", ")", "{", "final", "String", "configuration", "=", "vaultConfiguration", "(", ")", ";", "System", ".", "out", ".", "println", "(", "SecurityLogger", ".", "ROOT_LOGGER", ".", "vaultConfigurationTitle", "(", ")", ")", ";", "System", ".", "out", ".", "println", "(", "\"********************************************\"", ")", ";", "System", ".", "out", ".", "println", "(", "\"For standalone mode:\"", ")", ";", "System", ".", "out", ".", "println", "(", "configuration", ")", ";", "System", ".", "out", ".", "println", "(", "\"********************************************\"", ")", ";", "System", ".", "out", ".", "println", "(", "\"For domain mode:\"", ")", ";", "System", ".", "out", ".", "println", "(", "\"/host=the_host\"", "+", "configuration", ")", ";", "System", ".", "out", ".", "println", "(", "\"********************************************\"", ")", ";", "}"], "docstring": "Display info about vault itself in form of AS7 configuration file.", "docstring_tokens": ["Display", "info", "about", "vault", "itself", "in", "form", "of", "AS7", "configuration", "file", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java#L328-L338", "partition": "test", "index": 2795, "time": "2012-05-29 19:08:56"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java", "func_name": "SFSBCallStack.getCurrentCall", "original_string": "static Map<String, ExtendedEntityManager> getCurrentCall() {\n        ArrayList<Map<String, ExtendedEntityManager>> stack = currentSFSBCallStack();\n        Map<String, ExtendedEntityManager> result = null;\n        if (stack != null) {\n            result = stack.get(stack.size() - 1);\n        }\n        return result;\n    }", "language": "java", "code": "static Map<String, ExtendedEntityManager> getCurrentCall() {\n        ArrayList<Map<String, ExtendedEntityManager>> stack = currentSFSBCallStack();\n        Map<String, ExtendedEntityManager> result = null;\n        if (stack != null) {\n            result = stack.get(stack.size() - 1);\n        }\n        return result;\n    }", "code_tokens": ["static", "Map", "<", "String", ",", "ExtendedEntityManager", ">", "getCurrentCall", "(", ")", "{", "ArrayList", "<", "Map", "<", "String", ",", "ExtendedEntityManager", ">", ">", "stack", "=", "currentSFSBCallStack", "(", ")", ";", "Map", "<", "String", ",", "ExtendedEntityManager", ">", "result", "=", "null", ";", "if", "(", "stack", "!=", "null", ")", "{", "result", "=", "stack", ".", "get", "(", "stack", ".", "size", "(", ")", "-", "1", ")", ";", "}", "return", "result", ";", "}"], "docstring": "gets the current SFSB invocation off the invocation call stack\n\n@return the entity manager map", "docstring_tokens": ["gets", "the", "current", "SFSB", "invocation", "off", "the", "invocation", "call", "stack"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/SFSBCallStack.java#L163-L170", "partition": "test", "index": 2625, "time": "2012-06-04 11:27:17"}
{"repo": "wildfly/wildfly", "path": "legacy/messaging/src/main/java/org/jboss/as/messaging/Messaging13SubsystemParser.java", "func_name": "Messaging13SubsystemParser.checkNotBothElements", "original_string": "protected static void checkNotBothElements(XMLExtendedStreamReader reader, Set<Element> seen, Element element1, Element element2) throws XMLStreamException {\n        if (seen.contains(element1) && seen.contains(element2)) {\n            throw new XMLStreamException(MessagingLogger.ROOT_LOGGER.onlyOneRequired(element1.getLocalName(), element2.getLocalName()), reader.getLocation());\n        }\n    }", "language": "java", "code": "protected static void checkNotBothElements(XMLExtendedStreamReader reader, Set<Element> seen, Element element1, Element element2) throws XMLStreamException {\n        if (seen.contains(element1) && seen.contains(element2)) {\n            throw new XMLStreamException(MessagingLogger.ROOT_LOGGER.onlyOneRequired(element1.getLocalName(), element2.getLocalName()), reader.getLocation());\n        }\n    }", "code_tokens": ["protected", "static", "void", "checkNotBothElements", "(", "XMLExtendedStreamReader", "reader", ",", "Set", "<", "Element", ">", "seen", ",", "Element", "element1", ",", "Element", "element2", ")", "throws", "XMLStreamException", "{", "if", "(", "seen", ".", "contains", "(", "element1", ")", "&&", "seen", ".", "contains", "(", "element2", ")", ")", "{", "throw", "new", "XMLStreamException", "(", "MessagingLogger", ".", "ROOT_LOGGER", ".", "onlyOneRequired", "(", "element1", ".", "getLocalName", "(", ")", ",", "element2", ".", "getLocalName", "(", ")", ")", ",", "reader", ".", "getLocation", "(", ")", ")", ";", "}", "}"], "docstring": "Check that not both elements have been defined", "docstring_tokens": ["Check", "that", "not", "both", "elements", "have", "been", "defined"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/messaging/src/main/java/org/jboss/as/messaging/Messaging13SubsystemParser.java#L386-L390", "partition": "test", "index": 2878, "time": "2012-06-15 09:58:02"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/config/Configuration.java", "func_name": "Configuration.needClassFileTransformer", "original_string": "public static boolean needClassFileTransformer(PersistenceUnitMetadata pu) {\n        boolean result = true;\n        String provider = pu.getPersistenceProviderClassName();\n        if (pu.getProperties().containsKey(Configuration.JPA_CONTAINER_CLASS_TRANSFORMER)) {\n            result = Boolean.parseBoolean(pu.getProperties().getProperty(Configuration.JPA_CONTAINER_CLASS_TRANSFORMER));\n        }\n        else if (isHibernateProvider(provider)) {\n            result = (Boolean.TRUE.toString().equals(pu.getProperties().getProperty(HIBERNATE_USE_CLASS_ENHANCER))\n                    || Boolean.TRUE.toString().equals(pu.getProperties().getProperty(HIBERNATE_ENABLE_DIRTY_TRACKING))\n                    || Boolean.TRUE.toString().equals(pu.getProperties().getProperty(HIBERNATE_ENABLE_LAZY_INITIALIZATION))\n                    || Boolean.TRUE.toString().equals(pu.getProperties().getProperty(HIBERNATE_ENABLE_ASSOCIATION_MANAGEMENT)));\n        }\n        return result;\n    }", "language": "java", "code": "public static boolean needClassFileTransformer(PersistenceUnitMetadata pu) {\n        boolean result = true;\n        String provider = pu.getPersistenceProviderClassName();\n        if (pu.getProperties().containsKey(Configuration.JPA_CONTAINER_CLASS_TRANSFORMER)) {\n            result = Boolean.parseBoolean(pu.getProperties().getProperty(Configuration.JPA_CONTAINER_CLASS_TRANSFORMER));\n        }\n        else if (isHibernateProvider(provider)) {\n            result = (Boolean.TRUE.toString().equals(pu.getProperties().getProperty(HIBERNATE_USE_CLASS_ENHANCER))\n                    || Boolean.TRUE.toString().equals(pu.getProperties().getProperty(HIBERNATE_ENABLE_DIRTY_TRACKING))\n                    || Boolean.TRUE.toString().equals(pu.getProperties().getProperty(HIBERNATE_ENABLE_LAZY_INITIALIZATION))\n                    || Boolean.TRUE.toString().equals(pu.getProperties().getProperty(HIBERNATE_ENABLE_ASSOCIATION_MANAGEMENT)));\n        }\n        return result;\n    }", "code_tokens": ["public", "static", "boolean", "needClassFileTransformer", "(", "PersistenceUnitMetadata", "pu", ")", "{", "boolean", "result", "=", "true", ";", "String", "provider", "=", "pu", ".", "getPersistenceProviderClassName", "(", ")", ";", "if", "(", "pu", ".", "getProperties", "(", ")", ".", "containsKey", "(", "Configuration", ".", "JPA_CONTAINER_CLASS_TRANSFORMER", ")", ")", "{", "result", "=", "Boolean", ".", "parseBoolean", "(", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "Configuration", ".", "JPA_CONTAINER_CLASS_TRANSFORMER", ")", ")", ";", "}", "else", "if", "(", "isHibernateProvider", "(", "provider", ")", ")", "{", "result", "=", "(", "Boolean", ".", "TRUE", ".", "toString", "(", ")", ".", "equals", "(", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "HIBERNATE_USE_CLASS_ENHANCER", ")", ")", "||", "Boolean", ".", "TRUE", ".", "toString", "(", ")", ".", "equals", "(", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "HIBERNATE_ENABLE_DIRTY_TRACKING", ")", ")", "||", "Boolean", ".", "TRUE", ".", "toString", "(", ")", ".", "equals", "(", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "HIBERNATE_ENABLE_LAZY_INITIALIZATION", ")", ")", "||", "Boolean", ".", "TRUE", ".", "toString", "(", ")", ".", "equals", "(", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "HIBERNATE_ENABLE_ASSOCIATION_MANAGEMENT", ")", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Determine if class file transformer is needed for the specified persistence unit\n\nif the persistence provider is Hibernate and use_class_enhancer is not true, don't need a class transformer.\nfor other persistence providers, the transformer is assumed to be needed.\n\n@param pu the PU\n@return true if class file transformer support is needed for pu", "docstring_tokens": ["Determine", "if", "class", "file", "transformer", "is", "needed", "for", "the", "specified", "persistence", "unit"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/config/Configuration.java#L239-L252", "partition": "test", "index": 2594, "time": "2012-07-17 10:09:09"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/deployers/ds/DsXmlParser.java", "func_name": "DsXmlParser.parseCredential", "original_string": "@Override\n    protected Credential parseCredential(XMLStreamReader reader) throws XMLStreamException, ParserException,\n            ValidateException {\n\n        String userName = null;\n        String password = null;\n        String securityDomain = null;\n        boolean elytronEnabled = false;\n        String authenticationContext = null;\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.SECURITY ||\n                            Recovery.Tag.forName(reader.getLocalName()) == Recovery.Tag.RECOVER_CREDENTIAL) {\n\n                        return new CredentialImpl(userName, password, elytronEnabled? authenticationContext: securityDomain,\n                                elytronEnabled, null);\n                    } else {\n                        if (Credential.Tag.forName(reader.getLocalName()) == Credential.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (Credential.Tag.forName(reader.getLocalName())) {\n                        case PASSWORD: {\n                            password = elementAsString(reader);\n                            if (propertyResolver != null && password != null) {\n                                String resolvedPassword = propertyResolver.resolve(password);\n                                if (resolvedPassword != null)\n                                    password = resolvedPassword;\n                            }\n                            break;\n                        }\n                        case USER_NAME: {\n                            userName = elementAsString(reader);\n                            break;\n                        }\n                        case SECURITY_DOMAIN: {\n                            securityDomain = elementAsString(reader);\n                            break;\n                        }\n                        case ELYTRON_ENABLED: {\n                            Boolean value = elementAsBoolean(reader);\n                            elytronEnabled = value == null? true : value;\n                            break;\n                        }\n                        case AUTHENTICATION_CONTEXT: {\n                            authenticationContext = elementAsString(reader);\n                            break;\n                        }\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }", "language": "java", "code": "@Override\n    protected Credential parseCredential(XMLStreamReader reader) throws XMLStreamException, ParserException,\n            ValidateException {\n\n        String userName = null;\n        String password = null;\n        String securityDomain = null;\n        boolean elytronEnabled = false;\n        String authenticationContext = null;\n\n        while (reader.hasNext()) {\n            switch (reader.nextTag()) {\n                case END_ELEMENT: {\n                    if (DataSource.Tag.forName(reader.getLocalName()) == DataSource.Tag.SECURITY ||\n                            Recovery.Tag.forName(reader.getLocalName()) == Recovery.Tag.RECOVER_CREDENTIAL) {\n\n                        return new CredentialImpl(userName, password, elytronEnabled? authenticationContext: securityDomain,\n                                elytronEnabled, null);\n                    } else {\n                        if (Credential.Tag.forName(reader.getLocalName()) == Credential.Tag.UNKNOWN) {\n                            throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()));\n                        }\n                    }\n                    break;\n                }\n                case START_ELEMENT: {\n                    switch (Credential.Tag.forName(reader.getLocalName())) {\n                        case PASSWORD: {\n                            password = elementAsString(reader);\n                            if (propertyResolver != null && password != null) {\n                                String resolvedPassword = propertyResolver.resolve(password);\n                                if (resolvedPassword != null)\n                                    password = resolvedPassword;\n                            }\n                            break;\n                        }\n                        case USER_NAME: {\n                            userName = elementAsString(reader);\n                            break;\n                        }\n                        case SECURITY_DOMAIN: {\n                            securityDomain = elementAsString(reader);\n                            break;\n                        }\n                        case ELYTRON_ENABLED: {\n                            Boolean value = elementAsBoolean(reader);\n                            elytronEnabled = value == null? true : value;\n                            break;\n                        }\n                        case AUTHENTICATION_CONTEXT: {\n                            authenticationContext = elementAsString(reader);\n                            break;\n                        }\n                        default:\n                            throw new ParserException(bundle.unexpectedElement(reader.getLocalName()));\n                    }\n                    break;\n                }\n            }\n        }\n        throw new ParserException(bundle.unexpectedEndOfDocument());\n    }", "code_tokens": ["@", "Override", "protected", "Credential", "parseCredential", "(", "XMLStreamReader", "reader", ")", "throws", "XMLStreamException", ",", "ParserException", ",", "ValidateException", "{", "String", "userName", "=", "null", ";", "String", "password", "=", "null", ";", "String", "securityDomain", "=", "null", ";", "boolean", "elytronEnabled", "=", "false", ";", "String", "authenticationContext", "=", "null", ";", "while", "(", "reader", ".", "hasNext", "(", ")", ")", "{", "switch", "(", "reader", ".", "nextTag", "(", ")", ")", "{", "case", "END_ELEMENT", ":", "{", "if", "(", "DataSource", ".", "Tag", ".", "forName", "(", "reader", ".", "getLocalName", "(", ")", ")", "==", "DataSource", ".", "Tag", ".", "SECURITY", "||", "Recovery", ".", "Tag", ".", "forName", "(", "reader", ".", "getLocalName", "(", ")", ")", "==", "Recovery", ".", "Tag", ".", "RECOVER_CREDENTIAL", ")", "{", "return", "new", "CredentialImpl", "(", "userName", ",", "password", ",", "elytronEnabled", "?", "authenticationContext", ":", "securityDomain", ",", "elytronEnabled", ",", "null", ")", ";", "}", "else", "{", "if", "(", "Credential", ".", "Tag", ".", "forName", "(", "reader", ".", "getLocalName", "(", ")", ")", "==", "Credential", ".", "Tag", ".", "UNKNOWN", ")", "{", "throw", "new", "ParserException", "(", "bundle", ".", "unexpectedEndTag", "(", "reader", ".", "getLocalName", "(", ")", ")", ")", ";", "}", "}", "break", ";", "}", "case", "START_ELEMENT", ":", "{", "switch", "(", "Credential", ".", "Tag", ".", "forName", "(", "reader", ".", "getLocalName", "(", ")", ")", ")", "{", "case", "PASSWORD", ":", "{", "password", "=", "elementAsString", "(", "reader", ")", ";", "if", "(", "propertyResolver", "!=", "null", "&&", "password", "!=", "null", ")", "{", "String", "resolvedPassword", "=", "propertyResolver", ".", "resolve", "(", "password", ")", ";", "if", "(", "resolvedPassword", "!=", "null", ")", "password", "=", "resolvedPassword", ";", "}", "break", ";", "}", "case", "USER_NAME", ":", "{", "userName", "=", "elementAsString", "(", "reader", ")", ";", "break", ";", "}", "case", "SECURITY_DOMAIN", ":", "{", "securityDomain", "=", "elementAsString", "(", "reader", ")", ";", "break", ";", "}", "case", "ELYTRON_ENABLED", ":", "{", "Boolean", "value", "=", "elementAsBoolean", "(", "reader", ")", ";", "elytronEnabled", "=", "value", "==", "null", "?", "true", ":", "value", ";", "break", ";", "}", "case", "AUTHENTICATION_CONTEXT", ":", "{", "authenticationContext", "=", "elementAsString", "(", "reader", ")", ";", "break", ";", "}", "default", ":", "throw", "new", "ParserException", "(", "bundle", ".", "unexpectedElement", "(", "reader", ".", "getLocalName", "(", ")", ")", ")", ";", "}", "break", ";", "}", "}", "}", "throw", "new", "ParserException", "(", "bundle", ".", "unexpectedEndOfDocument", "(", ")", ")", ";", "}"], "docstring": "parse credential tag\n\n@param reader reader\n@return the parse Object\n@throws XMLStreamException in case of error\n@throws ParserException    in case of error\n@throws ValidateException  in case of error", "docstring_tokens": ["parse", "credential", "tag"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/deployers/ds/DsXmlParser.java#L163-L224", "partition": "test", "index": 2783, "time": "2012-09-12 14:55:23"}
{"repo": "wildfly/wildfly", "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java", "func_name": "JSFModuleIdFactory.computeSlot", "original_string": "String computeSlot(String jsfVersion) {\n        if (jsfVersion == null) return defaultSlot;\n        if (JsfVersionMarker.JSF_2_0.equals(jsfVersion)) return defaultSlot;\n        return jsfVersion;\n    }", "language": "java", "code": "String computeSlot(String jsfVersion) {\n        if (jsfVersion == null) return defaultSlot;\n        if (JsfVersionMarker.JSF_2_0.equals(jsfVersion)) return defaultSlot;\n        return jsfVersion;\n    }", "code_tokens": ["String", "computeSlot", "(", "String", "jsfVersion", ")", "{", "if", "(", "jsfVersion", "==", "null", ")", "return", "defaultSlot", ";", "if", "(", "JsfVersionMarker", ".", "JSF_2_0", ".", "equals", "(", "jsfVersion", ")", ")", "return", "defaultSlot", ";", "return", "jsfVersion", ";", "}"], "docstring": "If needed, convert old JSFVersionMarker values to slot values.\n\n@param jsfVersion The version value from JSFVersionMarker, or null for default slot.\n@return The equivalent slot value.", "docstring_tokens": ["If", "needed", "convert", "old", "JSFVersionMarker", "values", "to", "slot", "values", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java#L163-L167", "partition": "test", "index": 2845, "time": "2012-10-09 15:38:30"}
{"repo": "wildfly/wildfly", "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java", "func_name": "JSFModuleIdFactory.checkVersionIntegrity", "original_string": "private void checkVersionIntegrity() {\n        activeVersions.addAll(allVersions);\n\n        for (String version : allVersions) {\n            if (!apiIds.containsKey(version)) {\n                JSFLogger.ROOT_LOGGER.missingJSFModule(version, API_MODULE);\n                activeVersions.remove(version);\n            }\n\n            if (!implIds.containsKey(version)) {\n                JSFLogger.ROOT_LOGGER.missingJSFModule(version, IMPL_MODULE);\n                activeVersions.remove(version);\n            }\n\n            if (!injectionIds.containsKey(version)) {\n                JSFLogger.ROOT_LOGGER.missingJSFModule(version, INJECTION_MODULE);\n                activeVersions.remove(version);\n            }\n        }\n    }", "language": "java", "code": "private void checkVersionIntegrity() {\n        activeVersions.addAll(allVersions);\n\n        for (String version : allVersions) {\n            if (!apiIds.containsKey(version)) {\n                JSFLogger.ROOT_LOGGER.missingJSFModule(version, API_MODULE);\n                activeVersions.remove(version);\n            }\n\n            if (!implIds.containsKey(version)) {\n                JSFLogger.ROOT_LOGGER.missingJSFModule(version, IMPL_MODULE);\n                activeVersions.remove(version);\n            }\n\n            if (!injectionIds.containsKey(version)) {\n                JSFLogger.ROOT_LOGGER.missingJSFModule(version, INJECTION_MODULE);\n                activeVersions.remove(version);\n            }\n        }\n    }", "code_tokens": ["private", "void", "checkVersionIntegrity", "(", ")", "{", "activeVersions", ".", "addAll", "(", "allVersions", ")", ";", "for", "(", "String", "version", ":", "allVersions", ")", "{", "if", "(", "!", "apiIds", ".", "containsKey", "(", "version", ")", ")", "{", "JSFLogger", ".", "ROOT_LOGGER", ".", "missingJSFModule", "(", "version", ",", "API_MODULE", ")", ";", "activeVersions", ".", "remove", "(", "version", ")", ";", "}", "if", "(", "!", "implIds", ".", "containsKey", "(", "version", ")", ")", "{", "JSFLogger", ".", "ROOT_LOGGER", ".", "missingJSFModule", "(", "version", ",", "IMPL_MODULE", ")", ";", "activeVersions", ".", "remove", "(", "version", ")", ";", "}", "if", "(", "!", "injectionIds", ".", "containsKey", "(", "version", ")", ")", "{", "JSFLogger", ".", "ROOT_LOGGER", ".", "missingJSFModule", "(", "version", ",", "INJECTION_MODULE", ")", ";", "activeVersions", ".", "remove", "(", "version", ")", ";", "}", "}", "}"], "docstring": "make sure that each version has api, impl, and injection", "docstring_tokens": ["make", "sure", "that", "each", "version", "has", "api", "impl", "and", "injection"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java#L136-L155", "partition": "test", "index": 2844, "time": "2012-10-09 15:38:30"}
{"repo": "wildfly/wildfly", "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java", "func_name": "JSFModuleIdFactory.loadIdsManually", "original_string": "private void loadIdsManually() {\n        implIds.put(\"main\", ModuleIdentifier.create(IMPL_MODULE));\n        apiIds.put(\"main\", ModuleIdentifier.create(API_MODULE));\n        injectionIds.put(\"main\", ModuleIdentifier.create(INJECTION_MODULE));\n\n        allVersions.add(\"main\");\n\n        activeVersions.add(\"main\");\n    }", "language": "java", "code": "private void loadIdsManually() {\n        implIds.put(\"main\", ModuleIdentifier.create(IMPL_MODULE));\n        apiIds.put(\"main\", ModuleIdentifier.create(API_MODULE));\n        injectionIds.put(\"main\", ModuleIdentifier.create(INJECTION_MODULE));\n\n        allVersions.add(\"main\");\n\n        activeVersions.add(\"main\");\n    }", "code_tokens": ["private", "void", "loadIdsManually", "(", ")", "{", "implIds", ".", "put", "(", "\"main\"", ",", "ModuleIdentifier", ".", "create", "(", "IMPL_MODULE", ")", ")", ";", "apiIds", ".", "put", "(", "\"main\"", ",", "ModuleIdentifier", ".", "create", "(", "API_MODULE", ")", ")", ";", "injectionIds", ".", "put", "(", "\"main\"", ",", "ModuleIdentifier", ".", "create", "(", "INJECTION_MODULE", ")", ")", ";", "allVersions", ".", "add", "(", "\"main\"", ")", ";", "activeVersions", ".", "add", "(", "\"main\"", ")", ";", "}"], "docstring": "just provide the default implementations", "docstring_tokens": ["just", "provide", "the", "default", "implementations"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java#L94-L102", "partition": "test", "index": 2843, "time": "2012-10-09 15:38:30"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/WeldStartService.java", "func_name": "WeldStartService.stop", "original_string": "@Override\n    public void stop(final StopContext context) {\n        final WeldBootstrapService bootstrapService = bootstrapSupplier.get();\n        if (!bootstrapService.isStarted()) {\n            throw WeldLogger.ROOT_LOGGER.notStarted(\"WeldContainer\");\n        }\n        WeldLogger.DEPLOYMENT_LOGGER.stoppingWeldService(bootstrapService.getDeploymentName());\n        ClassLoader oldTccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(bootstrapService.getDeployment().getModule().getClassLoader());\n            WeldProvider.containerShutDown(Container.instance(bootstrapService.getDeploymentName()));\n            bootstrapService.getBootstrap().shutdown();\n        } finally {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl);\n            ModuleGroupSingletonProvider.removeClassLoader(bootstrapService.getDeployment().getModule().getClassLoader());\n        }\n        bootstrapService.setStarted(false);\n    }", "language": "java", "code": "@Override\n    public void stop(final StopContext context) {\n        final WeldBootstrapService bootstrapService = bootstrapSupplier.get();\n        if (!bootstrapService.isStarted()) {\n            throw WeldLogger.ROOT_LOGGER.notStarted(\"WeldContainer\");\n        }\n        WeldLogger.DEPLOYMENT_LOGGER.stoppingWeldService(bootstrapService.getDeploymentName());\n        ClassLoader oldTccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(bootstrapService.getDeployment().getModule().getClassLoader());\n            WeldProvider.containerShutDown(Container.instance(bootstrapService.getDeploymentName()));\n            bootstrapService.getBootstrap().shutdown();\n        } finally {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl);\n            ModuleGroupSingletonProvider.removeClassLoader(bootstrapService.getDeployment().getModule().getClassLoader());\n        }\n        bootstrapService.setStarted(false);\n    }", "code_tokens": ["@", "Override", "public", "void", "stop", "(", "final", "StopContext", "context", ")", "{", "final", "WeldBootstrapService", "bootstrapService", "=", "bootstrapSupplier", ".", "get", "(", ")", ";", "if", "(", "!", "bootstrapService", ".", "isStarted", "(", ")", ")", "{", "throw", "WeldLogger", ".", "ROOT_LOGGER", ".", "notStarted", "(", "\"WeldContainer\"", ")", ";", "}", "WeldLogger", ".", "DEPLOYMENT_LOGGER", ".", "stoppingWeldService", "(", "bootstrapService", ".", "getDeploymentName", "(", ")", ")", ";", "ClassLoader", "oldTccl", "=", "WildFlySecurityManager", ".", "getCurrentContextClassLoaderPrivileged", "(", ")", ";", "try", "{", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "bootstrapService", ".", "getDeployment", "(", ")", ".", "getModule", "(", ")", ".", "getClassLoader", "(", ")", ")", ";", "WeldProvider", ".", "containerShutDown", "(", "Container", ".", "instance", "(", "bootstrapService", ".", "getDeploymentName", "(", ")", ")", ")", ";", "bootstrapService", ".", "getBootstrap", "(", ")", ".", "shutdown", "(", ")", ";", "}", "finally", "{", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "oldTccl", ")", ";", "ModuleGroupSingletonProvider", ".", "removeClassLoader", "(", "bootstrapService", ".", "getDeployment", "(", ")", ".", "getModule", "(", ")", ".", "getClassLoader", "(", ")", ")", ";", "}", "bootstrapService", ".", "setStarted", "(", "false", ")", ";", "}"], "docstring": "Stops the container\nExecuted in WeldStartService to shutdown the runtime before NamingService is closed.\n\n@throws IllegalStateException if the container is not running", "docstring_tokens": ["Stops", "the", "container", "Executed", "in", "WeldStartService", "to", "shutdown", "the", "runtime", "before", "NamingService", "is", "closed", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/WeldStartService.java#L118-L135", "partition": "test", "index": 2575, "time": "2012-11-14 16:09:34"}
{"repo": "wildfly/wildfly", "path": "jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/util/Utils.java", "func_name": "Utils.skip", "original_string": "public static void skip(InputStream is, long amount) throws IOException {\n        long leftToSkip = amount;\n        long amountSkipped = 0;\n        while(leftToSkip > 0 && amountSkipped >= 0){\n            amountSkipped = is.skip(leftToSkip);\n            leftToSkip -= amountSkipped;\n        }\n    }", "language": "java", "code": "public static void skip(InputStream is, long amount) throws IOException {\n        long leftToSkip = amount;\n        long amountSkipped = 0;\n        while(leftToSkip > 0 && amountSkipped >= 0){\n            amountSkipped = is.skip(leftToSkip);\n            leftToSkip -= amountSkipped;\n        }\n    }", "code_tokens": ["public", "static", "void", "skip", "(", "InputStream", "is", ",", "long", "amount", ")", "throws", "IOException", "{", "long", "leftToSkip", "=", "amount", ";", "long", "amountSkipped", "=", "0", ";", "while", "(", "leftToSkip", ">", "0", "&&", "amountSkipped", ">=", "0", ")", "{", "amountSkipped", "=", "is", ".", "skip", "(", "leftToSkip", ")", ";", "leftToSkip", "-=", "amountSkipped", ";", "}", "}"], "docstring": "Ensure InputStream actually skips ahead the required number of bytes\n@param is\n@param amount\n@throws IOException", "docstring_tokens": ["Ensure", "InputStream", "actually", "skips", "ahead", "the", "required", "number", "of", "bytes"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/util/Utils.java#L80-L87", "partition": "test", "index": 2877, "time": "2012-11-28 15:08:30"}
{"repo": "wildfly/wildfly", "path": "jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/util/JdrZipFile.java", "func_name": "JdrZipFile.addLog", "original_string": "public void addLog(String content, String logName) throws Exception {\n        String name = \"sos_logs/\" + logName;\n        this.add(new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8)), name);\n    }", "language": "java", "code": "public void addLog(String content, String logName) throws Exception {\n        String name = \"sos_logs/\" + logName;\n        this.add(new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8)), name);\n    }", "code_tokens": ["public", "void", "addLog", "(", "String", "content", ",", "String", "logName", ")", "throws", "Exception", "{", "String", "name", "=", "\"sos_logs/\"", "+", "logName", ";", "this", ".", "add", "(", "new", "ByteArrayInputStream", "(", "content", ".", "getBytes", "(", "StandardCharsets", ".", "UTF_8", ")", ")", ",", "name", ")", ";", "}"], "docstring": "Adds content to the zipfile in a file named logName\n\npath is prepended with the directory reserved for JDR log files\n\n@param content\n@param logName\n@throws Exception", "docstring_tokens": ["Adds", "content", "to", "the", "zipfile", "in", "a", "file", "named", "logName"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/util/JdrZipFile.java#L180-L183", "partition": "test", "index": 2523, "time": "2012-11-28 15:08:30"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java", "func_name": "DatabaseTimerPersistence.checkDatabase", "original_string": "private void checkDatabase() {\n        String loadTimer = sql(LOAD_TIMER);\n        Connection connection = null;\n        Statement statement = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            //test for the existence of the table by running the load timer query\n            connection = dataSource.getConnection();\n            if (connection.getTransactionIsolation() < Connection.TRANSACTION_READ_COMMITTED) {\n                EjbLogger.EJB3_TIMER_LOGGER.wrongTransactionIsolationConfiguredForTimer();\n            }\n            preparedStatement = connection.prepareStatement(loadTimer);\n            preparedStatement.setString(1, \"NON-EXISTENT\");\n            preparedStatement.setString(2, \"NON-EXISTENT\");\n            preparedStatement.setString(3, \"NON-EXISTENT\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException e) {\n            //the query failed, assume it is because the table does not exist\n            if (connection != null) {\n                try {\n                    String createTable = sql(CREATE_TABLE);\n                    String[] statements = createTable.split(\";\");\n                    for (final String sql : statements) {\n                        try {\n                            statement = connection.createStatement();\n                            statement.executeUpdate(sql);\n                        } finally {\n                            safeClose(statement);\n                        }\n                    }\n                } catch (SQLException e1) {\n                    EjbLogger.EJB3_TIMER_LOGGER.couldNotCreateTable(e1);\n                }\n            } else {\n                EjbLogger.EJB3_TIMER_LOGGER.couldNotCreateTable(e);\n            }\n        } finally {\n            safeClose(resultSet);\n            safeClose(preparedStatement);\n            safeClose(statement);\n            safeClose(connection);\n        }\n    }", "language": "java", "code": "private void checkDatabase() {\n        String loadTimer = sql(LOAD_TIMER);\n        Connection connection = null;\n        Statement statement = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            //test for the existence of the table by running the load timer query\n            connection = dataSource.getConnection();\n            if (connection.getTransactionIsolation() < Connection.TRANSACTION_READ_COMMITTED) {\n                EjbLogger.EJB3_TIMER_LOGGER.wrongTransactionIsolationConfiguredForTimer();\n            }\n            preparedStatement = connection.prepareStatement(loadTimer);\n            preparedStatement.setString(1, \"NON-EXISTENT\");\n            preparedStatement.setString(2, \"NON-EXISTENT\");\n            preparedStatement.setString(3, \"NON-EXISTENT\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException e) {\n            //the query failed, assume it is because the table does not exist\n            if (connection != null) {\n                try {\n                    String createTable = sql(CREATE_TABLE);\n                    String[] statements = createTable.split(\";\");\n                    for (final String sql : statements) {\n                        try {\n                            statement = connection.createStatement();\n                            statement.executeUpdate(sql);\n                        } finally {\n                            safeClose(statement);\n                        }\n                    }\n                } catch (SQLException e1) {\n                    EjbLogger.EJB3_TIMER_LOGGER.couldNotCreateTable(e1);\n                }\n            } else {\n                EjbLogger.EJB3_TIMER_LOGGER.couldNotCreateTable(e);\n            }\n        } finally {\n            safeClose(resultSet);\n            safeClose(preparedStatement);\n            safeClose(statement);\n            safeClose(connection);\n        }\n    }", "code_tokens": ["private", "void", "checkDatabase", "(", ")", "{", "String", "loadTimer", "=", "sql", "(", "LOAD_TIMER", ")", ";", "Connection", "connection", "=", "null", ";", "Statement", "statement", "=", "null", ";", "PreparedStatement", "preparedStatement", "=", "null", ";", "ResultSet", "resultSet", "=", "null", ";", "try", "{", "//test for the existence of the table by running the load timer query", "connection", "=", "dataSource", ".", "getConnection", "(", ")", ";", "if", "(", "connection", ".", "getTransactionIsolation", "(", ")", "<", "Connection", ".", "TRANSACTION_READ_COMMITTED", ")", "{", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "wrongTransactionIsolationConfiguredForTimer", "(", ")", ";", "}", "preparedStatement", "=", "connection", ".", "prepareStatement", "(", "loadTimer", ")", ";", "preparedStatement", ".", "setString", "(", "1", ",", "\"NON-EXISTENT\"", ")", ";", "preparedStatement", ".", "setString", "(", "2", ",", "\"NON-EXISTENT\"", ")", ";", "preparedStatement", ".", "setString", "(", "3", ",", "\"NON-EXISTENT\"", ")", ";", "resultSet", "=", "preparedStatement", ".", "executeQuery", "(", ")", ";", "}", "catch", "(", "SQLException", "e", ")", "{", "//the query failed, assume it is because the table does not exist", "if", "(", "connection", "!=", "null", ")", "{", "try", "{", "String", "createTable", "=", "sql", "(", "CREATE_TABLE", ")", ";", "String", "[", "]", "statements", "=", "createTable", ".", "split", "(", "\";\"", ")", ";", "for", "(", "final", "String", "sql", ":", "statements", ")", "{", "try", "{", "statement", "=", "connection", ".", "createStatement", "(", ")", ";", "statement", ".", "executeUpdate", "(", "sql", ")", ";", "}", "finally", "{", "safeClose", "(", "statement", ")", ";", "}", "}", "}", "catch", "(", "SQLException", "e1", ")", "{", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "couldNotCreateTable", "(", "e1", ")", ";", "}", "}", "else", "{", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "couldNotCreateTable", "(", "e", ")", ";", "}", "}", "finally", "{", "safeClose", "(", "resultSet", ")", ";", "safeClose", "(", "preparedStatement", ")", ";", "safeClose", "(", "statement", ")", ";", "safeClose", "(", "connection", ")", ";", "}", "}"], "docstring": "Checks whether the database transaction configuration is appropriate\nand create the timer table if necessary.", "docstring_tokens": ["Checks", "whether", "the", "database", "transaction", "configuration", "is", "appropriate", "and", "create", "the", "timer", "table", "if", "necessary", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java#L270-L313", "partition": "test", "index": 2612, "time": "2012-12-04 09:17:14"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java", "func_name": "VaultSession.vaultConfiguration", "original_string": "public String vaultConfiguration() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"/core-service=vault:add(vault-options=[\");\n        sb.append(\"(\\\"KEYSTORE_URL\\\" => \\\"\").append(keystoreURL).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"KEYSTORE_PASSWORD\\\" => \\\"\").append(keystoreMaskedPassword).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"KEYSTORE_ALIAS\\\" => \\\"\").append(vaultAlias).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"SALT\\\" => \\\"\").append(salt).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"ITERATION_COUNT\\\" => \\\"\").append(iterationCount).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"ENC_FILE_DIR\\\" => \\\"\").append(encryptionDirectory).append(\"\\\")\");\n        sb.append(\"])\");\n        return sb.toString();\n    }", "language": "java", "code": "public String vaultConfiguration() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"/core-service=vault:add(vault-options=[\");\n        sb.append(\"(\\\"KEYSTORE_URL\\\" => \\\"\").append(keystoreURL).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"KEYSTORE_PASSWORD\\\" => \\\"\").append(keystoreMaskedPassword).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"KEYSTORE_ALIAS\\\" => \\\"\").append(vaultAlias).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"SALT\\\" => \\\"\").append(salt).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"ITERATION_COUNT\\\" => \\\"\").append(iterationCount).append(\"\\\")\").append(\",\");\n        sb.append(\"(\\\"ENC_FILE_DIR\\\" => \\\"\").append(encryptionDirectory).append(\"\\\")\");\n        sb.append(\"])\");\n        return sb.toString();\n    }", "code_tokens": ["public", "String", "vaultConfiguration", "(", ")", "{", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "sb", ".", "append", "(", "\"/core-service=vault:add(vault-options=[\"", ")", ";", "sb", ".", "append", "(", "\"(\\\"KEYSTORE_URL\\\" => \\\"\"", ")", ".", "append", "(", "keystoreURL", ")", ".", "append", "(", "\"\\\")\"", ")", ".", "append", "(", "\",\"", ")", ";", "sb", ".", "append", "(", "\"(\\\"KEYSTORE_PASSWORD\\\" => \\\"\"", ")", ".", "append", "(", "keystoreMaskedPassword", ")", ".", "append", "(", "\"\\\")\"", ")", ".", "append", "(", "\",\"", ")", ";", "sb", ".", "append", "(", "\"(\\\"KEYSTORE_ALIAS\\\" => \\\"\"", ")", ".", "append", "(", "vaultAlias", ")", ".", "append", "(", "\"\\\")\"", ")", ".", "append", "(", "\",\"", ")", ";", "sb", ".", "append", "(", "\"(\\\"SALT\\\" => \\\"\"", ")", ".", "append", "(", "salt", ")", ".", "append", "(", "\"\\\")\"", ")", ".", "append", "(", "\",\"", ")", ";", "sb", ".", "append", "(", "\"(\\\"ITERATION_COUNT\\\" => \\\"\"", ")", ".", "append", "(", "iterationCount", ")", ".", "append", "(", "\"\\\")\"", ")", ".", "append", "(", "\",\"", ")", ";", "sb", ".", "append", "(", "\"(\\\"ENC_FILE_DIR\\\" => \\\"\"", ")", ".", "append", "(", "encryptionDirectory", ")", ".", "append", "(", "\"\\\")\"", ")", ";", "sb", ".", "append", "(", "\"])\"", ")", ";", "return", "sb", ".", "toString", "(", ")", ";", "}"], "docstring": "Returns vault configuration string in user readable form.\n@return", "docstring_tokens": ["Returns", "vault", "configuration", "string", "in", "user", "readable", "form", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java#L344-L355", "partition": "test", "index": 2796, "time": "2012-12-10 14:46:28"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/EJBComponentDescription.java", "func_name": "EJBComponentDescription.getAllContainerInterceptors", "original_string": "public Set<InterceptorDescription> getAllContainerInterceptors() {\n        if (this.allContainerInterceptors == null) {\n            this.allContainerInterceptors = new HashSet<InterceptorDescription>();\n            this.allContainerInterceptors.addAll(this.classLevelContainerInterceptors);\n            if (!this.excludeDefaultContainerInterceptors) {\n                this.allContainerInterceptors.addAll(this.defaultContainerInterceptors);\n            }\n            for (List<InterceptorDescription> interceptors : this.methodLevelContainerInterceptors.values()) {\n                this.allContainerInterceptors.addAll(interceptors);\n            }\n        }\n        return this.allContainerInterceptors;\n    }", "language": "java", "code": "public Set<InterceptorDescription> getAllContainerInterceptors() {\n        if (this.allContainerInterceptors == null) {\n            this.allContainerInterceptors = new HashSet<InterceptorDescription>();\n            this.allContainerInterceptors.addAll(this.classLevelContainerInterceptors);\n            if (!this.excludeDefaultContainerInterceptors) {\n                this.allContainerInterceptors.addAll(this.defaultContainerInterceptors);\n            }\n            for (List<InterceptorDescription> interceptors : this.methodLevelContainerInterceptors.values()) {\n                this.allContainerInterceptors.addAll(interceptors);\n            }\n        }\n        return this.allContainerInterceptors;\n    }", "code_tokens": ["public", "Set", "<", "InterceptorDescription", ">", "getAllContainerInterceptors", "(", ")", "{", "if", "(", "this", ".", "allContainerInterceptors", "==", "null", ")", "{", "this", ".", "allContainerInterceptors", "=", "new", "HashSet", "<", "InterceptorDescription", ">", "(", ")", ";", "this", ".", "allContainerInterceptors", ".", "addAll", "(", "this", ".", "classLevelContainerInterceptors", ")", ";", "if", "(", "!", "this", ".", "excludeDefaultContainerInterceptors", ")", "{", "this", ".", "allContainerInterceptors", ".", "addAll", "(", "this", ".", "defaultContainerInterceptors", ")", ";", "}", "for", "(", "List", "<", "InterceptorDescription", ">", "interceptors", ":", "this", ".", "methodLevelContainerInterceptors", ".", "values", "(", ")", ")", "{", "this", ".", "allContainerInterceptors", ".", "addAll", "(", "interceptors", ")", ";", "}", "}", "return", "this", ".", "allContainerInterceptors", ";", "}"], "docstring": "Returns a combined map of class and method level container interceptors", "docstring_tokens": ["Returns", "a", "combined", "map", "of", "class", "and", "method", "level", "container", "interceptors"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/EJBComponentDescription.java#L1106-L1118", "partition": "test", "index": 2694, "time": "2012-12-13 21:14:33"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/subsystems/datasources/Util.java", "func_name": "Util.getJndiName", "original_string": "public static String getJndiName(final OperationContext context, final ModelNode modelNode) throws OperationFailedException {\n        final String rawJndiName = JNDI_NAME.resolveModelAttribute(context, modelNode).asString();\n        return cleanJndiName(rawJndiName, modelNode.hasDefined(USE_JAVA_CONTEXT.getName()) && modelNode.get(USE_JAVA_CONTEXT.getName()).asBoolean());\n    }", "language": "java", "code": "public static String getJndiName(final OperationContext context, final ModelNode modelNode) throws OperationFailedException {\n        final String rawJndiName = JNDI_NAME.resolveModelAttribute(context, modelNode).asString();\n        return cleanJndiName(rawJndiName, modelNode.hasDefined(USE_JAVA_CONTEXT.getName()) && modelNode.get(USE_JAVA_CONTEXT.getName()).asBoolean());\n    }", "code_tokens": ["public", "static", "String", "getJndiName", "(", "final", "OperationContext", "context", ",", "final", "ModelNode", "modelNode", ")", "throws", "OperationFailedException", "{", "final", "String", "rawJndiName", "=", "JNDI_NAME", ".", "resolveModelAttribute", "(", "context", ",", "modelNode", ")", ".", "asString", "(", ")", ";", "return", "cleanJndiName", "(", "rawJndiName", ",", "modelNode", ".", "hasDefined", "(", "USE_JAVA_CONTEXT", ".", "getName", "(", ")", ")", "&&", "modelNode", ".", "get", "(", "USE_JAVA_CONTEXT", ".", "getName", "(", ")", ")", ".", "asBoolean", "(", ")", ")", ";", "}"], "docstring": "Extracts the raw JNDINAME value from the given model node, and depending on the value and\nthe value of any USE_JAVA_CONTEXT child node, converts the raw name into a compliant jndi name.\n\n@param modelNode the model node; either an operation or the model behind a datasource resource\n\n@return the compliant jndi name", "docstring_tokens": ["Extracts", "the", "raw", "JNDINAME", "value", "from", "the", "given", "model", "node", "and", "depending", "on", "the", "value", "and", "the", "value", "of", "any", "USE_JAVA_CONTEXT", "child", "node", "converts", "the", "raw", "name", "into", "a", "compliant", "jndi", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/subsystems/datasources/Util.java#L47-L50", "partition": "test", "index": 2576, "time": "2013-01-03 15:41:23"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/Injection.java", "func_name": "Injection.inject", "original_string": "@SuppressWarnings(\"unchecked\")\n    public void inject(Object object, String propertyName, Object propertyValue)\n            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n        inject(object, propertyName, propertyValue, null, false);\n    }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n    public void inject(Object object, String propertyName, Object propertyValue)\n            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n        inject(object, propertyName, propertyValue, null, false);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "void", "inject", "(", "Object", "object", ",", "String", "propertyName", ",", "Object", "propertyValue", ")", "throws", "NoSuchMethodException", ",", "IllegalAccessException", ",", "InvocationTargetException", "{", "inject", "(", "object", ",", "propertyName", ",", "propertyValue", ",", "null", ",", "false", ")", ";", "}"], "docstring": "Inject a value into an object property\n\n@param object        The object\n@param propertyName  The property name\n@param propertyValue The property value\n@throws NoSuchMethodException     If the property method cannot be found\n@throws IllegalAccessException    If the property method cannot be accessed\n@throws InvocationTargetException If the property method cannot be executed", "docstring_tokens": ["Inject", "a", "value", "into", "an", "object", "property"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/Injection.java#L67-L71", "partition": "test", "index": 2508, "time": "2013-01-04 13:38:50"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/WebComponentProcessor.java", "func_name": "WebComponentProcessor.getAllComponentClasses", "original_string": "private Set<String> getAllComponentClasses(DeploymentUnit deploymentUnit, CompositeIndex index, WarMetaData metaData, TldsMetaData tldsMetaData) {\n        final Set<String> classes = new HashSet<String>();\n        getAllComponentClasses(metaData.getMergedJBossWebMetaData(), classes);\n        if (tldsMetaData == null)\n            return classes;\n        if (tldsMetaData.getSharedTlds(deploymentUnit) != null)\n            for (TldMetaData tldMetaData : tldsMetaData.getSharedTlds(deploymentUnit)) {\n                getAllComponentClasses(tldMetaData, classes);\n            }\n        if (tldsMetaData.getTlds() != null)\n            for (Map.Entry<String, TldMetaData> tldMetaData : tldsMetaData.getTlds().entrySet()) {\n                getAllComponentClasses(tldMetaData.getValue(), classes);\n            }\n        getAllAsyncListenerClasses(index, classes);\n        return classes;\n    }", "language": "java", "code": "private Set<String> getAllComponentClasses(DeploymentUnit deploymentUnit, CompositeIndex index, WarMetaData metaData, TldsMetaData tldsMetaData) {\n        final Set<String> classes = new HashSet<String>();\n        getAllComponentClasses(metaData.getMergedJBossWebMetaData(), classes);\n        if (tldsMetaData == null)\n            return classes;\n        if (tldsMetaData.getSharedTlds(deploymentUnit) != null)\n            for (TldMetaData tldMetaData : tldsMetaData.getSharedTlds(deploymentUnit)) {\n                getAllComponentClasses(tldMetaData, classes);\n            }\n        if (tldsMetaData.getTlds() != null)\n            for (Map.Entry<String, TldMetaData> tldMetaData : tldsMetaData.getTlds().entrySet()) {\n                getAllComponentClasses(tldMetaData.getValue(), classes);\n            }\n        getAllAsyncListenerClasses(index, classes);\n        return classes;\n    }", "code_tokens": ["private", "Set", "<", "String", ">", "getAllComponentClasses", "(", "DeploymentUnit", "deploymentUnit", ",", "CompositeIndex", "index", ",", "WarMetaData", "metaData", ",", "TldsMetaData", "tldsMetaData", ")", "{", "final", "Set", "<", "String", ">", "classes", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "getAllComponentClasses", "(", "metaData", ".", "getMergedJBossWebMetaData", "(", ")", ",", "classes", ")", ";", "if", "(", "tldsMetaData", "==", "null", ")", "return", "classes", ";", "if", "(", "tldsMetaData", ".", "getSharedTlds", "(", "deploymentUnit", ")", "!=", "null", ")", "for", "(", "TldMetaData", "tldMetaData", ":", "tldsMetaData", ".", "getSharedTlds", "(", "deploymentUnit", ")", ")", "{", "getAllComponentClasses", "(", "tldMetaData", ",", "classes", ")", ";", "}", "if", "(", "tldsMetaData", ".", "getTlds", "(", ")", "!=", "null", ")", "for", "(", "Map", ".", "Entry", "<", "String", ",", "TldMetaData", ">", "tldMetaData", ":", "tldsMetaData", ".", "getTlds", "(", ")", ".", "entrySet", "(", ")", ")", "{", "getAllComponentClasses", "(", "tldMetaData", ".", "getValue", "(", ")", ",", "classes", ")", ";", "}", "getAllAsyncListenerClasses", "(", "index", ",", "classes", ")", ";", "return", "classes", ";", "}"], "docstring": "Gets all classes that are eligible for injection etc\n\n@param metaData\n@return", "docstring_tokens": ["Gets", "all", "classes", "that", "are", "eligible", "for", "injection", "etc"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/deployment/WebComponentProcessor.java#L149-L164", "partition": "test", "index": 2861, "time": "2013-02-20 15:18:12"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentProcessor.java", "func_name": "UndertowDeploymentProcessor.processManagement", "original_string": "void processManagement(final DeploymentUnit unit, JBossWebMetaData metaData) {\n        final DeploymentResourceSupport deploymentResourceSupport = unit.getAttachment(Attachments.DEPLOYMENT_RESOURCE_SUPPORT);\n        for (final JBossServletMetaData servlet : metaData.getServlets()) {\n            try {\n                final String name = servlet.getName();\n                final ModelNode node = deploymentResourceSupport.getDeploymentSubModel(UndertowExtension.SUBSYSTEM_NAME, PathElement.pathElement(\"servlet\", name));\n                node.get(\"servlet-class\").set(servlet.getServletClass());\n                node.get(\"servlet-name\").set(servlet.getServletName());\n            } catch (Exception e) {\n                // Should a failure in creating the mgmt view also make to the deployment to fail?\n                continue;\n            }\n        }\n\n    }", "language": "java", "code": "void processManagement(final DeploymentUnit unit, JBossWebMetaData metaData) {\n        final DeploymentResourceSupport deploymentResourceSupport = unit.getAttachment(Attachments.DEPLOYMENT_RESOURCE_SUPPORT);\n        for (final JBossServletMetaData servlet : metaData.getServlets()) {\n            try {\n                final String name = servlet.getName();\n                final ModelNode node = deploymentResourceSupport.getDeploymentSubModel(UndertowExtension.SUBSYSTEM_NAME, PathElement.pathElement(\"servlet\", name));\n                node.get(\"servlet-class\").set(servlet.getServletClass());\n                node.get(\"servlet-name\").set(servlet.getServletName());\n            } catch (Exception e) {\n                // Should a failure in creating the mgmt view also make to the deployment to fail?\n                continue;\n            }\n        }\n\n    }", "code_tokens": ["void", "processManagement", "(", "final", "DeploymentUnit", "unit", ",", "JBossWebMetaData", "metaData", ")", "{", "final", "DeploymentResourceSupport", "deploymentResourceSupport", "=", "unit", ".", "getAttachment", "(", "Attachments", ".", "DEPLOYMENT_RESOURCE_SUPPORT", ")", ";", "for", "(", "final", "JBossServletMetaData", "servlet", ":", "metaData", ".", "getServlets", "(", ")", ")", "{", "try", "{", "final", "String", "name", "=", "servlet", ".", "getName", "(", ")", ";", "final", "ModelNode", "node", "=", "deploymentResourceSupport", ".", "getDeploymentSubModel", "(", "UndertowExtension", ".", "SUBSYSTEM_NAME", ",", "PathElement", ".", "pathElement", "(", "\"servlet\"", ",", "name", ")", ")", ";", "node", ".", "get", "(", "\"servlet-class\"", ")", ".", "set", "(", "servlet", ".", "getServletClass", "(", ")", ")", ";", "node", ".", "get", "(", "\"servlet-name\"", ")", ".", "set", "(", "servlet", ".", "getServletName", "(", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "// Should a failure in creating the mgmt view also make to the deployment to fail?", "continue", ";", "}", "}", "}"], "docstring": "todo move to UndertowDeploymentService and use all registered servlets from Deployment instead of just one found by metadata", "docstring_tokens": ["todo", "move", "to", "UndertowDeploymentService", "and", "use", "all", "registered", "servlets", "from", "Deployment", "instead", "of", "just", "one", "found", "by", "metadata"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentProcessor.java#L539-L553", "partition": "test", "index": 2507, "time": "2013-02-20 15:18:12"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/WarAnnotationDeploymentProcessor.java", "func_name": "WarAnnotationDeploymentProcessor.deploy", "original_string": "public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        if (!DeploymentTypeMarker.isType(DeploymentType.WAR, deploymentUnit)) {\n            return; // Skip non web deployments\n        }\n\n        WarMetaData warMetaData = deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);\n        assert warMetaData != null;\n        Map<String, WebMetaData> annotationsMetaData = warMetaData.getAnnotationsMetaData();\n        if (annotationsMetaData == null) {\n            annotationsMetaData = new HashMap<String, WebMetaData>();\n            warMetaData.setAnnotationsMetaData(annotationsMetaData);\n        }\n        Map<ResourceRoot, Index> indexes = AnnotationIndexUtils.getAnnotationIndexes(deploymentUnit);\n\n        // Process lib/*.jar\n        for (final Entry<ResourceRoot, Index> entry : indexes.entrySet()) {\n            final Index jarIndex = entry.getValue();\n            annotationsMetaData.put(entry.getKey().getRootName(), processAnnotations(jarIndex));\n        }\n\n        Map<ModuleIdentifier, CompositeIndex> additionalModelAnnotations = deploymentUnit.getAttachment(Attachments.ADDITIONAL_ANNOTATION_INDEXES_BY_MODULE);\n        if (additionalModelAnnotations != null) {\n            final List<WebMetaData> additional = new ArrayList<WebMetaData>();\n            for (Entry<ModuleIdentifier, CompositeIndex> entry : additionalModelAnnotations.entrySet()) {\n                for(Index index : entry.getValue().getIndexes()) {\n                    additional.add(processAnnotations(index));\n                }\n            }\n            warMetaData.setAdditionalModuleAnnotationsMetadata(additional);\n        }\n    }", "language": "java", "code": "public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        if (!DeploymentTypeMarker.isType(DeploymentType.WAR, deploymentUnit)) {\n            return; // Skip non web deployments\n        }\n\n        WarMetaData warMetaData = deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY);\n        assert warMetaData != null;\n        Map<String, WebMetaData> annotationsMetaData = warMetaData.getAnnotationsMetaData();\n        if (annotationsMetaData == null) {\n            annotationsMetaData = new HashMap<String, WebMetaData>();\n            warMetaData.setAnnotationsMetaData(annotationsMetaData);\n        }\n        Map<ResourceRoot, Index> indexes = AnnotationIndexUtils.getAnnotationIndexes(deploymentUnit);\n\n        // Process lib/*.jar\n        for (final Entry<ResourceRoot, Index> entry : indexes.entrySet()) {\n            final Index jarIndex = entry.getValue();\n            annotationsMetaData.put(entry.getKey().getRootName(), processAnnotations(jarIndex));\n        }\n\n        Map<ModuleIdentifier, CompositeIndex> additionalModelAnnotations = deploymentUnit.getAttachment(Attachments.ADDITIONAL_ANNOTATION_INDEXES_BY_MODULE);\n        if (additionalModelAnnotations != null) {\n            final List<WebMetaData> additional = new ArrayList<WebMetaData>();\n            for (Entry<ModuleIdentifier, CompositeIndex> entry : additionalModelAnnotations.entrySet()) {\n                for(Index index : entry.getValue().getIndexes()) {\n                    additional.add(processAnnotations(index));\n                }\n            }\n            warMetaData.setAdditionalModuleAnnotationsMetadata(additional);\n        }\n    }", "code_tokens": ["public", "void", "deploy", "(", "final", "DeploymentPhaseContext", "phaseContext", ")", "throws", "DeploymentUnitProcessingException", "{", "final", "DeploymentUnit", "deploymentUnit", "=", "phaseContext", ".", "getDeploymentUnit", "(", ")", ";", "if", "(", "!", "DeploymentTypeMarker", ".", "isType", "(", "DeploymentType", ".", "WAR", ",", "deploymentUnit", ")", ")", "{", "return", ";", "// Skip non web deployments", "}", "WarMetaData", "warMetaData", "=", "deploymentUnit", ".", "getAttachment", "(", "WarMetaData", ".", "ATTACHMENT_KEY", ")", ";", "assert", "warMetaData", "!=", "null", ";", "Map", "<", "String", ",", "WebMetaData", ">", "annotationsMetaData", "=", "warMetaData", ".", "getAnnotationsMetaData", "(", ")", ";", "if", "(", "annotationsMetaData", "==", "null", ")", "{", "annotationsMetaData", "=", "new", "HashMap", "<", "String", ",", "WebMetaData", ">", "(", ")", ";", "warMetaData", ".", "setAnnotationsMetaData", "(", "annotationsMetaData", ")", ";", "}", "Map", "<", "ResourceRoot", ",", "Index", ">", "indexes", "=", "AnnotationIndexUtils", ".", "getAnnotationIndexes", "(", "deploymentUnit", ")", ";", "// Process lib/*.jar", "for", "(", "final", "Entry", "<", "ResourceRoot", ",", "Index", ">", "entry", ":", "indexes", ".", "entrySet", "(", ")", ")", "{", "final", "Index", "jarIndex", "=", "entry", ".", "getValue", "(", ")", ";", "annotationsMetaData", ".", "put", "(", "entry", ".", "getKey", "(", ")", ".", "getRootName", "(", ")", ",", "processAnnotations", "(", "jarIndex", ")", ")", ";", "}", "Map", "<", "ModuleIdentifier", ",", "CompositeIndex", ">", "additionalModelAnnotations", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "ADDITIONAL_ANNOTATION_INDEXES_BY_MODULE", ")", ";", "if", "(", "additionalModelAnnotations", "!=", "null", ")", "{", "final", "List", "<", "WebMetaData", ">", "additional", "=", "new", "ArrayList", "<", "WebMetaData", ">", "(", ")", ";", "for", "(", "Entry", "<", "ModuleIdentifier", ",", "CompositeIndex", ">", "entry", ":", "additionalModelAnnotations", ".", "entrySet", "(", ")", ")", "{", "for", "(", "Index", "index", ":", "entry", ".", "getValue", "(", ")", ".", "getIndexes", "(", ")", ")", "{", "additional", ".", "add", "(", "processAnnotations", "(", "index", ")", ")", ";", "}", "}", "warMetaData", ".", "setAdditionalModuleAnnotationsMetadata", "(", "additional", ")", ";", "}", "}"], "docstring": "Process web annotations.", "docstring_tokens": ["Process", "web", "annotations", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/deployment/WarAnnotationDeploymentProcessor.java#L108-L139", "partition": "test", "index": 2683, "time": "2013-02-20 15:18:12"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/security/SecurityActions.java", "func_name": "SecurityActions.popRunAsIdentity", "original_string": "static RunAs popRunAsIdentity(final SecurityContext sc) {\n        if (WildFlySecurityManager.isChecking()) {\n            return AccessController.doPrivileged(new PrivilegedAction<RunAs>() {\n                @Override\n                public RunAs run() {\n                    if (sc == null) {\n                        throw UndertowLogger.ROOT_LOGGER.noSecurityContext();\n                    }\n                    RunAs principal = sc.getOutgoingRunAs();\n                    sc.setOutgoingRunAs(null);\n                    return principal;\n                }\n            });\n        } else {\n            if (sc == null) {\n                throw UndertowLogger.ROOT_LOGGER.noSecurityContext();\n            }\n            RunAs principal = sc.getOutgoingRunAs();\n            sc.setOutgoingRunAs(null);\n            return principal;\n        }\n    }", "language": "java", "code": "static RunAs popRunAsIdentity(final SecurityContext sc) {\n        if (WildFlySecurityManager.isChecking()) {\n            return AccessController.doPrivileged(new PrivilegedAction<RunAs>() {\n                @Override\n                public RunAs run() {\n                    if (sc == null) {\n                        throw UndertowLogger.ROOT_LOGGER.noSecurityContext();\n                    }\n                    RunAs principal = sc.getOutgoingRunAs();\n                    sc.setOutgoingRunAs(null);\n                    return principal;\n                }\n            });\n        } else {\n            if (sc == null) {\n                throw UndertowLogger.ROOT_LOGGER.noSecurityContext();\n            }\n            RunAs principal = sc.getOutgoingRunAs();\n            sc.setOutgoingRunAs(null);\n            return principal;\n        }\n    }", "code_tokens": ["static", "RunAs", "popRunAsIdentity", "(", "final", "SecurityContext", "sc", ")", "{", "if", "(", "WildFlySecurityManager", ".", "isChecking", "(", ")", ")", "{", "return", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "<", "RunAs", ">", "(", ")", "{", "@", "Override", "public", "RunAs", "run", "(", ")", "{", "if", "(", "sc", "==", "null", ")", "{", "throw", "UndertowLogger", ".", "ROOT_LOGGER", ".", "noSecurityContext", "(", ")", ";", "}", "RunAs", "principal", "=", "sc", ".", "getOutgoingRunAs", "(", ")", ";", "sc", ".", "setOutgoingRunAs", "(", "null", ")", ";", "return", "principal", ";", "}", "}", ")", ";", "}", "else", "{", "if", "(", "sc", "==", "null", ")", "{", "throw", "UndertowLogger", ".", "ROOT_LOGGER", ".", "noSecurityContext", "(", ")", ";", "}", "RunAs", "principal", "=", "sc", ".", "getOutgoingRunAs", "(", ")", ";", "sc", ".", "setOutgoingRunAs", "(", "null", ")", ";", "return", "principal", ";", "}", "}"], "docstring": "Removes the run as identity\n\n@return the identity removed", "docstring_tokens": ["Removes", "the", "run", "as", "identity"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/security/SecurityActions.java#L179-L200", "partition": "test", "index": 2506, "time": "2013-02-20 15:18:12"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/security/SecurityActions.java", "func_name": "SecurityActions.setRunAsIdentity", "original_string": "static RunAs setRunAsIdentity(final RunAs principal, final SecurityContext sc) {\n        if (WildFlySecurityManager.isChecking()) {\n            return WildFlySecurityManager.doUnchecked(new PrivilegedAction<RunAs>() {\n\n                @Override\n                public RunAs run() {\n                    if (sc == null) {\n                        throw UndertowLogger.ROOT_LOGGER.noSecurityContext();\n                    }\n                    RunAs old = sc.getOutgoingRunAs();\n                    sc.setOutgoingRunAs(principal);\n                    return old;\n                }\n            });\n        } else {\n            if (sc == null) {\n                throw UndertowLogger.ROOT_LOGGER.noSecurityContext();\n            }\n            RunAs old = sc.getOutgoingRunAs();\n            sc.setOutgoingRunAs(principal);\n            return old;\n        }\n    }", "language": "java", "code": "static RunAs setRunAsIdentity(final RunAs principal, final SecurityContext sc) {\n        if (WildFlySecurityManager.isChecking()) {\n            return WildFlySecurityManager.doUnchecked(new PrivilegedAction<RunAs>() {\n\n                @Override\n                public RunAs run() {\n                    if (sc == null) {\n                        throw UndertowLogger.ROOT_LOGGER.noSecurityContext();\n                    }\n                    RunAs old = sc.getOutgoingRunAs();\n                    sc.setOutgoingRunAs(principal);\n                    return old;\n                }\n            });\n        } else {\n            if (sc == null) {\n                throw UndertowLogger.ROOT_LOGGER.noSecurityContext();\n            }\n            RunAs old = sc.getOutgoingRunAs();\n            sc.setOutgoingRunAs(principal);\n            return old;\n        }\n    }", "code_tokens": ["static", "RunAs", "setRunAsIdentity", "(", "final", "RunAs", "principal", ",", "final", "SecurityContext", "sc", ")", "{", "if", "(", "WildFlySecurityManager", ".", "isChecking", "(", ")", ")", "{", "return", "WildFlySecurityManager", ".", "doUnchecked", "(", "new", "PrivilegedAction", "<", "RunAs", ">", "(", ")", "{", "@", "Override", "public", "RunAs", "run", "(", ")", "{", "if", "(", "sc", "==", "null", ")", "{", "throw", "UndertowLogger", ".", "ROOT_LOGGER", ".", "noSecurityContext", "(", ")", ";", "}", "RunAs", "old", "=", "sc", ".", "getOutgoingRunAs", "(", ")", ";", "sc", ".", "setOutgoingRunAs", "(", "principal", ")", ";", "return", "old", ";", "}", "}", ")", ";", "}", "else", "{", "if", "(", "sc", "==", "null", ")", "{", "throw", "UndertowLogger", ".", "ROOT_LOGGER", ".", "noSecurityContext", "(", ")", ";", "}", "RunAs", "old", "=", "sc", ".", "getOutgoingRunAs", "(", ")", ";", "sc", ".", "setOutgoingRunAs", "(", "principal", ")", ";", "return", "old", ";", "}", "}"], "docstring": "Sets the run as identity\n\n@param principal the identity", "docstring_tokens": ["Sets", "the", "run", "as", "identity"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/security/SecurityActions.java#L150-L172", "partition": "test", "index": 2505, "time": "2013-02-20 15:18:12"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/WarStructureDeploymentProcessor.java", "func_name": "WarStructureDeploymentProcessor.createResourceRoots", "original_string": "private List<ResourceRoot> createResourceRoots(final VirtualFile deploymentRoot, final DeploymentUnit deploymentUnit) throws IOException, DeploymentUnitProcessingException {\n        final List<ResourceRoot> entries = new ArrayList<ResourceRoot>();\n        // WEB-INF classes\n        final VirtualFile webinfClasses = deploymentRoot.getChild(WEB_INF_CLASSES);\n        if (webinfClasses.exists()) {\n            final ResourceRoot webInfClassesRoot = new ResourceRoot(webinfClasses.getName(), webinfClasses, null);\n            ModuleRootMarker.mark(webInfClassesRoot);\n            entries.add(webInfClassesRoot);\n        }\n        // WEB-INF lib\n        Map<String, MountedDeploymentOverlay> overlays = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_OVERLAY_LOCATIONS);\n        final VirtualFile webinfLib = deploymentRoot.getChild(WEB_INF_LIB);\n        if (webinfLib.exists()) {\n            final List<VirtualFile> archives = webinfLib.getChildren(DEFAULT_WEB_INF_LIB_FILTER);\n            for (final VirtualFile archive : archives) {\n                try {\n\n                    String relativeName = archive.getPathNameRelativeTo(deploymentRoot);\n                    MountedDeploymentOverlay overlay = overlays.get(relativeName);\n                    Closeable closable = null;\n                    if(overlay != null) {\n                        overlay.remountAsZip(false);\n                    } else if (archive.isFile()) {\n                        closable = VFS.mountZip(archive, archive, TempFileProviderService.provider());\n                    } else {\n                        closable = null;\n                    }\n                    final ResourceRoot webInfArchiveRoot = new ResourceRoot(archive.getName(), archive, new MountHandle(closable));\n                    ModuleRootMarker.mark(webInfArchiveRoot);\n                    entries.add(webInfArchiveRoot);\n                } catch (IOException e) {\n                    throw new DeploymentUnitProcessingException(UndertowLogger.ROOT_LOGGER.failToProcessWebInfLib(archive), e);\n                }\n            }\n        }\n        return entries;\n    }", "language": "java", "code": "private List<ResourceRoot> createResourceRoots(final VirtualFile deploymentRoot, final DeploymentUnit deploymentUnit) throws IOException, DeploymentUnitProcessingException {\n        final List<ResourceRoot> entries = new ArrayList<ResourceRoot>();\n        // WEB-INF classes\n        final VirtualFile webinfClasses = deploymentRoot.getChild(WEB_INF_CLASSES);\n        if (webinfClasses.exists()) {\n            final ResourceRoot webInfClassesRoot = new ResourceRoot(webinfClasses.getName(), webinfClasses, null);\n            ModuleRootMarker.mark(webInfClassesRoot);\n            entries.add(webInfClassesRoot);\n        }\n        // WEB-INF lib\n        Map<String, MountedDeploymentOverlay> overlays = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_OVERLAY_LOCATIONS);\n        final VirtualFile webinfLib = deploymentRoot.getChild(WEB_INF_LIB);\n        if (webinfLib.exists()) {\n            final List<VirtualFile> archives = webinfLib.getChildren(DEFAULT_WEB_INF_LIB_FILTER);\n            for (final VirtualFile archive : archives) {\n                try {\n\n                    String relativeName = archive.getPathNameRelativeTo(deploymentRoot);\n                    MountedDeploymentOverlay overlay = overlays.get(relativeName);\n                    Closeable closable = null;\n                    if(overlay != null) {\n                        overlay.remountAsZip(false);\n                    } else if (archive.isFile()) {\n                        closable = VFS.mountZip(archive, archive, TempFileProviderService.provider());\n                    } else {\n                        closable = null;\n                    }\n                    final ResourceRoot webInfArchiveRoot = new ResourceRoot(archive.getName(), archive, new MountHandle(closable));\n                    ModuleRootMarker.mark(webInfArchiveRoot);\n                    entries.add(webInfArchiveRoot);\n                } catch (IOException e) {\n                    throw new DeploymentUnitProcessingException(UndertowLogger.ROOT_LOGGER.failToProcessWebInfLib(archive), e);\n                }\n            }\n        }\n        return entries;\n    }", "code_tokens": ["private", "List", "<", "ResourceRoot", ">", "createResourceRoots", "(", "final", "VirtualFile", "deploymentRoot", ",", "final", "DeploymentUnit", "deploymentUnit", ")", "throws", "IOException", ",", "DeploymentUnitProcessingException", "{", "final", "List", "<", "ResourceRoot", ">", "entries", "=", "new", "ArrayList", "<", "ResourceRoot", ">", "(", ")", ";", "// WEB-INF classes", "final", "VirtualFile", "webinfClasses", "=", "deploymentRoot", ".", "getChild", "(", "WEB_INF_CLASSES", ")", ";", "if", "(", "webinfClasses", ".", "exists", "(", ")", ")", "{", "final", "ResourceRoot", "webInfClassesRoot", "=", "new", "ResourceRoot", "(", "webinfClasses", ".", "getName", "(", ")", ",", "webinfClasses", ",", "null", ")", ";", "ModuleRootMarker", ".", "mark", "(", "webInfClassesRoot", ")", ";", "entries", ".", "add", "(", "webInfClassesRoot", ")", ";", "}", "// WEB-INF lib", "Map", "<", "String", ",", "MountedDeploymentOverlay", ">", "overlays", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "DEPLOYMENT_OVERLAY_LOCATIONS", ")", ";", "final", "VirtualFile", "webinfLib", "=", "deploymentRoot", ".", "getChild", "(", "WEB_INF_LIB", ")", ";", "if", "(", "webinfLib", ".", "exists", "(", ")", ")", "{", "final", "List", "<", "VirtualFile", ">", "archives", "=", "webinfLib", ".", "getChildren", "(", "DEFAULT_WEB_INF_LIB_FILTER", ")", ";", "for", "(", "final", "VirtualFile", "archive", ":", "archives", ")", "{", "try", "{", "String", "relativeName", "=", "archive", ".", "getPathNameRelativeTo", "(", "deploymentRoot", ")", ";", "MountedDeploymentOverlay", "overlay", "=", "overlays", ".", "get", "(", "relativeName", ")", ";", "Closeable", "closable", "=", "null", ";", "if", "(", "overlay", "!=", "null", ")", "{", "overlay", ".", "remountAsZip", "(", "false", ")", ";", "}", "else", "if", "(", "archive", ".", "isFile", "(", ")", ")", "{", "closable", "=", "VFS", ".", "mountZip", "(", "archive", ",", "archive", ",", "TempFileProviderService", ".", "provider", "(", ")", ")", ";", "}", "else", "{", "closable", "=", "null", ";", "}", "final", "ResourceRoot", "webInfArchiveRoot", "=", "new", "ResourceRoot", "(", "archive", ".", "getName", "(", ")", ",", "archive", ",", "new", "MountHandle", "(", "closable", ")", ")", ";", "ModuleRootMarker", ".", "mark", "(", "webInfArchiveRoot", ")", ";", "entries", ".", "add", "(", "webInfArchiveRoot", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "DeploymentUnitProcessingException", "(", "UndertowLogger", ".", "ROOT_LOGGER", ".", "failToProcessWebInfLib", "(", "archive", ")", ",", "e", ")", ";", "}", "}", "}", "return", "entries", ";", "}"], "docstring": "Create the resource roots for a .war deployment\n\n\n@param deploymentRoot the deployment root\n@return the resource roots\n@throws java.io.IOException for any error", "docstring_tokens": ["Create", "the", "resource", "roots", "for", "a", ".", "war", "deployment"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/deployment/WarStructureDeploymentProcessor.java#L199-L235", "partition": "test", "index": 2592, "time": "2013-02-20 15:18:12"}
{"repo": "wildfly/wildfly", "path": "xts/src/main/java/org/jboss/as/xts/XTSSubsystemParser.java", "func_name": "XTSSubsystemParser.parseDefaultContextPropagationElement", "original_string": "private void parseDefaultContextPropagationElement(XMLExtendedStreamReader reader, ModelNode subsystem) throws XMLStreamException {\n        processAttributes(reader, (index, attribute) -> {\n            final String value = reader.getAttributeValue(index);\n            switch (attribute) {\n                case ENABLED:\n                    if (value == null || (!value.toLowerCase().equals(\"true\") && !value.toLowerCase().equals(\"false\"))) {\n                        throw ParseUtils.invalidAttributeValue(reader, index);\n                    }\n                    DEFAULT_CONTEXT_PROPAGATION.parseAndSetParameter(value, subsystem, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, index);\n            }\n        });\n\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }", "language": "java", "code": "private void parseDefaultContextPropagationElement(XMLExtendedStreamReader reader, ModelNode subsystem) throws XMLStreamException {\n        processAttributes(reader, (index, attribute) -> {\n            final String value = reader.getAttributeValue(index);\n            switch (attribute) {\n                case ENABLED:\n                    if (value == null || (!value.toLowerCase().equals(\"true\") && !value.toLowerCase().equals(\"false\"))) {\n                        throw ParseUtils.invalidAttributeValue(reader, index);\n                    }\n                    DEFAULT_CONTEXT_PROPAGATION.parseAndSetParameter(value, subsystem, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, index);\n            }\n        });\n\n        // Handle elements\n        ParseUtils.requireNoContent(reader);\n    }", "code_tokens": ["private", "void", "parseDefaultContextPropagationElement", "(", "XMLExtendedStreamReader", "reader", ",", "ModelNode", "subsystem", ")", "throws", "XMLStreamException", "{", "processAttributes", "(", "reader", ",", "(", "index", ",", "attribute", ")", "->", "{", "final", "String", "value", "=", "reader", ".", "getAttributeValue", "(", "index", ")", ";", "switch", "(", "attribute", ")", "{", "case", "ENABLED", ":", "if", "(", "value", "==", "null", "||", "(", "!", "value", ".", "toLowerCase", "(", ")", ".", "equals", "(", "\"true\"", ")", "&&", "!", "value", ".", "toLowerCase", "(", ")", ".", "equals", "(", "\"false\"", ")", ")", ")", "{", "throw", "ParseUtils", ".", "invalidAttributeValue", "(", "reader", ",", "index", ")", ";", "}", "DEFAULT_CONTEXT_PROPAGATION", ".", "parseAndSetParameter", "(", "value", ",", "subsystem", ",", "reader", ")", ";", "break", ";", "default", ":", "throw", "ParseUtils", ".", "unexpectedAttribute", "(", "reader", ",", "index", ")", ";", "}", "}", ")", ";", "// Handle elements", "ParseUtils", ".", "requireNoContent", "(", "reader", ")", ";", "}"], "docstring": "Handle the enable-client-handler element.\n\n@param reader\n@param subsystem\n@throws XMLStreamException", "docstring_tokens": ["Handle", "the", "enable", "-", "client", "-", "handler", "element", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/xts/src/main/java/org/jboss/as/xts/XTSSubsystemParser.java#L190-L207", "partition": "test", "index": 2757, "time": "2013-03-01 14:02:50"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/util/MethodInfoHelper.java", "func_name": "MethodInfoHelper.getCanonicalParameterTypes", "original_string": "public static String[] getCanonicalParameterTypes(Method viewMethod) {\n        Class<?>[] parameterTypes = viewMethod.getParameterTypes();\n        if (parameterTypes == null) {\n            return NO_STRINGS;\n        }\n        String[] canonicalNames = new String[parameterTypes.length];\n        for (int i = 0; i < parameterTypes.length; i++) {\n            canonicalNames[i] = parameterTypes[i].getCanonicalName();\n        }\n        return canonicalNames;\n    }", "language": "java", "code": "public static String[] getCanonicalParameterTypes(Method viewMethod) {\n        Class<?>[] parameterTypes = viewMethod.getParameterTypes();\n        if (parameterTypes == null) {\n            return NO_STRINGS;\n        }\n        String[] canonicalNames = new String[parameterTypes.length];\n        for (int i = 0; i < parameterTypes.length; i++) {\n            canonicalNames[i] = parameterTypes[i].getCanonicalName();\n        }\n        return canonicalNames;\n    }", "code_tokens": ["public", "static", "String", "[", "]", "getCanonicalParameterTypes", "(", "Method", "viewMethod", ")", "{", "Class", "<", "?", ">", "[", "]", "parameterTypes", "=", "viewMethod", ".", "getParameterTypes", "(", ")", ";", "if", "(", "parameterTypes", "==", "null", ")", "{", "return", "NO_STRINGS", ";", "}", "String", "[", "]", "canonicalNames", "=", "new", "String", "[", "parameterTypes", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "parameterTypes", ".", "length", ";", "i", "++", ")", "{", "canonicalNames", "[", "i", "]", "=", "parameterTypes", "[", "i", "]", ".", "getCanonicalName", "(", ")", ";", "}", "return", "canonicalNames", ";", "}"], "docstring": "This method returns the class names of the parameters of the given method\nin canonical form. In case of a method without parameters it will return an empty\narray.\n\n<p>The canonical form is the one that is used in deployment descriptors.\n\n<p>Example: For the method <code>f(String[] arg0, String arg1, int)</code> this method will return\n<code>{\"java.lang.String[]\", \"java.lang.String\", \"int\"}</code>\n\n@param viewMethod\n@return", "docstring_tokens": ["This", "method", "returns", "the", "class", "names", "of", "the", "parameters", "of", "the", "given", "method", "in", "canonical", "form", ".", "In", "case", "of", "a", "method", "without", "parameters", "it", "will", "return", "an", "empty", "array", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/util/MethodInfoHelper.java#L54-L64", "partition": "test", "index": 2465, "time": "2013-03-15 11:59:45"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/SecurityDomainResourceDefinition.java", "func_name": "SecurityDomainResourceDefinition.waitForService", "original_string": "private static void waitForService(final ServiceController<?> controller) throws OperationFailedException {\n        if (controller.getState() == ServiceController.State.UP) return;\n\n        final StabilityMonitor monitor = new StabilityMonitor();\n        monitor.addController(controller);\n        try {\n            monitor.awaitStability(100, MILLISECONDS);\n        } catch (final InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw SecurityLogger.ROOT_LOGGER.interruptedWaitingForSecurityDomain(controller.getName().getSimpleName());\n        } finally {\n            monitor.removeController(controller);\n        }\n\n        if (controller.getState() != ServiceController.State.UP) {\n            throw SecurityLogger.ROOT_LOGGER.requiredSecurityDomainServiceNotAvailable(controller.getName().getSimpleName());\n        }\n    }", "language": "java", "code": "private static void waitForService(final ServiceController<?> controller) throws OperationFailedException {\n        if (controller.getState() == ServiceController.State.UP) return;\n\n        final StabilityMonitor monitor = new StabilityMonitor();\n        monitor.addController(controller);\n        try {\n            monitor.awaitStability(100, MILLISECONDS);\n        } catch (final InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw SecurityLogger.ROOT_LOGGER.interruptedWaitingForSecurityDomain(controller.getName().getSimpleName());\n        } finally {\n            monitor.removeController(controller);\n        }\n\n        if (controller.getState() != ServiceController.State.UP) {\n            throw SecurityLogger.ROOT_LOGGER.requiredSecurityDomainServiceNotAvailable(controller.getName().getSimpleName());\n        }\n    }", "code_tokens": ["private", "static", "void", "waitForService", "(", "final", "ServiceController", "<", "?", ">", "controller", ")", "throws", "OperationFailedException", "{", "if", "(", "controller", ".", "getState", "(", ")", "==", "ServiceController", ".", "State", ".", "UP", ")", "return", ";", "final", "StabilityMonitor", "monitor", "=", "new", "StabilityMonitor", "(", ")", ";", "monitor", ".", "addController", "(", "controller", ")", ";", "try", "{", "monitor", ".", "awaitStability", "(", "100", ",", "MILLISECONDS", ")", ";", "}", "catch", "(", "final", "InterruptedException", "e", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "interrupt", "(", ")", ";", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "interruptedWaitingForSecurityDomain", "(", "controller", ".", "getName", "(", ")", ".", "getSimpleName", "(", ")", ")", ";", "}", "finally", "{", "monitor", ".", "removeController", "(", "controller", ")", ";", "}", "if", "(", "controller", ".", "getState", "(", ")", "!=", "ServiceController", ".", "State", ".", "UP", ")", "{", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "requiredSecurityDomainServiceNotAvailable", "(", "controller", ".", "getName", "(", ")", ".", "getSimpleName", "(", ")", ")", ";", "}", "}"], "docstring": "Wait for the required service to start up and fail otherwise. This method is necessary when a runtime operation\nuses a service that might have been created within a composite operation.\n\nThis method will wait at most 100 millis.\n\n@param controller the service to wait for\n@throws OperationFailedException if the service is not available, or the thread was interrupted.", "docstring_tokens": ["Wait", "for", "the", "required", "service", "to", "start", "up", "and", "fail", "otherwise", ".", "This", "method", "is", "necessary", "when", "a", "runtime", "operation", "uses", "a", "service", "that", "might", "have", "been", "created", "within", "a", "composite", "operation", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/SecurityDomainResourceDefinition.java#L228-L245", "partition": "test", "index": 2790, "time": "2013-04-18 19:44:48"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/service/JPAService.java", "func_name": "JPAService.createManagementStatisticsResource", "original_string": "public static Resource createManagementStatisticsResource(\n            final ManagementAdaptor managementAdaptor,\n            final String scopedPersistenceUnitName,\n            final DeploymentUnit deploymentUnit) {\n\n        synchronized (existingResourceDescriptionResolver) {\n            final EntityManagerFactoryLookup entityManagerFactoryLookup = new EntityManagerFactoryLookup();\n            final Statistics statistics = managementAdaptor.getStatistics();\n\n\n            if (false == existingResourceDescriptionResolver.contains(managementAdaptor.getVersion())) {\n\n                // setup statistics (this used to be part of JPA subsystem startup)\n                ResourceDescriptionResolver resourceDescriptionResolver = new StandardResourceDescriptionResolver(\n                        statistics.getResourceBundleKeyPrefix(), statistics.getResourceBundleName(), statistics.getClass().getClassLoader()){\n                    private ResourceDescriptionResolver fallback = JPAExtension.getResourceDescriptionResolver();\n                    //add a fallback in case provider doesn't have all properties properly defined\n                    @Override\n                    public String getResourceAttributeDescription(String attributeName, Locale locale, ResourceBundle bundle) {\n                        if (bundle.containsKey(getBundleKey(attributeName))) {\n                            return super.getResourceAttributeDescription(attributeName, locale, bundle);\n                        }else{\n                            return fallback.getResourceAttributeDescription(attributeName, locale, fallback.getResourceBundle(locale));\n                        }\n                    }\n                };\n\n                PathElement subsystemPE = PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM, JPAExtension.SUBSYSTEM_NAME);\n                ManagementResourceRegistration deploymentResourceRegistration = deploymentUnit.getAttachment(DeploymentModelUtils.MUTABLE_REGISTRATION_ATTACHMENT);\n                ManagementResourceRegistration deploymentSubsystemRegistration =\n                        deploymentResourceRegistration.getSubModel(PathAddress.pathAddress(subsystemPE));\n                ManagementResourceRegistration subdeploymentSubsystemRegistration =\n                        deploymentResourceRegistration.getSubModel(PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.SUBDEPLOYMENT), subsystemPE));\n\n                ManagementResourceRegistration providerResource = deploymentSubsystemRegistration.registerSubModel(\n                        new ManagementResourceDefinition(PathElement.pathElement(managementAdaptor.getIdentificationLabel()), resourceDescriptionResolver, statistics, entityManagerFactoryLookup));\n                providerResource.registerReadOnlyAttribute(PersistenceUnitServiceHandler.SCOPED_UNIT_NAME, null);\n\n                providerResource = subdeploymentSubsystemRegistration.registerSubModel(\n                        new ManagementResourceDefinition(PathElement.pathElement(managementAdaptor.getIdentificationLabel()), resourceDescriptionResolver, statistics, entityManagerFactoryLookup));\n                providerResource.registerReadOnlyAttribute(PersistenceUnitServiceHandler.SCOPED_UNIT_NAME, null);\n\n                existingResourceDescriptionResolver.add(managementAdaptor.getVersion());\n            }\n            // create (per deployment) dynamic Resource implementation that can reflect the deployment specific names (e.g. jpa entity classname/Hibernate region name)\n            return new DynamicManagementStatisticsResource(statistics, scopedPersistenceUnitName, managementAdaptor.getIdentificationLabel(), entityManagerFactoryLookup);\n        }\n    }", "language": "java", "code": "public static Resource createManagementStatisticsResource(\n            final ManagementAdaptor managementAdaptor,\n            final String scopedPersistenceUnitName,\n            final DeploymentUnit deploymentUnit) {\n\n        synchronized (existingResourceDescriptionResolver) {\n            final EntityManagerFactoryLookup entityManagerFactoryLookup = new EntityManagerFactoryLookup();\n            final Statistics statistics = managementAdaptor.getStatistics();\n\n\n            if (false == existingResourceDescriptionResolver.contains(managementAdaptor.getVersion())) {\n\n                // setup statistics (this used to be part of JPA subsystem startup)\n                ResourceDescriptionResolver resourceDescriptionResolver = new StandardResourceDescriptionResolver(\n                        statistics.getResourceBundleKeyPrefix(), statistics.getResourceBundleName(), statistics.getClass().getClassLoader()){\n                    private ResourceDescriptionResolver fallback = JPAExtension.getResourceDescriptionResolver();\n                    //add a fallback in case provider doesn't have all properties properly defined\n                    @Override\n                    public String getResourceAttributeDescription(String attributeName, Locale locale, ResourceBundle bundle) {\n                        if (bundle.containsKey(getBundleKey(attributeName))) {\n                            return super.getResourceAttributeDescription(attributeName, locale, bundle);\n                        }else{\n                            return fallback.getResourceAttributeDescription(attributeName, locale, fallback.getResourceBundle(locale));\n                        }\n                    }\n                };\n\n                PathElement subsystemPE = PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM, JPAExtension.SUBSYSTEM_NAME);\n                ManagementResourceRegistration deploymentResourceRegistration = deploymentUnit.getAttachment(DeploymentModelUtils.MUTABLE_REGISTRATION_ATTACHMENT);\n                ManagementResourceRegistration deploymentSubsystemRegistration =\n                        deploymentResourceRegistration.getSubModel(PathAddress.pathAddress(subsystemPE));\n                ManagementResourceRegistration subdeploymentSubsystemRegistration =\n                        deploymentResourceRegistration.getSubModel(PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.SUBDEPLOYMENT), subsystemPE));\n\n                ManagementResourceRegistration providerResource = deploymentSubsystemRegistration.registerSubModel(\n                        new ManagementResourceDefinition(PathElement.pathElement(managementAdaptor.getIdentificationLabel()), resourceDescriptionResolver, statistics, entityManagerFactoryLookup));\n                providerResource.registerReadOnlyAttribute(PersistenceUnitServiceHandler.SCOPED_UNIT_NAME, null);\n\n                providerResource = subdeploymentSubsystemRegistration.registerSubModel(\n                        new ManagementResourceDefinition(PathElement.pathElement(managementAdaptor.getIdentificationLabel()), resourceDescriptionResolver, statistics, entityManagerFactoryLookup));\n                providerResource.registerReadOnlyAttribute(PersistenceUnitServiceHandler.SCOPED_UNIT_NAME, null);\n\n                existingResourceDescriptionResolver.add(managementAdaptor.getVersion());\n            }\n            // create (per deployment) dynamic Resource implementation that can reflect the deployment specific names (e.g. jpa entity classname/Hibernate region name)\n            return new DynamicManagementStatisticsResource(statistics, scopedPersistenceUnitName, managementAdaptor.getIdentificationLabel(), entityManagerFactoryLookup);\n        }\n    }", "code_tokens": ["public", "static", "Resource", "createManagementStatisticsResource", "(", "final", "ManagementAdaptor", "managementAdaptor", ",", "final", "String", "scopedPersistenceUnitName", ",", "final", "DeploymentUnit", "deploymentUnit", ")", "{", "synchronized", "(", "existingResourceDescriptionResolver", ")", "{", "final", "EntityManagerFactoryLookup", "entityManagerFactoryLookup", "=", "new", "EntityManagerFactoryLookup", "(", ")", ";", "final", "Statistics", "statistics", "=", "managementAdaptor", ".", "getStatistics", "(", ")", ";", "if", "(", "false", "==", "existingResourceDescriptionResolver", ".", "contains", "(", "managementAdaptor", ".", "getVersion", "(", ")", ")", ")", "{", "// setup statistics (this used to be part of JPA subsystem startup)", "ResourceDescriptionResolver", "resourceDescriptionResolver", "=", "new", "StandardResourceDescriptionResolver", "(", "statistics", ".", "getResourceBundleKeyPrefix", "(", ")", ",", "statistics", ".", "getResourceBundleName", "(", ")", ",", "statistics", ".", "getClass", "(", ")", ".", "getClassLoader", "(", ")", ")", "{", "private", "ResourceDescriptionResolver", "fallback", "=", "JPAExtension", ".", "getResourceDescriptionResolver", "(", ")", ";", "//add a fallback in case provider doesn't have all properties properly defined", "@", "Override", "public", "String", "getResourceAttributeDescription", "(", "String", "attributeName", ",", "Locale", "locale", ",", "ResourceBundle", "bundle", ")", "{", "if", "(", "bundle", ".", "containsKey", "(", "getBundleKey", "(", "attributeName", ")", ")", ")", "{", "return", "super", ".", "getResourceAttributeDescription", "(", "attributeName", ",", "locale", ",", "bundle", ")", ";", "}", "else", "{", "return", "fallback", ".", "getResourceAttributeDescription", "(", "attributeName", ",", "locale", ",", "fallback", ".", "getResourceBundle", "(", "locale", ")", ")", ";", "}", "}", "}", ";", "PathElement", "subsystemPE", "=", "PathElement", ".", "pathElement", "(", "ModelDescriptionConstants", ".", "SUBSYSTEM", ",", "JPAExtension", ".", "SUBSYSTEM_NAME", ")", ";", "ManagementResourceRegistration", "deploymentResourceRegistration", "=", "deploymentUnit", ".", "getAttachment", "(", "DeploymentModelUtils", ".", "MUTABLE_REGISTRATION_ATTACHMENT", ")", ";", "ManagementResourceRegistration", "deploymentSubsystemRegistration", "=", "deploymentResourceRegistration", ".", "getSubModel", "(", "PathAddress", ".", "pathAddress", "(", "subsystemPE", ")", ")", ";", "ManagementResourceRegistration", "subdeploymentSubsystemRegistration", "=", "deploymentResourceRegistration", ".", "getSubModel", "(", "PathAddress", ".", "pathAddress", "(", "PathElement", ".", "pathElement", "(", "ModelDescriptionConstants", ".", "SUBDEPLOYMENT", ")", ",", "subsystemPE", ")", ")", ";", "ManagementResourceRegistration", "providerResource", "=", "deploymentSubsystemRegistration", ".", "registerSubModel", "(", "new", "ManagementResourceDefinition", "(", "PathElement", ".", "pathElement", "(", "managementAdaptor", ".", "getIdentificationLabel", "(", ")", ")", ",", "resourceDescriptionResolver", ",", "statistics", ",", "entityManagerFactoryLookup", ")", ")", ";", "providerResource", ".", "registerReadOnlyAttribute", "(", "PersistenceUnitServiceHandler", ".", "SCOPED_UNIT_NAME", ",", "null", ")", ";", "providerResource", "=", "subdeploymentSubsystemRegistration", ".", "registerSubModel", "(", "new", "ManagementResourceDefinition", "(", "PathElement", ".", "pathElement", "(", "managementAdaptor", ".", "getIdentificationLabel", "(", ")", ")", ",", "resourceDescriptionResolver", ",", "statistics", ",", "entityManagerFactoryLookup", ")", ")", ";", "providerResource", ".", "registerReadOnlyAttribute", "(", "PersistenceUnitServiceHandler", ".", "SCOPED_UNIT_NAME", ",", "null", ")", ";", "existingResourceDescriptionResolver", ".", "add", "(", "managementAdaptor", ".", "getVersion", "(", ")", ")", ";", "}", "// create (per deployment) dynamic Resource implementation that can reflect the deployment specific names (e.g. jpa entity classname/Hibernate region name)", "return", "new", "DynamicManagementStatisticsResource", "(", "statistics", ",", "scopedPersistenceUnitName", ",", "managementAdaptor", ".", "getIdentificationLabel", "(", ")", ",", "entityManagerFactoryLookup", ")", ";", "}", "}"], "docstring": "Create single instance of management statistics resource per managementAdaptor version.\n\nManagementAccess\n\nThe persistence provider and jipijapa adapters will be in the same classloader,\neither a static module or included directly in the application.  Those are the two supported use\ncases for management of deployment persistence units also.\n\nFrom a management point of view, the requirements are:\n1.  show management statistics for static persistence provider modules and applications that have\ntheir own persistence provider module.\n\n2.  persistence provider adapters will provide a unique key that identifies the management version of supported\nmanagement statistics/operations.  For example, Hibernate 3.x might be 1.0, Hibernate 4.1/4.2 might\nbe version 2.0 and Hibernate 4.3 could be 2.0 also as long as its compatible (same stats) with 4.1/4.2.\nEventually, a Hibernate (later version) change in statistics is likely to happen, the management version\nwill be incremented.\n\n\n@param managementAdaptor the management adaptor that will provide statistics\n@param scopedPersistenceUnitName name of the persistence unit\n@param deploymentUnit deployment unit for the deployment requesting a resource\n@return the management resource", "docstring_tokens": ["Create", "single", "instance", "of", "management", "statistics", "resource", "per", "managementAdaptor", "version", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/service/JPAService.java#L132-L179", "partition": "test", "index": 2529, "time": "2013-04-25 17:19:58"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/container/TransactionScopedEntityManager.java", "func_name": "TransactionScopedEntityManager.getOrCreateTransactionScopedEntityManager", "original_string": "private EntityManager getOrCreateTransactionScopedEntityManager(\n            final EntityManagerFactory emf,\n            final String scopedPuName,\n            final Map properties,\n            final SynchronizationType synchronizationType) {\n        EntityManager entityManager = TransactionUtil.getTransactionScopedEntityManager(puScopedName, transactionSynchronizationRegistry);\n        if (entityManager == null) {\n            entityManager = createEntityManager(emf, properties, synchronizationType);\n            if (ROOT_LOGGER.isDebugEnabled()) {\n                ROOT_LOGGER.debugf(\"%s: created entity manager session %s\", TransactionUtil.getEntityManagerDetails(entityManager, scopedPuName),\n                        TransactionUtil.getTransaction(transactionManager).toString());\n            }\n            TransactionUtil.registerSynchronization(entityManager, scopedPuName, transactionSynchronizationRegistry, transactionManager);\n            TransactionUtil.putEntityManagerInTransactionRegistry(scopedPuName, entityManager, transactionSynchronizationRegistry);\n        }\n        else {\n            testForMixedSynchronizationTypes(emf, entityManager, puScopedName, synchronizationType, properties);\n            if (ROOT_LOGGER.isDebugEnabled()) {\n                ROOT_LOGGER.debugf(\"%s: reuse entity manager session already in tx %s\", TransactionUtil.getEntityManagerDetails(entityManager, scopedPuName),\n                        TransactionUtil.getTransaction(transactionManager).toString());\n            }\n        }\n        return entityManager;\n    }", "language": "java", "code": "private EntityManager getOrCreateTransactionScopedEntityManager(\n            final EntityManagerFactory emf,\n            final String scopedPuName,\n            final Map properties,\n            final SynchronizationType synchronizationType) {\n        EntityManager entityManager = TransactionUtil.getTransactionScopedEntityManager(puScopedName, transactionSynchronizationRegistry);\n        if (entityManager == null) {\n            entityManager = createEntityManager(emf, properties, synchronizationType);\n            if (ROOT_LOGGER.isDebugEnabled()) {\n                ROOT_LOGGER.debugf(\"%s: created entity manager session %s\", TransactionUtil.getEntityManagerDetails(entityManager, scopedPuName),\n                        TransactionUtil.getTransaction(transactionManager).toString());\n            }\n            TransactionUtil.registerSynchronization(entityManager, scopedPuName, transactionSynchronizationRegistry, transactionManager);\n            TransactionUtil.putEntityManagerInTransactionRegistry(scopedPuName, entityManager, transactionSynchronizationRegistry);\n        }\n        else {\n            testForMixedSynchronizationTypes(emf, entityManager, puScopedName, synchronizationType, properties);\n            if (ROOT_LOGGER.isDebugEnabled()) {\n                ROOT_LOGGER.debugf(\"%s: reuse entity manager session already in tx %s\", TransactionUtil.getEntityManagerDetails(entityManager, scopedPuName),\n                        TransactionUtil.getTransaction(transactionManager).toString());\n            }\n        }\n        return entityManager;\n    }", "code_tokens": ["private", "EntityManager", "getOrCreateTransactionScopedEntityManager", "(", "final", "EntityManagerFactory", "emf", ",", "final", "String", "scopedPuName", ",", "final", "Map", "properties", ",", "final", "SynchronizationType", "synchronizationType", ")", "{", "EntityManager", "entityManager", "=", "TransactionUtil", ".", "getTransactionScopedEntityManager", "(", "puScopedName", ",", "transactionSynchronizationRegistry", ")", ";", "if", "(", "entityManager", "==", "null", ")", "{", "entityManager", "=", "createEntityManager", "(", "emf", ",", "properties", ",", "synchronizationType", ")", ";", "if", "(", "ROOT_LOGGER", ".", "isDebugEnabled", "(", ")", ")", "{", "ROOT_LOGGER", ".", "debugf", "(", "\"%s: created entity manager session %s\"", ",", "TransactionUtil", ".", "getEntityManagerDetails", "(", "entityManager", ",", "scopedPuName", ")", ",", "TransactionUtil", ".", "getTransaction", "(", "transactionManager", ")", ".", "toString", "(", ")", ")", ";", "}", "TransactionUtil", ".", "registerSynchronization", "(", "entityManager", ",", "scopedPuName", ",", "transactionSynchronizationRegistry", ",", "transactionManager", ")", ";", "TransactionUtil", ".", "putEntityManagerInTransactionRegistry", "(", "scopedPuName", ",", "entityManager", ",", "transactionSynchronizationRegistry", ")", ";", "}", "else", "{", "testForMixedSynchronizationTypes", "(", "emf", ",", "entityManager", ",", "puScopedName", ",", "synchronizationType", ",", "properties", ")", ";", "if", "(", "ROOT_LOGGER", ".", "isDebugEnabled", "(", ")", ")", "{", "ROOT_LOGGER", ".", "debugf", "(", "\"%s: reuse entity manager session already in tx %s\"", ",", "TransactionUtil", ".", "getEntityManagerDetails", "(", "entityManager", ",", "scopedPuName", ")", ",", "TransactionUtil", ".", "getTransaction", "(", "transactionManager", ")", ".", "toString", "(", ")", ")", ";", "}", "}", "return", "entityManager", ";", "}"], "docstring": "get or create a Transactional entity manager.\nOnly call while a transaction is active in the current thread.\n\n@param emf\n@param scopedPuName\n@param properties\n@param synchronizationType\n@return", "docstring_tokens": ["get", "or", "create", "a", "Transactional", "entity", "manager", ".", "Only", "call", "while", "a", "transaction", "is", "active", "in", "the", "current", "thread", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/container/TransactionScopedEntityManager.java#L149-L172", "partition": "test", "index": 2637, "time": "2013-04-25 17:19:58"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/WildFlyProviderResolver.java", "func_name": "WildFlyProviderResolver.loadProviders", "original_string": "private List<ValidationProvider<?>> loadProviders(ClassLoader classLoader) {\n        @SuppressWarnings(\"rawtypes\")\n        Iterator<ValidationProvider> providerIterator = ServiceLoader.load(ValidationProvider.class, classLoader).iterator();\n        LinkedList<ValidationProvider<?>> providers = new LinkedList<ValidationProvider<?>>();\n\n        while (providerIterator.hasNext()) {\n            try {\n                ValidationProvider<?> provider = providerIterator.next();\n\n                // put Hibernate Validator to the beginning of the list\n                if (provider.getClass().getName().equals(\"org.hibernate.validator.HibernateValidator\")) {\n                    providers.addFirst(provider);\n                } else {\n                    providers.add(provider);\n                }\n            } catch (ServiceConfigurationError e) {\n                // ignore, because it can happen when multiple\n                // providers are present and some of them are not class loader\n                // compatible with our API.\n            }\n        }\n\n        return providers;\n    }", "language": "java", "code": "private List<ValidationProvider<?>> loadProviders(ClassLoader classLoader) {\n        @SuppressWarnings(\"rawtypes\")\n        Iterator<ValidationProvider> providerIterator = ServiceLoader.load(ValidationProvider.class, classLoader).iterator();\n        LinkedList<ValidationProvider<?>> providers = new LinkedList<ValidationProvider<?>>();\n\n        while (providerIterator.hasNext()) {\n            try {\n                ValidationProvider<?> provider = providerIterator.next();\n\n                // put Hibernate Validator to the beginning of the list\n                if (provider.getClass().getName().equals(\"org.hibernate.validator.HibernateValidator\")) {\n                    providers.addFirst(provider);\n                } else {\n                    providers.add(provider);\n                }\n            } catch (ServiceConfigurationError e) {\n                // ignore, because it can happen when multiple\n                // providers are present and some of them are not class loader\n                // compatible with our API.\n            }\n        }\n\n        return providers;\n    }", "code_tokens": ["private", "List", "<", "ValidationProvider", "<", "?", ">", ">", "loadProviders", "(", "ClassLoader", "classLoader", ")", "{", "@", "SuppressWarnings", "(", "\"rawtypes\"", ")", "Iterator", "<", "ValidationProvider", ">", "providerIterator", "=", "ServiceLoader", ".", "load", "(", "ValidationProvider", ".", "class", ",", "classLoader", ")", ".", "iterator", "(", ")", ";", "LinkedList", "<", "ValidationProvider", "<", "?", ">", ">", "providers", "=", "new", "LinkedList", "<", "ValidationProvider", "<", "?", ">", ">", "(", ")", ";", "while", "(", "providerIterator", ".", "hasNext", "(", ")", ")", "{", "try", "{", "ValidationProvider", "<", "?", ">", "provider", "=", "providerIterator", ".", "next", "(", ")", ";", "// put Hibernate Validator to the beginning of the list", "if", "(", "provider", ".", "getClass", "(", ")", ".", "getName", "(", ")", ".", "equals", "(", "\"org.hibernate.validator.HibernateValidator\"", ")", ")", "{", "providers", ".", "addFirst", "(", "provider", ")", ";", "}", "else", "{", "providers", ".", "add", "(", "provider", ")", ";", "}", "}", "catch", "(", "ServiceConfigurationError", "e", ")", "{", "// ignore, because it can happen when multiple", "// providers are present and some of them are not class loader", "// compatible with our API.", "}", "}", "return", "providers", ";", "}"], "docstring": "Retrieves the providers from the given loader, using the service loader mechanism.\n\n@param classLoader the class loader to use\n@return a list with providers retrieved via the given loader. May be empty but never {@code null}", "docstring_tokens": ["Retrieves", "the", "providers", "from", "the", "given", "loader", "using", "the", "service", "loader", "mechanism", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/WildFlyProviderResolver.java#L74-L97", "partition": "test", "index": 2500, "time": "2013-05-21 10:15:34"}
{"repo": "wildfly/wildfly", "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "func_name": "JSFDependencyProcessor.addCDIFlag", "original_string": "private void addCDIFlag(WarMetaData warMetaData, DeploymentUnit deploymentUnit) {\n        JBossWebMetaData webMetaData = warMetaData.getMergedJBossWebMetaData();\n        if (webMetaData == null) {\n            webMetaData = new JBossWebMetaData();\n            warMetaData.setMergedJBossWebMetaData(webMetaData);\n        }\n\n        List<ParamValueMetaData> contextParams = webMetaData.getContextParams();\n        if (contextParams == null) {\n            contextParams = new ArrayList<ParamValueMetaData>();\n        }\n\n        boolean isCDI = false;\n        final CapabilityServiceSupport support = deploymentUnit.getAttachment(Attachments.CAPABILITY_SERVICE_SUPPORT);\n        if (support.hasCapability(WELD_CAPABILITY_NAME)) {\n            isCDI = support.getOptionalCapabilityRuntimeAPI(WELD_CAPABILITY_NAME, WeldCapability.class).get()\n                    .isPartOfWeldDeployment(deploymentUnit);\n        }\n\n        ParamValueMetaData param = new ParamValueMetaData();\n        param.setParamName(IS_CDI_PARAM);\n        param.setParamValue(Boolean.toString(isCDI));\n        contextParams.add(param);\n\n        webMetaData.setContextParams(contextParams);\n    }", "language": "java", "code": "private void addCDIFlag(WarMetaData warMetaData, DeploymentUnit deploymentUnit) {\n        JBossWebMetaData webMetaData = warMetaData.getMergedJBossWebMetaData();\n        if (webMetaData == null) {\n            webMetaData = new JBossWebMetaData();\n            warMetaData.setMergedJBossWebMetaData(webMetaData);\n        }\n\n        List<ParamValueMetaData> contextParams = webMetaData.getContextParams();\n        if (contextParams == null) {\n            contextParams = new ArrayList<ParamValueMetaData>();\n        }\n\n        boolean isCDI = false;\n        final CapabilityServiceSupport support = deploymentUnit.getAttachment(Attachments.CAPABILITY_SERVICE_SUPPORT);\n        if (support.hasCapability(WELD_CAPABILITY_NAME)) {\n            isCDI = support.getOptionalCapabilityRuntimeAPI(WELD_CAPABILITY_NAME, WeldCapability.class).get()\n                    .isPartOfWeldDeployment(deploymentUnit);\n        }\n\n        ParamValueMetaData param = new ParamValueMetaData();\n        param.setParamName(IS_CDI_PARAM);\n        param.setParamValue(Boolean.toString(isCDI));\n        contextParams.add(param);\n\n        webMetaData.setContextParams(contextParams);\n    }", "code_tokens": ["private", "void", "addCDIFlag", "(", "WarMetaData", "warMetaData", ",", "DeploymentUnit", "deploymentUnit", ")", "{", "JBossWebMetaData", "webMetaData", "=", "warMetaData", ".", "getMergedJBossWebMetaData", "(", ")", ";", "if", "(", "webMetaData", "==", "null", ")", "{", "webMetaData", "=", "new", "JBossWebMetaData", "(", ")", ";", "warMetaData", ".", "setMergedJBossWebMetaData", "(", "webMetaData", ")", ";", "}", "List", "<", "ParamValueMetaData", ">", "contextParams", "=", "webMetaData", ".", "getContextParams", "(", ")", ";", "if", "(", "contextParams", "==", "null", ")", "{", "contextParams", "=", "new", "ArrayList", "<", "ParamValueMetaData", ">", "(", ")", ";", "}", "boolean", "isCDI", "=", "false", ";", "final", "CapabilityServiceSupport", "support", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "CAPABILITY_SERVICE_SUPPORT", ")", ";", "if", "(", "support", ".", "hasCapability", "(", "WELD_CAPABILITY_NAME", ")", ")", "{", "isCDI", "=", "support", ".", "getOptionalCapabilityRuntimeAPI", "(", "WELD_CAPABILITY_NAME", ",", "WeldCapability", ".", "class", ")", ".", "get", "(", ")", ".", "isPartOfWeldDeployment", "(", "deploymentUnit", ")", ";", "}", "ParamValueMetaData", "param", "=", "new", "ParamValueMetaData", "(", ")", ";", "param", ".", "setParamName", "(", "IS_CDI_PARAM", ")", ";", "param", ".", "setParamValue", "(", "Boolean", ".", "toString", "(", "isCDI", ")", ")", ";", "contextParams", ".", "add", "(", "param", ")", ";", "webMetaData", ".", "setContextParams", "(", "contextParams", ")", ";", "}"], "docstring": "a CDI ViewHandler.", "docstring_tokens": ["a", "CDI", "ViewHandler", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java#L171-L196", "partition": "test", "index": 2524, "time": "2013-05-23 09:57:58"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/util/Utils.java", "func_name": "Utils.getRootDeploymentUnit", "original_string": "public static DeploymentUnit getRootDeploymentUnit(DeploymentUnit deploymentUnit) {\n        if (deploymentUnit.getParent() == null) {\n            return deploymentUnit;\n        }\n        return deploymentUnit.getParent();\n    }", "language": "java", "code": "public static DeploymentUnit getRootDeploymentUnit(DeploymentUnit deploymentUnit) {\n        if (deploymentUnit.getParent() == null) {\n            return deploymentUnit;\n        }\n        return deploymentUnit.getParent();\n    }", "code_tokens": ["public", "static", "DeploymentUnit", "getRootDeploymentUnit", "(", "DeploymentUnit", "deploymentUnit", ")", "{", "if", "(", "deploymentUnit", ".", "getParent", "(", ")", "==", "null", ")", "{", "return", "deploymentUnit", ";", "}", "return", "deploymentUnit", ".", "getParent", "(", ")", ";", "}"], "docstring": "Returns the parent of the given deployment unit if such a parent exists. If the given deployment unit is the parent\ndeployment unit, it is returned.", "docstring_tokens": ["Returns", "the", "parent", "of", "the", "given", "deployment", "unit", "if", "such", "a", "parent", "exists", ".", "If", "the", "given", "deployment", "unit", "is", "the", "parent", "deployment", "unit", "it", "is", "returned", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/util/Utils.java#L52-L57", "partition": "test", "index": 2653, "time": "2013-06-04 10:11:11"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/Injection.java", "func_name": "Injection.argumentMatches", "original_string": "private boolean argumentMatches(String classType, String propertyType) {\n        return (classType.equals(propertyType))\n                || (classType.equals(\"java.lang.Byte\") && propertyType.equals(\"byte\"))\n                || (classType.equals(\"java.lang.Short\") && propertyType.equals(\"short\"))\n                || (classType.equals(\"java.lang.Integer\") && propertyType.equals(\"int\"))\n                || (classType.equals(\"java.lang.Long\") && propertyType.equals(\"long\"))\n                || (classType.equals(\"java.lang.Float\") && propertyType.equals(\"float\"))\n                || (classType.equals(\"java.lang.Double\") && propertyType.equals(\"double\"))\n                || (classType.equals(\"java.lang.Boolean\") && propertyType.equals(\"boolean\"))\n                || (classType.equals(\"java.lang.Character\") && propertyType.equals(\"char\"));\n    }", "language": "java", "code": "private boolean argumentMatches(String classType, String propertyType) {\n        return (classType.equals(propertyType))\n                || (classType.equals(\"java.lang.Byte\") && propertyType.equals(\"byte\"))\n                || (classType.equals(\"java.lang.Short\") && propertyType.equals(\"short\"))\n                || (classType.equals(\"java.lang.Integer\") && propertyType.equals(\"int\"))\n                || (classType.equals(\"java.lang.Long\") && propertyType.equals(\"long\"))\n                || (classType.equals(\"java.lang.Float\") && propertyType.equals(\"float\"))\n                || (classType.equals(\"java.lang.Double\") && propertyType.equals(\"double\"))\n                || (classType.equals(\"java.lang.Boolean\") && propertyType.equals(\"boolean\"))\n                || (classType.equals(\"java.lang.Character\") && propertyType.equals(\"char\"));\n    }", "code_tokens": ["private", "boolean", "argumentMatches", "(", "String", "classType", ",", "String", "propertyType", ")", "{", "return", "(", "classType", ".", "equals", "(", "propertyType", ")", ")", "||", "(", "classType", ".", "equals", "(", "\"java.lang.Byte\"", ")", "&&", "propertyType", ".", "equals", "(", "\"byte\"", ")", ")", "||", "(", "classType", ".", "equals", "(", "\"java.lang.Short\"", ")", "&&", "propertyType", ".", "equals", "(", "\"short\"", ")", ")", "||", "(", "classType", ".", "equals", "(", "\"java.lang.Integer\"", ")", "&&", "propertyType", ".", "equals", "(", "\"int\"", ")", ")", "||", "(", "classType", ".", "equals", "(", "\"java.lang.Long\"", ")", "&&", "propertyType", ".", "equals", "(", "\"long\"", ")", ")", "||", "(", "classType", ".", "equals", "(", "\"java.lang.Float\"", ")", "&&", "propertyType", ".", "equals", "(", "\"float\"", ")", ")", "||", "(", "classType", ".", "equals", "(", "\"java.lang.Double\"", ")", "&&", "propertyType", ".", "equals", "(", "\"double\"", ")", ")", "||", "(", "classType", ".", "equals", "(", "\"java.lang.Boolean\"", ")", "&&", "propertyType", ".", "equals", "(", "\"boolean\"", ")", ")", "||", "(", "classType", ".", "equals", "(", "\"java.lang.Character\"", ")", "&&", "propertyType", ".", "equals", "(", "\"char\"", ")", ")", ";", "}"], "docstring": "Compare the type of a class with the actual value\n\n@param classType    The class type\n@param propertyType The property type\n@return True if they match, or if there is a primitive mapping", "docstring_tokens": ["Compare", "the", "type", "of", "a", "class", "with", "the", "actual", "value"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/Injection.java#L163-L173", "partition": "test", "index": 2509, "time": "2013-06-13 13:02:10"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/config/Configuration.java", "func_name": "Configuration.allowTwoPhaseBootstrap", "original_string": "public static boolean allowTwoPhaseBootstrap(PersistenceUnitMetadata pu) {\n        boolean result = true;\n\n        if (EE_DEFAULT_DATASOURCE.equals(pu.getJtaDataSourceName())) {\n            result = false;\n        }\n        if (pu.getProperties().containsKey(Configuration.JPA_ALLOW_TWO_PHASE_BOOTSTRAP)) {\n            result = Boolean.parseBoolean(pu.getProperties().getProperty(Configuration.JPA_ALLOW_TWO_PHASE_BOOTSTRAP));\n        }\n        return result;\n    }", "language": "java", "code": "public static boolean allowTwoPhaseBootstrap(PersistenceUnitMetadata pu) {\n        boolean result = true;\n\n        if (EE_DEFAULT_DATASOURCE.equals(pu.getJtaDataSourceName())) {\n            result = false;\n        }\n        if (pu.getProperties().containsKey(Configuration.JPA_ALLOW_TWO_PHASE_BOOTSTRAP)) {\n            result = Boolean.parseBoolean(pu.getProperties().getProperty(Configuration.JPA_ALLOW_TWO_PHASE_BOOTSTRAP));\n        }\n        return result;\n    }", "code_tokens": ["public", "static", "boolean", "allowTwoPhaseBootstrap", "(", "PersistenceUnitMetadata", "pu", ")", "{", "boolean", "result", "=", "true", ";", "if", "(", "EE_DEFAULT_DATASOURCE", ".", "equals", "(", "pu", ".", "getJtaDataSourceName", "(", ")", ")", ")", "{", "result", "=", "false", ";", "}", "if", "(", "pu", ".", "getProperties", "(", ")", ".", "containsKey", "(", "Configuration", ".", "JPA_ALLOW_TWO_PHASE_BOOTSTRAP", ")", ")", "{", "result", "=", "Boolean", ".", "parseBoolean", "(", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "Configuration", ".", "JPA_ALLOW_TWO_PHASE_BOOTSTRAP", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Determine if two phase persistence unit start is allowed\n\n@param pu\n@return", "docstring_tokens": ["Determine", "if", "two", "phase", "persistence", "unit", "start", "is", "allowed"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/config/Configuration.java#L282-L292", "partition": "test", "index": 2595, "time": "2013-06-14 07:50:45"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.addAroundConstructInterceptor", "original_string": "public void addAroundConstructInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        aroundConstructInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "language": "java", "code": "public void addAroundConstructInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        aroundConstructInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "code_tokens": ["public", "void", "addAroundConstructInterceptor", "(", "InterceptorFactory", "interceptorFactory", ",", "int", "priority", ")", "{", "aroundConstructInterceptors", ".", "add", "(", "Collections", ".", "singletonList", "(", "interceptorFactory", ")", ",", "priority", ")", ";", "}"], "docstring": "Adds an around-construct interceptor\n\n@param interceptorFactory The interceptor to add\n@param priority           The priority", "docstring_tokens": ["Adds", "an", "around", "-", "construct", "interceptor"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L327-L329", "partition": "test", "index": 2813, "time": "2013-06-18 10:40:48"}
{"repo": "wildfly/wildfly", "path": "mod_cluster/undertow/src/main/java/org/wildfly/mod_cluster/undertow/metric/RunningRequestsHttpHandler.java", "func_name": "RunningRequestsHttpHandler.handleRequest", "original_string": "@Override\n    public void handleRequest(HttpServerExchange exchange) throws Exception {\n        runningCount.increment();\n\n        exchange.addExchangeCompleteListener(new ExchangeCompletionListener() {\n            @Override\n            public void exchangeEvent(HttpServerExchange exchange, NextListener nextListener) {\n                runningCount.decrement();\n\n                // Proceed to next listener must be called!\n                nextListener.proceed();\n            }\n        });\n\n        wrappedHandler.handleRequest(exchange);\n    }", "language": "java", "code": "@Override\n    public void handleRequest(HttpServerExchange exchange) throws Exception {\n        runningCount.increment();\n\n        exchange.addExchangeCompleteListener(new ExchangeCompletionListener() {\n            @Override\n            public void exchangeEvent(HttpServerExchange exchange, NextListener nextListener) {\n                runningCount.decrement();\n\n                // Proceed to next listener must be called!\n                nextListener.proceed();\n            }\n        });\n\n        wrappedHandler.handleRequest(exchange);\n    }", "code_tokens": ["@", "Override", "public", "void", "handleRequest", "(", "HttpServerExchange", "exchange", ")", "throws", "Exception", "{", "runningCount", ".", "increment", "(", ")", ";", "exchange", ".", "addExchangeCompleteListener", "(", "new", "ExchangeCompletionListener", "(", ")", "{", "@", "Override", "public", "void", "exchangeEvent", "(", "HttpServerExchange", "exchange", ",", "NextListener", "nextListener", ")", "{", "runningCount", ".", "decrement", "(", ")", ";", "// Proceed to next listener must be called!", "nextListener", ".", "proceed", "(", ")", ";", "}", "}", ")", ";", "wrappedHandler", ".", "handleRequest", "(", "exchange", ")", ";", "}"], "docstring": "Increments the counter and registers a listener to decrement the counter upon exchange complete event.", "docstring_tokens": ["Increments", "the", "counter", "and", "registers", "a", "listener", "to", "decrement", "the", "counter", "upon", "exchange", "complete", "event", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/mod_cluster/undertow/src/main/java/org/wildfly/mod_cluster/undertow/metric/RunningRequestsHttpHandler.java#L51-L66", "partition": "test", "index": 2537, "time": "2013-06-27 11:22:42"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/deployment/AbstractRuntimeMetricsHandler.java", "func_name": "AbstractRuntimeMetricsHandler.resolveRuntimeName", "original_string": "protected static String resolveRuntimeName(final OperationContext context, final PathElement address){\n        final ModelNode runtimeName = context.readResourceFromRoot(PathAddress.pathAddress(address),false).getModel()\n                .get(ModelDescriptionConstants.RUNTIME_NAME);\n            return runtimeName.asString();\n    }", "language": "java", "code": "protected static String resolveRuntimeName(final OperationContext context, final PathElement address){\n        final ModelNode runtimeName = context.readResourceFromRoot(PathAddress.pathAddress(address),false).getModel()\n                .get(ModelDescriptionConstants.RUNTIME_NAME);\n            return runtimeName.asString();\n    }", "code_tokens": ["protected", "static", "String", "resolveRuntimeName", "(", "final", "OperationContext", "context", ",", "final", "PathElement", "address", ")", "{", "final", "ModelNode", "runtimeName", "=", "context", ".", "readResourceFromRoot", "(", "PathAddress", ".", "pathAddress", "(", "address", ")", ",", "false", ")", ".", "getModel", "(", ")", ".", "get", "(", "ModelDescriptionConstants", ".", "RUNTIME_NAME", ")", ";", "return", "runtimeName", ".", "asString", "(", ")", ";", "}"], "docstring": "Resolves runtime name of model resource.\n@param context - operation context in which handler is invoked\n@param address - deployment address\n@return runtime name of module. Value which is returned is never null.", "docstring_tokens": ["Resolves", "runtime", "name", "of", "model", "resource", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/deployment/AbstractRuntimeMetricsHandler.java#L79-L83", "partition": "test", "index": 2553, "time": "2013-07-09 12:03:09"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/concurrent/ConcurrentContext.java", "func_name": "ConcurrentContext.saveContext", "original_string": "public SetupContextHandle saveContext(ContextService contextService, Map<String, String> contextObjectProperties) {\n        final List<SetupContextHandle> handles = new ArrayList<>(factoryOrderedList.size());\n        for (ContextHandleFactory factory : factoryOrderedList) {\n            handles.add(factory.saveContext(contextService, contextObjectProperties));\n        }\n        return new ChainedSetupContextHandle(this, handles);\n    }", "language": "java", "code": "public SetupContextHandle saveContext(ContextService contextService, Map<String, String> contextObjectProperties) {\n        final List<SetupContextHandle> handles = new ArrayList<>(factoryOrderedList.size());\n        for (ContextHandleFactory factory : factoryOrderedList) {\n            handles.add(factory.saveContext(contextService, contextObjectProperties));\n        }\n        return new ChainedSetupContextHandle(this, handles);\n    }", "code_tokens": ["public", "SetupContextHandle", "saveContext", "(", "ContextService", "contextService", ",", "Map", "<", "String", ",", "String", ">", "contextObjectProperties", ")", "{", "final", "List", "<", "SetupContextHandle", ">", "handles", "=", "new", "ArrayList", "<>", "(", "factoryOrderedList", ".", "size", "(", ")", ")", ";", "for", "(", "ContextHandleFactory", "factory", ":", "factoryOrderedList", ")", "{", "handles", ".", "add", "(", "factory", ".", "saveContext", "(", "contextService", ",", "contextObjectProperties", ")", ")", ";", "}", "return", "new", "ChainedSetupContextHandle", "(", "this", ",", "handles", ")", ";", "}"], "docstring": "Saves the current invocation context on a chained context handle.\n@param contextService\n@param contextObjectProperties\n@return", "docstring_tokens": ["Saves", "the", "current", "invocation", "context", "on", "a", "chained", "context", "handle", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/concurrent/ConcurrentContext.java#L138-L144", "partition": "test", "index": 2886, "time": "2013-09-10 11:07:44"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/concurrent/ConcurrentContext.java", "func_name": "ConcurrentContext.addFactory", "original_string": "public synchronized void addFactory(ContextHandleFactory factory) {\n        final String factoryName = factory.getName();\n        if(factoryMap.containsKey(factoryName)) {\n            throw EeLogger.ROOT_LOGGER.factoryAlreadyExists(this, factoryName);\n        }\n        factoryMap.put(factoryName, factory);\n        final Comparator<ContextHandleFactory> comparator = new Comparator<ContextHandleFactory>() {\n            @Override\n            public int compare(ContextHandleFactory o1, ContextHandleFactory o2) {\n                return Integer.compare(o1.getChainPriority(),o2.getChainPriority());\n            }\n        };\n        SortedSet<ContextHandleFactory> sortedSet = new TreeSet<>(comparator);\n        sortedSet.addAll(factoryMap.values());\n        factoryOrderedList = new ArrayList<>(sortedSet);\n    }", "language": "java", "code": "public synchronized void addFactory(ContextHandleFactory factory) {\n        final String factoryName = factory.getName();\n        if(factoryMap.containsKey(factoryName)) {\n            throw EeLogger.ROOT_LOGGER.factoryAlreadyExists(this, factoryName);\n        }\n        factoryMap.put(factoryName, factory);\n        final Comparator<ContextHandleFactory> comparator = new Comparator<ContextHandleFactory>() {\n            @Override\n            public int compare(ContextHandleFactory o1, ContextHandleFactory o2) {\n                return Integer.compare(o1.getChainPriority(),o2.getChainPriority());\n            }\n        };\n        SortedSet<ContextHandleFactory> sortedSet = new TreeSet<>(comparator);\n        sortedSet.addAll(factoryMap.values());\n        factoryOrderedList = new ArrayList<>(sortedSet);\n    }", "code_tokens": ["public", "synchronized", "void", "addFactory", "(", "ContextHandleFactory", "factory", ")", "{", "final", "String", "factoryName", "=", "factory", ".", "getName", "(", ")", ";", "if", "(", "factoryMap", ".", "containsKey", "(", "factoryName", ")", ")", "{", "throw", "EeLogger", ".", "ROOT_LOGGER", ".", "factoryAlreadyExists", "(", "this", ",", "factoryName", ")", ";", "}", "factoryMap", ".", "put", "(", "factoryName", ",", "factory", ")", ";", "final", "Comparator", "<", "ContextHandleFactory", ">", "comparator", "=", "new", "Comparator", "<", "ContextHandleFactory", ">", "(", ")", "{", "@", "Override", "public", "int", "compare", "(", "ContextHandleFactory", "o1", ",", "ContextHandleFactory", "o2", ")", "{", "return", "Integer", ".", "compare", "(", "o1", ".", "getChainPriority", "(", ")", ",", "o2", ".", "getChainPriority", "(", ")", ")", ";", "}", "}", ";", "SortedSet", "<", "ContextHandleFactory", ">", "sortedSet", "=", "new", "TreeSet", "<>", "(", "comparator", ")", ";", "sortedSet", ".", "addAll", "(", "factoryMap", ".", "values", "(", ")", ")", ";", "factoryOrderedList", "=", "new", "ArrayList", "<>", "(", "sortedSet", ")", ";", "}"], "docstring": "Adds a new factory.\n@param factory", "docstring_tokens": ["Adds", "a", "new", "factory", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/concurrent/ConcurrentContext.java#L115-L130", "partition": "test", "index": 2885, "time": "2013-09-10 11:07:44"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WSSubsystemAdd.java", "func_name": "WSSubsystemAdd.getServerConfigDependencies", "original_string": "private static List<ServiceName> getServerConfigDependencies(OperationContext context, boolean appclient) {\n        final List<ServiceName> serviceNames = new ArrayList<ServiceName>();\n        final Resource subsystemResource = context.readResourceFromRoot(PathAddress.pathAddress(WSExtension.SUBSYSTEM_PATH), false);\n        readConfigServiceNames(serviceNames, subsystemResource, Constants.CLIENT_CONFIG);\n        readConfigServiceNames(serviceNames, subsystemResource, Constants.ENDPOINT_CONFIG);\n        if (!appclient) {\n            serviceNames.add(CommonWebServer.SERVICE_NAME);\n        }\n        return serviceNames;\n    }", "language": "java", "code": "private static List<ServiceName> getServerConfigDependencies(OperationContext context, boolean appclient) {\n        final List<ServiceName> serviceNames = new ArrayList<ServiceName>();\n        final Resource subsystemResource = context.readResourceFromRoot(PathAddress.pathAddress(WSExtension.SUBSYSTEM_PATH), false);\n        readConfigServiceNames(serviceNames, subsystemResource, Constants.CLIENT_CONFIG);\n        readConfigServiceNames(serviceNames, subsystemResource, Constants.ENDPOINT_CONFIG);\n        if (!appclient) {\n            serviceNames.add(CommonWebServer.SERVICE_NAME);\n        }\n        return serviceNames;\n    }", "code_tokens": ["private", "static", "List", "<", "ServiceName", ">", "getServerConfigDependencies", "(", "OperationContext", "context", ",", "boolean", "appclient", ")", "{", "final", "List", "<", "ServiceName", ">", "serviceNames", "=", "new", "ArrayList", "<", "ServiceName", ">", "(", ")", ";", "final", "Resource", "subsystemResource", "=", "context", ".", "readResourceFromRoot", "(", "PathAddress", ".", "pathAddress", "(", "WSExtension", ".", "SUBSYSTEM_PATH", ")", ",", "false", ")", ";", "readConfigServiceNames", "(", "serviceNames", ",", "subsystemResource", ",", "Constants", ".", "CLIENT_CONFIG", ")", ";", "readConfigServiceNames", "(", "serviceNames", ",", "subsystemResource", ",", "Constants", ".", "ENDPOINT_CONFIG", ")", ";", "if", "(", "!", "appclient", ")", "{", "serviceNames", ".", "add", "(", "CommonWebServer", ".", "SERVICE_NAME", ")", ";", "}", "return", "serviceNames", ";", "}"], "docstring": "Process the model to figure out the name of the services the server config service has to depend on", "docstring_tokens": ["Process", "the", "model", "to", "figure", "out", "the", "name", "of", "the", "services", "the", "server", "config", "service", "has", "to", "depend", "on"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WSSubsystemAdd.java#L131-L140", "partition": "test", "index": 2471, "time": "2013-09-23 10:48:30"}
{"repo": "wildfly/wildfly", "path": "legacy/messaging/src/main/java/org/jboss/as/messaging/MessagingTransformers.java", "func_name": "MessagingTransformers.rejectDefinedAttributeWithDefaultValue", "original_string": "private static void rejectDefinedAttributeWithDefaultValue(ResourceTransformationDescriptionBuilder builder, AttributeDefinition... attrs) {\n        for (AttributeDefinition attr : attrs) {\n            builder.getAttributeBuilder()\n                    .setDiscard(new DiscardAttributeValueChecker(attr.getDefaultValue()), attr)\n                    .addRejectCheck(DEFINED, attr);\n        }\n    }", "language": "java", "code": "private static void rejectDefinedAttributeWithDefaultValue(ResourceTransformationDescriptionBuilder builder, AttributeDefinition... attrs) {\n        for (AttributeDefinition attr : attrs) {\n            builder.getAttributeBuilder()\n                    .setDiscard(new DiscardAttributeValueChecker(attr.getDefaultValue()), attr)\n                    .addRejectCheck(DEFINED, attr);\n        }\n    }", "code_tokens": ["private", "static", "void", "rejectDefinedAttributeWithDefaultValue", "(", "ResourceTransformationDescriptionBuilder", "builder", ",", "AttributeDefinition", "...", "attrs", ")", "{", "for", "(", "AttributeDefinition", "attr", ":", "attrs", ")", "{", "builder", ".", "getAttributeBuilder", "(", ")", ".", "setDiscard", "(", "new", "DiscardAttributeValueChecker", "(", "attr", ".", "getDefaultValue", "(", ")", ")", ",", "attr", ")", ".", "addRejectCheck", "(", "DEFINED", ",", "attr", ")", ";", "}", "}"], "docstring": "Reject the attributes if they are defined or discard them if they are undefined or set to their default value.", "docstring_tokens": ["Reject", "the", "attributes", "if", "they", "are", "defined", "or", "discard", "them", "if", "they", "are", "undefined", "or", "set", "to", "their", "default", "value", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/messaging/src/main/java/org/jboss/as/messaging/MessagingTransformers.java#L152-L158", "partition": "test", "index": 2840, "time": "2013-10-16 12:32:15"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/config/Configuration.java", "func_name": "Configuration.allowDefaultDataSourceUse", "original_string": "public static boolean allowDefaultDataSourceUse(PersistenceUnitMetadata pu) {\n        boolean result = true;\n        if (pu.getProperties().containsKey(Configuration.JPA_ALLOW_DEFAULT_DATA_SOURCE_USE)) {\n            result = Boolean.parseBoolean(pu.getProperties().getProperty(Configuration.JPA_ALLOW_DEFAULT_DATA_SOURCE_USE));\n        }\n        return result;\n    }", "language": "java", "code": "public static boolean allowDefaultDataSourceUse(PersistenceUnitMetadata pu) {\n        boolean result = true;\n        if (pu.getProperties().containsKey(Configuration.JPA_ALLOW_DEFAULT_DATA_SOURCE_USE)) {\n            result = Boolean.parseBoolean(pu.getProperties().getProperty(Configuration.JPA_ALLOW_DEFAULT_DATA_SOURCE_USE));\n        }\n        return result;\n    }", "code_tokens": ["public", "static", "boolean", "allowDefaultDataSourceUse", "(", "PersistenceUnitMetadata", "pu", ")", "{", "boolean", "result", "=", "true", ";", "if", "(", "pu", ".", "getProperties", "(", ")", ".", "containsKey", "(", "Configuration", ".", "JPA_ALLOW_DEFAULT_DATA_SOURCE_USE", ")", ")", "{", "result", "=", "Boolean", ".", "parseBoolean", "(", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "Configuration", ".", "JPA_ALLOW_DEFAULT_DATA_SOURCE_USE", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Determine if the default data-source should be used\n\n@param pu\n@return true if the default data-source should be used", "docstring_tokens": ["Determine", "if", "the", "default", "data", "-", "source", "should", "be", "used"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/config/Configuration.java#L300-L306", "partition": "test", "index": 2596, "time": "2013-10-23 19:21:47"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/security/jacc/WarJACCService.java", "func_name": "WarJACCService.getPatternType", "original_string": "static int getPatternType(String urlPattern) {\n        int type = EXACT;\n        if (urlPattern.startsWith(\"*.\"))\n            type = EXTENSION;\n        else if (urlPattern.startsWith(\"/\") && urlPattern.endsWith(\"/*\"))\n            type = PREFIX;\n        else if (urlPattern.equals(\"/\"))\n            type = DEFAULT;\n        return type;\n    }", "language": "java", "code": "static int getPatternType(String urlPattern) {\n        int type = EXACT;\n        if (urlPattern.startsWith(\"*.\"))\n            type = EXTENSION;\n        else if (urlPattern.startsWith(\"/\") && urlPattern.endsWith(\"/*\"))\n            type = PREFIX;\n        else if (urlPattern.equals(\"/\"))\n            type = DEFAULT;\n        return type;\n    }", "code_tokens": ["static", "int", "getPatternType", "(", "String", "urlPattern", ")", "{", "int", "type", "=", "EXACT", ";", "if", "(", "urlPattern", ".", "startsWith", "(", "\"*.\"", ")", ")", "type", "=", "EXTENSION", ";", "else", "if", "(", "urlPattern", ".", "startsWith", "(", "\"/\"", ")", "&&", "urlPattern", ".", "endsWith", "(", "\"/*\"", ")", ")", "type", "=", "PREFIX", ";", "else", "if", "(", "urlPattern", ".", "equals", "(", "\"/\"", ")", ")", "type", "=", "DEFAULT", ";", "return", "type", ";", "}"], "docstring": "Determine the url-pattern type\n\n@param urlPattern - the raw url-pattern value\n@return one of EXACT, EXTENSION, PREFIX, DEFAULT", "docstring_tokens": ["Determine", "the", "url", "-", "pattern", "type"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/security/jacc/WarJACCService.java#L433-L442", "partition": "test", "index": 2578, "time": "2013-11-06 11:17:46"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WSServerConfigAttributeHandler.java", "func_name": "WSServerConfigAttributeHandler.updateServerConfig", "original_string": "private boolean updateServerConfig(String attributeName, String value, boolean isRevert) throws OperationFailedException, DisabledOperationException {\n        final ServerConfigImpl config = (ServerConfigImpl) ServerConfigFactoryImpl.getConfig();\n        try {\n            if (MODIFY_WSDL_ADDRESS.equals(attributeName)) {\n                final boolean modifyWSDLAddress = value != null && Boolean.parseBoolean(value);\n                config.setModifySOAPAddress(modifyWSDLAddress, isRevert);\n            } else if (WSDL_HOST.equals(attributeName)) {\n                final String host = value != null ? value : null;\n                try {\n                    config.setWebServiceHost(host, isRevert);\n                } catch (final UnknownHostException e) {\n                    throw new OperationFailedException(e.getMessage(), e);\n                }\n            } else if (WSDL_PORT.equals(attributeName)) {\n                final int port = value != null ? Integer.parseInt(value) : -1;\n                config.setWebServicePort(port, isRevert);\n            } else if (WSDL_SECURE_PORT.equals(attributeName)) {\n                final int securePort = value != null ? Integer.parseInt(value) : -1;\n                config.setWebServiceSecurePort(securePort, isRevert);\n            } else if (WSDL_PATH_REWRITE_RULE.equals(attributeName)) {\n                final String path = value != null ? value : null;\n                config.setWebServicePathRewriteRule(path, isRevert);\n            } else if (WSDL_URI_SCHEME.equals(attributeName)) {\n                if (value == null || value.equals(\"http\") || value.equals(\"https\")) {\n                    config.setWebServiceUriScheme(value, isRevert);\n                } else {\n                    throw new IllegalArgumentException(attributeName + \" = \" + value);\n                }\n            } else if (STATISTICS_ENABLED.equals(attributeName)) {\n                final boolean enabled = value != null ? Boolean.parseBoolean(value) : false;\n                config.setStatisticsEnabled(enabled);\n            } else {\n                throw new IllegalArgumentException(attributeName);\n            }\n        } catch (DisabledOperationException doe) {\n            // the WS stack rejected the runtime update\n            if (!isRevert) {\n                return false;\n            } else {\n                throw doe;\n            }\n        }\n        return true;\n    }", "language": "java", "code": "private boolean updateServerConfig(String attributeName, String value, boolean isRevert) throws OperationFailedException, DisabledOperationException {\n        final ServerConfigImpl config = (ServerConfigImpl) ServerConfigFactoryImpl.getConfig();\n        try {\n            if (MODIFY_WSDL_ADDRESS.equals(attributeName)) {\n                final boolean modifyWSDLAddress = value != null && Boolean.parseBoolean(value);\n                config.setModifySOAPAddress(modifyWSDLAddress, isRevert);\n            } else if (WSDL_HOST.equals(attributeName)) {\n                final String host = value != null ? value : null;\n                try {\n                    config.setWebServiceHost(host, isRevert);\n                } catch (final UnknownHostException e) {\n                    throw new OperationFailedException(e.getMessage(), e);\n                }\n            } else if (WSDL_PORT.equals(attributeName)) {\n                final int port = value != null ? Integer.parseInt(value) : -1;\n                config.setWebServicePort(port, isRevert);\n            } else if (WSDL_SECURE_PORT.equals(attributeName)) {\n                final int securePort = value != null ? Integer.parseInt(value) : -1;\n                config.setWebServiceSecurePort(securePort, isRevert);\n            } else if (WSDL_PATH_REWRITE_RULE.equals(attributeName)) {\n                final String path = value != null ? value : null;\n                config.setWebServicePathRewriteRule(path, isRevert);\n            } else if (WSDL_URI_SCHEME.equals(attributeName)) {\n                if (value == null || value.equals(\"http\") || value.equals(\"https\")) {\n                    config.setWebServiceUriScheme(value, isRevert);\n                } else {\n                    throw new IllegalArgumentException(attributeName + \" = \" + value);\n                }\n            } else if (STATISTICS_ENABLED.equals(attributeName)) {\n                final boolean enabled = value != null ? Boolean.parseBoolean(value) : false;\n                config.setStatisticsEnabled(enabled);\n            } else {\n                throw new IllegalArgumentException(attributeName);\n            }\n        } catch (DisabledOperationException doe) {\n            // the WS stack rejected the runtime update\n            if (!isRevert) {\n                return false;\n            } else {\n                throw doe;\n            }\n        }\n        return true;\n    }", "code_tokens": ["private", "boolean", "updateServerConfig", "(", "String", "attributeName", ",", "String", "value", ",", "boolean", "isRevert", ")", "throws", "OperationFailedException", ",", "DisabledOperationException", "{", "final", "ServerConfigImpl", "config", "=", "(", "ServerConfigImpl", ")", "ServerConfigFactoryImpl", ".", "getConfig", "(", ")", ";", "try", "{", "if", "(", "MODIFY_WSDL_ADDRESS", ".", "equals", "(", "attributeName", ")", ")", "{", "final", "boolean", "modifyWSDLAddress", "=", "value", "!=", "null", "&&", "Boolean", ".", "parseBoolean", "(", "value", ")", ";", "config", ".", "setModifySOAPAddress", "(", "modifyWSDLAddress", ",", "isRevert", ")", ";", "}", "else", "if", "(", "WSDL_HOST", ".", "equals", "(", "attributeName", ")", ")", "{", "final", "String", "host", "=", "value", "!=", "null", "?", "value", ":", "null", ";", "try", "{", "config", ".", "setWebServiceHost", "(", "host", ",", "isRevert", ")", ";", "}", "catch", "(", "final", "UnknownHostException", "e", ")", "{", "throw", "new", "OperationFailedException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "else", "if", "(", "WSDL_PORT", ".", "equals", "(", "attributeName", ")", ")", "{", "final", "int", "port", "=", "value", "!=", "null", "?", "Integer", ".", "parseInt", "(", "value", ")", ":", "-", "1", ";", "config", ".", "setWebServicePort", "(", "port", ",", "isRevert", ")", ";", "}", "else", "if", "(", "WSDL_SECURE_PORT", ".", "equals", "(", "attributeName", ")", ")", "{", "final", "int", "securePort", "=", "value", "!=", "null", "?", "Integer", ".", "parseInt", "(", "value", ")", ":", "-", "1", ";", "config", ".", "setWebServiceSecurePort", "(", "securePort", ",", "isRevert", ")", ";", "}", "else", "if", "(", "WSDL_PATH_REWRITE_RULE", ".", "equals", "(", "attributeName", ")", ")", "{", "final", "String", "path", "=", "value", "!=", "null", "?", "value", ":", "null", ";", "config", ".", "setWebServicePathRewriteRule", "(", "path", ",", "isRevert", ")", ";", "}", "else", "if", "(", "WSDL_URI_SCHEME", ".", "equals", "(", "attributeName", ")", ")", "{", "if", "(", "value", "==", "null", "||", "value", ".", "equals", "(", "\"http\"", ")", "||", "value", ".", "equals", "(", "\"https\"", ")", ")", "{", "config", ".", "setWebServiceUriScheme", "(", "value", ",", "isRevert", ")", ";", "}", "else", "{", "throw", "new", "IllegalArgumentException", "(", "attributeName", "+", "\" = \"", "+", "value", ")", ";", "}", "}", "else", "if", "(", "STATISTICS_ENABLED", ".", "equals", "(", "attributeName", ")", ")", "{", "final", "boolean", "enabled", "=", "value", "!=", "null", "?", "Boolean", ".", "parseBoolean", "(", "value", ")", ":", "false", ";", "config", ".", "setStatisticsEnabled", "(", "enabled", ")", ";", "}", "else", "{", "throw", "new", "IllegalArgumentException", "(", "attributeName", ")", ";", "}", "}", "catch", "(", "DisabledOperationException", "doe", ")", "{", "// the WS stack rejected the runtime update", "if", "(", "!", "isRevert", ")", "{", "return", "false", ";", "}", "else", "{", "throw", "doe", ";", "}", "}", "return", "true", ";", "}"], "docstring": "Returns true if the update operation succeeds in modifying the runtime, false otherwise.\n\n@param attributeName\n@param value\n@return\n@throws OperationFailedException\n@throws DisabledOperationException", "docstring_tokens": ["Returns", "true", "if", "the", "update", "operation", "succeeds", "in", "modifying", "the", "runtime", "false", "otherwise", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WSServerConfigAttributeHandler.java#L103-L146", "partition": "test", "index": 2684, "time": "2013-11-06 18:14:37"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java", "func_name": "EndpointPublisherImpl.doPrepare", "original_string": "protected DeploymentUnit doPrepare(String context, ClassLoader loader,\n            Map<String, String> urlPatternToClassNameMap, JBossWebMetaData jbwmd, WebservicesMetaData metadata, JBossWebservicesMetaData jbwsMetadata) {\n        ClassLoader origClassLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        WSEndpointDeploymentUnit unit = new WSEndpointDeploymentUnit(loader, context, urlPatternToClassNameMap, jbwmd, metadata, jbwsMetadata);\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(ClassLoaderProvider.getDefaultProvider().getServerIntegrationClassLoader());\n            WSDeploymentBuilder.getInstance().build(unit);\n            return unit;\n        } finally {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(origClassLoader);\n        }\n    }", "language": "java", "code": "protected DeploymentUnit doPrepare(String context, ClassLoader loader,\n            Map<String, String> urlPatternToClassNameMap, JBossWebMetaData jbwmd, WebservicesMetaData metadata, JBossWebservicesMetaData jbwsMetadata) {\n        ClassLoader origClassLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged();\n        WSEndpointDeploymentUnit unit = new WSEndpointDeploymentUnit(loader, context, urlPatternToClassNameMap, jbwmd, metadata, jbwsMetadata);\n        try {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(ClassLoaderProvider.getDefaultProvider().getServerIntegrationClassLoader());\n            WSDeploymentBuilder.getInstance().build(unit);\n            return unit;\n        } finally {\n            WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(origClassLoader);\n        }\n    }", "code_tokens": ["protected", "DeploymentUnit", "doPrepare", "(", "String", "context", ",", "ClassLoader", "loader", ",", "Map", "<", "String", ",", "String", ">", "urlPatternToClassNameMap", ",", "JBossWebMetaData", "jbwmd", ",", "WebservicesMetaData", "metadata", ",", "JBossWebservicesMetaData", "jbwsMetadata", ")", "{", "ClassLoader", "origClassLoader", "=", "WildFlySecurityManager", ".", "getCurrentContextClassLoaderPrivileged", "(", ")", ";", "WSEndpointDeploymentUnit", "unit", "=", "new", "WSEndpointDeploymentUnit", "(", "loader", ",", "context", ",", "urlPatternToClassNameMap", ",", "jbwmd", ",", "metadata", ",", "jbwsMetadata", ")", ";", "try", "{", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "ClassLoaderProvider", ".", "getDefaultProvider", "(", ")", ".", "getServerIntegrationClassLoader", "(", ")", ")", ";", "WSDeploymentBuilder", ".", "getInstance", "(", ")", ".", "build", "(", "unit", ")", ";", "return", "unit", ";", "}", "finally", "{", "WildFlySecurityManager", ".", "setCurrentContextClassLoaderPrivileged", "(", "origClassLoader", ")", ";", "}", "}"], "docstring": "Prepare the ws Deployment and return a DeploymentUnit containing it\n\n@param context\n@param loader\n@param urlPatternToClassNameMap\n@param jbwmd\n@param metadata\n@param jbwsMetadata\n@return", "docstring_tokens": ["Prepare", "the", "ws", "Deployment", "and", "return", "a", "DeploymentUnit", "containing", "it"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/publish/EndpointPublisherImpl.java#L130-L141", "partition": "test", "index": 2892, "time": "2013-11-22 10:47:05"}
{"repo": "wildfly/wildfly", "path": "legacy/messaging/src/main/java/org/jboss/as/messaging/MessagingTransformers.java", "func_name": "MessagingTransformers.renameAttribute", "original_string": "private static void renameAttribute(ResourceTransformationDescriptionBuilder builder,\n                                        AttributeDefinition attribute, AttributeDefinition alias) {\n        builder.getAttributeBuilder().addRename(attribute, alias.getName());\n    }", "language": "java", "code": "private static void renameAttribute(ResourceTransformationDescriptionBuilder builder,\n                                        AttributeDefinition attribute, AttributeDefinition alias) {\n        builder.getAttributeBuilder().addRename(attribute, alias.getName());\n    }", "code_tokens": ["private", "static", "void", "renameAttribute", "(", "ResourceTransformationDescriptionBuilder", "builder", ",", "AttributeDefinition", "attribute", ",", "AttributeDefinition", "alias", ")", "{", "builder", ".", "getAttributeBuilder", "(", ")", ".", "addRename", "(", "attribute", ",", "alias", ".", "getName", "(", ")", ")", ";", "}"], "docstring": "Rename an attribute", "docstring_tokens": ["Rename", "an", "attribute"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/messaging/src/main/java/org/jboss/as/messaging/MessagingTransformers.java#L163-L166", "partition": "test", "index": 2841, "time": "2013-12-13 17:51:55"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/deployment/WeldDeployment.java", "func_name": "WeldDeployment.makeTopLevelBdasVisibleFromStaticModules", "original_string": "private void makeTopLevelBdasVisibleFromStaticModules() {\n        for (BeanDeploymentArchiveImpl bda : beanDeploymentArchives) {\n            if (bda.getBeanArchiveType().equals(BeanDeploymentArchiveImpl.BeanArchiveType.EXTERNAL) || bda.getBeanArchiveType().equals(BeanDeploymentArchiveImpl.BeanArchiveType.SYNTHETIC)) {\n                for (BeanDeploymentArchiveImpl topLevelBda : rootBeanDeploymentModule.getBeanDeploymentArchives()) {\n                    bda.addBeanDeploymentArchive(topLevelBda);\n                }\n            }\n        }\n    }", "language": "java", "code": "private void makeTopLevelBdasVisibleFromStaticModules() {\n        for (BeanDeploymentArchiveImpl bda : beanDeploymentArchives) {\n            if (bda.getBeanArchiveType().equals(BeanDeploymentArchiveImpl.BeanArchiveType.EXTERNAL) || bda.getBeanArchiveType().equals(BeanDeploymentArchiveImpl.BeanArchiveType.SYNTHETIC)) {\n                for (BeanDeploymentArchiveImpl topLevelBda : rootBeanDeploymentModule.getBeanDeploymentArchives()) {\n                    bda.addBeanDeploymentArchive(topLevelBda);\n                }\n            }\n        }\n    }", "code_tokens": ["private", "void", "makeTopLevelBdasVisibleFromStaticModules", "(", ")", "{", "for", "(", "BeanDeploymentArchiveImpl", "bda", ":", "beanDeploymentArchives", ")", "{", "if", "(", "bda", ".", "getBeanArchiveType", "(", ")", ".", "equals", "(", "BeanDeploymentArchiveImpl", ".", "BeanArchiveType", ".", "EXTERNAL", ")", "||", "bda", ".", "getBeanArchiveType", "(", ")", ".", "equals", "(", "BeanDeploymentArchiveImpl", ".", "BeanArchiveType", ".", "SYNTHETIC", ")", ")", "{", "for", "(", "BeanDeploymentArchiveImpl", "topLevelBda", ":", "rootBeanDeploymentModule", ".", "getBeanDeploymentArchives", "(", ")", ")", "{", "bda", ".", "addBeanDeploymentArchive", "(", "topLevelBda", ")", ";", "}", "}", "}", "}"], "docstring": "Adds additional edges to the accessibility graph that allow static CDI-enabled modules to inject beans from top-level deployment units", "docstring_tokens": ["Adds", "additional", "edges", "to", "the", "accessibility", "graph", "that", "allow", "static", "CDI", "-", "enabled", "modules", "to", "inject", "beans", "from", "top", "-", "level", "deployment", "units"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/deployment/WeldDeployment.java#L132-L140", "partition": "test", "index": 2477, "time": "2014-01-20 15:04:44"}
{"repo": "wildfly/wildfly", "path": "jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsSpringProcessor.java", "func_name": "JaxrsSpringProcessor.getResteasySpringVirtualFile", "original_string": "protected synchronized VirtualFile getResteasySpringVirtualFile() throws DeploymentUnitProcessingException {\n        if(resourceRoot != null) {\n            return resourceRoot;\n        }\n        try {\n            Module module = Module.getBootModuleLoader().loadModule(MODULE);\n            URL fileUrl = module.getClassLoader().getResource(JAR_LOCATION);\n\n            if (fileUrl == null) {\n                throw JaxrsLogger.JAXRS_LOGGER.noSpringIntegrationJar();\n            }\n            File dir = new File(fileUrl.toURI());\n            File file = null;\n            for (String jar : dir.list()) {\n                if (jar.endsWith(\".jar\")) {\n                    file = new File(dir, jar);\n                    break;\n                }\n            }\n            if (file == null) {\n                throw JaxrsLogger.JAXRS_LOGGER.noSpringIntegrationJar();\n            }\n            VirtualFile vf = VFS.getChild(file.toURI());\n            final Closeable mountHandle = VFS.mountZip(file, vf, TempFileProviderService.provider());\n            Service<Closeable> mountHandleService = new Service<Closeable>() {\n                public void start(StartContext startContext) throws StartException {\n                }\n\n                public void stop(StopContext stopContext) {\n                    VFSUtils.safeClose(mountHandle);\n                }\n\n                public Closeable getValue() throws IllegalStateException, IllegalArgumentException {\n                    return mountHandle;\n                }\n            };\n            ServiceBuilder<Closeable> builder = serviceTarget.addService(ServiceName.JBOSS.append(SERVICE_NAME),\n                    mountHandleService);\n            builder.setInitialMode(ServiceController.Mode.ACTIVE).install();\n            resourceRoot = vf;\n\n            return resourceRoot;\n        } catch (Exception e) {\n            throw new DeploymentUnitProcessingException(e);\n        }\n    }", "language": "java", "code": "protected synchronized VirtualFile getResteasySpringVirtualFile() throws DeploymentUnitProcessingException {\n        if(resourceRoot != null) {\n            return resourceRoot;\n        }\n        try {\n            Module module = Module.getBootModuleLoader().loadModule(MODULE);\n            URL fileUrl = module.getClassLoader().getResource(JAR_LOCATION);\n\n            if (fileUrl == null) {\n                throw JaxrsLogger.JAXRS_LOGGER.noSpringIntegrationJar();\n            }\n            File dir = new File(fileUrl.toURI());\n            File file = null;\n            for (String jar : dir.list()) {\n                if (jar.endsWith(\".jar\")) {\n                    file = new File(dir, jar);\n                    break;\n                }\n            }\n            if (file == null) {\n                throw JaxrsLogger.JAXRS_LOGGER.noSpringIntegrationJar();\n            }\n            VirtualFile vf = VFS.getChild(file.toURI());\n            final Closeable mountHandle = VFS.mountZip(file, vf, TempFileProviderService.provider());\n            Service<Closeable> mountHandleService = new Service<Closeable>() {\n                public void start(StartContext startContext) throws StartException {\n                }\n\n                public void stop(StopContext stopContext) {\n                    VFSUtils.safeClose(mountHandle);\n                }\n\n                public Closeable getValue() throws IllegalStateException, IllegalArgumentException {\n                    return mountHandle;\n                }\n            };\n            ServiceBuilder<Closeable> builder = serviceTarget.addService(ServiceName.JBOSS.append(SERVICE_NAME),\n                    mountHandleService);\n            builder.setInitialMode(ServiceController.Mode.ACTIVE).install();\n            resourceRoot = vf;\n\n            return resourceRoot;\n        } catch (Exception e) {\n            throw new DeploymentUnitProcessingException(e);\n        }\n    }", "code_tokens": ["protected", "synchronized", "VirtualFile", "getResteasySpringVirtualFile", "(", ")", "throws", "DeploymentUnitProcessingException", "{", "if", "(", "resourceRoot", "!=", "null", ")", "{", "return", "resourceRoot", ";", "}", "try", "{", "Module", "module", "=", "Module", ".", "getBootModuleLoader", "(", ")", ".", "loadModule", "(", "MODULE", ")", ";", "URL", "fileUrl", "=", "module", ".", "getClassLoader", "(", ")", ".", "getResource", "(", "JAR_LOCATION", ")", ";", "if", "(", "fileUrl", "==", "null", ")", "{", "throw", "JaxrsLogger", ".", "JAXRS_LOGGER", ".", "noSpringIntegrationJar", "(", ")", ";", "}", "File", "dir", "=", "new", "File", "(", "fileUrl", ".", "toURI", "(", ")", ")", ";", "File", "file", "=", "null", ";", "for", "(", "String", "jar", ":", "dir", ".", "list", "(", ")", ")", "{", "if", "(", "jar", ".", "endsWith", "(", "\".jar\"", ")", ")", "{", "file", "=", "new", "File", "(", "dir", ",", "jar", ")", ";", "break", ";", "}", "}", "if", "(", "file", "==", "null", ")", "{", "throw", "JaxrsLogger", ".", "JAXRS_LOGGER", ".", "noSpringIntegrationJar", "(", ")", ";", "}", "VirtualFile", "vf", "=", "VFS", ".", "getChild", "(", "file", ".", "toURI", "(", ")", ")", ";", "final", "Closeable", "mountHandle", "=", "VFS", ".", "mountZip", "(", "file", ",", "vf", ",", "TempFileProviderService", ".", "provider", "(", ")", ")", ";", "Service", "<", "Closeable", ">", "mountHandleService", "=", "new", "Service", "<", "Closeable", ">", "(", ")", "{", "public", "void", "start", "(", "StartContext", "startContext", ")", "throws", "StartException", "{", "}", "public", "void", "stop", "(", "StopContext", "stopContext", ")", "{", "VFSUtils", ".", "safeClose", "(", "mountHandle", ")", ";", "}", "public", "Closeable", "getValue", "(", ")", "throws", "IllegalStateException", ",", "IllegalArgumentException", "{", "return", "mountHandle", ";", "}", "}", ";", "ServiceBuilder", "<", "Closeable", ">", "builder", "=", "serviceTarget", ".", "addService", "(", "ServiceName", ".", "JBOSS", ".", "append", "(", "SERVICE_NAME", ")", ",", "mountHandleService", ")", ";", "builder", ".", "setInitialMode", "(", "ServiceController", ".", "Mode", ".", "ACTIVE", ")", ".", "install", "(", ")", ";", "resourceRoot", "=", "vf", ";", "return", "resourceRoot", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "DeploymentUnitProcessingException", "(", "e", ")", ";", "}", "}"], "docstring": "Lookup Seam integration resource loader.\n\n@return the Seam integration resource loader\n@throws DeploymentUnitProcessingException\nfor any error", "docstring_tokens": ["Lookup", "Seam", "integration", "resource", "loader", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsSpringProcessor.java#L89-L134", "partition": "test", "index": 2552, "time": "2014-02-06 13:23:19"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/ServletResourceManager.java", "func_name": "ServletResourceManager.list", "original_string": "public List<Resource> list(String path) {\n        try {\n            final List<Resource> ret = new ArrayList<>();\n\n            Resource res = deploymentResourceManager.getResource(path);\n            if (res != null) {\n                for (Resource child : res.list()) {\n                    ret.add(new ServletResource(this, child));\n                }\n            }\n            String p = path;\n            if (p.startsWith(\"/\")) {\n                p = p.substring(1);\n            }\n            if (overlays != null) {\n                for (VirtualFile overlay : overlays) {\n                    VirtualFile child = overlay.getChild(p);\n                    if (child.exists()) {\n                        VirtualFileResource vfsResource = new VirtualFileResource(overlay.getPhysicalFile(), child, path);\n                        for (Resource c : vfsResource.list()) {\n                            ret.add(new ServletResource(this, c));\n                        }\n                    }\n                }\n            }\n            return ret;\n        } catch (IOException e) {\n            throw new RuntimeException(e); //this method really should have thrown IOException\n        }\n    }", "language": "java", "code": "public List<Resource> list(String path) {\n        try {\n            final List<Resource> ret = new ArrayList<>();\n\n            Resource res = deploymentResourceManager.getResource(path);\n            if (res != null) {\n                for (Resource child : res.list()) {\n                    ret.add(new ServletResource(this, child));\n                }\n            }\n            String p = path;\n            if (p.startsWith(\"/\")) {\n                p = p.substring(1);\n            }\n            if (overlays != null) {\n                for (VirtualFile overlay : overlays) {\n                    VirtualFile child = overlay.getChild(p);\n                    if (child.exists()) {\n                        VirtualFileResource vfsResource = new VirtualFileResource(overlay.getPhysicalFile(), child, path);\n                        for (Resource c : vfsResource.list()) {\n                            ret.add(new ServletResource(this, c));\n                        }\n                    }\n                }\n            }\n            return ret;\n        } catch (IOException e) {\n            throw new RuntimeException(e); //this method really should have thrown IOException\n        }\n    }", "code_tokens": ["public", "List", "<", "Resource", ">", "list", "(", "String", "path", ")", "{", "try", "{", "final", "List", "<", "Resource", ">", "ret", "=", "new", "ArrayList", "<>", "(", ")", ";", "Resource", "res", "=", "deploymentResourceManager", ".", "getResource", "(", "path", ")", ";", "if", "(", "res", "!=", "null", ")", "{", "for", "(", "Resource", "child", ":", "res", ".", "list", "(", ")", ")", "{", "ret", ".", "add", "(", "new", "ServletResource", "(", "this", ",", "child", ")", ")", ";", "}", "}", "String", "p", "=", "path", ";", "if", "(", "p", ".", "startsWith", "(", "\"/\"", ")", ")", "{", "p", "=", "p", ".", "substring", "(", "1", ")", ";", "}", "if", "(", "overlays", "!=", "null", ")", "{", "for", "(", "VirtualFile", "overlay", ":", "overlays", ")", "{", "VirtualFile", "child", "=", "overlay", ".", "getChild", "(", "p", ")", ";", "if", "(", "child", ".", "exists", "(", ")", ")", "{", "VirtualFileResource", "vfsResource", "=", "new", "VirtualFileResource", "(", "overlay", ".", "getPhysicalFile", "(", ")", ",", "child", ",", "path", ")", ";", "for", "(", "Resource", "c", ":", "vfsResource", ".", "list", "(", ")", ")", "{", "ret", ".", "add", "(", "new", "ServletResource", "(", "this", ",", "c", ")", ")", ";", "}", "}", "}", "}", "return", "ret", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "//this method really should have thrown IOException", "}", "}"], "docstring": "Lists all children of a particular path, taking overlays into account\n\n@param path The path\n@return The list of children", "docstring_tokens": ["Lists", "all", "children", "of", "a", "particular", "path", "taking", "overlays", "into", "account"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/deployment/ServletResourceManager.java#L149-L178", "partition": "test", "index": 2679, "time": "2014-02-24 09:24:03"}
{"repo": "wildfly/wildfly", "path": "security/api/src/main/java/org/jboss/as/security/api/ConnectionSecurityContext.java", "func_name": "ConnectionSecurityContext.popIdentity", "original_string": "public static void popIdentity(final ContextStateCache stateCache) {\n        RemotingContext.setConnection(stateCache.getConnection());\n        SecurityContextAssociation.setSecurityContext(stateCache.getSecurityContext());\n    }", "language": "java", "code": "public static void popIdentity(final ContextStateCache stateCache) {\n        RemotingContext.setConnection(stateCache.getConnection());\n        SecurityContextAssociation.setSecurityContext(stateCache.getSecurityContext());\n    }", "code_tokens": ["public", "static", "void", "popIdentity", "(", "final", "ContextStateCache", "stateCache", ")", "{", "RemotingContext", ".", "setConnection", "(", "stateCache", ".", "getConnection", "(", ")", ")", ";", "SecurityContextAssociation", ".", "setSecurityContext", "(", "stateCache", ".", "getSecurityContext", "(", ")", ")", ";", "}"], "docstring": "Pop the identity previously associated and restore internal state to it's previous value.\n\n@param stateCache - The cache containing the state as it was when pushIdentity was called.", "docstring_tokens": ["Pop", "the", "identity", "previously", "associated", "and", "restore", "internal", "state", "to", "it", "s", "previous", "value", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/api/src/main/java/org/jboss/as/security/api/ConnectionSecurityContext.java#L119-L122", "partition": "test", "index": 2842, "time": "2014-03-03 20:28:46"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/security/JbossAuthorizationManager.java", "func_name": "JbossAuthorizationManager.requestURI", "original_string": "protected String requestURI(HttpServerExchange request) {\n        String uri = request.getRelativePath();\n        if (uri == null || uri.equals(\"/\")) {\n            uri = \"\";\n        }\n        return uri;\n    }", "language": "java", "code": "protected String requestURI(HttpServerExchange request) {\n        String uri = request.getRelativePath();\n        if (uri == null || uri.equals(\"/\")) {\n            uri = \"\";\n        }\n        return uri;\n    }", "code_tokens": ["protected", "String", "requestURI", "(", "HttpServerExchange", "request", ")", "{", "String", "uri", "=", "request", ".", "getRelativePath", "(", ")", ";", "if", "(", "uri", "==", "null", "||", "uri", ".", "equals", "(", "\"/\"", ")", ")", "{", "uri", "=", "\"\"", ";", "}", "return", "uri", ";", "}"], "docstring": "Get the canonical request URI from the request mapping data requestPath\n\n@param request\n@return the request URI path", "docstring_tokens": ["Get", "the", "canonical", "request", "URI", "from", "the", "request", "mapping", "data", "requestPath"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/security/JbossAuthorizationManager.java#L223-L229", "partition": "test", "index": 2769, "time": "2014-04-14 16:01:03"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getWebserviceMetadataEJBEndpoint", "original_string": "public static EJBEndpoint getWebserviceMetadataEJBEndpoint(final JAXWSDeployment jaxwsDeployment,\n                                                               final String className) {\n\n        java.util.List<EJBEndpoint> ejbEndpointList = jaxwsDeployment.getEjbEndpoints();\n        for (EJBEndpoint ejbEndpoint : ejbEndpointList) {\n            if (className.equals(ejbEndpoint.getClassName())) {\n                return ejbEndpoint;\n            }\n        }\n        return null;\n    }", "language": "java", "code": "public static EJBEndpoint getWebserviceMetadataEJBEndpoint(final JAXWSDeployment jaxwsDeployment,\n                                                               final String className) {\n\n        java.util.List<EJBEndpoint> ejbEndpointList = jaxwsDeployment.getEjbEndpoints();\n        for (EJBEndpoint ejbEndpoint : ejbEndpointList) {\n            if (className.equals(ejbEndpoint.getClassName())) {\n                return ejbEndpoint;\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "static", "EJBEndpoint", "getWebserviceMetadataEJBEndpoint", "(", "final", "JAXWSDeployment", "jaxwsDeployment", ",", "final", "String", "className", ")", "{", "java", ".", "util", ".", "List", "<", "EJBEndpoint", ">", "ejbEndpointList", "=", "jaxwsDeployment", ".", "getEjbEndpoints", "(", ")", ";", "for", "(", "EJBEndpoint", "ejbEndpoint", ":", "ejbEndpointList", ")", "{", "if", "(", "className", ".", "equals", "(", "ejbEndpoint", ".", "getClassName", "(", ")", ")", ")", "{", "return", "ejbEndpoint", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Returns an EJBEndpoint based upon fully qualified classname.\n@param jaxwsDeployment\n@param className\n@return", "docstring_tokens": ["Returns", "an", "EJBEndpoint", "based", "upon", "fully", "qualified", "classname", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L349-L359", "partition": "test", "index": 2674, "time": "2014-05-14 18:15:10"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java", "func_name": "ASHelper.getJBossWebserviceMetaDataPortComponent", "original_string": "public static JBossPortComponentMetaData getJBossWebserviceMetaDataPortComponent(\n        final DeploymentUnit unit, final String name) {\n\n        if (name != null) {\n            final JBossWebservicesMetaData jbossWebserviceMetaData = unit.getAttachment(JBOSS_WEBSERVICES_METADATA_KEY);\n\n            if (jbossWebserviceMetaData != null) {\n                JBossPortComponentMetaData[] portComponent = jbossWebserviceMetaData.getPortComponents();\n\n                if (portComponent != null) {\n                    for (JBossPortComponentMetaData component : portComponent) {\n                        if (name.equals(component.getEjbName())) {\n                            return component;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }", "language": "java", "code": "public static JBossPortComponentMetaData getJBossWebserviceMetaDataPortComponent(\n        final DeploymentUnit unit, final String name) {\n\n        if (name != null) {\n            final JBossWebservicesMetaData jbossWebserviceMetaData = unit.getAttachment(JBOSS_WEBSERVICES_METADATA_KEY);\n\n            if (jbossWebserviceMetaData != null) {\n                JBossPortComponentMetaData[] portComponent = jbossWebserviceMetaData.getPortComponents();\n\n                if (portComponent != null) {\n                    for (JBossPortComponentMetaData component : portComponent) {\n                        if (name.equals(component.getEjbName())) {\n                            return component;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "static", "JBossPortComponentMetaData", "getJBossWebserviceMetaDataPortComponent", "(", "final", "DeploymentUnit", "unit", ",", "final", "String", "name", ")", "{", "if", "(", "name", "!=", "null", ")", "{", "final", "JBossWebservicesMetaData", "jbossWebserviceMetaData", "=", "unit", ".", "getAttachment", "(", "JBOSS_WEBSERVICES_METADATA_KEY", ")", ";", "if", "(", "jbossWebserviceMetaData", "!=", "null", ")", "{", "JBossPortComponentMetaData", "[", "]", "portComponent", "=", "jbossWebserviceMetaData", ".", "getPortComponents", "(", ")", ";", "if", "(", "portComponent", "!=", "null", ")", "{", "for", "(", "JBossPortComponentMetaData", "component", ":", "portComponent", ")", "{", "if", "(", "name", ".", "equals", "(", "component", ".", "getEjbName", "(", ")", ")", ")", "{", "return", "component", ";", "}", "}", "}", "}", "}", "return", "null", ";", "}"], "docstring": "Return a named port-component from the jboss-webservices.xml\n@param unit\n@param name\n@return", "docstring_tokens": ["Return", "a", "named", "port", "-", "component", "from", "the", "jboss", "-", "webservices", ".", "xml"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/util/ASHelper.java#L322-L341", "partition": "test", "index": 2673, "time": "2014-05-14 18:15:10"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.createCompositeOperation", "original_string": "public static ModelNode createCompositeOperation(List<ModelNode> operations) {\n        ModelNode operation = Util.createOperation(ModelDescriptionConstants.COMPOSITE, PathAddress.EMPTY_ADDRESS);\n        ModelNode steps = operation.get(ModelDescriptionConstants.STEPS);\n        for (ModelNode step: operations) {\n            steps.add(step);\n        }\n        return operation;\n    }", "language": "java", "code": "public static ModelNode createCompositeOperation(List<ModelNode> operations) {\n        ModelNode operation = Util.createOperation(ModelDescriptionConstants.COMPOSITE, PathAddress.EMPTY_ADDRESS);\n        ModelNode steps = operation.get(ModelDescriptionConstants.STEPS);\n        for (ModelNode step: operations) {\n            steps.add(step);\n        }\n        return operation;\n    }", "code_tokens": ["public", "static", "ModelNode", "createCompositeOperation", "(", "List", "<", "ModelNode", ">", "operations", ")", "{", "ModelNode", "operation", "=", "Util", ".", "createOperation", "(", "ModelDescriptionConstants", ".", "COMPOSITE", ",", "PathAddress", ".", "EMPTY_ADDRESS", ")", ";", "ModelNode", "steps", "=", "operation", ".", "get", "(", "ModelDescriptionConstants", ".", "STEPS", ")", ";", "for", "(", "ModelNode", "step", ":", "operations", ")", "{", "steps", ".", "add", "(", "step", ")", ";", "}", "return", "operation", ";", "}"], "docstring": "Creates a composite operation using the specified operation steps.\n@param operations steps\n@return a composite operation", "docstring_tokens": ["Creates", "a", "composite", "operation", "using", "the", "specified", "operation", "steps", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L107-L114", "partition": "test", "index": 2491, "time": "2014-07-01 08:14:56"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.createReadAttributeOperation", "original_string": "public static ModelNode createReadAttributeOperation(PathAddress address, Attribute attribute) {\n        return createAttributeOperation(ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION, address, attribute);\n    }", "language": "java", "code": "public static ModelNode createReadAttributeOperation(PathAddress address, Attribute attribute) {\n        return createAttributeOperation(ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION, address, attribute);\n    }", "code_tokens": ["public", "static", "ModelNode", "createReadAttributeOperation", "(", "PathAddress", "address", ",", "Attribute", "attribute", ")", "{", "return", "createAttributeOperation", "(", "ModelDescriptionConstants", ".", "READ_ATTRIBUTE_OPERATION", ",", "address", ",", "attribute", ")", ";", "}"], "docstring": "Creates a read-attribute operation using the specified address and name.\n@param address a resource path\n@param attribute an attribute\n@return a read-attribute operation", "docstring_tokens": ["Creates", "a", "read", "-", "attribute", "operation", "using", "the", "specified", "address", "and", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L170-L172", "partition": "test", "index": 2494, "time": "2014-07-01 08:14:56"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.createWriteAttributeOperation", "original_string": "public static ModelNode createWriteAttributeOperation(PathAddress address, Attribute attribute, ModelNode value) {\n        ModelNode operation = createAttributeOperation(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION, address, attribute);\n        operation.get(ModelDescriptionConstants.VALUE).set(value);\n        return operation;\n    }", "language": "java", "code": "public static ModelNode createWriteAttributeOperation(PathAddress address, Attribute attribute, ModelNode value) {\n        ModelNode operation = createAttributeOperation(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION, address, attribute);\n        operation.get(ModelDescriptionConstants.VALUE).set(value);\n        return operation;\n    }", "code_tokens": ["public", "static", "ModelNode", "createWriteAttributeOperation", "(", "PathAddress", "address", ",", "Attribute", "attribute", ",", "ModelNode", "value", ")", "{", "ModelNode", "operation", "=", "createAttributeOperation", "(", "ModelDescriptionConstants", ".", "WRITE_ATTRIBUTE_OPERATION", ",", "address", ",", "attribute", ")", ";", "operation", ".", "get", "(", "ModelDescriptionConstants", ".", "VALUE", ")", ".", "set", "(", "value", ")", ";", "return", "operation", ";", "}"], "docstring": "Creates a write-attribute operation using the specified address, name and value.\n@param address a resource path\n@param attribute an attribute\n@param value an attribute value\n@return a write-attribute operation", "docstring_tokens": ["Creates", "a", "write", "-", "attribute", "operation", "using", "the", "specified", "address", "name", "and", "value", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L181-L185", "partition": "test", "index": 2495, "time": "2014-07-01 08:14:56"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java", "func_name": "DatabaseTimerPersistence.extractDialects", "original_string": "private void extractDialects() {\n        for (Object prop : sql.keySet()) {\n            int dot = ((String)prop).indexOf('.');\n            if (dot > 0) {\n                databaseDialects.add(((String)prop).substring(dot+1));\n            }\n        }\n    }", "language": "java", "code": "private void extractDialects() {\n        for (Object prop : sql.keySet()) {\n            int dot = ((String)prop).indexOf('.');\n            if (dot > 0) {\n                databaseDialects.add(((String)prop).substring(dot+1));\n            }\n        }\n    }", "code_tokens": ["private", "void", "extractDialects", "(", ")", "{", "for", "(", "Object", "prop", ":", "sql", ".", "keySet", "(", ")", ")", "{", "int", "dot", "=", "(", "(", "String", ")", "prop", ")", ".", "indexOf", "(", "'", "'", ")", ";", "if", "(", "dot", ">", "0", ")", "{", "databaseDialects", ".", "add", "(", "(", "(", "String", ")", "prop", ")", ".", "substring", "(", "dot", "+", "1", ")", ")", ";", "}", "}", "}"], "docstring": "Read the properties from the timer-sql and extract the database dialects.", "docstring_tokens": ["Read", "the", "properties", "from", "the", "timer", "-", "sql", "and", "extract", "the", "database", "dialects", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java#L187-L194", "partition": "test", "index": 2609, "time": "2014-07-12 21:11:26"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java", "func_name": "DatabaseTimerPersistence.investigateDialect", "original_string": "private void investigateDialect() {\n        Connection connection = null;\n\n        if (database == null) {\n            // no database dialect from configuration guessing from MetaData\n            try {\n                connection = dataSource.getConnection();\n                DatabaseMetaData metaData = connection.getMetaData();\n                String dbProduct = metaData.getDatabaseProductName();\n                database = identifyDialect(dbProduct);\n\n                if (database == null) {\n                    EjbLogger.EJB3_TIMER_LOGGER.debug(\"Attempting to guess on driver name.\");\n                    database = identifyDialect(metaData.getDriverName());\n                }\n            } catch (Exception e) {\n                EjbLogger.EJB3_TIMER_LOGGER.debug(\"Unable to read JDBC metadata.\", e);\n            } finally {\n                safeClose(connection);\n            }\n            if (database == null) {\n                EjbLogger.EJB3_TIMER_LOGGER.jdbcDatabaseDialectDetectionFailed(databaseDialects.toString());\n            } else {\n                EjbLogger.EJB3_TIMER_LOGGER.debugf(\"Detect database dialect as '%s'.  If this is incorrect, please specify the correct dialect using the 'database' attribute in your configuration.  Supported database dialect strings are %s\", database, databaseDialects);\n            }\n        } else {\n            EjbLogger.EJB3_TIMER_LOGGER.debugf(\"Database dialect '%s' read from configuration, adjusting it to match the final database valid value.\", database);\n            database = identifyDialect(database);\n            EjbLogger.EJB3_TIMER_LOGGER.debugf(\"New Database dialect is '%s'.\", database);\n        }\n    }", "language": "java", "code": "private void investigateDialect() {\n        Connection connection = null;\n\n        if (database == null) {\n            // no database dialect from configuration guessing from MetaData\n            try {\n                connection = dataSource.getConnection();\n                DatabaseMetaData metaData = connection.getMetaData();\n                String dbProduct = metaData.getDatabaseProductName();\n                database = identifyDialect(dbProduct);\n\n                if (database == null) {\n                    EjbLogger.EJB3_TIMER_LOGGER.debug(\"Attempting to guess on driver name.\");\n                    database = identifyDialect(metaData.getDriverName());\n                }\n            } catch (Exception e) {\n                EjbLogger.EJB3_TIMER_LOGGER.debug(\"Unable to read JDBC metadata.\", e);\n            } finally {\n                safeClose(connection);\n            }\n            if (database == null) {\n                EjbLogger.EJB3_TIMER_LOGGER.jdbcDatabaseDialectDetectionFailed(databaseDialects.toString());\n            } else {\n                EjbLogger.EJB3_TIMER_LOGGER.debugf(\"Detect database dialect as '%s'.  If this is incorrect, please specify the correct dialect using the 'database' attribute in your configuration.  Supported database dialect strings are %s\", database, databaseDialects);\n            }\n        } else {\n            EjbLogger.EJB3_TIMER_LOGGER.debugf(\"Database dialect '%s' read from configuration, adjusting it to match the final database valid value.\", database);\n            database = identifyDialect(database);\n            EjbLogger.EJB3_TIMER_LOGGER.debugf(\"New Database dialect is '%s'.\", database);\n        }\n    }", "code_tokens": ["private", "void", "investigateDialect", "(", ")", "{", "Connection", "connection", "=", "null", ";", "if", "(", "database", "==", "null", ")", "{", "// no database dialect from configuration guessing from MetaData", "try", "{", "connection", "=", "dataSource", ".", "getConnection", "(", ")", ";", "DatabaseMetaData", "metaData", "=", "connection", ".", "getMetaData", "(", ")", ";", "String", "dbProduct", "=", "metaData", ".", "getDatabaseProductName", "(", ")", ";", "database", "=", "identifyDialect", "(", "dbProduct", ")", ";", "if", "(", "database", "==", "null", ")", "{", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "debug", "(", "\"Attempting to guess on driver name.\"", ")", ";", "database", "=", "identifyDialect", "(", "metaData", ".", "getDriverName", "(", ")", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "debug", "(", "\"Unable to read JDBC metadata.\"", ",", "e", ")", ";", "}", "finally", "{", "safeClose", "(", "connection", ")", ";", "}", "if", "(", "database", "==", "null", ")", "{", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "jdbcDatabaseDialectDetectionFailed", "(", "databaseDialects", ".", "toString", "(", ")", ")", ";", "}", "else", "{", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "debugf", "(", "\"Detect database dialect as '%s'.  If this is incorrect, please specify the correct dialect using the 'database' attribute in your configuration.  Supported database dialect strings are %s\"", ",", "database", ",", "databaseDialects", ")", ";", "}", "}", "else", "{", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "debugf", "(", "\"Database dialect '%s' read from configuration, adjusting it to match the final database valid value.\"", ",", "database", ")", ";", "database", "=", "identifyDialect", "(", "database", ")", ";", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "debugf", "(", "\"New Database dialect is '%s'.\"", ",", "database", ")", ";", "}", "}"], "docstring": "Check the connection MetaData and driver name to guess which database dialect\nto use.", "docstring_tokens": ["Check", "the", "connection", "MetaData", "and", "driver", "name", "to", "guess", "which", "database", "dialect", "to", "use", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java#L200-L230", "partition": "test", "index": 2610, "time": "2014-07-12 21:11:26"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java", "func_name": "DatabaseTimerPersistence.identifyDialect", "original_string": "private String identifyDialect(String name) {\n        String unified = null;\n\n        if (name != null) {\n            if (name.toLowerCase().contains(\"postgres\")) {\n               unified = \"postgresql\";\n            } else if (name.toLowerCase().contains(\"mysql\")) {\n                unified = \"mysql\";\n            } else if (name.toLowerCase().contains(\"mariadb\")) {\n                unified = \"mariadb\";\n            } else if (name.toLowerCase().contains(\"db2\")) {\n                unified = \"db2\";\n            } else if (name.toLowerCase().contains(\"hsql\") || name.toLowerCase().contains(\"hypersonic\")) {\n                unified = \"hsql\";\n            } else if (name.toLowerCase().contains(\"h2\")) {\n                unified = \"h2\";\n            } else if (name.toLowerCase().contains(\"oracle\")) {\n                unified = \"oracle\";\n            }else if (name.toLowerCase().contains(\"microsoft\")) {\n                unified = \"mssql\";\n            }else if (name.toLowerCase().contains(\"jconnect\")) {\n                unified = \"sybase\";\n            }\n         }\n        EjbLogger.EJB3_TIMER_LOGGER.debugf(\"Check dialect for '%s', result is '%s'\", name, unified);\n        return unified;\n    }", "language": "java", "code": "private String identifyDialect(String name) {\n        String unified = null;\n\n        if (name != null) {\n            if (name.toLowerCase().contains(\"postgres\")) {\n               unified = \"postgresql\";\n            } else if (name.toLowerCase().contains(\"mysql\")) {\n                unified = \"mysql\";\n            } else if (name.toLowerCase().contains(\"mariadb\")) {\n                unified = \"mariadb\";\n            } else if (name.toLowerCase().contains(\"db2\")) {\n                unified = \"db2\";\n            } else if (name.toLowerCase().contains(\"hsql\") || name.toLowerCase().contains(\"hypersonic\")) {\n                unified = \"hsql\";\n            } else if (name.toLowerCase().contains(\"h2\")) {\n                unified = \"h2\";\n            } else if (name.toLowerCase().contains(\"oracle\")) {\n                unified = \"oracle\";\n            }else if (name.toLowerCase().contains(\"microsoft\")) {\n                unified = \"mssql\";\n            }else if (name.toLowerCase().contains(\"jconnect\")) {\n                unified = \"sybase\";\n            }\n         }\n        EjbLogger.EJB3_TIMER_LOGGER.debugf(\"Check dialect for '%s', result is '%s'\", name, unified);\n        return unified;\n    }", "code_tokens": ["private", "String", "identifyDialect", "(", "String", "name", ")", "{", "String", "unified", "=", "null", ";", "if", "(", "name", "!=", "null", ")", "{", "if", "(", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"postgres\"", ")", ")", "{", "unified", "=", "\"postgresql\"", ";", "}", "else", "if", "(", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"mysql\"", ")", ")", "{", "unified", "=", "\"mysql\"", ";", "}", "else", "if", "(", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"mariadb\"", ")", ")", "{", "unified", "=", "\"mariadb\"", ";", "}", "else", "if", "(", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"db2\"", ")", ")", "{", "unified", "=", "\"db2\"", ";", "}", "else", "if", "(", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"hsql\"", ")", "||", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"hypersonic\"", ")", ")", "{", "unified", "=", "\"hsql\"", ";", "}", "else", "if", "(", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"h2\"", ")", ")", "{", "unified", "=", "\"h2\"", ";", "}", "else", "if", "(", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"oracle\"", ")", ")", "{", "unified", "=", "\"oracle\"", ";", "}", "else", "if", "(", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"microsoft\"", ")", ")", "{", "unified", "=", "\"mssql\"", ";", "}", "else", "if", "(", "name", ".", "toLowerCase", "(", ")", ".", "contains", "(", "\"jconnect\"", ")", ")", "{", "unified", "=", "\"sybase\"", ";", "}", "}", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "debugf", "(", "\"Check dialect for '%s', result is '%s'\"", ",", "name", ",", "unified", ")", ";", "return", "unified", ";", "}"], "docstring": "Use the given name and check for different database types to have a unified identifier for the dialect\n\n@param name A database name or even a driver name which should include the database name\n@return A unified dialect identifier", "docstring_tokens": ["Use", "the", "given", "name", "and", "check", "for", "different", "database", "types", "to", "have", "a", "unified", "identifier", "for", "the", "dialect"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java#L238-L264", "partition": "test", "index": 2611, "time": "2014-07-12 21:11:26"}
{"repo": "wildfly/wildfly", "path": "legacy/messaging/src/main/java/org/jboss/as/messaging/MessagingTransformers.java", "func_name": "MessagingTransformers.buildTransformers2_1_0", "original_string": "private static void buildTransformers2_1_0(ResourceTransformationDescriptionBuilder builder) {\n        ResourceTransformationDescriptionBuilder hornetqServer = builder.addChildResource(pathElement(HORNETQ_SERVER));\n        ResourceTransformationDescriptionBuilder addressSetting = hornetqServer.addChildResource(AddressSettingDefinition.PATH);\n        rejectDefinedAttributeWithDefaultValue(addressSetting, MAX_REDELIVERY_DELAY, REDELIVERY_MULTIPLIER);\n\n        ResourceTransformationDescriptionBuilder bridge = hornetqServer.addChildResource(BridgeDefinition.PATH);\n        bridge.getAttributeBuilder().setValueConverter(new DoubleToBigDecimalConverter(), RETRY_INTERVAL_MULTIPLIER);\n\n\n        ResourceTransformationDescriptionBuilder clusterConnection = hornetqServer.addChildResource(ClusterConnectionDefinition.PATH);\n        clusterConnection.getAttributeBuilder().setValueConverter(new DoubleToBigDecimalConverter(), RETRY_INTERVAL_MULTIPLIER);\n\n        ResourceTransformationDescriptionBuilder connectionFactory = hornetqServer.addChildResource(ConnectionFactoryDefinition.PATH);\n        connectionFactory.getAttributeBuilder().setValueConverter(new DoubleToBigDecimalConverter(), RETRY_INTERVAL_MULTIPLIER);\n\n        ResourceTransformationDescriptionBuilder pooledConnectionFactory = hornetqServer.addChildResource(PooledConnectionFactoryDefinition.PATH);\n        pooledConnectionFactory.getAttributeBuilder().setValueConverter(new DoubleToBigDecimalConverter(), RETRY_INTERVAL_MULTIPLIER);\n    }", "language": "java", "code": "private static void buildTransformers2_1_0(ResourceTransformationDescriptionBuilder builder) {\n        ResourceTransformationDescriptionBuilder hornetqServer = builder.addChildResource(pathElement(HORNETQ_SERVER));\n        ResourceTransformationDescriptionBuilder addressSetting = hornetqServer.addChildResource(AddressSettingDefinition.PATH);\n        rejectDefinedAttributeWithDefaultValue(addressSetting, MAX_REDELIVERY_DELAY, REDELIVERY_MULTIPLIER);\n\n        ResourceTransformationDescriptionBuilder bridge = hornetqServer.addChildResource(BridgeDefinition.PATH);\n        bridge.getAttributeBuilder().setValueConverter(new DoubleToBigDecimalConverter(), RETRY_INTERVAL_MULTIPLIER);\n\n\n        ResourceTransformationDescriptionBuilder clusterConnection = hornetqServer.addChildResource(ClusterConnectionDefinition.PATH);\n        clusterConnection.getAttributeBuilder().setValueConverter(new DoubleToBigDecimalConverter(), RETRY_INTERVAL_MULTIPLIER);\n\n        ResourceTransformationDescriptionBuilder connectionFactory = hornetqServer.addChildResource(ConnectionFactoryDefinition.PATH);\n        connectionFactory.getAttributeBuilder().setValueConverter(new DoubleToBigDecimalConverter(), RETRY_INTERVAL_MULTIPLIER);\n\n        ResourceTransformationDescriptionBuilder pooledConnectionFactory = hornetqServer.addChildResource(PooledConnectionFactoryDefinition.PATH);\n        pooledConnectionFactory.getAttributeBuilder().setValueConverter(new DoubleToBigDecimalConverter(), RETRY_INTERVAL_MULTIPLIER);\n    }", "code_tokens": ["private", "static", "void", "buildTransformers2_1_0", "(", "ResourceTransformationDescriptionBuilder", "builder", ")", "{", "ResourceTransformationDescriptionBuilder", "hornetqServer", "=", "builder", ".", "addChildResource", "(", "pathElement", "(", "HORNETQ_SERVER", ")", ")", ";", "ResourceTransformationDescriptionBuilder", "addressSetting", "=", "hornetqServer", ".", "addChildResource", "(", "AddressSettingDefinition", ".", "PATH", ")", ";", "rejectDefinedAttributeWithDefaultValue", "(", "addressSetting", ",", "MAX_REDELIVERY_DELAY", ",", "REDELIVERY_MULTIPLIER", ")", ";", "ResourceTransformationDescriptionBuilder", "bridge", "=", "hornetqServer", ".", "addChildResource", "(", "BridgeDefinition", ".", "PATH", ")", ";", "bridge", ".", "getAttributeBuilder", "(", ")", ".", "setValueConverter", "(", "new", "DoubleToBigDecimalConverter", "(", ")", ",", "RETRY_INTERVAL_MULTIPLIER", ")", ";", "ResourceTransformationDescriptionBuilder", "clusterConnection", "=", "hornetqServer", ".", "addChildResource", "(", "ClusterConnectionDefinition", ".", "PATH", ")", ";", "clusterConnection", ".", "getAttributeBuilder", "(", ")", ".", "setValueConverter", "(", "new", "DoubleToBigDecimalConverter", "(", ")", ",", "RETRY_INTERVAL_MULTIPLIER", ")", ";", "ResourceTransformationDescriptionBuilder", "connectionFactory", "=", "hornetqServer", ".", "addChildResource", "(", "ConnectionFactoryDefinition", ".", "PATH", ")", ";", "connectionFactory", ".", "getAttributeBuilder", "(", ")", ".", "setValueConverter", "(", "new", "DoubleToBigDecimalConverter", "(", ")", ",", "RETRY_INTERVAL_MULTIPLIER", ")", ";", "ResourceTransformationDescriptionBuilder", "pooledConnectionFactory", "=", "hornetqServer", ".", "addChildResource", "(", "PooledConnectionFactoryDefinition", ".", "PATH", ")", ";", "pooledConnectionFactory", ".", "getAttributeBuilder", "(", ")", ".", "setValueConverter", "(", "new", "DoubleToBigDecimalConverter", "(", ")", ",", "RETRY_INTERVAL_MULTIPLIER", ")", ";", "}"], "docstring": "Transformation for WildFly 8.1.0.Final", "docstring_tokens": ["Transformation", "for", "WildFly", "8", ".", "1", ".", "0", ".", "Final"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/messaging/src/main/java/org/jboss/as/messaging/MessagingTransformers.java#L88-L105", "partition": "test", "index": 2839, "time": "2014-07-21 11:18:58"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/dmr/ModelNodes.java", "func_name": "ModelNodes.asEnum", "original_string": "public static <E extends Enum<E>> E asEnum(ModelNode value, Class<E> targetClass) {\n        return Enum.valueOf(targetClass, value.asString());\n    }", "language": "java", "code": "public static <E extends Enum<E>> E asEnum(ModelNode value, Class<E> targetClass) {\n        return Enum.valueOf(targetClass, value.asString());\n    }", "code_tokens": ["public", "static", "<", "E", "extends", "Enum", "<", "E", ">", ">", "E", "asEnum", "(", "ModelNode", "value", ",", "Class", "<", "E", ">", "targetClass", ")", "{", "return", "Enum", ".", "valueOf", "(", "targetClass", ",", "value", ".", "asString", "(", ")", ")", ";", "}"], "docstring": "Returns the value of the node as an Enum value.\n@param value a model node\n@return the value of the node as an Enum.", "docstring_tokens": ["Returns", "the", "value", "of", "the", "node", "as", "an", "Enum", "value", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/dmr/ModelNodes.java#L54-L56", "partition": "test", "index": 2876, "time": "2014-08-05 18:31:53"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/stateful/StatefulSessionComponent.java", "func_name": "StatefulSessionComponent.createSessionRemote", "original_string": "public SessionID createSessionRemote() {\n        ControlPoint controlPoint = getControlPoint();\n        if(controlPoint == null) {\n            return createSession();\n        } else {\n            try {\n                RunResult result = controlPoint.beginRequest();\n                if (result == RunResult.REJECTED) {\n                    throw EjbLogger.ROOT_LOGGER.containerSuspended();\n                }\n                try {\n                    return createSession();\n                } finally {\n                    controlPoint.requestComplete();\n                }\n            } catch (EJBComponentUnavailableException | ComponentIsStoppedException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new EJBException(e);\n            }\n        }\n    }", "language": "java", "code": "public SessionID createSessionRemote() {\n        ControlPoint controlPoint = getControlPoint();\n        if(controlPoint == null) {\n            return createSession();\n        } else {\n            try {\n                RunResult result = controlPoint.beginRequest();\n                if (result == RunResult.REJECTED) {\n                    throw EjbLogger.ROOT_LOGGER.containerSuspended();\n                }\n                try {\n                    return createSession();\n                } finally {\n                    controlPoint.requestComplete();\n                }\n            } catch (EJBComponentUnavailableException | ComponentIsStoppedException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new EJBException(e);\n            }\n        }\n    }", "code_tokens": ["public", "SessionID", "createSessionRemote", "(", ")", "{", "ControlPoint", "controlPoint", "=", "getControlPoint", "(", ")", ";", "if", "(", "controlPoint", "==", "null", ")", "{", "return", "createSession", "(", ")", ";", "}", "else", "{", "try", "{", "RunResult", "result", "=", "controlPoint", ".", "beginRequest", "(", ")", ";", "if", "(", "result", "==", "RunResult", ".", "REJECTED", ")", "{", "throw", "EjbLogger", ".", "ROOT_LOGGER", ".", "containerSuspended", "(", ")", ";", "}", "try", "{", "return", "createSession", "(", ")", ";", "}", "finally", "{", "controlPoint", ".", "requestComplete", "(", ")", ";", "}", "}", "catch", "(", "EJBComponentUnavailableException", "|", "ComponentIsStoppedException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "EJBException", "(", "e", ")", ";", "}", "}", "}"], "docstring": "creates a session using the global request controller.\n\nThis should only be used by callers that service remote requests (i.e. places that represent a remote entry point into the container)\n@return The session id", "docstring_tokens": ["creates", "a", "session", "using", "the", "global", "request", "controller", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/stateful/StatefulSessionComponent.java#L249-L270", "partition": "test", "index": 2764, "time": "2014-09-03 12:42:24"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/SecurityActions.java", "func_name": "SecurityActions.getMethod", "original_string": "static Method getMethod(final Class<?> c, final String name, final Class<?>... params)\n            throws NoSuchMethodException {\n        if (System.getSecurityManager() == null)\n            return c.getMethod(name, params);\n\n        Method result = AccessController.doPrivileged(new PrivilegedAction<Method>() {\n            public Method run() {\n                try {\n                    return c.getMethod(name, params);\n                } catch (NoSuchMethodException e) {\n                    return null;\n                }\n            }\n        });\n\n        if (result != null)\n            return result;\n\n        throw new NoSuchMethodException();\n    }", "language": "java", "code": "static Method getMethod(final Class<?> c, final String name, final Class<?>... params)\n            throws NoSuchMethodException {\n        if (System.getSecurityManager() == null)\n            return c.getMethod(name, params);\n\n        Method result = AccessController.doPrivileged(new PrivilegedAction<Method>() {\n            public Method run() {\n                try {\n                    return c.getMethod(name, params);\n                } catch (NoSuchMethodException e) {\n                    return null;\n                }\n            }\n        });\n\n        if (result != null)\n            return result;\n\n        throw new NoSuchMethodException();\n    }", "code_tokens": ["static", "Method", "getMethod", "(", "final", "Class", "<", "?", ">", "c", ",", "final", "String", "name", ",", "final", "Class", "<", "?", ">", "...", "params", ")", "throws", "NoSuchMethodException", "{", "if", "(", "System", ".", "getSecurityManager", "(", ")", "==", "null", ")", "return", "c", ".", "getMethod", "(", "name", ",", "params", ")", ";", "Method", "result", "=", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "<", "Method", ">", "(", ")", "{", "public", "Method", "run", "(", ")", "{", "try", "{", "return", "c", ".", "getMethod", "(", "name", ",", "params", ")", ";", "}", "catch", "(", "NoSuchMethodException", "e", ")", "{", "return", "null", ";", "}", "}", "}", ")", ";", "if", "(", "result", "!=", "null", ")", "return", "result", ";", "throw", "new", "NoSuchMethodException", "(", ")", ";", "}"], "docstring": "Get the method\n\n@param c      The class\n@param name   The name\n@param params The parameters\n@return The method\n@throws NoSuchMethodException If a matching method is not found.", "docstring_tokens": ["Get", "the", "method"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/SecurityActions.java#L134-L153", "partition": "test", "index": 2903, "time": "2014-09-10 16:05:41"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/SecurityActions.java", "func_name": "SecurityActions.getConstructor", "original_string": "static Constructor<?> getConstructor(final Class<?> c, final Class<?>... params)\n            throws NoSuchMethodException {\n        if (System.getSecurityManager() == null)\n            return c.getConstructor(params);\n\n        Constructor<?> result = AccessController.doPrivileged(new PrivilegedAction<Constructor<?>>() {\n            public Constructor<?> run() {\n                try {\n                    return c.getConstructor(params);\n                } catch (NoSuchMethodException e) {\n                    return null;\n                }\n            }\n        });\n\n        if (result != null)\n            return result;\n\n        throw new NoSuchMethodException();\n    }", "language": "java", "code": "static Constructor<?> getConstructor(final Class<?> c, final Class<?>... params)\n            throws NoSuchMethodException {\n        if (System.getSecurityManager() == null)\n            return c.getConstructor(params);\n\n        Constructor<?> result = AccessController.doPrivileged(new PrivilegedAction<Constructor<?>>() {\n            public Constructor<?> run() {\n                try {\n                    return c.getConstructor(params);\n                } catch (NoSuchMethodException e) {\n                    return null;\n                }\n            }\n        });\n\n        if (result != null)\n            return result;\n\n        throw new NoSuchMethodException();\n    }", "code_tokens": ["static", "Constructor", "<", "?", ">", "getConstructor", "(", "final", "Class", "<", "?", ">", "c", ",", "final", "Class", "<", "?", ">", "...", "params", ")", "throws", "NoSuchMethodException", "{", "if", "(", "System", ".", "getSecurityManager", "(", ")", "==", "null", ")", "return", "c", ".", "getConstructor", "(", "params", ")", ";", "Constructor", "<", "?", ">", "result", "=", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "<", "Constructor", "<", "?", ">", ">", "(", ")", "{", "public", "Constructor", "<", "?", ">", "run", "(", ")", "{", "try", "{", "return", "c", ".", "getConstructor", "(", "params", ")", ";", "}", "catch", "(", "NoSuchMethodException", "e", ")", "{", "return", "null", ";", "}", "}", "}", ")", ";", "if", "(", "result", "!=", "null", ")", "return", "result", ";", "throw", "new", "NoSuchMethodException", "(", ")", ";", "}"], "docstring": "Get the constructor\n\n@param c      The class\n@param params The parameters\n@return The constructor\n@throws NoSuchMethodException If a matching method is not found.", "docstring_tokens": ["Get", "the", "constructor"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/SecurityActions.java#L104-L123", "partition": "test", "index": 2902, "time": "2014-09-10 16:05:41"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/SecurityActions.java", "func_name": "SecurityActions.getDeclaredFields", "original_string": "static Field[] getDeclaredFields(final Class<?> c) {\n        if (System.getSecurityManager() == null)\n            return c.getDeclaredFields();\n\n        return AccessController.doPrivileged(new PrivilegedAction<Field[]>() {\n            public Field[] run() {\n                return c.getDeclaredFields();\n            }\n        });\n    }", "language": "java", "code": "static Field[] getDeclaredFields(final Class<?> c) {\n        if (System.getSecurityManager() == null)\n            return c.getDeclaredFields();\n\n        return AccessController.doPrivileged(new PrivilegedAction<Field[]>() {\n            public Field[] run() {\n                return c.getDeclaredFields();\n            }\n        });\n    }", "code_tokens": ["static", "Field", "[", "]", "getDeclaredFields", "(", "final", "Class", "<", "?", ">", "c", ")", "{", "if", "(", "System", ".", "getSecurityManager", "(", ")", "==", "null", ")", "return", "c", ".", "getDeclaredFields", "(", ")", ";", "return", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "<", "Field", "[", "]", ">", "(", ")", "{", "public", "Field", "[", "]", "run", "(", ")", "{", "return", "c", ".", "getDeclaredFields", "(", ")", ";", "}", "}", ")", ";", "}"], "docstring": "Get the declared fields\n\n@param c The class\n@return The fields", "docstring_tokens": ["Get", "the", "declared", "fields"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/SecurityActions.java#L68-L77", "partition": "test", "index": 2901, "time": "2014-09-10 16:05:41"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/util/SecurityActions.java", "func_name": "SecurityActions.getDeclaredMethods", "original_string": "static Method[] getDeclaredMethods(final Class<?> c) {\n        if (System.getSecurityManager() == null)\n            return c.getDeclaredMethods();\n\n        return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {\n            public Method[] run() {\n                return c.getDeclaredMethods();\n            }\n        });\n    }", "language": "java", "code": "static Method[] getDeclaredMethods(final Class<?> c) {\n        if (System.getSecurityManager() == null)\n            return c.getDeclaredMethods();\n\n        return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {\n            public Method[] run() {\n                return c.getDeclaredMethods();\n            }\n        });\n    }", "code_tokens": ["static", "Method", "[", "]", "getDeclaredMethods", "(", "final", "Class", "<", "?", ">", "c", ")", "{", "if", "(", "System", ".", "getSecurityManager", "(", ")", "==", "null", ")", "return", "c", ".", "getDeclaredMethods", "(", ")", ";", "return", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "<", "Method", "[", "]", ">", "(", ")", "{", "public", "Method", "[", "]", "run", "(", ")", "{", "return", "c", ".", "getDeclaredMethods", "(", ")", ";", "}", "}", ")", ";", "}"], "docstring": "Get the declared methods\n\n@param c The class\n@return The methods", "docstring_tokens": ["Get", "the", "declared", "methods"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/util/SecurityActions.java#L51-L60", "partition": "test", "index": 2900, "time": "2014-09-10 16:05:41"}
{"repo": "wildfly/wildfly", "path": "picketlink/src/main/java/org/wildfly/extension/picketlink/federation/model/parser/AbstractFederationSubsystemReader.java", "func_name": "AbstractFederationSubsystemReader.parseConfig", "original_string": "protected ModelNode parseConfig(XMLExtendedStreamReader reader, ModelElement xmlElement, String key, ModelNode lastNode,\n        List<SimpleAttributeDefinition> attributes, List<ModelNode> addOperations) throws XMLStreamException {\n        if (!reader.getLocalName().equals(xmlElement.getName())) {\n            return null;\n        }\n\n        ModelNode modelNode = Util.getEmptyOperation(ADD, null);\n\n        int attributeCount = reader.getAttributeCount();\n\n        for (int i = 0; i < attributeCount; i++) {\n            String attributeLocalName = reader.getAttributeLocalName(i);\n\n            if (ModelElement.forName(attributeLocalName) == null) {\n                throw unexpectedAttribute(reader, i);\n            }\n        }\n\n        for (SimpleAttributeDefinition simpleAttributeDefinition : attributes) {\n            String attributeValue = reader.getAttributeValue(\"\", simpleAttributeDefinition.getXmlName());\n            simpleAttributeDefinition.parseAndSetParameter(attributeValue, modelNode, reader);\n        }\n\n        String name = xmlElement.getName();\n\n        if (key != null) {\n            name = key;\n\n            if (modelNode.hasDefined(key)) {\n                name = modelNode.get(key).asString();\n            } else {\n                String attributeValue = reader.getAttributeValue(\"\", key);\n\n                if (attributeValue != null) {\n                    name = attributeValue;\n                }\n            }\n        }\n\n        modelNode.get(ModelDescriptionConstants.OP_ADDR).set(lastNode.clone().get(OP_ADDR).add(xmlElement.getName(), name));\n\n        addOperations.add(modelNode);\n\n        return modelNode;\n    }", "language": "java", "code": "protected ModelNode parseConfig(XMLExtendedStreamReader reader, ModelElement xmlElement, String key, ModelNode lastNode,\n        List<SimpleAttributeDefinition> attributes, List<ModelNode> addOperations) throws XMLStreamException {\n        if (!reader.getLocalName().equals(xmlElement.getName())) {\n            return null;\n        }\n\n        ModelNode modelNode = Util.getEmptyOperation(ADD, null);\n\n        int attributeCount = reader.getAttributeCount();\n\n        for (int i = 0; i < attributeCount; i++) {\n            String attributeLocalName = reader.getAttributeLocalName(i);\n\n            if (ModelElement.forName(attributeLocalName) == null) {\n                throw unexpectedAttribute(reader, i);\n            }\n        }\n\n        for (SimpleAttributeDefinition simpleAttributeDefinition : attributes) {\n            String attributeValue = reader.getAttributeValue(\"\", simpleAttributeDefinition.getXmlName());\n            simpleAttributeDefinition.parseAndSetParameter(attributeValue, modelNode, reader);\n        }\n\n        String name = xmlElement.getName();\n\n        if (key != null) {\n            name = key;\n\n            if (modelNode.hasDefined(key)) {\n                name = modelNode.get(key).asString();\n            } else {\n                String attributeValue = reader.getAttributeValue(\"\", key);\n\n                if (attributeValue != null) {\n                    name = attributeValue;\n                }\n            }\n        }\n\n        modelNode.get(ModelDescriptionConstants.OP_ADDR).set(lastNode.clone().get(OP_ADDR).add(xmlElement.getName(), name));\n\n        addOperations.add(modelNode);\n\n        return modelNode;\n    }", "code_tokens": ["protected", "ModelNode", "parseConfig", "(", "XMLExtendedStreamReader", "reader", ",", "ModelElement", "xmlElement", ",", "String", "key", ",", "ModelNode", "lastNode", ",", "List", "<", "SimpleAttributeDefinition", ">", "attributes", ",", "List", "<", "ModelNode", ">", "addOperations", ")", "throws", "XMLStreamException", "{", "if", "(", "!", "reader", ".", "getLocalName", "(", ")", ".", "equals", "(", "xmlElement", ".", "getName", "(", ")", ")", ")", "{", "return", "null", ";", "}", "ModelNode", "modelNode", "=", "Util", ".", "getEmptyOperation", "(", "ADD", ",", "null", ")", ";", "int", "attributeCount", "=", "reader", ".", "getAttributeCount", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "attributeCount", ";", "i", "++", ")", "{", "String", "attributeLocalName", "=", "reader", ".", "getAttributeLocalName", "(", "i", ")", ";", "if", "(", "ModelElement", ".", "forName", "(", "attributeLocalName", ")", "==", "null", ")", "{", "throw", "unexpectedAttribute", "(", "reader", ",", "i", ")", ";", "}", "}", "for", "(", "SimpleAttributeDefinition", "simpleAttributeDefinition", ":", "attributes", ")", "{", "String", "attributeValue", "=", "reader", ".", "getAttributeValue", "(", "\"\"", ",", "simpleAttributeDefinition", ".", "getXmlName", "(", ")", ")", ";", "simpleAttributeDefinition", ".", "parseAndSetParameter", "(", "attributeValue", ",", "modelNode", ",", "reader", ")", ";", "}", "String", "name", "=", "xmlElement", ".", "getName", "(", ")", ";", "if", "(", "key", "!=", "null", ")", "{", "name", "=", "key", ";", "if", "(", "modelNode", ".", "hasDefined", "(", "key", ")", ")", "{", "name", "=", "modelNode", ".", "get", "(", "key", ")", ".", "asString", "(", ")", ";", "}", "else", "{", "String", "attributeValue", "=", "reader", ".", "getAttributeValue", "(", "\"\"", ",", "key", ")", ";", "if", "(", "attributeValue", "!=", "null", ")", "{", "name", "=", "attributeValue", ";", "}", "}", "}", "modelNode", ".", "get", "(", "ModelDescriptionConstants", ".", "OP_ADDR", ")", ".", "set", "(", "lastNode", ".", "clone", "(", ")", ".", "get", "(", "OP_ADDR", ")", ".", "add", "(", "xmlElement", ".", "getName", "(", ")", ",", "name", ")", ")", ";", "addOperations", ".", "add", "(", "modelNode", ")", ";", "return", "modelNode", ";", "}"], "docstring": "Reads a element from the stream considering the parameters.\n\n@param reader XMLExtendedStreamReader instance from which the elements are read.\n@param xmlElement Name of the Model Element to be parsed.\n@param key Name of the attribute to be used to as the key for the model.\n@param addOperations List of operations.\n@param lastNode Parent ModelNode instance.\n@param attributes AttributeDefinition instances to be used to extract the attributes and populate the resulting model.\n\n@return A ModelNode instance populated.\n\n@throws javax.xml.stream.XMLStreamException", "docstring_tokens": ["Reads", "a", "element", "from", "the", "stream", "considering", "the", "parameters", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/picketlink/src/main/java/org/wildfly/extension/picketlink/federation/model/parser/AbstractFederationSubsystemReader.java#L269-L313", "partition": "test", "index": 2829, "time": "2014-09-18 14:32:59"}
{"repo": "wildfly/wildfly", "path": "picketlink/src/main/java/org/wildfly/extension/picketlink/federation/model/parser/AbstractFederationSubsystemReader.java", "func_name": "AbstractFederationSubsystemReader.createSubsystemRoot", "original_string": "private ModelNode createSubsystemRoot() {\n        ModelNode subsystemAddress = new ModelNode();\n\n        subsystemAddress.add(ModelDescriptionConstants.SUBSYSTEM, FederationExtension.SUBSYSTEM_NAME);\n\n        subsystemAddress.protect();\n\n        return Util.getEmptyOperation(ADD, subsystemAddress);\n    }", "language": "java", "code": "private ModelNode createSubsystemRoot() {\n        ModelNode subsystemAddress = new ModelNode();\n\n        subsystemAddress.add(ModelDescriptionConstants.SUBSYSTEM, FederationExtension.SUBSYSTEM_NAME);\n\n        subsystemAddress.protect();\n\n        return Util.getEmptyOperation(ADD, subsystemAddress);\n    }", "code_tokens": ["private", "ModelNode", "createSubsystemRoot", "(", ")", "{", "ModelNode", "subsystemAddress", "=", "new", "ModelNode", "(", ")", ";", "subsystemAddress", ".", "add", "(", "ModelDescriptionConstants", ".", "SUBSYSTEM", ",", "FederationExtension", ".", "SUBSYSTEM_NAME", ")", ";", "subsystemAddress", ".", "protect", "(", ")", ";", "return", "Util", ".", "getEmptyOperation", "(", "ADD", ",", "subsystemAddress", ")", ";", "}"], "docstring": "Creates the root subsystem's root address.\n\n@return", "docstring_tokens": ["Creates", "the", "root", "subsystem", "s", "root", "address", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/picketlink/src/main/java/org/wildfly/extension/picketlink/federation/model/parser/AbstractFederationSubsystemReader.java#L245-L253", "partition": "test", "index": 2828, "time": "2014-09-18 14:32:59"}
{"repo": "wildfly/wildfly", "path": "legacy/jacorb/src/main/java/org/jboss/as/jacorb/JacORBExtension.java", "func_name": "JacORBExtension.registerTransformers", "original_string": "protected static void registerTransformers(final SubsystemRegistration subsystem) {\n        ChainedTransformationDescriptionBuilder chained = ResourceTransformationDescriptionBuilder.Factory.createChainedSubystemInstance(CURRENT_MODEL_VERSION);\n        ModelVersion MODEL_VERSION_EAP64 = ModelVersion.create(1, 4, 0);\n        ModelVersion MODEL_VERSION_EAP63 = ModelVersion.create(1, 3, 0);//also EAP6.2\n\n        ResourceTransformationDescriptionBuilder builder64 = chained.createBuilder(CURRENT_MODEL_VERSION, MODEL_VERSION_EAP64);\n        builder64.getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.DEFINED, JacORBSubsystemDefinitions.PERSISTENT_SERVER_ID)\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(JacORBSubsystemDefinitions.PERSISTENT_SERVER_ID.getDefaultValue()), JacORBSubsystemDefinitions.PERSISTENT_SERVER_ID)\n                .setValueConverter(new AttributeConverter.DefaultValueAttributeConverter(JacORBSubsystemDefinitions.INTEROP_CHUNK_RMI_VALUETYPES),JacORBSubsystemDefinitions.INTEROP_CHUNK_RMI_VALUETYPES);\n\n\n        ResourceTransformationDescriptionBuilder builder63 = chained.createBuilder(MODEL_VERSION_EAP64, MODEL_VERSION_EAP63);\n        builder63.getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.DEFINED, IORTransportConfigDefinition.ATTRIBUTES.toArray(new AttributeDefinition[0]))\n                .addRejectCheck(RejectAttributeChecker.DEFINED, IORASContextDefinition.ATTRIBUTES.toArray(new AttributeDefinition[0]))\n                .addRejectCheck(RejectAttributeChecker.DEFINED, IORSASContextDefinition.ATTRIBUTES.toArray(new AttributeDefinition[0]))\n                .end()\n                .rejectChildResource(IORSettingsDefinition.INSTANCE.getPathElement());\n\n\n        chained.buildAndRegister(subsystem, new ModelVersion[]{\n                MODEL_VERSION_EAP64,\n                MODEL_VERSION_EAP63\n        });\n    }", "language": "java", "code": "protected static void registerTransformers(final SubsystemRegistration subsystem) {\n        ChainedTransformationDescriptionBuilder chained = ResourceTransformationDescriptionBuilder.Factory.createChainedSubystemInstance(CURRENT_MODEL_VERSION);\n        ModelVersion MODEL_VERSION_EAP64 = ModelVersion.create(1, 4, 0);\n        ModelVersion MODEL_VERSION_EAP63 = ModelVersion.create(1, 3, 0);//also EAP6.2\n\n        ResourceTransformationDescriptionBuilder builder64 = chained.createBuilder(CURRENT_MODEL_VERSION, MODEL_VERSION_EAP64);\n        builder64.getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.DEFINED, JacORBSubsystemDefinitions.PERSISTENT_SERVER_ID)\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(JacORBSubsystemDefinitions.PERSISTENT_SERVER_ID.getDefaultValue()), JacORBSubsystemDefinitions.PERSISTENT_SERVER_ID)\n                .setValueConverter(new AttributeConverter.DefaultValueAttributeConverter(JacORBSubsystemDefinitions.INTEROP_CHUNK_RMI_VALUETYPES),JacORBSubsystemDefinitions.INTEROP_CHUNK_RMI_VALUETYPES);\n\n\n        ResourceTransformationDescriptionBuilder builder63 = chained.createBuilder(MODEL_VERSION_EAP64, MODEL_VERSION_EAP63);\n        builder63.getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.DEFINED, IORTransportConfigDefinition.ATTRIBUTES.toArray(new AttributeDefinition[0]))\n                .addRejectCheck(RejectAttributeChecker.DEFINED, IORASContextDefinition.ATTRIBUTES.toArray(new AttributeDefinition[0]))\n                .addRejectCheck(RejectAttributeChecker.DEFINED, IORSASContextDefinition.ATTRIBUTES.toArray(new AttributeDefinition[0]))\n                .end()\n                .rejectChildResource(IORSettingsDefinition.INSTANCE.getPathElement());\n\n\n        chained.buildAndRegister(subsystem, new ModelVersion[]{\n                MODEL_VERSION_EAP64,\n                MODEL_VERSION_EAP63\n        });\n    }", "code_tokens": ["protected", "static", "void", "registerTransformers", "(", "final", "SubsystemRegistration", "subsystem", ")", "{", "ChainedTransformationDescriptionBuilder", "chained", "=", "ResourceTransformationDescriptionBuilder", ".", "Factory", ".", "createChainedSubystemInstance", "(", "CURRENT_MODEL_VERSION", ")", ";", "ModelVersion", "MODEL_VERSION_EAP64", "=", "ModelVersion", ".", "create", "(", "1", ",", "4", ",", "0", ")", ";", "ModelVersion", "MODEL_VERSION_EAP63", "=", "ModelVersion", ".", "create", "(", "1", ",", "3", ",", "0", ")", ";", "//also EAP6.2", "ResourceTransformationDescriptionBuilder", "builder64", "=", "chained", ".", "createBuilder", "(", "CURRENT_MODEL_VERSION", ",", "MODEL_VERSION_EAP64", ")", ";", "builder64", ".", "getAttributeBuilder", "(", ")", ".", "addRejectCheck", "(", "RejectAttributeChecker", ".", "DEFINED", ",", "JacORBSubsystemDefinitions", ".", "PERSISTENT_SERVER_ID", ")", ".", "setDiscard", "(", "new", "DiscardAttributeChecker", ".", "DiscardAttributeValueChecker", "(", "JacORBSubsystemDefinitions", ".", "PERSISTENT_SERVER_ID", ".", "getDefaultValue", "(", ")", ")", ",", "JacORBSubsystemDefinitions", ".", "PERSISTENT_SERVER_ID", ")", ".", "setValueConverter", "(", "new", "AttributeConverter", ".", "DefaultValueAttributeConverter", "(", "JacORBSubsystemDefinitions", ".", "INTEROP_CHUNK_RMI_VALUETYPES", ")", ",", "JacORBSubsystemDefinitions", ".", "INTEROP_CHUNK_RMI_VALUETYPES", ")", ";", "ResourceTransformationDescriptionBuilder", "builder63", "=", "chained", ".", "createBuilder", "(", "MODEL_VERSION_EAP64", ",", "MODEL_VERSION_EAP63", ")", ";", "builder63", ".", "getAttributeBuilder", "(", ")", ".", "addRejectCheck", "(", "RejectAttributeChecker", ".", "DEFINED", ",", "IORTransportConfigDefinition", ".", "ATTRIBUTES", ".", "toArray", "(", "new", "AttributeDefinition", "[", "0", "]", ")", ")", ".", "addRejectCheck", "(", "RejectAttributeChecker", ".", "DEFINED", ",", "IORASContextDefinition", ".", "ATTRIBUTES", ".", "toArray", "(", "new", "AttributeDefinition", "[", "0", "]", ")", ")", ".", "addRejectCheck", "(", "RejectAttributeChecker", ".", "DEFINED", ",", "IORSASContextDefinition", ".", "ATTRIBUTES", ".", "toArray", "(", "new", "AttributeDefinition", "[", "0", "]", ")", ")", ".", "end", "(", ")", ".", "rejectChildResource", "(", "IORSettingsDefinition", ".", "INSTANCE", ".", "getPathElement", "(", ")", ")", ";", "chained", ".", "buildAndRegister", "(", "subsystem", ",", "new", "ModelVersion", "[", "]", "{", "MODEL_VERSION_EAP64", ",", "MODEL_VERSION_EAP63", "}", ")", ";", "}"], "docstring": "Register the transformers for the 1.3.0 version.\n\n@param subsystem the subsystems registration", "docstring_tokens": ["Register", "the", "transformers", "for", "the", "1", ".", "3", ".", "0", "version", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/jacorb/src/main/java/org/jboss/as/jacorb/JacORBExtension.java#L104-L129", "partition": "test", "index": 2518, "time": "2014-09-24 20:44:08"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/WeldSubsystemAdd.java", "func_name": "WeldSubsystemAdd.checkJtsEnabled", "original_string": "private boolean checkJtsEnabled(final OperationContext context) {\n        try {\n            final ModelNode jtsNode = context.readResourceFromRoot(PathAddress.pathAddress(\"subsystem\", \"transactions\"), false)\n                    .getModel().get(\"jts\");\n            return jtsNode.isDefined() ? jtsNode.asBoolean() : false;\n        } catch (NoSuchResourceException ex) {\n            return false;\n        }\n    }", "language": "java", "code": "private boolean checkJtsEnabled(final OperationContext context) {\n        try {\n            final ModelNode jtsNode = context.readResourceFromRoot(PathAddress.pathAddress(\"subsystem\", \"transactions\"), false)\n                    .getModel().get(\"jts\");\n            return jtsNode.isDefined() ? jtsNode.asBoolean() : false;\n        } catch (NoSuchResourceException ex) {\n            return false;\n        }\n    }", "code_tokens": ["private", "boolean", "checkJtsEnabled", "(", "final", "OperationContext", "context", ")", "{", "try", "{", "final", "ModelNode", "jtsNode", "=", "context", ".", "readResourceFromRoot", "(", "PathAddress", ".", "pathAddress", "(", "\"subsystem\"", ",", "\"transactions\"", ")", ",", "false", ")", ".", "getModel", "(", ")", ".", "get", "(", "\"jts\"", ")", ";", "return", "jtsNode", ".", "isDefined", "(", ")", "?", "jtsNode", ".", "asBoolean", "(", ")", ":", "false", ";", "}", "catch", "(", "NoSuchResourceException", "ex", ")", "{", "return", "false", ";", "}", "}"], "docstring": "not necessary.", "docstring_tokens": ["not", "necessary", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/WeldSubsystemAdd.java#L139-L147", "partition": "test", "index": 2856, "time": "2014-11-19 19:12:29"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.getPathAddress", "original_string": "public static PathAddress getPathAddress(ModelNode operation) {\n        return PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));\n    }", "language": "java", "code": "public static PathAddress getPathAddress(ModelNode operation) {\n        return PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR));\n    }", "code_tokens": ["public", "static", "PathAddress", "getPathAddress", "(", "ModelNode", "operation", ")", "{", "return", "PathAddress", ".", "pathAddress", "(", "operation", ".", "require", "(", "ModelDescriptionConstants", ".", "OP_ADDR", ")", ")", ";", "}"], "docstring": "Returns the address of the specified operation\n@param operation an operation\n@return a path address", "docstring_tokens": ["Returns", "the", "address", "of", "the", "specified", "operation"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L53-L55", "partition": "test", "index": 2487, "time": "2014-11-20 17:39:24"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.getAttributeValue", "original_string": "public static ModelNode getAttributeValue(ModelNode operation) {\n        return operation.hasDefined(ModelDescriptionConstants.VALUE) ? operation.get(ModelDescriptionConstants.VALUE) : new ModelNode();\n    }", "language": "java", "code": "public static ModelNode getAttributeValue(ModelNode operation) {\n        return operation.hasDefined(ModelDescriptionConstants.VALUE) ? operation.get(ModelDescriptionConstants.VALUE) : new ModelNode();\n    }", "code_tokens": ["public", "static", "ModelNode", "getAttributeValue", "(", "ModelNode", "operation", ")", "{", "return", "operation", ".", "hasDefined", "(", "ModelDescriptionConstants", ".", "VALUE", ")", "?", "operation", ".", "get", "(", "ModelDescriptionConstants", ".", "VALUE", ")", ":", "new", "ModelNode", "(", ")", ";", "}"], "docstring": "Returns the attribute value of the specified operation\n@param operation an operation\n@return an attribute value", "docstring_tokens": ["Returns", "the", "attribute", "value", "of", "the", "specified", "operation"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L89-L91", "partition": "test", "index": 2489, "time": "2014-11-20 17:39:24"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/TransportConfigOperationHandlers.java", "func_name": "TransportConfigOperationHandlers.getParameters", "original_string": "public static Map<String, Object> getParameters(final OperationContext context, final ModelNode config, final Map<String, String> mapping) throws OperationFailedException {\n        Map<String, String> fromModel = CommonAttributes.PARAMS.unwrap(context, config);\n        Map<String, Object> parameters = new HashMap<>();\n        for (Map.Entry<String, String> entry : fromModel.entrySet()) {\n            parameters.put(mapping.getOrDefault(entry.getKey(), entry.getKey()), entry.getValue());\n        }\n        return parameters;\n    }", "language": "java", "code": "public static Map<String, Object> getParameters(final OperationContext context, final ModelNode config, final Map<String, String> mapping) throws OperationFailedException {\n        Map<String, String> fromModel = CommonAttributes.PARAMS.unwrap(context, config);\n        Map<String, Object> parameters = new HashMap<>();\n        for (Map.Entry<String, String> entry : fromModel.entrySet()) {\n            parameters.put(mapping.getOrDefault(entry.getKey(), entry.getKey()), entry.getValue());\n        }\n        return parameters;\n    }", "code_tokens": ["public", "static", "Map", "<", "String", ",", "Object", ">", "getParameters", "(", "final", "OperationContext", "context", ",", "final", "ModelNode", "config", ",", "final", "Map", "<", "String", ",", "String", ">", "mapping", ")", "throws", "OperationFailedException", "{", "Map", "<", "String", ",", "String", ">", "fromModel", "=", "CommonAttributes", ".", "PARAMS", ".", "unwrap", "(", "context", ",", "config", ")", ";", "Map", "<", "String", ",", "Object", ">", "parameters", "=", "new", "HashMap", "<>", "(", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "String", ">", "entry", ":", "fromModel", ".", "entrySet", "(", ")", ")", "{", "parameters", ".", "put", "(", "mapping", ".", "getOrDefault", "(", "entry", ".", "getKey", "(", ")", ",", "entry", ".", "getKey", "(", ")", ")", ",", "entry", ".", "getValue", "(", ")", ")", ";", "}", "return", "parameters", ";", "}"], "docstring": "Get the parameters.\n\n@param context the operation context\n@param config the transport configuration\n@param mapping Mapping betwen WildFly parameters (keys) and Artemis constants (values)\n@return the extracted parameters\n@throws OperationFailedException if an expression can not be resolved", "docstring_tokens": ["Get", "the", "parameters", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/TransportConfigOperationHandlers.java#L335-L342", "partition": "test", "index": 2864, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/BroadcastGroupDefinition.java", "func_name": "BroadcastGroupDefinition.getAvailableConnectors", "original_string": "private static Set<String> getAvailableConnectors(final OperationContext context,final ModelNode operation) throws OperationFailedException{\n        PathAddress address = PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR));\n        PathAddress active = MessagingServices.getActiveMQServerPathAddress(address);\n        Set<String> availableConnectors = new HashSet<String>();\n\n        Resource subsystemResource = context.readResourceFromRoot(active.getParent(), false);\n        availableConnectors.addAll(subsystemResource.getChildrenNames(CommonAttributes.REMOTE_CONNECTOR));\n\n        Resource activeMQServerResource = context.readResourceFromRoot(active, false);\n        availableConnectors.addAll(activeMQServerResource.getChildrenNames(CommonAttributes.HTTP_CONNECTOR));\n        availableConnectors.addAll(activeMQServerResource.getChildrenNames(CommonAttributes.IN_VM_CONNECTOR));\n        availableConnectors.addAll(activeMQServerResource.getChildrenNames(CommonAttributes.REMOTE_CONNECTOR));\n        availableConnectors.addAll(activeMQServerResource.getChildrenNames(CommonAttributes.CONNECTOR));\n        return availableConnectors;\n    }", "language": "java", "code": "private static Set<String> getAvailableConnectors(final OperationContext context,final ModelNode operation) throws OperationFailedException{\n        PathAddress address = PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR));\n        PathAddress active = MessagingServices.getActiveMQServerPathAddress(address);\n        Set<String> availableConnectors = new HashSet<String>();\n\n        Resource subsystemResource = context.readResourceFromRoot(active.getParent(), false);\n        availableConnectors.addAll(subsystemResource.getChildrenNames(CommonAttributes.REMOTE_CONNECTOR));\n\n        Resource activeMQServerResource = context.readResourceFromRoot(active, false);\n        availableConnectors.addAll(activeMQServerResource.getChildrenNames(CommonAttributes.HTTP_CONNECTOR));\n        availableConnectors.addAll(activeMQServerResource.getChildrenNames(CommonAttributes.IN_VM_CONNECTOR));\n        availableConnectors.addAll(activeMQServerResource.getChildrenNames(CommonAttributes.REMOTE_CONNECTOR));\n        availableConnectors.addAll(activeMQServerResource.getChildrenNames(CommonAttributes.CONNECTOR));\n        return availableConnectors;\n    }", "code_tokens": ["private", "static", "Set", "<", "String", ">", "getAvailableConnectors", "(", "final", "OperationContext", "context", ",", "final", "ModelNode", "operation", ")", "throws", "OperationFailedException", "{", "PathAddress", "address", "=", "PathAddress", ".", "pathAddress", "(", "operation", ".", "get", "(", "ModelDescriptionConstants", ".", "OP_ADDR", ")", ")", ";", "PathAddress", "active", "=", "MessagingServices", ".", "getActiveMQServerPathAddress", "(", "address", ")", ";", "Set", "<", "String", ">", "availableConnectors", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "Resource", "subsystemResource", "=", "context", ".", "readResourceFromRoot", "(", "active", ".", "getParent", "(", ")", ",", "false", ")", ";", "availableConnectors", ".", "addAll", "(", "subsystemResource", ".", "getChildrenNames", "(", "CommonAttributes", ".", "REMOTE_CONNECTOR", ")", ")", ";", "Resource", "activeMQServerResource", "=", "context", ".", "readResourceFromRoot", "(", "active", ",", "false", ")", ";", "availableConnectors", ".", "addAll", "(", "activeMQServerResource", ".", "getChildrenNames", "(", "CommonAttributes", ".", "HTTP_CONNECTOR", ")", ")", ";", "availableConnectors", ".", "addAll", "(", "activeMQServerResource", ".", "getChildrenNames", "(", "CommonAttributes", ".", "IN_VM_CONNECTOR", ")", ")", ";", "availableConnectors", ".", "addAll", "(", "activeMQServerResource", ".", "getChildrenNames", "(", "CommonAttributes", ".", "REMOTE_CONNECTOR", ")", ")", ";", "availableConnectors", ".", "addAll", "(", "activeMQServerResource", ".", "getChildrenNames", "(", "CommonAttributes", ".", "CONNECTOR", ")", ")", ";", "return", "availableConnectors", ";", "}"], "docstring": "FIXME use capabilities & requirements", "docstring_tokens": ["FIXME", "use", "capabilities", "&", "requirements"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/BroadcastGroupDefinition.java#L164-L178", "partition": "test", "index": 2484, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/bridge/JMSBridgeAdd.java", "func_name": "JMSBridgeAdd.resolveAttribute", "original_string": "private String resolveAttribute(SimpleAttributeDefinition attr, OperationContext context, ModelNode model) throws OperationFailedException {\n        final ModelNode node = attr.resolveModelAttribute(context, model);\n        return node.isDefined() ? node.asString() : null;\n    }", "language": "java", "code": "private String resolveAttribute(SimpleAttributeDefinition attr, OperationContext context, ModelNode model) throws OperationFailedException {\n        final ModelNode node = attr.resolveModelAttribute(context, model);\n        return node.isDefined() ? node.asString() : null;\n    }", "code_tokens": ["private", "String", "resolveAttribute", "(", "SimpleAttributeDefinition", "attr", ",", "OperationContext", "context", ",", "ModelNode", "model", ")", "throws", "OperationFailedException", "{", "final", "ModelNode", "node", "=", "attr", ".", "resolveModelAttribute", "(", "context", ",", "model", ")", ";", "return", "node", ".", "isDefined", "(", ")", "?", "node", ".", "asString", "(", ")", ":", "null", ";", "}"], "docstring": "Return null if the resolved attribute is not defined", "docstring_tokens": ["Return", "null", "if", "the", "resolved", "attribute", "is", "not", "defined"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/bridge/JMSBridgeAdd.java#L210-L213", "partition": "test", "index": 2577, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/AbstractActiveMQComponentControlHandler.java", "func_name": "AbstractActiveMQComponentControlHandler.getActiveMQComponentControl", "original_string": "protected final T getActiveMQComponentControl(final OperationContext context, final ModelNode operation, final boolean forWrite) throws OperationFailedException {\n        final ServiceName artemisServiceName = MessagingServices.getActiveMQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n        ServiceController<?> artemisService = context.getServiceRegistry(forWrite).getService(artemisServiceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(artemisService.getValue());\n        PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         T control = getActiveMQComponentControl(server, address);\n         if (control == null) {\n             throw ControllerLogger.ROOT_LOGGER.managementResourceNotFound(address);\n         }\n         return control;\n\n    }", "language": "java", "code": "protected final T getActiveMQComponentControl(final OperationContext context, final ModelNode operation, final boolean forWrite) throws OperationFailedException {\n        final ServiceName artemisServiceName = MessagingServices.getActiveMQServiceName(PathAddress.pathAddress(operation.get(ModelDescriptionConstants.OP_ADDR)));\n        ServiceController<?> artemisService = context.getServiceRegistry(forWrite).getService(artemisServiceName);\n        ActiveMQServer server = ActiveMQServer.class.cast(artemisService.getValue());\n        PathAddress address = PathAddress.pathAddress(operation.require(OP_ADDR));\n         T control = getActiveMQComponentControl(server, address);\n         if (control == null) {\n             throw ControllerLogger.ROOT_LOGGER.managementResourceNotFound(address);\n         }\n         return control;\n\n    }", "code_tokens": ["protected", "final", "T", "getActiveMQComponentControl", "(", "final", "OperationContext", "context", ",", "final", "ModelNode", "operation", ",", "final", "boolean", "forWrite", ")", "throws", "OperationFailedException", "{", "final", "ServiceName", "artemisServiceName", "=", "MessagingServices", ".", "getActiveMQServiceName", "(", "PathAddress", ".", "pathAddress", "(", "operation", ".", "get", "(", "ModelDescriptionConstants", ".", "OP_ADDR", ")", ")", ")", ";", "ServiceController", "<", "?", ">", "artemisService", "=", "context", ".", "getServiceRegistry", "(", "forWrite", ")", ".", "getService", "(", "artemisServiceName", ")", ";", "ActiveMQServer", "server", "=", "ActiveMQServer", ".", "class", ".", "cast", "(", "artemisService", ".", "getValue", "(", ")", ")", ";", "PathAddress", "address", "=", "PathAddress", ".", "pathAddress", "(", "operation", ".", "require", "(", "OP_ADDR", ")", ")", ";", "T", "control", "=", "getActiveMQComponentControl", "(", "server", ",", "address", ")", ";", "if", "(", "control", "==", "null", ")", "{", "throw", "ControllerLogger", ".", "ROOT_LOGGER", ".", "managementResourceNotFound", "(", "address", ")", ";", "}", "return", "control", ";", "}"], "docstring": "Gets the runtime ActiveMQ control object that can help service this request.\n\n@param context  the operation context\n@param operation the operation\n@param forWrite {@code true} if this operation will modify the runtime; {@code false} if not.\n@return the control object\n@throws OperationFailedException", "docstring_tokens": ["Gets", "the", "runtime", "ActiveMQ", "control", "object", "that", "can", "help", "service", "this", "request", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/AbstractActiveMQComponentControlHandler.java#L276-L287", "partition": "test", "index": 2549, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/JMSConnectionFactoryDefinitionInjectionSource.java", "func_name": "JMSConnectionFactoryDefinitionInjectionSource.getActiveMQServerName", "original_string": "static String getActiveMQServerName(Map<String, String> properties) {\n        return properties.getOrDefault(SERVER, DEFAULT);\n    }", "language": "java", "code": "static String getActiveMQServerName(Map<String, String> properties) {\n        return properties.getOrDefault(SERVER, DEFAULT);\n    }", "code_tokens": ["static", "String", "getActiveMQServerName", "(", "Map", "<", "String", ",", "String", ">", "properties", ")", "{", "return", "properties", ".", "getOrDefault", "(", "SERVER", ",", "DEFAULT", ")", ";", "}"], "docstring": "The JMS connection factory can specify another server to deploy its destinations\nby passing a property server=&lt;name of the server>. Otherwise, \"default\" is used by default.", "docstring_tokens": ["The", "JMS", "connection", "factory", "can", "specify", "another", "server", "to", "deploy", "its", "destinations", "by", "passing", "a", "property", "server", "=", "&lt", ";", "name", "of", "the", "server", ">", ".", "Otherwise", "default", "is", "used", "by", "default", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/JMSConnectionFactoryDefinitionInjectionSource.java#L432-L434", "partition": "test", "index": 2581, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/ha/ManagementHelper.java", "func_name": "ManagementHelper.createAddOperation", "original_string": "static AbstractAddStepHandler createAddOperation(final String childType, final boolean allowSibling, Collection<? extends AttributeDefinition> attributes) {\n        return new ActiveMQReloadRequiredHandlers.AddStepHandler(attributes) {\n            @Override\n            public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                super.execute(context, operation);\n                if (!allowSibling) {\n                    context.addStep(checkNoOtherSibling(childType), MODEL);\n                }\n            }\n        };\n    }", "language": "java", "code": "static AbstractAddStepHandler createAddOperation(final String childType, final boolean allowSibling, Collection<? extends AttributeDefinition> attributes) {\n        return new ActiveMQReloadRequiredHandlers.AddStepHandler(attributes) {\n            @Override\n            public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                super.execute(context, operation);\n                if (!allowSibling) {\n                    context.addStep(checkNoOtherSibling(childType), MODEL);\n                }\n            }\n        };\n    }", "code_tokens": ["static", "AbstractAddStepHandler", "createAddOperation", "(", "final", "String", "childType", ",", "final", "boolean", "allowSibling", ",", "Collection", "<", "?", "extends", "AttributeDefinition", ">", "attributes", ")", "{", "return", "new", "ActiveMQReloadRequiredHandlers", ".", "AddStepHandler", "(", "attributes", ")", "{", "@", "Override", "public", "void", "execute", "(", "OperationContext", "context", ",", "ModelNode", "operation", ")", "throws", "OperationFailedException", "{", "super", ".", "execute", "(", "context", ",", "operation", ")", ";", "if", "(", "!", "allowSibling", ")", "{", "context", ".", "addStep", "(", "checkNoOtherSibling", "(", "childType", ")", ",", "MODEL", ")", ";", "}", "}", "}", ";", "}"], "docstring": "Create an ADD operation that can check that there is no other sibling when the resource is added.\n\n@param childType the type of children to check for the existence of siblings\n@param allowSibling whether it is allowed to have sibling for the resource that is added.\n@param attributes the attributes of the ADD operation", "docstring_tokens": ["Create", "an", "ADD", "operation", "that", "can", "check", "that", "there", "is", "no", "other", "sibling", "when", "the", "resource", "is", "added", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/ha/ManagementHelper.java#L53-L63", "partition": "test", "index": 2760, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/ManagementUtil.java", "func_name": "ManagementUtil.convertSecurityRole", "original_string": "static ModelNode convertSecurityRole(final ModelNode camelCase) {\n        final ModelNode result = new ModelNode();\n        result.setEmptyList();\n        if (camelCase.isDefined()) {\n            for (ModelNode role : camelCase.asList()) {\n                final ModelNode roleNode = result.add();\n                for (Property prop : role.asPropertyList()) {\n                    String key = prop.getName();\n                    if (\"createDurableQueue\".equals(key)) {\n                        key = SecurityRoleDefinition.CREATE_DURABLE_QUEUE.getName();\n                    } else if (\"deleteDurableQueue\".equals(key)) {\n                        key = SecurityRoleDefinition.DELETE_DURABLE_QUEUE.getName();\n                    } else if (\"createNonDurableQueue\".equals(key)) {\n                        key = SecurityRoleDefinition.CREATE_NON_DURABLE_QUEUE.getName();\n                    } else if (\"deleteNonDurableQueue\".equals(key)) {\n                        key = SecurityRoleDefinition.DELETE_NON_DURABLE_QUEUE.getName();\n                    }\n\n                    roleNode.get(key).set(prop.getValue());\n                }\n            }\n        }\n\n        return result;\n    }", "language": "java", "code": "static ModelNode convertSecurityRole(final ModelNode camelCase) {\n        final ModelNode result = new ModelNode();\n        result.setEmptyList();\n        if (camelCase.isDefined()) {\n            for (ModelNode role : camelCase.asList()) {\n                final ModelNode roleNode = result.add();\n                for (Property prop : role.asPropertyList()) {\n                    String key = prop.getName();\n                    if (\"createDurableQueue\".equals(key)) {\n                        key = SecurityRoleDefinition.CREATE_DURABLE_QUEUE.getName();\n                    } else if (\"deleteDurableQueue\".equals(key)) {\n                        key = SecurityRoleDefinition.DELETE_DURABLE_QUEUE.getName();\n                    } else if (\"createNonDurableQueue\".equals(key)) {\n                        key = SecurityRoleDefinition.CREATE_NON_DURABLE_QUEUE.getName();\n                    } else if (\"deleteNonDurableQueue\".equals(key)) {\n                        key = SecurityRoleDefinition.DELETE_NON_DURABLE_QUEUE.getName();\n                    }\n\n                    roleNode.get(key).set(prop.getValue());\n                }\n            }\n        }\n\n        return result;\n    }", "code_tokens": ["static", "ModelNode", "convertSecurityRole", "(", "final", "ModelNode", "camelCase", ")", "{", "final", "ModelNode", "result", "=", "new", "ModelNode", "(", ")", ";", "result", ".", "setEmptyList", "(", ")", ";", "if", "(", "camelCase", ".", "isDefined", "(", ")", ")", "{", "for", "(", "ModelNode", "role", ":", "camelCase", ".", "asList", "(", ")", ")", "{", "final", "ModelNode", "roleNode", "=", "result", ".", "add", "(", ")", ";", "for", "(", "Property", "prop", ":", "role", ".", "asPropertyList", "(", ")", ")", "{", "String", "key", "=", "prop", ".", "getName", "(", ")", ";", "if", "(", "\"createDurableQueue\"", ".", "equals", "(", "key", ")", ")", "{", "key", "=", "SecurityRoleDefinition", ".", "CREATE_DURABLE_QUEUE", ".", "getName", "(", ")", ";", "}", "else", "if", "(", "\"deleteDurableQueue\"", ".", "equals", "(", "key", ")", ")", "{", "key", "=", "SecurityRoleDefinition", ".", "DELETE_DURABLE_QUEUE", ".", "getName", "(", ")", ";", "}", "else", "if", "(", "\"createNonDurableQueue\"", ".", "equals", "(", "key", ")", ")", "{", "key", "=", "SecurityRoleDefinition", ".", "CREATE_NON_DURABLE_QUEUE", ".", "getName", "(", ")", ";", "}", "else", "if", "(", "\"deleteNonDurableQueue\"", ".", "equals", "(", "key", ")", ")", "{", "key", "=", "SecurityRoleDefinition", ".", "DELETE_NON_DURABLE_QUEUE", ".", "getName", "(", ")", ";", "}", "roleNode", ".", "get", "(", "key", ")", ".", "set", "(", "prop", ".", "getValue", "(", ")", ")", ";", "}", "}", "}", "return", "result", ";", "}"], "docstring": "Utility for converting camel case based ActiveMQ formats to WildFly standards.", "docstring_tokens": ["Utility", "for", "converting", "camel", "case", "based", "ActiveMQ", "formats", "to", "WildFly", "standards", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/ManagementUtil.java#L63-L87", "partition": "test", "index": 2639, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/WildFlyBindingRegistry.java", "func_name": "WildFlyBindingRegistry.unbind", "original_string": "@Override\n    public void unbind(String name) {\n        if (name == null || name.isEmpty()) {\n            throw MessagingLogger.ROOT_LOGGER.cannotUnbindJndiName();\n        }\n        final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name);\n        ServiceController<?> bindingService = container.getService(bindInfo.getBinderServiceName());\n        if (bindingService == null) {\n            ROOT_LOGGER.debugf(\"Cannot unbind %s since no binding exists with that name\", name);\n            return;\n        }\n        // remove the binding service\n        bindingService.setMode(ServiceController.Mode.REMOVE);\n        final StabilityMonitor monitor = new StabilityMonitor();\n        monitor.addController(bindingService);\n        try {\n            monitor.awaitStability();\n            ROOT_LOGGER.unboundJndiName(bindInfo.getAbsoluteJndiName());\n        } catch (InterruptedException e) {\n            ROOT_LOGGER.failedToUnbindJndiName(name, 5, SECONDS.toString().toLowerCase(Locale.US));\n        } finally {\n            monitor.removeController(bindingService);\n        }\n    }", "language": "java", "code": "@Override\n    public void unbind(String name) {\n        if (name == null || name.isEmpty()) {\n            throw MessagingLogger.ROOT_LOGGER.cannotUnbindJndiName();\n        }\n        final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name);\n        ServiceController<?> bindingService = container.getService(bindInfo.getBinderServiceName());\n        if (bindingService == null) {\n            ROOT_LOGGER.debugf(\"Cannot unbind %s since no binding exists with that name\", name);\n            return;\n        }\n        // remove the binding service\n        bindingService.setMode(ServiceController.Mode.REMOVE);\n        final StabilityMonitor monitor = new StabilityMonitor();\n        monitor.addController(bindingService);\n        try {\n            monitor.awaitStability();\n            ROOT_LOGGER.unboundJndiName(bindInfo.getAbsoluteJndiName());\n        } catch (InterruptedException e) {\n            ROOT_LOGGER.failedToUnbindJndiName(name, 5, SECONDS.toString().toLowerCase(Locale.US));\n        } finally {\n            monitor.removeController(bindingService);\n        }\n    }", "code_tokens": ["@", "Override", "public", "void", "unbind", "(", "String", "name", ")", "{", "if", "(", "name", "==", "null", "||", "name", ".", "isEmpty", "(", ")", ")", "{", "throw", "MessagingLogger", ".", "ROOT_LOGGER", ".", "cannotUnbindJndiName", "(", ")", ";", "}", "final", "ContextNames", ".", "BindInfo", "bindInfo", "=", "ContextNames", ".", "bindInfoFor", "(", "name", ")", ";", "ServiceController", "<", "?", ">", "bindingService", "=", "container", ".", "getService", "(", "bindInfo", ".", "getBinderServiceName", "(", ")", ")", ";", "if", "(", "bindingService", "==", "null", ")", "{", "ROOT_LOGGER", ".", "debugf", "(", "\"Cannot unbind %s since no binding exists with that name\"", ",", "name", ")", ";", "return", ";", "}", "// remove the binding service", "bindingService", ".", "setMode", "(", "ServiceController", ".", "Mode", ".", "REMOVE", ")", ";", "final", "StabilityMonitor", "monitor", "=", "new", "StabilityMonitor", "(", ")", ";", "monitor", ".", "addController", "(", "bindingService", ")", ";", "try", "{", "monitor", ".", "awaitStability", "(", ")", ";", "ROOT_LOGGER", ".", "unboundJndiName", "(", "bindInfo", ".", "getAbsoluteJndiName", "(", ")", ")", ";", "}", "catch", "(", "InterruptedException", "e", ")", "{", "ROOT_LOGGER", ".", "failedToUnbindJndiName", "(", "name", ",", "5", ",", "SECONDS", ".", "toString", "(", ")", ".", "toLowerCase", "(", "Locale", ".", "US", ")", ")", ";", "}", "finally", "{", "monitor", ".", "removeController", "(", "bindingService", ")", ";", "}", "}"], "docstring": "Unbind the resource and wait until the corresponding binding service is effectively removed.", "docstring_tokens": ["Unbind", "the", "resource", "and", "wait", "until", "the", "corresponding", "binding", "service", "is", "effectively", "removed", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/WildFlyBindingRegistry.java#L82-L105", "partition": "test", "index": 2710, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/PooledConnectionFactoryRemove.java", "func_name": "PooledConnectionFactoryRemove.removeJNDIAliases", "original_string": "protected void removeJNDIAliases(OperationContext context, List<ModelNode> entries) {\n        if (entries.size() > 1) {\n            for (int i = 1; i < entries.size() ; i++) {\n                ContextNames.BindInfo aliasBindInfo = ContextNames.bindInfoFor(entries.get(i).asString());\n                context.removeService(aliasBindInfo.getBinderServiceName());\n            }\n        }\n    }", "language": "java", "code": "protected void removeJNDIAliases(OperationContext context, List<ModelNode> entries) {\n        if (entries.size() > 1) {\n            for (int i = 1; i < entries.size() ; i++) {\n                ContextNames.BindInfo aliasBindInfo = ContextNames.bindInfoFor(entries.get(i).asString());\n                context.removeService(aliasBindInfo.getBinderServiceName());\n            }\n        }\n    }", "code_tokens": ["protected", "void", "removeJNDIAliases", "(", "OperationContext", "context", ",", "List", "<", "ModelNode", ">", "entries", ")", "{", "if", "(", "entries", ".", "size", "(", ")", ">", "1", ")", "{", "for", "(", "int", "i", "=", "1", ";", "i", "<", "entries", ".", "size", "(", ")", ";", "i", "++", ")", "{", "ContextNames", ".", "BindInfo", "aliasBindInfo", "=", "ContextNames", ".", "bindInfoFor", "(", "entries", ".", "get", "(", "i", ")", ".", "asString", "(", ")", ")", ";", "context", ".", "removeService", "(", "aliasBindInfo", ".", "getBinderServiceName", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Remove JNDI alias' binder services.\n\nThe 1st JNDI entry is not removed by this method as it is already handled when removing\nthe pooled-connection-factory service", "docstring_tokens": ["Remove", "JNDI", "alias", "binder", "services", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/PooledConnectionFactoryRemove.java#L63-L70", "partition": "test", "index": 2819, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/WildFlyBindingRegistry.java", "func_name": "WildFlyBindingRegistry.lookup", "original_string": "@Override\n    public Object lookup(String name) {\n        final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name);\n        ServiceController<?> bindingService = container.getService(bindInfo.getBinderServiceName());\n        if (bindingService == null) {\n            return null;\n        }\n        ManagedReferenceFactory managedReferenceFactory = ManagedReferenceFactory.class.cast(bindingService.getValue());\n        return managedReferenceFactory.getReference().getInstance();\n    }", "language": "java", "code": "@Override\n    public Object lookup(String name) {\n        final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name);\n        ServiceController<?> bindingService = container.getService(bindInfo.getBinderServiceName());\n        if (bindingService == null) {\n            return null;\n        }\n        ManagedReferenceFactory managedReferenceFactory = ManagedReferenceFactory.class.cast(bindingService.getValue());\n        return managedReferenceFactory.getReference().getInstance();\n    }", "code_tokens": ["@", "Override", "public", "Object", "lookup", "(", "String", "name", ")", "{", "final", "ContextNames", ".", "BindInfo", "bindInfo", "=", "ContextNames", ".", "bindInfoFor", "(", "name", ")", ";", "ServiceController", "<", "?", ">", "bindingService", "=", "container", ".", "getService", "(", "bindInfo", ".", "getBinderServiceName", "(", ")", ")", ";", "if", "(", "bindingService", "==", "null", ")", "{", "return", "null", ";", "}", "ManagedReferenceFactory", "managedReferenceFactory", "=", "ManagedReferenceFactory", ".", "class", ".", "cast", "(", "bindingService", ".", "getValue", "(", ")", ")", ";", "return", "managedReferenceFactory", ".", "getReference", "(", ")", ".", "getInstance", "(", ")", ";", "}"], "docstring": "SPI contract for this method", "docstring_tokens": ["SPI", "contract", "for", "this", "method"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/WildFlyBindingRegistry.java#L58-L67", "partition": "test", "index": 2709, "time": "2014-12-04 11:39:26"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java", "func_name": "DatabaseTimerPersistence.setNodeName", "original_string": "private void setNodeName(final TimerState timerState, PreparedStatement statement, int paramIndex) throws SQLException {\n        if(timerState == TimerState.IN_TIMEOUT || timerState == TimerState.RETRY_TIMEOUT) {\n            statement.setString(paramIndex, nodeName);\n        } else {\n            statement.setNull(paramIndex, Types.VARCHAR);\n        }\n    }", "language": "java", "code": "private void setNodeName(final TimerState timerState, PreparedStatement statement, int paramIndex) throws SQLException {\n        if(timerState == TimerState.IN_TIMEOUT || timerState == TimerState.RETRY_TIMEOUT) {\n            statement.setString(paramIndex, nodeName);\n        } else {\n            statement.setNull(paramIndex, Types.VARCHAR);\n        }\n    }", "code_tokens": ["private", "void", "setNodeName", "(", "final", "TimerState", "timerState", ",", "PreparedStatement", "statement", ",", "int", "paramIndex", ")", "throws", "SQLException", "{", "if", "(", "timerState", "==", "TimerState", ".", "IN_TIMEOUT", "||", "timerState", "==", "TimerState", ".", "RETRY_TIMEOUT", ")", "{", "statement", ".", "setString", "(", "paramIndex", ",", "nodeName", ")", ";", "}", "else", "{", "statement", ".", "setNull", "(", "paramIndex", ",", "Types", ".", "VARCHAR", ")", ";", "}", "}"], "docstring": "Set the node name for persistence if the state is IN_TIMEOUT or RETRY_TIMEOUT to show which node is current active for the timer.", "docstring_tokens": ["Set", "the", "node", "name", "for", "persistence", "if", "the", "state", "is", "IN_TIMEOUT", "or", "RETRY_TIMEOUT", "to", "show", "which", "node", "is", "current", "active", "for", "the", "timer", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java#L735-L741", "partition": "test", "index": 2614, "time": "2015-01-23 15:37:16"}
{"repo": "wildfly/wildfly", "path": "transactions/src/main/java/org/jboss/as/txn/service/internal/tsr/JCAOrderedLastSynchronizationList.java", "func_name": "JCAOrderedLastSynchronizationList.beforeCompletion", "original_string": "@Override\n    public void beforeCompletion() {\n        // This is needed to guard against syncs being registered during the run, otherwise we could have used an iterator\n        int lastIndexProcessed = 0;\n        while ((lastIndexProcessed < preJcaSyncs.size())) {\n            Synchronization preJcaSync = preJcaSyncs.get(lastIndexProcessed);\n            if (TransactionLogger.ROOT_LOGGER.isTraceEnabled()) {\n                TransactionLogger.ROOT_LOGGER.trace(\"JCAOrderedLastSynchronizationList.preJcaSyncs.before_completion - Class: \" + preJcaSync.getClass() + \" HashCode: \"\n                    + preJcaSync.hashCode()\n                    + \" toString: \"\n                    + preJcaSync);\n            }\n            preJcaSync.beforeCompletion();\n            lastIndexProcessed = lastIndexProcessed + 1;\n        }\n\n        // Do the same for the jca syncs\n        lastIndexProcessed = 0;\n        while ((lastIndexProcessed < jcaSyncs.size())) {\n            Synchronization jcaSync = jcaSyncs.get(lastIndexProcessed);\n            if (TransactionLogger.ROOT_LOGGER.isTraceEnabled()) {\n                TransactionLogger.ROOT_LOGGER.trace(\"JCAOrderedLastSynchronizationList.jcaSyncs.before_completion - Class: \" + jcaSync.getClass() + \" HashCode: \"\n                    + jcaSync.hashCode()\n                    + \" toString: \"\n                    + jcaSync);\n            }\n            jcaSync.beforeCompletion();\n            lastIndexProcessed = lastIndexProcessed + 1;\n        }\n    }", "language": "java", "code": "@Override\n    public void beforeCompletion() {\n        // This is needed to guard against syncs being registered during the run, otherwise we could have used an iterator\n        int lastIndexProcessed = 0;\n        while ((lastIndexProcessed < preJcaSyncs.size())) {\n            Synchronization preJcaSync = preJcaSyncs.get(lastIndexProcessed);\n            if (TransactionLogger.ROOT_LOGGER.isTraceEnabled()) {\n                TransactionLogger.ROOT_LOGGER.trace(\"JCAOrderedLastSynchronizationList.preJcaSyncs.before_completion - Class: \" + preJcaSync.getClass() + \" HashCode: \"\n                    + preJcaSync.hashCode()\n                    + \" toString: \"\n                    + preJcaSync);\n            }\n            preJcaSync.beforeCompletion();\n            lastIndexProcessed = lastIndexProcessed + 1;\n        }\n\n        // Do the same for the jca syncs\n        lastIndexProcessed = 0;\n        while ((lastIndexProcessed < jcaSyncs.size())) {\n            Synchronization jcaSync = jcaSyncs.get(lastIndexProcessed);\n            if (TransactionLogger.ROOT_LOGGER.isTraceEnabled()) {\n                TransactionLogger.ROOT_LOGGER.trace(\"JCAOrderedLastSynchronizationList.jcaSyncs.before_completion - Class: \" + jcaSync.getClass() + \" HashCode: \"\n                    + jcaSync.hashCode()\n                    + \" toString: \"\n                    + jcaSync);\n            }\n            jcaSync.beforeCompletion();\n            lastIndexProcessed = lastIndexProcessed + 1;\n        }\n    }", "code_tokens": ["@", "Override", "public", "void", "beforeCompletion", "(", ")", "{", "// This is needed to guard against syncs being registered during the run, otherwise we could have used an iterator", "int", "lastIndexProcessed", "=", "0", ";", "while", "(", "(", "lastIndexProcessed", "<", "preJcaSyncs", ".", "size", "(", ")", ")", ")", "{", "Synchronization", "preJcaSync", "=", "preJcaSyncs", ".", "get", "(", "lastIndexProcessed", ")", ";", "if", "(", "TransactionLogger", ".", "ROOT_LOGGER", ".", "isTraceEnabled", "(", ")", ")", "{", "TransactionLogger", ".", "ROOT_LOGGER", ".", "trace", "(", "\"JCAOrderedLastSynchronizationList.preJcaSyncs.before_completion - Class: \"", "+", "preJcaSync", ".", "getClass", "(", ")", "+", "\" HashCode: \"", "+", "preJcaSync", ".", "hashCode", "(", ")", "+", "\" toString: \"", "+", "preJcaSync", ")", ";", "}", "preJcaSync", ".", "beforeCompletion", "(", ")", ";", "lastIndexProcessed", "=", "lastIndexProcessed", "+", "1", ";", "}", "// Do the same for the jca syncs", "lastIndexProcessed", "=", "0", ";", "while", "(", "(", "lastIndexProcessed", "<", "jcaSyncs", ".", "size", "(", ")", ")", ")", "{", "Synchronization", "jcaSync", "=", "jcaSyncs", ".", "get", "(", "lastIndexProcessed", ")", ";", "if", "(", "TransactionLogger", ".", "ROOT_LOGGER", ".", "isTraceEnabled", "(", ")", ")", "{", "TransactionLogger", ".", "ROOT_LOGGER", ".", "trace", "(", "\"JCAOrderedLastSynchronizationList.jcaSyncs.before_completion - Class: \"", "+", "jcaSync", ".", "getClass", "(", ")", "+", "\" HashCode: \"", "+", "jcaSync", ".", "hashCode", "(", ")", "+", "\" toString: \"", "+", "jcaSync", ")", ";", "}", "jcaSync", ".", "beforeCompletion", "(", ")", ";", "lastIndexProcessed", "=", "lastIndexProcessed", "+", "1", ";", "}", "}"], "docstring": "Exceptions from Synchronizations that are registered with this TSR are not trapped for before completion. This is because\nan error in a Sync here should result in the transaction rolling back.\n\nYou can see that in effect in these classes:\nhttps://github.com/jbosstm/narayana/blob/5.0.4.Final/ArjunaCore/arjuna/classes\n/com/arjuna/ats/arjuna/coordinator/TwoPhaseCoordinator.java#L91\nhttps://github.com/jbosstm/narayana/blob/5.0.4.Final/ArjunaJTA\n/jta/classes/com/arjuna/ats/internal/jta/resources/arjunacore/SynchronizationImple.java#L76", "docstring_tokens": ["Exceptions", "from", "Synchronizations", "that", "are", "registered", "with", "this", "TSR", "are", "not", "trapped", "for", "before", "completion", ".", "This", "is", "because", "an", "error", "in", "a", "Sync", "here", "should", "result", "in", "the", "transaction", "rolling", "back", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/transactions/src/main/java/org/jboss/as/txn/service/internal/tsr/JCAOrderedLastSynchronizationList.java#L101-L130", "partition": "test", "index": 2467, "time": "2015-02-26 21:27:39"}
{"repo": "wildfly/wildfly", "path": "transactions/src/main/java/org/jboss/as/txn/service/internal/tsr/JCAOrderedLastSynchronizationList.java", "func_name": "JCAOrderedLastSynchronizationList.registerInterposedSynchronization", "original_string": "public void registerInterposedSynchronization(Synchronization synchronization) throws IllegalStateException, SystemException {\n        int status = ContextTransactionSynchronizationRegistry.getInstance().getTransactionStatus();\n        switch (status) {\n            case javax.transaction.Status.STATUS_ACTIVE:\n            case javax.transaction.Status.STATUS_PREPARING:\n                break;\n            case Status.STATUS_MARKED_ROLLBACK:\n                // do nothing; we can pretend like it was registered, but it'll never be run anyway.\n                return;\n            default:\n                throw TransactionLogger.ROOT_LOGGER.syncsnotallowed(status);\n        }\n        if (synchronization.getClass().getName().startsWith(\"org.jboss.jca\")) {\n            if (TransactionLogger.ROOT_LOGGER.isTraceEnabled()) {\n                TransactionLogger.ROOT_LOGGER.trace(\"JCAOrderedLastSynchronizationList.jcaSyncs.add - Class: \" + synchronization.getClass() + \" HashCode: \"\n                    + synchronization.hashCode() + \" toString: \" + synchronization);\n            }\n            jcaSyncs.add(synchronization);\n\n        } else {\n            if (TransactionLogger.ROOT_LOGGER.isTraceEnabled()) {\n                TransactionLogger.ROOT_LOGGER.trace(\"JCAOrderedLastSynchronizationList.preJcaSyncs.add - Class: \" + synchronization.getClass() + \" HashCode: \"\n                    + synchronization.hashCode() + \" toString: \" + synchronization);\n            }\n            preJcaSyncs.add(synchronization);\n        }\n    }", "language": "java", "code": "public void registerInterposedSynchronization(Synchronization synchronization) throws IllegalStateException, SystemException {\n        int status = ContextTransactionSynchronizationRegistry.getInstance().getTransactionStatus();\n        switch (status) {\n            case javax.transaction.Status.STATUS_ACTIVE:\n            case javax.transaction.Status.STATUS_PREPARING:\n                break;\n            case Status.STATUS_MARKED_ROLLBACK:\n                // do nothing; we can pretend like it was registered, but it'll never be run anyway.\n                return;\n            default:\n                throw TransactionLogger.ROOT_LOGGER.syncsnotallowed(status);\n        }\n        if (synchronization.getClass().getName().startsWith(\"org.jboss.jca\")) {\n            if (TransactionLogger.ROOT_LOGGER.isTraceEnabled()) {\n                TransactionLogger.ROOT_LOGGER.trace(\"JCAOrderedLastSynchronizationList.jcaSyncs.add - Class: \" + synchronization.getClass() + \" HashCode: \"\n                    + synchronization.hashCode() + \" toString: \" + synchronization);\n            }\n            jcaSyncs.add(synchronization);\n\n        } else {\n            if (TransactionLogger.ROOT_LOGGER.isTraceEnabled()) {\n                TransactionLogger.ROOT_LOGGER.trace(\"JCAOrderedLastSynchronizationList.preJcaSyncs.add - Class: \" + synchronization.getClass() + \" HashCode: \"\n                    + synchronization.hashCode() + \" toString: \" + synchronization);\n            }\n            preJcaSyncs.add(synchronization);\n        }\n    }", "code_tokens": ["public", "void", "registerInterposedSynchronization", "(", "Synchronization", "synchronization", ")", "throws", "IllegalStateException", ",", "SystemException", "{", "int", "status", "=", "ContextTransactionSynchronizationRegistry", ".", "getInstance", "(", ")", ".", "getTransactionStatus", "(", ")", ";", "switch", "(", "status", ")", "{", "case", "javax", ".", "transaction", ".", "Status", ".", "STATUS_ACTIVE", ":", "case", "javax", ".", "transaction", ".", "Status", ".", "STATUS_PREPARING", ":", "break", ";", "case", "Status", ".", "STATUS_MARKED_ROLLBACK", ":", "// do nothing; we can pretend like it was registered, but it'll never be run anyway.", "return", ";", "default", ":", "throw", "TransactionLogger", ".", "ROOT_LOGGER", ".", "syncsnotallowed", "(", "status", ")", ";", "}", "if", "(", "synchronization", ".", "getClass", "(", ")", ".", "getName", "(", ")", ".", "startsWith", "(", "\"org.jboss.jca\"", ")", ")", "{", "if", "(", "TransactionLogger", ".", "ROOT_LOGGER", ".", "isTraceEnabled", "(", ")", ")", "{", "TransactionLogger", ".", "ROOT_LOGGER", ".", "trace", "(", "\"JCAOrderedLastSynchronizationList.jcaSyncs.add - Class: \"", "+", "synchronization", ".", "getClass", "(", ")", "+", "\" HashCode: \"", "+", "synchronization", ".", "hashCode", "(", ")", "+", "\" toString: \"", "+", "synchronization", ")", ";", "}", "jcaSyncs", ".", "add", "(", "synchronization", ")", ";", "}", "else", "{", "if", "(", "TransactionLogger", ".", "ROOT_LOGGER", ".", "isTraceEnabled", "(", ")", ")", "{", "TransactionLogger", ".", "ROOT_LOGGER", ".", "trace", "(", "\"JCAOrderedLastSynchronizationList.preJcaSyncs.add - Class: \"", "+", "synchronization", ".", "getClass", "(", ")", "+", "\" HashCode: \"", "+", "synchronization", ".", "hashCode", "(", ")", "+", "\" toString: \"", "+", "synchronization", ")", ";", "}", "preJcaSyncs", ".", "add", "(", "synchronization", ")", ";", "}", "}"], "docstring": "This is only allowed at various points of the transaction lifecycle.\n\n@param synchronization The synchronization to register\n@throws IllegalStateException In case the transaction was in a state that was not valid to register under\n@throws SystemException In case the transaction status was not known", "docstring_tokens": ["This", "is", "only", "allowed", "at", "various", "points", "of", "the", "transaction", "lifecycle", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/transactions/src/main/java/org/jboss/as/txn/service/internal/tsr/JCAOrderedLastSynchronizationList.java#L63-L89", "partition": "test", "index": 2466, "time": "2015-02-26 21:27:39"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/deployers/WSEndpointConfigMapping.java", "func_name": "WSEndpointConfigMapping.registerEndpointConfig", "original_string": "public void registerEndpointConfig(final String endpointClass, final EndpointConfig config) {\n        if ((endpointClass == null) || (config == null)) {\n            throw new IllegalArgumentException();\n        }\n        endpointConfigMap.put(endpointClass, config);\n    }", "language": "java", "code": "public void registerEndpointConfig(final String endpointClass, final EndpointConfig config) {\n        if ((endpointClass == null) || (config == null)) {\n            throw new IllegalArgumentException();\n        }\n        endpointConfigMap.put(endpointClass, config);\n    }", "code_tokens": ["public", "void", "registerEndpointConfig", "(", "final", "String", "endpointClass", ",", "final", "EndpointConfig", "config", ")", "{", "if", "(", "(", "endpointClass", "==", "null", ")", "||", "(", "config", "==", "null", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", ")", ";", "}", "endpointConfigMap", ".", "put", "(", "endpointClass", ",", "config", ")", ";", "}"], "docstring": "Registers endpoint and its config.\n\n@param endpointClass WS endpoint\n@param config Config with endpoint", "docstring_tokens": ["Registers", "endpoint", "and", "its", "config", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/deployers/WSEndpointConfigMapping.java#L45-L50", "partition": "test", "index": 2897, "time": "2015-03-04 12:32:27"}
{"repo": "wildfly/wildfly", "path": "system-jmx/src/main/java/org/jboss/system/ServiceMBeanSupport.java", "func_name": "ServiceMBeanSupport.getName", "original_string": "public String getName() {\n        final String s = log.getName();\n        final int i = s.lastIndexOf(\".\");\n        return i != -1 ? s.substring(i + 1, s.length()) : s;\n    }", "language": "java", "code": "public String getName() {\n        final String s = log.getName();\n        final int i = s.lastIndexOf(\".\");\n        return i != -1 ? s.substring(i + 1, s.length()) : s;\n    }", "code_tokens": ["public", "String", "getName", "(", ")", "{", "final", "String", "s", "=", "log", ".", "getName", "(", ")", ";", "final", "int", "i", "=", "s", ".", "lastIndexOf", "(", "\".\"", ")", ";", "return", "i", "!=", "-", "1", "?", "s", ".", "substring", "(", "i", "+", "1", ",", "s", ".", "length", "(", ")", ")", ":", "s", ";", "}"], "docstring": "Use the short class name as the default for the service name.\n\n@return a description of the mbean", "docstring_tokens": ["Use", "the", "short", "class", "name", "as", "the", "default", "for", "the", "service", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/system-jmx/src/main/java/org/jboss/system/ServiceMBeanSupport.java#L127-L131", "partition": "test", "index": 2802, "time": "2015-03-10 00:21:54"}
{"repo": "wildfly/wildfly", "path": "system-jmx/src/main/java/org/jboss/system/ServiceMBeanSupport.java", "func_name": "ServiceMBeanSupport.sendStateChangeNotification", "original_string": "private void sendStateChangeNotification(int oldState, int newState, String msg, Throwable t) {\n        long now = System.currentTimeMillis();\n        AttributeChangeNotification stateChangeNotification = new AttributeChangeNotification(this,\n                getNextNotificationSequenceNumber(), now, msg, \"State\", \"java.lang.Integer\", new Integer(oldState),\n                new Integer(newState));\n        stateChangeNotification.setUserData(t);\n        sendNotification(stateChangeNotification);\n    }", "language": "java", "code": "private void sendStateChangeNotification(int oldState, int newState, String msg, Throwable t) {\n        long now = System.currentTimeMillis();\n        AttributeChangeNotification stateChangeNotification = new AttributeChangeNotification(this,\n                getNextNotificationSequenceNumber(), now, msg, \"State\", \"java.lang.Integer\", new Integer(oldState),\n                new Integer(newState));\n        stateChangeNotification.setUserData(t);\n        sendNotification(stateChangeNotification);\n    }", "code_tokens": ["private", "void", "sendStateChangeNotification", "(", "int", "oldState", ",", "int", "newState", ",", "String", "msg", ",", "Throwable", "t", ")", "{", "long", "now", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "AttributeChangeNotification", "stateChangeNotification", "=", "new", "AttributeChangeNotification", "(", "this", ",", "getNextNotificationSequenceNumber", "(", ")", ",", "now", ",", "msg", ",", "\"State\"", ",", "\"java.lang.Integer\"", ",", "new", "Integer", "(", "oldState", ")", ",", "new", "Integer", "(", "newState", ")", ")", ";", "stateChangeNotification", ".", "setUserData", "(", "t", ")", ";", "sendNotification", "(", "stateChangeNotification", ")", ";", "}"], "docstring": "Helper for sending out state change notifications", "docstring_tokens": ["Helper", "for", "sending", "out", "state", "change", "notifications"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/system-jmx/src/main/java/org/jboss/system/ServiceMBeanSupport.java#L477-L484", "partition": "test", "index": 2803, "time": "2015-03-10 00:21:54"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/interceptors/ShutDownInterceptorFactory.java", "func_name": "ShutDownInterceptorFactory.shutdown", "original_string": "public void shutdown() {\n        int value;\n        int oldValue;\n        //set the shutdown bit\n        do {\n            oldValue = invocationCount;\n            value = SHUTDOWN_FLAG | oldValue;\n            //the component has already been shutdown\n            if (oldValue == value) {\n                return;\n            }\n        } while (!updater.compareAndSet(this, oldValue, value));\n\n        synchronized (lock) {\n            value = invocationCount;\n            while (value != SHUTDOWN_FLAG) {\n                try {\n                    lock.wait();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n                value = invocationCount;\n                if((value & SHUTDOWN_FLAG) == 0) {\n                    return; //component has been restarted\n                }\n            }\n        }\n    }", "language": "java", "code": "public void shutdown() {\n        int value;\n        int oldValue;\n        //set the shutdown bit\n        do {\n            oldValue = invocationCount;\n            value = SHUTDOWN_FLAG | oldValue;\n            //the component has already been shutdown\n            if (oldValue == value) {\n                return;\n            }\n        } while (!updater.compareAndSet(this, oldValue, value));\n\n        synchronized (lock) {\n            value = invocationCount;\n            while (value != SHUTDOWN_FLAG) {\n                try {\n                    lock.wait();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n                value = invocationCount;\n                if((value & SHUTDOWN_FLAG) == 0) {\n                    return; //component has been restarted\n                }\n            }\n        }\n    }", "code_tokens": ["public", "void", "shutdown", "(", ")", "{", "int", "value", ";", "int", "oldValue", ";", "//set the shutdown bit", "do", "{", "oldValue", "=", "invocationCount", ";", "value", "=", "SHUTDOWN_FLAG", "|", "oldValue", ";", "//the component has already been shutdown", "if", "(", "oldValue", "==", "value", ")", "{", "return", ";", "}", "}", "while", "(", "!", "updater", ".", "compareAndSet", "(", "this", ",", "oldValue", ",", "value", ")", ")", ";", "synchronized", "(", "lock", ")", "{", "value", "=", "invocationCount", ";", "while", "(", "value", "!=", "SHUTDOWN_FLAG", ")", "{", "try", "{", "lock", ".", "wait", "(", ")", ";", "}", "catch", "(", "InterruptedException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "value", "=", "invocationCount", ";", "if", "(", "(", "value", "&", "SHUTDOWN_FLAG", ")", "==", "0", ")", "{", "return", ";", "//component has been restarted", "}", "}", "}", "}"], "docstring": "Upon calling this method the EJB will be set to a shutdown state, and no further invocations will be allowed.\nIt will then wait for all active invocation to finish and then return.", "docstring_tokens": ["Upon", "calling", "this", "method", "the", "EJB", "will", "be", "set", "to", "a", "shutdown", "state", "and", "no", "further", "invocations", "will", "be", "allowed", ".", "It", "will", "then", "wait", "for", "all", "active", "invocation", "to", "finish", "and", "then", "return", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/interceptors/ShutDownInterceptorFactory.java#L94-L121", "partition": "test", "index": 2556, "time": "2015-03-13 15:27:14"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.createUndefineAttributeOperation", "original_string": "public static ModelNode createUndefineAttributeOperation(PathAddress address, Attribute attribute) {\n        return createAttributeOperation(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION, address, attribute);\n    }", "language": "java", "code": "public static ModelNode createUndefineAttributeOperation(PathAddress address, Attribute attribute) {\n        return createAttributeOperation(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION, address, attribute);\n    }", "code_tokens": ["public", "static", "ModelNode", "createUndefineAttributeOperation", "(", "PathAddress", "address", ",", "Attribute", "attribute", ")", "{", "return", "createAttributeOperation", "(", "ModelDescriptionConstants", ".", "UNDEFINE_ATTRIBUTE_OPERATION", ",", "address", ",", "attribute", ")", ";", "}"], "docstring": "Creates an undefine-attribute operation using the specified address and name.\n@param address a resource path\n@param attribute an attribute\n@return an undefine-attribute operation", "docstring_tokens": ["Creates", "an", "undefine", "-", "attribute", "operation", "using", "the", "specified", "address", "and", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L193-L195", "partition": "test", "index": 2496, "time": "2015-04-07 11:08:53"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.createAddOperation", "original_string": "public static ModelNode createAddOperation(PathAddress address, Map<Attribute, ModelNode> parameters) {\n        ModelNode operation = Util.createAddOperation(address);\n        for (Map.Entry<Attribute, ModelNode> entry : parameters.entrySet()) {\n            operation.get(entry.getKey().getName()).set(entry.getValue());\n        }\n        return operation;\n    }", "language": "java", "code": "public static ModelNode createAddOperation(PathAddress address, Map<Attribute, ModelNode> parameters) {\n        ModelNode operation = Util.createAddOperation(address);\n        for (Map.Entry<Attribute, ModelNode> entry : parameters.entrySet()) {\n            operation.get(entry.getKey().getName()).set(entry.getValue());\n        }\n        return operation;\n    }", "code_tokens": ["public", "static", "ModelNode", "createAddOperation", "(", "PathAddress", "address", ",", "Map", "<", "Attribute", ",", "ModelNode", ">", "parameters", ")", "{", "ModelNode", "operation", "=", "Util", ".", "createAddOperation", "(", "address", ")", ";", "for", "(", "Map", ".", "Entry", "<", "Attribute", ",", "ModelNode", ">", "entry", ":", "parameters", ".", "entrySet", "(", ")", ")", "{", "operation", ".", "get", "(", "entry", ".", "getKey", "(", ")", ".", "getName", "(", ")", ")", ".", "set", "(", "entry", ".", "getValue", "(", ")", ")", ";", "}", "return", "operation", ";", "}"], "docstring": "Creates an add operation using the specified address and parameters\n@param address a path address\n@param parameters a map of values per attribute\n@return an add operation", "docstring_tokens": ["Creates", "an", "add", "operation", "using", "the", "specified", "address", "and", "parameters"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L131-L137", "partition": "test", "index": 2492, "time": "2015-04-09 09:26:19"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.setPathAddress", "original_string": "public static void setPathAddress(ModelNode operation, PathAddress address) {\n        operation.get(ModelDescriptionConstants.OP_ADDR).set(address.toModelNode());\n    }", "language": "java", "code": "public static void setPathAddress(ModelNode operation, PathAddress address) {\n        operation.get(ModelDescriptionConstants.OP_ADDR).set(address.toModelNode());\n    }", "code_tokens": ["public", "static", "void", "setPathAddress", "(", "ModelNode", "operation", ",", "PathAddress", "address", ")", "{", "operation", ".", "get", "(", "ModelDescriptionConstants", ".", "OP_ADDR", ")", ".", "set", "(", "address", ".", "toModelNode", "(", ")", ")", ";", "}"], "docstring": "Sets the address of the specified operation.\n@param operation an operation\n@param address a path address", "docstring_tokens": ["Sets", "the", "address", "of", "the", "specified", "operation", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L62-L64", "partition": "test", "index": 2488, "time": "2015-04-09 09:26:19"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.addPostConstructInterceptor", "original_string": "public void addPostConstructInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        postConstructInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "language": "java", "code": "public void addPostConstructInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        postConstructInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "code_tokens": ["public", "void", "addPostConstructInterceptor", "(", "InterceptorFactory", "interceptorFactory", ",", "int", "priority", ")", "{", "postConstructInterceptors", ".", "add", "(", "Collections", ".", "singletonList", "(", "interceptorFactory", ")", ",", "priority", ")", ";", "}"], "docstring": "Adds a post construct interceptor\n\n@param interceptorFactory The interceptor to add\n@param priority           The priority", "docstring_tokens": ["Adds", "a", "post", "construct", "interceptor"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L363-L365", "partition": "test", "index": 2814, "time": "2015-04-13 09:53:13"}
{"repo": "wildfly/wildfly", "path": "ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java", "func_name": "ComponentConfiguration.addPostActivateInterceptor", "original_string": "public void addPostActivateInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        postActivateInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "language": "java", "code": "public void addPostActivateInterceptor(InterceptorFactory interceptorFactory, int priority) {\n        postActivateInterceptors.add(Collections.singletonList(interceptorFactory), priority);\n    }", "code_tokens": ["public", "void", "addPostActivateInterceptor", "(", "InterceptorFactory", "interceptorFactory", ",", "int", "priority", ")", "{", "postActivateInterceptors", ".", "add", "(", "Collections", ".", "singletonList", "(", "interceptorFactory", ")", ",", "priority", ")", ";", "}"], "docstring": "Adds a post activate interceptor\n\n@param interceptorFactory The interceptor to add\n@param priority           The priority", "docstring_tokens": ["Adds", "a", "post", "activate", "interceptor"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ee/src/main/java/org/jboss/as/ee/component/ComponentConfiguration.java#L469-L471", "partition": "test", "index": 2817, "time": "2015-04-13 09:53:13"}
{"repo": "wildfly/wildfly", "path": "jpa/hibernate4_3/src/main/java/org/jboss/as/jpa/hibernate4/management/QueryName.java", "func_name": "QueryName.subst", "original_string": "private static void subst(final StringBuilder stringBuilder, final String from, final String to) {\n        int begin = 0, end = 0;\n\n        while ((end = stringBuilder.indexOf(from, end)) != -1) {\n            stringBuilder.delete(end, end + from.length());\n            stringBuilder.insert(end, to);\n\n            // update positions\n            begin = end + to.length();\n            end = begin;\n        }\n    }", "language": "java", "code": "private static void subst(final StringBuilder stringBuilder, final String from, final String to) {\n        int begin = 0, end = 0;\n\n        while ((end = stringBuilder.indexOf(from, end)) != -1) {\n            stringBuilder.delete(end, end + from.length());\n            stringBuilder.insert(end, to);\n\n            // update positions\n            begin = end + to.length();\n            end = begin;\n        }\n    }", "code_tokens": ["private", "static", "void", "subst", "(", "final", "StringBuilder", "stringBuilder", ",", "final", "String", "from", ",", "final", "String", "to", ")", "{", "int", "begin", "=", "0", ",", "end", "=", "0", ";", "while", "(", "(", "end", "=", "stringBuilder", ".", "indexOf", "(", "from", ",", "end", ")", ")", "!=", "-", "1", ")", "{", "stringBuilder", ".", "delete", "(", "end", ",", "end", "+", "from", ".", "length", "(", ")", ")", ";", "stringBuilder", ".", "insert", "(", "end", ",", "to", ")", ";", "// update positions", "begin", "=", "end", "+", "to", ".", "length", "(", ")", ";", "end", "=", "begin", ";", "}", "}"], "docstring": "Substitute sub-strings inside of a string.\n\n@param stringBuilder String buffer to use for substitution (buffer is not reset)\n@param from String to substitute from\n@param to   String to substitute to", "docstring_tokens": ["Substitute", "sub", "-", "strings", "inside", "of", "a", "string", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/hibernate4_3/src/main/java/org/jboss/as/jpa/hibernate4/management/QueryName.java#L207-L218", "partition": "test", "index": 2650, "time": "2015-05-06 19:37:06"}
{"repo": "wildfly/wildfly", "path": "jpa/spi/src/main/java/org/jipijapa/event/impl/internal/Notification.java", "func_name": "Notification.addCacheDependencies", "original_string": "public static void addCacheDependencies(Classification cacheType, Properties properties) {\n        for(EventListener eventListener: eventListeners) {\n            eventListener.addCacheDependencies(cacheType, properties);\n        }\n    }", "language": "java", "code": "public static void addCacheDependencies(Classification cacheType, Properties properties) {\n        for(EventListener eventListener: eventListeners) {\n            eventListener.addCacheDependencies(cacheType, properties);\n        }\n    }", "code_tokens": ["public", "static", "void", "addCacheDependencies", "(", "Classification", "cacheType", ",", "Properties", "properties", ")", "{", "for", "(", "EventListener", "eventListener", ":", "eventListeners", ")", "{", "eventListener", ".", "addCacheDependencies", "(", "cacheType", ",", "properties", ")", ";", "}", "}"], "docstring": "add cache dependencies\n\n@param properties", "docstring_tokens": ["add", "cache", "dependencies"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/spi/src/main/java/org/jipijapa/event/impl/internal/Notification.java#L93-L97", "partition": "test", "index": 2608, "time": "2015-05-06 19:37:06"}
{"repo": "wildfly/wildfly", "path": "jpa/hibernate4_1/src/main/java/org/jboss/as/jpa/hibernate4/HibernatePersistenceProviderAdaptor.java", "func_name": "HibernatePersistenceProviderAdaptor.doesScopedPersistenceUnitNameIdentifyCacheRegionName", "original_string": "@Override\n    public boolean doesScopedPersistenceUnitNameIdentifyCacheRegionName(PersistenceUnitMetadata pu) {\n        String cacheRegionPrefix = pu.getProperties().getProperty(AvailableSettings.CACHE_REGION_PREFIX);\n\n        return cacheRegionPrefix == null || cacheRegionPrefix.equals(pu.getScopedPersistenceUnitName());\n    }", "language": "java", "code": "@Override\n    public boolean doesScopedPersistenceUnitNameIdentifyCacheRegionName(PersistenceUnitMetadata pu) {\n        String cacheRegionPrefix = pu.getProperties().getProperty(AvailableSettings.CACHE_REGION_PREFIX);\n\n        return cacheRegionPrefix == null || cacheRegionPrefix.equals(pu.getScopedPersistenceUnitName());\n    }", "code_tokens": ["@", "Override", "public", "boolean", "doesScopedPersistenceUnitNameIdentifyCacheRegionName", "(", "PersistenceUnitMetadata", "pu", ")", "{", "String", "cacheRegionPrefix", "=", "pu", ".", "getProperties", "(", ")", ".", "getProperty", "(", "AvailableSettings", ".", "CACHE_REGION_PREFIX", ")", ";", "return", "cacheRegionPrefix", "==", "null", "||", "cacheRegionPrefix", ".", "equals", "(", "pu", ".", "getScopedPersistenceUnitName", "(", ")", ")", ";", "}"], "docstring": "determine if management console can display the second level cache entries\n\n@param pu\n@return false if a custom AvailableSettings.CACHE_REGION_PREFIX property is specified.\ntrue if the scoped persistence unit name is used to prefix cache entries.", "docstring_tokens": ["determine", "if", "management", "console", "can", "display", "the", "second", "level", "cache", "entries"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/hibernate4_1/src/main/java/org/jboss/as/jpa/hibernate4/HibernatePersistenceProviderAdaptor.java#L113-L118", "partition": "test", "index": 2470, "time": "2015-05-06 19:37:06"}
{"repo": "wildfly/wildfly", "path": "legacy/messaging/src/main/java/org/jboss/as/messaging/MigrateOperation.java", "func_name": "MigrateOperation.addMessagingActiveMQExtension", "original_string": "private void addMessagingActiveMQExtension(OperationContext context, Map<PathAddress, ModelNode> migrationOperations, boolean describe) {\n        Resource root = context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS, false);\n        if (root.getChildrenNames(EXTENSION).contains(MESSAGING_ACTIVEMQ_EXTENSION)) {\n            // extension is already added, do nothing\n            return;\n        }\n        PathAddress extensionAddress = pathAddress(EXTENSION, MESSAGING_ACTIVEMQ_EXTENSION);\n        OperationEntry addEntry = context.getRootResourceRegistration().getOperationEntry(extensionAddress, ADD);\n        ModelNode addOperation = createAddOperation(extensionAddress);\n        addOperation.get(MODULE).set(MESSAGING_ACTIVEMQ_MODULE);\n        if (describe) {\n            migrationOperations.put(extensionAddress, addOperation);\n        } else {\n            context.addStep(context.getResult().get(extensionAddress.toString()), addOperation, addEntry.getOperationHandler(), MODEL);\n        }\n    }", "language": "java", "code": "private void addMessagingActiveMQExtension(OperationContext context, Map<PathAddress, ModelNode> migrationOperations, boolean describe) {\n        Resource root = context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS, false);\n        if (root.getChildrenNames(EXTENSION).contains(MESSAGING_ACTIVEMQ_EXTENSION)) {\n            // extension is already added, do nothing\n            return;\n        }\n        PathAddress extensionAddress = pathAddress(EXTENSION, MESSAGING_ACTIVEMQ_EXTENSION);\n        OperationEntry addEntry = context.getRootResourceRegistration().getOperationEntry(extensionAddress, ADD);\n        ModelNode addOperation = createAddOperation(extensionAddress);\n        addOperation.get(MODULE).set(MESSAGING_ACTIVEMQ_MODULE);\n        if (describe) {\n            migrationOperations.put(extensionAddress, addOperation);\n        } else {\n            context.addStep(context.getResult().get(extensionAddress.toString()), addOperation, addEntry.getOperationHandler(), MODEL);\n        }\n    }", "code_tokens": ["private", "void", "addMessagingActiveMQExtension", "(", "OperationContext", "context", ",", "Map", "<", "PathAddress", ",", "ModelNode", ">", "migrationOperations", ",", "boolean", "describe", ")", "{", "Resource", "root", "=", "context", ".", "readResourceFromRoot", "(", "PathAddress", ".", "EMPTY_ADDRESS", ",", "false", ")", ";", "if", "(", "root", ".", "getChildrenNames", "(", "EXTENSION", ")", ".", "contains", "(", "MESSAGING_ACTIVEMQ_EXTENSION", ")", ")", "{", "// extension is already added, do nothing", "return", ";", "}", "PathAddress", "extensionAddress", "=", "pathAddress", "(", "EXTENSION", ",", "MESSAGING_ACTIVEMQ_EXTENSION", ")", ";", "OperationEntry", "addEntry", "=", "context", ".", "getRootResourceRegistration", "(", ")", ".", "getOperationEntry", "(", "extensionAddress", ",", "ADD", ")", ";", "ModelNode", "addOperation", "=", "createAddOperation", "(", "extensionAddress", ")", ";", "addOperation", ".", "get", "(", "MODULE", ")", ".", "set", "(", "MESSAGING_ACTIVEMQ_MODULE", ")", ";", "if", "(", "describe", ")", "{", "migrationOperations", ".", "put", "(", "extensionAddress", ",", "addOperation", ")", ";", "}", "else", "{", "context", ".", "addStep", "(", "context", ".", "getResult", "(", ")", ".", "get", "(", "extensionAddress", ".", "toString", "(", ")", ")", ",", "addOperation", ",", "addEntry", ".", "getOperationHandler", "(", ")", ",", "MODEL", ")", ";", "}", "}"], "docstring": "It's possible that the extension is already present. In that case, this method does nothing.", "docstring_tokens": ["It", "s", "possible", "that", "the", "extension", "is", "already", "present", ".", "In", "that", "case", "this", "method", "does", "nothing", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/messaging/src/main/java/org/jboss/as/messaging/MigrateOperation.java#L305-L320", "partition": "test", "index": 2904, "time": "2015-05-19 09:50:38"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/ImportJournalOperation.java", "func_name": "ImportJournalOperation.createInVMTransportConfiguration", "original_string": "private TransportConfiguration createInVMTransportConfiguration(OperationContext context) throws OperationFailedException {\n        final Resource serverResource = context.readResource(EMPTY_ADDRESS, false);\n        Set<Resource.ResourceEntry> invmConnectors = serverResource.getChildren(CommonAttributes.IN_VM_CONNECTOR);\n        if (invmConnectors.isEmpty()) {\n            throw MessagingLogger.ROOT_LOGGER.noInVMConnector();\n        }\n        Resource.ResourceEntry connectorEntry = invmConnectors.iterator().next();\n\n        Resource connectorResource = context.readResource(PathAddress.pathAddress(connectorEntry.getPathElement()), false);\n        ModelNode model = connectorResource.getModel();\n\n        Map<String, Object> params = new HashMap<>(CommonAttributes.PARAMS.unwrap(context, model));\n        params.put(InVMTransportDefinition.SERVER_ID.getName(), InVMTransportDefinition.SERVER_ID.resolveModelAttribute(context, model).asInt());\n        TransportConfiguration transportConfiguration = new TransportConfiguration(InVMConnectorFactory.class.getName(), params);\n        return transportConfiguration;\n    }", "language": "java", "code": "private TransportConfiguration createInVMTransportConfiguration(OperationContext context) throws OperationFailedException {\n        final Resource serverResource = context.readResource(EMPTY_ADDRESS, false);\n        Set<Resource.ResourceEntry> invmConnectors = serverResource.getChildren(CommonAttributes.IN_VM_CONNECTOR);\n        if (invmConnectors.isEmpty()) {\n            throw MessagingLogger.ROOT_LOGGER.noInVMConnector();\n        }\n        Resource.ResourceEntry connectorEntry = invmConnectors.iterator().next();\n\n        Resource connectorResource = context.readResource(PathAddress.pathAddress(connectorEntry.getPathElement()), false);\n        ModelNode model = connectorResource.getModel();\n\n        Map<String, Object> params = new HashMap<>(CommonAttributes.PARAMS.unwrap(context, model));\n        params.put(InVMTransportDefinition.SERVER_ID.getName(), InVMTransportDefinition.SERVER_ID.resolveModelAttribute(context, model).asInt());\n        TransportConfiguration transportConfiguration = new TransportConfiguration(InVMConnectorFactory.class.getName(), params);\n        return transportConfiguration;\n    }", "code_tokens": ["private", "TransportConfiguration", "createInVMTransportConfiguration", "(", "OperationContext", "context", ")", "throws", "OperationFailedException", "{", "final", "Resource", "serverResource", "=", "context", ".", "readResource", "(", "EMPTY_ADDRESS", ",", "false", ")", ";", "Set", "<", "Resource", ".", "ResourceEntry", ">", "invmConnectors", "=", "serverResource", ".", "getChildren", "(", "CommonAttributes", ".", "IN_VM_CONNECTOR", ")", ";", "if", "(", "invmConnectors", ".", "isEmpty", "(", ")", ")", "{", "throw", "MessagingLogger", ".", "ROOT_LOGGER", ".", "noInVMConnector", "(", ")", ";", "}", "Resource", ".", "ResourceEntry", "connectorEntry", "=", "invmConnectors", ".", "iterator", "(", ")", ".", "next", "(", ")", ";", "Resource", "connectorResource", "=", "context", ".", "readResource", "(", "PathAddress", ".", "pathAddress", "(", "connectorEntry", ".", "getPathElement", "(", ")", ")", ",", "false", ")", ";", "ModelNode", "model", "=", "connectorResource", ".", "getModel", "(", ")", ";", "Map", "<", "String", ",", "Object", ">", "params", "=", "new", "HashMap", "<>", "(", "CommonAttributes", ".", "PARAMS", ".", "unwrap", "(", "context", ",", "model", ")", ")", ";", "params", ".", "put", "(", "InVMTransportDefinition", ".", "SERVER_ID", ".", "getName", "(", ")", ",", "InVMTransportDefinition", ".", "SERVER_ID", ".", "resolveModelAttribute", "(", "context", ",", "model", ")", ".", "asInt", "(", ")", ")", ";", "TransportConfiguration", "transportConfiguration", "=", "new", "TransportConfiguration", "(", "InVMConnectorFactory", ".", "class", ".", "getName", "(", ")", ",", "params", ")", ";", "return", "transportConfiguration", ";", "}"], "docstring": "The XmlDataImporter requires a connector to connect to the artemis broker.\n\nWe require to use a in-vm one so that importing a journal is not subject to any network connection problem.", "docstring_tokens": ["The", "XmlDataImporter", "requires", "a", "connector", "to", "connect", "to", "the", "artemis", "broker", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/ImportJournalOperation.java#L130-L145", "partition": "test", "index": 2651, "time": "2015-07-07 15:19:08"}
{"repo": "wildfly/wildfly", "path": "legacy/web/src/main/java/org/jboss/as/web/WebMigrateOperation.java", "func_name": "WebMigrateOperation.createIoSubsystem", "original_string": "private void createIoSubsystem(OperationContext context, Map<PathAddress, ModelNode> migrationOperations, PathAddress baseAddress) {\n        Resource root = context.readResourceFromRoot(baseAddress, false);\n        if (root.getChildrenNames(SUBSYSTEM).contains(IOExtension.SUBSYSTEM_NAME)) {\n            // subsystem is already added, do nothing\n            return;\n        }\n\n        //these addresses will be fixed later, no need to use the base address\n        PathAddress address = pathAddress(pathElement(SUBSYSTEM, IOExtension.SUBSYSTEM_NAME));\n        migrationOperations.put(address, createAddOperation(address));\n        address = pathAddress(pathElement(SUBSYSTEM, IOExtension.SUBSYSTEM_NAME), pathElement(\"worker\", \"default\"));\n        migrationOperations.put(address, createAddOperation(address));\n        address = pathAddress(pathElement(SUBSYSTEM, IOExtension.SUBSYSTEM_NAME), pathElement(\"buffer-pool\", \"default\"));\n        migrationOperations.put(address, createAddOperation(address));\n\n    }", "language": "java", "code": "private void createIoSubsystem(OperationContext context, Map<PathAddress, ModelNode> migrationOperations, PathAddress baseAddress) {\n        Resource root = context.readResourceFromRoot(baseAddress, false);\n        if (root.getChildrenNames(SUBSYSTEM).contains(IOExtension.SUBSYSTEM_NAME)) {\n            // subsystem is already added, do nothing\n            return;\n        }\n\n        //these addresses will be fixed later, no need to use the base address\n        PathAddress address = pathAddress(pathElement(SUBSYSTEM, IOExtension.SUBSYSTEM_NAME));\n        migrationOperations.put(address, createAddOperation(address));\n        address = pathAddress(pathElement(SUBSYSTEM, IOExtension.SUBSYSTEM_NAME), pathElement(\"worker\", \"default\"));\n        migrationOperations.put(address, createAddOperation(address));\n        address = pathAddress(pathElement(SUBSYSTEM, IOExtension.SUBSYSTEM_NAME), pathElement(\"buffer-pool\", \"default\"));\n        migrationOperations.put(address, createAddOperation(address));\n\n    }", "code_tokens": ["private", "void", "createIoSubsystem", "(", "OperationContext", "context", ",", "Map", "<", "PathAddress", ",", "ModelNode", ">", "migrationOperations", ",", "PathAddress", "baseAddress", ")", "{", "Resource", "root", "=", "context", ".", "readResourceFromRoot", "(", "baseAddress", ",", "false", ")", ";", "if", "(", "root", ".", "getChildrenNames", "(", "SUBSYSTEM", ")", ".", "contains", "(", "IOExtension", ".", "SUBSYSTEM_NAME", ")", ")", "{", "// subsystem is already added, do nothing", "return", ";", "}", "//these addresses will be fixed later, no need to use the base address", "PathAddress", "address", "=", "pathAddress", "(", "pathElement", "(", "SUBSYSTEM", ",", "IOExtension", ".", "SUBSYSTEM_NAME", ")", ")", ";", "migrationOperations", ".", "put", "(", "address", ",", "createAddOperation", "(", "address", ")", ")", ";", "address", "=", "pathAddress", "(", "pathElement", "(", "SUBSYSTEM", ",", "IOExtension", ".", "SUBSYSTEM_NAME", ")", ",", "pathElement", "(", "\"worker\"", ",", "\"default\"", ")", ")", ";", "migrationOperations", ".", "put", "(", "address", ",", "createAddOperation", "(", "address", ")", ")", ";", "address", "=", "pathAddress", "(", "pathElement", "(", "SUBSYSTEM", ",", "IOExtension", ".", "SUBSYSTEM_NAME", ")", ",", "pathElement", "(", "\"buffer-pool\"", ",", "\"default\"", ")", ")", ";", "migrationOperations", ".", "put", "(", "address", ",", "createAddOperation", "(", "address", ")", ")", ";", "}"], "docstring": "We need to create the IO subsystem, if it does not already exist", "docstring_tokens": ["We", "need", "to", "create", "the", "IO", "subsystem", "if", "it", "does", "not", "already", "exist"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/web/src/main/java/org/jboss/as/web/WebMigrateOperation.java#L458-L473", "partition": "test", "index": 2887, "time": "2015-07-17 17:19:15"}
{"repo": "wildfly/wildfly", "path": "legacy/web/src/main/java/org/jboss/as/web/WebMigrateOperation.java", "func_name": "WebMigrateOperation.createWelcomeContentHandler", "original_string": "private void createWelcomeContentHandler(Map<PathAddress, ModelNode> migrationOperations) {\n\n        PathAddress address = pathAddress(pathElement(SUBSYSTEM, UndertowExtension.SUBSYSTEM_NAME), pathElement(Constants.CONFIGURATION, Constants.HANDLER));\n        migrationOperations.put(address, createAddOperation(address));\n\n        address = pathAddress(pathElement(SUBSYSTEM, UndertowExtension.SUBSYSTEM_NAME), pathElement(Constants.CONFIGURATION, Constants.HANDLER), pathElement(Constants.FILE, \"welcome-content\"));\n        final ModelNode add = createAddOperation(address);\n        add.get(Constants.PATH).set(new ModelNode(new ValueExpression(\"${jboss.home.dir}/welcome-content\")));\n        migrationOperations.put(address, add);\n    }", "language": "java", "code": "private void createWelcomeContentHandler(Map<PathAddress, ModelNode> migrationOperations) {\n\n        PathAddress address = pathAddress(pathElement(SUBSYSTEM, UndertowExtension.SUBSYSTEM_NAME), pathElement(Constants.CONFIGURATION, Constants.HANDLER));\n        migrationOperations.put(address, createAddOperation(address));\n\n        address = pathAddress(pathElement(SUBSYSTEM, UndertowExtension.SUBSYSTEM_NAME), pathElement(Constants.CONFIGURATION, Constants.HANDLER), pathElement(Constants.FILE, \"welcome-content\"));\n        final ModelNode add = createAddOperation(address);\n        add.get(Constants.PATH).set(new ModelNode(new ValueExpression(\"${jboss.home.dir}/welcome-content\")));\n        migrationOperations.put(address, add);\n    }", "code_tokens": ["private", "void", "createWelcomeContentHandler", "(", "Map", "<", "PathAddress", ",", "ModelNode", ">", "migrationOperations", ")", "{", "PathAddress", "address", "=", "pathAddress", "(", "pathElement", "(", "SUBSYSTEM", ",", "UndertowExtension", ".", "SUBSYSTEM_NAME", ")", ",", "pathElement", "(", "Constants", ".", "CONFIGURATION", ",", "Constants", ".", "HANDLER", ")", ")", ";", "migrationOperations", ".", "put", "(", "address", ",", "createAddOperation", "(", "address", ")", ")", ";", "address", "=", "pathAddress", "(", "pathElement", "(", "SUBSYSTEM", ",", "UndertowExtension", ".", "SUBSYSTEM_NAME", ")", ",", "pathElement", "(", "Constants", ".", "CONFIGURATION", ",", "Constants", ".", "HANDLER", ")", ",", "pathElement", "(", "Constants", ".", "FILE", ",", "\"welcome-content\"", ")", ")", ";", "final", "ModelNode", "add", "=", "createAddOperation", "(", "address", ")", ";", "add", ".", "get", "(", "Constants", ".", "PATH", ")", ".", "set", "(", "new", "ModelNode", "(", "new", "ValueExpression", "(", "\"${jboss.home.dir}/welcome-content\"", ")", ")", ")", ";", "migrationOperations", ".", "put", "(", "address", ",", "add", ")", ";", "}"], "docstring": "create a handler for serving welcome content", "docstring_tokens": ["create", "a", "handler", "for", "serving", "welcome", "content"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/web/src/main/java/org/jboss/as/web/WebMigrateOperation.java#L479-L488", "partition": "test", "index": 2888, "time": "2015-07-17 17:19:15"}
{"repo": "wildfly/wildfly", "path": "batch-jberet/src/main/java/org/wildfly/extension/batch/jberet/BatchServiceNames.java", "func_name": "BatchServiceNames.jobOperatorServiceName", "original_string": "public static ServiceName jobOperatorServiceName(final String deploymentRuntimeName, final String subdeploymentName) {\n        return Services.deploymentUnitName(deploymentRuntimeName, subdeploymentName).append(\"batch\").append(\"job-operator\");\n    }", "language": "java", "code": "public static ServiceName jobOperatorServiceName(final String deploymentRuntimeName, final String subdeploymentName) {\n        return Services.deploymentUnitName(deploymentRuntimeName, subdeploymentName).append(\"batch\").append(\"job-operator\");\n    }", "code_tokens": ["public", "static", "ServiceName", "jobOperatorServiceName", "(", "final", "String", "deploymentRuntimeName", ",", "final", "String", "subdeploymentName", ")", "{", "return", "Services", ".", "deploymentUnitName", "(", "deploymentRuntimeName", ",", "subdeploymentName", ")", ".", "append", "(", "\"batch\"", ")", ".", "append", "(", "\"job-operator\"", ")", ";", "}"], "docstring": "Creates the service name used for the job operator registered for the deployment.\n\n@param deploymentRuntimeName the runtime name for the deployment\n@param subdeploymentName     the name of the subdeployment\n\n@return the service name", "docstring_tokens": ["Creates", "the", "service", "name", "used", "for", "the", "job", "operator", "registered", "for", "the", "deployment", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/batch-jberet/src/main/java/org/wildfly/extension/batch/jberet/BatchServiceNames.java#L83-L85", "partition": "test", "index": 2832, "time": "2015-07-18 13:03:17"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/HibernateSearchProcessor.java", "func_name": "HibernateSearchProcessor.deploy", "original_string": "public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n\n        if (JPADeploymentMarker.isJPADeployment(deploymentUnit)) {\n            addSearchDependency(moduleSpecification, moduleLoader, deploymentUnit);\n        }\n    }", "language": "java", "code": "public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n\n        if (JPADeploymentMarker.isJPADeployment(deploymentUnit)) {\n            addSearchDependency(moduleSpecification, moduleLoader, deploymentUnit);\n        }\n    }", "code_tokens": ["public", "void", "deploy", "(", "DeploymentPhaseContext", "phaseContext", ")", "throws", "DeploymentUnitProcessingException", "{", "final", "DeploymentUnit", "deploymentUnit", "=", "phaseContext", ".", "getDeploymentUnit", "(", ")", ";", "final", "ModuleSpecification", "moduleSpecification", "=", "deploymentUnit", ".", "getAttachment", "(", "Attachments", ".", "MODULE_SPECIFICATION", ")", ";", "final", "ModuleLoader", "moduleLoader", "=", "Module", ".", "getBootModuleLoader", "(", ")", ";", "if", "(", "JPADeploymentMarker", ".", "isJPADeployment", "(", "deploymentUnit", ")", ")", "{", "addSearchDependency", "(", "moduleSpecification", ",", "moduleLoader", ",", "deploymentUnit", ")", ";", "}", "}"], "docstring": "if set to `auto`, will behave like not having set the property", "docstring_tokens": ["if", "set", "to", "auto", "will", "behave", "like", "not", "having", "set", "the", "property"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/processor/HibernateSearchProcessor.java#L66-L74", "partition": "test", "index": 2476, "time": "2015-07-22 10:53:49"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.createAddOperation", "original_string": "public static ModelNode createAddOperation(PathAddress address, int index) {\n        return createAddOperation(address, index, Collections.emptyMap());\n    }", "language": "java", "code": "public static ModelNode createAddOperation(PathAddress address, int index) {\n        return createAddOperation(address, index, Collections.emptyMap());\n    }", "code_tokens": ["public", "static", "ModelNode", "createAddOperation", "(", "PathAddress", "address", ",", "int", "index", ")", "{", "return", "createAddOperation", "(", "address", ",", "index", ",", "Collections", ".", "emptyMap", "(", ")", ")", ";", "}"], "docstring": "Creates an indexed add operation using the specified address and index\n@param address a path address\n@param index\n@return an add operation", "docstring_tokens": ["Creates", "an", "indexed", "add", "operation", "using", "the", "specified", "address", "and", "index"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L145-L147", "partition": "test", "index": 2493, "time": "2015-07-28 15:44:38"}
{"repo": "wildfly/wildfly", "path": "batch-jberet/src/main/java/org/wildfly/extension/batch/jberet/deployment/WildFlyJobXmlResolver.java", "func_name": "WildFlyJobXmlResolver.init", "original_string": "private void init(final ClassLoader classLoader) {\n        // Load the user defined resolvers\n        for (JobXmlResolver resolver : ServiceLoader.load(JobXmlResolver.class, classLoader)) {\n            jobXmlResolvers.add(resolver);\n            for (String jobXml : resolver.getJobXmlNames(classLoader)) {\n                addJob(jobXml, resolver.resolveJobName(jobXml, classLoader));\n            }\n        }\n\n        // Load the default names\n        for (Map.Entry<String, VirtualFile> entry : jobXmlFiles.entrySet()) {\n            try {\n                // Parsing the entire job XML seems excessive to just get the job name. There are two reasons for this:\n                //  1) If an error occurs during parsing there's no real need to consider this a valid job\n                //  2) Using the implementation parser seems less error prone for future-proofing\n                final Job job = JobParser.parseJob(entry.getValue().openStream(), classLoader, new XMLResolver() {\n                    // this is essentially what JBeret does, but it's ugly. JBeret might need an API to handle this\n                    @Override\n                    public Object resolveEntity(final String publicID, final String systemID, final String baseURI, final String namespace) throws XMLStreamException {\n                        try {\n                            return (jobXmlFiles.containsKey(systemID) ? jobXmlFiles.get(systemID).openStream() : null);\n                        } catch (IOException e) {\n                            throw new XMLStreamException(e);\n                        }\n                    }\n                });\n                addJob(entry.getKey(), job.getId());\n            } catch (XMLStreamException | IOException e) {\n                // Report the possible error as we don't want to fail the deployment. The job may never be run.\n                BatchLogger.LOGGER.invalidJobXmlFile(entry.getKey());\n            }\n        }\n    }", "language": "java", "code": "private void init(final ClassLoader classLoader) {\n        // Load the user defined resolvers\n        for (JobXmlResolver resolver : ServiceLoader.load(JobXmlResolver.class, classLoader)) {\n            jobXmlResolvers.add(resolver);\n            for (String jobXml : resolver.getJobXmlNames(classLoader)) {\n                addJob(jobXml, resolver.resolveJobName(jobXml, classLoader));\n            }\n        }\n\n        // Load the default names\n        for (Map.Entry<String, VirtualFile> entry : jobXmlFiles.entrySet()) {\n            try {\n                // Parsing the entire job XML seems excessive to just get the job name. There are two reasons for this:\n                //  1) If an error occurs during parsing there's no real need to consider this a valid job\n                //  2) Using the implementation parser seems less error prone for future-proofing\n                final Job job = JobParser.parseJob(entry.getValue().openStream(), classLoader, new XMLResolver() {\n                    // this is essentially what JBeret does, but it's ugly. JBeret might need an API to handle this\n                    @Override\n                    public Object resolveEntity(final String publicID, final String systemID, final String baseURI, final String namespace) throws XMLStreamException {\n                        try {\n                            return (jobXmlFiles.containsKey(systemID) ? jobXmlFiles.get(systemID).openStream() : null);\n                        } catch (IOException e) {\n                            throw new XMLStreamException(e);\n                        }\n                    }\n                });\n                addJob(entry.getKey(), job.getId());\n            } catch (XMLStreamException | IOException e) {\n                // Report the possible error as we don't want to fail the deployment. The job may never be run.\n                BatchLogger.LOGGER.invalidJobXmlFile(entry.getKey());\n            }\n        }\n    }", "code_tokens": ["private", "void", "init", "(", "final", "ClassLoader", "classLoader", ")", "{", "// Load the user defined resolvers", "for", "(", "JobXmlResolver", "resolver", ":", "ServiceLoader", ".", "load", "(", "JobXmlResolver", ".", "class", ",", "classLoader", ")", ")", "{", "jobXmlResolvers", ".", "add", "(", "resolver", ")", ";", "for", "(", "String", "jobXml", ":", "resolver", ".", "getJobXmlNames", "(", "classLoader", ")", ")", "{", "addJob", "(", "jobXml", ",", "resolver", ".", "resolveJobName", "(", "jobXml", ",", "classLoader", ")", ")", ";", "}", "}", "// Load the default names", "for", "(", "Map", ".", "Entry", "<", "String", ",", "VirtualFile", ">", "entry", ":", "jobXmlFiles", ".", "entrySet", "(", ")", ")", "{", "try", "{", "// Parsing the entire job XML seems excessive to just get the job name. There are two reasons for this:", "//  1) If an error occurs during parsing there's no real need to consider this a valid job", "//  2) Using the implementation parser seems less error prone for future-proofing", "final", "Job", "job", "=", "JobParser", ".", "parseJob", "(", "entry", ".", "getValue", "(", ")", ".", "openStream", "(", ")", ",", "classLoader", ",", "new", "XMLResolver", "(", ")", "{", "// this is essentially what JBeret does, but it's ugly. JBeret might need an API to handle this", "@", "Override", "public", "Object", "resolveEntity", "(", "final", "String", "publicID", ",", "final", "String", "systemID", ",", "final", "String", "baseURI", ",", "final", "String", "namespace", ")", "throws", "XMLStreamException", "{", "try", "{", "return", "(", "jobXmlFiles", ".", "containsKey", "(", "systemID", ")", "?", "jobXmlFiles", ".", "get", "(", "systemID", ")", ".", "openStream", "(", ")", ":", "null", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "XMLStreamException", "(", "e", ")", ";", "}", "}", "}", ")", ";", "addJob", "(", "entry", ".", "getKey", "(", ")", ",", "job", ".", "getId", "(", ")", ")", ";", "}", "catch", "(", "XMLStreamException", "|", "IOException", "e", ")", "{", "// Report the possible error as we don't want to fail the deployment. The job may never be run.", "BatchLogger", ".", "LOGGER", ".", "invalidJobXmlFile", "(", "entry", ".", "getKey", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Initializes the state of an instance", "docstring_tokens": ["Initializes", "the", "state", "of", "an", "instance"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/batch-jberet/src/main/java/org/wildfly/extension/batch/jberet/deployment/WildFlyJobXmlResolver.java#L267-L299", "partition": "test", "index": 2768, "time": "2015-08-05 15:29:16"}
{"repo": "wildfly/wildfly", "path": "legacy/messaging/src/main/java/org/jboss/as/messaging/MigrateOperation.java", "func_name": "MigrateOperation.migrateGenericTransport", "original_string": "private void migrateGenericTransport(ModelNode addOperation) {\n        String factoryClass = addOperation.get(FACTORY_CLASS.getName()).asString();\n        final String newFactoryClass;\n        switch (factoryClass) {\n            case HORNETQ_NETTY_ACCEPTOR_FACTORY:\n                newFactoryClass = ARTEMIS_NETTY_ACCEPTOR_FACTORY;\n                break;\n            case HORNETQ_NETTY_CONNECTOR_FACTORY:\n                newFactoryClass = ARTEMIS_NETTY_CONNECTOR_FACTORY;\n                break;\n            default:\n                newFactoryClass = factoryClass;\n        }\n        addOperation.get(FACTORY_CLASS.getName()).set(newFactoryClass);\n    }", "language": "java", "code": "private void migrateGenericTransport(ModelNode addOperation) {\n        String factoryClass = addOperation.get(FACTORY_CLASS.getName()).asString();\n        final String newFactoryClass;\n        switch (factoryClass) {\n            case HORNETQ_NETTY_ACCEPTOR_FACTORY:\n                newFactoryClass = ARTEMIS_NETTY_ACCEPTOR_FACTORY;\n                break;\n            case HORNETQ_NETTY_CONNECTOR_FACTORY:\n                newFactoryClass = ARTEMIS_NETTY_CONNECTOR_FACTORY;\n                break;\n            default:\n                newFactoryClass = factoryClass;\n        }\n        addOperation.get(FACTORY_CLASS.getName()).set(newFactoryClass);\n    }", "code_tokens": ["private", "void", "migrateGenericTransport", "(", "ModelNode", "addOperation", ")", "{", "String", "factoryClass", "=", "addOperation", ".", "get", "(", "FACTORY_CLASS", ".", "getName", "(", ")", ")", ".", "asString", "(", ")", ";", "final", "String", "newFactoryClass", ";", "switch", "(", "factoryClass", ")", "{", "case", "HORNETQ_NETTY_ACCEPTOR_FACTORY", ":", "newFactoryClass", "=", "ARTEMIS_NETTY_ACCEPTOR_FACTORY", ";", "break", ";", "case", "HORNETQ_NETTY_CONNECTOR_FACTORY", ":", "newFactoryClass", "=", "ARTEMIS_NETTY_CONNECTOR_FACTORY", ";", "break", ";", "default", ":", "newFactoryClass", "=", "factoryClass", ";", "}", "addOperation", ".", "get", "(", "FACTORY_CLASS", ".", "getName", "(", ")", ")", ".", "set", "(", "newFactoryClass", ")", ";", "}"], "docstring": "For generic acceptor and connectors, migrate their factory-class attribute\nif they are using the default Netty ones.", "docstring_tokens": ["For", "generic", "acceptor", "and", "connectors", "migrate", "their", "factory", "-", "class", "attribute", "if", "they", "are", "using", "the", "default", "Netty", "ones", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/messaging/src/main/java/org/jboss/as/messaging/MigrateOperation.java#L613-L627", "partition": "test", "index": 2906, "time": "2015-08-18 16:33:46"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/subsystems/resourceadapters/CommonIronJacamarParser.java", "func_name": "CommonIronJacamarParser.parseConnectionAttributes_5_0", "original_string": "private String parseConnectionAttributes_5_0(final XMLExtendedStreamReader reader,  final ModelNode connectionDefinitionNode)\n            throws XMLStreamException {\n        String poolName = null;\n        String jndiName = null;\n        int attributeSize = reader.getAttributeCount();\n\n        for (int i = 0; i < attributeSize; i++) {\n            ConnectionDefinition.Attribute attribute = ConnectionDefinition.Attribute.forName(reader.getAttributeLocalName(i));\n            String value = reader.getAttributeValue(i);\n            switch (attribute) {\n                case ENABLED: {\n                    ENABLED.parseAndSetParameter(value, connectionDefinitionNode, reader);\n\n                    break;\n                }\n                case CONNECTABLE: {\n                    CONNECTABLE.parseAndSetParameter(value, connectionDefinitionNode, reader);\n\n                    break;\n                }\n                case TRACKING: {\n                    TRACKING.parseAndSetParameter(value, connectionDefinitionNode, reader);\n\n                    break;\n                }\n                case JNDI_NAME: {\n                    jndiName = value;\n                    JNDINAME.parseAndSetParameter(jndiName, connectionDefinitionNode, reader);\n                    break;\n                }\n                case POOL_NAME: {\n                    poolName = value;\n                    break;\n                }\n                case USE_JAVA_CONTEXT: {\n                    USE_JAVA_CONTEXT.parseAndSetParameter(value, connectionDefinitionNode, reader);\n\n                    break;\n                }\n\n                case USE_CCM: {\n                    USE_CCM.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n\n                case SHARABLE: {\n                    SHARABLE.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n\n                case ENLISTMENT: {\n                    ENLISTMENT.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n\n                case CLASS_NAME: {\n                    CLASS_NAME.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n                case MCP: {\n                    MCP.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n                case ENLISTMENT_TRACE:\n                    ENLISTMENT_TRACE.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, i);\n            }\n        }\n        if (poolName == null || poolName.trim().equals(\"\")) {\n            if (jndiName != null && jndiName.trim().length() != 0) {\n                if (jndiName.contains(\"/\")) {\n                    poolName = jndiName.substring(jndiName.lastIndexOf(\"/\") + 1);\n                } else {\n                    poolName = jndiName.substring(jndiName.lastIndexOf(\":\") + 1);\n                }\n            } else {\n                throw ParseUtils.missingRequired(reader, EnumSet.of(ConnectionDefinition.Attribute.JNDI_NAME));\n            }\n        }\n        return poolName;\n    }", "language": "java", "code": "private String parseConnectionAttributes_5_0(final XMLExtendedStreamReader reader,  final ModelNode connectionDefinitionNode)\n            throws XMLStreamException {\n        String poolName = null;\n        String jndiName = null;\n        int attributeSize = reader.getAttributeCount();\n\n        for (int i = 0; i < attributeSize; i++) {\n            ConnectionDefinition.Attribute attribute = ConnectionDefinition.Attribute.forName(reader.getAttributeLocalName(i));\n            String value = reader.getAttributeValue(i);\n            switch (attribute) {\n                case ENABLED: {\n                    ENABLED.parseAndSetParameter(value, connectionDefinitionNode, reader);\n\n                    break;\n                }\n                case CONNECTABLE: {\n                    CONNECTABLE.parseAndSetParameter(value, connectionDefinitionNode, reader);\n\n                    break;\n                }\n                case TRACKING: {\n                    TRACKING.parseAndSetParameter(value, connectionDefinitionNode, reader);\n\n                    break;\n                }\n                case JNDI_NAME: {\n                    jndiName = value;\n                    JNDINAME.parseAndSetParameter(jndiName, connectionDefinitionNode, reader);\n                    break;\n                }\n                case POOL_NAME: {\n                    poolName = value;\n                    break;\n                }\n                case USE_JAVA_CONTEXT: {\n                    USE_JAVA_CONTEXT.parseAndSetParameter(value, connectionDefinitionNode, reader);\n\n                    break;\n                }\n\n                case USE_CCM: {\n                    USE_CCM.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n\n                case SHARABLE: {\n                    SHARABLE.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n\n                case ENLISTMENT: {\n                    ENLISTMENT.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n\n                case CLASS_NAME: {\n                    CLASS_NAME.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n                case MCP: {\n                    MCP.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                }\n                case ENLISTMENT_TRACE:\n                    ENLISTMENT_TRACE.parseAndSetParameter(value, connectionDefinitionNode, reader);\n                    break;\n                default:\n                    throw ParseUtils.unexpectedAttribute(reader, i);\n            }\n        }\n        if (poolName == null || poolName.trim().equals(\"\")) {\n            if (jndiName != null && jndiName.trim().length() != 0) {\n                if (jndiName.contains(\"/\")) {\n                    poolName = jndiName.substring(jndiName.lastIndexOf(\"/\") + 1);\n                } else {\n                    poolName = jndiName.substring(jndiName.lastIndexOf(\":\") + 1);\n                }\n            } else {\n                throw ParseUtils.missingRequired(reader, EnumSet.of(ConnectionDefinition.Attribute.JNDI_NAME));\n            }\n        }\n        return poolName;\n    }", "code_tokens": ["private", "String", "parseConnectionAttributes_5_0", "(", "final", "XMLExtendedStreamReader", "reader", ",", "final", "ModelNode", "connectionDefinitionNode", ")", "throws", "XMLStreamException", "{", "String", "poolName", "=", "null", ";", "String", "jndiName", "=", "null", ";", "int", "attributeSize", "=", "reader", ".", "getAttributeCount", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "attributeSize", ";", "i", "++", ")", "{", "ConnectionDefinition", ".", "Attribute", "attribute", "=", "ConnectionDefinition", ".", "Attribute", ".", "forName", "(", "reader", ".", "getAttributeLocalName", "(", "i", ")", ")", ";", "String", "value", "=", "reader", ".", "getAttributeValue", "(", "i", ")", ";", "switch", "(", "attribute", ")", "{", "case", "ENABLED", ":", "{", "ENABLED", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "CONNECTABLE", ":", "{", "CONNECTABLE", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "TRACKING", ":", "{", "TRACKING", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "JNDI_NAME", ":", "{", "jndiName", "=", "value", ";", "JNDINAME", ".", "parseAndSetParameter", "(", "jndiName", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "POOL_NAME", ":", "{", "poolName", "=", "value", ";", "break", ";", "}", "case", "USE_JAVA_CONTEXT", ":", "{", "USE_JAVA_CONTEXT", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "USE_CCM", ":", "{", "USE_CCM", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "SHARABLE", ":", "{", "SHARABLE", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "ENLISTMENT", ":", "{", "ENLISTMENT", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "CLASS_NAME", ":", "{", "CLASS_NAME", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "MCP", ":", "{", "MCP", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "}", "case", "ENLISTMENT_TRACE", ":", "ENLISTMENT_TRACE", ".", "parseAndSetParameter", "(", "value", ",", "connectionDefinitionNode", ",", "reader", ")", ";", "break", ";", "default", ":", "throw", "ParseUtils", ".", "unexpectedAttribute", "(", "reader", ",", "i", ")", ";", "}", "}", "if", "(", "poolName", "==", "null", "||", "poolName", ".", "trim", "(", ")", ".", "equals", "(", "\"\"", ")", ")", "{", "if", "(", "jndiName", "!=", "null", "&&", "jndiName", ".", "trim", "(", ")", ".", "length", "(", ")", "!=", "0", ")", "{", "if", "(", "jndiName", ".", "contains", "(", "\"/\"", ")", ")", "{", "poolName", "=", "jndiName", ".", "substring", "(", "jndiName", ".", "lastIndexOf", "(", "\"/\"", ")", "+", "1", ")", ";", "}", "else", "{", "poolName", "=", "jndiName", ".", "substring", "(", "jndiName", ".", "lastIndexOf", "(", "\":\"", ")", "+", "1", ")", ";", "}", "}", "else", "{", "throw", "ParseUtils", ".", "missingRequired", "(", "reader", ",", "EnumSet", ".", "of", "(", "ConnectionDefinition", ".", "Attribute", ".", "JNDI_NAME", ")", ")", ";", "}", "}", "return", "poolName", ";", "}"], "docstring": "Parses connection attributes for version 5.0\n@param reader the xml reader\n@param connectionDefinitionNode the connection definition add node\n@return the pool name\n@throws XMLStreamException", "docstring_tokens": ["Parses", "connection", "attributes", "for", "version", "5", ".", "0"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/subsystems/resourceadapters/CommonIronJacamarParser.java#L480-L562", "partition": "test", "index": 2550, "time": "2015-10-13 17:47:40"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/subsystems/datasources/GetDataSourceClassInfoOperationHandler.java", "func_name": "GetDataSourceClassInfoOperationHandler.isTypeMatched", "original_string": "private static boolean isTypeMatched(Class<?> clz) {\n        if (clz.equals(String.class)) {\n            return true;\n        } else if (clz.equals(byte.class) || clz.equals(Byte.class)) {\n            return true;\n        } else if (clz.equals(short.class) || clz.equals(Short.class)) {\n            return true;\n        } else if (clz.equals(int.class) || clz.equals(Integer.class)) {\n            return true;\n        } else if (clz.equals(long.class) || clz.equals(Long.class)) {\n            return true;\n        } else if (clz.equals(float.class) || clz.equals(Float.class)) {\n            return true;\n        } else if (clz.equals(double.class) || clz.equals(Double.class)) {\n            return true;\n        } else if (clz.equals(boolean.class) || clz.equals(Boolean.class)) {\n            return true;\n        } else if (clz.equals(char.class) || clz.equals(Character.class)) {\n            return true;\n        } else if (clz.equals(InetAddress.class)) {\n            return true;\n        } else if (clz.equals(Class.class)) {\n            return true;\n        } else if (clz.equals(Properties.class)) {\n            return true;\n        }\n        return false;\n    }", "language": "java", "code": "private static boolean isTypeMatched(Class<?> clz) {\n        if (clz.equals(String.class)) {\n            return true;\n        } else if (clz.equals(byte.class) || clz.equals(Byte.class)) {\n            return true;\n        } else if (clz.equals(short.class) || clz.equals(Short.class)) {\n            return true;\n        } else if (clz.equals(int.class) || clz.equals(Integer.class)) {\n            return true;\n        } else if (clz.equals(long.class) || clz.equals(Long.class)) {\n            return true;\n        } else if (clz.equals(float.class) || clz.equals(Float.class)) {\n            return true;\n        } else if (clz.equals(double.class) || clz.equals(Double.class)) {\n            return true;\n        } else if (clz.equals(boolean.class) || clz.equals(Boolean.class)) {\n            return true;\n        } else if (clz.equals(char.class) || clz.equals(Character.class)) {\n            return true;\n        } else if (clz.equals(InetAddress.class)) {\n            return true;\n        } else if (clz.equals(Class.class)) {\n            return true;\n        } else if (clz.equals(Properties.class)) {\n            return true;\n        }\n        return false;\n    }", "code_tokens": ["private", "static", "boolean", "isTypeMatched", "(", "Class", "<", "?", ">", "clz", ")", "{", "if", "(", "clz", ".", "equals", "(", "String", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "byte", ".", "class", ")", "||", "clz", ".", "equals", "(", "Byte", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "short", ".", "class", ")", "||", "clz", ".", "equals", "(", "Short", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "int", ".", "class", ")", "||", "clz", ".", "equals", "(", "Integer", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "long", ".", "class", ")", "||", "clz", ".", "equals", "(", "Long", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "float", ".", "class", ")", "||", "clz", ".", "equals", "(", "Float", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "double", ".", "class", ")", "||", "clz", ".", "equals", "(", "Double", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "boolean", ".", "class", ")", "||", "clz", ".", "equals", "(", "Boolean", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "char", ".", "class", ")", "||", "clz", ".", "equals", "(", "Character", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "InetAddress", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "Class", ".", "class", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "clz", ".", "equals", "(", "Properties", ".", "class", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Check whether the types that JCA Injection knows.\n\n@see Injection.findMethod()\n@param clz the class\n@return whether it is understandable", "docstring_tokens": ["Check", "whether", "the", "types", "that", "JCA", "Injection", "knows", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/subsystems/datasources/GetDataSourceClassInfoOperationHandler.java#L141-L168", "partition": "test", "index": 2708, "time": "2015-11-04 21:25:45"}
{"repo": "wildfly/wildfly", "path": "legacy/messaging/src/main/java/org/jboss/as/messaging/MigrateOperation.java", "func_name": "MigrateOperation.parameterIsAllowed", "original_string": "private boolean parameterIsAllowed(String name, String resourceType) {\n        switch (resourceType) {\n            case REMOTE_ACCEPTOR:\n            case HTTP_ACCEPTOR:\n            case REMOTE_CONNECTOR:\n            case HTTP_CONNECTOR:\n                // WFLY-5667 - for now remove only use-nio. Revisit this code when Artemis offers an API\n                // to know which parameters are ignored.\n                if (\"use-nio\".equals(name)) {\n                    return false;\n                } else {\n                    return true;\n                }\n            default:\n                // accept any parameter for other resources.\n                return true;\n        }\n    }", "language": "java", "code": "private boolean parameterIsAllowed(String name, String resourceType) {\n        switch (resourceType) {\n            case REMOTE_ACCEPTOR:\n            case HTTP_ACCEPTOR:\n            case REMOTE_CONNECTOR:\n            case HTTP_CONNECTOR:\n                // WFLY-5667 - for now remove only use-nio. Revisit this code when Artemis offers an API\n                // to know which parameters are ignored.\n                if (\"use-nio\".equals(name)) {\n                    return false;\n                } else {\n                    return true;\n                }\n            default:\n                // accept any parameter for other resources.\n                return true;\n        }\n    }", "code_tokens": ["private", "boolean", "parameterIsAllowed", "(", "String", "name", ",", "String", "resourceType", ")", "{", "switch", "(", "resourceType", ")", "{", "case", "REMOTE_ACCEPTOR", ":", "case", "HTTP_ACCEPTOR", ":", "case", "REMOTE_CONNECTOR", ":", "case", "HTTP_CONNECTOR", ":", "// WFLY-5667 - for now remove only use-nio. Revisit this code when Artemis offers an API", "// to know which parameters are ignored.", "if", "(", "\"use-nio\"", ".", "equals", "(", "name", ")", ")", "{", "return", "false", ";", "}", "else", "{", "return", "true", ";", "}", "default", ":", "// accept any parameter for other resources.", "return", "true", ";", "}", "}"], "docstring": "Check if the name of the parameter is allowed for the given resourceType.", "docstring_tokens": ["Check", "if", "the", "name", "of", "the", "parameter", "is", "allowed", "for", "the", "given", "resourceType", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/legacy/messaging/src/main/java/org/jboss/as/messaging/MigrateOperation.java#L452-L469", "partition": "test", "index": 2905, "time": "2015-11-17 14:26:13"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/JMSConnectionFactoryDefinitionInjectionSource.java", "func_name": "JMSConnectionFactoryDefinitionInjectionSource.targetsPooledConnectionFactory", "original_string": "static boolean targetsPooledConnectionFactory(String server, String resourceAdapter, ServiceRegistry serviceRegistry) {\n        // if the resourceAdapter is not defined, the default behaviour is to create a pooled-connection-factory.\n        if (resourceAdapter == null || resourceAdapter.isEmpty()) {\n            return true;\n        }\n        ServiceName activeMQServiceName = MessagingServices.getActiveMQServiceName(server);\n        ServiceName pcfName = JMSServices.getPooledConnectionFactoryBaseServiceName(activeMQServiceName).append(resourceAdapter);\n        return serviceRegistry.getServiceNames().contains(pcfName);\n    }", "language": "java", "code": "static boolean targetsPooledConnectionFactory(String server, String resourceAdapter, ServiceRegistry serviceRegistry) {\n        // if the resourceAdapter is not defined, the default behaviour is to create a pooled-connection-factory.\n        if (resourceAdapter == null || resourceAdapter.isEmpty()) {\n            return true;\n        }\n        ServiceName activeMQServiceName = MessagingServices.getActiveMQServiceName(server);\n        ServiceName pcfName = JMSServices.getPooledConnectionFactoryBaseServiceName(activeMQServiceName).append(resourceAdapter);\n        return serviceRegistry.getServiceNames().contains(pcfName);\n    }", "code_tokens": ["static", "boolean", "targetsPooledConnectionFactory", "(", "String", "server", ",", "String", "resourceAdapter", ",", "ServiceRegistry", "serviceRegistry", ")", "{", "// if the resourceAdapter is not defined, the default behaviour is to create a pooled-connection-factory.", "if", "(", "resourceAdapter", "==", "null", "||", "resourceAdapter", ".", "isEmpty", "(", ")", ")", "{", "return", "true", ";", "}", "ServiceName", "activeMQServiceName", "=", "MessagingServices", ".", "getActiveMQServiceName", "(", "server", ")", ";", "ServiceName", "pcfName", "=", "JMSServices", ".", "getPooledConnectionFactoryBaseServiceName", "(", "activeMQServiceName", ")", ".", "append", "(", "resourceAdapter", ")", ";", "return", "serviceRegistry", ".", "getServiceNames", "(", ")", ".", "contains", "(", "pcfName", ")", ";", "}"], "docstring": "Return whether the definition targets an existing pooled connection factory or use a JCA-based ConnectionFactory.\n\nChecks the service registry for a PooledConnectionFactoryService with the ServiceName\ncreated by the {@code server} property (or {@code \"default\") and the {@code resourceAdapter} property.", "docstring_tokens": ["Return", "whether", "the", "definition", "targets", "an", "existing", "pooled", "connection", "factory", "or", "use", "a", "JCA", "-", "based", "ConnectionFactory", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/JMSConnectionFactoryDefinitionInjectionSource.java#L380-L388", "partition": "test", "index": 2579, "time": "2016-02-05 15:29:45"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/wildfly/naming/java/permission/JndiPermission.java", "func_name": "JndiPermission.getActions", "original_string": "public String getActions() {\n        final String actionString = this.actionString;\n        if (actionString != null) {\n            return actionString;\n        }\n        int actionBits = this.actionBits;\n        if (actionBits == ACTION_ALL) {\n            return this.actionString = \"*\";\n        }\n        int m = Integer.lowestOneBit(actionBits);\n        if (m != 0) {\n            StringBuilder b = new StringBuilder();\n            b.append(getAction(m));\n            actionBits &= ~m;\n            while (actionBits != 0) {\n                m = Integer.lowestOneBit(actionBits);\n                b.append(',').append(getAction(m));\n                actionBits &= ~m;\n            }\n            return this.actionString = b.toString();\n        } else {\n            return this.actionString = \"\";\n        }\n    }", "language": "java", "code": "public String getActions() {\n        final String actionString = this.actionString;\n        if (actionString != null) {\n            return actionString;\n        }\n        int actionBits = this.actionBits;\n        if (actionBits == ACTION_ALL) {\n            return this.actionString = \"*\";\n        }\n        int m = Integer.lowestOneBit(actionBits);\n        if (m != 0) {\n            StringBuilder b = new StringBuilder();\n            b.append(getAction(m));\n            actionBits &= ~m;\n            while (actionBits != 0) {\n                m = Integer.lowestOneBit(actionBits);\n                b.append(',').append(getAction(m));\n                actionBits &= ~m;\n            }\n            return this.actionString = b.toString();\n        } else {\n            return this.actionString = \"\";\n        }\n    }", "code_tokens": ["public", "String", "getActions", "(", ")", "{", "final", "String", "actionString", "=", "this", ".", "actionString", ";", "if", "(", "actionString", "!=", "null", ")", "{", "return", "actionString", ";", "}", "int", "actionBits", "=", "this", ".", "actionBits", ";", "if", "(", "actionBits", "==", "ACTION_ALL", ")", "{", "return", "this", ".", "actionString", "=", "\"*\"", ";", "}", "int", "m", "=", "Integer", ".", "lowestOneBit", "(", "actionBits", ")", ";", "if", "(", "m", "!=", "0", ")", "{", "StringBuilder", "b", "=", "new", "StringBuilder", "(", ")", ";", "b", ".", "append", "(", "getAction", "(", "m", ")", ")", ";", "actionBits", "&=", "~", "m", ";", "while", "(", "actionBits", "!=", "0", ")", "{", "m", "=", "Integer", ".", "lowestOneBit", "(", "actionBits", ")", ";", "b", ".", "append", "(", "'", "'", ")", ".", "append", "(", "getAction", "(", "m", ")", ")", ";", "actionBits", "&=", "~", "m", ";", "}", "return", "this", ".", "actionString", "=", "b", ".", "toString", "(", ")", ";", "}", "else", "{", "return", "this", ".", "actionString", "=", "\"\"", ";", "}", "}"], "docstring": "Get the actions string.  The actions string will be a canonical version of the one passed in at construction.\n\n@return the actions string (not {@code null})", "docstring_tokens": ["Get", "the", "actions", "string", ".", "The", "actions", "string", "will", "be", "a", "canonical", "version", "of", "the", "one", "passed", "in", "at", "construction", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/wildfly/naming/java/permission/JndiPermission.java#L188-L211", "partition": "test", "index": 2801, "time": "2016-03-07 09:27:12"}
{"repo": "wildfly/wildfly", "path": "naming/src/main/java/org/wildfly/naming/java/permission/JndiPermission.java", "func_name": "JndiPermission.implies", "original_string": "public boolean implies(final JndiPermission permission) {\n        return permission != null && ((actionBits & permission.actionBits) == permission.actionBits) && impliesPath(permission.getName());\n    }", "language": "java", "code": "public boolean implies(final JndiPermission permission) {\n        return permission != null && ((actionBits & permission.actionBits) == permission.actionBits) && impliesPath(permission.getName());\n    }", "code_tokens": ["public", "boolean", "implies", "(", "final", "JndiPermission", "permission", ")", "{", "return", "permission", "!=", "null", "&&", "(", "(", "actionBits", "&", "permission", ".", "actionBits", ")", "==", "permission", ".", "actionBits", ")", "&&", "impliesPath", "(", "permission", ".", "getName", "(", ")", ")", ";", "}"], "docstring": "Determine if this permission implies the other permission.\n\n@param permission the other permission\n@return {@code true} if this permission implies the other, {@code false} if it does not or {@code permission} is {@code null}", "docstring_tokens": ["Determine", "if", "this", "permission", "implies", "the", "other", "permission", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/naming/src/main/java/org/wildfly/naming/java/permission/JndiPermission.java#L126-L128", "partition": "test", "index": 2800, "time": "2016-03-07 09:27:12"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/injection/InjectedJMSContext.java", "func_name": "InjectedJMSContext.getConnectionFactory", "original_string": "private ConnectionFactory getConnectionFactory() {\n        ConnectionFactory cachedCF = connectionFactory;\n\n        if (cachedCF == null) {\n            cachedCF = (ConnectionFactory)lookup(info.getConnectionFactoryLookup());\n            connectionFactory = cachedCF;\n        }\n        return cachedCF;\n    }", "language": "java", "code": "private ConnectionFactory getConnectionFactory() {\n        ConnectionFactory cachedCF = connectionFactory;\n\n        if (cachedCF == null) {\n            cachedCF = (ConnectionFactory)lookup(info.getConnectionFactoryLookup());\n            connectionFactory = cachedCF;\n        }\n        return cachedCF;\n    }", "code_tokens": ["private", "ConnectionFactory", "getConnectionFactory", "(", ")", "{", "ConnectionFactory", "cachedCF", "=", "connectionFactory", ";", "if", "(", "cachedCF", "==", "null", ")", "{", "cachedCF", "=", "(", "ConnectionFactory", ")", "lookup", "(", "info", ".", "getConnectionFactoryLookup", "(", ")", ")", ";", "connectionFactory", "=", "cachedCF", ";", "}", "return", "cachedCF", ";", "}"], "docstring": "lookup the connectionFactory and cache it.", "docstring_tokens": ["lookup", "the", "connectionFactory", "and", "cache", "it", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/injection/InjectedJMSContext.java#L129-L137", "partition": "test", "index": 2540, "time": "2016-05-11 10:50:04"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/injection/InjectedJMSContext.java", "func_name": "InjectedJMSContext.isInTransaction", "original_string": "private boolean isInTransaction() {\n        TransactionSynchronizationRegistry tsr = getTransactionSynchronizationRegistry();\n        boolean inTx = tsr.getTransactionStatus() == Status.STATUS_ACTIVE;\n        return inTx;\n    }", "language": "java", "code": "private boolean isInTransaction() {\n        TransactionSynchronizationRegistry tsr = getTransactionSynchronizationRegistry();\n        boolean inTx = tsr.getTransactionStatus() == Status.STATUS_ACTIVE;\n        return inTx;\n    }", "code_tokens": ["private", "boolean", "isInTransaction", "(", ")", "{", "TransactionSynchronizationRegistry", "tsr", "=", "getTransactionSynchronizationRegistry", "(", ")", ";", "boolean", "inTx", "=", "tsr", ".", "getTransactionStatus", "(", ")", "==", "Status", ".", "STATUS_ACTIVE", ";", "return", "inTx", ";", "}"], "docstring": "check whether there is an active transaction.", "docstring_tokens": ["check", "whether", "there", "is", "an", "active", "transaction", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/injection/InjectedJMSContext.java#L108-L112", "partition": "test", "index": 2538, "time": "2016-05-11 10:50:04"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/injection/InjectedJMSContext.java", "func_name": "InjectedJMSContext.getTransactionSynchronizationRegistry", "original_string": "private TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {\n        TransactionSynchronizationRegistry cachedTSR = transactionSynchronizationRegistry;\n        if (cachedTSR == null) {\n            cachedTSR = (TransactionSynchronizationRegistry) lookup(TRANSACTION_SYNCHRONIZATION_REGISTRY_LOOKUP);\n            transactionSynchronizationRegistry = cachedTSR;\n        }\n        return cachedTSR;\n    }", "language": "java", "code": "private TransactionSynchronizationRegistry getTransactionSynchronizationRegistry() {\n        TransactionSynchronizationRegistry cachedTSR = transactionSynchronizationRegistry;\n        if (cachedTSR == null) {\n            cachedTSR = (TransactionSynchronizationRegistry) lookup(TRANSACTION_SYNCHRONIZATION_REGISTRY_LOOKUP);\n            transactionSynchronizationRegistry = cachedTSR;\n        }\n        return cachedTSR;\n    }", "code_tokens": ["private", "TransactionSynchronizationRegistry", "getTransactionSynchronizationRegistry", "(", ")", "{", "TransactionSynchronizationRegistry", "cachedTSR", "=", "transactionSynchronizationRegistry", ";", "if", "(", "cachedTSR", "==", "null", ")", "{", "cachedTSR", "=", "(", "TransactionSynchronizationRegistry", ")", "lookup", "(", "TRANSACTION_SYNCHRONIZATION_REGISTRY_LOOKUP", ")", ";", "transactionSynchronizationRegistry", "=", "cachedTSR", ";", "}", "return", "cachedTSR", ";", "}"], "docstring": "lookup the transactionSynchronizationRegistry and cache it.", "docstring_tokens": ["lookup", "the", "transactionSynchronizationRegistry", "and", "cache", "it", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/injection/InjectedJMSContext.java#L117-L124", "partition": "test", "index": 2539, "time": "2016-05-11 10:50:04"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/function/Consumers.java", "func_name": "Consumers.close", "original_string": "public static <T extends AutoCloseable> Consumer<T> close() {\n        return value -> {\n            try {\n                value.close();\n            } catch (Throwable e) {\n                ClusteringLogger.ROOT_LOGGER.failedToClose(e, value);\n            }\n        };\n    }", "language": "java", "code": "public static <T extends AutoCloseable> Consumer<T> close() {\n        return value -> {\n            try {\n                value.close();\n            } catch (Throwable e) {\n                ClusteringLogger.ROOT_LOGGER.failedToClose(e, value);\n            }\n        };\n    }", "code_tokens": ["public", "static", "<", "T", "extends", "AutoCloseable", ">", "Consumer", "<", "T", ">", "close", "(", ")", "{", "return", "value", "->", "{", "try", "{", "value", ".", "close", "(", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "ClusteringLogger", ".", "ROOT_LOGGER", ".", "failedToClose", "(", "e", ",", "value", ")", ";", "}", "}", ";", "}"], "docstring": "Returns a consumer that closes its input.\n@return a consumer that closes its input.", "docstring_tokens": ["Returns", "a", "consumer", "that", "closes", "its", "input", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/function/Consumers.java#L39-L47", "partition": "test", "index": 2646, "time": "2016-06-15 16:03:07"}
{"repo": "wildfly/wildfly", "path": "clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java", "func_name": "Operations.isIncludeDefaults", "original_string": "public static boolean isIncludeDefaults(ModelNode operation) {\n        return operation.hasDefined(ModelDescriptionConstants.INCLUDE_DEFAULTS) ? operation.get(ModelDescriptionConstants.INCLUDE_DEFAULTS).asBoolean() : true;\n    }", "language": "java", "code": "public static boolean isIncludeDefaults(ModelNode operation) {\n        return operation.hasDefined(ModelDescriptionConstants.INCLUDE_DEFAULTS) ? operation.get(ModelDescriptionConstants.INCLUDE_DEFAULTS).asBoolean() : true;\n    }", "code_tokens": ["public", "static", "boolean", "isIncludeDefaults", "(", "ModelNode", "operation", ")", "{", "return", "operation", ".", "hasDefined", "(", "ModelDescriptionConstants", ".", "INCLUDE_DEFAULTS", ")", "?", "operation", ".", "get", "(", "ModelDescriptionConstants", ".", "INCLUDE_DEFAULTS", ")", ".", "asBoolean", "(", ")", ":", "true", ";", "}"], "docstring": "Indicates whether or not this operation expects to include default values.\n@param operation an operation\n@return true, if default values are expected, false otherwise.", "docstring_tokens": ["Indicates", "whether", "or", "not", "this", "operation", "expects", "to", "include", "default", "values", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/common/src/main/java/org/jboss/as/clustering/controller/Operations.java#L98-L100", "partition": "test", "index": 2490, "time": "2016-06-23 13:36:22"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/elytron/ElytronIntegrationResourceDefinitions.java", "func_name": "ElytronIntegrationResourceDefinitions.getElytronTrustManagersResourceDefinition", "original_string": "public static ResourceDefinition getElytronTrustManagersResourceDefinition() {\n        final AttributeDefinition[] attributes = new AttributeDefinition[] {LEGACY_JSSE_CONFIG};\n        final AbstractAddStepHandler addHandler = new BasicAddHandler<TrustManager>(attributes, TRUST_MANAGER_RUNTIME_CAPABILITY) {\n\n            @Override\n            protected BasicService.ValueSupplier<TrustManager> getValueSupplier(ServiceBuilder<TrustManager> serviceBuilder, OperationContext context, ModelNode model) throws OperationFailedException {\n                final String legacyJSSEConfig = asStringIfDefined(context, LEGACY_JSSE_CONFIG, model);\n                final InjectedValue<SecurityDomainContext> securityDomainContextInjector = new InjectedValue<>();\n                if (legacyJSSEConfig != null) {\n                    serviceBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(legacyJSSEConfig), SecurityDomainContext.class, securityDomainContextInjector);\n                }\n\n                return () -> {\n                    final SecurityDomainContext domainContext = securityDomainContextInjector.getValue();\n                    final JSSESecurityDomain jsseDomain = domainContext.getJSSE();\n                    if (jsseDomain == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateJSSEConfig(legacyJSSEConfig);\n                    }\n                    final TrustManager[] trustManagers = jsseDomain.getTrustManagers();\n                    if (trustManagers == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateComponentInJSSEDomain(\"TrustManager\", legacyJSSEConfig);\n                    }\n                    for (TrustManager trustManager : trustManagers) {\n                        if (trustManager instanceof X509ExtendedTrustManager)\n                            return trustManager;\n                    }\n                    throw SecurityLogger.ROOT_LOGGER.expectedManagerTypeNotFound(\"TrustManager\", X509ExtendedTrustManager.class.getSimpleName(), legacyJSSEConfig);\n                };\n            }\n        };\n\n        return new BasicResourceDefinition(Constants.ELYTRON_TRUST_MANAGER, addHandler, attributes, TRUST_MANAGER_RUNTIME_CAPABILITY);\n    }", "language": "java", "code": "public static ResourceDefinition getElytronTrustManagersResourceDefinition() {\n        final AttributeDefinition[] attributes = new AttributeDefinition[] {LEGACY_JSSE_CONFIG};\n        final AbstractAddStepHandler addHandler = new BasicAddHandler<TrustManager>(attributes, TRUST_MANAGER_RUNTIME_CAPABILITY) {\n\n            @Override\n            protected BasicService.ValueSupplier<TrustManager> getValueSupplier(ServiceBuilder<TrustManager> serviceBuilder, OperationContext context, ModelNode model) throws OperationFailedException {\n                final String legacyJSSEConfig = asStringIfDefined(context, LEGACY_JSSE_CONFIG, model);\n                final InjectedValue<SecurityDomainContext> securityDomainContextInjector = new InjectedValue<>();\n                if (legacyJSSEConfig != null) {\n                    serviceBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(legacyJSSEConfig), SecurityDomainContext.class, securityDomainContextInjector);\n                }\n\n                return () -> {\n                    final SecurityDomainContext domainContext = securityDomainContextInjector.getValue();\n                    final JSSESecurityDomain jsseDomain = domainContext.getJSSE();\n                    if (jsseDomain == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateJSSEConfig(legacyJSSEConfig);\n                    }\n                    final TrustManager[] trustManagers = jsseDomain.getTrustManagers();\n                    if (trustManagers == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateComponentInJSSEDomain(\"TrustManager\", legacyJSSEConfig);\n                    }\n                    for (TrustManager trustManager : trustManagers) {\n                        if (trustManager instanceof X509ExtendedTrustManager)\n                            return trustManager;\n                    }\n                    throw SecurityLogger.ROOT_LOGGER.expectedManagerTypeNotFound(\"TrustManager\", X509ExtendedTrustManager.class.getSimpleName(), legacyJSSEConfig);\n                };\n            }\n        };\n\n        return new BasicResourceDefinition(Constants.ELYTRON_TRUST_MANAGER, addHandler, attributes, TRUST_MANAGER_RUNTIME_CAPABILITY);\n    }", "code_tokens": ["public", "static", "ResourceDefinition", "getElytronTrustManagersResourceDefinition", "(", ")", "{", "final", "AttributeDefinition", "[", "]", "attributes", "=", "new", "AttributeDefinition", "[", "]", "{", "LEGACY_JSSE_CONFIG", "}", ";", "final", "AbstractAddStepHandler", "addHandler", "=", "new", "BasicAddHandler", "<", "TrustManager", ">", "(", "attributes", ",", "TRUST_MANAGER_RUNTIME_CAPABILITY", ")", "{", "@", "Override", "protected", "BasicService", ".", "ValueSupplier", "<", "TrustManager", ">", "getValueSupplier", "(", "ServiceBuilder", "<", "TrustManager", ">", "serviceBuilder", ",", "OperationContext", "context", ",", "ModelNode", "model", ")", "throws", "OperationFailedException", "{", "final", "String", "legacyJSSEConfig", "=", "asStringIfDefined", "(", "context", ",", "LEGACY_JSSE_CONFIG", ",", "model", ")", ";", "final", "InjectedValue", "<", "SecurityDomainContext", ">", "securityDomainContextInjector", "=", "new", "InjectedValue", "<>", "(", ")", ";", "if", "(", "legacyJSSEConfig", "!=", "null", ")", "{", "serviceBuilder", ".", "addDependency", "(", "SecurityDomainService", ".", "SERVICE_NAME", ".", "append", "(", "legacyJSSEConfig", ")", ",", "SecurityDomainContext", ".", "class", ",", "securityDomainContextInjector", ")", ";", "}", "return", "(", ")", "->", "{", "final", "SecurityDomainContext", "domainContext", "=", "securityDomainContextInjector", ".", "getValue", "(", ")", ";", "final", "JSSESecurityDomain", "jsseDomain", "=", "domainContext", ".", "getJSSE", "(", ")", ";", "if", "(", "jsseDomain", "==", "null", ")", "{", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "unableToLocateJSSEConfig", "(", "legacyJSSEConfig", ")", ";", "}", "final", "TrustManager", "[", "]", "trustManagers", "=", "jsseDomain", ".", "getTrustManagers", "(", ")", ";", "if", "(", "trustManagers", "==", "null", ")", "{", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "unableToLocateComponentInJSSEDomain", "(", "\"TrustManager\"", ",", "legacyJSSEConfig", ")", ";", "}", "for", "(", "TrustManager", "trustManager", ":", "trustManagers", ")", "{", "if", "(", "trustManager", "instanceof", "X509ExtendedTrustManager", ")", "return", "trustManager", ";", "}", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "expectedManagerTypeNotFound", "(", "\"TrustManager\"", ",", "X509ExtendedTrustManager", ".", "class", ".", "getSimpleName", "(", ")", ",", "legacyJSSEConfig", ")", ";", "}", ";", "}", "}", ";", "return", "new", "BasicResourceDefinition", "(", "Constants", ".", "ELYTRON_TRUST_MANAGER", ",", "addHandler", ",", "attributes", ",", "TRUST_MANAGER_RUNTIME_CAPABILITY", ")", ";", "}"], "docstring": "Defines a resource that represents Elytron-compatible trust managers that can be exported by a JSSE-enabled domain\nin the legacy security subsystem.\n\nTo export the trust managers the resource uses a {@code BasicAddHandler} implementation that registers the elytron\ntrust-managers capability and implements a {@code org.jboss.as.security.elytron.BasicService.ValueSupplier} that uses\nthe injected {@code SecurityDomainContext} to obtain a {@code JSSESecurityDomain}. If such domain is found, its\nconfigured trust manager array is obtained and returned.\n\nThe {@code ValueSupplier} implementation throws an exception if the referenced legacy domain is not a JSSE-enabled\ndomain or if the domain doesn't contain a trust store configuration that can be used to build the trust managers.\n\nNOTE: The {@code PicketBox} implementation of a {@code JSSESecurityDomain} returns a reference to the key store if\na trust store was not configured. This means that the trust managers that it builds will use the configured key store\ninstead of throwing an exception to alert about a missing trust store configuration. So extra care must be taken\nto ensure that the exported trust managers are being built using the correct trust stores.", "docstring_tokens": ["Defines", "a", "resource", "that", "represents", "Elytron", "-", "compatible", "trust", "managers", "that", "can", "be", "exported", "by", "a", "JSSE", "-", "enabled", "domain", "in", "the", "legacy", "security", "subsystem", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/elytron/ElytronIntegrationResourceDefinitions.java#L272-L304", "partition": "test", "index": 2701, "time": "2016-07-12 13:03:49"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/elytron/ElytronIntegrationResourceDefinitions.java", "func_name": "ElytronIntegrationResourceDefinitions.getElytronKeyStoreResourceDefinition", "original_string": "public static ResourceDefinition getElytronKeyStoreResourceDefinition() {\n        final AttributeDefinition[] attributes = new AttributeDefinition[] {LEGACY_JSSE_CONFIG};\n        final AbstractAddStepHandler addHandler = new BasicAddHandler<KeyStore>(attributes, KEY_STORE_RUNTIME_CAPABILITY) {\n\n            @Override\n            protected BasicService.ValueSupplier<KeyStore> getValueSupplier(ServiceBuilder<KeyStore> serviceBuilder, OperationContext context, ModelNode model) throws OperationFailedException {\n                final String legacyJSSEConfig = asStringIfDefined(context, LEGACY_JSSE_CONFIG, model);\n                final InjectedValue<SecurityDomainContext> securityDomainContextInjector = new InjectedValue<>();\n                if (legacyJSSEConfig != null) {\n                    serviceBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(legacyJSSEConfig), SecurityDomainContext.class, securityDomainContextInjector);\n                }\n\n                return () -> {\n                    final SecurityDomainContext domainContext = securityDomainContextInjector.getValue();\n                    final JSSESecurityDomain jsseDomain = domainContext.getJSSE();\n                    if (jsseDomain == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateJSSEConfig(legacyJSSEConfig);\n                    }\n                    final KeyStore keyStore = jsseDomain.getKeyStore();\n                    if (keyStore == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateComponentInJSSEDomain(\"KeyStore\", legacyJSSEConfig);\n                    }\n                    return keyStore;\n                };\n            }\n        };\n\n        return new BasicResourceDefinition(Constants.ELYTRON_KEY_STORE, addHandler, attributes, KEY_STORE_RUNTIME_CAPABILITY);\n    }", "language": "java", "code": "public static ResourceDefinition getElytronKeyStoreResourceDefinition() {\n        final AttributeDefinition[] attributes = new AttributeDefinition[] {LEGACY_JSSE_CONFIG};\n        final AbstractAddStepHandler addHandler = new BasicAddHandler<KeyStore>(attributes, KEY_STORE_RUNTIME_CAPABILITY) {\n\n            @Override\n            protected BasicService.ValueSupplier<KeyStore> getValueSupplier(ServiceBuilder<KeyStore> serviceBuilder, OperationContext context, ModelNode model) throws OperationFailedException {\n                final String legacyJSSEConfig = asStringIfDefined(context, LEGACY_JSSE_CONFIG, model);\n                final InjectedValue<SecurityDomainContext> securityDomainContextInjector = new InjectedValue<>();\n                if (legacyJSSEConfig != null) {\n                    serviceBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(legacyJSSEConfig), SecurityDomainContext.class, securityDomainContextInjector);\n                }\n\n                return () -> {\n                    final SecurityDomainContext domainContext = securityDomainContextInjector.getValue();\n                    final JSSESecurityDomain jsseDomain = domainContext.getJSSE();\n                    if (jsseDomain == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateJSSEConfig(legacyJSSEConfig);\n                    }\n                    final KeyStore keyStore = jsseDomain.getKeyStore();\n                    if (keyStore == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateComponentInJSSEDomain(\"KeyStore\", legacyJSSEConfig);\n                    }\n                    return keyStore;\n                };\n            }\n        };\n\n        return new BasicResourceDefinition(Constants.ELYTRON_KEY_STORE, addHandler, attributes, KEY_STORE_RUNTIME_CAPABILITY);\n    }", "code_tokens": ["public", "static", "ResourceDefinition", "getElytronKeyStoreResourceDefinition", "(", ")", "{", "final", "AttributeDefinition", "[", "]", "attributes", "=", "new", "AttributeDefinition", "[", "]", "{", "LEGACY_JSSE_CONFIG", "}", ";", "final", "AbstractAddStepHandler", "addHandler", "=", "new", "BasicAddHandler", "<", "KeyStore", ">", "(", "attributes", ",", "KEY_STORE_RUNTIME_CAPABILITY", ")", "{", "@", "Override", "protected", "BasicService", ".", "ValueSupplier", "<", "KeyStore", ">", "getValueSupplier", "(", "ServiceBuilder", "<", "KeyStore", ">", "serviceBuilder", ",", "OperationContext", "context", ",", "ModelNode", "model", ")", "throws", "OperationFailedException", "{", "final", "String", "legacyJSSEConfig", "=", "asStringIfDefined", "(", "context", ",", "LEGACY_JSSE_CONFIG", ",", "model", ")", ";", "final", "InjectedValue", "<", "SecurityDomainContext", ">", "securityDomainContextInjector", "=", "new", "InjectedValue", "<>", "(", ")", ";", "if", "(", "legacyJSSEConfig", "!=", "null", ")", "{", "serviceBuilder", ".", "addDependency", "(", "SecurityDomainService", ".", "SERVICE_NAME", ".", "append", "(", "legacyJSSEConfig", ")", ",", "SecurityDomainContext", ".", "class", ",", "securityDomainContextInjector", ")", ";", "}", "return", "(", ")", "->", "{", "final", "SecurityDomainContext", "domainContext", "=", "securityDomainContextInjector", ".", "getValue", "(", ")", ";", "final", "JSSESecurityDomain", "jsseDomain", "=", "domainContext", ".", "getJSSE", "(", ")", ";", "if", "(", "jsseDomain", "==", "null", ")", "{", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "unableToLocateJSSEConfig", "(", "legacyJSSEConfig", ")", ";", "}", "final", "KeyStore", "keyStore", "=", "jsseDomain", ".", "getKeyStore", "(", ")", ";", "if", "(", "keyStore", "==", "null", ")", "{", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "unableToLocateComponentInJSSEDomain", "(", "\"KeyStore\"", ",", "legacyJSSEConfig", ")", ";", "}", "return", "keyStore", ";", "}", ";", "}", "}", ";", "return", "new", "BasicResourceDefinition", "(", "Constants", ".", "ELYTRON_KEY_STORE", ",", "addHandler", ",", "attributes", ",", "KEY_STORE_RUNTIME_CAPABILITY", ")", ";", "}"], "docstring": "Defines a resource that represents an Elytron-compatible key store that can be exported by a JSSE-enabled domain\nin the legacy security subsystem.\n\nTo export the key store the resource uses a {@code BasicAddHandler} implementation that registers the elytron key-store\ncapability and implements a {@code org.jboss.as.security.elytron.BasicService.ValueSupplier} that uses the injected\n{@code SecurityDomainContext} to obtain a {@code JSSESecurityDomain}. If such domain is found, its configured key\nstore is obtained and returned.\n\nThe {@code ValueSupplier} implementation throws an exception if the referenced legacy domain is not a JSSE-enabled\ndomain or if the domain doesn't contain a key store configuration.", "docstring_tokens": ["Defines", "a", "resource", "that", "represents", "an", "Elytron", "-", "compatible", "key", "store", "that", "can", "be", "exported", "by", "a", "JSSE", "-", "enabled", "domain", "in", "the", "legacy", "security", "subsystem", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/elytron/ElytronIntegrationResourceDefinitions.java#L127-L155", "partition": "test", "index": 2699, "time": "2016-07-12 13:03:49"}
{"repo": "wildfly/wildfly", "path": "security/subsystem/src/main/java/org/jboss/as/security/elytron/ElytronIntegrationResourceDefinitions.java", "func_name": "ElytronIntegrationResourceDefinitions.getElytronKeyManagersResourceDefinition", "original_string": "public static ResourceDefinition getElytronKeyManagersResourceDefinition() {\n        final AttributeDefinition[] attributes = new AttributeDefinition[] {LEGACY_JSSE_CONFIG};\n        final AbstractAddStepHandler addHandler = new BasicAddHandler<KeyManager>(attributes, KEY_MANAGER_RUNTIME_CAPABILITY) {\n\n            @Override\n            protected BasicService.ValueSupplier<KeyManager> getValueSupplier(ServiceBuilder<KeyManager> serviceBuilder, OperationContext context, ModelNode model) throws OperationFailedException {\n                final String legacyJSSEConfig = asStringIfDefined(context, LEGACY_JSSE_CONFIG, model);\n                final InjectedValue<SecurityDomainContext> securityDomainContextInjector = new InjectedValue<>();\n                if (legacyJSSEConfig != null) {\n                    serviceBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(legacyJSSEConfig), SecurityDomainContext.class, securityDomainContextInjector);\n                }\n\n                return () -> {\n                    final SecurityDomainContext domainContext = securityDomainContextInjector.getValue();\n                    final JSSESecurityDomain jsseDomain = domainContext.getJSSE();\n                    if (jsseDomain == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateJSSEConfig(legacyJSSEConfig);\n                    }\n                    final KeyManager[] keyManagers = jsseDomain.getKeyManagers();\n                    if (keyManagers == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateComponentInJSSEDomain(\"KeyManager\", legacyJSSEConfig);\n                    }\n                    for (KeyManager keyManager : keyManagers) {\n                        if (keyManager instanceof X509ExtendedKeyManager) {\n                            return keyManager;\n                        }\n                    }\n                    throw SecurityLogger.ROOT_LOGGER.expectedManagerTypeNotFound(\"KeyManager\", X509ExtendedKeyManager.class.getSimpleName(), legacyJSSEConfig);\n                };\n            }\n        };\n\n        return new BasicResourceDefinition(Constants.ELYTRON_KEY_MANAGER, addHandler, attributes, KEY_MANAGER_RUNTIME_CAPABILITY);\n    }", "language": "java", "code": "public static ResourceDefinition getElytronKeyManagersResourceDefinition() {\n        final AttributeDefinition[] attributes = new AttributeDefinition[] {LEGACY_JSSE_CONFIG};\n        final AbstractAddStepHandler addHandler = new BasicAddHandler<KeyManager>(attributes, KEY_MANAGER_RUNTIME_CAPABILITY) {\n\n            @Override\n            protected BasicService.ValueSupplier<KeyManager> getValueSupplier(ServiceBuilder<KeyManager> serviceBuilder, OperationContext context, ModelNode model) throws OperationFailedException {\n                final String legacyJSSEConfig = asStringIfDefined(context, LEGACY_JSSE_CONFIG, model);\n                final InjectedValue<SecurityDomainContext> securityDomainContextInjector = new InjectedValue<>();\n                if (legacyJSSEConfig != null) {\n                    serviceBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(legacyJSSEConfig), SecurityDomainContext.class, securityDomainContextInjector);\n                }\n\n                return () -> {\n                    final SecurityDomainContext domainContext = securityDomainContextInjector.getValue();\n                    final JSSESecurityDomain jsseDomain = domainContext.getJSSE();\n                    if (jsseDomain == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateJSSEConfig(legacyJSSEConfig);\n                    }\n                    final KeyManager[] keyManagers = jsseDomain.getKeyManagers();\n                    if (keyManagers == null) {\n                        throw SecurityLogger.ROOT_LOGGER.unableToLocateComponentInJSSEDomain(\"KeyManager\", legacyJSSEConfig);\n                    }\n                    for (KeyManager keyManager : keyManagers) {\n                        if (keyManager instanceof X509ExtendedKeyManager) {\n                            return keyManager;\n                        }\n                    }\n                    throw SecurityLogger.ROOT_LOGGER.expectedManagerTypeNotFound(\"KeyManager\", X509ExtendedKeyManager.class.getSimpleName(), legacyJSSEConfig);\n                };\n            }\n        };\n\n        return new BasicResourceDefinition(Constants.ELYTRON_KEY_MANAGER, addHandler, attributes, KEY_MANAGER_RUNTIME_CAPABILITY);\n    }", "code_tokens": ["public", "static", "ResourceDefinition", "getElytronKeyManagersResourceDefinition", "(", ")", "{", "final", "AttributeDefinition", "[", "]", "attributes", "=", "new", "AttributeDefinition", "[", "]", "{", "LEGACY_JSSE_CONFIG", "}", ";", "final", "AbstractAddStepHandler", "addHandler", "=", "new", "BasicAddHandler", "<", "KeyManager", ">", "(", "attributes", ",", "KEY_MANAGER_RUNTIME_CAPABILITY", ")", "{", "@", "Override", "protected", "BasicService", ".", "ValueSupplier", "<", "KeyManager", ">", "getValueSupplier", "(", "ServiceBuilder", "<", "KeyManager", ">", "serviceBuilder", ",", "OperationContext", "context", ",", "ModelNode", "model", ")", "throws", "OperationFailedException", "{", "final", "String", "legacyJSSEConfig", "=", "asStringIfDefined", "(", "context", ",", "LEGACY_JSSE_CONFIG", ",", "model", ")", ";", "final", "InjectedValue", "<", "SecurityDomainContext", ">", "securityDomainContextInjector", "=", "new", "InjectedValue", "<>", "(", ")", ";", "if", "(", "legacyJSSEConfig", "!=", "null", ")", "{", "serviceBuilder", ".", "addDependency", "(", "SecurityDomainService", ".", "SERVICE_NAME", ".", "append", "(", "legacyJSSEConfig", ")", ",", "SecurityDomainContext", ".", "class", ",", "securityDomainContextInjector", ")", ";", "}", "return", "(", ")", "->", "{", "final", "SecurityDomainContext", "domainContext", "=", "securityDomainContextInjector", ".", "getValue", "(", ")", ";", "final", "JSSESecurityDomain", "jsseDomain", "=", "domainContext", ".", "getJSSE", "(", ")", ";", "if", "(", "jsseDomain", "==", "null", ")", "{", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "unableToLocateJSSEConfig", "(", "legacyJSSEConfig", ")", ";", "}", "final", "KeyManager", "[", "]", "keyManagers", "=", "jsseDomain", ".", "getKeyManagers", "(", ")", ";", "if", "(", "keyManagers", "==", "null", ")", "{", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "unableToLocateComponentInJSSEDomain", "(", "\"KeyManager\"", ",", "legacyJSSEConfig", ")", ";", "}", "for", "(", "KeyManager", "keyManager", ":", "keyManagers", ")", "{", "if", "(", "keyManager", "instanceof", "X509ExtendedKeyManager", ")", "{", "return", "keyManager", ";", "}", "}", "throw", "SecurityLogger", ".", "ROOT_LOGGER", ".", "expectedManagerTypeNotFound", "(", "\"KeyManager\"", ",", "X509ExtendedKeyManager", ".", "class", ".", "getSimpleName", "(", ")", ",", "legacyJSSEConfig", ")", ";", "}", ";", "}", "}", ";", "return", "new", "BasicResourceDefinition", "(", "Constants", ".", "ELYTRON_KEY_MANAGER", ",", "addHandler", ",", "attributes", ",", "KEY_MANAGER_RUNTIME_CAPABILITY", ")", ";", "}"], "docstring": "Defines a resource that represents Elytron-compatible key managers that can be exported by a JSSE-enabled domain\nin the legacy security subsystem.\n\nTo export the key managers the resource uses a {@code BasicAddHandler} implementation that registers the elytron\nkey-managers capability and implements a {@code org.jboss.as.security.elytron.BasicService.ValueSupplier} that uses\nthe injected {@code SecurityDomainContext} to obtain a {@code JSSESecurityDomain}. If such domain is found, its\nconfigured key manager array is obtained and returned.\n\nThe {@code ValueSupplier} implementation throws an exception if the referenced legacy domain is not a JSSE-enabled\ndomain or if the domain doesn't contain a key store configuration that can be used to build the key managers.", "docstring_tokens": ["Defines", "a", "resource", "that", "represents", "Elytron", "-", "compatible", "key", "managers", "that", "can", "be", "exported", "by", "a", "JSSE", "-", "enabled", "domain", "in", "the", "legacy", "security", "subsystem", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/security/subsystem/src/main/java/org/jboss/as/security/elytron/ElytronIntegrationResourceDefinitions.java#L220-L253", "partition": "test", "index": 2700, "time": "2016-07-12 13:03:49"}
{"repo": "wildfly/wildfly", "path": "jpa/subsystem/src/main/java/org/jboss/as/jpa/config/Configuration.java", "func_name": "Configuration.skipMixedSynchronizationTypeCheck", "original_string": "public static boolean skipMixedSynchronizationTypeCheck(EntityManagerFactory emf, Map targetEntityManagerProperties) {\n        boolean result = false;\n        // EntityManager properties will take priority over persistence.xml level (emf) properties\n        if(targetEntityManagerProperties != null && targetEntityManagerProperties.containsKey(SKIPMIXEDSYNCTYPECHECKING)) {\n            result = Boolean.parseBoolean((String) targetEntityManagerProperties.get(SKIPMIXEDSYNCTYPECHECKING));\n        }\n        else if(emf.getProperties() != null && emf.getProperties().containsKey(SKIPMIXEDSYNCTYPECHECKING)) {\n            result = Boolean.parseBoolean((String) emf.getProperties().get(SKIPMIXEDSYNCTYPECHECKING));\n        }\n        return result;\n    }", "language": "java", "code": "public static boolean skipMixedSynchronizationTypeCheck(EntityManagerFactory emf, Map targetEntityManagerProperties) {\n        boolean result = false;\n        // EntityManager properties will take priority over persistence.xml level (emf) properties\n        if(targetEntityManagerProperties != null && targetEntityManagerProperties.containsKey(SKIPMIXEDSYNCTYPECHECKING)) {\n            result = Boolean.parseBoolean((String) targetEntityManagerProperties.get(SKIPMIXEDSYNCTYPECHECKING));\n        }\n        else if(emf.getProperties() != null && emf.getProperties().containsKey(SKIPMIXEDSYNCTYPECHECKING)) {\n            result = Boolean.parseBoolean((String) emf.getProperties().get(SKIPMIXEDSYNCTYPECHECKING));\n        }\n        return result;\n    }", "code_tokens": ["public", "static", "boolean", "skipMixedSynchronizationTypeCheck", "(", "EntityManagerFactory", "emf", ",", "Map", "targetEntityManagerProperties", ")", "{", "boolean", "result", "=", "false", ";", "// EntityManager properties will take priority over persistence.xml level (emf) properties", "if", "(", "targetEntityManagerProperties", "!=", "null", "&&", "targetEntityManagerProperties", ".", "containsKey", "(", "SKIPMIXEDSYNCTYPECHECKING", ")", ")", "{", "result", "=", "Boolean", ".", "parseBoolean", "(", "(", "String", ")", "targetEntityManagerProperties", ".", "get", "(", "SKIPMIXEDSYNCTYPECHECKING", ")", ")", ";", "}", "else", "if", "(", "emf", ".", "getProperties", "(", ")", "!=", "null", "&&", "emf", ".", "getProperties", "(", ")", ".", "containsKey", "(", "SKIPMIXEDSYNCTYPECHECKING", ")", ")", "{", "result", "=", "Boolean", ".", "parseBoolean", "(", "(", "String", ")", "emf", ".", "getProperties", "(", ")", ".", "get", "(", "SKIPMIXEDSYNCTYPECHECKING", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Allow the mixed synchronization checking to be skipped for backward compatibility with WildFly 10.1.0\n\n\n@param emf\n@param targetEntityManagerProperties\n@return", "docstring_tokens": ["Allow", "the", "mixed", "synchronization", "checking", "to", "be", "skipped", "for", "backward", "compatibility", "with", "WildFly", "10", ".", "1", ".", "0"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jpa/subsystem/src/main/java/org/jboss/as/jpa/config/Configuration.java#L339-L349", "partition": "test", "index": 2597, "time": "2016-09-16 12:45:25"}
{"repo": "wildfly/wildfly", "path": "webservices/server-integration/src/main/java/org/jboss/as/webservices/invocation/AbstractInvocationHandler.java", "func_name": "AbstractInvocationHandler.invoke", "original_string": "public void invoke(final Endpoint endpoint, final Invocation wsInvocation) throws Exception {\n        try {\n            if (!EndpointState.STARTED.equals(endpoint.getState())) {\n                throw WSLogger.ROOT_LOGGER.endpointAlreadyStopped(endpoint.getShortName());\n            }\n            SecurityDomainContext securityDomainContext = endpoint.getSecurityDomainContext();\n            securityDomainContext.runAs((Callable<Void>) () -> {\n                invokeInternal(endpoint, wsInvocation);\n                return null;\n            });\n        } catch (Throwable t) {\n            handleInvocationException(t);\n        } finally {\n            onAfterInvocation(wsInvocation);\n        }\n    }", "language": "java", "code": "public void invoke(final Endpoint endpoint, final Invocation wsInvocation) throws Exception {\n        try {\n            if (!EndpointState.STARTED.equals(endpoint.getState())) {\n                throw WSLogger.ROOT_LOGGER.endpointAlreadyStopped(endpoint.getShortName());\n            }\n            SecurityDomainContext securityDomainContext = endpoint.getSecurityDomainContext();\n            securityDomainContext.runAs((Callable<Void>) () -> {\n                invokeInternal(endpoint, wsInvocation);\n                return null;\n            });\n        } catch (Throwable t) {\n            handleInvocationException(t);\n        } finally {\n            onAfterInvocation(wsInvocation);\n        }\n    }", "code_tokens": ["public", "void", "invoke", "(", "final", "Endpoint", "endpoint", ",", "final", "Invocation", "wsInvocation", ")", "throws", "Exception", "{", "try", "{", "if", "(", "!", "EndpointState", ".", "STARTED", ".", "equals", "(", "endpoint", ".", "getState", "(", ")", ")", ")", "{", "throw", "WSLogger", ".", "ROOT_LOGGER", ".", "endpointAlreadyStopped", "(", "endpoint", ".", "getShortName", "(", ")", ")", ";", "}", "SecurityDomainContext", "securityDomainContext", "=", "endpoint", ".", "getSecurityDomainContext", "(", ")", ";", "securityDomainContext", ".", "runAs", "(", "(", "Callable", "<", "Void", ">", ")", "(", ")", "->", "{", "invokeInternal", "(", "endpoint", ",", "wsInvocation", ")", ";", "return", "null", ";", "}", ")", ";", "}", "catch", "(", "Throwable", "t", ")", "{", "handleInvocationException", "(", "t", ")", ";", "}", "finally", "{", "onAfterInvocation", "(", "wsInvocation", ")", ";", "}", "}"], "docstring": "Invokes WS endpoint.\n\n@param endpoint WS endpoint\n@param wsInvocation web service invocation\n@throws Exception if any error occurs", "docstring_tokens": ["Invokes", "WS", "endpoint", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/webservices/server-integration/src/main/java/org/jboss/as/webservices/invocation/AbstractInvocationHandler.java#L109-L124", "partition": "test", "index": 2526, "time": "2016-09-21 17:07:22"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/ElytronSecurityManager.java", "func_name": "ElytronSecurityManager.authenticate", "original_string": "private SecurityIdentity authenticate(final String username, final String password) {\n\n        ServerAuthenticationContext context = this.securityDomain.createNewAuthenticationContext();\n        PasswordGuessEvidence evidence = null;\n        try {\n            if (password == null) {\n                if (username == null) {\n                    if (context.authorizeAnonymous()) {\n                        context.succeed();\n                        return context.getAuthorizedIdentity();\n                    } else {\n                        context.fail();\n                        return null;\n                    }\n                } else {\n                    // treat a non-null user name with a null password as a auth failure\n                    context.fail();\n                    return null;\n                }\n            }\n\n            context.setAuthenticationName(username);\n            evidence = new PasswordGuessEvidence(password.toCharArray());\n            if (context.verifyEvidence(evidence)) {\n                if (context.authorize()) {\n                    context.succeed();\n                    return context.getAuthorizedIdentity();\n                }\n                else {\n                    context.fail();\n                    MessagingLogger.ROOT_LOGGER.failedAuthorization(username);\n                }\n            } else {\n                context.fail();\n                MessagingLogger.ROOT_LOGGER.failedAuthentication(username);\n            }\n        } catch (IllegalArgumentException | IllegalStateException | RealmUnavailableException e) {\n            context.fail();\n            MessagingLogger.ROOT_LOGGER.failedAuthenticationWithException(e, username, e.getMessage());\n        } finally {\n            if (evidence != null) {\n                evidence.destroy();\n            }\n        }\n        return null;\n    }", "language": "java", "code": "private SecurityIdentity authenticate(final String username, final String password) {\n\n        ServerAuthenticationContext context = this.securityDomain.createNewAuthenticationContext();\n        PasswordGuessEvidence evidence = null;\n        try {\n            if (password == null) {\n                if (username == null) {\n                    if (context.authorizeAnonymous()) {\n                        context.succeed();\n                        return context.getAuthorizedIdentity();\n                    } else {\n                        context.fail();\n                        return null;\n                    }\n                } else {\n                    // treat a non-null user name with a null password as a auth failure\n                    context.fail();\n                    return null;\n                }\n            }\n\n            context.setAuthenticationName(username);\n            evidence = new PasswordGuessEvidence(password.toCharArray());\n            if (context.verifyEvidence(evidence)) {\n                if (context.authorize()) {\n                    context.succeed();\n                    return context.getAuthorizedIdentity();\n                }\n                else {\n                    context.fail();\n                    MessagingLogger.ROOT_LOGGER.failedAuthorization(username);\n                }\n            } else {\n                context.fail();\n                MessagingLogger.ROOT_LOGGER.failedAuthentication(username);\n            }\n        } catch (IllegalArgumentException | IllegalStateException | RealmUnavailableException e) {\n            context.fail();\n            MessagingLogger.ROOT_LOGGER.failedAuthenticationWithException(e, username, e.getMessage());\n        } finally {\n            if (evidence != null) {\n                evidence.destroy();\n            }\n        }\n        return null;\n    }", "code_tokens": ["private", "SecurityIdentity", "authenticate", "(", "final", "String", "username", ",", "final", "String", "password", ")", "{", "ServerAuthenticationContext", "context", "=", "this", ".", "securityDomain", ".", "createNewAuthenticationContext", "(", ")", ";", "PasswordGuessEvidence", "evidence", "=", "null", ";", "try", "{", "if", "(", "password", "==", "null", ")", "{", "if", "(", "username", "==", "null", ")", "{", "if", "(", "context", ".", "authorizeAnonymous", "(", ")", ")", "{", "context", ".", "succeed", "(", ")", ";", "return", "context", ".", "getAuthorizedIdentity", "(", ")", ";", "}", "else", "{", "context", ".", "fail", "(", ")", ";", "return", "null", ";", "}", "}", "else", "{", "// treat a non-null user name with a null password as a auth failure", "context", ".", "fail", "(", ")", ";", "return", "null", ";", "}", "}", "context", ".", "setAuthenticationName", "(", "username", ")", ";", "evidence", "=", "new", "PasswordGuessEvidence", "(", "password", ".", "toCharArray", "(", ")", ")", ";", "if", "(", "context", ".", "verifyEvidence", "(", "evidence", ")", ")", "{", "if", "(", "context", ".", "authorize", "(", ")", ")", "{", "context", ".", "succeed", "(", ")", ";", "return", "context", ".", "getAuthorizedIdentity", "(", ")", ";", "}", "else", "{", "context", ".", "fail", "(", ")", ";", "MessagingLogger", ".", "ROOT_LOGGER", ".", "failedAuthorization", "(", "username", ")", ";", "}", "}", "else", "{", "context", ".", "fail", "(", ")", ";", "MessagingLogger", ".", "ROOT_LOGGER", ".", "failedAuthentication", "(", "username", ")", ";", "}", "}", "catch", "(", "IllegalArgumentException", "|", "IllegalStateException", "|", "RealmUnavailableException", "e", ")", "{", "context", ".", "fail", "(", ")", ";", "MessagingLogger", ".", "ROOT_LOGGER", ".", "failedAuthenticationWithException", "(", "e", ",", "username", ",", "e", ".", "getMessage", "(", ")", ")", ";", "}", "finally", "{", "if", "(", "evidence", "!=", "null", ")", "{", "evidence", ".", "destroy", "(", ")", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Attempt to authenticate and authorize an username with the specified password evidence.\n\n@param username the username being authenticated.\n@param password the password to be verified.\n@return a reference to the {@link SecurityIdentity} if the user was successfully authenticated and authorized;\n{@code null} otherwise.", "docstring_tokens": ["Attempt", "to", "authenticate", "and", "authorize", "an", "username", "with", "the", "specified", "password", "evidence", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/ElytronSecurityManager.java#L90-L135", "partition": "test", "index": 2707, "time": "2016-11-24 16:51:09"}
{"repo": "wildfly/wildfly", "path": "batch-jberet/src/main/java/org/wildfly/extension/batch/jberet/deployment/WildFlyJobXmlResolver.java", "func_name": "WildFlyJobXmlResolver.getJobXmlNames", "original_string": "Set<String> getJobXmlNames(final String jobName) {\n        if (jobNames.containsKey(jobName)) {\n            return Collections.unmodifiableSet(jobNames.get(jobName));\n        }\n        return Collections.emptySet();\n    }", "language": "java", "code": "Set<String> getJobXmlNames(final String jobName) {\n        if (jobNames.containsKey(jobName)) {\n            return Collections.unmodifiableSet(jobNames.get(jobName));\n        }\n        return Collections.emptySet();\n    }", "code_tokens": ["Set", "<", "String", ">", "getJobXmlNames", "(", "final", "String", "jobName", ")", "{", "if", "(", "jobNames", ".", "containsKey", "(", "jobName", ")", ")", "{", "return", "Collections", ".", "unmodifiableSet", "(", "jobNames", ".", "get", "(", "jobName", ")", ")", ";", "}", "return", "Collections", ".", "emptySet", "(", ")", ";", "}"], "docstring": "Returns the job XML file names which contain the job name.\n\n@param jobName the job name to find the job XML files for\n\n@return the set of job XML files the job can be run from", "docstring_tokens": ["Returns", "the", "job", "XML", "file", "names", "which", "contain", "the", "job", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/batch-jberet/src/main/java/org/wildfly/extension/batch/jberet/deployment/WildFlyJobXmlResolver.java#L194-L199", "partition": "test", "index": 2767, "time": "2016-12-01 14:57:39"}
{"repo": "wildfly/wildfly", "path": "batch-jberet/src/main/java/org/wildfly/extension/batch/jberet/deployment/BatchPermission.java", "func_name": "BatchPermission.forName", "original_string": "public static BatchPermission forName(final String name) {\n        Assert.checkNotNullParam(\"name\", name);\n        return \"*\".equals(name) ? allPermission : mapping.getItemByString(name);\n    }", "language": "java", "code": "public static BatchPermission forName(final String name) {\n        Assert.checkNotNullParam(\"name\", name);\n        return \"*\".equals(name) ? allPermission : mapping.getItemByString(name);\n    }", "code_tokens": ["public", "static", "BatchPermission", "forName", "(", "final", "String", "name", ")", "{", "Assert", ".", "checkNotNullParam", "(", "\"name\"", ",", "name", ")", ";", "return", "\"*\"", ".", "equals", "(", "name", ")", "?", "allPermission", ":", "mapping", ".", "getItemByString", "(", "name", ")", ";", "}"], "docstring": "Get the permission with the given name.\n\n@param name the name (must not be {@code null})\n\n@return the permission (not {@code null})\n\n@throws IllegalArgumentException if the name is not valid", "docstring_tokens": ["Get", "the", "permission", "with", "the", "given", "name", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/batch-jberet/src/main/java/org/wildfly/extension/batch/jberet/deployment/BatchPermission.java#L87-L90", "partition": "test", "index": 2636, "time": "2016-12-14 08:50:33"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJBClientConfiguratorService.java", "func_name": "EJBClientConfiguratorService.accept", "original_string": "public void accept(final EJBClientContext.Builder builder) {\n        final EJBTransportProvider remoteTransportProvider = this.remoteTransportProvider;\n        if (remoteTransportProvider != null) {\n            builder.addTransportProvider(remoteTransportProvider);\n            builder.addTransportProvider(remoteHttpTransportProvider);\n        }\n    }", "language": "java", "code": "public void accept(final EJBClientContext.Builder builder) {\n        final EJBTransportProvider remoteTransportProvider = this.remoteTransportProvider;\n        if (remoteTransportProvider != null) {\n            builder.addTransportProvider(remoteTransportProvider);\n            builder.addTransportProvider(remoteHttpTransportProvider);\n        }\n    }", "code_tokens": ["public", "void", "accept", "(", "final", "EJBClientContext", ".", "Builder", "builder", ")", "{", "final", "EJBTransportProvider", "remoteTransportProvider", "=", "this", ".", "remoteTransportProvider", ";", "if", "(", "remoteTransportProvider", "!=", "null", ")", "{", "builder", ".", "addTransportProvider", "(", "remoteTransportProvider", ")", ";", "builder", ".", "addTransportProvider", "(", "remoteHttpTransportProvider", ")", ";", "}", "}"], "docstring": "Perform the configuration of the transport provider.\n\n@param builder the EJB client context builder (not {@code null})", "docstring_tokens": ["Perform", "the", "configuration", "of", "the", "transport", "provider", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJBClientConfiguratorService.java#L72-L78", "partition": "test", "index": 2820, "time": "2017-01-16 19:51:23"}
{"repo": "wildfly/wildfly", "path": "connector/src/main/java/org/jboss/as/connector/security/ElytronSubjectFactory.java", "func_name": "ElytronSubjectFactory.addPrivateCredential", "original_string": "private void addPrivateCredential(final Subject subject, final Object credential) {\n        if (!WildFlySecurityManager.isChecking()) {\n            subject.getPrivateCredentials().add(credential);\n        }\n        else {\n            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n                subject.getPrivateCredentials().add(credential);\n                return null;\n            });\n        }\n    }", "language": "java", "code": "private void addPrivateCredential(final Subject subject, final Object credential) {\n        if (!WildFlySecurityManager.isChecking()) {\n            subject.getPrivateCredentials().add(credential);\n        }\n        else {\n            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n                subject.getPrivateCredentials().add(credential);\n                return null;\n            });\n        }\n    }", "code_tokens": ["private", "void", "addPrivateCredential", "(", "final", "Subject", "subject", ",", "final", "Object", "credential", ")", "{", "if", "(", "!", "WildFlySecurityManager", ".", "isChecking", "(", ")", ")", "{", "subject", ".", "getPrivateCredentials", "(", ")", ".", "add", "(", "credential", ")", ";", "}", "else", "{", "AccessController", ".", "doPrivileged", "(", "(", "PrivilegedAction", "<", "Void", ">", ")", "(", ")", "->", "{", "subject", ".", "getPrivateCredentials", "(", ")", ".", "add", "(", "credential", ")", ";", "return", "null", ";", "}", ")", ";", "}", "}"], "docstring": "Add the specified credential to the subject's private credentials set.\n\n@param subject the {@link Subject} to add the credential to.\n@param credential a reference to the credential.", "docstring_tokens": ["Add", "the", "specified", "credential", "to", "the", "subject", "s", "private", "credentials", "set", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/connector/src/main/java/org/jboss/as/connector/security/ElytronSubjectFactory.java#L175-L185", "partition": "test", "index": 2647, "time": "2017-01-17 11:53:14"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/interceptors/CancellationFlag.java", "func_name": "CancellationFlag.cancel", "original_string": "public boolean cancel(boolean setFlag) {\n        final AtomicInteger stateRef = this.stateRef;\n        int oldVal, newVal;\n        do {\n            oldVal = stateRef.get();\n            if (oldVal == ST_WAITING) {\n                newVal = ST_CANCELLED;\n            } else if (oldVal == ST_CANCELLED) {\n                if (! setFlag) {\n                    return true;\n                }\n                newVal = ST_CANCELLED_FLAG_SET;\n            } else if (oldVal == ST_CANCELLED_FLAG_SET) {\n                // do nothing\n                return true;\n            } else if (oldVal == ST_STARTED) {\n                if (! setFlag) {\n                    return false;\n                }\n                newVal = ST_STARTED_FLAG_SET;\n            } else {\n                assert oldVal == ST_STARTED_FLAG_SET;\n                return false;\n            }\n        } while (! stateRef.compareAndSet(oldVal, newVal));\n        return newVal == ST_CANCELLED || newVal == ST_CANCELLED_FLAG_SET;\n    }", "language": "java", "code": "public boolean cancel(boolean setFlag) {\n        final AtomicInteger stateRef = this.stateRef;\n        int oldVal, newVal;\n        do {\n            oldVal = stateRef.get();\n            if (oldVal == ST_WAITING) {\n                newVal = ST_CANCELLED;\n            } else if (oldVal == ST_CANCELLED) {\n                if (! setFlag) {\n                    return true;\n                }\n                newVal = ST_CANCELLED_FLAG_SET;\n            } else if (oldVal == ST_CANCELLED_FLAG_SET) {\n                // do nothing\n                return true;\n            } else if (oldVal == ST_STARTED) {\n                if (! setFlag) {\n                    return false;\n                }\n                newVal = ST_STARTED_FLAG_SET;\n            } else {\n                assert oldVal == ST_STARTED_FLAG_SET;\n                return false;\n            }\n        } while (! stateRef.compareAndSet(oldVal, newVal));\n        return newVal == ST_CANCELLED || newVal == ST_CANCELLED_FLAG_SET;\n    }", "code_tokens": ["public", "boolean", "cancel", "(", "boolean", "setFlag", ")", "{", "final", "AtomicInteger", "stateRef", "=", "this", ".", "stateRef", ";", "int", "oldVal", ",", "newVal", ";", "do", "{", "oldVal", "=", "stateRef", ".", "get", "(", ")", ";", "if", "(", "oldVal", "==", "ST_WAITING", ")", "{", "newVal", "=", "ST_CANCELLED", ";", "}", "else", "if", "(", "oldVal", "==", "ST_CANCELLED", ")", "{", "if", "(", "!", "setFlag", ")", "{", "return", "true", ";", "}", "newVal", "=", "ST_CANCELLED_FLAG_SET", ";", "}", "else", "if", "(", "oldVal", "==", "ST_CANCELLED_FLAG_SET", ")", "{", "// do nothing", "return", "true", ";", "}", "else", "if", "(", "oldVal", "==", "ST_STARTED", ")", "{", "if", "(", "!", "setFlag", ")", "{", "return", "false", ";", "}", "newVal", "=", "ST_STARTED_FLAG_SET", ";", "}", "else", "{", "assert", "oldVal", "==", "ST_STARTED_FLAG_SET", ";", "return", "false", ";", "}", "}", "while", "(", "!", "stateRef", ".", "compareAndSet", "(", "oldVal", ",", "newVal", ")", ")", ";", "return", "newVal", "==", "ST_CANCELLED", "||", "newVal", "==", "ST_CANCELLED_FLAG_SET", ";", "}"], "docstring": "Attempt to cancel the corresponding invocation.\n\n@param setFlag {@code true} to set the EJB context cancellation flag (or equivalent), {@code false} otherwise\n@return {@code true} if the invocation was definitely cancelled, or {@code false} if it was not cancelled or it could not be determined if it was cancelled", "docstring_tokens": ["Attempt", "to", "cancel", "the", "corresponding", "invocation", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/interceptors/CancellationFlag.java#L56-L82", "partition": "test", "index": 2907, "time": "2017-02-06 19:13:45"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/component/interceptors/CancellationFlag.java", "func_name": "CancellationFlag.runIfNotCancelled", "original_string": "public boolean runIfNotCancelled() {\n        final AtomicInteger stateRef = this.stateRef;\n        int oldVal;\n        do {\n            oldVal = stateRef.get();\n            if (oldVal == ST_CANCELLED || oldVal == ST_CANCELLED_FLAG_SET) {\n                return false;\n            } else if (oldVal != ST_WAITING) {\n                throw Assert.unreachableCode();\n            }\n        } while (! stateRef.compareAndSet(oldVal, ST_STARTED));\n        return true;\n    }", "language": "java", "code": "public boolean runIfNotCancelled() {\n        final AtomicInteger stateRef = this.stateRef;\n        int oldVal;\n        do {\n            oldVal = stateRef.get();\n            if (oldVal == ST_CANCELLED || oldVal == ST_CANCELLED_FLAG_SET) {\n                return false;\n            } else if (oldVal != ST_WAITING) {\n                throw Assert.unreachableCode();\n            }\n        } while (! stateRef.compareAndSet(oldVal, ST_STARTED));\n        return true;\n    }", "code_tokens": ["public", "boolean", "runIfNotCancelled", "(", ")", "{", "final", "AtomicInteger", "stateRef", "=", "this", ".", "stateRef", ";", "int", "oldVal", ";", "do", "{", "oldVal", "=", "stateRef", ".", "get", "(", ")", ";", "if", "(", "oldVal", "==", "ST_CANCELLED", "||", "oldVal", "==", "ST_CANCELLED_FLAG_SET", ")", "{", "return", "false", ";", "}", "else", "if", "(", "oldVal", "!=", "ST_WAITING", ")", "{", "throw", "Assert", ".", "unreachableCode", "(", ")", ";", "}", "}", "while", "(", "!", "stateRef", ".", "compareAndSet", "(", "oldVal", ",", "ST_STARTED", ")", ")", ";", "return", "true", ";", "}"], "docstring": "Attempt to determine whether the invocation should proceed or whether it should be cancelled.  This method should only\nbe called once per flag instance.\n\n@return {@code true} if the invocation should proceed, or {@code false} if it was cancelled", "docstring_tokens": ["Attempt", "to", "determine", "whether", "the", "invocation", "should", "proceed", "or", "whether", "it", "should", "be", "cancelled", ".", "This", "method", "should", "only", "be", "called", "once", "per", "flag", "instance", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/component/interceptors/CancellationFlag.java#L90-L102", "partition": "test", "index": 2908, "time": "2017-02-06 19:13:45"}
{"repo": "wildfly/wildfly", "path": "clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/AbstractProtocolResourceDefinition.java", "func_name": "AbstractProtocolResourceDefinition.addTransformations", "original_string": "@SuppressWarnings(\"deprecation\")\n    static void addTransformations(ModelVersion version, ResourceTransformationDescriptionBuilder builder) {\n\n        if (JGroupsModel.VERSION_5_0_0.requiresTransformation(version)) {\n            builder.getAttributeBuilder()\n                    .setDiscard(DiscardAttributeChecker.UNDEFINED, Attribute.STATISTICS_ENABLED.getDefinition())\n                    .addRejectCheck(RejectAttributeChecker.DEFINED, Attribute.STATISTICS_ENABLED.getDefinition())\n                    .end();\n        }\n\n        if (JGroupsModel.VERSION_3_0_0.requiresTransformation(version)) {\n            AttributeConverter typeConverter = new AttributeConverter.DefaultAttributeConverter() {\n                @Override\n                protected void convertAttribute(PathAddress address, String name, ModelNode value, TransformationContext context) {\n                    if (!value.isDefined()) {\n                        value.set(address.getLastElement().getValue());\n                    }\n                }\n            };\n            builder.getAttributeBuilder()\n                    .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(Attribute.MODULE.getDefinition().getDefaultValue()), Attribute.MODULE.getDefinition())\n                    .addRejectCheck(RejectAttributeChecker.DEFINED, Attribute.MODULE.getDefinition())\n                    .setValueConverter(typeConverter, DeprecatedAttribute.TYPE.getDefinition())\n                    .end();\n\n            builder.addRawOperationTransformationOverride(MapOperations.MAP_GET_DEFINITION.getName(), new SimpleOperationTransformer(new LegacyPropertyMapGetOperationTransformer()));\n\n            for (String opName : Operations.getAllWriteAttributeOperationNames()) {\n                builder.addOperationTransformationOverride(opName)\n                        .inheritResourceAttributeDefinitions()\n                        .setCustomOperationTransformer(new LegacyPropertyWriteOperationTransformer());\n            }\n        }\n\n        PropertyResourceDefinition.buildTransformation(version, builder);\n    }", "language": "java", "code": "@SuppressWarnings(\"deprecation\")\n    static void addTransformations(ModelVersion version, ResourceTransformationDescriptionBuilder builder) {\n\n        if (JGroupsModel.VERSION_5_0_0.requiresTransformation(version)) {\n            builder.getAttributeBuilder()\n                    .setDiscard(DiscardAttributeChecker.UNDEFINED, Attribute.STATISTICS_ENABLED.getDefinition())\n                    .addRejectCheck(RejectAttributeChecker.DEFINED, Attribute.STATISTICS_ENABLED.getDefinition())\n                    .end();\n        }\n\n        if (JGroupsModel.VERSION_3_0_0.requiresTransformation(version)) {\n            AttributeConverter typeConverter = new AttributeConverter.DefaultAttributeConverter() {\n                @Override\n                protected void convertAttribute(PathAddress address, String name, ModelNode value, TransformationContext context) {\n                    if (!value.isDefined()) {\n                        value.set(address.getLastElement().getValue());\n                    }\n                }\n            };\n            builder.getAttributeBuilder()\n                    .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(Attribute.MODULE.getDefinition().getDefaultValue()), Attribute.MODULE.getDefinition())\n                    .addRejectCheck(RejectAttributeChecker.DEFINED, Attribute.MODULE.getDefinition())\n                    .setValueConverter(typeConverter, DeprecatedAttribute.TYPE.getDefinition())\n                    .end();\n\n            builder.addRawOperationTransformationOverride(MapOperations.MAP_GET_DEFINITION.getName(), new SimpleOperationTransformer(new LegacyPropertyMapGetOperationTransformer()));\n\n            for (String opName : Operations.getAllWriteAttributeOperationNames()) {\n                builder.addOperationTransformationOverride(opName)\n                        .inheritResourceAttributeDefinitions()\n                        .setCustomOperationTransformer(new LegacyPropertyWriteOperationTransformer());\n            }\n        }\n\n        PropertyResourceDefinition.buildTransformation(version, builder);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"deprecation\"", ")", "static", "void", "addTransformations", "(", "ModelVersion", "version", ",", "ResourceTransformationDescriptionBuilder", "builder", ")", "{", "if", "(", "JGroupsModel", ".", "VERSION_5_0_0", ".", "requiresTransformation", "(", "version", ")", ")", "{", "builder", ".", "getAttributeBuilder", "(", ")", ".", "setDiscard", "(", "DiscardAttributeChecker", ".", "UNDEFINED", ",", "Attribute", ".", "STATISTICS_ENABLED", ".", "getDefinition", "(", ")", ")", ".", "addRejectCheck", "(", "RejectAttributeChecker", ".", "DEFINED", ",", "Attribute", ".", "STATISTICS_ENABLED", ".", "getDefinition", "(", ")", ")", ".", "end", "(", ")", ";", "}", "if", "(", "JGroupsModel", ".", "VERSION_3_0_0", ".", "requiresTransformation", "(", "version", ")", ")", "{", "AttributeConverter", "typeConverter", "=", "new", "AttributeConverter", ".", "DefaultAttributeConverter", "(", ")", "{", "@", "Override", "protected", "void", "convertAttribute", "(", "PathAddress", "address", ",", "String", "name", ",", "ModelNode", "value", ",", "TransformationContext", "context", ")", "{", "if", "(", "!", "value", ".", "isDefined", "(", ")", ")", "{", "value", ".", "set", "(", "address", ".", "getLastElement", "(", ")", ".", "getValue", "(", ")", ")", ";", "}", "}", "}", ";", "builder", ".", "getAttributeBuilder", "(", ")", ".", "setDiscard", "(", "new", "DiscardAttributeChecker", ".", "DiscardAttributeValueChecker", "(", "Attribute", ".", "MODULE", ".", "getDefinition", "(", ")", ".", "getDefaultValue", "(", ")", ")", ",", "Attribute", ".", "MODULE", ".", "getDefinition", "(", ")", ")", ".", "addRejectCheck", "(", "RejectAttributeChecker", ".", "DEFINED", ",", "Attribute", ".", "MODULE", ".", "getDefinition", "(", ")", ")", ".", "setValueConverter", "(", "typeConverter", ",", "DeprecatedAttribute", ".", "TYPE", ".", "getDefinition", "(", ")", ")", ".", "end", "(", ")", ";", "builder", ".", "addRawOperationTransformationOverride", "(", "MapOperations", ".", "MAP_GET_DEFINITION", ".", "getName", "(", ")", ",", "new", "SimpleOperationTransformer", "(", "new", "LegacyPropertyMapGetOperationTransformer", "(", ")", ")", ")", ";", "for", "(", "String", "opName", ":", "Operations", ".", "getAllWriteAttributeOperationNames", "(", ")", ")", "{", "builder", ".", "addOperationTransformationOverride", "(", "opName", ")", ".", "inheritResourceAttributeDefinitions", "(", ")", ".", "setCustomOperationTransformer", "(", "new", "LegacyPropertyWriteOperationTransformer", "(", ")", ")", ";", "}", "}", "PropertyResourceDefinition", ".", "buildTransformation", "(", "version", ",", "builder", ")", ";", "}"], "docstring": "Builds transformations common to both stack protocols and transport.", "docstring_tokens": ["Builds", "transformations", "common", "to", "both", "stack", "protocols", "and", "transport", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/AbstractProtocolResourceDefinition.java#L127-L162", "partition": "test", "index": 2782, "time": "2017-02-13 16:58:18"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java", "func_name": "EJBSuspendHandlerService.transactionCreated", "original_string": "@Override public void transactionCreated(AbstractTransaction transaction, CreatedBy createdBy) {\n        activeTransactionCountUpdater.incrementAndGet(this);\n        try {\n            transaction.registerSynchronization(this);\n        } catch (RollbackException | IllegalStateException e) {\n            // it means the transaction is marked for rollback, or is prepared for commit, at this point we cannot register synchronization\n            decrementTransactionCount();\n        } catch (SystemException e) {\n            decrementTransactionCount();\n            EjbLogger.ROOT_LOGGER.debug(\"Unexpected exception\", e);\n            throw new RuntimeException(e);\n        }\n    }", "language": "java", "code": "@Override public void transactionCreated(AbstractTransaction transaction, CreatedBy createdBy) {\n        activeTransactionCountUpdater.incrementAndGet(this);\n        try {\n            transaction.registerSynchronization(this);\n        } catch (RollbackException | IllegalStateException e) {\n            // it means the transaction is marked for rollback, or is prepared for commit, at this point we cannot register synchronization\n            decrementTransactionCount();\n        } catch (SystemException e) {\n            decrementTransactionCount();\n            EjbLogger.ROOT_LOGGER.debug(\"Unexpected exception\", e);\n            throw new RuntimeException(e);\n        }\n    }", "code_tokens": ["@", "Override", "public", "void", "transactionCreated", "(", "AbstractTransaction", "transaction", ",", "CreatedBy", "createdBy", ")", "{", "activeTransactionCountUpdater", ".", "incrementAndGet", "(", "this", ")", ";", "try", "{", "transaction", ".", "registerSynchronization", "(", "this", ")", ";", "}", "catch", "(", "RollbackException", "|", "IllegalStateException", "e", ")", "{", "// it means the transaction is marked for rollback, or is prepared for commit, at this point we cannot register synchronization", "decrementTransactionCount", "(", ")", ";", "}", "catch", "(", "SystemException", "e", ")", "{", "decrementTransactionCount", "(", ")", ";", "EjbLogger", ".", "ROOT_LOGGER", ".", "debug", "(", "\"Unexpected exception\"", ",", "e", ")", ";", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "}"], "docstring": "Notifies handler that a new transaction has been created.", "docstring_tokens": ["Notifies", "handler", "that", "a", "new", "transaction", "has", "been", "created", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java#L276-L288", "partition": "test", "index": 2588, "time": "2017-02-14 22:37:03"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java", "func_name": "EJBSuspendHandlerService.resume", "original_string": "@Override public void resume() {\n        this.suspended = false;\n        localTransactionContextInjectedValue.getValue().resumeRequests();\n        ServerActivityCallback listener = listenerUpdater.get(this);\n        if (listener != null) {\n            listenerUpdater.compareAndSet(this, listener, null);\n        }\n        deploymentRepositoryInjectedValue.getValue().resume();\n    }", "language": "java", "code": "@Override public void resume() {\n        this.suspended = false;\n        localTransactionContextInjectedValue.getValue().resumeRequests();\n        ServerActivityCallback listener = listenerUpdater.get(this);\n        if (listener != null) {\n            listenerUpdater.compareAndSet(this, listener, null);\n        }\n        deploymentRepositoryInjectedValue.getValue().resume();\n    }", "code_tokens": ["@", "Override", "public", "void", "resume", "(", ")", "{", "this", ".", "suspended", "=", "false", ";", "localTransactionContextInjectedValue", ".", "getValue", "(", ")", ".", "resumeRequests", "(", ")", ";", "ServerActivityCallback", "listener", "=", "listenerUpdater", ".", "get", "(", "this", ")", ";", "if", "(", "listener", "!=", "null", ")", "{", "listenerUpdater", ".", "compareAndSet", "(", "this", ",", "listener", ",", "null", ")", ";", "}", "deploymentRepositoryInjectedValue", ".", "getValue", "(", ")", ".", "resume", "(", ")", ";", "}"], "docstring": "Notifies local transaction context that server is resumed, and restarts deployment controller.", "docstring_tokens": ["Notifies", "local", "transaction", "context", "that", "server", "is", "resumed", "and", "restarts", "deployment", "controller", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java#L225-L233", "partition": "test", "index": 2586, "time": "2017-02-14 22:37:03"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java", "func_name": "EJBSuspendHandlerService.suspended", "original_string": "@Override public void suspended(ServerActivityCallback listener) {\n        this.suspended = true;\n        listenerUpdater.set(this, listener);\n        localTransactionContextInjectedValue.getValue().suspendRequests();\n\n        final int activeInvocationCount = activeInvocationCountUpdater.get(this);\n        if (activeInvocationCount == 0) {\n            if (gracefulTxnShutdown) {\n                if (activeTransactionCountUpdater.get(this) == 0) {\n                    this.doneSuspended();\n                } else {\n                    EjbLogger.ROOT_LOGGER.suspensionWaitingActiveTransactions(activeInvocationCount);\n                }\n            } else {\n                this.doneSuspended();\n            }\n        }\n    }", "language": "java", "code": "@Override public void suspended(ServerActivityCallback listener) {\n        this.suspended = true;\n        listenerUpdater.set(this, listener);\n        localTransactionContextInjectedValue.getValue().suspendRequests();\n\n        final int activeInvocationCount = activeInvocationCountUpdater.get(this);\n        if (activeInvocationCount == 0) {\n            if (gracefulTxnShutdown) {\n                if (activeTransactionCountUpdater.get(this) == 0) {\n                    this.doneSuspended();\n                } else {\n                    EjbLogger.ROOT_LOGGER.suspensionWaitingActiveTransactions(activeInvocationCount);\n                }\n            } else {\n                this.doneSuspended();\n            }\n        }\n    }", "code_tokens": ["@", "Override", "public", "void", "suspended", "(", "ServerActivityCallback", "listener", ")", "{", "this", ".", "suspended", "=", "true", ";", "listenerUpdater", ".", "set", "(", "this", ",", "listener", ")", ";", "localTransactionContextInjectedValue", ".", "getValue", "(", ")", ".", "suspendRequests", "(", ")", ";", "final", "int", "activeInvocationCount", "=", "activeInvocationCountUpdater", ".", "get", "(", "this", ")", ";", "if", "(", "activeInvocationCount", "==", "0", ")", "{", "if", "(", "gracefulTxnShutdown", ")", "{", "if", "(", "activeTransactionCountUpdater", ".", "get", "(", "this", ")", "==", "0", ")", "{", "this", ".", "doneSuspended", "(", ")", ";", "}", "else", "{", "EjbLogger", ".", "ROOT_LOGGER", ".", "suspensionWaitingActiveTransactions", "(", "activeInvocationCount", ")", ";", "}", "}", "else", "{", "this", ".", "doneSuspended", "(", ")", ";", "}", "}", "}"], "docstring": "Notifies local transaction context that server is suspended, and only completes suspension if\nthere are no active invocations nor transactions.\n\n@param listener callback listener", "docstring_tokens": ["Notifies", "local", "transaction", "context", "that", "server", "is", "suspended", "and", "only", "completes", "suspension", "if", "there", "are", "no", "active", "invocations", "nor", "transactions", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java#L203-L220", "partition": "test", "index": 2585, "time": "2017-02-14 22:37:03"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java", "func_name": "EJBSuspendHandlerService.start", "original_string": "public void start(StartContext context) {\n        final SuspendController suspendController = suspendControllerInjectedValue.getValue();\n        suspendController.registerActivity(this);\n        final LocalTransactionContext localTransactionContext = localTransactionContextInjectedValue.getValue();\n        localTransactionContext.registerCreationListener(this);\n    }", "language": "java", "code": "public void start(StartContext context) {\n        final SuspendController suspendController = suspendControllerInjectedValue.getValue();\n        suspendController.registerActivity(this);\n        final LocalTransactionContext localTransactionContext = localTransactionContextInjectedValue.getValue();\n        localTransactionContext.registerCreationListener(this);\n    }", "code_tokens": ["public", "void", "start", "(", "StartContext", "context", ")", "{", "final", "SuspendController", "suspendController", "=", "suspendControllerInjectedValue", ".", "getValue", "(", ")", ";", "suspendController", ".", "registerActivity", "(", "this", ")", ";", "final", "LocalTransactionContext", "localTransactionContext", "=", "localTransactionContextInjectedValue", ".", "getValue", "(", ")", ";", "localTransactionContext", ".", "registerCreationListener", "(", "this", ")", ";", "}"], "docstring": "Starts the service. Registers server activity, sets transaction listener on local transaction context, and creates and\ninstalls deployment controller service.\n\n@param context start context", "docstring_tokens": ["Starts", "the", "service", ".", "Registers", "server", "activity", "sets", "transaction", "listener", "on", "local", "transaction", "context", "and", "creates", "and", "installs", "deployment", "controller", "service", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java#L171-L176", "partition": "test", "index": 2583, "time": "2017-02-14 22:37:03"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java", "func_name": "EJBSuspendHandlerService.stop", "original_string": "public void stop(StopContext context) {\n        final SuspendController suspendController = suspendControllerInjectedValue.getValue();\n        suspendController.unRegisterActivity(this);\n        final LocalTransactionContext localTransactionContext = localTransactionContextInjectedValue.getValue();\n        localTransactionContext.removeCreationListener(this);\n    }", "language": "java", "code": "public void stop(StopContext context) {\n        final SuspendController suspendController = suspendControllerInjectedValue.getValue();\n        suspendController.unRegisterActivity(this);\n        final LocalTransactionContext localTransactionContext = localTransactionContextInjectedValue.getValue();\n        localTransactionContext.removeCreationListener(this);\n    }", "code_tokens": ["public", "void", "stop", "(", "StopContext", "context", ")", "{", "final", "SuspendController", "suspendController", "=", "suspendControllerInjectedValue", ".", "getValue", "(", ")", ";", "suspendController", ".", "unRegisterActivity", "(", "this", ")", ";", "final", "LocalTransactionContext", "localTransactionContext", "=", "localTransactionContextInjectedValue", ".", "getValue", "(", ")", ";", "localTransactionContext", ".", "removeCreationListener", "(", "this", ")", ";", "}"], "docstring": "Stops the service. Unregisters service activity and clears transaction listener.\n@param context stop context", "docstring_tokens": ["Stops", "the", "service", ".", "Unregisters", "service", "activity", "and", "clears", "transaction", "listener", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java#L182-L187", "partition": "test", "index": 2584, "time": "2017-02-14 22:37:03"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java", "func_name": "EJBSuspendHandlerService.invocationComplete", "original_string": "public void invocationComplete() {\n        int activeInvocations = activeInvocationCountUpdater.decrementAndGet(this);\n        if (suspended && activeInvocations == 0 && (!gracefulTxnShutdown || (activeTransactionCountUpdater.get(this) == 0))) {\n            doneSuspended();\n        }\n    }", "language": "java", "code": "public void invocationComplete() {\n        int activeInvocations = activeInvocationCountUpdater.decrementAndGet(this);\n        if (suspended && activeInvocations == 0 && (!gracefulTxnShutdown || (activeTransactionCountUpdater.get(this) == 0))) {\n            doneSuspended();\n        }\n    }", "code_tokens": ["public", "void", "invocationComplete", "(", ")", "{", "int", "activeInvocations", "=", "activeInvocationCountUpdater", ".", "decrementAndGet", "(", "this", ")", ";", "if", "(", "suspended", "&&", "activeInvocations", "==", "0", "&&", "(", "!", "gracefulTxnShutdown", "||", "(", "activeTransactionCountUpdater", ".", "get", "(", "this", ")", "==", "0", ")", ")", ")", "{", "doneSuspended", "(", ")", ";", "}", "}"], "docstring": "Notifies handler that an active invocation is complete.", "docstring_tokens": ["Notifies", "handler", "that", "an", "active", "invocation", "is", "complete", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/suspend/EJBSuspendHandlerService.java#L266-L271", "partition": "test", "index": 2587, "time": "2017-02-14 22:37:03"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/security/AuditNotificationReceiver.java", "func_name": "AuditNotificationReceiver.deriveUsefulInfo", "original_string": "private static String deriveUsefulInfo(HttpServletRequest httpRequest) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\").append(httpRequest.getContextPath());\n        sb.append(\":cookies=\").append(Arrays.toString(httpRequest.getCookies())).append(\":headers=\");\n        // Append Header information\n        Enumeration<?> en = httpRequest.getHeaderNames();\n        while (en.hasMoreElements()) {\n            String headerName = (String) en.nextElement();\n            sb.append(headerName).append(\"=\");\n            // Ensure HTTP Basic Password is not logged\n            if (!headerName.contains(\"authorization\")) { sb.append(httpRequest.getHeader(headerName)).append(\",\"); }\n        }\n        sb.append(\"]\");\n        // Append Request parameter information\n        sb.append(\"[parameters=\");\n        Enumeration<?> enparam = httpRequest.getParameterNames();\n        while (enparam.hasMoreElements()) {\n            String paramName = (String) enparam.nextElement();\n            String[] paramValues = httpRequest.getParameterValues(paramName);\n            int len = paramValues != null ? paramValues.length : 0;\n            for (int i = 0; i < len; i++) { sb.append(paramValues[i]).append(\"::\"); }\n            sb.append(\",\");\n        }\n        sb.append(\"][attributes=\");\n        // Append Request attribute information\n        Enumeration<?> enu = httpRequest.getAttributeNames();\n        while (enu.hasMoreElements()) {\n            String attrName = (String) enu.nextElement();\n            sb.append(attrName).append(\"=\");\n            sb.append(httpRequest.getAttribute(attrName)).append(\",\");\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }", "language": "java", "code": "private static String deriveUsefulInfo(HttpServletRequest httpRequest) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\").append(httpRequest.getContextPath());\n        sb.append(\":cookies=\").append(Arrays.toString(httpRequest.getCookies())).append(\":headers=\");\n        // Append Header information\n        Enumeration<?> en = httpRequest.getHeaderNames();\n        while (en.hasMoreElements()) {\n            String headerName = (String) en.nextElement();\n            sb.append(headerName).append(\"=\");\n            // Ensure HTTP Basic Password is not logged\n            if (!headerName.contains(\"authorization\")) { sb.append(httpRequest.getHeader(headerName)).append(\",\"); }\n        }\n        sb.append(\"]\");\n        // Append Request parameter information\n        sb.append(\"[parameters=\");\n        Enumeration<?> enparam = httpRequest.getParameterNames();\n        while (enparam.hasMoreElements()) {\n            String paramName = (String) enparam.nextElement();\n            String[] paramValues = httpRequest.getParameterValues(paramName);\n            int len = paramValues != null ? paramValues.length : 0;\n            for (int i = 0; i < len; i++) { sb.append(paramValues[i]).append(\"::\"); }\n            sb.append(\",\");\n        }\n        sb.append(\"][attributes=\");\n        // Append Request attribute information\n        Enumeration<?> enu = httpRequest.getAttributeNames();\n        while (enu.hasMoreElements()) {\n            String attrName = (String) enu.nextElement();\n            sb.append(attrName).append(\"=\");\n            sb.append(httpRequest.getAttribute(attrName)).append(\",\");\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }", "code_tokens": ["private", "static", "String", "deriveUsefulInfo", "(", "HttpServletRequest", "httpRequest", ")", "{", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "sb", ".", "append", "(", "\"[\"", ")", ".", "append", "(", "httpRequest", ".", "getContextPath", "(", ")", ")", ";", "sb", ".", "append", "(", "\":cookies=\"", ")", ".", "append", "(", "Arrays", ".", "toString", "(", "httpRequest", ".", "getCookies", "(", ")", ")", ")", ".", "append", "(", "\":headers=\"", ")", ";", "// Append Header information", "Enumeration", "<", "?", ">", "en", "=", "httpRequest", ".", "getHeaderNames", "(", ")", ";", "while", "(", "en", ".", "hasMoreElements", "(", ")", ")", "{", "String", "headerName", "=", "(", "String", ")", "en", ".", "nextElement", "(", ")", ";", "sb", ".", "append", "(", "headerName", ")", ".", "append", "(", "\"=\"", ")", ";", "// Ensure HTTP Basic Password is not logged", "if", "(", "!", "headerName", ".", "contains", "(", "\"authorization\"", ")", ")", "{", "sb", ".", "append", "(", "httpRequest", ".", "getHeader", "(", "headerName", ")", ")", ".", "append", "(", "\",\"", ")", ";", "}", "}", "sb", ".", "append", "(", "\"]\"", ")", ";", "// Append Request parameter information", "sb", ".", "append", "(", "\"[parameters=\"", ")", ";", "Enumeration", "<", "?", ">", "enparam", "=", "httpRequest", ".", "getParameterNames", "(", ")", ";", "while", "(", "enparam", ".", "hasMoreElements", "(", ")", ")", "{", "String", "paramName", "=", "(", "String", ")", "enparam", ".", "nextElement", "(", ")", ";", "String", "[", "]", "paramValues", "=", "httpRequest", ".", "getParameterValues", "(", "paramName", ")", ";", "int", "len", "=", "paramValues", "!=", "null", "?", "paramValues", ".", "length", ":", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "len", ";", "i", "++", ")", "{", "sb", ".", "append", "(", "paramValues", "[", "i", "]", ")", ".", "append", "(", "\"::\"", ")", ";", "}", "sb", ".", "append", "(", "\",\"", ")", ";", "}", "sb", ".", "append", "(", "\"][attributes=\"", ")", ";", "// Append Request attribute information", "Enumeration", "<", "?", ">", "enu", "=", "httpRequest", ".", "getAttributeNames", "(", ")", ";", "while", "(", "enu", ".", "hasMoreElements", "(", ")", ")", "{", "String", "attrName", "=", "(", "String", ")", "enu", ".", "nextElement", "(", ")", ";", "sb", ".", "append", "(", "attrName", ")", ".", "append", "(", "\"=\"", ")", ";", "sb", ".", "append", "(", "httpRequest", ".", "getAttribute", "(", "attrName", ")", ")", ".", "append", "(", "\",\"", ")", ";", "}", "sb", ".", "append", "(", "\"]\"", ")", ";", "return", "sb", ".", "toString", "(", ")", ";", "}"], "docstring": "Obtain debug information from the servlet request object\n\n@param httpRequest\n@return", "docstring_tokens": ["Obtain", "debug", "information", "from", "the", "servlet", "request", "object"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/security/AuditNotificationReceiver.java#L86-L119", "partition": "test", "index": 2513, "time": "2017-03-30 11:14:36"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java", "func_name": "DatabaseTimerPersistence.stringAsSchedulerDate", "original_string": "private Date stringAsSchedulerDate(final String date, final String timerId) {\n        if (date == null) {\n            return null;\n        }\n        try {\n            return new SimpleDateFormat(SCHEDULER_DATE_FORMAT).parse(date);\n        } catch (ParseException e) {\n            EjbLogger.EJB3_TIMER_LOGGER.scheduleExpressionDateFromTimerPersistenceInvalid(timerId, e.getMessage());\n            return null;\n        }\n    }", "language": "java", "code": "private Date stringAsSchedulerDate(final String date, final String timerId) {\n        if (date == null) {\n            return null;\n        }\n        try {\n            return new SimpleDateFormat(SCHEDULER_DATE_FORMAT).parse(date);\n        } catch (ParseException e) {\n            EjbLogger.EJB3_TIMER_LOGGER.scheduleExpressionDateFromTimerPersistenceInvalid(timerId, e.getMessage());\n            return null;\n        }\n    }", "code_tokens": ["private", "Date", "stringAsSchedulerDate", "(", "final", "String", "date", ",", "final", "String", "timerId", ")", "{", "if", "(", "date", "==", "null", ")", "{", "return", "null", ";", "}", "try", "{", "return", "new", "SimpleDateFormat", "(", "SCHEDULER_DATE_FORMAT", ")", ".", "parse", "(", "date", ")", ";", "}", "catch", "(", "ParseException", "e", ")", "{", "EjbLogger", ".", "EJB3_TIMER_LOGGER", ".", "scheduleExpressionDateFromTimerPersistenceInvalid", "(", "timerId", ",", "e", ".", "getMessage", "(", ")", ")", ";", "return", "null", ";", "}", "}"], "docstring": "Convert the stored date-string from database back to Date", "docstring_tokens": ["Convert", "the", "stored", "date", "-", "string", "from", "database", "back", "to", "Date"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/database/DatabaseTimerPersistence.java#L706-L716", "partition": "test", "index": 2613, "time": "2017-07-06 17:53:54"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/injection/TransactedJMSContext.java", "func_name": "TransactedJMSContext.registerCleanUpListener", "original_string": "void registerCleanUpListener(TransactionSynchronizationRegistry transactionSynchronizationRegistry, JMSContext contextInstance) {\n        //to avoid registration of more listeners for one context, flag in transaction is used.\n        Object alreadyRegistered = transactionSynchronizationRegistry.getResource(contextInstance);\n        if (alreadyRegistered == null) {\n            transactionSynchronizationRegistry.registerInterposedSynchronization(new AfterCompletionSynchronization(contextInstance));\n            transactionSynchronizationRegistry.putResource(contextInstance, AfterCompletionSynchronization.class.getName());\n        }\n    }", "language": "java", "code": "void registerCleanUpListener(TransactionSynchronizationRegistry transactionSynchronizationRegistry, JMSContext contextInstance) {\n        //to avoid registration of more listeners for one context, flag in transaction is used.\n        Object alreadyRegistered = transactionSynchronizationRegistry.getResource(contextInstance);\n        if (alreadyRegistered == null) {\n            transactionSynchronizationRegistry.registerInterposedSynchronization(new AfterCompletionSynchronization(contextInstance));\n            transactionSynchronizationRegistry.putResource(contextInstance, AfterCompletionSynchronization.class.getName());\n        }\n    }", "code_tokens": ["void", "registerCleanUpListener", "(", "TransactionSynchronizationRegistry", "transactionSynchronizationRegistry", ",", "JMSContext", "contextInstance", ")", "{", "//to avoid registration of more listeners for one context, flag in transaction is used.", "Object", "alreadyRegistered", "=", "transactionSynchronizationRegistry", ".", "getResource", "(", "contextInstance", ")", ";", "if", "(", "alreadyRegistered", "==", "null", ")", "{", "transactionSynchronizationRegistry", ".", "registerInterposedSynchronization", "(", "new", "AfterCompletionSynchronization", "(", "contextInstance", ")", ")", ";", "transactionSynchronizationRegistry", ".", "putResource", "(", "contextInstance", ",", "AfterCompletionSynchronization", ".", "class", ".", "getName", "(", ")", ")", ";", "}", "}"], "docstring": "Closing of transaction scoped JMSContext is executed through Synchronization listener.\nThis method registers listener, which takes care of closing JMSContext.\n\n@param transactionSynchronizationRegistry\n@param contextInstance", "docstring_tokens": ["Closing", "of", "transaction", "scoped", "JMSContext", "is", "executed", "through", "Synchronization", "listener", ".", "This", "method", "registers", "listener", "which", "takes", "care", "of", "closing", "JMSContext", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/injection/TransactedJMSContext.java#L47-L54", "partition": "test", "index": 2682, "time": "2017-10-31 11:04:35"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/ApplicableMethodInformation.java", "func_name": "ApplicableMethodInformation.isMethodLevel", "original_string": "public boolean isMethodLevel(MethodIntf methodIntf, Method method, MethodIntf defaultMethodIntf) {\n        assert methodIntf != null : \"methodIntf is null\";\n        assert method != null : \"method is null\";\n\n        Method classMethod = resolveRealMethod(method);\n        String[] methodParams = MethodInfoHelper.getCanonicalParameterTypes(classMethod);\n        final String methodName = classMethod.getName();\n        final String className = classMethod.getDeclaringClass().getName();\n\n        ArrayKey methodParamsKey = new ArrayKey((Object[]) methodParams);\n        T attr = get(get(get(perViewStyle3, methodIntf), methodName), methodParamsKey);\n        if (attr != null)\n            return true;\n        attr = get(get(perViewStyle2, methodIntf), methodName);\n        if (attr != null)\n            return true;\n        attr = get(perViewStyle1, methodIntf);\n        if (attr != null)\n            return false;\n        attr = get(get(get(style3, className), methodName), methodParamsKey);\n        if (attr != null)\n            return true;\n        attr = get(style2, methodName);\n        if (attr != null)\n            return true;\n        attr = get(style1, className);\n        if (attr != null)\n            return false;\n        if(defaultMethodIntf == null) {\n            return false;\n        } else {\n            return isMethodLevel(defaultMethodIntf, method, null);\n        }\n    }", "language": "java", "code": "public boolean isMethodLevel(MethodIntf methodIntf, Method method, MethodIntf defaultMethodIntf) {\n        assert methodIntf != null : \"methodIntf is null\";\n        assert method != null : \"method is null\";\n\n        Method classMethod = resolveRealMethod(method);\n        String[] methodParams = MethodInfoHelper.getCanonicalParameterTypes(classMethod);\n        final String methodName = classMethod.getName();\n        final String className = classMethod.getDeclaringClass().getName();\n\n        ArrayKey methodParamsKey = new ArrayKey((Object[]) methodParams);\n        T attr = get(get(get(perViewStyle3, methodIntf), methodName), methodParamsKey);\n        if (attr != null)\n            return true;\n        attr = get(get(perViewStyle2, methodIntf), methodName);\n        if (attr != null)\n            return true;\n        attr = get(perViewStyle1, methodIntf);\n        if (attr != null)\n            return false;\n        attr = get(get(get(style3, className), methodName), methodParamsKey);\n        if (attr != null)\n            return true;\n        attr = get(style2, methodName);\n        if (attr != null)\n            return true;\n        attr = get(style1, className);\n        if (attr != null)\n            return false;\n        if(defaultMethodIntf == null) {\n            return false;\n        } else {\n            return isMethodLevel(defaultMethodIntf, method, null);\n        }\n    }", "code_tokens": ["public", "boolean", "isMethodLevel", "(", "MethodIntf", "methodIntf", ",", "Method", "method", ",", "MethodIntf", "defaultMethodIntf", ")", "{", "assert", "methodIntf", "!=", "null", ":", "\"methodIntf is null\"", ";", "assert", "method", "!=", "null", ":", "\"method is null\"", ";", "Method", "classMethod", "=", "resolveRealMethod", "(", "method", ")", ";", "String", "[", "]", "methodParams", "=", "MethodInfoHelper", ".", "getCanonicalParameterTypes", "(", "classMethod", ")", ";", "final", "String", "methodName", "=", "classMethod", ".", "getName", "(", ")", ";", "final", "String", "className", "=", "classMethod", ".", "getDeclaringClass", "(", ")", ".", "getName", "(", ")", ";", "ArrayKey", "methodParamsKey", "=", "new", "ArrayKey", "(", "(", "Object", "[", "]", ")", "methodParams", ")", ";", "T", "attr", "=", "get", "(", "get", "(", "get", "(", "perViewStyle3", ",", "methodIntf", ")", ",", "methodName", ")", ",", "methodParamsKey", ")", ";", "if", "(", "attr", "!=", "null", ")", "return", "true", ";", "attr", "=", "get", "(", "get", "(", "perViewStyle2", ",", "methodIntf", ")", ",", "methodName", ")", ";", "if", "(", "attr", "!=", "null", ")", "return", "true", ";", "attr", "=", "get", "(", "perViewStyle1", ",", "methodIntf", ")", ";", "if", "(", "attr", "!=", "null", ")", "return", "false", ";", "attr", "=", "get", "(", "get", "(", "get", "(", "style3", ",", "className", ")", ",", "methodName", ")", ",", "methodParamsKey", ")", ";", "if", "(", "attr", "!=", "null", ")", "return", "true", ";", "attr", "=", "get", "(", "style2", ",", "methodName", ")", ";", "if", "(", "attr", "!=", "null", ")", "return", "true", ";", "attr", "=", "get", "(", "style1", ",", "className", ")", ";", "if", "(", "attr", "!=", "null", ")", "return", "false", ";", "if", "(", "defaultMethodIntf", "==", "null", ")", "{", "return", "false", ";", "}", "else", "{", "return", "isMethodLevel", "(", "defaultMethodIntf", ",", "method", ",", "null", ")", ";", "}", "}"], "docstring": "Returns true if the given transaction specification was expliitly specified at a method level, returns\nfalse if it was inherited from the default", "docstring_tokens": ["Returns", "true", "if", "the", "given", "transaction", "specification", "was", "expliitly", "specified", "at", "a", "method", "level", "returns", "false", "if", "it", "was", "inherited", "from", "the", "default"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/deployment/ApplicableMethodInformation.java#L326-L359", "partition": "test", "index": 2695, "time": "2017-11-02 10:42:10"}
{"repo": "wildfly/wildfly", "path": "xts/src/main/java/org/jboss/as/xts/XTSSubsystemParser.java", "func_name": "XTSSubsystemParser.processAttributes", "original_string": "private void processAttributes(final XMLExtendedStreamReader reader, AttributeProcessor<Integer, Attribute> attributeProcessorCallback) throws XMLStreamException {\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i++) {\n            ParseUtils.requireNoNamespaceAttribute(reader, i);\n            // final String value = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            attributeProcessorCallback.process(i, attribute);\n        }\n    }", "language": "java", "code": "private void processAttributes(final XMLExtendedStreamReader reader, AttributeProcessor<Integer, Attribute> attributeProcessorCallback) throws XMLStreamException {\n        final int count = reader.getAttributeCount();\n        for (int i = 0; i < count; i++) {\n            ParseUtils.requireNoNamespaceAttribute(reader, i);\n            // final String value = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            attributeProcessorCallback.process(i, attribute);\n        }\n    }", "code_tokens": ["private", "void", "processAttributes", "(", "final", "XMLExtendedStreamReader", "reader", ",", "AttributeProcessor", "<", "Integer", ",", "Attribute", ">", "attributeProcessorCallback", ")", "throws", "XMLStreamException", "{", "final", "int", "count", "=", "reader", ".", "getAttributeCount", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "count", ";", "i", "++", ")", "{", "ParseUtils", ".", "requireNoNamespaceAttribute", "(", "reader", ",", "i", ")", ";", "// final String value = reader.getAttributeValue(i);", "final", "Attribute", "attribute", "=", "Attribute", ".", "forName", "(", "reader", ".", "getAttributeLocalName", "(", "i", ")", ")", ";", "attributeProcessorCallback", ".", "process", "(", "i", ",", "attribute", ")", ";", "}", "}"], "docstring": "Iterating over all attributes got from the reader parameter.\n\n@param reader  reading the parameters from\n@param attributeProcessorCallback  callback being processed for each attribute\n@throws XMLStreamException troubles parsing xml", "docstring_tokens": ["Iterating", "over", "all", "attributes", "got", "from", "the", "reader", "parameter", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/xts/src/main/java/org/jboss/as/xts/XTSSubsystemParser.java#L267-L275", "partition": "test", "index": 2758, "time": "2018-04-13 10:29:16"}
{"repo": "wildfly/wildfly", "path": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/CalendarTimer.java", "func_name": "CalendarTimer.handleRestorationCalculation", "original_string": "public void handleRestorationCalculation() {\n        if(nextExpiration == null) {\n            return;\n        }\n        //next expiration in the future, we don't care\n        if(nextExpiration.getTime() >= System.currentTimeMillis()) {\n            return;\n        }\n        //just set the next expiration to 1ms in the past\n        //this means it will run to catch up the missed expiration\n        //and then the next calculated expiration will be in the future\n        nextExpiration = new Date(System.currentTimeMillis() - 1);\n    }", "language": "java", "code": "public void handleRestorationCalculation() {\n        if(nextExpiration == null) {\n            return;\n        }\n        //next expiration in the future, we don't care\n        if(nextExpiration.getTime() >= System.currentTimeMillis()) {\n            return;\n        }\n        //just set the next expiration to 1ms in the past\n        //this means it will run to catch up the missed expiration\n        //and then the next calculated expiration will be in the future\n        nextExpiration = new Date(System.currentTimeMillis() - 1);\n    }", "code_tokens": ["public", "void", "handleRestorationCalculation", "(", ")", "{", "if", "(", "nextExpiration", "==", "null", ")", "{", "return", ";", "}", "//next expiration in the future, we don't care", "if", "(", "nextExpiration", ".", "getTime", "(", ")", ">=", "System", ".", "currentTimeMillis", "(", ")", ")", "{", "return", ";", "}", "//just set the next expiration to 1ms in the past", "//this means it will run to catch up the missed expiration", "//and then the next calculated expiration will be in the future", "nextExpiration", "=", "new", "Date", "(", "System", ".", "currentTimeMillis", "(", ")", "-", "1", ")", ";", "}"], "docstring": "Makes sure that the timer is only run once after being restored.", "docstring_tokens": ["Makes", "sure", "that", "the", "timer", "is", "only", "run", "once", "after", "being", "restored", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/ejb3/src/main/java/org/jboss/as/ejb3/timerservice/CalendarTimer.java#L203-L215", "partition": "test", "index": 2475, "time": "2018-05-23 07:40:02"}
{"repo": "wildfly/wildfly", "path": "undertow/src/main/java/org/wildfly/extension/undertow/UndertowSubsystemParser_7_0.java", "func_name": "UndertowSubsystemParser_7_0.listenerBuilder", "original_string": "private static PersistentResourceXMLDescription.PersistentResourceXMLBuilder listenerBuilder(PersistentResourceDefinition resource) {\n        return builder(resource.getPathElement())\n                // xsd socket-optionsType\n                .addAttributes(\n                        ListenerResourceDefinition.RECEIVE_BUFFER,\n                        ListenerResourceDefinition.SEND_BUFFER,\n                        ListenerResourceDefinition.BACKLOG,\n                        ListenerResourceDefinition.KEEP_ALIVE,\n                        ListenerResourceDefinition.READ_TIMEOUT,\n                        ListenerResourceDefinition.WRITE_TIMEOUT,\n                        ListenerResourceDefinition.MAX_CONNECTIONS)\n                // xsd listener-type\n                .addAttributes(\n                        ListenerResourceDefinition.SOCKET_BINDING,\n                        ListenerResourceDefinition.WORKER,\n                        ListenerResourceDefinition.BUFFER_POOL,\n                        ListenerResourceDefinition.ENABLED,\n                        ListenerResourceDefinition.RESOLVE_PEER_ADDRESS,\n                        ListenerResourceDefinition.MAX_ENTITY_SIZE,\n                        ListenerResourceDefinition.BUFFER_PIPELINED_DATA,\n                        ListenerResourceDefinition.MAX_HEADER_SIZE,\n                        ListenerResourceDefinition.MAX_PARAMETERS,\n                        ListenerResourceDefinition.MAX_HEADERS,\n                        ListenerResourceDefinition.MAX_COOKIES,\n                        ListenerResourceDefinition.ALLOW_ENCODED_SLASH,\n                        ListenerResourceDefinition.DECODE_URL,\n                        ListenerResourceDefinition.URL_CHARSET,\n                        ListenerResourceDefinition.ALWAYS_SET_KEEP_ALIVE,\n                        ListenerResourceDefinition.MAX_BUFFERED_REQUEST_SIZE,\n                        ListenerResourceDefinition.RECORD_REQUEST_START_TIME,\n                        ListenerResourceDefinition.ALLOW_EQUALS_IN_COOKIE_VALUE,\n                        ListenerResourceDefinition.NO_REQUEST_TIMEOUT,\n                        ListenerResourceDefinition.REQUEST_PARSE_TIMEOUT,\n                        ListenerResourceDefinition.DISALLOWED_METHODS,\n                        ListenerResourceDefinition.SECURE,\n                        ListenerResourceDefinition.RFC6265_COOKIE_VALIDATION,\n                        ListenerResourceDefinition.ALLOW_UNESCAPED_CHARACTERS_IN_URL);\n    }", "language": "java", "code": "private static PersistentResourceXMLDescription.PersistentResourceXMLBuilder listenerBuilder(PersistentResourceDefinition resource) {\n        return builder(resource.getPathElement())\n                // xsd socket-optionsType\n                .addAttributes(\n                        ListenerResourceDefinition.RECEIVE_BUFFER,\n                        ListenerResourceDefinition.SEND_BUFFER,\n                        ListenerResourceDefinition.BACKLOG,\n                        ListenerResourceDefinition.KEEP_ALIVE,\n                        ListenerResourceDefinition.READ_TIMEOUT,\n                        ListenerResourceDefinition.WRITE_TIMEOUT,\n                        ListenerResourceDefinition.MAX_CONNECTIONS)\n                // xsd listener-type\n                .addAttributes(\n                        ListenerResourceDefinition.SOCKET_BINDING,\n                        ListenerResourceDefinition.WORKER,\n                        ListenerResourceDefinition.BUFFER_POOL,\n                        ListenerResourceDefinition.ENABLED,\n                        ListenerResourceDefinition.RESOLVE_PEER_ADDRESS,\n                        ListenerResourceDefinition.MAX_ENTITY_SIZE,\n                        ListenerResourceDefinition.BUFFER_PIPELINED_DATA,\n                        ListenerResourceDefinition.MAX_HEADER_SIZE,\n                        ListenerResourceDefinition.MAX_PARAMETERS,\n                        ListenerResourceDefinition.MAX_HEADERS,\n                        ListenerResourceDefinition.MAX_COOKIES,\n                        ListenerResourceDefinition.ALLOW_ENCODED_SLASH,\n                        ListenerResourceDefinition.DECODE_URL,\n                        ListenerResourceDefinition.URL_CHARSET,\n                        ListenerResourceDefinition.ALWAYS_SET_KEEP_ALIVE,\n                        ListenerResourceDefinition.MAX_BUFFERED_REQUEST_SIZE,\n                        ListenerResourceDefinition.RECORD_REQUEST_START_TIME,\n                        ListenerResourceDefinition.ALLOW_EQUALS_IN_COOKIE_VALUE,\n                        ListenerResourceDefinition.NO_REQUEST_TIMEOUT,\n                        ListenerResourceDefinition.REQUEST_PARSE_TIMEOUT,\n                        ListenerResourceDefinition.DISALLOWED_METHODS,\n                        ListenerResourceDefinition.SECURE,\n                        ListenerResourceDefinition.RFC6265_COOKIE_VALIDATION,\n                        ListenerResourceDefinition.ALLOW_UNESCAPED_CHARACTERS_IN_URL);\n    }", "code_tokens": ["private", "static", "PersistentResourceXMLDescription", ".", "PersistentResourceXMLBuilder", "listenerBuilder", "(", "PersistentResourceDefinition", "resource", ")", "{", "return", "builder", "(", "resource", ".", "getPathElement", "(", ")", ")", "// xsd socket-optionsType", ".", "addAttributes", "(", "ListenerResourceDefinition", ".", "RECEIVE_BUFFER", ",", "ListenerResourceDefinition", ".", "SEND_BUFFER", ",", "ListenerResourceDefinition", ".", "BACKLOG", ",", "ListenerResourceDefinition", ".", "KEEP_ALIVE", ",", "ListenerResourceDefinition", ".", "READ_TIMEOUT", ",", "ListenerResourceDefinition", ".", "WRITE_TIMEOUT", ",", "ListenerResourceDefinition", ".", "MAX_CONNECTIONS", ")", "// xsd listener-type", ".", "addAttributes", "(", "ListenerResourceDefinition", ".", "SOCKET_BINDING", ",", "ListenerResourceDefinition", ".", "WORKER", ",", "ListenerResourceDefinition", ".", "BUFFER_POOL", ",", "ListenerResourceDefinition", ".", "ENABLED", ",", "ListenerResourceDefinition", ".", "RESOLVE_PEER_ADDRESS", ",", "ListenerResourceDefinition", ".", "MAX_ENTITY_SIZE", ",", "ListenerResourceDefinition", ".", "BUFFER_PIPELINED_DATA", ",", "ListenerResourceDefinition", ".", "MAX_HEADER_SIZE", ",", "ListenerResourceDefinition", ".", "MAX_PARAMETERS", ",", "ListenerResourceDefinition", ".", "MAX_HEADERS", ",", "ListenerResourceDefinition", ".", "MAX_COOKIES", ",", "ListenerResourceDefinition", ".", "ALLOW_ENCODED_SLASH", ",", "ListenerResourceDefinition", ".", "DECODE_URL", ",", "ListenerResourceDefinition", ".", "URL_CHARSET", ",", "ListenerResourceDefinition", ".", "ALWAYS_SET_KEEP_ALIVE", ",", "ListenerResourceDefinition", ".", "MAX_BUFFERED_REQUEST_SIZE", ",", "ListenerResourceDefinition", ".", "RECORD_REQUEST_START_TIME", ",", "ListenerResourceDefinition", ".", "ALLOW_EQUALS_IN_COOKIE_VALUE", ",", "ListenerResourceDefinition", ".", "NO_REQUEST_TIMEOUT", ",", "ListenerResourceDefinition", ".", "REQUEST_PARSE_TIMEOUT", ",", "ListenerResourceDefinition", ".", "DISALLOWED_METHODS", ",", "ListenerResourceDefinition", ".", "SECURE", ",", "ListenerResourceDefinition", ".", "RFC6265_COOKIE_VALIDATION", ",", "ListenerResourceDefinition", ".", "ALLOW_UNESCAPED_CHARACTERS_IN_URL", ")", ";", "}"], "docstring": "Registers attributes common across listener types", "docstring_tokens": ["Registers", "attributes", "common", "across", "listener", "types"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/undertow/src/main/java/org/wildfly/extension/undertow/UndertowSubsystemParser_7_0.java#L369-L406", "partition": "test", "index": 2554, "time": "2018-06-21 19:01:25"}
{"repo": "wildfly/wildfly", "path": "microprofile/health-smallrye/src/main/java/org/wildfly/extension/microprofile/health/deployment/CDIExtension.java", "func_name": "CDIExtension.observeResources", "original_string": "public void observeResources(@Observes @WithAnnotations({Health.class})  ProcessAnnotatedType<? extends HealthCheck> event) {\n        AnnotatedType<? extends HealthCheck> annotatedType = event.getAnnotatedType();\n        Class<? extends HealthCheck> javaClass = annotatedType.getJavaClass();\n        MicroProfileHealthLogger.LOGGER.infof(\"Discovered health check procedure %s\", javaClass);\n        delegates.add(annotatedType);\n    }", "language": "java", "code": "public void observeResources(@Observes @WithAnnotations({Health.class})  ProcessAnnotatedType<? extends HealthCheck> event) {\n        AnnotatedType<? extends HealthCheck> annotatedType = event.getAnnotatedType();\n        Class<? extends HealthCheck> javaClass = annotatedType.getJavaClass();\n        MicroProfileHealthLogger.LOGGER.infof(\"Discovered health check procedure %s\", javaClass);\n        delegates.add(annotatedType);\n    }", "code_tokens": ["public", "void", "observeResources", "(", "@", "Observes", "@", "WithAnnotations", "(", "{", "Health", ".", "class", "}", ")", "ProcessAnnotatedType", "<", "?", "extends", "HealthCheck", ">", "event", ")", "{", "AnnotatedType", "<", "?", "extends", "HealthCheck", ">", "annotatedType", "=", "event", ".", "getAnnotatedType", "(", ")", ";", "Class", "<", "?", "extends", "HealthCheck", ">", "javaClass", "=", "annotatedType", ".", "getJavaClass", "(", ")", ";", "MicroProfileHealthLogger", ".", "LOGGER", ".", "infof", "(", "\"Discovered health check procedure %s\"", ",", "javaClass", ")", ";", "delegates", ".", "add", "(", "annotatedType", ")", ";", "}"], "docstring": "Discover all classes that implements HealthCheckProcedure", "docstring_tokens": ["Discover", "all", "classes", "that", "implements", "HealthCheckProcedure"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/microprofile/health-smallrye/src/main/java/org/wildfly/extension/microprofile/health/deployment/CDIExtension.java#L61-L66", "partition": "test", "index": 2872, "time": "2018-07-24 14:51:42"}
{"repo": "wildfly/wildfly", "path": "microprofile/health-smallrye/src/main/java/org/wildfly/extension/microprofile/health/deployment/CDIExtension.java", "func_name": "CDIExtension.close", "original_string": "public void close(@Observes final BeforeShutdown bs) {\n        healthCheckInstances.forEach(healthCheck -> {\n            healthReporter.removeHealthCheck(healthCheck.get());\n            healthCheck.preDestroy().dispose();\n        });\n        healthCheckInstances.clear();\n    }", "language": "java", "code": "public void close(@Observes final BeforeShutdown bs) {\n        healthCheckInstances.forEach(healthCheck -> {\n            healthReporter.removeHealthCheck(healthCheck.get());\n            healthCheck.preDestroy().dispose();\n        });\n        healthCheckInstances.clear();\n    }", "code_tokens": ["public", "void", "close", "(", "@", "Observes", "final", "BeforeShutdown", "bs", ")", "{", "healthCheckInstances", ".", "forEach", "(", "healthCheck", "->", "{", "healthReporter", ".", "removeHealthCheck", "(", "healthCheck", ".", "get", "(", ")", ")", ";", "healthCheck", ".", "preDestroy", "(", ")", ".", "dispose", "(", ")", ";", "}", ")", ";", "healthCheckInstances", ".", "clear", "(", ")", ";", "}"], "docstring": "Called when the deployment is undeployed.\n\nRemove all the instances of {@link HealthCheck} from the {@link SmallRyeHealthReporter}.\nHandle manually their CDI destroy lifecycle.", "docstring_tokens": ["Called", "when", "the", "deployment", "is", "undeployed", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/microprofile/health-smallrye/src/main/java/org/wildfly/extension/microprofile/health/deployment/CDIExtension.java#L93-L99", "partition": "test", "index": 2873, "time": "2018-07-24 14:51:42"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/JMSServerControlHandler.java", "func_name": "JMSServerControlHandler.inferDestinationName", "original_string": "private String inferDestinationName(String address) {\n        if (address.startsWith(JMS_QUEUE_PREFIX)) {\n            return address.substring(JMS_QUEUE_PREFIX.length());\n        } else if (address.startsWith(JMS_TOPIC_PREFIX)) {\n            return address.substring(JMS_TOPIC_PREFIX.length());\n        } else {\n            return address;\n        }\n    }", "language": "java", "code": "private String inferDestinationName(String address) {\n        if (address.startsWith(JMS_QUEUE_PREFIX)) {\n            return address.substring(JMS_QUEUE_PREFIX.length());\n        } else if (address.startsWith(JMS_TOPIC_PREFIX)) {\n            return address.substring(JMS_TOPIC_PREFIX.length());\n        } else {\n            return address;\n        }\n    }", "code_tokens": ["private", "String", "inferDestinationName", "(", "String", "address", ")", "{", "if", "(", "address", ".", "startsWith", "(", "JMS_QUEUE_PREFIX", ")", ")", "{", "return", "address", ".", "substring", "(", "JMS_QUEUE_PREFIX", ".", "length", "(", ")", ")", ";", "}", "else", "if", "(", "address", ".", "startsWith", "(", "JMS_TOPIC_PREFIX", ")", ")", "{", "return", "address", ".", "substring", "(", "JMS_TOPIC_PREFIX", ".", "length", "(", ")", ")", ";", "}", "else", "{", "return", "address", ";", "}", "}"], "docstring": "Infer the name of the JMS destination based on the queue's address.", "docstring_tokens": ["Infer", "the", "name", "of", "the", "JMS", "destination", "based", "on", "the", "queue", "s", "address", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/JMSServerControlHandler.java#L274-L282", "partition": "test", "index": 2765, "time": "2018-08-03 18:08:07"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/JMSConnectionFactoryDefinitionInjectionSource.java", "func_name": "JMSConnectionFactoryDefinitionInjectionSource.targetsExternalPooledConnectionFactory", "original_string": "static boolean targetsExternalPooledConnectionFactory(String resourceAdapter, ServiceRegistry serviceRegistry) {\n        // if the resourceAdapter is not defined, the default behaviour is to create a pooled-connection-factory.\n        if (resourceAdapter == null || resourceAdapter.isEmpty()) {\n            return false;\n        }\n        //let's look into the external-pooled-connection-factory\n        ServiceName pcfName = JMSServices.getPooledConnectionFactoryBaseServiceName(MessagingServices.getActiveMQServiceName(\"\")).append(resourceAdapter);\n        return serviceRegistry.getServiceNames().contains(pcfName);\n    }", "language": "java", "code": "static boolean targetsExternalPooledConnectionFactory(String resourceAdapter, ServiceRegistry serviceRegistry) {\n        // if the resourceAdapter is not defined, the default behaviour is to create a pooled-connection-factory.\n        if (resourceAdapter == null || resourceAdapter.isEmpty()) {\n            return false;\n        }\n        //let's look into the external-pooled-connection-factory\n        ServiceName pcfName = JMSServices.getPooledConnectionFactoryBaseServiceName(MessagingServices.getActiveMQServiceName(\"\")).append(resourceAdapter);\n        return serviceRegistry.getServiceNames().contains(pcfName);\n    }", "code_tokens": ["static", "boolean", "targetsExternalPooledConnectionFactory", "(", "String", "resourceAdapter", ",", "ServiceRegistry", "serviceRegistry", ")", "{", "// if the resourceAdapter is not defined, the default behaviour is to create a pooled-connection-factory.", "if", "(", "resourceAdapter", "==", "null", "||", "resourceAdapter", ".", "isEmpty", "(", ")", ")", "{", "return", "false", ";", "}", "//let's look into the external-pooled-connection-factory", "ServiceName", "pcfName", "=", "JMSServices", ".", "getPooledConnectionFactoryBaseServiceName", "(", "MessagingServices", ".", "getActiveMQServiceName", "(", "\"\"", ")", ")", ".", "append", "(", "resourceAdapter", ")", ";", "return", "serviceRegistry", ".", "getServiceNames", "(", ")", ".", "contains", "(", "pcfName", ")", ";", "}"], "docstring": "Return whether the definition targets an existing external pooled connection factory.\n\nChecks the service registry for a PooledConnectionFactoryService with the ServiceName\ncreated by the {@code server} property (or {@code \"default\") and the {@code resourceAdapter} property.", "docstring_tokens": ["Return", "whether", "the", "definition", "targets", "an", "existing", "external", "pooled", "connection", "factory", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/JMSConnectionFactoryDefinitionInjectionSource.java#L396-L404", "partition": "test", "index": 2580, "time": "2018-10-09 17:08:33"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/TransportConfigOperationHandlers.java", "func_name": "TransportConfigOperationHandlers.getExtraParameters", "original_string": "private static Map<String, Object> getExtraParameters(final Set<String> allowedKeys, final Map<String, Object> parameters) {\n        Map<String, Object> extraParameters = new HashMap<>();\n        for(Map.Entry<String, Object> parameter : parameters.entrySet()) {\n            if(!allowedKeys.contains(parameter.getKey())) {\n                extraParameters.put(parameter.getKey(), parameter.getValue());\n            }\n        }\n        for (String extraParam : extraParameters.keySet()) {\n            parameters.remove(extraParam);\n        }\n        return extraParameters;\n    }", "language": "java", "code": "private static Map<String, Object> getExtraParameters(final Set<String> allowedKeys, final Map<String, Object> parameters) {\n        Map<String, Object> extraParameters = new HashMap<>();\n        for(Map.Entry<String, Object> parameter : parameters.entrySet()) {\n            if(!allowedKeys.contains(parameter.getKey())) {\n                extraParameters.put(parameter.getKey(), parameter.getValue());\n            }\n        }\n        for (String extraParam : extraParameters.keySet()) {\n            parameters.remove(extraParam);\n        }\n        return extraParameters;\n    }", "code_tokens": ["private", "static", "Map", "<", "String", ",", "Object", ">", "getExtraParameters", "(", "final", "Set", "<", "String", ">", "allowedKeys", ",", "final", "Map", "<", "String", ",", "Object", ">", "parameters", ")", "{", "Map", "<", "String", ",", "Object", ">", "extraParameters", "=", "new", "HashMap", "<>", "(", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Object", ">", "parameter", ":", "parameters", ".", "entrySet", "(", ")", ")", "{", "if", "(", "!", "allowedKeys", ".", "contains", "(", "parameter", ".", "getKey", "(", ")", ")", ")", "{", "extraParameters", ".", "put", "(", "parameter", ".", "getKey", "(", ")", ",", "parameter", ".", "getValue", "(", ")", ")", ";", "}", "}", "for", "(", "String", "extraParam", ":", "extraParameters", ".", "keySet", "(", ")", ")", "{", "parameters", ".", "remove", "(", "extraParam", ")", ";", "}", "return", "extraParameters", ";", "}"], "docstring": "Extract extra parameters from the map of parameters.\n@param allowedKeys: the keys for allowed parameters.\n@param parameters all the parameters (allowed and extra).\n@return a Map of extra parameters (those that are not allowed).", "docstring_tokens": ["Extract", "extra", "parameters", "from", "the", "map", "of", "parameters", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/TransportConfigOperationHandlers.java#L314-L325", "partition": "test", "index": 2863, "time": "2018-10-10 10:18:50"}
{"repo": "wildfly/wildfly", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/MessagingServices.java", "func_name": "MessagingServices.getCapabilityServiceName", "original_string": "public static ServiceName getCapabilityServiceName(String capabilityBaseName, String... dynamicParts) {\n        if (capabilityServiceSupport == null) {\n            throw new IllegalStateException();\n        }\n        if (dynamicParts == null || dynamicParts.length == 0) {\n            return capabilityServiceSupport.getCapabilityServiceName(capabilityBaseName);\n        }\n        return capabilityServiceSupport.getCapabilityServiceName(capabilityBaseName, dynamicParts);\n    }", "language": "java", "code": "public static ServiceName getCapabilityServiceName(String capabilityBaseName, String... dynamicParts) {\n        if (capabilityServiceSupport == null) {\n            throw new IllegalStateException();\n        }\n        if (dynamicParts == null || dynamicParts.length == 0) {\n            return capabilityServiceSupport.getCapabilityServiceName(capabilityBaseName);\n        }\n        return capabilityServiceSupport.getCapabilityServiceName(capabilityBaseName, dynamicParts);\n    }", "code_tokens": ["public", "static", "ServiceName", "getCapabilityServiceName", "(", "String", "capabilityBaseName", ",", "String", "...", "dynamicParts", ")", "{", "if", "(", "capabilityServiceSupport", "==", "null", ")", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "if", "(", "dynamicParts", "==", "null", "||", "dynamicParts", ".", "length", "==", "0", ")", "{", "return", "capabilityServiceSupport", ".", "getCapabilityServiceName", "(", "capabilityBaseName", ")", ";", "}", "return", "capabilityServiceSupport", ".", "getCapabilityServiceName", "(", "capabilityBaseName", ",", "dynamicParts", ")", ";", "}"], "docstring": "Determines a ServiceName from a capability name. Only supported for use by services installed by\nthis subsystem; will not function reliably until the subsystem has begun adding runtime services.\n\n@param capabilityBaseName the base name of the capability, or its full name if it is not dynamic\n@param dynamicParts any dynamic parts of the capability name. May be {@code null}\n@return the service name\n\n@throws IllegalStateException if invoked before the subsystem has begun adding runtime services", "docstring_tokens": ["Determines", "a", "ServiceName", "from", "a", "capability", "name", ".", "Only", "supported", "for", "use", "by", "services", "installed", "by", "this", "subsystem", ";", "will", "not", "function", "reliably", "until", "the", "subsystem", "has", "begun", "adding", "runtime", "services", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/MessagingServices.java#L108-L116", "partition": "test", "index": 2591, "time": "2018-10-12 15:12:05"}
{"repo": "wildfly/wildfly", "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MetricCollector.java", "func_name": "MetricCollector.collectResourceMetrics", "original_string": "public MetricRegistration collectResourceMetrics(final Resource resource,\n                                              ImmutableManagementResourceRegistration managementResourceRegistration,\n                                              Function<PathAddress, PathAddress> resourceAddressResolver) {\n        MetricRegistration registration = new MetricRegistration();\n        collectResourceMetrics0(resource, managementResourceRegistration, EMPTY_ADDRESS, resourceAddressResolver, registration);\n        return registration;\n    }", "language": "java", "code": "public MetricRegistration collectResourceMetrics(final Resource resource,\n                                              ImmutableManagementResourceRegistration managementResourceRegistration,\n                                              Function<PathAddress, PathAddress> resourceAddressResolver) {\n        MetricRegistration registration = new MetricRegistration();\n        collectResourceMetrics0(resource, managementResourceRegistration, EMPTY_ADDRESS, resourceAddressResolver, registration);\n        return registration;\n    }", "code_tokens": ["public", "MetricRegistration", "collectResourceMetrics", "(", "final", "Resource", "resource", ",", "ImmutableManagementResourceRegistration", "managementResourceRegistration", ",", "Function", "<", "PathAddress", ",", "PathAddress", ">", "resourceAddressResolver", ")", "{", "MetricRegistration", "registration", "=", "new", "MetricRegistration", "(", ")", ";", "collectResourceMetrics0", "(", "resource", ",", "managementResourceRegistration", ",", "EMPTY_ADDRESS", ",", "resourceAddressResolver", ",", "registration", ")", ";", "return", "registration", ";", "}"], "docstring": "collect metrics from the resources", "docstring_tokens": ["collect", "metrics", "from", "the", "resources"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MetricCollector.java#L88-L94", "partition": "test", "index": 2891, "time": "2018-11-16 22:37:22"}
{"repo": "wildfly/wildfly", "path": "jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsMethodParameterProcessor.java", "func_name": "JaxrsMethodParameterProcessor.validateDefaultValues", "original_string": "private void validateDefaultValues(List<ParamDetail> detailList,\n                                       HashMap<String, List<Validator>> paramConverterMap)\n            throws DeploymentUnitProcessingException {\n\n        for(ParamDetail detail : detailList) {\n\n            // check param converter for specific return type\n            List<Validator> validators = paramConverterMap.get(\n                    detail.parameter.getName());\n\n            if (validators == null) {\n                // check for paramConverterProvider\n                validators = paramConverterMap.get(Object.class.getName());\n            }\n\n            boolean isCheckClazzMethods = true;\n            if (validators != null) {\n                for (Validator v : validators) {\n                    if (!v.isLazyLoad()) {\n                        try {\n                            Object obj = v.verify(detail);\n                            if (obj != null) {\n                                isCheckClazzMethods = false;\n                                break;\n                            }\n                        } catch (Exception e) {\n                            JAXRS_LOGGER.paramConverterFailed(detail.defaultValue.value(),\n                                    detail.parameter.getSimpleName(),\n                                    detail.method.toString(),\n                                    v.toString(), e.getClass().getName(),\n                                    e.getMessage());\n                        }\n                    }\n                }\n            }\n\n            if (isCheckClazzMethods) {\n                Class baseType = detail.parameter;\n                Method valueOf = null;\n\n                // constructor rule\n                try {\n                    Constructor<?> ctor = baseType.getConstructor(String.class);\n                    if (Modifier.isPublic(ctor.getModifiers())) {\n                        continue; // success move to next detail\n                    }\n                } catch (NoSuchMethodException ignored) { }\n\n                // method fromValue(String.class) rule\n                try {\n                    Method fromValue = baseType.getDeclaredMethod(\"fromValue\", String.class);\n                    if (Modifier.isPublic(fromValue.getModifiers())) {\n                        for (Annotation ann : baseType.getAnnotations()) {\n                            if (ann.annotationType().getName()\n                                    .equals(\"javax.xml.bind.annotation.XmlEnum\")) {\n                                valueOf = fromValue;\n                            }\n                        }\n                        validateBaseType(fromValue, detail.defaultValue.value(), detail);\n                        continue; // success move to next detail\n                    }\n                } catch (NoSuchMethodException ignoredA) { }\n\n                // method fromString(String.class) rule\n                Method fromString = null;\n                try {\n                    fromString = baseType.getDeclaredMethod(\"fromString\", String.class);\n                    if (Modifier.isStatic(fromString.getModifiers())) {\n                        validateBaseType(fromString, detail.defaultValue.value(), detail);\n                        continue; // success move to next detail\n                    }\n                } catch (NoSuchMethodException ignoredB) {\n                }\n\n                // method valueof(String.class) rule\n                try {\n                    valueOf = baseType.getDeclaredMethod(\"valueOf\", String.class);\n                    if (Modifier.isStatic(valueOf.getModifiers())) {\n                        validateBaseType(valueOf, detail.defaultValue.value(), detail);\n                        continue; // success move to next detail\n                    }\n                } catch (NoSuchMethodException ignored) {\n                }\n\n            }\n        }\n\n    }", "language": "java", "code": "private void validateDefaultValues(List<ParamDetail> detailList,\n                                       HashMap<String, List<Validator>> paramConverterMap)\n            throws DeploymentUnitProcessingException {\n\n        for(ParamDetail detail : detailList) {\n\n            // check param converter for specific return type\n            List<Validator> validators = paramConverterMap.get(\n                    detail.parameter.getName());\n\n            if (validators == null) {\n                // check for paramConverterProvider\n                validators = paramConverterMap.get(Object.class.getName());\n            }\n\n            boolean isCheckClazzMethods = true;\n            if (validators != null) {\n                for (Validator v : validators) {\n                    if (!v.isLazyLoad()) {\n                        try {\n                            Object obj = v.verify(detail);\n                            if (obj != null) {\n                                isCheckClazzMethods = false;\n                                break;\n                            }\n                        } catch (Exception e) {\n                            JAXRS_LOGGER.paramConverterFailed(detail.defaultValue.value(),\n                                    detail.parameter.getSimpleName(),\n                                    detail.method.toString(),\n                                    v.toString(), e.getClass().getName(),\n                                    e.getMessage());\n                        }\n                    }\n                }\n            }\n\n            if (isCheckClazzMethods) {\n                Class baseType = detail.parameter;\n                Method valueOf = null;\n\n                // constructor rule\n                try {\n                    Constructor<?> ctor = baseType.getConstructor(String.class);\n                    if (Modifier.isPublic(ctor.getModifiers())) {\n                        continue; // success move to next detail\n                    }\n                } catch (NoSuchMethodException ignored) { }\n\n                // method fromValue(String.class) rule\n                try {\n                    Method fromValue = baseType.getDeclaredMethod(\"fromValue\", String.class);\n                    if (Modifier.isPublic(fromValue.getModifiers())) {\n                        for (Annotation ann : baseType.getAnnotations()) {\n                            if (ann.annotationType().getName()\n                                    .equals(\"javax.xml.bind.annotation.XmlEnum\")) {\n                                valueOf = fromValue;\n                            }\n                        }\n                        validateBaseType(fromValue, detail.defaultValue.value(), detail);\n                        continue; // success move to next detail\n                    }\n                } catch (NoSuchMethodException ignoredA) { }\n\n                // method fromString(String.class) rule\n                Method fromString = null;\n                try {\n                    fromString = baseType.getDeclaredMethod(\"fromString\", String.class);\n                    if (Modifier.isStatic(fromString.getModifiers())) {\n                        validateBaseType(fromString, detail.defaultValue.value(), detail);\n                        continue; // success move to next detail\n                    }\n                } catch (NoSuchMethodException ignoredB) {\n                }\n\n                // method valueof(String.class) rule\n                try {\n                    valueOf = baseType.getDeclaredMethod(\"valueOf\", String.class);\n                    if (Modifier.isStatic(valueOf.getModifiers())) {\n                        validateBaseType(valueOf, detail.defaultValue.value(), detail);\n                        continue; // success move to next detail\n                    }\n                } catch (NoSuchMethodException ignored) {\n                }\n\n            }\n        }\n\n    }", "code_tokens": ["private", "void", "validateDefaultValues", "(", "List", "<", "ParamDetail", ">", "detailList", ",", "HashMap", "<", "String", ",", "List", "<", "Validator", ">", ">", "paramConverterMap", ")", "throws", "DeploymentUnitProcessingException", "{", "for", "(", "ParamDetail", "detail", ":", "detailList", ")", "{", "// check param converter for specific return type", "List", "<", "Validator", ">", "validators", "=", "paramConverterMap", ".", "get", "(", "detail", ".", "parameter", ".", "getName", "(", ")", ")", ";", "if", "(", "validators", "==", "null", ")", "{", "// check for paramConverterProvider", "validators", "=", "paramConverterMap", ".", "get", "(", "Object", ".", "class", ".", "getName", "(", ")", ")", ";", "}", "boolean", "isCheckClazzMethods", "=", "true", ";", "if", "(", "validators", "!=", "null", ")", "{", "for", "(", "Validator", "v", ":", "validators", ")", "{", "if", "(", "!", "v", ".", "isLazyLoad", "(", ")", ")", "{", "try", "{", "Object", "obj", "=", "v", ".", "verify", "(", "detail", ")", ";", "if", "(", "obj", "!=", "null", ")", "{", "isCheckClazzMethods", "=", "false", ";", "break", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "JAXRS_LOGGER", ".", "paramConverterFailed", "(", "detail", ".", "defaultValue", ".", "value", "(", ")", ",", "detail", ".", "parameter", ".", "getSimpleName", "(", ")", ",", "detail", ".", "method", ".", "toString", "(", ")", ",", "v", ".", "toString", "(", ")", ",", "e", ".", "getClass", "(", ")", ".", "getName", "(", ")", ",", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}", "}", "}", "if", "(", "isCheckClazzMethods", ")", "{", "Class", "baseType", "=", "detail", ".", "parameter", ";", "Method", "valueOf", "=", "null", ";", "// constructor rule", "try", "{", "Constructor", "<", "?", ">", "ctor", "=", "baseType", ".", "getConstructor", "(", "String", ".", "class", ")", ";", "if", "(", "Modifier", ".", "isPublic", "(", "ctor", ".", "getModifiers", "(", ")", ")", ")", "{", "continue", ";", "// success move to next detail", "}", "}", "catch", "(", "NoSuchMethodException", "ignored", ")", "{", "}", "// method fromValue(String.class) rule", "try", "{", "Method", "fromValue", "=", "baseType", ".", "getDeclaredMethod", "(", "\"fromValue\"", ",", "String", ".", "class", ")", ";", "if", "(", "Modifier", ".", "isPublic", "(", "fromValue", ".", "getModifiers", "(", ")", ")", ")", "{", "for", "(", "Annotation", "ann", ":", "baseType", ".", "getAnnotations", "(", ")", ")", "{", "if", "(", "ann", ".", "annotationType", "(", ")", ".", "getName", "(", ")", ".", "equals", "(", "\"javax.xml.bind.annotation.XmlEnum\"", ")", ")", "{", "valueOf", "=", "fromValue", ";", "}", "}", "validateBaseType", "(", "fromValue", ",", "detail", ".", "defaultValue", ".", "value", "(", ")", ",", "detail", ")", ";", "continue", ";", "// success move to next detail", "}", "}", "catch", "(", "NoSuchMethodException", "ignoredA", ")", "{", "}", "// method fromString(String.class) rule", "Method", "fromString", "=", "null", ";", "try", "{", "fromString", "=", "baseType", ".", "getDeclaredMethod", "(", "\"fromString\"", ",", "String", ".", "class", ")", ";", "if", "(", "Modifier", ".", "isStatic", "(", "fromString", ".", "getModifiers", "(", ")", ")", ")", "{", "validateBaseType", "(", "fromString", ",", "detail", ".", "defaultValue", ".", "value", "(", ")", ",", "detail", ")", ";", "continue", ";", "// success move to next detail", "}", "}", "catch", "(", "NoSuchMethodException", "ignoredB", ")", "{", "}", "// method valueof(String.class) rule", "try", "{", "valueOf", "=", "baseType", ".", "getDeclaredMethod", "(", "\"valueOf\"", ",", "String", ".", "class", ")", ";", "if", "(", "Modifier", ".", "isStatic", "(", "valueOf", ".", "getModifiers", "(", ")", ")", ")", "{", "validateBaseType", "(", "valueOf", ",", "detail", ".", "defaultValue", ".", "value", "(", ")", ",", "detail", ")", ";", "continue", ";", "// success move to next detail", "}", "}", "catch", "(", "NoSuchMethodException", "ignored", ")", "{", "}", "}", "}", "}"], "docstring": "Process all parameter DefaulValue objects.  Flag all parameters with\nmissing and invalid converters.\n\n@param detailList\n@param paramConverterMap", "docstring_tokens": ["Process", "all", "parameter", "DefaulValue", "objects", ".", "Flag", "all", "parameters", "with", "missing", "and", "invalid", "converters", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsMethodParameterProcessor.java#L111-L198", "partition": "test", "index": 2602, "time": "2019-01-25 16:43:43"}
{"repo": "wildfly/wildfly", "path": "jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsMethodParameterProcessor.java", "func_name": "JaxrsMethodParameterProcessor.checkParamType", "original_string": "private Class checkParamType(Type genParamType, final Method method,\n                                 final int paramPos, final ClassLoader classLoader){\n\n        Class paramClazz = null;\n\n        if (genParamType instanceof ParameterizedType) {\n            ParameterizedType pType = (ParameterizedType) genParamType;\n            Type[] actualTypeArgs = pType.getActualTypeArguments();\n            // skip Map types. Don't know how to set default value for these\n            if (actualTypeArgs.length == 1) {\n                try {\n                    paramClazz = classLoader.loadClass(actualTypeArgs[0].getTypeName());\n                } catch (Exception ee) {\n                    JAXRS_LOGGER.classIntrospectionFailure(ee.getClass().getName(),\n                            ee.getMessage());\n                }\n            }\n        } else {\n            Class<?>[] paramArr = method.getParameterTypes();\n            if (paramArr[paramPos].isArray()) {\n                Class compClazz = paramArr[paramPos].getComponentType();\n                if (!compClazz.isPrimitive()) {\n                    paramClazz = compClazz;\n                }\n            } else {\n                if (!paramArr[paramPos].isPrimitive()) {\n                    paramClazz = paramArr[paramPos];\n                }\n            }\n        }\n        return paramClazz;\n    }", "language": "java", "code": "private Class checkParamType(Type genParamType, final Method method,\n                                 final int paramPos, final ClassLoader classLoader){\n\n        Class paramClazz = null;\n\n        if (genParamType instanceof ParameterizedType) {\n            ParameterizedType pType = (ParameterizedType) genParamType;\n            Type[] actualTypeArgs = pType.getActualTypeArguments();\n            // skip Map types. Don't know how to set default value for these\n            if (actualTypeArgs.length == 1) {\n                try {\n                    paramClazz = classLoader.loadClass(actualTypeArgs[0].getTypeName());\n                } catch (Exception ee) {\n                    JAXRS_LOGGER.classIntrospectionFailure(ee.getClass().getName(),\n                            ee.getMessage());\n                }\n            }\n        } else {\n            Class<?>[] paramArr = method.getParameterTypes();\n            if (paramArr[paramPos].isArray()) {\n                Class compClazz = paramArr[paramPos].getComponentType();\n                if (!compClazz.isPrimitive()) {\n                    paramClazz = compClazz;\n                }\n            } else {\n                if (!paramArr[paramPos].isPrimitive()) {\n                    paramClazz = paramArr[paramPos];\n                }\n            }\n        }\n        return paramClazz;\n    }", "code_tokens": ["private", "Class", "checkParamType", "(", "Type", "genParamType", ",", "final", "Method", "method", ",", "final", "int", "paramPos", ",", "final", "ClassLoader", "classLoader", ")", "{", "Class", "paramClazz", "=", "null", ";", "if", "(", "genParamType", "instanceof", "ParameterizedType", ")", "{", "ParameterizedType", "pType", "=", "(", "ParameterizedType", ")", "genParamType", ";", "Type", "[", "]", "actualTypeArgs", "=", "pType", ".", "getActualTypeArguments", "(", ")", ";", "// skip Map types. Don't know how to set default value for these", "if", "(", "actualTypeArgs", ".", "length", "==", "1", ")", "{", "try", "{", "paramClazz", "=", "classLoader", ".", "loadClass", "(", "actualTypeArgs", "[", "0", "]", ".", "getTypeName", "(", ")", ")", ";", "}", "catch", "(", "Exception", "ee", ")", "{", "JAXRS_LOGGER", ".", "classIntrospectionFailure", "(", "ee", ".", "getClass", "(", ")", ".", "getName", "(", ")", ",", "ee", ".", "getMessage", "(", ")", ")", ";", "}", "}", "}", "else", "{", "Class", "<", "?", ">", "[", "]", "paramArr", "=", "method", ".", "getParameterTypes", "(", ")", ";", "if", "(", "paramArr", "[", "paramPos", "]", ".", "isArray", "(", ")", ")", "{", "Class", "compClazz", "=", "paramArr", "[", "paramPos", "]", ".", "getComponentType", "(", ")", ";", "if", "(", "!", "compClazz", ".", "isPrimitive", "(", ")", ")", "{", "paramClazz", "=", "compClazz", ";", "}", "}", "else", "{", "if", "(", "!", "paramArr", "[", "paramPos", "]", ".", "isPrimitive", "(", ")", ")", "{", "paramClazz", "=", "paramArr", "[", "paramPos", "]", ";", "}", "}", "}", "return", "paramClazz", ";", "}"], "docstring": "Take steps to properly identify the parameter's data type\n@param genParamType\n@param method\n@param paramPos\n@param classLoader\n@return", "docstring_tokens": ["Take", "steps", "to", "properly", "identify", "the", "parameter", "s", "data", "type"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsMethodParameterProcessor.java#L431-L462", "partition": "test", "index": 2603, "time": "2019-01-25 16:43:43"}
{"repo": "wildfly/wildfly", "path": "jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsMethodParameterProcessor.java", "func_name": "JaxrsMethodParameterProcessor.validateBaseType", "original_string": "private void validateBaseType(Method method, String defaultValue, ParamDetail detail)\n        throws DeploymentUnitProcessingException {\n        if (defaultValue != null) {\n            try {\n                method.invoke(method.getDeclaringClass(), defaultValue);\n            } catch (Exception e) {\n                JAXRS_LOGGER.baseTypeMethodFailed(defaultValue,\n                        detail.parameter.getSimpleName(), detail.method.toString(),\n                        method.toString(), e.getClass().getName(),\n                        e.getMessage());\n            }\n        }\n    }", "language": "java", "code": "private void validateBaseType(Method method, String defaultValue, ParamDetail detail)\n        throws DeploymentUnitProcessingException {\n        if (defaultValue != null) {\n            try {\n                method.invoke(method.getDeclaringClass(), defaultValue);\n            } catch (Exception e) {\n                JAXRS_LOGGER.baseTypeMethodFailed(defaultValue,\n                        detail.parameter.getSimpleName(), detail.method.toString(),\n                        method.toString(), e.getClass().getName(),\n                        e.getMessage());\n            }\n        }\n    }", "code_tokens": ["private", "void", "validateBaseType", "(", "Method", "method", ",", "String", "defaultValue", ",", "ParamDetail", "detail", ")", "throws", "DeploymentUnitProcessingException", "{", "if", "(", "defaultValue", "!=", "null", ")", "{", "try", "{", "method", ".", "invoke", "(", "method", ".", "getDeclaringClass", "(", ")", ",", "defaultValue", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "JAXRS_LOGGER", ".", "baseTypeMethodFailed", "(", "defaultValue", ",", "detail", ".", "parameter", ".", "getSimpleName", "(", ")", ",", "detail", ".", "method", ".", "toString", "(", ")", ",", "method", ".", "toString", "(", ")", ",", "e", ".", "getClass", "(", ")", ".", "getName", "(", ")", ",", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Confirm the method can handle the default value without throwing\nand exception.\n\n@param method\n@param defaultValue", "docstring_tokens": ["Confirm", "the", "method", "can", "handle", "the", "default", "value", "without", "throwing", "and", "exception", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsMethodParameterProcessor.java#L588-L600", "partition": "test", "index": 2605, "time": "2019-01-25 16:43:43"}
{"repo": "wildfly/wildfly", "path": "jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsMethodParameterProcessor.java", "func_name": "JaxrsMethodParameterProcessor.lookupDefaultValueAnn", "original_string": "private DefaultValue lookupDefaultValueAnn(Annotation[] annotationArr) {\n        for (Annotation ann :  annotationArr) {\n\n            if (ann instanceof DefaultValue) {\n                return (DefaultValue)ann;\n            }\n        }\n        return null;\n    }", "language": "java", "code": "private DefaultValue lookupDefaultValueAnn(Annotation[] annotationArr) {\n        for (Annotation ann :  annotationArr) {\n\n            if (ann instanceof DefaultValue) {\n                return (DefaultValue)ann;\n            }\n        }\n        return null;\n    }", "code_tokens": ["private", "DefaultValue", "lookupDefaultValueAnn", "(", "Annotation", "[", "]", "annotationArr", ")", "{", "for", "(", "Annotation", "ann", ":", "annotationArr", ")", "{", "if", "(", "ann", "instanceof", "DefaultValue", ")", "{", "return", "(", "DefaultValue", ")", "ann", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Extract a DefaultValue annotation from the list of parameter annotations\n@param annotationArr\n@return", "docstring_tokens": ["Extract", "a", "DefaultValue", "annotation", "from", "the", "list", "of", "parameter", "annotations"], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/jaxrs/src/main/java/org/jboss/as/jaxrs/deployment/JaxrsMethodParameterProcessor.java#L469-L477", "partition": "test", "index": 2604, "time": "2019-01-25 16:43:43"}
{"repo": "wildfly/wildfly", "path": "weld/subsystem/src/main/java/org/jboss/as/weld/_private/WeldDeploymentMarker.java", "func_name": "WeldDeploymentMarker.mark", "original_string": "public static void mark(DeploymentUnit unit) {\n        unit.putAttachment(MARKER, Boolean.TRUE);\n        if (unit.getParent() != null) {\n            mark(unit.getParent());\n        }\n    }", "language": "java", "code": "public static void mark(DeploymentUnit unit) {\n        unit.putAttachment(MARKER, Boolean.TRUE);\n        if (unit.getParent() != null) {\n            mark(unit.getParent());\n        }\n    }", "code_tokens": ["public", "static", "void", "mark", "(", "DeploymentUnit", "unit", ")", "{", "unit", ".", "putAttachment", "(", "MARKER", ",", "Boolean", ".", "TRUE", ")", ";", "if", "(", "unit", ".", "getParent", "(", ")", "!=", "null", ")", "{", "mark", "(", "unit", ".", "getParent", "(", ")", ")", ";", "}", "}"], "docstring": "Mark this deployment and the top level deployment as being a weld deployment.", "docstring_tokens": ["Mark", "this", "deployment", "and", "the", "top", "level", "deployment", "as", "being", "a", "weld", "deployment", "."], "sha": "64896f1500fe465ad83d96ede9fa19d0c3747f18", "url": "https://github.com/wildfly/wildfly/blob/64896f1500fe465ad83d96ede9fa19d0c3747f18/weld/subsystem/src/main/java/org/jboss/as/weld/_private/WeldDeploymentMarker.java#L40-L45", "partition": "test", "index": 2615, "time": "2019-04-26 08:14:28"}
