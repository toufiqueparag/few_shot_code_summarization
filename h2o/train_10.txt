def stabilize ( self , test_func , error , timeoutSecs = 10 , retryDelaySecs = 0.5 ) : start = time . time ( ) numberOfRetries = 0 while h2o_args . no_timeout or ( time . time ( ) - start < timeoutSecs ) : if test_func ( self , tries = numberOfRetries , timeoutSecs = timeoutSecs ) : break time . sleep ( retryDelaySecs ) numberOfRetries += 1 # hey, check the sandbox if we've been waiting a long time...rather than wait for timeout # to find the badness?. can check_sandbox_for_errors at any time if ( ( numberOfRetries % 50 ) == 0 ) : check_sandbox_for_errors ( python_test_name = h2o_args . python_test_name ) else : timeTakenSecs = time . time ( ) - start if isinstance ( error , type ( '' ) ) : raise Exception ( '%s failed after %.2f seconds having retried %d times' % ( error , timeTakenSecs , numberOfRetries ) ) else : msg = error ( self , timeTakenSecs , numberOfRetries ) raise Exception ( msg )	<s> Repeatedly test a function waiting for it to return True . </s>
def summary ( self , key , column = "C1" , timeoutSecs = 10 , * * kwargs ) : params_dict = { # 'offset': 0, # 'len': 100 } h2o_methods . check_params_update_kwargs ( params_dict , kwargs , 'summary' , True ) result = self . do_json_request ( '3/Frames.json/%s/columns/%s/summary' % ( key , column ) , timeout = timeoutSecs , params = params_dict ) h2o_sandbox . check_sandbox_for_errors ( ) return result	<s> Return the summary for a single column for a single Frame in the h2o cluster . </s>
def delete_model ( self , key , ignoreMissingKey = True , timeoutSecs = 60 , * * kwargs ) : assert key is not None , '"key" parameter is null' result = self . do_json_request ( '/3/Models.json/' + key , cmd = 'delete' , timeout = timeoutSecs ) # TODO: look for what? if not ignoreMissingKey and 'f00b4r' in result : raise ValueError ( 'Model key not found: ' + key ) verboseprint ( "delete_model result:" , dump_json ( result ) ) return result	<s> Delete a model on the h2o cluster given its key . </s>
def model_metrics ( self , timeoutSecs = 60 , * * kwargs ) : result = self . do_json_request ( '/3/ModelMetrics.json' , cmd = 'get' , timeout = timeoutSecs ) h2o_sandbox . check_sandbox_for_errors ( ) return result	<s> ModelMetrics list . </s>
def compute_model_metrics ( self , model , frame , timeoutSecs = 60 , * * kwargs ) : assert model is not None , '"model" parameter is null' assert frame is not None , '"frame" parameter is null' models = self . models ( key = model , timeoutSecs = timeoutSecs ) assert models is not None , "/Models REST call failed" assert models [ 'models' ] [ 0 ] [ 'model_id' ] [ 'name' ] == model , "/Models/{0} returned Model {1} rather than Model {2}" . format ( model , models [ 'models' ] [ 0 ] [ 'key' ] [ 'name' ] , model ) # TODO: test this assert, I don't think this is working. . . frames = self . frames ( key = frame ) assert frames is not None , "/Frames/{0} REST call failed" . format ( frame ) print "frames:" , dump_json ( frames ) # is the name not there? # assert frames['frames'][0]['model_id']['name'] == frame, "/Frames/{0} returned Frame {1} rather than Frame {2}".format(frame, models['models'][0]['key']['name'], frame) result = self . do_json_request ( '/3/ModelMetrics.json/models/' + model + '/frames/' + frame , cmd = 'post' , timeout = timeoutSecs ) mm = result [ 'model_metrics' ] [ 0 ] verboseprint ( "model metrics: " + repr ( mm ) ) h2o_sandbox . check_sandbox_for_errors ( ) return mm	<s> Score a model on the h2o cluster on the given Frame and return only the model metrics . </s>
def validate_model_parameters ( self , algo , training_frame , parameters , timeoutSecs = 60 , * * kwargs ) : assert algo is not None , '"algo" parameter is null' # Allow this now: assert training_frame is not None, '"training_frame" parameter is null' assert parameters is not None , '"parameters" parameter is null' model_builders = self . model_builders ( timeoutSecs = timeoutSecs ) assert model_builders is not None , "/ModelBuilders REST call failed" assert algo in model_builders [ 'model_builders' ] builder = model_builders [ 'model_builders' ] [ algo ] # TODO: test this assert, I don't think this is working. . . if training_frame is not None : frames = self . frames ( key = training_frame ) assert frames is not None , "/Frames/{0} REST call failed" . format ( training_frame ) key_name = frames [ 'frames' ] [ 0 ] [ 'key' ] [ 'name' ] assert key_name == training_frame , "/Frames/{0} returned Frame {1} rather than Frame {2}" . format ( training_frame , key_name , training_frame ) parameters [ 'training_frame' ] = training_frame # TODO: add parameter existence checks # TODO: add parameter value validation # FIX! why ignoreH2oError here? result = self . do_json_request ( '/3/ModelBuilders.json/' + algo + "/parameters" , cmd = 'post' , timeout = timeoutSecs , postData = parameters , ignoreH2oError = True , noExtraErrorCheck = True ) verboseprint ( "model parameters validation: " + repr ( result ) ) return result	<s> Check a dictionary of model builder parameters on the h2o cluster using the given algorithm and model parameters . </s>
def model_builders ( self , algo = None , timeoutSecs = 10 , * * kwargs ) : params_dict = { } h2o_methods . check_params_update_kwargs ( params_dict , kwargs , 'model_builders' , False ) request = '3/ModelBuilders.json' if algo : request += "/" + algo result = self . do_json_request ( request , timeout = timeoutSecs , params = params_dict ) # verboseprint(request, "result:", dump_json(result)) h2o_sandbox . check_sandbox_for_errors ( ) return result	<s> Return a model builder or all of the model builders known to the h2o cluster . The model builders are contained in a dictionary called model_builders at the top level of the result . The dictionary maps algorithm names to parameters lists . Each of the parameters contains all the metdata required by a client to present a model building interface to the user . </s>
def delete_frame ( self , key , ignoreMissingKey = True , timeoutSecs = 60 , * * kwargs ) : assert key is not None , '"key" parameter is null' result = self . do_json_request ( '/3/Frames.json/' + key , cmd = 'delete' , timeout = timeoutSecs ) # TODO: look for what? if not ignoreMissingKey and 'f00b4r' in result : raise ValueError ( 'Frame key not found: ' + key ) return result	<s> Delete a frame on the h2o cluster given its key . </s>
def stop_instances ( instances , region ) : if not instances : return conn = ec2_connect ( region ) log ( "Stopping instances {0}." . format ( instances ) ) conn . stop_instances ( instances ) log ( "Done" )	<s> stop all the instances given by its ids </s>
def terminate_instances ( instances , region ) : if not instances : return conn = ec2_connect ( region ) log ( "Terminating instances {0}." . format ( instances ) ) conn . terminate_instances ( instances ) log ( "Done" )	<s> terminate all the instances given by its ids </s>
