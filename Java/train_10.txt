void runWithinPeriod ( Runnable runnable , ExecuteStepMessage executeStepMessage , int timeout , TimeUnit unit ) { if ( ! isRunningAStep . getAndSet ( true ) ) { this . currentlyExecutingStep = executeStepMessage ; Future < String > future = null ; try { future = scheduledExecutorService . submit ( runStepAndResetIsRunning ( runnable ) , "OK" ) ; future . get ( timeout , unit ) ; } catch ( TimeoutException e ) { //Timed out waiting for the step to run //We should try to cancel and interrupt the thread which is running the step - although this isn't //guaranteed to succeed. future . cancel ( true ) ; log . warn ( "A step failed to execute within " + timeout + " " + unit + ", attempting to cancel the step" ) ; //Here the step server should have timed out the step and proceed already - we don't need to send a failure message } catch ( Exception e ) { String ms = "Exception while executing step [" + e . getMessage ( ) + "]" ; log . error ( ms , e ) ; stepFailureConsumer . accept ( ms , executeStepMessage ) ; } } else { //server will time out this step String message = "Cannot execute a test step, a step is already in progress [" + currentlyExecutingStep . getStepId ( ) + ", " + currentlyExecutingStep . getPattern ( ) + "]" ; log . error ( message ) ; stepFailureConsumer . accept ( message , executeStepMessage ) ; } }	<s> Run a task on the scheduled executor so that we can try to interrupt it and time out if it fails </s>
private void logProgress ( String fileOffset , boolean prefixNewLine ) throws IOException { long now = System . currentTimeMillis ( ) ; LogEntry entry = new LogEntry ( now , componentID , fileOffset ) ; String line = entry . toString ( ) ; if ( prefixNewLine ) { lockFileStream . writeBytes ( System . lineSeparator ( ) + line ) ; } else { lockFileStream . writeBytes ( line ) ; } lockFileStream . hflush ( ) ; lastEntry = entry ; // update this only after writing to hdfs }	<s> partial writes of prior lines </s>
public void appendChild ( final Node child ) { if ( child instanceof Level ) { // Append the level levels . add ( ( Level ) child ) ; nodes . add ( child ) ; if ( child . getParent ( ) != null ) { child . removeParent ( ) ; } child . setParent ( this ) ; } else if ( child instanceof SpecTopic ) { appendSpecTopic ( ( SpecTopic ) child ) ; } else if ( child instanceof CommonContent ) { // Append the common content commonContents . add ( ( CommonContent ) child ) ; nodes . add ( child ) ; if ( child . getParent ( ) != null ) { child . removeParent ( ) ; } child . setParent ( this ) ; } else { nodes . add ( child ) ; if ( child . getParent ( ) != null ) { child . removeParent ( ) ; } child . setParent ( this ) ; } }	<s> Adds a Child Element to the Level . If the Child Element already has a parent then it is removed from that parent and added to this level . </s>
public HttpClient setURI ( final URI uri ) { final URIBuilder builder = new URIBuilder ( uri ) ; this . scheme = builder . getScheme ( ) ; this . host = builder . getHost ( ) ; this . port = builder . getPort ( ) ; this . path = builder . getPath ( ) ; this . fragment = builder . getFragment ( ) ; this . resetQueryParameters ( ) ; for ( NameValuePair nvp : builder . getQueryParams ( ) ) { this . queryParameters . add ( new BasicNameValuePair ( nvp . getName ( ) , nvp . getValue ( ) ) ) ; } return this ; }	<s> A URI representing the Absolute URL for the Request </s>
public String getColumnClassName ( int column ) throws SQLException { Field field = getField ( column ) ; String result = connection . getTypeInfo ( ) . getJavaClass ( field . getOID ( ) ) ; if ( result != null ) { return result ; } int sqlType = getSQLType ( column ) ; switch ( sqlType ) { case Types . ARRAY : return ( "java.sql.Array" ) ; default : String type = getPGType ( column ) ; if ( "unknown" . equals ( type ) ) { return ( "java.lang.String" ) ; } return ( "java.lang.Object" ) ; } }	<s> This can hook into our PG_Object mechanism </s>
public static org . mariadb . jdbc . internal . com . send . authentication . ed25519 . math . GroupElement precomp ( final Curve curve , final FieldElement ypx , final FieldElement ymx , final FieldElement xy2d ) { return new org . mariadb . jdbc . internal . com . send . authentication . ed25519 . math . GroupElement ( curve , Representation . PRECOMP , ypx , ymx , xy2d , null ) ; }	<s> Creates a new group element in PRECOMP representation . </s>
public static TransferListener getInstance ( String xferId , AsperaTransaction transaction ) { if ( instance == null ) { instance = new TransferListener ( ) ; } if ( transactions . get ( xferId ) != null ) { transactions . get ( xferId ) . add ( transaction ) ; } else { List < AsperaTransaction > transferTransactions = new ArrayList < AsperaTransaction > ( ) ; transferTransactions . add ( transaction ) ; transactions . put ( xferId , transferTransactions ) ; } return instance ; }	<s> Returns TransferListener instance and associates an AsperaTransaction with a Transfer ID . On change of transfer status or bytes transferred the TransferLsitener will fire a progress change event to all progress listeners attached to the AsperaTransaction . </s>
private DescribeSecurityGroupsResponseType describeSecurityGroups ( ) { DescribeSecurityGroupsResponseType ret = new DescribeSecurityGroupsResponseType ( ) ; ret . setRequestId ( UUID . randomUUID ( ) . toString ( ) ) ; SecurityGroupSetType securityGroupSet = new SecurityGroupSetType ( ) ; for ( Iterator < MockSecurityGroup > mockSecurityGroup = mockSecurityGroupController . describeSecurityGroups ( ) . iterator ( ) ; mockSecurityGroup . hasNext ( ) ; ) { MockSecurityGroup item = mockSecurityGroup . next ( ) ; // initialize securityGroupItem SecurityGroupItemType securityGroupItem = new SecurityGroupItemType ( ) ; securityGroupItem . setOwnerId ( MOCK_SECURITY_OWNER_ID ) ; securityGroupItem . setGroupName ( item . getGroupName ( ) ) ; if ( ! DEFAULT_MOCK_PLACEMENT . getAvailabilityZone ( ) . equals ( currentRegion ) ) { securityGroupItem . setGroupId ( currentRegion + "_" + item . getGroupId ( ) ) ; securityGroupItem . setVpcId ( currentRegion + "_" + item . getVpcId ( ) ) ; } else { securityGroupItem . setGroupId ( item . getGroupId ( ) ) ; securityGroupItem . setVpcId ( item . getVpcId ( ) ) ; } securityGroupItem . setGroupDescription ( item . getGroupDescription ( ) ) ; IpPermissionSetType ipPermissionSet = new IpPermissionSetType ( ) ; for ( MockIpPermissionType mockIpPermissionType : item . getIpPermissions ( ) ) { // initialize ipPermission IpPermissionType ipPermission = new IpPermissionType ( ) ; ipPermission . setFromPort ( mockIpPermissionType . getFromPort ( ) ) ; ipPermission . setToPort ( mockIpPermissionType . getToPort ( ) ) ; ipPermission . setIpProtocol ( mockIpPermissionType . getIpProtocol ( ) ) ; ipPermissionSet . getItem ( ) . add ( ipPermission ) ; } IpPermissionSetType ipPermissionEgressSet = new IpPermissionSetType ( ) ; for ( MockIpPermissionType mockIpPermissionType : item . getIpPermissionsEgress ( ) ) { // initialize ipPermission IpPermissionType ipPermission = new IpPermissionType ( ) ; ipPermission . setFromPort ( mockIpPermissionType . getFromPort ( ) ) ; ipPermission . setToPort ( mockIpPermissionType . getToPort ( ) ) ; ipPermission . setIpProtocol ( mockIpPermissionType . getIpProtocol ( ) ) ; ipPermissionEgressSet . getItem ( ) . add ( ipPermission ) ; } securityGroupItem . setIpPermissionsEgress ( ipPermissionEgressSet ) ; securityGroupSet . getItem ( ) . add ( securityGroupItem ) ; } ret . setSecurityGroupInfo ( securityGroupSet ) ; return ret ; }	<s> Handles describeSecurityGroups request and returns response with a security group . </s>
public DynaFormControl addControl ( final Object data , final String type , final int colspan , final int rowspan ) { final DynaFormControl dynaFormControl = new DynaFormControl ( data , type , colspan , rowspan , row , elements . size ( ) + 1 , dynaFormModel . getControls ( ) . size ( ) + 1 , extended ) ; elements . add ( dynaFormControl ) ; dynaFormModel . getControls ( ) . add ( dynaFormControl ) ; totalColspan = totalColspan + colspan ; return dynaFormControl ; }	<s> Adds control with given data type colspan and rowspan . </s>
public static boolean areAllMethodsStatic ( Method ... methods ) { for ( Method method : methods ) { if ( ! Modifier . isStatic ( method . getModifiers ( ) ) ) { return false ; } } return true ; }	<s> Are all methods static . </s>
