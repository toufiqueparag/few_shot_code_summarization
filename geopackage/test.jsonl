{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.drawTileBytes", "original_string": "public byte[] drawTileBytes(int x, int y, int zoom) {\n\n        Bitmap bitmap = drawTile(x, y, zoom);\n\n        byte[] tileData = null;\n\n        // Convert the bitmap to bytes\n        if (bitmap != null) {\n            try {\n                tileData = BitmapConverter.toBytes(\n                        bitmap, compressFormat);\n            } catch (IOException e) {\n                Log.e(FeatureTiles.class.getSimpleName(), \"Failed to create tile. x: \" + x + \", y: \"\n                        + y + \", zoom: \" + zoom, e);\n            } finally {\n                bitmap.recycle();\n            }\n        }\n\n        return tileData;\n    }", "language": "java", "code": "public byte[] drawTileBytes(int x, int y, int zoom) {\n\n        Bitmap bitmap = drawTile(x, y, zoom);\n\n        byte[] tileData = null;\n\n        // Convert the bitmap to bytes\n        if (bitmap != null) {\n            try {\n                tileData = BitmapConverter.toBytes(\n                        bitmap, compressFormat);\n            } catch (IOException e) {\n                Log.e(FeatureTiles.class.getSimpleName(), \"Failed to create tile. x: \" + x + \", y: \"\n                        + y + \", zoom: \" + zoom, e);\n            } finally {\n                bitmap.recycle();\n            }\n        }\n\n        return tileData;\n    }", "code_tokens": ["public", "byte", "[", "]", "drawTileBytes", "(", "int", "x", ",", "int", "y", ",", "int", "zoom", ")", "{", "Bitmap", "bitmap", "=", "drawTile", "(", "x", ",", "y", ",", "zoom", ")", ";", "byte", "[", "]", "tileData", "=", "null", ";", "// Convert the bitmap to bytes", "if", "(", "bitmap", "!=", "null", ")", "{", "try", "{", "tileData", "=", "BitmapConverter", ".", "toBytes", "(", "bitmap", ",", "compressFormat", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "Log", ".", "e", "(", "FeatureTiles", ".", "class", ".", "getSimpleName", "(", ")", ",", "\"Failed to create tile. x: \"", "+", "x", "+", "\", y: \"", "+", "y", "+", "\", zoom: \"", "+", "zoom", ",", "e", ")", ";", "}", "finally", "{", "bitmap", ".", "recycle", "(", ")", ";", "}", "}", "return", "tileData", ";", "}"], "docstring": "Draw the tile and get the bytes from the x, y, and zoom level\n\n@param x    x coordinate\n@param y    y coordinate\n@param zoom zoom level\n@return tile bytes, or null", "docstring_tokens": ["Draw", "the", "tile", "and", "get", "the", "bytes", "from", "the", "x", "y", "and", "zoom", "level"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1034-L1054", "partition": "test", "index": 5997, "time": "2015-04-14 07:14:44"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.drawTile", "original_string": "public Bitmap drawTile(int x, int y, int zoom) {\n        Bitmap bitmap;\n        if (isIndexQuery()) {\n            bitmap = drawTileQueryIndex(x, y, zoom);\n        } else {\n            bitmap = drawTileQueryAll(x, y, zoom);\n        }\n        return bitmap;\n    }", "language": "java", "code": "public Bitmap drawTile(int x, int y, int zoom) {\n        Bitmap bitmap;\n        if (isIndexQuery()) {\n            bitmap = drawTileQueryIndex(x, y, zoom);\n        } else {\n            bitmap = drawTileQueryAll(x, y, zoom);\n        }\n        return bitmap;\n    }", "code_tokens": ["public", "Bitmap", "drawTile", "(", "int", "x", ",", "int", "y", ",", "int", "zoom", ")", "{", "Bitmap", "bitmap", ";", "if", "(", "isIndexQuery", "(", ")", ")", "{", "bitmap", "=", "drawTileQueryIndex", "(", "x", ",", "y", ",", "zoom", ")", ";", "}", "else", "{", "bitmap", "=", "drawTileQueryAll", "(", "x", ",", "y", ",", "zoom", ")", ";", "}", "return", "bitmap", ";", "}"], "docstring": "Draw a tile bitmap from the x, y, and zoom level\n\n@param x    x coordinate\n@param y    y coordinate\n@param zoom zoom level\n@return tile bitmap, or null", "docstring_tokens": ["Draw", "a", "tile", "bitmap", "from", "the", "x", "y", "and", "zoom", "level"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1064-L1072", "partition": "test", "index": 5998, "time": "2015-04-14 07:14:44"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.setPolygonPaint", "original_string": "public void setPolygonPaint(Paint polygonPaint) {\n        if (polygonPaint == null) {\n            throw new AssertionError(\"Polygon Paint can not be null\");\n        }\n        this.polygonPaint = polygonPaint;\n        setPolygonStrokeWidth(polygonPaint.getStrokeWidth());\n    }", "language": "java", "code": "public void setPolygonPaint(Paint polygonPaint) {\n        if (polygonPaint == null) {\n            throw new AssertionError(\"Polygon Paint can not be null\");\n        }\n        this.polygonPaint = polygonPaint;\n        setPolygonStrokeWidth(polygonPaint.getStrokeWidth());\n    }", "code_tokens": ["public", "void", "setPolygonPaint", "(", "Paint", "polygonPaint", ")", "{", "if", "(", "polygonPaint", "==", "null", ")", "{", "throw", "new", "AssertionError", "(", "\"Polygon Paint can not be null\"", ")", ";", "}", "this", ".", "polygonPaint", "=", "polygonPaint", ";", "setPolygonStrokeWidth", "(", "polygonPaint", ".", "getStrokeWidth", "(", ")", ")", ";", "}"], "docstring": "Set the polygon paint\n\n@param polygonPaint polygon paint", "docstring_tokens": ["Set", "the", "polygon", "paint"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L810-L816", "partition": "test", "index": 5996, "time": "2015-04-14 07:14:44"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.setLinePaint", "original_string": "public void setLinePaint(Paint linePaint) {\n        if (linePaint == null) {\n            throw new AssertionError(\"Line Paint can not be null\");\n        }\n        this.linePaint = linePaint;\n        setLineStrokeWidth(linePaint.getStrokeWidth());\n    }", "language": "java", "code": "public void setLinePaint(Paint linePaint) {\n        if (linePaint == null) {\n            throw new AssertionError(\"Line Paint can not be null\");\n        }\n        this.linePaint = linePaint;\n        setLineStrokeWidth(linePaint.getStrokeWidth());\n    }", "code_tokens": ["public", "void", "setLinePaint", "(", "Paint", "linePaint", ")", "{", "if", "(", "linePaint", "==", "null", ")", "{", "throw", "new", "AssertionError", "(", "\"Line Paint can not be null\"", ")", ";", "}", "this", ".", "linePaint", "=", "linePaint", ";", "setLineStrokeWidth", "(", "linePaint", ".", "getStrokeWidth", "(", ")", ")", ";", "}"], "docstring": "Set the line paint\n\n@param linePaint line paint", "docstring_tokens": ["Set", "the", "line", "paint"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L726-L732", "partition": "test", "index": 5995, "time": "2015-04-14 07:14:44"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.calculateDrawOverlap", "original_string": "public void calculateDrawOverlap() {\n\n        if (pointIcon != null) {\n            heightOverlap = this.density * pointIcon.getHeight();\n            widthOverlap = this.density * pointIcon.getWidth();\n        } else {\n            heightOverlap = this.density * pointRadius;\n            widthOverlap = this.density * pointRadius;\n        }\n\n        float linePaintHalfStroke = this.density * lineStrokeWidth / 2.0f;\n        heightOverlap = Math.max(heightOverlap, linePaintHalfStroke);\n        widthOverlap = Math.max(widthOverlap, linePaintHalfStroke);\n\n        float polygonPaintHalfStroke = this.density * polygonStrokeWidth / 2.0f;\n        heightOverlap = Math.max(heightOverlap, polygonPaintHalfStroke);\n        widthOverlap = Math.max(widthOverlap, polygonPaintHalfStroke);\n\n        if (featureTableStyles != null && featureTableStyles.has()) {\n\n            // Style Rows\n            Set<Long> styleRowIds = new HashSet<>();\n            List<Long> tableStyleIds = featureTableStyles.getAllTableStyleIds();\n            if (tableStyleIds != null) {\n                styleRowIds.addAll(tableStyleIds);\n            }\n            List<Long> styleIds = featureTableStyles.getAllStyleIds();\n            if (styleIds != null) {\n                styleRowIds.addAll(styleIds);\n            }\n\n            StyleDao styleDao = featureTableStyles.getStyleDao();\n            for (long styleRowId : styleRowIds) {\n                StyleRow styleRow = styleDao.getRow(styleDao.queryForIdRow(styleRowId));\n                float styleHalfWidth = this.density * (float) (styleRow.getWidthOrDefault() / 2.0f);\n                widthOverlap = Math.max(widthOverlap, styleHalfWidth);\n                heightOverlap = Math.max(heightOverlap, styleHalfWidth);\n            }\n\n            // Icon Rows\n            Set<Long> iconRowIds = new HashSet<>();\n            List<Long> tableIconIds = featureTableStyles.getAllTableIconIds();\n            if (tableIconIds != null) {\n                iconRowIds.addAll(tableIconIds);\n            }\n            List<Long> iconIds = featureTableStyles.getAllIconIds();\n            if (iconIds != null) {\n                iconRowIds.addAll(iconIds);\n            }\n\n            IconDao iconDao = featureTableStyles.getIconDao();\n            for (long iconRowId : iconRowIds) {\n                IconRow iconRow = iconDao.getRow(iconDao.queryForIdRow(iconRowId));\n                double[] iconDimensions = iconRow.getDerivedDimensions();\n                float iconWidth = this.density * (float) Math.ceil(iconDimensions[0]);\n                float iconHeight = this.density * (float) Math.ceil(iconDimensions[1]);\n                widthOverlap = Math.max(widthOverlap, iconWidth);\n                heightOverlap = Math.max(heightOverlap, iconHeight);\n            }\n\n        }\n\n    }", "language": "java", "code": "public void calculateDrawOverlap() {\n\n        if (pointIcon != null) {\n            heightOverlap = this.density * pointIcon.getHeight();\n            widthOverlap = this.density * pointIcon.getWidth();\n        } else {\n            heightOverlap = this.density * pointRadius;\n            widthOverlap = this.density * pointRadius;\n        }\n\n        float linePaintHalfStroke = this.density * lineStrokeWidth / 2.0f;\n        heightOverlap = Math.max(heightOverlap, linePaintHalfStroke);\n        widthOverlap = Math.max(widthOverlap, linePaintHalfStroke);\n\n        float polygonPaintHalfStroke = this.density * polygonStrokeWidth / 2.0f;\n        heightOverlap = Math.max(heightOverlap, polygonPaintHalfStroke);\n        widthOverlap = Math.max(widthOverlap, polygonPaintHalfStroke);\n\n        if (featureTableStyles != null && featureTableStyles.has()) {\n\n            // Style Rows\n            Set<Long> styleRowIds = new HashSet<>();\n            List<Long> tableStyleIds = featureTableStyles.getAllTableStyleIds();\n            if (tableStyleIds != null) {\n                styleRowIds.addAll(tableStyleIds);\n            }\n            List<Long> styleIds = featureTableStyles.getAllStyleIds();\n            if (styleIds != null) {\n                styleRowIds.addAll(styleIds);\n            }\n\n            StyleDao styleDao = featureTableStyles.getStyleDao();\n            for (long styleRowId : styleRowIds) {\n                StyleRow styleRow = styleDao.getRow(styleDao.queryForIdRow(styleRowId));\n                float styleHalfWidth = this.density * (float) (styleRow.getWidthOrDefault() / 2.0f);\n                widthOverlap = Math.max(widthOverlap, styleHalfWidth);\n                heightOverlap = Math.max(heightOverlap, styleHalfWidth);\n            }\n\n            // Icon Rows\n            Set<Long> iconRowIds = new HashSet<>();\n            List<Long> tableIconIds = featureTableStyles.getAllTableIconIds();\n            if (tableIconIds != null) {\n                iconRowIds.addAll(tableIconIds);\n            }\n            List<Long> iconIds = featureTableStyles.getAllIconIds();\n            if (iconIds != null) {\n                iconRowIds.addAll(iconIds);\n            }\n\n            IconDao iconDao = featureTableStyles.getIconDao();\n            for (long iconRowId : iconRowIds) {\n                IconRow iconRow = iconDao.getRow(iconDao.queryForIdRow(iconRowId));\n                double[] iconDimensions = iconRow.getDerivedDimensions();\n                float iconWidth = this.density * (float) Math.ceil(iconDimensions[0]);\n                float iconHeight = this.density * (float) Math.ceil(iconDimensions[1]);\n                widthOverlap = Math.max(widthOverlap, iconWidth);\n                heightOverlap = Math.max(heightOverlap, iconHeight);\n            }\n\n        }\n\n    }", "code_tokens": ["public", "void", "calculateDrawOverlap", "(", ")", "{", "if", "(", "pointIcon", "!=", "null", ")", "{", "heightOverlap", "=", "this", ".", "density", "*", "pointIcon", ".", "getHeight", "(", ")", ";", "widthOverlap", "=", "this", ".", "density", "*", "pointIcon", ".", "getWidth", "(", ")", ";", "}", "else", "{", "heightOverlap", "=", "this", ".", "density", "*", "pointRadius", ";", "widthOverlap", "=", "this", ".", "density", "*", "pointRadius", ";", "}", "float", "linePaintHalfStroke", "=", "this", ".", "density", "*", "lineStrokeWidth", "/", "2.0f", ";", "heightOverlap", "=", "Math", ".", "max", "(", "heightOverlap", ",", "linePaintHalfStroke", ")", ";", "widthOverlap", "=", "Math", ".", "max", "(", "widthOverlap", ",", "linePaintHalfStroke", ")", ";", "float", "polygonPaintHalfStroke", "=", "this", ".", "density", "*", "polygonStrokeWidth", "/", "2.0f", ";", "heightOverlap", "=", "Math", ".", "max", "(", "heightOverlap", ",", "polygonPaintHalfStroke", ")", ";", "widthOverlap", "=", "Math", ".", "max", "(", "widthOverlap", ",", "polygonPaintHalfStroke", ")", ";", "if", "(", "featureTableStyles", "!=", "null", "&&", "featureTableStyles", ".", "has", "(", ")", ")", "{", "// Style Rows", "Set", "<", "Long", ">", "styleRowIds", "=", "new", "HashSet", "<>", "(", ")", ";", "List", "<", "Long", ">", "tableStyleIds", "=", "featureTableStyles", ".", "getAllTableStyleIds", "(", ")", ";", "if", "(", "tableStyleIds", "!=", "null", ")", "{", "styleRowIds", ".", "addAll", "(", "tableStyleIds", ")", ";", "}", "List", "<", "Long", ">", "styleIds", "=", "featureTableStyles", ".", "getAllStyleIds", "(", ")", ";", "if", "(", "styleIds", "!=", "null", ")", "{", "styleRowIds", ".", "addAll", "(", "styleIds", ")", ";", "}", "StyleDao", "styleDao", "=", "featureTableStyles", ".", "getStyleDao", "(", ")", ";", "for", "(", "long", "styleRowId", ":", "styleRowIds", ")", "{", "StyleRow", "styleRow", "=", "styleDao", ".", "getRow", "(", "styleDao", ".", "queryForIdRow", "(", "styleRowId", ")", ")", ";", "float", "styleHalfWidth", "=", "this", ".", "density", "*", "(", "float", ")", "(", "styleRow", ".", "getWidthOrDefault", "(", ")", "/", "2.0f", ")", ";", "widthOverlap", "=", "Math", ".", "max", "(", "widthOverlap", ",", "styleHalfWidth", ")", ";", "heightOverlap", "=", "Math", ".", "max", "(", "heightOverlap", ",", "styleHalfWidth", ")", ";", "}", "// Icon Rows", "Set", "<", "Long", ">", "iconRowIds", "=", "new", "HashSet", "<>", "(", ")", ";", "List", "<", "Long", ">", "tableIconIds", "=", "featureTableStyles", ".", "getAllTableIconIds", "(", ")", ";", "if", "(", "tableIconIds", "!=", "null", ")", "{", "iconRowIds", ".", "addAll", "(", "tableIconIds", ")", ";", "}", "List", "<", "Long", ">", "iconIds", "=", "featureTableStyles", ".", "getAllIconIds", "(", ")", ";", "if", "(", "iconIds", "!=", "null", ")", "{", "iconRowIds", ".", "addAll", "(", "iconIds", ")", ";", "}", "IconDao", "iconDao", "=", "featureTableStyles", ".", "getIconDao", "(", ")", ";", "for", "(", "long", "iconRowId", ":", "iconRowIds", ")", "{", "IconRow", "iconRow", "=", "iconDao", ".", "getRow", "(", "iconDao", ".", "queryForIdRow", "(", "iconRowId", ")", ")", ";", "double", "[", "]", "iconDimensions", "=", "iconRow", ".", "getDerivedDimensions", "(", ")", ";", "float", "iconWidth", "=", "this", ".", "density", "*", "(", "float", ")", "Math", ".", "ceil", "(", "iconDimensions", "[", "0", "]", ")", ";", "float", "iconHeight", "=", "this", ".", "density", "*", "(", "float", ")", "Math", ".", "ceil", "(", "iconDimensions", "[", "1", "]", ")", ";", "widthOverlap", "=", "Math", ".", "max", "(", "widthOverlap", ",", "iconWidth", ")", ";", "heightOverlap", "=", "Math", ".", "max", "(", "heightOverlap", ",", "iconHeight", ")", ";", "}", "}", "}"], "docstring": "Call after making changes to the point icon, point radius, or paint stroke widths.\nDetermines the pixel overlap between tiles", "docstring_tokens": ["Call", "after", "making", "changes", "to", "the", "point", "icon", "point", "radius", "or", "paint", "stroke", "widths", ".", "Determines", "the", "pixel", "overlap", "between", "tiles"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L357-L419", "partition": "test", "index": 5993, "time": "2015-04-14 07:14:44"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java", "func_name": "TileGenerator.adjustGeoPackageBoundsWGS84", "original_string": "private void adjustGeoPackageBoundsWGS84(BoundingBox boundingBox, int zoom) {\n        // Get the fitting tile grid and determine the bounding box that fits it\n        TileGrid tileGrid = TileBoundingBoxUtils.getTileGridWGS84(boundingBox, zoom);\n        tileGridBoundingBox = TileBoundingBoxUtils.getWGS84BoundingBox(tileGrid, zoom);\n        matrixWidth = tileGrid.getMaxX() + 1 - tileGrid.getMinX();\n        matrixHeight = tileGrid.getMaxY() + 1 - tileGrid.getMinY();\n    }", "language": "java", "code": "private void adjustGeoPackageBoundsWGS84(BoundingBox boundingBox, int zoom) {\n        // Get the fitting tile grid and determine the bounding box that fits it\n        TileGrid tileGrid = TileBoundingBoxUtils.getTileGridWGS84(boundingBox, zoom);\n        tileGridBoundingBox = TileBoundingBoxUtils.getWGS84BoundingBox(tileGrid, zoom);\n        matrixWidth = tileGrid.getMaxX() + 1 - tileGrid.getMinX();\n        matrixHeight = tileGrid.getMaxY() + 1 - tileGrid.getMinY();\n    }", "code_tokens": ["private", "void", "adjustGeoPackageBoundsWGS84", "(", "BoundingBox", "boundingBox", ",", "int", "zoom", ")", "{", "// Get the fitting tile grid and determine the bounding box that fits it", "TileGrid", "tileGrid", "=", "TileBoundingBoxUtils", ".", "getTileGridWGS84", "(", "boundingBox", ",", "zoom", ")", ";", "tileGridBoundingBox", "=", "TileBoundingBoxUtils", ".", "getWGS84BoundingBox", "(", "tileGrid", ",", "zoom", ")", ";", "matrixWidth", "=", "tileGrid", ".", "getMaxX", "(", ")", "+", "1", "-", "tileGrid", ".", "getMinX", "(", ")", ";", "matrixHeight", "=", "tileGrid", ".", "getMaxY", "(", ")", "+", "1", "-", "tileGrid", ".", "getMinY", "(", ")", ";", "}"], "docstring": "Adjust the tile matrix set and WGS84 bounds for GeoPackage format.\nDetermine the tile grid width and height\n\n@param boundingBox\n@param zoom", "docstring_tokens": ["Adjust", "the", "tile", "matrix", "set", "and", "WGS84", "bounds", "for", "GeoPackage", "format", ".", "Determine", "the", "tile", "grid", "width", "and", "height"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java#L539-L545", "partition": "test", "index": 5933, "time": "2015-04-14 14:30:56"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java", "func_name": "TileGenerator.setBitmapCompressionConfig", "original_string": "public void setBitmapCompressionConfig(Config config) {\n        if (options == null) {\n            options = new Options();\n        }\n        options.inPreferredConfig = config;\n    }", "language": "java", "code": "public void setBitmapCompressionConfig(Config config) {\n        if (options == null) {\n            options = new Options();\n        }\n        options.inPreferredConfig = config;\n    }", "code_tokens": ["public", "void", "setBitmapCompressionConfig", "(", "Config", "config", ")", "{", "if", "(", "options", "==", "null", ")", "{", "options", "=", "new", "Options", "(", ")", ";", "}", "options", ".", "inPreferredConfig", "=", "config", ";", "}"], "docstring": "Set the Bitmap Compress Config\n\n@param config bitmap config", "docstring_tokens": ["Set", "the", "Bitmap", "Compress", "Config"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java#L296-L301", "partition": "test", "index": 5929, "time": "2015-04-14 14:30:56"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java", "func_name": "TileGenerator.getTileCount", "original_string": "public int getTileCount() {\n        if (tileCount == null) {\n            long count = 0;\n\n            boolean degrees = projection.isUnit(Units.DEGREES);\n            ProjectionTransform transformToWebMercator = null;\n            if (!degrees) {\n                transformToWebMercator = projection.getTransformation(ProjectionConstants.EPSG_WEB_MERCATOR);\n            }\n\n            for (int zoom = minZoom; zoom <= maxZoom; zoom++) {\n\n                BoundingBox expandedBoundingBox = getBoundingBox(zoom);\n\n                // Get the tile grid that includes the entire bounding box\n                TileGrid tileGrid = null;\n                if (degrees) {\n                    tileGrid = TileBoundingBoxUtils.getTileGridWGS84(expandedBoundingBox, zoom);\n                } else {\n                    tileGrid = TileBoundingBoxUtils.getTileGrid(expandedBoundingBox.transform(transformToWebMercator), zoom);\n                }\n\n                count += tileGrid.count();\n                tileGrids.put(zoom, tileGrid);\n                tileBounds.put(zoom, expandedBoundingBox);\n            }\n\n            tileCount = (int) Math.min(count, Integer.MAX_VALUE);\n        }\n        return tileCount;\n    }", "language": "java", "code": "public int getTileCount() {\n        if (tileCount == null) {\n            long count = 0;\n\n            boolean degrees = projection.isUnit(Units.DEGREES);\n            ProjectionTransform transformToWebMercator = null;\n            if (!degrees) {\n                transformToWebMercator = projection.getTransformation(ProjectionConstants.EPSG_WEB_MERCATOR);\n            }\n\n            for (int zoom = minZoom; zoom <= maxZoom; zoom++) {\n\n                BoundingBox expandedBoundingBox = getBoundingBox(zoom);\n\n                // Get the tile grid that includes the entire bounding box\n                TileGrid tileGrid = null;\n                if (degrees) {\n                    tileGrid = TileBoundingBoxUtils.getTileGridWGS84(expandedBoundingBox, zoom);\n                } else {\n                    tileGrid = TileBoundingBoxUtils.getTileGrid(expandedBoundingBox.transform(transformToWebMercator), zoom);\n                }\n\n                count += tileGrid.count();\n                tileGrids.put(zoom, tileGrid);\n                tileBounds.put(zoom, expandedBoundingBox);\n            }\n\n            tileCount = (int) Math.min(count, Integer.MAX_VALUE);\n        }\n        return tileCount;\n    }", "code_tokens": ["public", "int", "getTileCount", "(", ")", "{", "if", "(", "tileCount", "==", "null", ")", "{", "long", "count", "=", "0", ";", "boolean", "degrees", "=", "projection", ".", "isUnit", "(", "Units", ".", "DEGREES", ")", ";", "ProjectionTransform", "transformToWebMercator", "=", "null", ";", "if", "(", "!", "degrees", ")", "{", "transformToWebMercator", "=", "projection", ".", "getTransformation", "(", "ProjectionConstants", ".", "EPSG_WEB_MERCATOR", ")", ";", "}", "for", "(", "int", "zoom", "=", "minZoom", ";", "zoom", "<=", "maxZoom", ";", "zoom", "++", ")", "{", "BoundingBox", "expandedBoundingBox", "=", "getBoundingBox", "(", "zoom", ")", ";", "// Get the tile grid that includes the entire bounding box", "TileGrid", "tileGrid", "=", "null", ";", "if", "(", "degrees", ")", "{", "tileGrid", "=", "TileBoundingBoxUtils", ".", "getTileGridWGS84", "(", "expandedBoundingBox", ",", "zoom", ")", ";", "}", "else", "{", "tileGrid", "=", "TileBoundingBoxUtils", ".", "getTileGrid", "(", "expandedBoundingBox", ".", "transform", "(", "transformToWebMercator", ")", ",", "zoom", ")", ";", "}", "count", "+=", "tileGrid", ".", "count", "(", ")", ";", "tileGrids", ".", "put", "(", "zoom", ",", "tileGrid", ")", ";", "tileBounds", ".", "put", "(", "zoom", ",", "expandedBoundingBox", ")", ";", "}", "tileCount", "=", "(", "int", ")", "Math", ".", "min", "(", "count", ",", "Integer", ".", "MAX_VALUE", ")", ";", "}", "return", "tileCount", ";", "}"], "docstring": "Get the tile count of tiles to be generated\n\n@return tile count", "docstring_tokens": ["Get", "the", "tile", "count", "of", "tiles", "to", "be", "generated"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java#L348-L378", "partition": "test", "index": 5930, "time": "2015-04-14 14:30:56"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java", "func_name": "TileGenerator.adjustBounds", "original_string": "private void adjustBounds(BoundingBox boundingBox,\n                              int zoom) {\n        // Google Tile Format\n        if (googleTiles) {\n            adjustGoogleBounds();\n        } else if (projection.isUnit(Units.DEGREES)) {\n            adjustGeoPackageBoundsWGS84(boundingBox, zoom);\n        } else {\n            adjustGeoPackageBounds(boundingBox, zoom);\n        }\n    }", "language": "java", "code": "private void adjustBounds(BoundingBox boundingBox,\n                              int zoom) {\n        // Google Tile Format\n        if (googleTiles) {\n            adjustGoogleBounds();\n        } else if (projection.isUnit(Units.DEGREES)) {\n            adjustGeoPackageBoundsWGS84(boundingBox, zoom);\n        } else {\n            adjustGeoPackageBounds(boundingBox, zoom);\n        }\n    }", "code_tokens": ["private", "void", "adjustBounds", "(", "BoundingBox", "boundingBox", ",", "int", "zoom", ")", "{", "// Google Tile Format", "if", "(", "googleTiles", ")", "{", "adjustGoogleBounds", "(", ")", ";", "}", "else", "if", "(", "projection", ".", "isUnit", "(", "Units", ".", "DEGREES", ")", ")", "{", "adjustGeoPackageBoundsWGS84", "(", "boundingBox", ",", "zoom", ")", ";", "}", "else", "{", "adjustGeoPackageBounds", "(", "boundingBox", ",", "zoom", ")", ";", "}", "}"], "docstring": "Adjust the tile matrix set and bounds\n\n@param boundingBox bounding box\n@param zoom        zoom", "docstring_tokens": ["Adjust", "the", "tile", "matrix", "set", "and", "bounds"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java#L506-L516", "partition": "test", "index": 5931, "time": "2015-04-14 14:30:56"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java", "func_name": "TileGenerator.adjustGoogleBounds", "original_string": "private void adjustGoogleBounds() {\n        // Set the tile matrix set bounding box to be the world\n        BoundingBox standardWgs84Box = new BoundingBox(-ProjectionConstants.WGS84_HALF_WORLD_LON_WIDTH,\n                ProjectionConstants.WEB_MERCATOR_MIN_LAT_RANGE,\n                ProjectionConstants.WGS84_HALF_WORLD_LON_WIDTH,\n                ProjectionConstants.WEB_MERCATOR_MAX_LAT_RANGE);\n        ProjectionTransform wgs84ToWebMercatorTransform = ProjectionFactory.getProjection(ProjectionConstants.EPSG_WORLD_GEODETIC_SYSTEM)\n                .getTransformation(ProjectionConstants.EPSG_WEB_MERCATOR);\n        tileGridBoundingBox = standardWgs84Box.transform(wgs84ToWebMercatorTransform);\n    }", "language": "java", "code": "private void adjustGoogleBounds() {\n        // Set the tile matrix set bounding box to be the world\n        BoundingBox standardWgs84Box = new BoundingBox(-ProjectionConstants.WGS84_HALF_WORLD_LON_WIDTH,\n                ProjectionConstants.WEB_MERCATOR_MIN_LAT_RANGE,\n                ProjectionConstants.WGS84_HALF_WORLD_LON_WIDTH,\n                ProjectionConstants.WEB_MERCATOR_MAX_LAT_RANGE);\n        ProjectionTransform wgs84ToWebMercatorTransform = ProjectionFactory.getProjection(ProjectionConstants.EPSG_WORLD_GEODETIC_SYSTEM)\n                .getTransformation(ProjectionConstants.EPSG_WEB_MERCATOR);\n        tileGridBoundingBox = standardWgs84Box.transform(wgs84ToWebMercatorTransform);\n    }", "code_tokens": ["private", "void", "adjustGoogleBounds", "(", ")", "{", "// Set the tile matrix set bounding box to be the world", "BoundingBox", "standardWgs84Box", "=", "new", "BoundingBox", "(", "-", "ProjectionConstants", ".", "WGS84_HALF_WORLD_LON_WIDTH", ",", "ProjectionConstants", ".", "WEB_MERCATOR_MIN_LAT_RANGE", ",", "ProjectionConstants", ".", "WGS84_HALF_WORLD_LON_WIDTH", ",", "ProjectionConstants", ".", "WEB_MERCATOR_MAX_LAT_RANGE", ")", ";", "ProjectionTransform", "wgs84ToWebMercatorTransform", "=", "ProjectionFactory", ".", "getProjection", "(", "ProjectionConstants", ".", "EPSG_WORLD_GEODETIC_SYSTEM", ")", ".", "getTransformation", "(", "ProjectionConstants", ".", "EPSG_WEB_MERCATOR", ")", ";", "tileGridBoundingBox", "=", "standardWgs84Box", ".", "transform", "(", "wgs84ToWebMercatorTransform", ")", ";", "}"], "docstring": "Adjust the tile matrix set and web mercator bounds for Google tile format", "docstring_tokens": ["Adjust", "the", "tile", "matrix", "set", "and", "web", "mercator", "bounds", "for", "Google", "tile", "format"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java#L521-L530", "partition": "test", "index": 5932, "time": "2015-04-14 14:30:56"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java", "func_name": "TileGenerator.adjustGeoPackageBounds", "original_string": "private void adjustGeoPackageBounds(\n            BoundingBox requestWebMercatorBoundingBox, int zoom) {\n        // Get the fitting tile grid and determine the bounding box that\n        // fits it\n        TileGrid tileGrid = TileBoundingBoxUtils.getTileGrid(\n                requestWebMercatorBoundingBox, zoom);\n        tileGridBoundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBox(tileGrid, zoom);\n        matrixWidth = tileGrid.getMaxX() + 1 - tileGrid.getMinX();\n        matrixHeight = tileGrid.getMaxY() + 1 - tileGrid.getMinY();\n    }", "language": "java", "code": "private void adjustGeoPackageBounds(\n            BoundingBox requestWebMercatorBoundingBox, int zoom) {\n        // Get the fitting tile grid and determine the bounding box that\n        // fits it\n        TileGrid tileGrid = TileBoundingBoxUtils.getTileGrid(\n                requestWebMercatorBoundingBox, zoom);\n        tileGridBoundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBox(tileGrid, zoom);\n        matrixWidth = tileGrid.getMaxX() + 1 - tileGrid.getMinX();\n        matrixHeight = tileGrid.getMaxY() + 1 - tileGrid.getMinY();\n    }", "code_tokens": ["private", "void", "adjustGeoPackageBounds", "(", "BoundingBox", "requestWebMercatorBoundingBox", ",", "int", "zoom", ")", "{", "// Get the fitting tile grid and determine the bounding box that", "// fits it", "TileGrid", "tileGrid", "=", "TileBoundingBoxUtils", ".", "getTileGrid", "(", "requestWebMercatorBoundingBox", ",", "zoom", ")", ";", "tileGridBoundingBox", "=", "TileBoundingBoxUtils", ".", "getWebMercatorBoundingBox", "(", "tileGrid", ",", "zoom", ")", ";", "matrixWidth", "=", "tileGrid", ".", "getMaxX", "(", ")", "+", "1", "-", "tileGrid", ".", "getMinX", "(", ")", ";", "matrixHeight", "=", "tileGrid", ".", "getMaxY", "(", ")", "+", "1", "-", "tileGrid", ".", "getMinY", "(", ")", ";", "}"], "docstring": "Adjust the tile matrix set and web mercator bounds for GeoPackage format.\nDetermine the tile grid width and height\n\n@param requestWebMercatorBoundingBox\n@param zoom", "docstring_tokens": ["Adjust", "the", "tile", "matrix", "set", "and", "web", "mercator", "bounds", "for", "GeoPackage", "format", ".", "Determine", "the", "tile", "grid", "width", "and", "height"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileGenerator.java#L554-L563", "partition": "test", "index": 5934, "time": "2015-04-14 14:30:56"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserDao.java", "func_name": "UserDao.update", "original_string": "public int update(ContentValues values, String whereClause,\n                      String[] whereArgs) {\n        return db.update(getTableName(), values, whereClause, whereArgs);\n    }", "language": "java", "code": "public int update(ContentValues values, String whereClause,\n                      String[] whereArgs) {\n        return db.update(getTableName(), values, whereClause, whereArgs);\n    }", "code_tokens": ["public", "int", "update", "(", "ContentValues", "values", ",", "String", "whereClause", ",", "String", "[", "]", "whereArgs", ")", "{", "return", "db", ".", "update", "(", "getTableName", "(", ")", ",", "values", ",", "whereClause", ",", "whereArgs", ")", ";", "}"], "docstring": "Update all rows matching the where clause with the provided values\n\n@param values      content values\n@param whereClause where clause\n@param whereArgs   where arguments\n@return updated rows", "docstring_tokens": ["Update", "all", "rows", "matching", "the", "where", "clause", "with", "the", "provided", "values"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserDao.java#L165-L168", "partition": "test", "index": 5977, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java", "func_name": "GeometryMetadataDataSource.createGeometryMetadata", "original_string": "public static GeometryMetadata createGeometryMetadata(Cursor cursor) {\n        GeometryMetadata metadata = new GeometryMetadata();\n        metadata.setGeoPackageId(cursor.getLong(0));\n        metadata.setTableName(cursor.getString(1));\n        metadata.setId(cursor.getLong(2));\n        metadata.setMinX(cursor.getDouble(3));\n        metadata.setMaxX(cursor.getDouble(4));\n        metadata.setMinY(cursor.getDouble(5));\n        metadata.setMaxY(cursor.getDouble(6));\n        if (!cursor.isNull(7)) {\n            metadata.setMinZ(cursor.getDouble(7));\n        }\n        if (!cursor.isNull(8)) {\n            metadata.setMaxZ(cursor.getDouble(8));\n        }\n        if (!cursor.isNull(9)) {\n            metadata.setMinM(cursor.getDouble(9));\n        }\n        if (!cursor.isNull(10)) {\n            metadata.setMaxM(cursor.getDouble(10));\n        }\n        return metadata;\n    }", "language": "java", "code": "public static GeometryMetadata createGeometryMetadata(Cursor cursor) {\n        GeometryMetadata metadata = new GeometryMetadata();\n        metadata.setGeoPackageId(cursor.getLong(0));\n        metadata.setTableName(cursor.getString(1));\n        metadata.setId(cursor.getLong(2));\n        metadata.setMinX(cursor.getDouble(3));\n        metadata.setMaxX(cursor.getDouble(4));\n        metadata.setMinY(cursor.getDouble(5));\n        metadata.setMaxY(cursor.getDouble(6));\n        if (!cursor.isNull(7)) {\n            metadata.setMinZ(cursor.getDouble(7));\n        }\n        if (!cursor.isNull(8)) {\n            metadata.setMaxZ(cursor.getDouble(8));\n        }\n        if (!cursor.isNull(9)) {\n            metadata.setMinM(cursor.getDouble(9));\n        }\n        if (!cursor.isNull(10)) {\n            metadata.setMaxM(cursor.getDouble(10));\n        }\n        return metadata;\n    }", "code_tokens": ["public", "static", "GeometryMetadata", "createGeometryMetadata", "(", "Cursor", "cursor", ")", "{", "GeometryMetadata", "metadata", "=", "new", "GeometryMetadata", "(", ")", ";", "metadata", ".", "setGeoPackageId", "(", "cursor", ".", "getLong", "(", "0", ")", ")", ";", "metadata", ".", "setTableName", "(", "cursor", ".", "getString", "(", "1", ")", ")", ";", "metadata", ".", "setId", "(", "cursor", ".", "getLong", "(", "2", ")", ")", ";", "metadata", ".", "setMinX", "(", "cursor", ".", "getDouble", "(", "3", ")", ")", ";", "metadata", ".", "setMaxX", "(", "cursor", ".", "getDouble", "(", "4", ")", ")", ";", "metadata", ".", "setMinY", "(", "cursor", ".", "getDouble", "(", "5", ")", ")", ";", "metadata", ".", "setMaxY", "(", "cursor", ".", "getDouble", "(", "6", ")", ")", ";", "if", "(", "!", "cursor", ".", "isNull", "(", "7", ")", ")", "{", "metadata", ".", "setMinZ", "(", "cursor", ".", "getDouble", "(", "7", ")", ")", ";", "}", "if", "(", "!", "cursor", ".", "isNull", "(", "8", ")", ")", "{", "metadata", ".", "setMaxZ", "(", "cursor", ".", "getDouble", "(", "8", ")", ")", ";", "}", "if", "(", "!", "cursor", ".", "isNull", "(", "9", ")", ")", "{", "metadata", ".", "setMinM", "(", "cursor", ".", "getDouble", "(", "9", ")", ")", ";", "}", "if", "(", "!", "cursor", ".", "isNull", "(", "10", ")", ")", "{", "metadata", ".", "setMaxM", "(", "cursor", ".", "getDouble", "(", "10", ")", ")", ";", "}", "return", "metadata", ";", "}"], "docstring": "Create a geometry metadata from the current cursor location\n\n@param cursor cursor\n@return geometry metadata", "docstring_tokens": ["Create", "a", "geometry", "metadata", "from", "the", "current", "cursor", "location"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java#L636-L658", "partition": "test", "index": 5976, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.deleteTile", "original_string": "public int deleteTile(long column, long row, long zoomLevel) {\n\n        StringBuilder where = new StringBuilder();\n\n        where.append(buildWhere(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel));\n\n        where.append(\" AND \");\n        where.append(buildWhere(TileTable.COLUMN_TILE_COLUMN, column));\n\n        where.append(\" AND \");\n        where.append(buildWhere(TileTable.COLUMN_TILE_ROW, row));\n\n        String[] whereArgs = buildWhereArgs(new Object[]{zoomLevel, column,\n                row});\n\n        int deleted = delete(where.toString(), whereArgs);\n\n        return deleted;\n    }", "language": "java", "code": "public int deleteTile(long column, long row, long zoomLevel) {\n\n        StringBuilder where = new StringBuilder();\n\n        where.append(buildWhere(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel));\n\n        where.append(\" AND \");\n        where.append(buildWhere(TileTable.COLUMN_TILE_COLUMN, column));\n\n        where.append(\" AND \");\n        where.append(buildWhere(TileTable.COLUMN_TILE_ROW, row));\n\n        String[] whereArgs = buildWhereArgs(new Object[]{zoomLevel, column,\n                row});\n\n        int deleted = delete(where.toString(), whereArgs);\n\n        return deleted;\n    }", "code_tokens": ["public", "int", "deleteTile", "(", "long", "column", ",", "long", "row", ",", "long", "zoomLevel", ")", "{", "StringBuilder", "where", "=", "new", "StringBuilder", "(", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "TileTable", ".", "COLUMN_ZOOM_LEVEL", ",", "zoomLevel", ")", ")", ";", "where", ".", "append", "(", "\" AND \"", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "TileTable", ".", "COLUMN_TILE_COLUMN", ",", "column", ")", ")", ";", "where", ".", "append", "(", "\" AND \"", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "TileTable", ".", "COLUMN_TILE_ROW", ",", "row", ")", ")", ";", "String", "[", "]", "whereArgs", "=", "buildWhereArgs", "(", "new", "Object", "[", "]", "{", "zoomLevel", ",", "column", ",", "row", "}", ")", ";", "int", "deleted", "=", "delete", "(", "where", ".", "toString", "(", ")", ",", "whereArgs", ")", ";", "return", "deleted", ";", "}"], "docstring": "Delete a Tile\n\n@param column    column\n@param row       row\n@param zoomLevel zoom level\n@return number deleted, should be 0 or 1", "docstring_tokens": ["Delete", "a", "Tile"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L518-L536", "partition": "test", "index": 5942, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java", "func_name": "GeometryMetadataDataSource.createOrUpdate", "original_string": "public boolean createOrUpdate(GeometryMetadata metadata) {\n\n        boolean success = false;\n\n        if (exists(metadata)) {\n            success = update(metadata);\n        } else {\n            create(metadata);\n            success = true;\n        }\n\n        return success;\n    }", "language": "java", "code": "public boolean createOrUpdate(GeometryMetadata metadata) {\n\n        boolean success = false;\n\n        if (exists(metadata)) {\n            success = update(metadata);\n        } else {\n            create(metadata);\n            success = true;\n        }\n\n        return success;\n    }", "code_tokens": ["public", "boolean", "createOrUpdate", "(", "GeometryMetadata", "metadata", ")", "{", "boolean", "success", "=", "false", ";", "if", "(", "exists", "(", "metadata", ")", ")", "{", "success", "=", "update", "(", "metadata", ")", ";", "}", "else", "{", "create", "(", "metadata", ")", ";", "success", "=", "true", ";", "}", "return", "success", ";", "}"], "docstring": "Create the geometry metadata or update if it already exists\n\n@param metadata geometry metadata\n@return created flag", "docstring_tokens": ["Create", "the", "geometry", "metadata", "or", "update", "if", "it", "already", "exists"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java#L256-L268", "partition": "test", "index": 5973, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.queryForTile", "original_string": "public TileRow queryForTile(long column, long row, long zoomLevel) {\n\n        Map<String, Object> fieldValues = new HashMap<String, Object>();\n        fieldValues.put(TileTable.COLUMN_TILE_COLUMN, column);\n        fieldValues.put(TileTable.COLUMN_TILE_ROW, row);\n        fieldValues.put(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel);\n\n        TileCursor cursor = queryForFieldValues(fieldValues);\n        TileRow tileRow = null;\n        try {\n            if (cursor.moveToNext()) {\n                tileRow = cursor.getRow();\n            }\n        } finally {\n            cursor.close();\n        }\n\n        return tileRow;\n    }", "language": "java", "code": "public TileRow queryForTile(long column, long row, long zoomLevel) {\n\n        Map<String, Object> fieldValues = new HashMap<String, Object>();\n        fieldValues.put(TileTable.COLUMN_TILE_COLUMN, column);\n        fieldValues.put(TileTable.COLUMN_TILE_ROW, row);\n        fieldValues.put(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel);\n\n        TileCursor cursor = queryForFieldValues(fieldValues);\n        TileRow tileRow = null;\n        try {\n            if (cursor.moveToNext()) {\n                tileRow = cursor.getRow();\n            }\n        } finally {\n            cursor.close();\n        }\n\n        return tileRow;\n    }", "code_tokens": ["public", "TileRow", "queryForTile", "(", "long", "column", ",", "long", "row", ",", "long", "zoomLevel", ")", "{", "Map", "<", "String", ",", "Object", ">", "fieldValues", "=", "new", "HashMap", "<", "String", ",", "Object", ">", "(", ")", ";", "fieldValues", ".", "put", "(", "TileTable", ".", "COLUMN_TILE_COLUMN", ",", "column", ")", ";", "fieldValues", ".", "put", "(", "TileTable", ".", "COLUMN_TILE_ROW", ",", "row", ")", ";", "fieldValues", ".", "put", "(", "TileTable", ".", "COLUMN_ZOOM_LEVEL", ",", "zoomLevel", ")", ";", "TileCursor", "cursor", "=", "queryForFieldValues", "(", "fieldValues", ")", ";", "TileRow", "tileRow", "=", "null", ";", "try", "{", "if", "(", "cursor", ".", "moveToNext", "(", ")", ")", "{", "tileRow", "=", "cursor", ".", "getRow", "(", ")", ";", "}", "}", "finally", "{", "cursor", ".", "close", "(", ")", ";", "}", "return", "tileRow", ";", "}"], "docstring": "Query for a Tile\n\n@param column    column\n@param row       row\n@param zoomLevel zoom level\n@return tile row", "docstring_tokens": ["Query", "for", "a", "Tile"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L259-L277", "partition": "test", "index": 5937, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.queryForTileDescending", "original_string": "public TileCursor queryForTileDescending(long zoomLevel) {\n        return queryForEq(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel, null, null,\n                TileTable.COLUMN_TILE_ROW + \" DESC, \"\n                        + TileTable.COLUMN_TILE_COLUMN + \" DESC\");\n    }", "language": "java", "code": "public TileCursor queryForTileDescending(long zoomLevel) {\n        return queryForEq(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel, null, null,\n                TileTable.COLUMN_TILE_ROW + \" DESC, \"\n                        + TileTable.COLUMN_TILE_COLUMN + \" DESC\");\n    }", "code_tokens": ["public", "TileCursor", "queryForTileDescending", "(", "long", "zoomLevel", ")", "{", "return", "queryForEq", "(", "TileTable", ".", "COLUMN_ZOOM_LEVEL", ",", "zoomLevel", ",", "null", ",", "null", ",", "TileTable", ".", "COLUMN_TILE_ROW", "+", "\" DESC, \"", "+", "TileTable", ".", "COLUMN_TILE_COLUMN", "+", "\" DESC\"", ")", ";", "}"], "docstring": "Query for Tiles at a zoom level in descending row and column order\n\n@param zoomLevel zoom level\n@return tile cursor, should be closed", "docstring_tokens": ["Query", "for", "Tiles", "at", "a", "zoom", "level", "in", "descending", "row", "and", "column", "order"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L295-L299", "partition": "test", "index": 5938, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java", "func_name": "GeometryMetadataDataSource.delete", "original_string": "public int delete(long geoPackageId) {\n        String whereClause = GeometryMetadata.COLUMN_GEOPACKAGE_ID + \" = ?\";\n        String[] whereArgs = new String[]{String.valueOf(geoPackageId)};\n        int deleteCount = db.delete(\n                GeometryMetadata.TABLE_NAME,\n                whereClause, whereArgs);\n        return deleteCount;\n    }", "language": "java", "code": "public int delete(long geoPackageId) {\n        String whereClause = GeometryMetadata.COLUMN_GEOPACKAGE_ID + \" = ?\";\n        String[] whereArgs = new String[]{String.valueOf(geoPackageId)};\n        int deleteCount = db.delete(\n                GeometryMetadata.TABLE_NAME,\n                whereClause, whereArgs);\n        return deleteCount;\n    }", "code_tokens": ["public", "int", "delete", "(", "long", "geoPackageId", ")", "{", "String", "whereClause", "=", "GeometryMetadata", ".", "COLUMN_GEOPACKAGE_ID", "+", "\" = ?\"", ";", "String", "[", "]", "whereArgs", "=", "new", "String", "[", "]", "{", "String", ".", "valueOf", "(", "geoPackageId", ")", "}", ";", "int", "deleteCount", "=", "db", ".", "delete", "(", "GeometryMetadata", ".", "TABLE_NAME", ",", "whereClause", ",", "whereArgs", ")", ";", "return", "deleteCount", ";", "}"], "docstring": "Delete geometry metadata by database\n\n@param geoPackageId GeoPackage id\n@return deleted count", "docstring_tokens": ["Delete", "geometry", "metadata", "by", "database"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java#L182-L189", "partition": "test", "index": 5972, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.count", "original_string": "public int count(long zoomLevel) {\n        String where = buildWhere(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel);\n        String[] whereArgs = buildWhereArgs(zoomLevel);\n        return count(where, whereArgs);\n    }", "language": "java", "code": "public int count(long zoomLevel) {\n        String where = buildWhere(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel);\n        String[] whereArgs = buildWhereArgs(zoomLevel);\n        return count(where, whereArgs);\n    }", "code_tokens": ["public", "int", "count", "(", "long", "zoomLevel", ")", "{", "String", "where", "=", "buildWhere", "(", "TileTable", ".", "COLUMN_ZOOM_LEVEL", ",", "zoomLevel", ")", ";", "String", "[", "]", "whereArgs", "=", "buildWhereArgs", "(", "zoomLevel", ")", ";", "return", "count", "(", "where", ",", "whereArgs", ")", ";", "}"], "docstring": "Count of Tiles at a zoom level\n\n@param zoomLevel zoom level\n@return count", "docstring_tokens": ["Count", "of", "Tiles", "at", "a", "zoom", "level"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L544-L548", "partition": "test", "index": 5943, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.isGoogleTiles", "original_string": "public boolean isGoogleTiles() {\n\n        // Convert the bounding box to wgs84\n        BoundingBox boundingBox = tileMatrixSet.getBoundingBox();\n        BoundingBox wgs84BoundingBox = boundingBox.transform(\n                projection.getTransformation(\n                        ProjectionConstants.EPSG_WORLD_GEODETIC_SYSTEM));\n\n        boolean googleTiles = false;\n\n        // Verify the bounds are the entire world\n        if (wgs84BoundingBox.getMinLatitude() <= ProjectionConstants.WEB_MERCATOR_MIN_LAT_RANGE\n                && wgs84BoundingBox.getMaxLatitude() >= ProjectionConstants.WEB_MERCATOR_MAX_LAT_RANGE\n                && wgs84BoundingBox.getMinLongitude() <= -ProjectionConstants.WGS84_HALF_WORLD_LON_WIDTH\n                && wgs84BoundingBox.getMaxLongitude() >= ProjectionConstants.WGS84_HALF_WORLD_LON_WIDTH) {\n\n            googleTiles = true;\n\n            // Verify each tile matrix is the correct width and height\n            for (TileMatrix tileMatrix : tileMatrices) {\n                long zoomLevel = tileMatrix.getZoomLevel();\n                long tilesPerSide = TileBoundingBoxUtils\n                        .tilesPerSide((int) zoomLevel);\n                if (tileMatrix.getMatrixWidth() != tilesPerSide\n                        || tileMatrix.getMatrixHeight() != tilesPerSide) {\n                    googleTiles = false;\n                    break;\n                }\n            }\n        }\n\n        return googleTiles;\n    }", "language": "java", "code": "public boolean isGoogleTiles() {\n\n        // Convert the bounding box to wgs84\n        BoundingBox boundingBox = tileMatrixSet.getBoundingBox();\n        BoundingBox wgs84BoundingBox = boundingBox.transform(\n                projection.getTransformation(\n                        ProjectionConstants.EPSG_WORLD_GEODETIC_SYSTEM));\n\n        boolean googleTiles = false;\n\n        // Verify the bounds are the entire world\n        if (wgs84BoundingBox.getMinLatitude() <= ProjectionConstants.WEB_MERCATOR_MIN_LAT_RANGE\n                && wgs84BoundingBox.getMaxLatitude() >= ProjectionConstants.WEB_MERCATOR_MAX_LAT_RANGE\n                && wgs84BoundingBox.getMinLongitude() <= -ProjectionConstants.WGS84_HALF_WORLD_LON_WIDTH\n                && wgs84BoundingBox.getMaxLongitude() >= ProjectionConstants.WGS84_HALF_WORLD_LON_WIDTH) {\n\n            googleTiles = true;\n\n            // Verify each tile matrix is the correct width and height\n            for (TileMatrix tileMatrix : tileMatrices) {\n                long zoomLevel = tileMatrix.getZoomLevel();\n                long tilesPerSide = TileBoundingBoxUtils\n                        .tilesPerSide((int) zoomLevel);\n                if (tileMatrix.getMatrixWidth() != tilesPerSide\n                        || tileMatrix.getMatrixHeight() != tilesPerSide) {\n                    googleTiles = false;\n                    break;\n                }\n            }\n        }\n\n        return googleTiles;\n    }", "code_tokens": ["public", "boolean", "isGoogleTiles", "(", ")", "{", "// Convert the bounding box to wgs84", "BoundingBox", "boundingBox", "=", "tileMatrixSet", ".", "getBoundingBox", "(", ")", ";", "BoundingBox", "wgs84BoundingBox", "=", "boundingBox", ".", "transform", "(", "projection", ".", "getTransformation", "(", "ProjectionConstants", ".", "EPSG_WORLD_GEODETIC_SYSTEM", ")", ")", ";", "boolean", "googleTiles", "=", "false", ";", "// Verify the bounds are the entire world", "if", "(", "wgs84BoundingBox", ".", "getMinLatitude", "(", ")", "<=", "ProjectionConstants", ".", "WEB_MERCATOR_MIN_LAT_RANGE", "&&", "wgs84BoundingBox", ".", "getMaxLatitude", "(", ")", ">=", "ProjectionConstants", ".", "WEB_MERCATOR_MAX_LAT_RANGE", "&&", "wgs84BoundingBox", ".", "getMinLongitude", "(", ")", "<=", "-", "ProjectionConstants", ".", "WGS84_HALF_WORLD_LON_WIDTH", "&&", "wgs84BoundingBox", ".", "getMaxLongitude", "(", ")", ">=", "ProjectionConstants", ".", "WGS84_HALF_WORLD_LON_WIDTH", ")", "{", "googleTiles", "=", "true", ";", "// Verify each tile matrix is the correct width and height", "for", "(", "TileMatrix", "tileMatrix", ":", "tileMatrices", ")", "{", "long", "zoomLevel", "=", "tileMatrix", ".", "getZoomLevel", "(", ")", ";", "long", "tilesPerSide", "=", "TileBoundingBoxUtils", ".", "tilesPerSide", "(", "(", "int", ")", "zoomLevel", ")", ";", "if", "(", "tileMatrix", ".", "getMatrixWidth", "(", ")", "!=", "tilesPerSide", "||", "tileMatrix", ".", "getMatrixHeight", "(", ")", "!=", "tilesPerSide", ")", "{", "googleTiles", "=", "false", ";", "break", ";", "}", "}", "}", "return", "googleTiles", ";", "}"], "docstring": "Determine if the tiles are in the Google tile coordinate format\n\n@return google tiles flag", "docstring_tokens": ["Determine", "if", "the", "tiles", "are", "in", "the", "Google", "tile", "coordinate", "format"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L575-L607", "partition": "test", "index": 5944, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java", "func_name": "GeometryMetadataDataSource.populate", "original_string": "public GeometryMetadata populate(long geoPackageId, String tableName, long geomId, GeometryEnvelope envelope) {\n\n        GeometryMetadata metadata = new GeometryMetadata();\n        metadata.setGeoPackageId(geoPackageId);\n        metadata.setTableName(tableName);\n        metadata.setId(geomId);\n        metadata.setMinX(envelope.getMinX());\n        metadata.setMaxX(envelope.getMaxX());\n        metadata.setMinY(envelope.getMinY());\n        metadata.setMaxY(envelope.getMaxY());\n        if (envelope.hasZ()) {\n            metadata.setMinZ(envelope.getMinZ());\n            metadata.setMaxZ(envelope.getMaxZ());\n        }\n        if (envelope.hasM()) {\n            metadata.setMinM(envelope.getMinM());\n            metadata.setMaxM(envelope.getMaxM());\n        }\n        return metadata;\n    }", "language": "java", "code": "public GeometryMetadata populate(long geoPackageId, String tableName, long geomId, GeometryEnvelope envelope) {\n\n        GeometryMetadata metadata = new GeometryMetadata();\n        metadata.setGeoPackageId(geoPackageId);\n        metadata.setTableName(tableName);\n        metadata.setId(geomId);\n        metadata.setMinX(envelope.getMinX());\n        metadata.setMaxX(envelope.getMaxX());\n        metadata.setMinY(envelope.getMinY());\n        metadata.setMaxY(envelope.getMaxY());\n        if (envelope.hasZ()) {\n            metadata.setMinZ(envelope.getMinZ());\n            metadata.setMaxZ(envelope.getMaxZ());\n        }\n        if (envelope.hasM()) {\n            metadata.setMinM(envelope.getMinM());\n            metadata.setMaxM(envelope.getMaxM());\n        }\n        return metadata;\n    }", "code_tokens": ["public", "GeometryMetadata", "populate", "(", "long", "geoPackageId", ",", "String", "tableName", ",", "long", "geomId", ",", "GeometryEnvelope", "envelope", ")", "{", "GeometryMetadata", "metadata", "=", "new", "GeometryMetadata", "(", ")", ";", "metadata", ".", "setGeoPackageId", "(", "geoPackageId", ")", ";", "metadata", ".", "setTableName", "(", "tableName", ")", ";", "metadata", ".", "setId", "(", "geomId", ")", ";", "metadata", ".", "setMinX", "(", "envelope", ".", "getMinX", "(", ")", ")", ";", "metadata", ".", "setMaxX", "(", "envelope", ".", "getMaxX", "(", ")", ")", ";", "metadata", ".", "setMinY", "(", "envelope", ".", "getMinY", "(", ")", ")", ";", "metadata", ".", "setMaxY", "(", "envelope", ".", "getMaxY", "(", ")", ")", ";", "if", "(", "envelope", ".", "hasZ", "(", ")", ")", "{", "metadata", ".", "setMinZ", "(", "envelope", ".", "getMinZ", "(", ")", ")", ";", "metadata", ".", "setMaxZ", "(", "envelope", ".", "getMaxZ", "(", ")", ")", ";", "}", "if", "(", "envelope", ".", "hasM", "(", ")", ")", "{", "metadata", ".", "setMinM", "(", "envelope", ".", "getMinM", "(", ")", ")", ";", "metadata", ".", "setMaxM", "(", "envelope", ".", "getMaxM", "(", ")", ")", ";", "}", "return", "metadata", ";", "}"], "docstring": "Populate a new geometry metadata from an envelope\n\n@param geoPackageId GeoPackage id\n@param tableName    table name\n@param geomId       geometry id\n@param envelope     geometry envelope\n@return geometry metadata", "docstring_tokens": ["Populate", "a", "new", "geometry", "metadata", "from", "an", "envelope"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java#L135-L154", "partition": "test", "index": 5971, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java", "func_name": "GeometryMetadataDataSource.create", "original_string": "public long create(GeometryMetadata metadata) {\n        ContentValues values = new ContentValues();\n        values.put(GeometryMetadata.COLUMN_GEOPACKAGE_ID, metadata.getGeoPackageId());\n        values.put(GeometryMetadata.COLUMN_TABLE_NAME, metadata.getTableName());\n        values.put(GeometryMetadata.COLUMN_ID, metadata.getId());\n        values.put(GeometryMetadata.COLUMN_MIN_X, metadata.getMinX());\n        values.put(GeometryMetadata.COLUMN_MAX_X, metadata.getMaxX());\n        values.put(GeometryMetadata.COLUMN_MIN_Y, metadata.getMinY());\n        values.put(GeometryMetadata.COLUMN_MAX_Y, metadata.getMaxY());\n        values.put(GeometryMetadata.COLUMN_MIN_Z, metadata.getMinZ());\n        values.put(GeometryMetadata.COLUMN_MAX_Z, metadata.getMaxZ());\n        values.put(GeometryMetadata.COLUMN_MIN_M, metadata.getMinM());\n        values.put(GeometryMetadata.COLUMN_MAX_M, metadata.getMaxM());\n        long insertId = db.insert(\n                GeometryMetadata.TABLE_NAME, null,\n                values);\n        if (insertId == -1) {\n            throw new GeoPackageException(\n                    \"Failed to insert geometry metadata. GeoPackage Id: \"\n                            + metadata.getGeoPackageId() + \", Table Name: \"\n                            + metadata.getTableName() + \", Geometry Id: \"\n                            + metadata.getId());\n        }\n        metadata.setId(insertId);\n        return insertId;\n    }", "language": "java", "code": "public long create(GeometryMetadata metadata) {\n        ContentValues values = new ContentValues();\n        values.put(GeometryMetadata.COLUMN_GEOPACKAGE_ID, metadata.getGeoPackageId());\n        values.put(GeometryMetadata.COLUMN_TABLE_NAME, metadata.getTableName());\n        values.put(GeometryMetadata.COLUMN_ID, metadata.getId());\n        values.put(GeometryMetadata.COLUMN_MIN_X, metadata.getMinX());\n        values.put(GeometryMetadata.COLUMN_MAX_X, metadata.getMaxX());\n        values.put(GeometryMetadata.COLUMN_MIN_Y, metadata.getMinY());\n        values.put(GeometryMetadata.COLUMN_MAX_Y, metadata.getMaxY());\n        values.put(GeometryMetadata.COLUMN_MIN_Z, metadata.getMinZ());\n        values.put(GeometryMetadata.COLUMN_MAX_Z, metadata.getMaxZ());\n        values.put(GeometryMetadata.COLUMN_MIN_M, metadata.getMinM());\n        values.put(GeometryMetadata.COLUMN_MAX_M, metadata.getMaxM());\n        long insertId = db.insert(\n                GeometryMetadata.TABLE_NAME, null,\n                values);\n        if (insertId == -1) {\n            throw new GeoPackageException(\n                    \"Failed to insert geometry metadata. GeoPackage Id: \"\n                            + metadata.getGeoPackageId() + \", Table Name: \"\n                            + metadata.getTableName() + \", Geometry Id: \"\n                            + metadata.getId());\n        }\n        metadata.setId(insertId);\n        return insertId;\n    }", "code_tokens": ["public", "long", "create", "(", "GeometryMetadata", "metadata", ")", "{", "ContentValues", "values", "=", "new", "ContentValues", "(", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_GEOPACKAGE_ID", ",", "metadata", ".", "getGeoPackageId", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_TABLE_NAME", ",", "metadata", ".", "getTableName", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_ID", ",", "metadata", ".", "getId", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MIN_X", ",", "metadata", ".", "getMinX", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MAX_X", ",", "metadata", ".", "getMaxX", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MIN_Y", ",", "metadata", ".", "getMinY", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MAX_Y", ",", "metadata", ".", "getMaxY", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MIN_Z", ",", "metadata", ".", "getMinZ", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MAX_Z", ",", "metadata", ".", "getMaxZ", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MIN_M", ",", "metadata", ".", "getMinM", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MAX_M", ",", "metadata", ".", "getMaxM", "(", ")", ")", ";", "long", "insertId", "=", "db", ".", "insert", "(", "GeometryMetadata", ".", "TABLE_NAME", ",", "null", ",", "values", ")", ";", "if", "(", "insertId", "==", "-", "1", ")", "{", "throw", "new", "GeoPackageException", "(", "\"Failed to insert geometry metadata. GeoPackage Id: \"", "+", "metadata", ".", "getGeoPackageId", "(", ")", "+", "\", Table Name: \"", "+", "metadata", ".", "getTableName", "(", ")", "+", "\", Geometry Id: \"", "+", "metadata", ".", "getId", "(", ")", ")", ";", "}", "metadata", ".", "setId", "(", "insertId", ")", ";", "return", "insertId", ";", "}"], "docstring": "Create a new geometry metadata\n\n@param metadata geometry metadata\n@return id", "docstring_tokens": ["Create", "a", "new", "geometry", "metadata"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java#L70-L95", "partition": "test", "index": 5970, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java", "func_name": "GeometryMetadataDataSource.update", "original_string": "public boolean update(GeometryMetadata metadata) {\n        String whereClause = GeometryMetadata.COLUMN_GEOPACKAGE_ID\n                + \" = ? AND \" + GeometryMetadata.COLUMN_TABLE_NAME + \" = ? AND \"\n                + GeometryMetadata.COLUMN_ID + \" = ?\";\n        String[] whereArgs = new String[]{String.valueOf(metadata.getGeoPackageId()), metadata.getTableName(), String.valueOf(metadata.getId())};\n        ContentValues values = new ContentValues();\n        values.put(GeometryMetadata.COLUMN_MIN_X, metadata.getMinX());\n        values.put(GeometryMetadata.COLUMN_MAX_X, metadata.getMaxX());\n        values.put(GeometryMetadata.COLUMN_MIN_Y, metadata.getMinY());\n        values.put(GeometryMetadata.COLUMN_MAX_Y, metadata.getMaxY());\n        values.put(GeometryMetadata.COLUMN_MIN_Z, metadata.getMinZ());\n        values.put(GeometryMetadata.COLUMN_MAX_Z, metadata.getMaxZ());\n        values.put(GeometryMetadata.COLUMN_MIN_M, metadata.getMinM());\n        values.put(GeometryMetadata.COLUMN_MAX_M, metadata.getMaxM());\n        int updateCount = db.update(\n                GeometryMetadata.TABLE_NAME, values,\n                whereClause, whereArgs);\n        return updateCount > 0;\n    }", "language": "java", "code": "public boolean update(GeometryMetadata metadata) {\n        String whereClause = GeometryMetadata.COLUMN_GEOPACKAGE_ID\n                + \" = ? AND \" + GeometryMetadata.COLUMN_TABLE_NAME + \" = ? AND \"\n                + GeometryMetadata.COLUMN_ID + \" = ?\";\n        String[] whereArgs = new String[]{String.valueOf(metadata.getGeoPackageId()), metadata.getTableName(), String.valueOf(metadata.getId())};\n        ContentValues values = new ContentValues();\n        values.put(GeometryMetadata.COLUMN_MIN_X, metadata.getMinX());\n        values.put(GeometryMetadata.COLUMN_MAX_X, metadata.getMaxX());\n        values.put(GeometryMetadata.COLUMN_MIN_Y, metadata.getMinY());\n        values.put(GeometryMetadata.COLUMN_MAX_Y, metadata.getMaxY());\n        values.put(GeometryMetadata.COLUMN_MIN_Z, metadata.getMinZ());\n        values.put(GeometryMetadata.COLUMN_MAX_Z, metadata.getMaxZ());\n        values.put(GeometryMetadata.COLUMN_MIN_M, metadata.getMinM());\n        values.put(GeometryMetadata.COLUMN_MAX_M, metadata.getMaxM());\n        int updateCount = db.update(\n                GeometryMetadata.TABLE_NAME, values,\n                whereClause, whereArgs);\n        return updateCount > 0;\n    }", "code_tokens": ["public", "boolean", "update", "(", "GeometryMetadata", "metadata", ")", "{", "String", "whereClause", "=", "GeometryMetadata", ".", "COLUMN_GEOPACKAGE_ID", "+", "\" = ? AND \"", "+", "GeometryMetadata", ".", "COLUMN_TABLE_NAME", "+", "\" = ? AND \"", "+", "GeometryMetadata", ".", "COLUMN_ID", "+", "\" = ?\"", ";", "String", "[", "]", "whereArgs", "=", "new", "String", "[", "]", "{", "String", ".", "valueOf", "(", "metadata", ".", "getGeoPackageId", "(", ")", ")", ",", "metadata", ".", "getTableName", "(", ")", ",", "String", ".", "valueOf", "(", "metadata", ".", "getId", "(", ")", ")", "}", ";", "ContentValues", "values", "=", "new", "ContentValues", "(", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MIN_X", ",", "metadata", ".", "getMinX", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MAX_X", ",", "metadata", ".", "getMaxX", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MIN_Y", ",", "metadata", ".", "getMinY", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MAX_Y", ",", "metadata", ".", "getMaxY", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MIN_Z", ",", "metadata", ".", "getMinZ", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MAX_Z", ",", "metadata", ".", "getMaxZ", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MIN_M", ",", "metadata", ".", "getMinM", "(", ")", ")", ";", "values", ".", "put", "(", "GeometryMetadata", ".", "COLUMN_MAX_M", ",", "metadata", ".", "getMaxM", "(", ")", ")", ";", "int", "updateCount", "=", "db", ".", "update", "(", "GeometryMetadata", ".", "TABLE_NAME", ",", "values", ",", "whereClause", ",", "whereArgs", ")", ";", "return", "updateCount", ">", "0", ";", "}"], "docstring": "Update the geometry metadata\n\n@param metadata geometry metadata\n@return updated flag", "docstring_tokens": ["Update", "the", "geometry", "metadata"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java#L276-L294", "partition": "test", "index": 5974, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.updateLastIndexed", "original_string": "private void updateLastIndexed(GeoPackageMetadataDb db, long geoPackageId) {\n\n        long indexedTime = (new Date()).getTime();\n\n        TableMetadataDataSource ds = new TableMetadataDataSource(db);\n        if (!ds.updateLastIndexed(geoPackageId, featureDao.getTableName(), indexedTime)) {\n            throw new GeoPackageException(\"Failed to update last indexed time. Table: GeoPackage Id: \"\n                    + geoPackageId + \", Table: \" + featureDao.getTableName() + \", Last Indexed: \" + indexedTime);\n        }\n\n    }", "language": "java", "code": "private void updateLastIndexed(GeoPackageMetadataDb db, long geoPackageId) {\n\n        long indexedTime = (new Date()).getTime();\n\n        TableMetadataDataSource ds = new TableMetadataDataSource(db);\n        if (!ds.updateLastIndexed(geoPackageId, featureDao.getTableName(), indexedTime)) {\n            throw new GeoPackageException(\"Failed to update last indexed time. Table: GeoPackage Id: \"\n                    + geoPackageId + \", Table: \" + featureDao.getTableName() + \", Last Indexed: \" + indexedTime);\n        }\n\n    }", "code_tokens": ["private", "void", "updateLastIndexed", "(", "GeoPackageMetadataDb", "db", ",", "long", "geoPackageId", ")", "{", "long", "indexedTime", "=", "(", "new", "Date", "(", ")", ")", ".", "getTime", "(", ")", ";", "TableMetadataDataSource", "ds", "=", "new", "TableMetadataDataSource", "(", "db", ")", ";", "if", "(", "!", "ds", ".", "updateLastIndexed", "(", "geoPackageId", ",", "featureDao", ".", "getTableName", "(", ")", ",", "indexedTime", ")", ")", "{", "throw", "new", "GeoPackageException", "(", "\"Failed to update last indexed time. Table: GeoPackage Id: \"", "+", "geoPackageId", "+", "\", Table: \"", "+", "featureDao", ".", "getTableName", "(", ")", "+", "\", Last Indexed: \"", "+", "indexedTime", ")", ";", "}", "}"], "docstring": "Update the least indexed time\n\n@param db           metadata db\n@param geoPackageId GeoPackage id", "docstring_tokens": ["Update", "the", "least", "indexed", "time"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L289-L299", "partition": "test", "index": 6113, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.createGeoPackageMetadata", "original_string": "private GeoPackageMetadata createGeoPackageMetadata(Cursor cursor) {\n        GeoPackageMetadata metadata = new GeoPackageMetadata();\n        metadata.setId(cursor.getLong(0));\n        metadata.setName(cursor.getString(1));\n        metadata.setExternalPath(cursor.getString(2));\n        return metadata;\n    }", "language": "java", "code": "private GeoPackageMetadata createGeoPackageMetadata(Cursor cursor) {\n        GeoPackageMetadata metadata = new GeoPackageMetadata();\n        metadata.setId(cursor.getLong(0));\n        metadata.setName(cursor.getString(1));\n        metadata.setExternalPath(cursor.getString(2));\n        return metadata;\n    }", "code_tokens": ["private", "GeoPackageMetadata", "createGeoPackageMetadata", "(", "Cursor", "cursor", ")", "{", "GeoPackageMetadata", "metadata", "=", "new", "GeoPackageMetadata", "(", ")", ";", "metadata", ".", "setId", "(", "cursor", ".", "getLong", "(", "0", ")", ")", ";", "metadata", ".", "setName", "(", "cursor", ".", "getString", "(", "1", ")", ")", ";", "metadata", ".", "setExternalPath", "(", "cursor", ".", "getString", "(", "2", ")", ")", ";", "return", "metadata", ";", "}"], "docstring": "Create a GeoPackage metadata from the current cursor location\n\n@param cursor cursor\n@return GeoPackage metadata", "docstring_tokens": ["Create", "a", "GeoPackage", "metadata", "from", "the", "current", "cursor", "location"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L339-L345", "partition": "test", "index": 6151, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.getFeatureRow", "original_string": "public FeatureRow getFeatureRow(GeometryMetadata geometryMetadata) {\n\n        long geomId = geometryMetadata.getId();\n\n        // Get the row or lock for reading\n        FeatureRow row = featureRowSync.getRowOrLock(geomId);\n        if (row == null) {\n            // Query for the row and set in the sync\n            try {\n                row = featureDao.queryForIdRow(geomId);\n            } finally {\n                featureRowSync.setRow(geomId, row);\n            }\n        }\n\n        return row;\n    }", "language": "java", "code": "public FeatureRow getFeatureRow(GeometryMetadata geometryMetadata) {\n\n        long geomId = geometryMetadata.getId();\n\n        // Get the row or lock for reading\n        FeatureRow row = featureRowSync.getRowOrLock(geomId);\n        if (row == null) {\n            // Query for the row and set in the sync\n            try {\n                row = featureDao.queryForIdRow(geomId);\n            } finally {\n                featureRowSync.setRow(geomId, row);\n            }\n        }\n\n        return row;\n    }", "code_tokens": ["public", "FeatureRow", "getFeatureRow", "(", "GeometryMetadata", "geometryMetadata", ")", "{", "long", "geomId", "=", "geometryMetadata", ".", "getId", "(", ")", ";", "// Get the row or lock for reading", "FeatureRow", "row", "=", "featureRowSync", ".", "getRowOrLock", "(", "geomId", ")", ";", "if", "(", "row", "==", "null", ")", "{", "// Query for the row and set in the sync", "try", "{", "row", "=", "featureDao", ".", "queryForIdRow", "(", "geomId", ")", ";", "}", "finally", "{", "featureRowSync", ".", "setRow", "(", "geomId", ",", "row", ")", ";", "}", "}", "return", "row", ";", "}"], "docstring": "Get the feature row for the Geometry Metadata\n\n@param geometryMetadata geometry metadata\n@return feature row\n@since 1.1.0", "docstring_tokens": ["Get", "the", "feature", "row", "for", "the", "Geometry", "Metadata"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L561-L577", "partition": "test", "index": 6127, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.isExternal", "original_string": "public boolean isExternal(String database) {\n        GeoPackageMetadata metadata = get(database);\n        return get(database) != null && metadata.getExternalPath() != null;\n    }", "language": "java", "code": "public boolean isExternal(String database) {\n        GeoPackageMetadata metadata = get(database);\n        return get(database) != null && metadata.getExternalPath() != null;\n    }", "code_tokens": ["public", "boolean", "isExternal", "(", "String", "database", ")", "{", "GeoPackageMetadata", "metadata", "=", "get", "(", "database", ")", ";", "return", "get", "(", "database", ")", "!=", "null", "&&", "metadata", ".", "getExternalPath", "(", ")", "!=", "null", ";", "}"], "docstring": "Determine if the GeoPackage is external\n\n@param database database name\n@return external flag", "docstring_tokens": ["Determine", "if", "the", "GeoPackage", "is", "external"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L254-L257", "partition": "test", "index": 6146, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.getOrCreate", "original_string": "public GeoPackageMetadata getOrCreate(String geoPackage) {\n        GeoPackageMetadata metadata = get(geoPackage);\n\n        if (metadata == null) {\n            metadata = new GeoPackageMetadata();\n            metadata.setName(geoPackage);\n            create(metadata);\n        }\n\n        return metadata;\n    }", "language": "java", "code": "public GeoPackageMetadata getOrCreate(String geoPackage) {\n        GeoPackageMetadata metadata = get(geoPackage);\n\n        if (metadata == null) {\n            metadata = new GeoPackageMetadata();\n            metadata.setName(geoPackage);\n            create(metadata);\n        }\n\n        return metadata;\n    }", "code_tokens": ["public", "GeoPackageMetadata", "getOrCreate", "(", "String", "geoPackage", ")", "{", "GeoPackageMetadata", "metadata", "=", "get", "(", "geoPackage", ")", ";", "if", "(", "metadata", "==", "null", ")", "{", "metadata", "=", "new", "GeoPackageMetadata", "(", ")", ";", "metadata", ".", "setName", "(", "geoPackage", ")", ";", "create", "(", "metadata", ")", ";", "}", "return", "metadata", ";", "}"], "docstring": "Get GeoPackage metadata or create it if it does not exist\n\n@param geoPackage GeoPackage name\n@return GeoPackage metadata", "docstring_tokens": ["Get", "GeoPackage", "metadata", "or", "create", "it", "if", "it", "does", "not", "exist"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L226-L236", "partition": "test", "index": 6145, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.get", "original_string": "public GeoPackageMetadata get(long id) {\n        GeoPackageMetadata metadata = null;\n        String selection = GeoPackageMetadata.COLUMN_ID + \" = ?\";\n        String[] selectionArgs = new String[]{String.valueOf(id)};\n        Cursor cursor = db.query(\n                GeoPackageMetadata.TABLE_NAME,\n                GeoPackageMetadata.COLUMNS, selection, selectionArgs, null, null, null);\n        try {\n            if (cursor.moveToNext()) {\n                metadata = createGeoPackageMetadata(cursor);\n            }\n        } finally {\n            cursor.close();\n        }\n        return metadata;\n    }", "language": "java", "code": "public GeoPackageMetadata get(long id) {\n        GeoPackageMetadata metadata = null;\n        String selection = GeoPackageMetadata.COLUMN_ID + \" = ?\";\n        String[] selectionArgs = new String[]{String.valueOf(id)};\n        Cursor cursor = db.query(\n                GeoPackageMetadata.TABLE_NAME,\n                GeoPackageMetadata.COLUMNS, selection, selectionArgs, null, null, null);\n        try {\n            if (cursor.moveToNext()) {\n                metadata = createGeoPackageMetadata(cursor);\n            }\n        } finally {\n            cursor.close();\n        }\n        return metadata;\n    }", "code_tokens": ["public", "GeoPackageMetadata", "get", "(", "long", "id", ")", "{", "GeoPackageMetadata", "metadata", "=", "null", ";", "String", "selection", "=", "GeoPackageMetadata", ".", "COLUMN_ID", "+", "\" = ?\"", ";", "String", "[", "]", "selectionArgs", "=", "new", "String", "[", "]", "{", "String", ".", "valueOf", "(", "id", ")", "}", ";", "Cursor", "cursor", "=", "db", ".", "query", "(", "GeoPackageMetadata", ".", "TABLE_NAME", ",", "GeoPackageMetadata", ".", "COLUMNS", ",", "selection", ",", "selectionArgs", ",", "null", ",", "null", ",", "null", ")", ";", "try", "{", "if", "(", "cursor", ".", "moveToNext", "(", ")", ")", "{", "metadata", "=", "createGeoPackageMetadata", "(", "cursor", ")", ";", "}", "}", "finally", "{", "cursor", ".", "close", "(", ")", ";", "}", "return", "metadata", ";", "}"], "docstring": "Get GeoPackage metadata by id\n\n@param id id\n@return GeoPackage metadata", "docstring_tokens": ["Get", "GeoPackage", "metadata", "by", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L203-L218", "partition": "test", "index": 6144, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.get", "original_string": "public GeoPackageMetadata get(String database) {\n        GeoPackageMetadata metadata = null;\n        String selection = GeoPackageMetadata.COLUMN_NAME + \" = ?\";\n        String[] selectionArgs = new String[]{database};\n        Cursor cursor = db.query(\n                GeoPackageMetadata.TABLE_NAME,\n                GeoPackageMetadata.COLUMNS, selection, selectionArgs, null, null, null);\n        try {\n            if (cursor.moveToNext()) {\n                metadata = createGeoPackageMetadata(cursor);\n            }\n        } finally {\n            cursor.close();\n        }\n        return metadata;\n    }", "language": "java", "code": "public GeoPackageMetadata get(String database) {\n        GeoPackageMetadata metadata = null;\n        String selection = GeoPackageMetadata.COLUMN_NAME + \" = ?\";\n        String[] selectionArgs = new String[]{database};\n        Cursor cursor = db.query(\n                GeoPackageMetadata.TABLE_NAME,\n                GeoPackageMetadata.COLUMNS, selection, selectionArgs, null, null, null);\n        try {\n            if (cursor.moveToNext()) {\n                metadata = createGeoPackageMetadata(cursor);\n            }\n        } finally {\n            cursor.close();\n        }\n        return metadata;\n    }", "code_tokens": ["public", "GeoPackageMetadata", "get", "(", "String", "database", ")", "{", "GeoPackageMetadata", "metadata", "=", "null", ";", "String", "selection", "=", "GeoPackageMetadata", ".", "COLUMN_NAME", "+", "\" = ?\"", ";", "String", "[", "]", "selectionArgs", "=", "new", "String", "[", "]", "{", "database", "}", ";", "Cursor", "cursor", "=", "db", ".", "query", "(", "GeoPackageMetadata", ".", "TABLE_NAME", ",", "GeoPackageMetadata", ".", "COLUMNS", ",", "selection", ",", "selectionArgs", ",", "null", ",", "null", ",", "null", ")", ";", "try", "{", "if", "(", "cursor", ".", "moveToNext", "(", ")", ")", "{", "metadata", "=", "createGeoPackageMetadata", "(", "cursor", ")", ";", "}", "}", "finally", "{", "cursor", ".", "close", "(", ")", ";", "}", "return", "metadata", ";", "}"], "docstring": "Get GeoPackage metadata by name\n\n@param database database name\n@return GeoPackage metadata", "docstring_tokens": ["Get", "GeoPackage", "metadata", "by", "name"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L180-L195", "partition": "test", "index": 6143, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.getAll", "original_string": "public List<GeoPackageMetadata> getAll() {\n        List<GeoPackageMetadata> allMetadata = new ArrayList<GeoPackageMetadata>();\n\n        Cursor cursor = db.query(\n                GeoPackageMetadata.TABLE_NAME,\n                GeoPackageMetadata.COLUMNS, null, null, null, null, null);\n        try {\n            while (cursor.moveToNext()) {\n                GeoPackageMetadata metadata = createGeoPackageMetadata(cursor);\n                allMetadata.add(metadata);\n            }\n        } finally {\n            cursor.close();\n        }\n        return allMetadata;\n    }", "language": "java", "code": "public List<GeoPackageMetadata> getAll() {\n        List<GeoPackageMetadata> allMetadata = new ArrayList<GeoPackageMetadata>();\n\n        Cursor cursor = db.query(\n                GeoPackageMetadata.TABLE_NAME,\n                GeoPackageMetadata.COLUMNS, null, null, null, null, null);\n        try {\n            while (cursor.moveToNext()) {\n                GeoPackageMetadata metadata = createGeoPackageMetadata(cursor);\n                allMetadata.add(metadata);\n            }\n        } finally {\n            cursor.close();\n        }\n        return allMetadata;\n    }", "code_tokens": ["public", "List", "<", "GeoPackageMetadata", ">", "getAll", "(", ")", "{", "List", "<", "GeoPackageMetadata", ">", "allMetadata", "=", "new", "ArrayList", "<", "GeoPackageMetadata", ">", "(", ")", ";", "Cursor", "cursor", "=", "db", ".", "query", "(", "GeoPackageMetadata", ".", "TABLE_NAME", ",", "GeoPackageMetadata", ".", "COLUMNS", ",", "null", ",", "null", ",", "null", ",", "null", ",", "null", ")", ";", "try", "{", "while", "(", "cursor", ".", "moveToNext", "(", ")", ")", "{", "GeoPackageMetadata", "metadata", "=", "createGeoPackageMetadata", "(", "cursor", ")", ";", "allMetadata", ".", "add", "(", "metadata", ")", ";", "}", "}", "finally", "{", "cursor", ".", "close", "(", ")", ";", "}", "return", "allMetadata", ";", "}"], "docstring": "Get all GeoPackage metadata\n\n@return all GeoPackage metadata", "docstring_tokens": ["Get", "all", "GeoPackage", "metadata"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L133-L148", "partition": "test", "index": 6142, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.rename", "original_string": "public boolean rename(String name, String newName) {\n        String whereClause = GeoPackageMetadata.COLUMN_NAME + \" = ?\";\n        String[] whereArgs = new String[]{name};\n        ContentValues values = new ContentValues();\n        values.put(GeoPackageMetadata.COLUMN_NAME, newName);\n        int updateCount = db.update(\n                GeoPackageMetadata.TABLE_NAME, values,\n                whereClause, whereArgs);\n        return updateCount > 0;\n    }", "language": "java", "code": "public boolean rename(String name, String newName) {\n        String whereClause = GeoPackageMetadata.COLUMN_NAME + \" = ?\";\n        String[] whereArgs = new String[]{name};\n        ContentValues values = new ContentValues();\n        values.put(GeoPackageMetadata.COLUMN_NAME, newName);\n        int updateCount = db.update(\n                GeoPackageMetadata.TABLE_NAME, values,\n                whereClause, whereArgs);\n        return updateCount > 0;\n    }", "code_tokens": ["public", "boolean", "rename", "(", "String", "name", ",", "String", "newName", ")", "{", "String", "whereClause", "=", "GeoPackageMetadata", ".", "COLUMN_NAME", "+", "\" = ?\"", ";", "String", "[", "]", "whereArgs", "=", "new", "String", "[", "]", "{", "name", "}", ";", "ContentValues", "values", "=", "new", "ContentValues", "(", ")", ";", "values", ".", "put", "(", "GeoPackageMetadata", ".", "COLUMN_NAME", ",", "newName", ")", ";", "int", "updateCount", "=", "db", ".", "update", "(", "GeoPackageMetadata", ".", "TABLE_NAME", ",", "values", ",", "whereClause", ",", "whereArgs", ")", ";", "return", "updateCount", ">", "0", ";", "}"], "docstring": "Rename the GeoPackage name to the new name\n\n@param name    GeoPackage name\n@param newName new name\n@return renamed flag", "docstring_tokens": ["Rename", "the", "GeoPackage", "name", "to", "the", "new", "name"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L117-L126", "partition": "test", "index": 6141, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.rename", "original_string": "public boolean rename(GeoPackageMetadata metadata, String newName) {\n        boolean renamed = rename(metadata.getName(), newName);\n        if (renamed) {\n            metadata.setName(newName);\n        }\n        return renamed;\n    }", "language": "java", "code": "public boolean rename(GeoPackageMetadata metadata, String newName) {\n        boolean renamed = rename(metadata.getName(), newName);\n        if (renamed) {\n            metadata.setName(newName);\n        }\n        return renamed;\n    }", "code_tokens": ["public", "boolean", "rename", "(", "GeoPackageMetadata", "metadata", ",", "String", "newName", ")", "{", "boolean", "renamed", "=", "rename", "(", "metadata", ".", "getName", "(", ")", ",", "newName", ")", ";", "if", "(", "renamed", ")", "{", "metadata", ".", "setName", "(", "newName", ")", ";", "}", "return", "renamed", ";", "}"], "docstring": "Rename the GeoPackage metadata to the new name\n\n@param metadata GeoPackage metadata\n@param newName  new name\n@return renamed flag", "docstring_tokens": ["Rename", "the", "GeoPackage", "metadata", "to", "the", "new", "name"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L102-L108", "partition": "test", "index": 6140, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.delete", "original_string": "public boolean delete(String database) {\n\n        GeoPackageMetadata metadata = get(database);\n        if (metadata != null) {\n            TableMetadataDataSource tableDs = new TableMetadataDataSource(db);\n            tableDs.delete(metadata.getId());\n        }\n\n        String whereClause = GeoPackageMetadata.COLUMN_NAME + \" = ?\";\n        String[] whereArgs = new String[]{database};\n        int deleteCount = db.delete(\n                GeoPackageMetadata.TABLE_NAME,\n                whereClause, whereArgs);\n        return deleteCount > 0;\n    }", "language": "java", "code": "public boolean delete(String database) {\n\n        GeoPackageMetadata metadata = get(database);\n        if (metadata != null) {\n            TableMetadataDataSource tableDs = new TableMetadataDataSource(db);\n            tableDs.delete(metadata.getId());\n        }\n\n        String whereClause = GeoPackageMetadata.COLUMN_NAME + \" = ?\";\n        String[] whereArgs = new String[]{database};\n        int deleteCount = db.delete(\n                GeoPackageMetadata.TABLE_NAME,\n                whereClause, whereArgs);\n        return deleteCount > 0;\n    }", "code_tokens": ["public", "boolean", "delete", "(", "String", "database", ")", "{", "GeoPackageMetadata", "metadata", "=", "get", "(", "database", ")", ";", "if", "(", "metadata", "!=", "null", ")", "{", "TableMetadataDataSource", "tableDs", "=", "new", "TableMetadataDataSource", "(", "db", ")", ";", "tableDs", ".", "delete", "(", "metadata", ".", "getId", "(", ")", ")", ";", "}", "String", "whereClause", "=", "GeoPackageMetadata", ".", "COLUMN_NAME", "+", "\" = ?\"", ";", "String", "[", "]", "whereArgs", "=", "new", "String", "[", "]", "{", "database", "}", ";", "int", "deleteCount", "=", "db", ".", "delete", "(", "GeoPackageMetadata", ".", "TABLE_NAME", ",", "whereClause", ",", "whereArgs", ")", ";", "return", "deleteCount", ">", "0", ";", "}"], "docstring": "Delete the database\n\n@param database database name\n@return deleted flag", "docstring_tokens": ["Delete", "the", "database"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L79-L93", "partition": "test", "index": 6139, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.create", "original_string": "public void create(GeoPackageMetadata metadata) {\n        ContentValues values = new ContentValues();\n        values.put(GeoPackageMetadata.COLUMN_NAME, metadata.getName());\n        values.put(GeoPackageMetadata.COLUMN_EXTERNAL_PATH, metadata.getExternalPath());\n        long insertId = db.insert(\n                GeoPackageMetadata.TABLE_NAME, null,\n                values);\n        if (insertId == -1) {\n            throw new GeoPackageException(\n                    \"Failed to insert GeoPackage metadata. Name: \"\n                            + metadata.getName() + \", External Path: \"\n                            + metadata.getExternalPath());\n        }\n        metadata.setId(insertId);\n    }", "language": "java", "code": "public void create(GeoPackageMetadata metadata) {\n        ContentValues values = new ContentValues();\n        values.put(GeoPackageMetadata.COLUMN_NAME, metadata.getName());\n        values.put(GeoPackageMetadata.COLUMN_EXTERNAL_PATH, metadata.getExternalPath());\n        long insertId = db.insert(\n                GeoPackageMetadata.TABLE_NAME, null,\n                values);\n        if (insertId == -1) {\n            throw new GeoPackageException(\n                    \"Failed to insert GeoPackage metadata. Name: \"\n                            + metadata.getName() + \", External Path: \"\n                            + metadata.getExternalPath());\n        }\n        metadata.setId(insertId);\n    }", "code_tokens": ["public", "void", "create", "(", "GeoPackageMetadata", "metadata", ")", "{", "ContentValues", "values", "=", "new", "ContentValues", "(", ")", ";", "values", ".", "put", "(", "GeoPackageMetadata", ".", "COLUMN_NAME", ",", "metadata", ".", "getName", "(", ")", ")", ";", "values", ".", "put", "(", "GeoPackageMetadata", ".", "COLUMN_EXTERNAL_PATH", ",", "metadata", ".", "getExternalPath", "(", ")", ")", ";", "long", "insertId", "=", "db", ".", "insert", "(", "GeoPackageMetadata", ".", "TABLE_NAME", ",", "null", ",", "values", ")", ";", "if", "(", "insertId", "==", "-", "1", ")", "{", "throw", "new", "GeoPackageException", "(", "\"Failed to insert GeoPackage metadata. Name: \"", "+", "metadata", ".", "getName", "(", ")", "+", "\", External Path: \"", "+", "metadata", ".", "getExternalPath", "(", ")", ")", ";", "}", "metadata", ".", "setId", "(", "insertId", ")", ";", "}"], "docstring": "Create a new GeoPackage metadata\n\n@param metadata GeoPackage metadata", "docstring_tokens": ["Create", "a", "new", "GeoPackage", "metadata"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L47-L61", "partition": "test", "index": 6138, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.drawTileQueryIndex", "original_string": "public Bitmap drawTileQueryIndex(int x, int y, int zoom) {\n\n        // Get the web mercator bounding box\n        BoundingBox webMercatorBoundingBox = TileBoundingBoxUtils\n                .getWebMercatorBoundingBox(x, y, zoom);\n\n        Bitmap bitmap = null;\n\n        // Query for geometries matching the bounds in the index\n        FeatureIndexResults results = queryIndexedFeatures(webMercatorBoundingBox);\n\n        try {\n\n            long tileCount = results.count();\n\n            // Draw if at least one geometry exists\n            if (tileCount > 0) {\n\n                if (maxFeaturesPerTile == null || tileCount <= maxFeaturesPerTile.longValue()) {\n\n                    // Draw the tile bitmap\n                    bitmap = drawTile(zoom, webMercatorBoundingBox, results);\n\n                } else if (maxFeaturesTileDraw != null) {\n\n                    // Draw the max features tile\n                    bitmap = maxFeaturesTileDraw.drawTile(tileWidth, tileHeight, tileCount, results);\n                }\n\n            }\n        } finally {\n            results.close();\n        }\n\n        return bitmap;\n    }", "language": "java", "code": "public Bitmap drawTileQueryIndex(int x, int y, int zoom) {\n\n        // Get the web mercator bounding box\n        BoundingBox webMercatorBoundingBox = TileBoundingBoxUtils\n                .getWebMercatorBoundingBox(x, y, zoom);\n\n        Bitmap bitmap = null;\n\n        // Query for geometries matching the bounds in the index\n        FeatureIndexResults results = queryIndexedFeatures(webMercatorBoundingBox);\n\n        try {\n\n            long tileCount = results.count();\n\n            // Draw if at least one geometry exists\n            if (tileCount > 0) {\n\n                if (maxFeaturesPerTile == null || tileCount <= maxFeaturesPerTile.longValue()) {\n\n                    // Draw the tile bitmap\n                    bitmap = drawTile(zoom, webMercatorBoundingBox, results);\n\n                } else if (maxFeaturesTileDraw != null) {\n\n                    // Draw the max features tile\n                    bitmap = maxFeaturesTileDraw.drawTile(tileWidth, tileHeight, tileCount, results);\n                }\n\n            }\n        } finally {\n            results.close();\n        }\n\n        return bitmap;\n    }", "code_tokens": ["public", "Bitmap", "drawTileQueryIndex", "(", "int", "x", ",", "int", "y", ",", "int", "zoom", ")", "{", "// Get the web mercator bounding box", "BoundingBox", "webMercatorBoundingBox", "=", "TileBoundingBoxUtils", ".", "getWebMercatorBoundingBox", "(", "x", ",", "y", ",", "zoom", ")", ";", "Bitmap", "bitmap", "=", "null", ";", "// Query for geometries matching the bounds in the index", "FeatureIndexResults", "results", "=", "queryIndexedFeatures", "(", "webMercatorBoundingBox", ")", ";", "try", "{", "long", "tileCount", "=", "results", ".", "count", "(", ")", ";", "// Draw if at least one geometry exists", "if", "(", "tileCount", ">", "0", ")", "{", "if", "(", "maxFeaturesPerTile", "==", "null", "||", "tileCount", "<=", "maxFeaturesPerTile", ".", "longValue", "(", ")", ")", "{", "// Draw the tile bitmap", "bitmap", "=", "drawTile", "(", "zoom", ",", "webMercatorBoundingBox", ",", "results", ")", ";", "}", "else", "if", "(", "maxFeaturesTileDraw", "!=", "null", ")", "{", "// Draw the max features tile", "bitmap", "=", "maxFeaturesTileDraw", ".", "drawTile", "(", "tileWidth", ",", "tileHeight", ",", "tileCount", ",", "results", ")", ";", "}", "}", "}", "finally", "{", "results", ".", "close", "(", ")", ";", "}", "return", "bitmap", ";", "}"], "docstring": "Draw a tile bitmap from the x, y, and zoom level by querying features in the tile location\n\n@param x    x coordinate\n@param y    y coordinate\n@param zoom zoom level\n@return drawn bitmap, or null", "docstring_tokens": ["Draw", "a", "tile", "bitmap", "from", "the", "x", "y", "and", "zoom", "level", "by", "querying", "features", "in", "the", "tile", "location"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1082-L1117", "partition": "test", "index": 5999, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.isIndexed", "original_string": "public boolean isIndexed() {\n\n        boolean indexed = false;\n\n        Date lastIndexed = getLastIndexed();\n        if (lastIndexed != null) {\n            Contents contents = featureDao.getGeometryColumns().getContents();\n            Date lastChange = contents.getLastChange();\n            indexed = lastIndexed.equals(lastChange) || lastIndexed.after(lastChange);\n        }\n\n        return indexed;\n    }", "language": "java", "code": "public boolean isIndexed() {\n\n        boolean indexed = false;\n\n        Date lastIndexed = getLastIndexed();\n        if (lastIndexed != null) {\n            Contents contents = featureDao.getGeometryColumns().getContents();\n            Date lastChange = contents.getLastChange();\n            indexed = lastIndexed.equals(lastChange) || lastIndexed.after(lastChange);\n        }\n\n        return indexed;\n    }", "code_tokens": ["public", "boolean", "isIndexed", "(", ")", "{", "boolean", "indexed", "=", "false", ";", "Date", "lastIndexed", "=", "getLastIndexed", "(", ")", ";", "if", "(", "lastIndexed", "!=", "null", ")", "{", "Contents", "contents", "=", "featureDao", ".", "getGeometryColumns", "(", ")", ".", "getContents", "(", ")", ";", "Date", "lastChange", "=", "contents", ".", "getLastChange", "(", ")", ";", "indexed", "=", "lastIndexed", ".", "equals", "(", "lastChange", ")", "||", "lastIndexed", ".", "after", "(", "lastChange", ")", ";", "}", "return", "indexed", ";", "}"], "docstring": "Determine if the database table is indexed after database modifications\n\n@return true if indexed", "docstring_tokens": ["Determine", "if", "the", "database", "table", "is", "indexed", "after", "database", "modifications"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L341-L353", "partition": "test", "index": 6116, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.index", "original_string": "private boolean index(long geoPackageId, FeatureRow row, boolean possibleUpdate) {\n\n        boolean indexed = false;\n\n        GeoPackageGeometryData geomData = row.getGeometry();\n        if (geomData != null) {\n\n            // Get the envelope\n            GeometryEnvelope envelope = geomData.getEnvelope();\n\n            // If no envelope, build one from the geometry\n            if (envelope == null) {\n                Geometry geometry = geomData.getGeometry();\n                if (geometry != null) {\n                    envelope = GeometryEnvelopeBuilder.buildEnvelope(geometry);\n                }\n            }\n\n            // Create the new index row\n            if (envelope != null) {\n                GeometryMetadata metadata = geometryMetadataDataSource.populate(geoPackageId, featureDao.getTableName(), row.getId(), envelope);\n                if (possibleUpdate) {\n                    geometryMetadataDataSource.createOrUpdate(metadata);\n                } else {\n                    geometryMetadataDataSource.create(metadata);\n                }\n                indexed = true;\n            }\n        }\n\n        return indexed;\n    }", "language": "java", "code": "private boolean index(long geoPackageId, FeatureRow row, boolean possibleUpdate) {\n\n        boolean indexed = false;\n\n        GeoPackageGeometryData geomData = row.getGeometry();\n        if (geomData != null) {\n\n            // Get the envelope\n            GeometryEnvelope envelope = geomData.getEnvelope();\n\n            // If no envelope, build one from the geometry\n            if (envelope == null) {\n                Geometry geometry = geomData.getGeometry();\n                if (geometry != null) {\n                    envelope = GeometryEnvelopeBuilder.buildEnvelope(geometry);\n                }\n            }\n\n            // Create the new index row\n            if (envelope != null) {\n                GeometryMetadata metadata = geometryMetadataDataSource.populate(geoPackageId, featureDao.getTableName(), row.getId(), envelope);\n                if (possibleUpdate) {\n                    geometryMetadataDataSource.createOrUpdate(metadata);\n                } else {\n                    geometryMetadataDataSource.create(metadata);\n                }\n                indexed = true;\n            }\n        }\n\n        return indexed;\n    }", "code_tokens": ["private", "boolean", "index", "(", "long", "geoPackageId", ",", "FeatureRow", "row", ",", "boolean", "possibleUpdate", ")", "{", "boolean", "indexed", "=", "false", ";", "GeoPackageGeometryData", "geomData", "=", "row", ".", "getGeometry", "(", ")", ";", "if", "(", "geomData", "!=", "null", ")", "{", "// Get the envelope", "GeometryEnvelope", "envelope", "=", "geomData", ".", "getEnvelope", "(", ")", ";", "// If no envelope, build one from the geometry", "if", "(", "envelope", "==", "null", ")", "{", "Geometry", "geometry", "=", "geomData", ".", "getGeometry", "(", ")", ";", "if", "(", "geometry", "!=", "null", ")", "{", "envelope", "=", "GeometryEnvelopeBuilder", ".", "buildEnvelope", "(", "geometry", ")", ";", "}", "}", "// Create the new index row", "if", "(", "envelope", "!=", "null", ")", "{", "GeometryMetadata", "metadata", "=", "geometryMetadataDataSource", ".", "populate", "(", "geoPackageId", ",", "featureDao", ".", "getTableName", "(", ")", ",", "row", ".", "getId", "(", ")", ",", "envelope", ")", ";", "if", "(", "possibleUpdate", ")", "{", "geometryMetadataDataSource", ".", "createOrUpdate", "(", "metadata", ")", ";", "}", "else", "{", "geometryMetadataDataSource", ".", "create", "(", "metadata", ")", ";", "}", "indexed", "=", "true", ";", "}", "}", "return", "indexed", ";", "}"], "docstring": "Index the feature row\n\n@param geoPackageId   GeoPackage id\n@param row            feature row\n@param possibleUpdate possible update flag\n@return true if indexed", "docstring_tokens": ["Index", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L250-L281", "partition": "test", "index": 6112, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java", "func_name": "TableMetadataDataSource.createTableMetadata", "original_string": "private TableMetadata createTableMetadata(Cursor cursor) {\n        TableMetadata metadata = new TableMetadata();\n        metadata.setGeoPackageId(cursor.getLong(0));\n        metadata.setTableName(cursor.getString(1));\n        if (!cursor.isNull(2)) {\n            metadata.setLastIndexed(cursor.getLong(2));\n        }\n        return metadata;\n    }", "language": "java", "code": "private TableMetadata createTableMetadata(Cursor cursor) {\n        TableMetadata metadata = new TableMetadata();\n        metadata.setGeoPackageId(cursor.getLong(0));\n        metadata.setTableName(cursor.getString(1));\n        if (!cursor.isNull(2)) {\n            metadata.setLastIndexed(cursor.getLong(2));\n        }\n        return metadata;\n    }", "code_tokens": ["private", "TableMetadata", "createTableMetadata", "(", "Cursor", "cursor", ")", "{", "TableMetadata", "metadata", "=", "new", "TableMetadata", "(", ")", ";", "metadata", ".", "setGeoPackageId", "(", "cursor", ".", "getLong", "(", "0", ")", ")", ";", "metadata", ".", "setTableName", "(", "cursor", ".", "getString", "(", "1", ")", ")", ";", "if", "(", "!", "cursor", ".", "isNull", "(", "2", ")", ")", "{", "metadata", ".", "setLastIndexed", "(", "cursor", ".", "getLong", "(", "2", ")", ")", ";", "}", "return", "metadata", ";", "}"], "docstring": "Create a table metadata from the current cursor location\n\n@param cursor cursor\n@return table metadata", "docstring_tokens": ["Create", "a", "table", "metadata", "from", "the", "current", "cursor", "location"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java#L261-L269", "partition": "test", "index": 5913, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java", "func_name": "TableMetadataDataSource.getGeoPackageId", "original_string": "public long getGeoPackageId(String geoPackage) {\n        long id = -1;\n        GeoPackageMetadataDataSource ds = new GeoPackageMetadataDataSource(db);\n        GeoPackageMetadata metadata = ds.get(geoPackage);\n        if (metadata != null) {\n            id = metadata.getId();\n        }\n        return id;\n    }", "language": "java", "code": "public long getGeoPackageId(String geoPackage) {\n        long id = -1;\n        GeoPackageMetadataDataSource ds = new GeoPackageMetadataDataSource(db);\n        GeoPackageMetadata metadata = ds.get(geoPackage);\n        if (metadata != null) {\n            id = metadata.getId();\n        }\n        return id;\n    }", "code_tokens": ["public", "long", "getGeoPackageId", "(", "String", "geoPackage", ")", "{", "long", "id", "=", "-", "1", ";", "GeoPackageMetadataDataSource", "ds", "=", "new", "GeoPackageMetadataDataSource", "(", "db", ")", ";", "GeoPackageMetadata", "metadata", "=", "ds", ".", "get", "(", "geoPackage", ")", ";", "if", "(", "metadata", "!=", "null", ")", "{", "id", "=", "metadata", ".", "getId", "(", ")", ";", "}", "return", "id", ";", "}"], "docstring": "Get a GeoPackage id from the name\n\n@param geoPackage GeoPackage name\n@return id", "docstring_tokens": ["Get", "a", "GeoPackage", "id", "from", "the", "name"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java#L245-L253", "partition": "test", "index": 5912, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java", "func_name": "TableMetadataDataSource.create", "original_string": "public void create(TableMetadata metadata) {\n        ContentValues values = new ContentValues();\n        values.put(TableMetadata.COLUMN_GEOPACKAGE_ID, metadata.getGeoPackageId());\n        values.put(TableMetadata.COLUMN_TABLE_NAME, metadata.getTableName());\n        values.put(TableMetadata.COLUMN_LAST_INDEXED, metadata.getLastIndexed());\n        long insertId = db.insert(\n                TableMetadata.TABLE_NAME, null,\n                values);\n        if (insertId == -1) {\n            throw new GeoPackageException(\n                    \"Failed to insert table metadata. GeoPackage Id: \"\n                            + metadata.getGeoPackageId() + \", Table Name: \"\n                            + metadata.getTableName() + \", Last Indexed: \"\n                            + metadata.getLastIndexed());\n        }\n    }", "language": "java", "code": "public void create(TableMetadata metadata) {\n        ContentValues values = new ContentValues();\n        values.put(TableMetadata.COLUMN_GEOPACKAGE_ID, metadata.getGeoPackageId());\n        values.put(TableMetadata.COLUMN_TABLE_NAME, metadata.getTableName());\n        values.put(TableMetadata.COLUMN_LAST_INDEXED, metadata.getLastIndexed());\n        long insertId = db.insert(\n                TableMetadata.TABLE_NAME, null,\n                values);\n        if (insertId == -1) {\n            throw new GeoPackageException(\n                    \"Failed to insert table metadata. GeoPackage Id: \"\n                            + metadata.getGeoPackageId() + \", Table Name: \"\n                            + metadata.getTableName() + \", Last Indexed: \"\n                            + metadata.getLastIndexed());\n        }\n    }", "code_tokens": ["public", "void", "create", "(", "TableMetadata", "metadata", ")", "{", "ContentValues", "values", "=", "new", "ContentValues", "(", ")", ";", "values", ".", "put", "(", "TableMetadata", ".", "COLUMN_GEOPACKAGE_ID", ",", "metadata", ".", "getGeoPackageId", "(", ")", ")", ";", "values", ".", "put", "(", "TableMetadata", ".", "COLUMN_TABLE_NAME", ",", "metadata", ".", "getTableName", "(", ")", ")", ";", "values", ".", "put", "(", "TableMetadata", ".", "COLUMN_LAST_INDEXED", ",", "metadata", ".", "getLastIndexed", "(", ")", ")", ";", "long", "insertId", "=", "db", ".", "insert", "(", "TableMetadata", ".", "TABLE_NAME", ",", "null", ",", "values", ")", ";", "if", "(", "insertId", "==", "-", "1", ")", "{", "throw", "new", "GeoPackageException", "(", "\"Failed to insert table metadata. GeoPackage Id: \"", "+", "metadata", ".", "getGeoPackageId", "(", ")", "+", "\", Table Name: \"", "+", "metadata", ".", "getTableName", "(", ")", "+", "\", Last Indexed: \"", "+", "metadata", ".", "getLastIndexed", "(", ")", ")", ";", "}", "}"], "docstring": "Create a new table metadata\n\n@param metadata table metadata", "docstring_tokens": ["Create", "a", "new", "table", "metadata"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java#L44-L59", "partition": "test", "index": 5909, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java", "func_name": "TableMetadataDataSource.delete", "original_string": "public boolean delete(long geoPackageId, String tableName) {\n\n        GeometryMetadataDataSource geomDs = new GeometryMetadataDataSource(db);\n        geomDs.delete(geoPackageId, tableName);\n\n        String whereClause = TableMetadata.COLUMN_GEOPACKAGE_ID\n                + \" = ? AND \" + TableMetadata.COLUMN_TABLE_NAME + \" = ?\";\n        String[] whereArgs = new String[]{String.valueOf(geoPackageId), tableName};\n        int deleteCount = db.delete(\n                TableMetadata.TABLE_NAME,\n                whereClause, whereArgs);\n        return deleteCount > 0;\n    }", "language": "java", "code": "public boolean delete(long geoPackageId, String tableName) {\n\n        GeometryMetadataDataSource geomDs = new GeometryMetadataDataSource(db);\n        geomDs.delete(geoPackageId, tableName);\n\n        String whereClause = TableMetadata.COLUMN_GEOPACKAGE_ID\n                + \" = ? AND \" + TableMetadata.COLUMN_TABLE_NAME + \" = ?\";\n        String[] whereArgs = new String[]{String.valueOf(geoPackageId), tableName};\n        int deleteCount = db.delete(\n                TableMetadata.TABLE_NAME,\n                whereClause, whereArgs);\n        return deleteCount > 0;\n    }", "code_tokens": ["public", "boolean", "delete", "(", "long", "geoPackageId", ",", "String", "tableName", ")", "{", "GeometryMetadataDataSource", "geomDs", "=", "new", "GeometryMetadataDataSource", "(", "db", ")", ";", "geomDs", ".", "delete", "(", "geoPackageId", ",", "tableName", ")", ";", "String", "whereClause", "=", "TableMetadata", ".", "COLUMN_GEOPACKAGE_ID", "+", "\" = ? AND \"", "+", "TableMetadata", ".", "COLUMN_TABLE_NAME", "+", "\" = ?\"", ";", "String", "[", "]", "whereArgs", "=", "new", "String", "[", "]", "{", "String", ".", "valueOf", "(", "geoPackageId", ")", ",", "tableName", "}", ";", "int", "deleteCount", "=", "db", ".", "delete", "(", "TableMetadata", ".", "TABLE_NAME", ",", "whereClause", ",", "whereArgs", ")", ";", "return", "deleteCount", ">", "0", ";", "}"], "docstring": "Delete the database table name\n\n@param geoPackageId GeoPackage id\n@param tableName    table name\n@return deleted flag", "docstring_tokens": ["Delete", "the", "database", "table", "name"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java#L118-L130", "partition": "test", "index": 5910, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java", "func_name": "TableMetadataDataSource.getOrCreate", "original_string": "public TableMetadata getOrCreate(String geoPackage, String tableName) {\n\n        GeoPackageMetadataDataSource ds = new GeoPackageMetadataDataSource(db);\n        GeoPackageMetadata geoPackageMetadata = ds.getOrCreate(geoPackage);\n\n        TableMetadata metadata = get(geoPackageMetadata.getId(), tableName);\n\n        if (metadata == null) {\n            metadata = new TableMetadata();\n            metadata.setGeoPackageId(geoPackageMetadata.getId());\n            metadata.setTableName(tableName);\n            create(metadata);\n        }\n        return metadata;\n    }", "language": "java", "code": "public TableMetadata getOrCreate(String geoPackage, String tableName) {\n\n        GeoPackageMetadataDataSource ds = new GeoPackageMetadataDataSource(db);\n        GeoPackageMetadata geoPackageMetadata = ds.getOrCreate(geoPackage);\n\n        TableMetadata metadata = get(geoPackageMetadata.getId(), tableName);\n\n        if (metadata == null) {\n            metadata = new TableMetadata();\n            metadata.setGeoPackageId(geoPackageMetadata.getId());\n            metadata.setTableName(tableName);\n            create(metadata);\n        }\n        return metadata;\n    }", "code_tokens": ["public", "TableMetadata", "getOrCreate", "(", "String", "geoPackage", ",", "String", "tableName", ")", "{", "GeoPackageMetadataDataSource", "ds", "=", "new", "GeoPackageMetadataDataSource", "(", "db", ")", ";", "GeoPackageMetadata", "geoPackageMetadata", "=", "ds", ".", "getOrCreate", "(", "geoPackage", ")", ";", "TableMetadata", "metadata", "=", "get", "(", "geoPackageMetadata", ".", "getId", "(", ")", ",", "tableName", ")", ";", "if", "(", "metadata", "==", "null", ")", "{", "metadata", "=", "new", "TableMetadata", "(", ")", ";", "metadata", ".", "setGeoPackageId", "(", "geoPackageMetadata", ".", "getId", "(", ")", ")", ";", "metadata", ".", "setTableName", "(", "tableName", ")", ";", "create", "(", "metadata", ")", ";", "}", "return", "metadata", ";", "}"], "docstring": "Get a table metadata or create if it does not exist\n\n@param geoPackage GeoPackage name\n@param tableName  table name\n@return table metadata", "docstring_tokens": ["Get", "a", "table", "metadata", "or", "create", "if", "it", "does", "not", "exist"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/TableMetadataDataSource.java#L223-L237", "partition": "test", "index": 5911, "time": "2015-04-16 15:40:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/GeoPackageCache.java", "func_name": "GeoPackageCache.getOrOpen", "original_string": "private GeoPackage getOrOpen(String name, boolean writable, boolean cache) {\n        GeoPackage geoPackage = get(name);\n        if (geoPackage == null) {\n            geoPackage = manager.open(name, writable);\n            if (cache) {\n                add(geoPackage);\n            }\n        }\n        return geoPackage;\n    }", "language": "java", "code": "private GeoPackage getOrOpen(String name, boolean writable, boolean cache) {\n        GeoPackage geoPackage = get(name);\n        if (geoPackage == null) {\n            geoPackage = manager.open(name, writable);\n            if (cache) {\n                add(geoPackage);\n            }\n        }\n        return geoPackage;\n    }", "code_tokens": ["private", "GeoPackage", "getOrOpen", "(", "String", "name", ",", "boolean", "writable", ",", "boolean", "cache", ")", "{", "GeoPackage", "geoPackage", "=", "get", "(", "name", ")", ";", "if", "(", "geoPackage", "==", "null", ")", "{", "geoPackage", "=", "manager", ".", "open", "(", "name", ",", "writable", ")", ";", "if", "(", "cache", ")", "{", "add", "(", "geoPackage", ")", ";", "}", "}", "return", "geoPackage", ";", "}"], "docstring": "Get the cached GeoPackage or open and cache the GeoPackage\n\n@param name     GeoPackage name\n@param writable writable true to open as writable, false as read only\n@param cache    true to cache opened GeoPackages\n@return GeoPackage", "docstring_tokens": ["Get", "the", "cached", "GeoPackage", "or", "open", "and", "cache", "the", "GeoPackage"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/GeoPackageCache.java#L77-L86", "partition": "test", "index": 5950, "time": "2015-09-14 07:21:10"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.count", "original_string": "public int count(BoundingBox boundingBox) {\n        int count = geometryMetadataDataSource.count(featureDao.getDatabase(), featureDao.getTableName(), boundingBox);\n        return count;\n    }", "language": "java", "code": "public int count(BoundingBox boundingBox) {\n        int count = geometryMetadataDataSource.count(featureDao.getDatabase(), featureDao.getTableName(), boundingBox);\n        return count;\n    }", "code_tokens": ["public", "int", "count", "(", "BoundingBox", "boundingBox", ")", "{", "int", "count", "=", "geometryMetadataDataSource", ".", "count", "(", "featureDao", ".", "getDatabase", "(", ")", ",", "featureDao", ".", "getTableName", "(", ")", ",", "boundingBox", ")", ";", "return", "count", ";", "}"], "docstring": "Query for Geometry Metadata count within the bounding box, projected\ncorrectly\n\n@param boundingBox bounding box\n@return count\n@since 1.1.0", "docstring_tokens": ["Query", "for", "Geometry", "Metadata", "count", "within", "the", "bounding", "box", "projected", "correctly"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L444-L447", "partition": "test", "index": 6119, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.deleteIndex", "original_string": "public boolean deleteIndex() {\n        TableMetadataDataSource tableMetadataDataSource = new TableMetadataDataSource(db);\n        boolean deleted = tableMetadataDataSource.delete(featureDao.getDatabase(), featureDao.getTableName());\n        return deleted;\n    }", "language": "java", "code": "public boolean deleteIndex() {\n        TableMetadataDataSource tableMetadataDataSource = new TableMetadataDataSource(db);\n        boolean deleted = tableMetadataDataSource.delete(featureDao.getDatabase(), featureDao.getTableName());\n        return deleted;\n    }", "code_tokens": ["public", "boolean", "deleteIndex", "(", ")", "{", "TableMetadataDataSource", "tableMetadataDataSource", "=", "new", "TableMetadataDataSource", "(", "db", ")", ";", "boolean", "deleted", "=", "tableMetadataDataSource", ".", "delete", "(", "featureDao", ".", "getDatabase", "(", ")", ",", "featureDao", ".", "getTableName", "(", ")", ")", ";", "return", "deleted", ";", "}"], "docstring": "Delete the feature table index\n\n@return true if index deleted\n@since 1.1.0", "docstring_tokens": ["Delete", "the", "feature", "table", "index"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L307-L311", "partition": "test", "index": 6114, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.query", "original_string": "public Cursor query() {\n        Cursor cursor = geometryMetadataDataSource.query(featureDao.getDatabase(), featureDao.getTableName());\n        return cursor;\n    }", "language": "java", "code": "public Cursor query() {\n        Cursor cursor = geometryMetadataDataSource.query(featureDao.getDatabase(), featureDao.getTableName());\n        return cursor;\n    }", "code_tokens": ["public", "Cursor", "query", "(", ")", "{", "Cursor", "cursor", "=", "geometryMetadataDataSource", ".", "query", "(", "featureDao", ".", "getDatabase", "(", ")", ",", "featureDao", ".", "getTableName", "(", ")", ")", ";", "return", "cursor", ";", "}"], "docstring": "Query for all Geometry Metadata\n\n@return geometry metadata cursor\n@since 1.1.0", "docstring_tokens": ["Query", "for", "all", "Geometry", "Metadata"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L380-L383", "partition": "test", "index": 6117, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.query", "original_string": "public Cursor query(BoundingBox boundingBox) {\n        Cursor cursor = geometryMetadataDataSource.query(featureDao.getDatabase(), featureDao.getTableName(), boundingBox);\n        return cursor;\n    }", "language": "java", "code": "public Cursor query(BoundingBox boundingBox) {\n        Cursor cursor = geometryMetadataDataSource.query(featureDao.getDatabase(), featureDao.getTableName(), boundingBox);\n        return cursor;\n    }", "code_tokens": ["public", "Cursor", "query", "(", "BoundingBox", "boundingBox", ")", "{", "Cursor", "cursor", "=", "geometryMetadataDataSource", ".", "query", "(", "featureDao", ".", "getDatabase", "(", ")", ",", "featureDao", ".", "getTableName", "(", ")", ",", "boundingBox", ")", ";", "return", "cursor", ";", "}"], "docstring": "Query for Geometry Metadata within the bounding box, projected\ncorrectly\n\n@param boundingBox bounding box\n@return geometry metadata cursor\n@since 1.1.0", "docstring_tokens": ["Query", "for", "Geometry", "Metadata", "within", "the", "bounding", "box", "projected", "correctly"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L431-L434", "partition": "test", "index": 6118, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/index/FeatureTableIndex.java", "func_name": "FeatureTableIndex.getFeatureRow", "original_string": "public FeatureRow getFeatureRow(GeometryIndex geometryIndex) {\n\n        long geomId = geometryIndex.getGeomId();\n\n        // Get the row or lock for reading\n        FeatureRow row = featureRowSync.getRowOrLock(geomId);\n        if (row == null) {\n            // Query for the row and set in the sync\n            try {\n                row = featureDao.queryForIdRow(geomId);\n            } finally {\n                featureRowSync.setRow(geomId, row);\n            }\n        }\n\n        return row;\n    }", "language": "java", "code": "public FeatureRow getFeatureRow(GeometryIndex geometryIndex) {\n\n        long geomId = geometryIndex.getGeomId();\n\n        // Get the row or lock for reading\n        FeatureRow row = featureRowSync.getRowOrLock(geomId);\n        if (row == null) {\n            // Query for the row and set in the sync\n            try {\n                row = featureDao.queryForIdRow(geomId);\n            } finally {\n                featureRowSync.setRow(geomId, row);\n            }\n        }\n\n        return row;\n    }", "code_tokens": ["public", "FeatureRow", "getFeatureRow", "(", "GeometryIndex", "geometryIndex", ")", "{", "long", "geomId", "=", "geometryIndex", ".", "getGeomId", "(", ")", ";", "// Get the row or lock for reading", "FeatureRow", "row", "=", "featureRowSync", ".", "getRowOrLock", "(", "geomId", ")", ";", "if", "(", "row", "==", "null", ")", "{", "// Query for the row and set in the sync", "try", "{", "row", "=", "featureDao", ".", "queryForIdRow", "(", "geomId", ")", ";", "}", "finally", "{", "featureRowSync", ".", "setRow", "(", "geomId", ",", "row", ")", ";", "}", "}", "return", "row", ";", "}"], "docstring": "Get the feature row for the Geometry Index\n\n@param geometryIndex geometry index\n@return feature row", "docstring_tokens": ["Get", "the", "feature", "row", "for", "the", "Geometry", "Index"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/index/FeatureTableIndex.java#L197-L213", "partition": "test", "index": 5892, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.setProgress", "original_string": "public void setProgress(GeoPackageProgress progress) {\n        featureTableIndex.setProgress(progress);\n        featureIndexer.setProgress(progress);\n        rTreeIndexTableDao.setProgress(progress);\n    }", "language": "java", "code": "public void setProgress(GeoPackageProgress progress) {\n        featureTableIndex.setProgress(progress);\n        featureIndexer.setProgress(progress);\n        rTreeIndexTableDao.setProgress(progress);\n    }", "code_tokens": ["public", "void", "setProgress", "(", "GeoPackageProgress", "progress", ")", "{", "featureTableIndex", ".", "setProgress", "(", "progress", ")", ";", "featureIndexer", ".", "setProgress", "(", "progress", ")", ";", "rTreeIndexTableDao", ".", "setProgress", "(", "progress", ")", ";", "}"], "docstring": "Set the GeoPackage Progress\n\n@param progress GeoPackage progress", "docstring_tokens": ["Set", "the", "GeoPackage", "Progress"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L254-L258", "partition": "test", "index": 6088, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.deleteIndex", "original_string": "public boolean deleteIndex(FeatureIndexType type, long geomId) {\n        if (type == null) {\n            throw new GeoPackageException(\"FeatureIndexType is required to delete index\");\n        }\n        boolean deleted = false;\n        switch (type) {\n            case GEOPACKAGE:\n                deleted = featureTableIndex.deleteIndex(geomId) > 0;\n                break;\n            case METADATA:\n                deleted = featureIndexer.deleteIndex(geomId);\n                break;\n            case RTREE:\n                // Updated by triggers, ignore for RTree\n                deleted = true;\n                break;\n            default:\n                throw new GeoPackageException(\"Unsupported FeatureIndexType: \" + type);\n        }\n        return deleted;\n    }", "language": "java", "code": "public boolean deleteIndex(FeatureIndexType type, long geomId) {\n        if (type == null) {\n            throw new GeoPackageException(\"FeatureIndexType is required to delete index\");\n        }\n        boolean deleted = false;\n        switch (type) {\n            case GEOPACKAGE:\n                deleted = featureTableIndex.deleteIndex(geomId) > 0;\n                break;\n            case METADATA:\n                deleted = featureIndexer.deleteIndex(geomId);\n                break;\n            case RTREE:\n                // Updated by triggers, ignore for RTree\n                deleted = true;\n                break;\n            default:\n                throw new GeoPackageException(\"Unsupported FeatureIndexType: \" + type);\n        }\n        return deleted;\n    }", "code_tokens": ["public", "boolean", "deleteIndex", "(", "FeatureIndexType", "type", ",", "long", "geomId", ")", "{", "if", "(", "type", "==", "null", ")", "{", "throw", "new", "GeoPackageException", "(", "\"FeatureIndexType is required to delete index\"", ")", ";", "}", "boolean", "deleted", "=", "false", ";", "switch", "(", "type", ")", "{", "case", "GEOPACKAGE", ":", "deleted", "=", "featureTableIndex", ".", "deleteIndex", "(", "geomId", ")", ">", "0", ";", "break", ";", "case", "METADATA", ":", "deleted", "=", "featureIndexer", ".", "deleteIndex", "(", "geomId", ")", ";", "break", ";", "case", "RTREE", ":", "// Updated by triggers, ignore for RTree", "deleted", "=", "true", ";", "break", ";", "default", ":", "throw", "new", "GeoPackageException", "(", "\"Unsupported FeatureIndexType: \"", "+", "type", ")", ";", "}", "return", "deleted", ";", "}"], "docstring": "Delete the feature index for the geometry id\n\n@param type   feature index type\n@param geomId geometry id\n@return true if deleted", "docstring_tokens": ["Delete", "the", "feature", "index", "for", "the", "geometry", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L558-L578", "partition": "test", "index": 6094, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.isIndexed", "original_string": "public boolean isIndexed() {\n        boolean indexed = false;\n        for (FeatureIndexType type : indexLocationQueryOrder) {\n            indexed = isIndexed(type);\n            if (indexed) {\n                break;\n            }\n        }\n        return indexed;\n    }", "language": "java", "code": "public boolean isIndexed() {\n        boolean indexed = false;\n        for (FeatureIndexType type : indexLocationQueryOrder) {\n            indexed = isIndexed(type);\n            if (indexed) {\n                break;\n            }\n        }\n        return indexed;\n    }", "code_tokens": ["public", "boolean", "isIndexed", "(", ")", "{", "boolean", "indexed", "=", "false", ";", "for", "(", "FeatureIndexType", "type", ":", "indexLocationQueryOrder", ")", "{", "indexed", "=", "isIndexed", "(", "type", ")", ";", "if", "(", "indexed", ")", "{", "break", ";", "}", "}", "return", "indexed", ";", "}"], "docstring": "Determine if the feature table is indexed\n\n@return true if indexed", "docstring_tokens": ["Determine", "if", "the", "feature", "table", "is", "indexed"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L611-L620", "partition": "test", "index": 6095, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.query", "original_string": "public FeatureIndexResults query() {\n        FeatureIndexResults results = null;\n        switch (getIndexedType()) {\n            case GEOPACKAGE:\n                long count = featureTableIndex.count();\n                CloseableIterator<GeometryIndex> geometryIndices = featureTableIndex.query();\n                results = new FeatureIndexGeoPackageResults(featureTableIndex, count, geometryIndices);\n                break;\n            case METADATA:\n                Cursor geometryMetadata = featureIndexer.query();\n                results = new FeatureIndexMetadataResults(featureIndexer, geometryMetadata);\n                break;\n            case RTREE:\n                UserCustomCursor cursor = rTreeIndexTableDao.queryForAll();\n                results = new FeatureIndexRTreeResults(rTreeIndexTableDao,\n                        cursor);\n                break;\n            default:\n                FeatureCursor featureCursor = featureDao.queryForAll();\n                results = new FeatureIndexFeatureResults(featureCursor);\n        }\n        return results;\n    }", "language": "java", "code": "public FeatureIndexResults query() {\n        FeatureIndexResults results = null;\n        switch (getIndexedType()) {\n            case GEOPACKAGE:\n                long count = featureTableIndex.count();\n                CloseableIterator<GeometryIndex> geometryIndices = featureTableIndex.query();\n                results = new FeatureIndexGeoPackageResults(featureTableIndex, count, geometryIndices);\n                break;\n            case METADATA:\n                Cursor geometryMetadata = featureIndexer.query();\n                results = new FeatureIndexMetadataResults(featureIndexer, geometryMetadata);\n                break;\n            case RTREE:\n                UserCustomCursor cursor = rTreeIndexTableDao.queryForAll();\n                results = new FeatureIndexRTreeResults(rTreeIndexTableDao,\n                        cursor);\n                break;\n            default:\n                FeatureCursor featureCursor = featureDao.queryForAll();\n                results = new FeatureIndexFeatureResults(featureCursor);\n        }\n        return results;\n    }", "code_tokens": ["public", "FeatureIndexResults", "query", "(", ")", "{", "FeatureIndexResults", "results", "=", "null", ";", "switch", "(", "getIndexedType", "(", ")", ")", "{", "case", "GEOPACKAGE", ":", "long", "count", "=", "featureTableIndex", ".", "count", "(", ")", ";", "CloseableIterator", "<", "GeometryIndex", ">", "geometryIndices", "=", "featureTableIndex", ".", "query", "(", ")", ";", "results", "=", "new", "FeatureIndexGeoPackageResults", "(", "featureTableIndex", ",", "count", ",", "geometryIndices", ")", ";", "break", ";", "case", "METADATA", ":", "Cursor", "geometryMetadata", "=", "featureIndexer", ".", "query", "(", ")", ";", "results", "=", "new", "FeatureIndexMetadataResults", "(", "featureIndexer", ",", "geometryMetadata", ")", ";", "break", ";", "case", "RTREE", ":", "UserCustomCursor", "cursor", "=", "rTreeIndexTableDao", ".", "queryForAll", "(", ")", ";", "results", "=", "new", "FeatureIndexRTreeResults", "(", "rTreeIndexTableDao", ",", "cursor", ")", ";", "break", ";", "default", ":", "FeatureCursor", "featureCursor", "=", "featureDao", ".", "queryForAll", "(", ")", ";", "results", "=", "new", "FeatureIndexFeatureResults", "(", "featureCursor", ")", ";", "}", "return", "results", ";", "}"], "docstring": "Query for all feature index results\n\n@return feature index results, close when done", "docstring_tokens": ["Query", "for", "all", "feature", "index", "results"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L718-L740", "partition": "test", "index": 6097, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.count", "original_string": "public long count() {\n        long count = 0;\n        switch (getIndexedType()) {\n            case GEOPACKAGE:\n                count = featureTableIndex.count();\n                break;\n            case METADATA:\n                count = featureIndexer.count();\n                break;\n            case RTREE:\n                count = rTreeIndexTableDao.count();\n                break;\n            default:\n                count = manualFeatureQuery.countWithGeometries();\n        }\n        return count;\n    }", "language": "java", "code": "public long count() {\n        long count = 0;\n        switch (getIndexedType()) {\n            case GEOPACKAGE:\n                count = featureTableIndex.count();\n                break;\n            case METADATA:\n                count = featureIndexer.count();\n                break;\n            case RTREE:\n                count = rTreeIndexTableDao.count();\n                break;\n            default:\n                count = manualFeatureQuery.countWithGeometries();\n        }\n        return count;\n    }", "code_tokens": ["public", "long", "count", "(", ")", "{", "long", "count", "=", "0", ";", "switch", "(", "getIndexedType", "(", ")", ")", "{", "case", "GEOPACKAGE", ":", "count", "=", "featureTableIndex", ".", "count", "(", ")", ";", "break", ";", "case", "METADATA", ":", "count", "=", "featureIndexer", ".", "count", "(", ")", ";", "break", ";", "case", "RTREE", ":", "count", "=", "rTreeIndexTableDao", ".", "count", "(", ")", ";", "break", ";", "default", ":", "count", "=", "manualFeatureQuery", ".", "countWithGeometries", "(", ")", ";", "}", "return", "count", ";", "}"], "docstring": "Query for all feature index count\n\n@return count", "docstring_tokens": ["Query", "for", "all", "feature", "index", "count"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L747-L763", "partition": "test", "index": 6098, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.query", "original_string": "public FeatureIndexResults query(BoundingBox boundingBox, Projection projection) {\n        FeatureIndexResults results = null;\n        switch (getIndexedType()) {\n            case GEOPACKAGE:\n                long count = featureTableIndex.count(boundingBox, projection);\n                CloseableIterator<GeometryIndex> geometryIndices = featureTableIndex.query(boundingBox, projection);\n                results = new FeatureIndexGeoPackageResults(featureTableIndex, count, geometryIndices);\n                break;\n            case METADATA:\n                Cursor geometryMetadata = featureIndexer.query(boundingBox, projection);\n                results = new FeatureIndexMetadataResults(featureIndexer, geometryMetadata);\n                break;\n            case RTREE:\n                UserCustomCursor cursor = rTreeIndexTableDao.query(\n                        boundingBox, projection);\n                results = new FeatureIndexRTreeResults(rTreeIndexTableDao,\n                        cursor);\n                break;\n            default:\n                results = manualFeatureQuery.query(boundingBox, projection);\n        }\n        return results;\n    }", "language": "java", "code": "public FeatureIndexResults query(BoundingBox boundingBox, Projection projection) {\n        FeatureIndexResults results = null;\n        switch (getIndexedType()) {\n            case GEOPACKAGE:\n                long count = featureTableIndex.count(boundingBox, projection);\n                CloseableIterator<GeometryIndex> geometryIndices = featureTableIndex.query(boundingBox, projection);\n                results = new FeatureIndexGeoPackageResults(featureTableIndex, count, geometryIndices);\n                break;\n            case METADATA:\n                Cursor geometryMetadata = featureIndexer.query(boundingBox, projection);\n                results = new FeatureIndexMetadataResults(featureIndexer, geometryMetadata);\n                break;\n            case RTREE:\n                UserCustomCursor cursor = rTreeIndexTableDao.query(\n                        boundingBox, projection);\n                results = new FeatureIndexRTreeResults(rTreeIndexTableDao,\n                        cursor);\n                break;\n            default:\n                results = manualFeatureQuery.query(boundingBox, projection);\n        }\n        return results;\n    }", "code_tokens": ["public", "FeatureIndexResults", "query", "(", "BoundingBox", "boundingBox", ",", "Projection", "projection", ")", "{", "FeatureIndexResults", "results", "=", "null", ";", "switch", "(", "getIndexedType", "(", ")", ")", "{", "case", "GEOPACKAGE", ":", "long", "count", "=", "featureTableIndex", ".", "count", "(", "boundingBox", ",", "projection", ")", ";", "CloseableIterator", "<", "GeometryIndex", ">", "geometryIndices", "=", "featureTableIndex", ".", "query", "(", "boundingBox", ",", "projection", ")", ";", "results", "=", "new", "FeatureIndexGeoPackageResults", "(", "featureTableIndex", ",", "count", ",", "geometryIndices", ")", ";", "break", ";", "case", "METADATA", ":", "Cursor", "geometryMetadata", "=", "featureIndexer", ".", "query", "(", "boundingBox", ",", "projection", ")", ";", "results", "=", "new", "FeatureIndexMetadataResults", "(", "featureIndexer", ",", "geometryMetadata", ")", ";", "break", ";", "case", "RTREE", ":", "UserCustomCursor", "cursor", "=", "rTreeIndexTableDao", ".", "query", "(", "boundingBox", ",", "projection", ")", ";", "results", "=", "new", "FeatureIndexRTreeResults", "(", "rTreeIndexTableDao", ",", "cursor", ")", ";", "break", ";", "default", ":", "results", "=", "manualFeatureQuery", ".", "query", "(", "boundingBox", ",", "projection", ")", ";", "}", "return", "results", ";", "}"], "docstring": "Query for feature index results within the bounding box in\nthe provided projection\n\n@param boundingBox bounding box\n@param projection  projection\n@return feature index results, close when done", "docstring_tokens": ["Query", "for", "feature", "index", "results", "within", "the", "bounding", "box", "in", "the", "provided", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L929-L951", "partition": "test", "index": 6100, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.getIndexedType", "original_string": "private FeatureIndexType getIndexedType() {\n\n        FeatureIndexType indexType = FeatureIndexType.NONE;\n\n        // Check for an indexed type\n        for (FeatureIndexType type : indexLocationQueryOrder) {\n            if (isIndexed(type)) {\n                indexType = type;\n                break;\n            }\n        }\n\n        return indexType;\n    }", "language": "java", "code": "private FeatureIndexType getIndexedType() {\n\n        FeatureIndexType indexType = FeatureIndexType.NONE;\n\n        // Check for an indexed type\n        for (FeatureIndexType type : indexLocationQueryOrder) {\n            if (isIndexed(type)) {\n                indexType = type;\n                break;\n            }\n        }\n\n        return indexType;\n    }", "code_tokens": ["private", "FeatureIndexType", "getIndexedType", "(", ")", "{", "FeatureIndexType", "indexType", "=", "FeatureIndexType", ".", "NONE", ";", "// Check for an indexed type", "for", "(", "FeatureIndexType", "type", ":", "indexLocationQueryOrder", ")", "{", "if", "(", "isIndexed", "(", "type", ")", ")", "{", "indexType", "=", "type", ";", "break", ";", "}", "}", "return", "indexType", ";", "}"], "docstring": "Get the indexed type or throw an error if not indexed", "docstring_tokens": ["Get", "the", "indexed", "type", "or", "throw", "an", "error", "if", "not", "indexed"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L994-L1007", "partition": "test", "index": 6101, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.getFeatureRow", "original_string": "public FeatureRow getFeatureRow(Cursor cursor) {\n        GeometryMetadata geometryMetadata = getGeometryMetadata(cursor);\n        FeatureRow featureRow = getFeatureRow(geometryMetadata);\n        return featureRow;\n    }", "language": "java", "code": "public FeatureRow getFeatureRow(Cursor cursor) {\n        GeometryMetadata geometryMetadata = getGeometryMetadata(cursor);\n        FeatureRow featureRow = getFeatureRow(geometryMetadata);\n        return featureRow;\n    }", "code_tokens": ["public", "FeatureRow", "getFeatureRow", "(", "Cursor", "cursor", ")", "{", "GeometryMetadata", "geometryMetadata", "=", "getGeometryMetadata", "(", "cursor", ")", ";", "FeatureRow", "featureRow", "=", "getFeatureRow", "(", "geometryMetadata", ")", ";", "return", "featureRow", ";", "}"], "docstring": "Get the feature row for the current place in the cursor\n\n@param cursor cursor\n@return feature row\n@since 1.1.0", "docstring_tokens": ["Get", "the", "feature", "row", "for", "the", "current", "place", "in", "the", "cursor"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L548-L552", "partition": "test", "index": 6126, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.getGeometryMetadata", "original_string": "public GeometryMetadata getGeometryMetadata(Cursor cursor) {\n        GeometryMetadata geometryMetadata = GeometryMetadataDataSource.createGeometryMetadata(cursor);\n        return geometryMetadata;\n    }", "language": "java", "code": "public GeometryMetadata getGeometryMetadata(Cursor cursor) {\n        GeometryMetadata geometryMetadata = GeometryMetadataDataSource.createGeometryMetadata(cursor);\n        return geometryMetadata;\n    }", "code_tokens": ["public", "GeometryMetadata", "getGeometryMetadata", "(", "Cursor", "cursor", ")", "{", "GeometryMetadata", "geometryMetadata", "=", "GeometryMetadataDataSource", ".", "createGeometryMetadata", "(", "cursor", ")", ";", "return", "geometryMetadata", ";", "}"], "docstring": "Get the Geometry Metadata for the current place in the cursor\n\n@param cursor cursor\n@return geometry metadata\n@since 1.1.0", "docstring_tokens": ["Get", "the", "Geometry", "Metadata", "for", "the", "current", "place", "in", "the", "cursor"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L536-L539", "partition": "test", "index": 6125, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.getFeatureBoundingBox", "original_string": "private BoundingBox getFeatureBoundingBox(BoundingBox boundingBox,\n                                              Projection projection) {\n        ProjectionTransform projectionTransform = projection\n                .getTransformation(featureDao.getProjection());\n        BoundingBox featureBoundingBox = boundingBox\n                .transform(projectionTransform);\n        return featureBoundingBox;\n    }", "language": "java", "code": "private BoundingBox getFeatureBoundingBox(BoundingBox boundingBox,\n                                              Projection projection) {\n        ProjectionTransform projectionTransform = projection\n                .getTransformation(featureDao.getProjection());\n        BoundingBox featureBoundingBox = boundingBox\n                .transform(projectionTransform);\n        return featureBoundingBox;\n    }", "code_tokens": ["private", "BoundingBox", "getFeatureBoundingBox", "(", "BoundingBox", "boundingBox", ",", "Projection", "projection", ")", "{", "ProjectionTransform", "projectionTransform", "=", "projection", ".", "getTransformation", "(", "featureDao", ".", "getProjection", "(", ")", ")", ";", "BoundingBox", "featureBoundingBox", "=", "boundingBox", ".", "transform", "(", "projectionTransform", ")", ";", "return", "featureBoundingBox", ";", "}"], "docstring": "Get the bounding box in the feature projection from the bounding box in\nthe provided projection\n\n@param boundingBox bounding box\n@param projection  projection\n@return feature projected bounding box", "docstring_tokens": ["Get", "the", "bounding", "box", "in", "the", "feature", "projection", "from", "the", "bounding", "box", "in", "the", "provided", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L520-L527", "partition": "test", "index": 6124, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.count", "original_string": "public long count(BoundingBox boundingBox, Projection projection) {\n\n        BoundingBox featureBoundingBox = getFeatureBoundingBox(boundingBox,\n                projection);\n\n        long count = count(featureBoundingBox);\n\n        return count;\n    }", "language": "java", "code": "public long count(BoundingBox boundingBox, Projection projection) {\n\n        BoundingBox featureBoundingBox = getFeatureBoundingBox(boundingBox,\n                projection);\n\n        long count = count(featureBoundingBox);\n\n        return count;\n    }", "code_tokens": ["public", "long", "count", "(", "BoundingBox", "boundingBox", ",", "Projection", "projection", ")", "{", "BoundingBox", "featureBoundingBox", "=", "getFeatureBoundingBox", "(", "boundingBox", ",", "projection", ")", ";", "long", "count", "=", "count", "(", "featureBoundingBox", ")", ";", "return", "count", ";", "}"], "docstring": "Query for Geometry Metadata count within the bounding box in\nthe provided projection\n\n@param boundingBox bounding box\n@param projection  projection of the provided bounding box\n@return count\n@since 1.1.0", "docstring_tokens": ["Query", "for", "Geometry", "Metadata", "count", "within", "the", "bounding", "box", "in", "the", "provided", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L502-L510", "partition": "test", "index": 6123, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.query", "original_string": "public Cursor query(BoundingBox boundingBox,\n                        Projection projection) {\n\n        BoundingBox featureBoundingBox = getFeatureBoundingBox(boundingBox,\n                projection);\n\n        Cursor cursor = query(featureBoundingBox);\n\n        return cursor;\n    }", "language": "java", "code": "public Cursor query(BoundingBox boundingBox,\n                        Projection projection) {\n\n        BoundingBox featureBoundingBox = getFeatureBoundingBox(boundingBox,\n                projection);\n\n        Cursor cursor = query(featureBoundingBox);\n\n        return cursor;\n    }", "code_tokens": ["public", "Cursor", "query", "(", "BoundingBox", "boundingBox", ",", "Projection", "projection", ")", "{", "BoundingBox", "featureBoundingBox", "=", "getFeatureBoundingBox", "(", "boundingBox", ",", "projection", ")", ";", "Cursor", "cursor", "=", "query", "(", "featureBoundingBox", ")", ";", "return", "cursor", ";", "}"], "docstring": "Query for Geometry Metadata within the bounding box in\nthe provided projection\n\n@param boundingBox bounding box\n@param projection  projection of the provided bounding box\n@return geometry metadata cursor\n@since 1.1.0", "docstring_tokens": ["Query", "for", "Geometry", "Metadata", "within", "the", "bounding", "box", "in", "the", "provided", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L482-L491", "partition": "test", "index": 6122, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.count", "original_string": "public int count(GeometryEnvelope envelope) {\n        int count = geometryMetadataDataSource.count(featureDao.getDatabase(), featureDao.getTableName(), envelope);\n        return count;\n    }", "language": "java", "code": "public int count(GeometryEnvelope envelope) {\n        int count = geometryMetadataDataSource.count(featureDao.getDatabase(), featureDao.getTableName(), envelope);\n        return count;\n    }", "code_tokens": ["public", "int", "count", "(", "GeometryEnvelope", "envelope", ")", "{", "int", "count", "=", "geometryMetadataDataSource", ".", "count", "(", "featureDao", ".", "getDatabase", "(", ")", ",", "featureDao", ".", "getTableName", "(", ")", ",", "envelope", ")", ";", "return", "count", ";", "}"], "docstring": "Query for Geometry Metadata count within the Geometry Envelope\n\n@param envelope geometry envelope\n@return count\n@since 1.1.0", "docstring_tokens": ["Query", "for", "Geometry", "Metadata", "count", "within", "the", "Geometry", "Envelope"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L468-L471", "partition": "test", "index": 6121, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.query", "original_string": "public Cursor query(GeometryEnvelope envelope) {\n        Cursor cursor = geometryMetadataDataSource.query(featureDao.getDatabase(), featureDao.getTableName(), envelope);\n        return cursor;\n    }", "language": "java", "code": "public Cursor query(GeometryEnvelope envelope) {\n        Cursor cursor = geometryMetadataDataSource.query(featureDao.getDatabase(), featureDao.getTableName(), envelope);\n        return cursor;\n    }", "code_tokens": ["public", "Cursor", "query", "(", "GeometryEnvelope", "envelope", ")", "{", "Cursor", "cursor", "=", "geometryMetadataDataSource", ".", "query", "(", "featureDao", ".", "getDatabase", "(", ")", ",", "featureDao", ".", "getTableName", "(", ")", ",", "envelope", ")", ";", "return", "cursor", ";", "}"], "docstring": "Query for Geometry Metadata within the Geometry Envelope\n\n@param envelope geometry envelope\n@return geometry metadata cursor\n@since 1.1.0", "docstring_tokens": ["Query", "for", "Geometry", "Metadata", "within", "the", "Geometry", "Envelope"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L456-L459", "partition": "test", "index": 6120, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java", "func_name": "GeometryMetadataDataSource.count", "original_string": "public int count(String geoPackage, String tableName, BoundingBox boundingBox) {\n        return count(getGeoPackageId(geoPackage), tableName, boundingBox);\n    }", "language": "java", "code": "public int count(String geoPackage, String tableName, BoundingBox boundingBox) {\n        return count(getGeoPackageId(geoPackage), tableName, boundingBox);\n    }", "code_tokens": ["public", "int", "count", "(", "String", "geoPackage", ",", "String", "tableName", ",", "BoundingBox", "boundingBox", ")", "{", "return", "count", "(", "getGeoPackageId", "(", "geoPackage", ")", ",", "tableName", ",", "boundingBox", ")", ";", "}"], "docstring": "Query for all table geometry metadata count matching the bounding box in the same projection\n\n@param geoPackage  GeoPackage name\n@param tableName   table name\n@param boundingBox bounding box\n@return count\n@since 1.1.0", "docstring_tokens": ["Query", "for", "all", "table", "geometry", "metadata", "count", "matching", "the", "bounding", "box", "in", "the", "same", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeometryMetadataDataSource.java#L477-L479", "partition": "test", "index": 5975, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java", "func_name": "FeatureIndexer.deleteIndex", "original_string": "public boolean deleteIndex(long geomId) {\n        boolean deleted = geometryMetadataDataSource.delete(\n                featureDao.getDatabase(), featureDao.getTableName(), geomId);\n        return deleted;\n    }", "language": "java", "code": "public boolean deleteIndex(long geomId) {\n        boolean deleted = geometryMetadataDataSource.delete(\n                featureDao.getDatabase(), featureDao.getTableName(), geomId);\n        return deleted;\n    }", "code_tokens": ["public", "boolean", "deleteIndex", "(", "long", "geomId", ")", "{", "boolean", "deleted", "=", "geometryMetadataDataSource", ".", "delete", "(", "featureDao", ".", "getDatabase", "(", ")", ",", "featureDao", ".", "getTableName", "(", ")", ",", "geomId", ")", ";", "return", "deleted", ";", "}"], "docstring": "Delete the index for the geometry id\n\n@param geomId geometry id\n@return true if deleted", "docstring_tokens": ["Delete", "the", "index", "for", "the", "geometry", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/FeatureIndexer.java#L330-L334", "partition": "test", "index": 6115, "time": "2015-10-02 11:57:02"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/custom/NumberFeaturesTile.java", "func_name": "NumberFeaturesTile.drawTile", "original_string": "private Bitmap drawTile(int tileWidth, int tileHeight, String text) {\n\n        // Create bitmap and canvas\n        Bitmap bitmap = Bitmap.createBitmap(tileWidth,\n                tileHeight, Bitmap.Config.ARGB_8888);\n        Canvas canvas = new Canvas(bitmap);\n\n        // Draw the tile fill paint\n        if (tileFillPaint != null) {\n            canvas.drawRect(0, 0, tileWidth, tileHeight, tileFillPaint);\n        }\n\n        // Draw the tile border\n        if (tileBorderPaint != null) {\n            canvas.drawRect(0, 0, tileWidth, tileHeight, tileBorderPaint);\n        }\n\n        // Determine the text bounds\n        Rect textBounds = new Rect();\n        textPaint.getTextBounds(text, 0, text.length(), textBounds);\n\n        // Determine the center of the tile\n        int centerX = (int) (bitmap.getWidth() / 2.0f);\n        int centerY = (int) (bitmap.getHeight() / 2.0f);\n\n        // Draw the circle\n        if (circlePaint != null || circleFillPaint != null) {\n            int diameter = Math.max(textBounds.width(), textBounds.height());\n            float radius = diameter / 2.0f;\n            radius = radius + (diameter * circlePaddingPercentage);\n\n            // Draw the filled circle\n            if (circleFillPaint != null) {\n                canvas.drawCircle(centerX, centerY, radius, circleFillPaint);\n            }\n\n            // Draw the circle\n            if (circlePaint != null) {\n                canvas.drawCircle(centerX, centerY, radius, circlePaint);\n            }\n\n        }\n\n        // Draw the text\n        canvas.drawText(text, centerX - textBounds.exactCenterX(), centerY - textBounds.exactCenterY(), textPaint);\n\n        return bitmap;\n    }", "language": "java", "code": "private Bitmap drawTile(int tileWidth, int tileHeight, String text) {\n\n        // Create bitmap and canvas\n        Bitmap bitmap = Bitmap.createBitmap(tileWidth,\n                tileHeight, Bitmap.Config.ARGB_8888);\n        Canvas canvas = new Canvas(bitmap);\n\n        // Draw the tile fill paint\n        if (tileFillPaint != null) {\n            canvas.drawRect(0, 0, tileWidth, tileHeight, tileFillPaint);\n        }\n\n        // Draw the tile border\n        if (tileBorderPaint != null) {\n            canvas.drawRect(0, 0, tileWidth, tileHeight, tileBorderPaint);\n        }\n\n        // Determine the text bounds\n        Rect textBounds = new Rect();\n        textPaint.getTextBounds(text, 0, text.length(), textBounds);\n\n        // Determine the center of the tile\n        int centerX = (int) (bitmap.getWidth() / 2.0f);\n        int centerY = (int) (bitmap.getHeight() / 2.0f);\n\n        // Draw the circle\n        if (circlePaint != null || circleFillPaint != null) {\n            int diameter = Math.max(textBounds.width(), textBounds.height());\n            float radius = diameter / 2.0f;\n            radius = radius + (diameter * circlePaddingPercentage);\n\n            // Draw the filled circle\n            if (circleFillPaint != null) {\n                canvas.drawCircle(centerX, centerY, radius, circleFillPaint);\n            }\n\n            // Draw the circle\n            if (circlePaint != null) {\n                canvas.drawCircle(centerX, centerY, radius, circlePaint);\n            }\n\n        }\n\n        // Draw the text\n        canvas.drawText(text, centerX - textBounds.exactCenterX(), centerY - textBounds.exactCenterY(), textPaint);\n\n        return bitmap;\n    }", "code_tokens": ["private", "Bitmap", "drawTile", "(", "int", "tileWidth", ",", "int", "tileHeight", ",", "String", "text", ")", "{", "// Create bitmap and canvas", "Bitmap", "bitmap", "=", "Bitmap", ".", "createBitmap", "(", "tileWidth", ",", "tileHeight", ",", "Bitmap", ".", "Config", ".", "ARGB_8888", ")", ";", "Canvas", "canvas", "=", "new", "Canvas", "(", "bitmap", ")", ";", "// Draw the tile fill paint", "if", "(", "tileFillPaint", "!=", "null", ")", "{", "canvas", ".", "drawRect", "(", "0", ",", "0", ",", "tileWidth", ",", "tileHeight", ",", "tileFillPaint", ")", ";", "}", "// Draw the tile border", "if", "(", "tileBorderPaint", "!=", "null", ")", "{", "canvas", ".", "drawRect", "(", "0", ",", "0", ",", "tileWidth", ",", "tileHeight", ",", "tileBorderPaint", ")", ";", "}", "// Determine the text bounds", "Rect", "textBounds", "=", "new", "Rect", "(", ")", ";", "textPaint", ".", "getTextBounds", "(", "text", ",", "0", ",", "text", ".", "length", "(", ")", ",", "textBounds", ")", ";", "// Determine the center of the tile", "int", "centerX", "=", "(", "int", ")", "(", "bitmap", ".", "getWidth", "(", ")", "/", "2.0f", ")", ";", "int", "centerY", "=", "(", "int", ")", "(", "bitmap", ".", "getHeight", "(", ")", "/", "2.0f", ")", ";", "// Draw the circle", "if", "(", "circlePaint", "!=", "null", "||", "circleFillPaint", "!=", "null", ")", "{", "int", "diameter", "=", "Math", ".", "max", "(", "textBounds", ".", "width", "(", ")", ",", "textBounds", ".", "height", "(", ")", ")", ";", "float", "radius", "=", "diameter", "/", "2.0f", ";", "radius", "=", "radius", "+", "(", "diameter", "*", "circlePaddingPercentage", ")", ";", "// Draw the filled circle", "if", "(", "circleFillPaint", "!=", "null", ")", "{", "canvas", ".", "drawCircle", "(", "centerX", ",", "centerY", ",", "radius", ",", "circleFillPaint", ")", ";", "}", "// Draw the circle", "if", "(", "circlePaint", "!=", "null", ")", "{", "canvas", ".", "drawCircle", "(", "centerX", ",", "centerY", ",", "radius", ",", "circlePaint", ")", ";", "}", "}", "// Draw the text", "canvas", ".", "drawText", "(", "text", ",", "centerX", "-", "textBounds", ".", "exactCenterX", "(", ")", ",", "centerY", "-", "textBounds", ".", "exactCenterY", "(", ")", ",", "textPaint", ")", ";", "return", "bitmap", ";", "}"], "docstring": "Draw a tile with the provided text label in the middle\n\n@param tileWidth  tile width\n@param tileHeight tile height\n@param text       text\n@return tile bitmap", "docstring_tokens": ["Draw", "a", "tile", "with", "the", "provided", "text", "label", "in", "the", "middle"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/custom/NumberFeaturesTile.java#L294-L341", "partition": "test", "index": 5978, "time": "2015-10-05 11:23:53"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.queryIndexedFeaturesCount", "original_string": "public long queryIndexedFeaturesCount(int x, int y, int zoom) {\n\n        // Get the web mercator bounding box\n        BoundingBox webMercatorBoundingBox = TileBoundingBoxUtils\n                .getWebMercatorBoundingBox(x, y, zoom);\n\n        // Query for the count of geometries matching the bounds in the index\n        long count = queryIndexedFeaturesCount(webMercatorBoundingBox);\n\n        return count;\n    }", "language": "java", "code": "public long queryIndexedFeaturesCount(int x, int y, int zoom) {\n\n        // Get the web mercator bounding box\n        BoundingBox webMercatorBoundingBox = TileBoundingBoxUtils\n                .getWebMercatorBoundingBox(x, y, zoom);\n\n        // Query for the count of geometries matching the bounds in the index\n        long count = queryIndexedFeaturesCount(webMercatorBoundingBox);\n\n        return count;\n    }", "code_tokens": ["public", "long", "queryIndexedFeaturesCount", "(", "int", "x", ",", "int", "y", ",", "int", "zoom", ")", "{", "// Get the web mercator bounding box", "BoundingBox", "webMercatorBoundingBox", "=", "TileBoundingBoxUtils", ".", "getWebMercatorBoundingBox", "(", "x", ",", "y", ",", "zoom", ")", ";", "// Query for the count of geometries matching the bounds in the index", "long", "count", "=", "queryIndexedFeaturesCount", "(", "webMercatorBoundingBox", ")", ";", "return", "count", ";", "}"], "docstring": "Query for feature result count in the x, y, and zoom\n\n@param x    x coordinate\n@param y    y coordinate\n@param zoom zoom level\n@return feature count\n@since 1.1.0", "docstring_tokens": ["Query", "for", "feature", "result", "count", "in", "the", "x", "y", "and", "zoom"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1128-L1138", "partition": "test", "index": 6000, "time": "2015-10-07 16:24:06"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.queryIndexedFeatures", "original_string": "public FeatureIndexResults queryIndexedFeatures(BoundingBox webMercatorBoundingBox) {\n\n        // Create an expanded bounding box to handle features outside the tile\n        // that overlap\n        BoundingBox expandedQueryBoundingBox = expandBoundingBox(webMercatorBoundingBox);\n\n        // Query for geometries matching the bounds in the index\n        FeatureIndexResults results = indexManager.query(expandedQueryBoundingBox, WEB_MERCATOR_PROJECTION);\n\n        return results;\n    }", "language": "java", "code": "public FeatureIndexResults queryIndexedFeatures(BoundingBox webMercatorBoundingBox) {\n\n        // Create an expanded bounding box to handle features outside the tile\n        // that overlap\n        BoundingBox expandedQueryBoundingBox = expandBoundingBox(webMercatorBoundingBox);\n\n        // Query for geometries matching the bounds in the index\n        FeatureIndexResults results = indexManager.query(expandedQueryBoundingBox, WEB_MERCATOR_PROJECTION);\n\n        return results;\n    }", "code_tokens": ["public", "FeatureIndexResults", "queryIndexedFeatures", "(", "BoundingBox", "webMercatorBoundingBox", ")", "{", "// Create an expanded bounding box to handle features outside the tile", "// that overlap", "BoundingBox", "expandedQueryBoundingBox", "=", "expandBoundingBox", "(", "webMercatorBoundingBox", ")", ";", "// Query for geometries matching the bounds in the index", "FeatureIndexResults", "results", "=", "indexManager", ".", "query", "(", "expandedQueryBoundingBox", ",", "WEB_MERCATOR_PROJECTION", ")", ";", "return", "results", ";", "}"], "docstring": "Query for feature results in the bounding box\n\n@param webMercatorBoundingBox web mercator bounding box\n@return feature index results\n@since 1.1.0", "docstring_tokens": ["Query", "for", "feature", "results", "in", "the", "bounding", "box"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1189-L1199", "partition": "test", "index": 6003, "time": "2015-10-07 16:24:06"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.queryIndexedFeaturesCount", "original_string": "public long queryIndexedFeaturesCount(BoundingBox webMercatorBoundingBox) {\n\n        // Query for geometries matching the bounds in the index\n        FeatureIndexResults results = queryIndexedFeatures(webMercatorBoundingBox);\n\n        long count = 0;\n\n        try {\n            count = results.count();\n        } finally {\n            results.close();\n        }\n\n        return count;\n    }", "language": "java", "code": "public long queryIndexedFeaturesCount(BoundingBox webMercatorBoundingBox) {\n\n        // Query for geometries matching the bounds in the index\n        FeatureIndexResults results = queryIndexedFeatures(webMercatorBoundingBox);\n\n        long count = 0;\n\n        try {\n            count = results.count();\n        } finally {\n            results.close();\n        }\n\n        return count;\n    }", "code_tokens": ["public", "long", "queryIndexedFeaturesCount", "(", "BoundingBox", "webMercatorBoundingBox", ")", "{", "// Query for geometries matching the bounds in the index", "FeatureIndexResults", "results", "=", "queryIndexedFeatures", "(", "webMercatorBoundingBox", ")", ";", "long", "count", "=", "0", ";", "try", "{", "count", "=", "results", ".", "count", "(", ")", ";", "}", "finally", "{", "results", ".", "close", "(", ")", ";", "}", "return", "count", ";", "}"], "docstring": "Query for feature result count in the bounding box\n\n@param webMercatorBoundingBox web mercator bounding box\n@return feature count\n@since 3.2.0", "docstring_tokens": ["Query", "for", "feature", "result", "count", "in", "the", "bounding", "box"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1147-L1161", "partition": "test", "index": 6001, "time": "2015-10-07 16:24:06"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.getTileGrid", "original_string": "public TileGrid getTileGrid(long zoomLevel) {\n        TileGrid tileGrid = null;\n        TileMatrix tileMatrix = getTileMatrix(zoomLevel);\n        if (tileMatrix != null) {\n            tileGrid = new TileGrid(0, 0, tileMatrix.getMatrixWidth() - 1,\n                    tileMatrix.getMatrixHeight() - 1);\n        }\n        return tileGrid;\n    }", "language": "java", "code": "public TileGrid getTileGrid(long zoomLevel) {\n        TileGrid tileGrid = null;\n        TileMatrix tileMatrix = getTileMatrix(zoomLevel);\n        if (tileMatrix != null) {\n            tileGrid = new TileGrid(0, 0, tileMatrix.getMatrixWidth() - 1,\n                    tileMatrix.getMatrixHeight() - 1);\n        }\n        return tileGrid;\n    }", "code_tokens": ["public", "TileGrid", "getTileGrid", "(", "long", "zoomLevel", ")", "{", "TileGrid", "tileGrid", "=", "null", ";", "TileMatrix", "tileMatrix", "=", "getTileMatrix", "(", "zoomLevel", ")", ";", "if", "(", "tileMatrix", "!=", "null", ")", "{", "tileGrid", "=", "new", "TileGrid", "(", "0", ",", "0", ",", "tileMatrix", ".", "getMatrixWidth", "(", ")", "-", "1", ",", "tileMatrix", ".", "getMatrixHeight", "(", ")", "-", "1", ")", ";", "}", "return", "tileGrid", ";", "}"], "docstring": "Get the tile grid of the zoom level\n\n@param zoomLevel zoom level\n@return tile grid at zoom level, null if not tile matrix at zoom level\n@since 1.1.1", "docstring_tokens": ["Get", "the", "tile", "grid", "of", "the", "zoom", "level"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L169-L177", "partition": "test", "index": 5936, "time": "2015-11-09 16:46:09"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.queryForTileGrid", "original_string": "public TileGrid queryForTileGrid(long zoomLevel) {\n\n        String where = buildWhere(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel);\n        String[] whereArgs = buildWhereArgs(new Object[]{zoomLevel});\n\n        Integer minX = min(TileTable.COLUMN_TILE_COLUMN, where, whereArgs);\n        Integer maxX = max(TileTable.COLUMN_TILE_COLUMN, where, whereArgs);\n        Integer minY = min(TileTable.COLUMN_TILE_ROW, where, whereArgs);\n        Integer maxY = max(TileTable.COLUMN_TILE_ROW, where, whereArgs);\n\n        TileGrid tileGrid = null;\n        if (minX != null && maxX != null && minY != null && maxY != null) {\n            tileGrid = new TileGrid(minX, minY, maxX, maxY);\n        }\n\n        return tileGrid;\n    }", "language": "java", "code": "public TileGrid queryForTileGrid(long zoomLevel) {\n\n        String where = buildWhere(TileTable.COLUMN_ZOOM_LEVEL, zoomLevel);\n        String[] whereArgs = buildWhereArgs(new Object[]{zoomLevel});\n\n        Integer minX = min(TileTable.COLUMN_TILE_COLUMN, where, whereArgs);\n        Integer maxX = max(TileTable.COLUMN_TILE_COLUMN, where, whereArgs);\n        Integer minY = min(TileTable.COLUMN_TILE_ROW, where, whereArgs);\n        Integer maxY = max(TileTable.COLUMN_TILE_ROW, where, whereArgs);\n\n        TileGrid tileGrid = null;\n        if (minX != null && maxX != null && minY != null && maxY != null) {\n            tileGrid = new TileGrid(minX, minY, maxX, maxY);\n        }\n\n        return tileGrid;\n    }", "code_tokens": ["public", "TileGrid", "queryForTileGrid", "(", "long", "zoomLevel", ")", "{", "String", "where", "=", "buildWhere", "(", "TileTable", ".", "COLUMN_ZOOM_LEVEL", ",", "zoomLevel", ")", ";", "String", "[", "]", "whereArgs", "=", "buildWhereArgs", "(", "new", "Object", "[", "]", "{", "zoomLevel", "}", ")", ";", "Integer", "minX", "=", "min", "(", "TileTable", ".", "COLUMN_TILE_COLUMN", ",", "where", ",", "whereArgs", ")", ";", "Integer", "maxX", "=", "max", "(", "TileTable", ".", "COLUMN_TILE_COLUMN", ",", "where", ",", "whereArgs", ")", ";", "Integer", "minY", "=", "min", "(", "TileTable", ".", "COLUMN_TILE_ROW", ",", "where", ",", "whereArgs", ")", ";", "Integer", "maxY", "=", "max", "(", "TileTable", ".", "COLUMN_TILE_ROW", ",", "where", ",", "whereArgs", ")", ";", "TileGrid", "tileGrid", "=", "null", ";", "if", "(", "minX", "!=", "null", "&&", "maxX", "!=", "null", "&&", "minY", "!=", "null", "&&", "maxY", "!=", "null", ")", "{", "tileGrid", "=", "new", "TileGrid", "(", "minX", ",", "minY", ",", "maxX", ",", "maxY", ")", ";", "}", "return", "tileGrid", ";", "}"], "docstring": "Query for the bounding\n\n@param zoomLevel zoom level\n@return tile grid of tiles at the zoom level\n@since 1.1.1", "docstring_tokens": ["Query", "for", "the", "bounding"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L492-L508", "partition": "test", "index": 5941, "time": "2015-11-09 16:46:09"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.getBoundingBox", "original_string": "public BoundingBox getBoundingBox(long zoomLevel) {\n        BoundingBox boundingBox = null;\n        TileMatrix tileMatrix = getTileMatrix(zoomLevel);\n        if (tileMatrix != null) {\n            TileGrid tileGrid = queryForTileGrid(zoomLevel);\n            if (tileGrid != null) {\n                BoundingBox matrixSetBoundingBox = getBoundingBox();\n                boundingBox = TileBoundingBoxUtils.getBoundingBox(\n                        matrixSetBoundingBox, tileMatrix, tileGrid);\n            }\n\n        }\n        return boundingBox;\n    }", "language": "java", "code": "public BoundingBox getBoundingBox(long zoomLevel) {\n        BoundingBox boundingBox = null;\n        TileMatrix tileMatrix = getTileMatrix(zoomLevel);\n        if (tileMatrix != null) {\n            TileGrid tileGrid = queryForTileGrid(zoomLevel);\n            if (tileGrid != null) {\n                BoundingBox matrixSetBoundingBox = getBoundingBox();\n                boundingBox = TileBoundingBoxUtils.getBoundingBox(\n                        matrixSetBoundingBox, tileMatrix, tileGrid);\n            }\n\n        }\n        return boundingBox;\n    }", "code_tokens": ["public", "BoundingBox", "getBoundingBox", "(", "long", "zoomLevel", ")", "{", "BoundingBox", "boundingBox", "=", "null", ";", "TileMatrix", "tileMatrix", "=", "getTileMatrix", "(", "zoomLevel", ")", ";", "if", "(", "tileMatrix", "!=", "null", ")", "{", "TileGrid", "tileGrid", "=", "queryForTileGrid", "(", "zoomLevel", ")", ";", "if", "(", "tileGrid", "!=", "null", ")", "{", "BoundingBox", "matrixSetBoundingBox", "=", "getBoundingBox", "(", ")", ";", "boundingBox", "=", "TileBoundingBoxUtils", ".", "getBoundingBox", "(", "matrixSetBoundingBox", ",", "tileMatrix", ",", "tileGrid", ")", ";", "}", "}", "return", "boundingBox", ";", "}"], "docstring": "Get the bounding box of tiles\n\n@param zoomLevel zoom level\n@return bounding box of zoom level, or null if no tiles\n@since 1.1.1", "docstring_tokens": ["Get", "the", "bounding", "box", "of", "tiles"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L147-L160", "partition": "test", "index": 5935, "time": "2015-11-09 16:46:09"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java", "func_name": "GeoPackageManagerImpl.validateDatabase", "original_string": "private void validateDatabase(SQLiteDatabase sqliteDatabase, boolean validateHeader, boolean validateIntegrity, boolean close, boolean closeOnError) {\n        try {\n            if (validateHeader) {\n                validateDatabaseHeader(sqliteDatabase);\n            }\n            if (validateIntegrity) {\n                validateDatabaseIntegrity(sqliteDatabase);\n            }\n        } catch (Exception e) {\n            if (closeOnError) {\n                sqliteDatabase.close();\n            }\n            throw e;\n        }\n\n        if (close) {\n            sqliteDatabase.close();\n        }\n    }", "language": "java", "code": "private void validateDatabase(SQLiteDatabase sqliteDatabase, boolean validateHeader, boolean validateIntegrity, boolean close, boolean closeOnError) {\n        try {\n            if (validateHeader) {\n                validateDatabaseHeader(sqliteDatabase);\n            }\n            if (validateIntegrity) {\n                validateDatabaseIntegrity(sqliteDatabase);\n            }\n        } catch (Exception e) {\n            if (closeOnError) {\n                sqliteDatabase.close();\n            }\n            throw e;\n        }\n\n        if (close) {\n            sqliteDatabase.close();\n        }\n    }", "code_tokens": ["private", "void", "validateDatabase", "(", "SQLiteDatabase", "sqliteDatabase", ",", "boolean", "validateHeader", ",", "boolean", "validateIntegrity", ",", "boolean", "close", ",", "boolean", "closeOnError", ")", "{", "try", "{", "if", "(", "validateHeader", ")", "{", "validateDatabaseHeader", "(", "sqliteDatabase", ")", ";", "}", "if", "(", "validateIntegrity", ")", "{", "validateDatabaseIntegrity", "(", "sqliteDatabase", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "if", "(", "closeOnError", ")", "{", "sqliteDatabase", ".", "close", "(", ")", ";", "}", "throw", "e", ";", "}", "if", "(", "close", ")", "{", "sqliteDatabase", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Validate the database header and integrity.  Throw an error when not valid.\n\n@param sqliteDatabase    database\n@param validateHeader    validate the header\n@param validateIntegrity validate the integrity\n@param close             close the database after validation\n@param closeOnError      close the database if validation fails", "docstring_tokens": ["Validate", "the", "database", "header", "and", "integrity", ".", "Throw", "an", "error", "when", "not", "valid", "."], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java#L1169-L1187", "partition": "test", "index": 5962, "time": "2015-11-11 15:13:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java", "func_name": "GeoPackageManagerImpl.validateDatabaseHeader", "original_string": "private void validateDatabaseHeader(SQLiteDatabase sqliteDatabase) {\n\n        boolean validHeader = isDatabaseHeaderValid(sqliteDatabase);\n        if (!validHeader) {\n            throw new GeoPackageException(\n                    \"GeoPackage SQLite header is not valid: \" + sqliteDatabase.getPath());\n        }\n    }", "language": "java", "code": "private void validateDatabaseHeader(SQLiteDatabase sqliteDatabase) {\n\n        boolean validHeader = isDatabaseHeaderValid(sqliteDatabase);\n        if (!validHeader) {\n            throw new GeoPackageException(\n                    \"GeoPackage SQLite header is not valid: \" + sqliteDatabase.getPath());\n        }\n    }", "code_tokens": ["private", "void", "validateDatabaseHeader", "(", "SQLiteDatabase", "sqliteDatabase", ")", "{", "boolean", "validHeader", "=", "isDatabaseHeaderValid", "(", "sqliteDatabase", ")", ";", "if", "(", "!", "validHeader", ")", "{", "throw", "new", "GeoPackageException", "(", "\"GeoPackage SQLite header is not valid: \"", "+", "sqliteDatabase", ".", "getPath", "(", ")", ")", ";", "}", "}"], "docstring": "Validate the header of the database file to verify it is a sqlite database\n\n@param sqliteDatabase database", "docstring_tokens": ["Validate", "the", "header", "of", "the", "database", "file", "to", "verify", "it", "is", "a", "sqlite", "database"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java#L1194-L1201", "partition": "test", "index": 5963, "time": "2015-11-11 15:13:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java", "func_name": "GeoPackageManagerImpl.isDatabaseHeaderValid", "original_string": "private boolean isDatabaseHeaderValid(SQLiteDatabase sqliteDatabase) {\n\n        boolean validHeader = false;\n        FileInputStream fis = null;\n        try {\n            fis = new FileInputStream(sqliteDatabase.getPath());\n            byte[] headerBytes = new byte[16];\n            if (fis.read(headerBytes) == 16) {\n                ByteReader byteReader = new ByteReader(headerBytes);\n                String header = byteReader.readString(headerBytes.length);\n                String headerPrefix = header.substring(0, GeoPackageConstants.SQLITE_HEADER_PREFIX.length());\n                validHeader = headerPrefix.equalsIgnoreCase(GeoPackageConstants.SQLITE_HEADER_PREFIX);\n            }\n        } catch (Exception e) {\n            Log.e(GeoPackageManagerImpl.class.getSimpleName(), \"Failed to retrieve database header\", e);\n        } finally {\n            if (fis != null) {\n                try {\n                    fis.close();\n                } catch (IOException e) {\n                    // eat\n                }\n            }\n        }\n\n        return validHeader;\n    }", "language": "java", "code": "private boolean isDatabaseHeaderValid(SQLiteDatabase sqliteDatabase) {\n\n        boolean validHeader = false;\n        FileInputStream fis = null;\n        try {\n            fis = new FileInputStream(sqliteDatabase.getPath());\n            byte[] headerBytes = new byte[16];\n            if (fis.read(headerBytes) == 16) {\n                ByteReader byteReader = new ByteReader(headerBytes);\n                String header = byteReader.readString(headerBytes.length);\n                String headerPrefix = header.substring(0, GeoPackageConstants.SQLITE_HEADER_PREFIX.length());\n                validHeader = headerPrefix.equalsIgnoreCase(GeoPackageConstants.SQLITE_HEADER_PREFIX);\n            }\n        } catch (Exception e) {\n            Log.e(GeoPackageManagerImpl.class.getSimpleName(), \"Failed to retrieve database header\", e);\n        } finally {\n            if (fis != null) {\n                try {\n                    fis.close();\n                } catch (IOException e) {\n                    // eat\n                }\n            }\n        }\n\n        return validHeader;\n    }", "code_tokens": ["private", "boolean", "isDatabaseHeaderValid", "(", "SQLiteDatabase", "sqliteDatabase", ")", "{", "boolean", "validHeader", "=", "false", ";", "FileInputStream", "fis", "=", "null", ";", "try", "{", "fis", "=", "new", "FileInputStream", "(", "sqliteDatabase", ".", "getPath", "(", ")", ")", ";", "byte", "[", "]", "headerBytes", "=", "new", "byte", "[", "16", "]", ";", "if", "(", "fis", ".", "read", "(", "headerBytes", ")", "==", "16", ")", "{", "ByteReader", "byteReader", "=", "new", "ByteReader", "(", "headerBytes", ")", ";", "String", "header", "=", "byteReader", ".", "readString", "(", "headerBytes", ".", "length", ")", ";", "String", "headerPrefix", "=", "header", ".", "substring", "(", "0", ",", "GeoPackageConstants", ".", "SQLITE_HEADER_PREFIX", ".", "length", "(", ")", ")", ";", "validHeader", "=", "headerPrefix", ".", "equalsIgnoreCase", "(", "GeoPackageConstants", ".", "SQLITE_HEADER_PREFIX", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "Log", ".", "e", "(", "GeoPackageManagerImpl", ".", "class", ".", "getSimpleName", "(", ")", ",", "\"Failed to retrieve database header\"", ",", "e", ")", ";", "}", "finally", "{", "if", "(", "fis", "!=", "null", ")", "{", "try", "{", "fis", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "// eat", "}", "}", "}", "return", "validHeader", ";", "}"], "docstring": "Determine if the header of the database file is valid\n\n@param sqliteDatabase database\n@return true if valid", "docstring_tokens": ["Determine", "if", "the", "header", "of", "the", "database", "file", "is", "valid"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java#L1209-L1235", "partition": "test", "index": 5964, "time": "2015-11-11 15:13:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java", "func_name": "GeoPackageManagerImpl.validateDatabaseAndCloseOnError", "original_string": "private void validateDatabaseAndCloseOnError(SQLiteDatabase sqliteDatabase, boolean validateHeader, boolean validateIntegrity) {\n        validateDatabase(sqliteDatabase, validateHeader, validateIntegrity, false, true);\n    }", "language": "java", "code": "private void validateDatabaseAndCloseOnError(SQLiteDatabase sqliteDatabase, boolean validateHeader, boolean validateIntegrity) {\n        validateDatabase(sqliteDatabase, validateHeader, validateIntegrity, false, true);\n    }", "code_tokens": ["private", "void", "validateDatabaseAndCloseOnError", "(", "SQLiteDatabase", "sqliteDatabase", ",", "boolean", "validateHeader", ",", "boolean", "validateIntegrity", ")", "{", "validateDatabase", "(", "sqliteDatabase", ",", "validateHeader", ",", "validateIntegrity", ",", "false", ",", "true", ")", ";", "}"], "docstring": "Validate the database and close when validation fails. Throw an error when not valid.\n\n@param sqliteDatabase    database\n@param validateHeader    validate the header\n@param validateIntegrity validate the integrity", "docstring_tokens": ["Validate", "the", "database", "and", "close", "when", "validation", "fails", ".", "Throw", "an", "error", "when", "not", "valid", "."], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java#L1145-L1147", "partition": "test", "index": 5960, "time": "2015-11-11 15:13:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java", "func_name": "GeoPackageManagerImpl.isValid", "original_string": "private boolean isValid(String database, boolean validateHeader, boolean validateIntegrity) {\n\n        boolean valid = false;\n\n        if (exists(database)) {\n            GeoPackageCursorFactory cursorFactory = new GeoPackageCursorFactory();\n            String path = null;\n            SQLiteDatabase sqlite;\n            GeoPackageMetadata metadata = getGeoPackageMetadata(database);\n            if (metadata != null && metadata.isExternal()) {\n                path = metadata.getExternalPath();\n                try {\n                    sqlite = SQLiteDatabase.openDatabase(path,\n                            cursorFactory, SQLiteDatabase.OPEN_READWRITE\n                                    | SQLiteDatabase.NO_LOCALIZED_COLLATORS);\n                } catch (Exception e) {\n                    sqlite = SQLiteDatabase.openDatabase(path,\n                            cursorFactory, SQLiteDatabase.OPEN_READONLY\n                                    | SQLiteDatabase.NO_LOCALIZED_COLLATORS);\n                }\n            } else {\n                path = context.getDatabasePath(database).getAbsolutePath();\n                sqlite = context.openOrCreateDatabase(database,\n                        Context.MODE_PRIVATE, cursorFactory);\n            }\n\n            try {\n                valid = (!validateHeader || isDatabaseHeaderValid(sqlite))\n                        && (!validateIntegrity || sqlite.isDatabaseIntegrityOk());\n            } catch (Exception e) {\n                Log.e(GeoPackageManagerImpl.class.getSimpleName(), \"Failed to validate database\", e);\n            } finally {\n                sqlite.close();\n            }\n        }\n\n        return valid;\n    }", "language": "java", "code": "private boolean isValid(String database, boolean validateHeader, boolean validateIntegrity) {\n\n        boolean valid = false;\n\n        if (exists(database)) {\n            GeoPackageCursorFactory cursorFactory = new GeoPackageCursorFactory();\n            String path = null;\n            SQLiteDatabase sqlite;\n            GeoPackageMetadata metadata = getGeoPackageMetadata(database);\n            if (metadata != null && metadata.isExternal()) {\n                path = metadata.getExternalPath();\n                try {\n                    sqlite = SQLiteDatabase.openDatabase(path,\n                            cursorFactory, SQLiteDatabase.OPEN_READWRITE\n                                    | SQLiteDatabase.NO_LOCALIZED_COLLATORS);\n                } catch (Exception e) {\n                    sqlite = SQLiteDatabase.openDatabase(path,\n                            cursorFactory, SQLiteDatabase.OPEN_READONLY\n                                    | SQLiteDatabase.NO_LOCALIZED_COLLATORS);\n                }\n            } else {\n                path = context.getDatabasePath(database).getAbsolutePath();\n                sqlite = context.openOrCreateDatabase(database,\n                        Context.MODE_PRIVATE, cursorFactory);\n            }\n\n            try {\n                valid = (!validateHeader || isDatabaseHeaderValid(sqlite))\n                        && (!validateIntegrity || sqlite.isDatabaseIntegrityOk());\n            } catch (Exception e) {\n                Log.e(GeoPackageManagerImpl.class.getSimpleName(), \"Failed to validate database\", e);\n            } finally {\n                sqlite.close();\n            }\n        }\n\n        return valid;\n    }", "code_tokens": ["private", "boolean", "isValid", "(", "String", "database", ",", "boolean", "validateHeader", ",", "boolean", "validateIntegrity", ")", "{", "boolean", "valid", "=", "false", ";", "if", "(", "exists", "(", "database", ")", ")", "{", "GeoPackageCursorFactory", "cursorFactory", "=", "new", "GeoPackageCursorFactory", "(", ")", ";", "String", "path", "=", "null", ";", "SQLiteDatabase", "sqlite", ";", "GeoPackageMetadata", "metadata", "=", "getGeoPackageMetadata", "(", "database", ")", ";", "if", "(", "metadata", "!=", "null", "&&", "metadata", ".", "isExternal", "(", ")", ")", "{", "path", "=", "metadata", ".", "getExternalPath", "(", ")", ";", "try", "{", "sqlite", "=", "SQLiteDatabase", ".", "openDatabase", "(", "path", ",", "cursorFactory", ",", "SQLiteDatabase", ".", "OPEN_READWRITE", "|", "SQLiteDatabase", ".", "NO_LOCALIZED_COLLATORS", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "sqlite", "=", "SQLiteDatabase", ".", "openDatabase", "(", "path", ",", "cursorFactory", ",", "SQLiteDatabase", ".", "OPEN_READONLY", "|", "SQLiteDatabase", ".", "NO_LOCALIZED_COLLATORS", ")", ";", "}", "}", "else", "{", "path", "=", "context", ".", "getDatabasePath", "(", "database", ")", ".", "getAbsolutePath", "(", ")", ";", "sqlite", "=", "context", ".", "openOrCreateDatabase", "(", "database", ",", "Context", ".", "MODE_PRIVATE", ",", "cursorFactory", ")", ";", "}", "try", "{", "valid", "=", "(", "!", "validateHeader", "||", "isDatabaseHeaderValid", "(", "sqlite", ")", ")", "&&", "(", "!", "validateIntegrity", "||", "sqlite", ".", "isDatabaseIntegrityOk", "(", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "Log", ".", "e", "(", "GeoPackageManagerImpl", ".", "class", ".", "getSimpleName", "(", ")", ",", "\"Failed to validate database\"", ",", "e", ")", ";", "}", "finally", "{", "sqlite", ".", "close", "(", ")", ";", "}", "}", "return", "valid", ";", "}"], "docstring": "Validate the GeoPackage database\n\n@param database\n@param validateHeader    true to validate the header of the database\n@param validateIntegrity true to validate the integrity of the database\n@return true if valid", "docstring_tokens": ["Validate", "the", "GeoPackage", "database"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java#L967-L1004", "partition": "test", "index": 5959, "time": "2015-11-11 15:13:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java", "func_name": "GeoPackageManagerImpl.validateDatabaseAndClose", "original_string": "private void validateDatabaseAndClose(SQLiteDatabase sqliteDatabase, boolean validateHeader, boolean validateIntegrity) {\n        validateDatabase(sqliteDatabase, validateHeader, validateIntegrity, true, true);\n    }", "language": "java", "code": "private void validateDatabaseAndClose(SQLiteDatabase sqliteDatabase, boolean validateHeader, boolean validateIntegrity) {\n        validateDatabase(sqliteDatabase, validateHeader, validateIntegrity, true, true);\n    }", "code_tokens": ["private", "void", "validateDatabaseAndClose", "(", "SQLiteDatabase", "sqliteDatabase", ",", "boolean", "validateHeader", ",", "boolean", "validateIntegrity", ")", "{", "validateDatabase", "(", "sqliteDatabase", ",", "validateHeader", ",", "validateIntegrity", ",", "true", ",", "true", ")", ";", "}"], "docstring": "Validate the database and close it. Throw an error when not valid.\n\n@param sqliteDatabase    database\n@param validateHeader    validate the header\n@param validateIntegrity validate the integrity", "docstring_tokens": ["Validate", "the", "database", "and", "close", "it", ".", "Throw", "an", "error", "when", "not", "valid", "."], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java#L1156-L1158", "partition": "test", "index": 5961, "time": "2015-11-11 15:13:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.getExternalAtPath", "original_string": "public GeoPackageMetadata getExternalAtPath(String path) {\n        GeoPackageMetadata metadata = null;\n        String selection = GeoPackageMetadata.COLUMN_EXTERNAL_PATH + \" = ?\";\n        String[] selectionArgs = new String[]{path};\n        Cursor cursor = db.query(\n                GeoPackageMetadata.TABLE_NAME,\n                GeoPackageMetadata.COLUMNS, selection, selectionArgs, null, null, null);\n        try {\n            if (cursor.moveToNext()) {\n                metadata = createGeoPackageMetadata(cursor);\n            }\n        } finally {\n            cursor.close();\n        }\n        return metadata;\n    }", "language": "java", "code": "public GeoPackageMetadata getExternalAtPath(String path) {\n        GeoPackageMetadata metadata = null;\n        String selection = GeoPackageMetadata.COLUMN_EXTERNAL_PATH + \" = ?\";\n        String[] selectionArgs = new String[]{path};\n        Cursor cursor = db.query(\n                GeoPackageMetadata.TABLE_NAME,\n                GeoPackageMetadata.COLUMNS, selection, selectionArgs, null, null, null);\n        try {\n            if (cursor.moveToNext()) {\n                metadata = createGeoPackageMetadata(cursor);\n            }\n        } finally {\n            cursor.close();\n        }\n        return metadata;\n    }", "code_tokens": ["public", "GeoPackageMetadata", "getExternalAtPath", "(", "String", "path", ")", "{", "GeoPackageMetadata", "metadata", "=", "null", ";", "String", "selection", "=", "GeoPackageMetadata", ".", "COLUMN_EXTERNAL_PATH", "+", "\" = ?\"", ";", "String", "[", "]", "selectionArgs", "=", "new", "String", "[", "]", "{", "path", "}", ";", "Cursor", "cursor", "=", "db", ".", "query", "(", "GeoPackageMetadata", ".", "TABLE_NAME", ",", "GeoPackageMetadata", ".", "COLUMNS", ",", "selection", ",", "selectionArgs", ",", "null", ",", "null", ",", "null", ")", ";", "try", "{", "if", "(", "cursor", ".", "moveToNext", "(", ")", ")", "{", "metadata", "=", "createGeoPackageMetadata", "(", "cursor", ")", ";", "}", "}", "finally", "{", "cursor", ".", "close", "(", ")", ";", "}", "return", "metadata", ";", "}"], "docstring": "Get external GeoPackage metadata by external path\n\n@param path path\n@return GeoPackage metadata", "docstring_tokens": ["Get", "external", "GeoPackage", "metadata", "by", "external", "path"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L265-L280", "partition": "test", "index": 6147, "time": "2015-11-18 17:01:39"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java", "func_name": "GeoPackageManagerImpl.getGeoPackageMetadataAtExternalPath", "original_string": "private GeoPackageMetadata getGeoPackageMetadataAtExternalPath(String path) {\n        GeoPackageMetadata metadata = null;\n\n        GeoPackageMetadataDb metadataDb = new GeoPackageMetadataDb(\n                context);\n        metadataDb.open();\n        try {\n            GeoPackageMetadataDataSource dataSource = new GeoPackageMetadataDataSource(metadataDb);\n            metadata = dataSource.getExternalAtPath(path);\n        } finally {\n            metadataDb.close();\n        }\n\n        return metadata;\n    }", "language": "java", "code": "private GeoPackageMetadata getGeoPackageMetadataAtExternalPath(String path) {\n        GeoPackageMetadata metadata = null;\n\n        GeoPackageMetadataDb metadataDb = new GeoPackageMetadataDb(\n                context);\n        metadataDb.open();\n        try {\n            GeoPackageMetadataDataSource dataSource = new GeoPackageMetadataDataSource(metadataDb);\n            metadata = dataSource.getExternalAtPath(path);\n        } finally {\n            metadataDb.close();\n        }\n\n        return metadata;\n    }", "code_tokens": ["private", "GeoPackageMetadata", "getGeoPackageMetadataAtExternalPath", "(", "String", "path", ")", "{", "GeoPackageMetadata", "metadata", "=", "null", ";", "GeoPackageMetadataDb", "metadataDb", "=", "new", "GeoPackageMetadataDb", "(", "context", ")", ";", "metadataDb", ".", "open", "(", ")", ";", "try", "{", "GeoPackageMetadataDataSource", "dataSource", "=", "new", "GeoPackageMetadataDataSource", "(", "metadataDb", ")", ";", "metadata", "=", "dataSource", ".", "getExternalAtPath", "(", "path", ")", ";", "}", "finally", "{", "metadataDb", ".", "close", "(", ")", ";", "}", "return", "metadata", ";", "}"], "docstring": "Get the GeoPackage metadata of the database at the external path\n\n@param path external database path\n@return metadata or null", "docstring_tokens": ["Get", "the", "GeoPackage", "metadata", "of", "the", "database", "at", "the", "external", "path"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java#L1455-L1469", "partition": "test", "index": 5969, "time": "2015-11-18 17:01:39"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileBoundingBoxAndroidUtils.java", "func_name": "TileBoundingBoxAndroidUtils.getRectangle", "original_string": "public static Rect getRectangle(long width, long height,\n                                    BoundingBox boundingBox, BoundingBox boundingBoxSection) {\n\n        RectF rectF = getFloatRectangle(width, height, boundingBox,\n                boundingBoxSection);\n\n        Rect rect = new Rect(Math.round(rectF.left), Math.round(rectF.top),\n                Math.round(rectF.right), Math.round(rectF.bottom));\n\n        return rect;\n    }", "language": "java", "code": "public static Rect getRectangle(long width, long height,\n                                    BoundingBox boundingBox, BoundingBox boundingBoxSection) {\n\n        RectF rectF = getFloatRectangle(width, height, boundingBox,\n                boundingBoxSection);\n\n        Rect rect = new Rect(Math.round(rectF.left), Math.round(rectF.top),\n                Math.round(rectF.right), Math.round(rectF.bottom));\n\n        return rect;\n    }", "code_tokens": ["public", "static", "Rect", "getRectangle", "(", "long", "width", ",", "long", "height", ",", "BoundingBox", "boundingBox", ",", "BoundingBox", "boundingBoxSection", ")", "{", "RectF", "rectF", "=", "getFloatRectangle", "(", "width", ",", "height", ",", "boundingBox", ",", "boundingBoxSection", ")", ";", "Rect", "rect", "=", "new", "Rect", "(", "Math", ".", "round", "(", "rectF", ".", "left", ")", ",", "Math", ".", "round", "(", "rectF", ".", "top", ")", ",", "Math", ".", "round", "(", "rectF", ".", "right", ")", ",", "Math", ".", "round", "(", "rectF", ".", "bottom", ")", ")", ";", "return", "rect", ";", "}"], "docstring": "Get a rectangle using the tile width, height, bounding box, and the\nbounding box section within the outer box to build the rectangle from\n\n@param width              width\n@param height             height\n@param boundingBox        full bounding box\n@param boundingBoxSection rectangle bounding box section\n@return rectangle", "docstring_tokens": ["Get", "a", "rectangle", "using", "the", "tile", "width", "height", "bounding", "box", "and", "the", "bounding", "box", "section", "within", "the", "outer", "box", "to", "build", "the", "rectangle", "from"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileBoundingBoxAndroidUtils.java#L25-L35", "partition": "test", "index": 5955, "time": "2015-11-24 14:32:41"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/GeoPackageConnection.java", "func_name": "GeoPackageConnection.rawQuery", "original_string": "public Cursor rawQuery(String sql, String[] args) {\n        return db.rawQuery(sql, args);\n    }", "language": "java", "code": "public Cursor rawQuery(String sql, String[] args) {\n        return db.rawQuery(sql, args);\n    }", "code_tokens": ["public", "Cursor", "rawQuery", "(", "String", "sql", ",", "String", "[", "]", "args", ")", "{", "return", "db", ".", "rawQuery", "(", "sql", ",", "args", ")", ";", "}"], "docstring": "Perform a raw database query\n\n@param sql  sql command\n@param args arguments\n@return cursor\n@since 1.2.1", "docstring_tokens": ["Perform", "a", "raw", "database", "query"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/GeoPackageConnection.java#L235-L237", "partition": "test", "index": 5887, "time": "2015-12-02 15:55:05"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageImpl.java", "func_name": "GeoPackageImpl.integrityCheck", "original_string": "private Cursor integrityCheck(Cursor cursor) {\n        if (cursor.moveToNext()) {\n            String value = cursor.getString(0);\n            if (value.equals(\"ok\")) {\n                cursor.close();\n                cursor = null;\n            }\n        }\n        return cursor;\n    }", "language": "java", "code": "private Cursor integrityCheck(Cursor cursor) {\n        if (cursor.moveToNext()) {\n            String value = cursor.getString(0);\n            if (value.equals(\"ok\")) {\n                cursor.close();\n                cursor = null;\n            }\n        }\n        return cursor;\n    }", "code_tokens": ["private", "Cursor", "integrityCheck", "(", "Cursor", "cursor", ")", "{", "if", "(", "cursor", ".", "moveToNext", "(", ")", ")", "{", "String", "value", "=", "cursor", ".", "getString", "(", "0", ")", ";", "if", "(", "value", ".", "equals", "(", "\"ok\"", ")", ")", "{", "cursor", ".", "close", "(", ")", ";", "cursor", "=", "null", ";", "}", "}", "return", "cursor", ";", "}"], "docstring": "Check the cursor returned from the integrity check to see if things are \"ok\"\n\n@param cursor\n@return null if ok, else the open cursor", "docstring_tokens": ["Check", "the", "cursor", "returned", "from", "the", "integrity", "check", "to", "see", "if", "things", "are", "ok"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageImpl.java#L452-L461", "partition": "test", "index": 5980, "time": "2015-12-02 15:55:05"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java", "func_name": "UrlTileGenerator.replaceBoundingBox", "original_string": "private String replaceBoundingBox(String url, BoundingBox boundingBox) {\n\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_min_lat),\n                String.valueOf(boundingBox.getMinLatitude()));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_max_lat),\n                String.valueOf(boundingBox.getMaxLatitude()));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_min_lon),\n                String.valueOf(boundingBox.getMinLongitude()));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_max_lon),\n                String.valueOf(boundingBox.getMaxLongitude()));\n\n        return url;\n    }", "language": "java", "code": "private String replaceBoundingBox(String url, BoundingBox boundingBox) {\n\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_min_lat),\n                String.valueOf(boundingBox.getMinLatitude()));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_max_lat),\n                String.valueOf(boundingBox.getMaxLatitude()));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_min_lon),\n                String.valueOf(boundingBox.getMinLongitude()));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_max_lon),\n                String.valueOf(boundingBox.getMaxLongitude()));\n\n        return url;\n    }", "code_tokens": ["private", "String", "replaceBoundingBox", "(", "String", "url", ",", "BoundingBox", "boundingBox", ")", "{", "url", "=", "url", ".", "replaceAll", "(", "context", ".", "getString", "(", "R", ".", "string", ".", "tile_generator_variable_min_lat", ")", ",", "String", ".", "valueOf", "(", "boundingBox", ".", "getMinLatitude", "(", ")", ")", ")", ";", "url", "=", "url", ".", "replaceAll", "(", "context", ".", "getString", "(", "R", ".", "string", ".", "tile_generator_variable_max_lat", ")", ",", "String", ".", "valueOf", "(", "boundingBox", ".", "getMaxLatitude", "(", ")", ")", ")", ";", "url", "=", "url", ".", "replaceAll", "(", "context", ".", "getString", "(", "R", ".", "string", ".", "tile_generator_variable_min_lon", ")", ",", "String", ".", "valueOf", "(", "boundingBox", ".", "getMinLongitude", "(", ")", ")", ")", ";", "url", "=", "url", ".", "replaceAll", "(", "context", ".", "getString", "(", "R", ".", "string", ".", "tile_generator_variable_max_lon", ")", ",", "String", ".", "valueOf", "(", "boundingBox", ".", "getMaxLongitude", "(", ")", ")", ")", ";", "return", "url", ";", "}"], "docstring": "Replace the url parts with the bounding box\n\n@param url\n@param boundingBox\n@return", "docstring_tokens": ["Replace", "the", "url", "parts", "with", "the", "bounding", "box"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java#L179-L195", "partition": "test", "index": 6110, "time": "2015-12-08 07:14:42"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java", "func_name": "UrlTileGenerator.replaceBoundingBox", "original_string": "private String replaceBoundingBox(String url, int z, long x, long y) {\n\n        BoundingBox boundingBox = TileBoundingBoxUtils.getProjectedBoundingBox(\n                projection, x, y, z);\n\n        url = replaceBoundingBox(url, boundingBox);\n\n        return url;\n    }", "language": "java", "code": "private String replaceBoundingBox(String url, int z, long x, long y) {\n\n        BoundingBox boundingBox = TileBoundingBoxUtils.getProjectedBoundingBox(\n                projection, x, y, z);\n\n        url = replaceBoundingBox(url, boundingBox);\n\n        return url;\n    }", "code_tokens": ["private", "String", "replaceBoundingBox", "(", "String", "url", ",", "int", "z", ",", "long", "x", ",", "long", "y", ")", "{", "BoundingBox", "boundingBox", "=", "TileBoundingBoxUtils", ".", "getProjectedBoundingBox", "(", "projection", ",", "x", ",", "y", ",", "z", ")", ";", "url", "=", "replaceBoundingBox", "(", "url", ",", "boundingBox", ")", ";", "return", "url", ";", "}"], "docstring": "Replace the bounding box coordinates in the url\n\n@param url\n@param z\n@param x\n@param y\n@return", "docstring_tokens": ["Replace", "the", "bounding", "box", "coordinates", "in", "the", "url"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java#L162-L170", "partition": "test", "index": 6109, "time": "2015-12-08 07:14:42"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java", "func_name": "UrlTileGenerator.replaceXYZ", "original_string": "private String replaceXYZ(String url, int z, long x, long y) {\n\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_z),\n                String.valueOf(z));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_x),\n                String.valueOf(x));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_y),\n                String.valueOf(y));\n        return url;\n    }", "language": "java", "code": "private String replaceXYZ(String url, int z, long x, long y) {\n\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_z),\n                String.valueOf(z));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_x),\n                String.valueOf(x));\n        url = url.replaceAll(\n                context.getString(R.string.tile_generator_variable_y),\n                String.valueOf(y));\n        return url;\n    }", "code_tokens": ["private", "String", "replaceXYZ", "(", "String", "url", ",", "int", "z", ",", "long", "x", ",", "long", "y", ")", "{", "url", "=", "url", ".", "replaceAll", "(", "context", ".", "getString", "(", "R", ".", "string", ".", "tile_generator_variable_z", ")", ",", "String", ".", "valueOf", "(", "z", ")", ")", ";", "url", "=", "url", ".", "replaceAll", "(", "context", ".", "getString", "(", "R", ".", "string", ".", "tile_generator_variable_x", ")", ",", "String", ".", "valueOf", "(", "x", ")", ")", ";", "url", "=", "url", ".", "replaceAll", "(", "context", ".", "getString", "(", "R", ".", "string", ".", "tile_generator_variable_y", ")", ",", "String", ".", "valueOf", "(", "y", ")", ")", ";", "return", "url", ";", "}"], "docstring": "Replace x, y, and z in the url\n\n@param url\n@param z\n@param x\n@param y\n@return", "docstring_tokens": ["Replace", "x", "y", "and", "z", "in", "the", "url"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java#L125-L137", "partition": "test", "index": 6107, "time": "2015-12-08 07:14:42"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java", "func_name": "UrlTileGenerator.hasBoundingBox", "original_string": "private boolean hasBoundingBox(String url) {\n\n        String replacedUrl = replaceBoundingBox(url, boundingBox);\n        boolean hasBoundingBox = !replacedUrl.equals(url);\n\n        return hasBoundingBox;\n    }", "language": "java", "code": "private boolean hasBoundingBox(String url) {\n\n        String replacedUrl = replaceBoundingBox(url, boundingBox);\n        boolean hasBoundingBox = !replacedUrl.equals(url);\n\n        return hasBoundingBox;\n    }", "code_tokens": ["private", "boolean", "hasBoundingBox", "(", "String", "url", ")", "{", "String", "replacedUrl", "=", "replaceBoundingBox", "(", "url", ",", "boundingBox", ")", ";", "boolean", "hasBoundingBox", "=", "!", "replacedUrl", ".", "equals", "(", "url", ")", ";", "return", "hasBoundingBox", ";", "}"], "docstring": "Determine if the url has bounding box variables\n\n@param url\n@return", "docstring_tokens": ["Determine", "if", "the", "url", "has", "bounding", "box", "variables"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java#L108-L114", "partition": "test", "index": 6106, "time": "2015-12-08 07:14:42"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java", "func_name": "UrlTileGenerator.hasXYZ", "original_string": "private boolean hasXYZ(String url) {\n\n        String replacedUrl = replaceXYZ(url, 0, 0, 0);\n        boolean hasXYZ = !replacedUrl.equals(url);\n\n        return hasXYZ;\n    }", "language": "java", "code": "private boolean hasXYZ(String url) {\n\n        String replacedUrl = replaceXYZ(url, 0, 0, 0);\n        boolean hasXYZ = !replacedUrl.equals(url);\n\n        return hasXYZ;\n    }", "code_tokens": ["private", "boolean", "hasXYZ", "(", "String", "url", ")", "{", "String", "replacedUrl", "=", "replaceXYZ", "(", "url", ",", "0", ",", "0", ",", "0", ")", ";", "boolean", "hasXYZ", "=", "!", "replacedUrl", ".", "equals", "(", "url", ")", ";", "return", "hasXYZ", ";", "}"], "docstring": "Determine if the url has x, y, or z variables\n\n@param url\n@return", "docstring_tokens": ["Determine", "if", "the", "url", "has", "x", "y", "or", "z", "variables"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/UrlTileGenerator.java#L145-L151", "partition": "test", "index": 6108, "time": "2015-12-08 07:14:42"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/link/FeatureTileTableLinker.java", "func_name": "FeatureTileTableLinker.getTileDaosForFeatureTable", "original_string": "public List<TileDao> getTileDaosForFeatureTable(String featureTable) {\n\n        List<TileDao> tileDaos = new ArrayList<TileDao>();\n\n        List<String> tileTables = getTileTablesForFeatureTable(featureTable);\n        for (String tileTable : tileTables) {\n            if (geoPackage.isTileTable(tileTable)) {\n                TileDao tileDao = geoPackage.getTileDao(tileTable);\n                tileDaos.add(tileDao);\n            }\n        }\n\n        return tileDaos;\n    }", "language": "java", "code": "public List<TileDao> getTileDaosForFeatureTable(String featureTable) {\n\n        List<TileDao> tileDaos = new ArrayList<TileDao>();\n\n        List<String> tileTables = getTileTablesForFeatureTable(featureTable);\n        for (String tileTable : tileTables) {\n            if (geoPackage.isTileTable(tileTable)) {\n                TileDao tileDao = geoPackage.getTileDao(tileTable);\n                tileDaos.add(tileDao);\n            }\n        }\n\n        return tileDaos;\n    }", "code_tokens": ["public", "List", "<", "TileDao", ">", "getTileDaosForFeatureTable", "(", "String", "featureTable", ")", "{", "List", "<", "TileDao", ">", "tileDaos", "=", "new", "ArrayList", "<", "TileDao", ">", "(", ")", ";", "List", "<", "String", ">", "tileTables", "=", "getTileTablesForFeatureTable", "(", "featureTable", ")", ";", "for", "(", "String", "tileTable", ":", "tileTables", ")", "{", "if", "(", "geoPackage", ".", "isTileTable", "(", "tileTable", ")", ")", "{", "TileDao", "tileDao", "=", "geoPackage", ".", "getTileDao", "(", "tileTable", ")", ";", "tileDaos", ".", "add", "(", "tileDao", ")", ";", "}", "}", "return", "tileDaos", ";", "}"], "docstring": "Query for the tile tables linked to a feature table and return tile DAOs\nto those tables\n\n@param featureTable feature table\n@return tiles DAOs", "docstring_tokens": ["Query", "for", "the", "tile", "tables", "linked", "to", "a", "feature", "table", "and", "return", "tile", "DAOs", "to", "those", "tables"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/link/FeatureTileTableLinker.java#L41-L54", "partition": "test", "index": 6128, "time": "2016-02-16 07:47:04"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/link/FeatureTileTableLinker.java", "func_name": "FeatureTileTableLinker.getFeatureDaosForTileTable", "original_string": "public List<FeatureDao> getFeatureDaosForTileTable(String tileTable) {\n\n        List<FeatureDao> featureDaos = new ArrayList<FeatureDao>();\n\n        List<String> featureTables = getFeatureTablesForTileTable(tileTable);\n        for (String featureTable : featureTables) {\n            if (geoPackage.isFeatureTable(featureTable)) {\n                FeatureDao featureDao = geoPackage.getFeatureDao(featureTable);\n                featureDaos.add(featureDao);\n            }\n        }\n\n        return featureDaos;\n    }", "language": "java", "code": "public List<FeatureDao> getFeatureDaosForTileTable(String tileTable) {\n\n        List<FeatureDao> featureDaos = new ArrayList<FeatureDao>();\n\n        List<String> featureTables = getFeatureTablesForTileTable(tileTable);\n        for (String featureTable : featureTables) {\n            if (geoPackage.isFeatureTable(featureTable)) {\n                FeatureDao featureDao = geoPackage.getFeatureDao(featureTable);\n                featureDaos.add(featureDao);\n            }\n        }\n\n        return featureDaos;\n    }", "code_tokens": ["public", "List", "<", "FeatureDao", ">", "getFeatureDaosForTileTable", "(", "String", "tileTable", ")", "{", "List", "<", "FeatureDao", ">", "featureDaos", "=", "new", "ArrayList", "<", "FeatureDao", ">", "(", ")", ";", "List", "<", "String", ">", "featureTables", "=", "getFeatureTablesForTileTable", "(", "tileTable", ")", ";", "for", "(", "String", "featureTable", ":", "featureTables", ")", "{", "if", "(", "geoPackage", ".", "isFeatureTable", "(", "featureTable", ")", ")", "{", "FeatureDao", "featureDao", "=", "geoPackage", ".", "getFeatureDao", "(", "featureTable", ")", ";", "featureDaos", ".", "add", "(", "featureDao", ")", ";", "}", "}", "return", "featureDaos", ";", "}"], "docstring": "Query for the feature tables linked to a tile table and return feature\nDAOs to those tables\n\n@param tileTable tile table\n@return feature DAOs", "docstring_tokens": ["Query", "for", "the", "feature", "tables", "linked", "to", "a", "tile", "table", "and", "return", "feature", "DAOs", "to", "those", "tables"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/link/FeatureTileTableLinker.java#L63-L76", "partition": "test", "index": 6129, "time": "2016-02-16 07:47:04"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/GoogleAPIGeoPackageTileRetriever.java", "func_name": "GoogleAPIGeoPackageTileRetriever.retrieveTileRow", "original_string": "private TileRow retrieveTileRow(int x, int y, int zoom) {\n        return tileDao.queryForTile(x, y, zoom);\n    }", "language": "java", "code": "private TileRow retrieveTileRow(int x, int y, int zoom) {\n        return tileDao.queryForTile(x, y, zoom);\n    }", "code_tokens": ["private", "TileRow", "retrieveTileRow", "(", "int", "x", ",", "int", "y", ",", "int", "zoom", ")", "{", "return", "tileDao", ".", "queryForTile", "(", "x", ",", "y", ",", "zoom", ")", ";", "}"], "docstring": "Retrieve the tile row\n\n@param x\n@param y\n@param zoom\n@return", "docstring_tokens": ["Retrieve", "the", "tile", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/GoogleAPIGeoPackageTileRetriever.java#L65-L67", "partition": "test", "index": 5894, "time": "2016-02-16 07:47:04"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.getMetadataWhereNameLike", "original_string": "private List<String> getMetadataWhereNameLike(String like, String sortColumn, boolean notLike) {\n        List<String> names = new ArrayList<>();\n        StringBuilder where = new StringBuilder(GeoPackageMetadata.COLUMN_NAME);\n        if (notLike) {\n            where.append(\" not\");\n        }\n        where.append(\" like ?\");\n        String[] whereArgs = new String[]{like};\n        Cursor cursor = db.query(GeoPackageMetadata.TABLE_NAME, new String[]{GeoPackageMetadata.COLUMN_NAME}, where.toString(), whereArgs, null, null, sortColumn);\n        try {\n            while (cursor.moveToNext()) {\n                names.add(cursor.getString(0));\n            }\n        } finally {\n            cursor.close();\n        }\n        return names;\n    }", "language": "java", "code": "private List<String> getMetadataWhereNameLike(String like, String sortColumn, boolean notLike) {\n        List<String> names = new ArrayList<>();\n        StringBuilder where = new StringBuilder(GeoPackageMetadata.COLUMN_NAME);\n        if (notLike) {\n            where.append(\" not\");\n        }\n        where.append(\" like ?\");\n        String[] whereArgs = new String[]{like};\n        Cursor cursor = db.query(GeoPackageMetadata.TABLE_NAME, new String[]{GeoPackageMetadata.COLUMN_NAME}, where.toString(), whereArgs, null, null, sortColumn);\n        try {\n            while (cursor.moveToNext()) {\n                names.add(cursor.getString(0));\n            }\n        } finally {\n            cursor.close();\n        }\n        return names;\n    }", "code_tokens": ["private", "List", "<", "String", ">", "getMetadataWhereNameLike", "(", "String", "like", ",", "String", "sortColumn", ",", "boolean", "notLike", ")", "{", "List", "<", "String", ">", "names", "=", "new", "ArrayList", "<>", "(", ")", ";", "StringBuilder", "where", "=", "new", "StringBuilder", "(", "GeoPackageMetadata", ".", "COLUMN_NAME", ")", ";", "if", "(", "notLike", ")", "{", "where", ".", "append", "(", "\" not\"", ")", ";", "}", "where", ".", "append", "(", "\" like ?\"", ")", ";", "String", "[", "]", "whereArgs", "=", "new", "String", "[", "]", "{", "like", "}", ";", "Cursor", "cursor", "=", "db", ".", "query", "(", "GeoPackageMetadata", ".", "TABLE_NAME", ",", "new", "String", "[", "]", "{", "GeoPackageMetadata", ".", "COLUMN_NAME", "}", ",", "where", ".", "toString", "(", ")", ",", "whereArgs", ",", "null", ",", "null", ",", "sortColumn", ")", ";", "try", "{", "while", "(", "cursor", ".", "moveToNext", "(", ")", ")", "{", "names", ".", "add", "(", "cursor", ".", "getString", "(", "0", ")", ")", ";", "}", "}", "finally", "{", "cursor", ".", "close", "(", ")", ";", "}", "return", "names", ";", "}"], "docstring": "Get metadata where the name is like or not like\n\n@param like       like or not like argument\n@param sortColumn sort by column\n@param notLike    true if a not like query\n@return metadata names", "docstring_tokens": ["Get", "metadata", "where", "the", "name", "is", "like", "or", "not", "like"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L314-L331", "partition": "test", "index": 6150, "time": "2016-03-29 12:54:33"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java", "func_name": "GeoPackageManagerImpl.deleteMissingDatabases", "original_string": "private List<String> deleteMissingDatabases(List<String> databases) {\n        List<String> filesExist = new ArrayList<>();\n        for (String database : databases) {\n            if (exists(database)) {\n                filesExist.add(database);\n            }\n        }\n        return filesExist;\n    }", "language": "java", "code": "private List<String> deleteMissingDatabases(List<String> databases) {\n        List<String> filesExist = new ArrayList<>();\n        for (String database : databases) {\n            if (exists(database)) {\n                filesExist.add(database);\n            }\n        }\n        return filesExist;\n    }", "code_tokens": ["private", "List", "<", "String", ">", "deleteMissingDatabases", "(", "List", "<", "String", ">", "databases", ")", "{", "List", "<", "String", ">", "filesExist", "=", "new", "ArrayList", "<>", "(", ")", ";", "for", "(", "String", "database", ":", "databases", ")", "{", "if", "(", "exists", "(", "database", ")", ")", "{", "filesExist", ".", "add", "(", "database", ")", ";", "}", "}", "return", "filesExist", ";", "}"], "docstring": "Delete all databases that do not exist or the database file does not exist\n\n@param databases list of databases\n@return databases that exist", "docstring_tokens": ["Delete", "all", "databases", "that", "do", "not", "exist", "or", "the", "database", "file", "does", "not", "exist"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/factory/GeoPackageManagerImpl.java#L156-L164", "partition": "test", "index": 5957, "time": "2016-03-29 12:54:33"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.getMetadataWhereNameLike", "original_string": "public List<String> getMetadataWhereNameLike(String like, String sortColumn) {\n        return getMetadataWhereNameLike(like, sortColumn, false);\n    }", "language": "java", "code": "public List<String> getMetadataWhereNameLike(String like, String sortColumn) {\n        return getMetadataWhereNameLike(like, sortColumn, false);\n    }", "code_tokens": ["public", "List", "<", "String", ">", "getMetadataWhereNameLike", "(", "String", "like", ",", "String", "sortColumn", ")", "{", "return", "getMetadataWhereNameLike", "(", "like", ",", "sortColumn", ",", "false", ")", ";", "}"], "docstring": "Get metadata where the name is like\n\n@param like       like argument\n@param sortColumn sort by column\n@return metadata names\n@since 1.2.7", "docstring_tokens": ["Get", "metadata", "where", "the", "name", "is", "like"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L290-L292", "partition": "test", "index": 6148, "time": "2016-03-29 12:54:33"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java", "func_name": "GeoPackageMetadataDataSource.getMetadataWhereNameNotLike", "original_string": "public List<String> getMetadataWhereNameNotLike(String notLike, String sortColumn) {\n        return getMetadataWhereNameLike(notLike, sortColumn, true);\n    }", "language": "java", "code": "public List<String> getMetadataWhereNameNotLike(String notLike, String sortColumn) {\n        return getMetadataWhereNameLike(notLike, sortColumn, true);\n    }", "code_tokens": ["public", "List", "<", "String", ">", "getMetadataWhereNameNotLike", "(", "String", "notLike", ",", "String", "sortColumn", ")", "{", "return", "getMetadataWhereNameLike", "(", "notLike", ",", "sortColumn", ",", "true", ")", ";", "}"], "docstring": "Get metadata where the name is not like\n\n@param notLike    not like argument\n@param sortColumn sort by column\n@return metadata names\n@since 1.2.7", "docstring_tokens": ["Get", "metadata", "where", "the", "name", "is", "not", "like"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/metadata/GeoPackageMetadataDataSource.java#L302-L304", "partition": "test", "index": 6149, "time": "2016-03-29 12:54:33"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/TileCreator.java", "func_name": "TileCreator.retrieveTileResults", "original_string": "private TileCursor retrieveTileResults(BoundingBox projectedRequestBoundingBox, TileMatrix tileMatrix) {\n\n        TileCursor tileResults = null;\n\n        if (tileMatrix != null) {\n\n            // Get the tile grid\n            TileGrid tileGrid = TileBoundingBoxUtils.getTileGrid(\n                    tileSetBoundingBox, tileMatrix.getMatrixWidth(),\n                    tileMatrix.getMatrixHeight(), projectedRequestBoundingBox);\n\n            // Query for matching tiles in the tile grid\n            tileResults = tileDao.queryByTileGrid(tileGrid,\n                    tileMatrix.getZoomLevel());\n\n        }\n\n        return tileResults;\n    }", "language": "java", "code": "private TileCursor retrieveTileResults(BoundingBox projectedRequestBoundingBox, TileMatrix tileMatrix) {\n\n        TileCursor tileResults = null;\n\n        if (tileMatrix != null) {\n\n            // Get the tile grid\n            TileGrid tileGrid = TileBoundingBoxUtils.getTileGrid(\n                    tileSetBoundingBox, tileMatrix.getMatrixWidth(),\n                    tileMatrix.getMatrixHeight(), projectedRequestBoundingBox);\n\n            // Query for matching tiles in the tile grid\n            tileResults = tileDao.queryByTileGrid(tileGrid,\n                    tileMatrix.getZoomLevel());\n\n        }\n\n        return tileResults;\n    }", "code_tokens": ["private", "TileCursor", "retrieveTileResults", "(", "BoundingBox", "projectedRequestBoundingBox", ",", "TileMatrix", "tileMatrix", ")", "{", "TileCursor", "tileResults", "=", "null", ";", "if", "(", "tileMatrix", "!=", "null", ")", "{", "// Get the tile grid", "TileGrid", "tileGrid", "=", "TileBoundingBoxUtils", ".", "getTileGrid", "(", "tileSetBoundingBox", ",", "tileMatrix", ".", "getMatrixWidth", "(", ")", ",", "tileMatrix", ".", "getMatrixHeight", "(", ")", ",", "projectedRequestBoundingBox", ")", ";", "// Query for matching tiles in the tile grid", "tileResults", "=", "tileDao", ".", "queryByTileGrid", "(", "tileGrid", ",", "tileMatrix", ".", "getZoomLevel", "(", ")", ")", ";", "}", "return", "tileResults", ";", "}"], "docstring": "Get the tile row results of tiles needed to draw the requested bounding box tile\n\n@param projectedRequestBoundingBox bounding box projected to the tiles\n@param tileMatrix\n@return tile cursor results or null", "docstring_tokens": ["Get", "the", "tile", "row", "results", "of", "tiles", "needed", "to", "draw", "the", "requested", "bounding", "box", "tile"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/TileCreator.java#L620-L638", "partition": "test", "index": 5992, "time": "2016-05-12 11:30:47"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/TileCreator.java", "func_name": "TileCreator.getTile", "original_string": "public GeoPackageTile getTile(BoundingBox requestBoundingBox) {\n\n        GeoPackageTile tile = null;\n\n        // Transform to the projection of the tiles\n        ProjectionTransform transformRequestToTiles = requestProjection.getTransformation(tilesProjection);\n        BoundingBox tilesBoundingBox = requestBoundingBox.transform(transformRequestToTiles);\n\n        List<TileMatrix> tileMatrices = getTileMatrices(tilesBoundingBox);\n\n        for (int i = 0; tile == null && i < tileMatrices.size(); i++) {\n\n            TileMatrix tileMatrix = tileMatrices.get(i);\n\n            TileCursor tileResults = retrieveTileResults(tilesBoundingBox, tileMatrix);\n            if (tileResults != null) {\n\n                try {\n\n                    if (tileResults.getCount() > 0) {\n\n                        BoundingBox requestProjectedBoundingBox = requestBoundingBox.transform(transformRequestToTiles);\n\n                        // Determine the requested tile dimensions, or use the dimensions of a single tile matrix tile\n                        int requestedTileWidth = width != null ? width : (int) tileMatrix\n                                .getTileWidth();\n                        int requestedTileHeight = height != null ? height : (int) tileMatrix\n                                .getTileHeight();\n\n                        // Determine the size of the tile to initially draw\n                        int tileWidth = requestedTileWidth;\n                        int tileHeight = requestedTileHeight;\n                        if (!sameProjection) {\n                            tileWidth = (int) Math.round(\n                                    (requestProjectedBoundingBox.getMaxLongitude() - requestProjectedBoundingBox.getMinLongitude())\n                                            / tileMatrix.getPixelXSize());\n                            tileHeight = (int) Math.round(\n                                    (requestProjectedBoundingBox.getMaxLatitude() - requestProjectedBoundingBox.getMinLatitude())\n                                            / tileMatrix.getPixelYSize());\n                        }\n\n                        // Draw the resulting bitmap with the matching tiles\n                        Bitmap tileBitmap = drawTile(tileMatrix, tileResults, requestProjectedBoundingBox, tileWidth, tileHeight);\n\n                        // Create the tile\n                        if (tileBitmap != null) {\n\n                            // Project the tile if needed\n                            if (!sameProjection) {\n                                Bitmap reprojectTile = reprojectTile(tileBitmap, requestedTileWidth, requestedTileHeight, requestBoundingBox, transformRequestToTiles, tilesBoundingBox);\n                                tileBitmap.recycle();\n                                tileBitmap = reprojectTile;\n                            }\n\n                            try {\n                                byte[] tileData = BitmapConverter.toBytes(\n                                        tileBitmap, COMPRESS_FORMAT);\n                                tileBitmap.recycle();\n                                tile = new GeoPackageTile(requestedTileWidth, requestedTileHeight, tileData);\n                            } catch (IOException e) {\n                                Log.e(TileCreator.class.getSimpleName(), \"Failed to create tile. min lat: \"\n                                        + requestBoundingBox.getMinLatitude()\n                                        + \", max lat: \" + requestBoundingBox.getMaxLatitude()\n                                        + \", min lon: \" + requestBoundingBox.getMinLongitude() +\n                                        \", max lon: \" + requestBoundingBox.getMaxLongitude(), e);\n                            }\n                        }\n\n                    }\n                } finally {\n                    tileResults.close();\n                }\n            }\n        }\n\n        return tile;\n    }", "language": "java", "code": "public GeoPackageTile getTile(BoundingBox requestBoundingBox) {\n\n        GeoPackageTile tile = null;\n\n        // Transform to the projection of the tiles\n        ProjectionTransform transformRequestToTiles = requestProjection.getTransformation(tilesProjection);\n        BoundingBox tilesBoundingBox = requestBoundingBox.transform(transformRequestToTiles);\n\n        List<TileMatrix> tileMatrices = getTileMatrices(tilesBoundingBox);\n\n        for (int i = 0; tile == null && i < tileMatrices.size(); i++) {\n\n            TileMatrix tileMatrix = tileMatrices.get(i);\n\n            TileCursor tileResults = retrieveTileResults(tilesBoundingBox, tileMatrix);\n            if (tileResults != null) {\n\n                try {\n\n                    if (tileResults.getCount() > 0) {\n\n                        BoundingBox requestProjectedBoundingBox = requestBoundingBox.transform(transformRequestToTiles);\n\n                        // Determine the requested tile dimensions, or use the dimensions of a single tile matrix tile\n                        int requestedTileWidth = width != null ? width : (int) tileMatrix\n                                .getTileWidth();\n                        int requestedTileHeight = height != null ? height : (int) tileMatrix\n                                .getTileHeight();\n\n                        // Determine the size of the tile to initially draw\n                        int tileWidth = requestedTileWidth;\n                        int tileHeight = requestedTileHeight;\n                        if (!sameProjection) {\n                            tileWidth = (int) Math.round(\n                                    (requestProjectedBoundingBox.getMaxLongitude() - requestProjectedBoundingBox.getMinLongitude())\n                                            / tileMatrix.getPixelXSize());\n                            tileHeight = (int) Math.round(\n                                    (requestProjectedBoundingBox.getMaxLatitude() - requestProjectedBoundingBox.getMinLatitude())\n                                            / tileMatrix.getPixelYSize());\n                        }\n\n                        // Draw the resulting bitmap with the matching tiles\n                        Bitmap tileBitmap = drawTile(tileMatrix, tileResults, requestProjectedBoundingBox, tileWidth, tileHeight);\n\n                        // Create the tile\n                        if (tileBitmap != null) {\n\n                            // Project the tile if needed\n                            if (!sameProjection) {\n                                Bitmap reprojectTile = reprojectTile(tileBitmap, requestedTileWidth, requestedTileHeight, requestBoundingBox, transformRequestToTiles, tilesBoundingBox);\n                                tileBitmap.recycle();\n                                tileBitmap = reprojectTile;\n                            }\n\n                            try {\n                                byte[] tileData = BitmapConverter.toBytes(\n                                        tileBitmap, COMPRESS_FORMAT);\n                                tileBitmap.recycle();\n                                tile = new GeoPackageTile(requestedTileWidth, requestedTileHeight, tileData);\n                            } catch (IOException e) {\n                                Log.e(TileCreator.class.getSimpleName(), \"Failed to create tile. min lat: \"\n                                        + requestBoundingBox.getMinLatitude()\n                                        + \", max lat: \" + requestBoundingBox.getMaxLatitude()\n                                        + \", min lon: \" + requestBoundingBox.getMinLongitude() +\n                                        \", max lon: \" + requestBoundingBox.getMaxLongitude(), e);\n                            }\n                        }\n\n                    }\n                } finally {\n                    tileResults.close();\n                }\n            }\n        }\n\n        return tile;\n    }", "code_tokens": ["public", "GeoPackageTile", "getTile", "(", "BoundingBox", "requestBoundingBox", ")", "{", "GeoPackageTile", "tile", "=", "null", ";", "// Transform to the projection of the tiles", "ProjectionTransform", "transformRequestToTiles", "=", "requestProjection", ".", "getTransformation", "(", "tilesProjection", ")", ";", "BoundingBox", "tilesBoundingBox", "=", "requestBoundingBox", ".", "transform", "(", "transformRequestToTiles", ")", ";", "List", "<", "TileMatrix", ">", "tileMatrices", "=", "getTileMatrices", "(", "tilesBoundingBox", ")", ";", "for", "(", "int", "i", "=", "0", ";", "tile", "==", "null", "&&", "i", "<", "tileMatrices", ".", "size", "(", ")", ";", "i", "++", ")", "{", "TileMatrix", "tileMatrix", "=", "tileMatrices", ".", "get", "(", "i", ")", ";", "TileCursor", "tileResults", "=", "retrieveTileResults", "(", "tilesBoundingBox", ",", "tileMatrix", ")", ";", "if", "(", "tileResults", "!=", "null", ")", "{", "try", "{", "if", "(", "tileResults", ".", "getCount", "(", ")", ">", "0", ")", "{", "BoundingBox", "requestProjectedBoundingBox", "=", "requestBoundingBox", ".", "transform", "(", "transformRequestToTiles", ")", ";", "// Determine the requested tile dimensions, or use the dimensions of a single tile matrix tile", "int", "requestedTileWidth", "=", "width", "!=", "null", "?", "width", ":", "(", "int", ")", "tileMatrix", ".", "getTileWidth", "(", ")", ";", "int", "requestedTileHeight", "=", "height", "!=", "null", "?", "height", ":", "(", "int", ")", "tileMatrix", ".", "getTileHeight", "(", ")", ";", "// Determine the size of the tile to initially draw", "int", "tileWidth", "=", "requestedTileWidth", ";", "int", "tileHeight", "=", "requestedTileHeight", ";", "if", "(", "!", "sameProjection", ")", "{", "tileWidth", "=", "(", "int", ")", "Math", ".", "round", "(", "(", "requestProjectedBoundingBox", ".", "getMaxLongitude", "(", ")", "-", "requestProjectedBoundingBox", ".", "getMinLongitude", "(", ")", ")", "/", "tileMatrix", ".", "getPixelXSize", "(", ")", ")", ";", "tileHeight", "=", "(", "int", ")", "Math", ".", "round", "(", "(", "requestProjectedBoundingBox", ".", "getMaxLatitude", "(", ")", "-", "requestProjectedBoundingBox", ".", "getMinLatitude", "(", ")", ")", "/", "tileMatrix", ".", "getPixelYSize", "(", ")", ")", ";", "}", "// Draw the resulting bitmap with the matching tiles", "Bitmap", "tileBitmap", "=", "drawTile", "(", "tileMatrix", ",", "tileResults", ",", "requestProjectedBoundingBox", ",", "tileWidth", ",", "tileHeight", ")", ";", "// Create the tile", "if", "(", "tileBitmap", "!=", "null", ")", "{", "// Project the tile if needed", "if", "(", "!", "sameProjection", ")", "{", "Bitmap", "reprojectTile", "=", "reprojectTile", "(", "tileBitmap", ",", "requestedTileWidth", ",", "requestedTileHeight", ",", "requestBoundingBox", ",", "transformRequestToTiles", ",", "tilesBoundingBox", ")", ";", "tileBitmap", ".", "recycle", "(", ")", ";", "tileBitmap", "=", "reprojectTile", ";", "}", "try", "{", "byte", "[", "]", "tileData", "=", "BitmapConverter", ".", "toBytes", "(", "tileBitmap", ",", "COMPRESS_FORMAT", ")", ";", "tileBitmap", ".", "recycle", "(", ")", ";", "tile", "=", "new", "GeoPackageTile", "(", "requestedTileWidth", ",", "requestedTileHeight", ",", "tileData", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "Log", ".", "e", "(", "TileCreator", ".", "class", ".", "getSimpleName", "(", ")", ",", "\"Failed to create tile. min lat: \"", "+", "requestBoundingBox", ".", "getMinLatitude", "(", ")", "+", "\", max lat: \"", "+", "requestBoundingBox", ".", "getMaxLatitude", "(", ")", "+", "\", min lon: \"", "+", "requestBoundingBox", ".", "getMinLongitude", "(", ")", "+", "\", max lon: \"", "+", "requestBoundingBox", ".", "getMaxLongitude", "(", ")", ",", "e", ")", ";", "}", "}", "}", "}", "finally", "{", "tileResults", ".", "close", "(", ")", ";", "}", "}", "}", "return", "tile", ";", "}"], "docstring": "Get the tile from the request bounding box in the request projection\n\n@param requestBoundingBox request bounding box in the request projection\n@return tile", "docstring_tokens": ["Get", "the", "tile", "from", "the", "request", "bounding", "box", "in", "the", "request", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/TileCreator.java#L274-L350", "partition": "test", "index": 5989, "time": "2016-05-12 11:30:47"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/TileCreator.java", "func_name": "TileCreator.drawTile", "original_string": "private Bitmap drawTile(TileMatrix tileMatrix, TileCursor tileResults, BoundingBox requestProjectedBoundingBox, int tileWidth, int tileHeight) {\n\n        // Draw the resulting bitmap with the matching tiles\n        Bitmap tileBitmap = null;\n        Canvas canvas = null;\n        Paint paint = null;\n        while (tileResults.moveToNext()) {\n\n            // Get the next tile\n            TileRow tileRow = tileResults.getRow();\n            Bitmap tileDataBitmap = tileRow.getTileDataBitmap();\n\n            // Get the bounding box of the tile\n            BoundingBox tileBoundingBox = TileBoundingBoxUtils\n                    .getBoundingBox(\n                            tileSetBoundingBox, tileMatrix,\n                            tileRow.getTileColumn(), tileRow.getTileRow());\n\n            // Get the bounding box where the requested image and\n            // tile overlap\n            BoundingBox overlap = requestProjectedBoundingBox.overlap(\n                    tileBoundingBox);\n\n            // If the tile overlaps with the requested box\n            if (overlap != null) {\n\n                // Get the rectangle of the tile image to draw\n                Rect src = TileBoundingBoxAndroidUtils\n                        .getRectangle(tileMatrix.getTileWidth(),\n                                tileMatrix.getTileHeight(),\n                                tileBoundingBox, overlap);\n\n                // Get the rectangle of where to draw the tile in\n                // the resulting image\n                RectF dest = TileBoundingBoxAndroidUtils\n                        .getRoundedFloatRectangle(tileWidth, tileHeight,\n                                requestProjectedBoundingBox, overlap);\n\n                // Create the bitmap first time through\n                if (tileBitmap == null) {\n                    tileBitmap = Bitmap.createBitmap(tileWidth,\n                            tileHeight, Bitmap.Config.ARGB_8888);\n                    canvas = new Canvas(tileBitmap);\n                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n                }\n\n                // Draw the tile to the bitmap\n                canvas.drawBitmap(tileDataBitmap, src, dest, paint);\n            }\n        }\n\n        return tileBitmap;\n    }", "language": "java", "code": "private Bitmap drawTile(TileMatrix tileMatrix, TileCursor tileResults, BoundingBox requestProjectedBoundingBox, int tileWidth, int tileHeight) {\n\n        // Draw the resulting bitmap with the matching tiles\n        Bitmap tileBitmap = null;\n        Canvas canvas = null;\n        Paint paint = null;\n        while (tileResults.moveToNext()) {\n\n            // Get the next tile\n            TileRow tileRow = tileResults.getRow();\n            Bitmap tileDataBitmap = tileRow.getTileDataBitmap();\n\n            // Get the bounding box of the tile\n            BoundingBox tileBoundingBox = TileBoundingBoxUtils\n                    .getBoundingBox(\n                            tileSetBoundingBox, tileMatrix,\n                            tileRow.getTileColumn(), tileRow.getTileRow());\n\n            // Get the bounding box where the requested image and\n            // tile overlap\n            BoundingBox overlap = requestProjectedBoundingBox.overlap(\n                    tileBoundingBox);\n\n            // If the tile overlaps with the requested box\n            if (overlap != null) {\n\n                // Get the rectangle of the tile image to draw\n                Rect src = TileBoundingBoxAndroidUtils\n                        .getRectangle(tileMatrix.getTileWidth(),\n                                tileMatrix.getTileHeight(),\n                                tileBoundingBox, overlap);\n\n                // Get the rectangle of where to draw the tile in\n                // the resulting image\n                RectF dest = TileBoundingBoxAndroidUtils\n                        .getRoundedFloatRectangle(tileWidth, tileHeight,\n                                requestProjectedBoundingBox, overlap);\n\n                // Create the bitmap first time through\n                if (tileBitmap == null) {\n                    tileBitmap = Bitmap.createBitmap(tileWidth,\n                            tileHeight, Bitmap.Config.ARGB_8888);\n                    canvas = new Canvas(tileBitmap);\n                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n                }\n\n                // Draw the tile to the bitmap\n                canvas.drawBitmap(tileDataBitmap, src, dest, paint);\n            }\n        }\n\n        return tileBitmap;\n    }", "code_tokens": ["private", "Bitmap", "drawTile", "(", "TileMatrix", "tileMatrix", ",", "TileCursor", "tileResults", ",", "BoundingBox", "requestProjectedBoundingBox", ",", "int", "tileWidth", ",", "int", "tileHeight", ")", "{", "// Draw the resulting bitmap with the matching tiles", "Bitmap", "tileBitmap", "=", "null", ";", "Canvas", "canvas", "=", "null", ";", "Paint", "paint", "=", "null", ";", "while", "(", "tileResults", ".", "moveToNext", "(", ")", ")", "{", "// Get the next tile", "TileRow", "tileRow", "=", "tileResults", ".", "getRow", "(", ")", ";", "Bitmap", "tileDataBitmap", "=", "tileRow", ".", "getTileDataBitmap", "(", ")", ";", "// Get the bounding box of the tile", "BoundingBox", "tileBoundingBox", "=", "TileBoundingBoxUtils", ".", "getBoundingBox", "(", "tileSetBoundingBox", ",", "tileMatrix", ",", "tileRow", ".", "getTileColumn", "(", ")", ",", "tileRow", ".", "getTileRow", "(", ")", ")", ";", "// Get the bounding box where the requested image and", "// tile overlap", "BoundingBox", "overlap", "=", "requestProjectedBoundingBox", ".", "overlap", "(", "tileBoundingBox", ")", ";", "// If the tile overlaps with the requested box", "if", "(", "overlap", "!=", "null", ")", "{", "// Get the rectangle of the tile image to draw", "Rect", "src", "=", "TileBoundingBoxAndroidUtils", ".", "getRectangle", "(", "tileMatrix", ".", "getTileWidth", "(", ")", ",", "tileMatrix", ".", "getTileHeight", "(", ")", ",", "tileBoundingBox", ",", "overlap", ")", ";", "// Get the rectangle of where to draw the tile in", "// the resulting image", "RectF", "dest", "=", "TileBoundingBoxAndroidUtils", ".", "getRoundedFloatRectangle", "(", "tileWidth", ",", "tileHeight", ",", "requestProjectedBoundingBox", ",", "overlap", ")", ";", "// Create the bitmap first time through", "if", "(", "tileBitmap", "==", "null", ")", "{", "tileBitmap", "=", "Bitmap", ".", "createBitmap", "(", "tileWidth", ",", "tileHeight", ",", "Bitmap", ".", "Config", ".", "ARGB_8888", ")", ";", "canvas", "=", "new", "Canvas", "(", "tileBitmap", ")", ";", "paint", "=", "new", "Paint", "(", "Paint", ".", "ANTI_ALIAS_FLAG", ")", ";", "}", "// Draw the tile to the bitmap", "canvas", ".", "drawBitmap", "(", "tileDataBitmap", ",", "src", ",", "dest", ",", "paint", ")", ";", "}", "}", "return", "tileBitmap", ";", "}"], "docstring": "Draw the tile from the tile results\n\n@param tileMatrix\n@param tileResults\n@param requestProjectedBoundingBox\n@param tileWidth\n@param tileHeight\n@return tile bitmap", "docstring_tokens": ["Draw", "the", "tile", "from", "the", "tile", "results"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/TileCreator.java#L362-L414", "partition": "test", "index": 5990, "time": "2016-05-12 16:18:00"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/TileCreator.java", "func_name": "TileCreator.reprojectTile", "original_string": "private Bitmap reprojectTile(Bitmap tile, int requestedTileWidth, int requestedTileHeight, BoundingBox requestBoundingBox, ProjectionTransform transformRequestToTiles, BoundingBox tilesBoundingBox) {\n\n        final double requestedWidthUnitsPerPixel = (requestBoundingBox.getMaxLongitude() - requestBoundingBox.getMinLongitude()) / requestedTileWidth;\n        final double requestedHeightUnitsPerPixel = (requestBoundingBox.getMaxLatitude() - requestBoundingBox.getMinLatitude()) / requestedTileHeight;\n\n        final double tilesDistanceWidth = tilesBoundingBox.getMaxLongitude() - tilesBoundingBox.getMinLongitude();\n        final double tilesDistanceHeight = tilesBoundingBox.getMaxLatitude() - tilesBoundingBox.getMinLatitude();\n\n        final int width = tile.getWidth();\n        final int height = tile.getHeight();\n\n        // Tile pixels of the tile matrix tiles\n        int[] pixels = new int[width * height];\n        tile.getPixels(pixels, 0, width, 0, 0, width, height);\n\n        // Projected tile pixels to draw the reprojected tile\n        int[] projectedPixels = new int[requestedTileWidth * requestedTileHeight];\n\n        // Retrieve each pixel in the new tile from the unprojected tile\n        for (int y = 0; y < requestedTileHeight; y++) {\n            for (int x = 0; x < requestedTileWidth; x++) {\n\n                double longitude = requestBoundingBox.getMinLongitude() + (x * requestedWidthUnitsPerPixel);\n                double latitude = requestBoundingBox.getMaxLatitude() - (y * requestedHeightUnitsPerPixel);\n                ProjCoordinate fromCoord = new ProjCoordinate(longitude, latitude);\n                ProjCoordinate toCoord = transformRequestToTiles.transform(fromCoord);\n                double projectedLongitude = toCoord.x;\n                double projectedLatitude = toCoord.y;\n\n                int xPixel = (int) Math.round(((projectedLongitude - tilesBoundingBox.getMinLongitude()) / tilesDistanceWidth) * width);\n                int yPixel = (int) Math.round(((tilesBoundingBox.getMaxLatitude() - projectedLatitude) / tilesDistanceHeight) * height);\n\n                xPixel = Math.max(0, xPixel);\n                xPixel = Math.min(width - 1, xPixel);\n\n                yPixel = Math.max(0, yPixel);\n                yPixel = Math.min(height - 1, yPixel);\n\n                int color = pixels[(yPixel * width) + xPixel];\n                projectedPixels[(y * requestedTileWidth) + x] = color;\n            }\n        }\n\n        // Draw the new tile bitmap\n        Bitmap projectedTileBitmap = Bitmap.createBitmap(requestedTileWidth,\n                requestedTileHeight, tile.getConfig());\n        projectedTileBitmap.setPixels(projectedPixels, 0, requestedTileWidth, 0, 0, requestedTileWidth, requestedTileHeight);\n\n        return projectedTileBitmap;\n    }", "language": "java", "code": "private Bitmap reprojectTile(Bitmap tile, int requestedTileWidth, int requestedTileHeight, BoundingBox requestBoundingBox, ProjectionTransform transformRequestToTiles, BoundingBox tilesBoundingBox) {\n\n        final double requestedWidthUnitsPerPixel = (requestBoundingBox.getMaxLongitude() - requestBoundingBox.getMinLongitude()) / requestedTileWidth;\n        final double requestedHeightUnitsPerPixel = (requestBoundingBox.getMaxLatitude() - requestBoundingBox.getMinLatitude()) / requestedTileHeight;\n\n        final double tilesDistanceWidth = tilesBoundingBox.getMaxLongitude() - tilesBoundingBox.getMinLongitude();\n        final double tilesDistanceHeight = tilesBoundingBox.getMaxLatitude() - tilesBoundingBox.getMinLatitude();\n\n        final int width = tile.getWidth();\n        final int height = tile.getHeight();\n\n        // Tile pixels of the tile matrix tiles\n        int[] pixels = new int[width * height];\n        tile.getPixels(pixels, 0, width, 0, 0, width, height);\n\n        // Projected tile pixels to draw the reprojected tile\n        int[] projectedPixels = new int[requestedTileWidth * requestedTileHeight];\n\n        // Retrieve each pixel in the new tile from the unprojected tile\n        for (int y = 0; y < requestedTileHeight; y++) {\n            for (int x = 0; x < requestedTileWidth; x++) {\n\n                double longitude = requestBoundingBox.getMinLongitude() + (x * requestedWidthUnitsPerPixel);\n                double latitude = requestBoundingBox.getMaxLatitude() - (y * requestedHeightUnitsPerPixel);\n                ProjCoordinate fromCoord = new ProjCoordinate(longitude, latitude);\n                ProjCoordinate toCoord = transformRequestToTiles.transform(fromCoord);\n                double projectedLongitude = toCoord.x;\n                double projectedLatitude = toCoord.y;\n\n                int xPixel = (int) Math.round(((projectedLongitude - tilesBoundingBox.getMinLongitude()) / tilesDistanceWidth) * width);\n                int yPixel = (int) Math.round(((tilesBoundingBox.getMaxLatitude() - projectedLatitude) / tilesDistanceHeight) * height);\n\n                xPixel = Math.max(0, xPixel);\n                xPixel = Math.min(width - 1, xPixel);\n\n                yPixel = Math.max(0, yPixel);\n                yPixel = Math.min(height - 1, yPixel);\n\n                int color = pixels[(yPixel * width) + xPixel];\n                projectedPixels[(y * requestedTileWidth) + x] = color;\n            }\n        }\n\n        // Draw the new tile bitmap\n        Bitmap projectedTileBitmap = Bitmap.createBitmap(requestedTileWidth,\n                requestedTileHeight, tile.getConfig());\n        projectedTileBitmap.setPixels(projectedPixels, 0, requestedTileWidth, 0, 0, requestedTileWidth, requestedTileHeight);\n\n        return projectedTileBitmap;\n    }", "code_tokens": ["private", "Bitmap", "reprojectTile", "(", "Bitmap", "tile", ",", "int", "requestedTileWidth", ",", "int", "requestedTileHeight", ",", "BoundingBox", "requestBoundingBox", ",", "ProjectionTransform", "transformRequestToTiles", ",", "BoundingBox", "tilesBoundingBox", ")", "{", "final", "double", "requestedWidthUnitsPerPixel", "=", "(", "requestBoundingBox", ".", "getMaxLongitude", "(", ")", "-", "requestBoundingBox", ".", "getMinLongitude", "(", ")", ")", "/", "requestedTileWidth", ";", "final", "double", "requestedHeightUnitsPerPixel", "=", "(", "requestBoundingBox", ".", "getMaxLatitude", "(", ")", "-", "requestBoundingBox", ".", "getMinLatitude", "(", ")", ")", "/", "requestedTileHeight", ";", "final", "double", "tilesDistanceWidth", "=", "tilesBoundingBox", ".", "getMaxLongitude", "(", ")", "-", "tilesBoundingBox", ".", "getMinLongitude", "(", ")", ";", "final", "double", "tilesDistanceHeight", "=", "tilesBoundingBox", ".", "getMaxLatitude", "(", ")", "-", "tilesBoundingBox", ".", "getMinLatitude", "(", ")", ";", "final", "int", "width", "=", "tile", ".", "getWidth", "(", ")", ";", "final", "int", "height", "=", "tile", ".", "getHeight", "(", ")", ";", "// Tile pixels of the tile matrix tiles", "int", "[", "]", "pixels", "=", "new", "int", "[", "width", "*", "height", "]", ";", "tile", ".", "getPixels", "(", "pixels", ",", "0", ",", "width", ",", "0", ",", "0", ",", "width", ",", "height", ")", ";", "// Projected tile pixels to draw the reprojected tile", "int", "[", "]", "projectedPixels", "=", "new", "int", "[", "requestedTileWidth", "*", "requestedTileHeight", "]", ";", "// Retrieve each pixel in the new tile from the unprojected tile", "for", "(", "int", "y", "=", "0", ";", "y", "<", "requestedTileHeight", ";", "y", "++", ")", "{", "for", "(", "int", "x", "=", "0", ";", "x", "<", "requestedTileWidth", ";", "x", "++", ")", "{", "double", "longitude", "=", "requestBoundingBox", ".", "getMinLongitude", "(", ")", "+", "(", "x", "*", "requestedWidthUnitsPerPixel", ")", ";", "double", "latitude", "=", "requestBoundingBox", ".", "getMaxLatitude", "(", ")", "-", "(", "y", "*", "requestedHeightUnitsPerPixel", ")", ";", "ProjCoordinate", "fromCoord", "=", "new", "ProjCoordinate", "(", "longitude", ",", "latitude", ")", ";", "ProjCoordinate", "toCoord", "=", "transformRequestToTiles", ".", "transform", "(", "fromCoord", ")", ";", "double", "projectedLongitude", "=", "toCoord", ".", "x", ";", "double", "projectedLatitude", "=", "toCoord", ".", "y", ";", "int", "xPixel", "=", "(", "int", ")", "Math", ".", "round", "(", "(", "(", "projectedLongitude", "-", "tilesBoundingBox", ".", "getMinLongitude", "(", ")", ")", "/", "tilesDistanceWidth", ")", "*", "width", ")", ";", "int", "yPixel", "=", "(", "int", ")", "Math", ".", "round", "(", "(", "(", "tilesBoundingBox", ".", "getMaxLatitude", "(", ")", "-", "projectedLatitude", ")", "/", "tilesDistanceHeight", ")", "*", "height", ")", ";", "xPixel", "=", "Math", ".", "max", "(", "0", ",", "xPixel", ")", ";", "xPixel", "=", "Math", ".", "min", "(", "width", "-", "1", ",", "xPixel", ")", ";", "yPixel", "=", "Math", ".", "max", "(", "0", ",", "yPixel", ")", ";", "yPixel", "=", "Math", ".", "min", "(", "height", "-", "1", ",", "yPixel", ")", ";", "int", "color", "=", "pixels", "[", "(", "yPixel", "*", "width", ")", "+", "xPixel", "]", ";", "projectedPixels", "[", "(", "y", "*", "requestedTileWidth", ")", "+", "x", "]", "=", "color", ";", "}", "}", "// Draw the new tile bitmap", "Bitmap", "projectedTileBitmap", "=", "Bitmap", ".", "createBitmap", "(", "requestedTileWidth", ",", "requestedTileHeight", ",", "tile", ".", "getConfig", "(", ")", ")", ";", "projectedTileBitmap", ".", "setPixels", "(", "projectedPixels", ",", "0", ",", "requestedTileWidth", ",", "0", ",", "0", ",", "requestedTileWidth", ",", "requestedTileHeight", ")", ";", "return", "projectedTileBitmap", ";", "}"], "docstring": "Reproject the tile to the requested projection\n\n@param tile                    tile in the tile matrix projection\n@param requestedTileWidth      requested tile width\n@param requestedTileHeight     requested tile height\n@param requestBoundingBox      request bounding box in the request projection\n@param transformRequestToTiles transformation from request to tiles\n@param tilesBoundingBox        request bounding box in the tile matrix projection\n@return projected tile", "docstring_tokens": ["Reproject", "the", "tile", "to", "the", "requested", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/retriever/TileCreator.java#L427-L476", "partition": "test", "index": 5991, "time": "2016-05-12 16:18:00"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileBoundingBoxAndroidUtils.java", "func_name": "TileBoundingBoxAndroidUtils.getRoundedFloatRectangle", "original_string": "public static RectF getRoundedFloatRectangle(long width, long height,\n                                                 BoundingBox boundingBox, BoundingBox boundingBoxSection) {\n\n        Rect rect = getRectangle(width, height, boundingBox,\n                boundingBoxSection);\n\n        RectF rectF = new RectF(rect);\n\n        return rectF;\n    }", "language": "java", "code": "public static RectF getRoundedFloatRectangle(long width, long height,\n                                                 BoundingBox boundingBox, BoundingBox boundingBoxSection) {\n\n        Rect rect = getRectangle(width, height, boundingBox,\n                boundingBoxSection);\n\n        RectF rectF = new RectF(rect);\n\n        return rectF;\n    }", "code_tokens": ["public", "static", "RectF", "getRoundedFloatRectangle", "(", "long", "width", ",", "long", "height", ",", "BoundingBox", "boundingBox", ",", "BoundingBox", "boundingBoxSection", ")", "{", "Rect", "rect", "=", "getRectangle", "(", "width", ",", "height", ",", "boundingBox", ",", "boundingBoxSection", ")", ";", "RectF", "rectF", "=", "new", "RectF", "(", "rect", ")", ";", "return", "rectF", ";", "}"], "docstring": "Get a rectangle with rounded floating point boundaries using the tile width,\nheight, bounding box, and the bounding box section within the outer box\nto build the rectangle from\n\n@param width              width\n@param height             height\n@param boundingBox        full bounding box\n@param boundingBoxSection rectangle bounding box section\n@return floating point rectangle\n@since 1.3.0", "docstring_tokens": ["Get", "a", "rectangle", "with", "rounded", "floating", "point", "boundaries", "using", "the", "tile", "width", "height", "bounding", "box", "and", "the", "bounding", "box", "section", "within", "the", "outer", "box", "to", "build", "the", "rectangle", "from"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileBoundingBoxAndroidUtils.java#L49-L58", "partition": "test", "index": 5956, "time": "2016-05-13 08:13:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/SQLUtils.java", "func_name": "SQLUtils.quoteWrap", "original_string": "public static ContentValues quoteWrap(ContentValues values) {\n        ContentValues quoteValues = null;\n        if (values != null) {\n\n            Map<String, Object> quoteMap = new HashMap<>();\n            for (Map.Entry<String, Object> value : values.valueSet()) {\n                quoteMap.put(CoreSQLUtils.quoteWrap(value.getKey()), value.getValue());\n            }\n\n            Parcel parcel = Parcel.obtain();\n            parcel.writeMap(quoteMap);\n            parcel.setDataPosition(0);\n            quoteValues = ContentValues.CREATOR.createFromParcel(parcel);\n            parcel.recycle();\n        }\n\n        return quoteValues;\n    }", "language": "java", "code": "public static ContentValues quoteWrap(ContentValues values) {\n        ContentValues quoteValues = null;\n        if (values != null) {\n\n            Map<String, Object> quoteMap = new HashMap<>();\n            for (Map.Entry<String, Object> value : values.valueSet()) {\n                quoteMap.put(CoreSQLUtils.quoteWrap(value.getKey()), value.getValue());\n            }\n\n            Parcel parcel = Parcel.obtain();\n            parcel.writeMap(quoteMap);\n            parcel.setDataPosition(0);\n            quoteValues = ContentValues.CREATOR.createFromParcel(parcel);\n            parcel.recycle();\n        }\n\n        return quoteValues;\n    }", "code_tokens": ["public", "static", "ContentValues", "quoteWrap", "(", "ContentValues", "values", ")", "{", "ContentValues", "quoteValues", "=", "null", ";", "if", "(", "values", "!=", "null", ")", "{", "Map", "<", "String", ",", "Object", ">", "quoteMap", "=", "new", "HashMap", "<>", "(", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Object", ">", "value", ":", "values", ".", "valueSet", "(", ")", ")", "{", "quoteMap", ".", "put", "(", "CoreSQLUtils", ".", "quoteWrap", "(", "value", ".", "getKey", "(", ")", ")", ",", "value", ".", "getValue", "(", ")", ")", ";", "}", "Parcel", "parcel", "=", "Parcel", ".", "obtain", "(", ")", ";", "parcel", ".", "writeMap", "(", "quoteMap", ")", ";", "parcel", ".", "setDataPosition", "(", "0", ")", ";", "quoteValues", "=", "ContentValues", ".", "CREATOR", ".", "createFromParcel", "(", "parcel", ")", ";", "parcel", ".", "recycle", "(", ")", ";", "}", "return", "quoteValues", ";", "}"], "docstring": "Wrap the content values names in quotes\n\n@param values content values\n@return quoted content values", "docstring_tokens": ["Wrap", "the", "content", "values", "names", "in", "quotes"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/SQLUtils.java#L23-L40", "partition": "test", "index": 6016, "time": "2016-09-01 16:46:19"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getResultsZoomOut", "original_string": "private CoverageDataTileMatrixResults getResultsZoomOut(\n            BoundingBox requestProjectedBoundingBox, TileMatrix tileMatrix,\n            int overlappingPixels) {\n\n        CoverageDataTileMatrixResults results = null;\n        for (long zoomLevel = tileMatrix.getZoomLevel() - 1; zoomLevel >= tileDao\n                .getMinZoom(); zoomLevel--) {\n            TileMatrix zoomTileMatrix = tileDao.getTileMatrix(zoomLevel);\n            if (zoomTileMatrix != null) {\n                results = getResults(requestProjectedBoundingBox,\n                        zoomTileMatrix, overlappingPixels);\n                if (results != null) {\n                    break;\n                }\n            }\n        }\n        return results;\n    }", "language": "java", "code": "private CoverageDataTileMatrixResults getResultsZoomOut(\n            BoundingBox requestProjectedBoundingBox, TileMatrix tileMatrix,\n            int overlappingPixels) {\n\n        CoverageDataTileMatrixResults results = null;\n        for (long zoomLevel = tileMatrix.getZoomLevel() - 1; zoomLevel >= tileDao\n                .getMinZoom(); zoomLevel--) {\n            TileMatrix zoomTileMatrix = tileDao.getTileMatrix(zoomLevel);\n            if (zoomTileMatrix != null) {\n                results = getResults(requestProjectedBoundingBox,\n                        zoomTileMatrix, overlappingPixels);\n                if (results != null) {\n                    break;\n                }\n            }\n        }\n        return results;\n    }", "code_tokens": ["private", "CoverageDataTileMatrixResults", "getResultsZoomOut", "(", "BoundingBox", "requestProjectedBoundingBox", ",", "TileMatrix", "tileMatrix", ",", "int", "overlappingPixels", ")", "{", "CoverageDataTileMatrixResults", "results", "=", "null", ";", "for", "(", "long", "zoomLevel", "=", "tileMatrix", ".", "getZoomLevel", "(", ")", "-", "1", ";", "zoomLevel", ">=", "tileDao", ".", "getMinZoom", "(", ")", ";", "zoomLevel", "--", ")", "{", "TileMatrix", "zoomTileMatrix", "=", "tileDao", ".", "getTileMatrix", "(", "zoomLevel", ")", ";", "if", "(", "zoomTileMatrix", "!=", "null", ")", "{", "results", "=", "getResults", "(", "requestProjectedBoundingBox", ",", "zoomTileMatrix", ",", "overlappingPixels", ")", ";", "if", "(", "results", "!=", "null", ")", "{", "break", ";", "}", "}", "}", "return", "results", ";", "}"], "docstring": "Get the coverage data tile results by zooming out from the provided tile\nmatrix\n\n@param requestProjectedBoundingBox request projected bounding box\n@param tileMatrix                  tile matrix\n@param overlappingPixels           overlapping request pixels\n@return tile matrix results", "docstring_tokens": ["Get", "the", "coverage", "data", "tile", "results", "by", "zooming", "out", "from", "the", "provided", "tile", "matrix"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L538-L555", "partition": "test", "index": 5901, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java", "func_name": "CoverageDataTiff.getPixelValue", "original_string": "public float getPixelValue(byte[] imageBytes, int x, int y) {\n\n        TIFFImage tiffImage = TiffReader.readTiff(imageBytes);\n        FileDirectory directory = tiffImage.getFileDirectory();\n        validateImageType(directory);\n        Rasters rasters = directory.readRasters();\n        float pixelValue = rasters.getFirstPixelSample(x, y).floatValue();\n\n        return pixelValue;\n    }", "language": "java", "code": "public float getPixelValue(byte[] imageBytes, int x, int y) {\n\n        TIFFImage tiffImage = TiffReader.readTiff(imageBytes);\n        FileDirectory directory = tiffImage.getFileDirectory();\n        validateImageType(directory);\n        Rasters rasters = directory.readRasters();\n        float pixelValue = rasters.getFirstPixelSample(x, y).floatValue();\n\n        return pixelValue;\n    }", "code_tokens": ["public", "float", "getPixelValue", "(", "byte", "[", "]", "imageBytes", ",", "int", "x", ",", "int", "y", ")", "{", "TIFFImage", "tiffImage", "=", "TiffReader", ".", "readTiff", "(", "imageBytes", ")", ";", "FileDirectory", "directory", "=", "tiffImage", ".", "getFileDirectory", "(", ")", ";", "validateImageType", "(", "directory", ")", ";", "Rasters", "rasters", "=", "directory", ".", "readRasters", "(", ")", ";", "float", "pixelValue", "=", "rasters", ".", "getFirstPixelSample", "(", "x", ",", "y", ")", ".", "floatValue", "(", ")", ";", "return", "pixelValue", ";", "}"], "docstring": "Get the pixel value as a float from the image and the coordinate\n\n@param imageBytes image bytes\n@param x          x coordinate\n@param y          y coordinate\n@return float pixel value", "docstring_tokens": ["Get", "the", "pixel", "value", "as", "a", "float", "from", "the", "image", "and", "the", "coordinate"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java#L115-L124", "partition": "test", "index": 5945, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.getClosestZoomLevel", "original_string": "public Long getClosestZoomLevel(double length) {\n\n        Long zoomLevel = TileDaoUtils.getClosestZoomLevel(widths, heights,\n                tileMatrices, length);\n        return zoomLevel;\n    }", "language": "java", "code": "public Long getClosestZoomLevel(double length) {\n\n        Long zoomLevel = TileDaoUtils.getClosestZoomLevel(widths, heights,\n                tileMatrices, length);\n        return zoomLevel;\n    }", "code_tokens": ["public", "Long", "getClosestZoomLevel", "(", "double", "length", ")", "{", "Long", "zoomLevel", "=", "TileDaoUtils", ".", "getClosestZoomLevel", "(", "widths", ",", "heights", ",", "tileMatrices", ",", "length", ")", ";", "return", "zoomLevel", ";", "}"], "docstring": "Get the closest zoom level for the provided width and height in the\ndefault units\n\n@param length in default units\n@return zoom level\n@since 1.3.1", "docstring_tokens": ["Get", "the", "closest", "zoom", "level", "for", "the", "provided", "width", "and", "height", "in", "the", "default", "units"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L368-L373", "partition": "test", "index": 5939, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java", "func_name": "CoverageDataTiff.createImage", "original_string": "public CoverageDataTiffImage createImage(int tileWidth, int tileHeight) {\n\n        Rasters rasters = new Rasters(tileWidth, tileHeight, 1,\n                BITS_PER_SAMPLE, TiffConstants.SAMPLE_FORMAT_FLOAT);\n\n        int rowsPerStrip = rasters.calculateRowsPerStrip(TiffConstants.PLANAR_CONFIGURATION_CHUNKY);\n\n        FileDirectory fileDirectory = new FileDirectory();\n        fileDirectory.setImageWidth(tileWidth);\n        fileDirectory.setImageHeight(tileHeight);\n        fileDirectory.setBitsPerSample(BITS_PER_SAMPLE);\n        fileDirectory.setCompression(TiffConstants.COMPRESSION_NO);\n        fileDirectory.setPhotometricInterpretation(TiffConstants.PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO);\n        fileDirectory.setSamplesPerPixel(SAMPLES_PER_PIXEL);\n        fileDirectory.setRowsPerStrip(rowsPerStrip);\n        fileDirectory.setPlanarConfiguration(TiffConstants.PLANAR_CONFIGURATION_CHUNKY);\n        fileDirectory.setSampleFormat(TiffConstants.SAMPLE_FORMAT_FLOAT);\n        fileDirectory.setWriteRasters(rasters);\n\n        CoverageDataTiffImage image = new CoverageDataTiffImage(fileDirectory);\n\n        return image;\n    }", "language": "java", "code": "public CoverageDataTiffImage createImage(int tileWidth, int tileHeight) {\n\n        Rasters rasters = new Rasters(tileWidth, tileHeight, 1,\n                BITS_PER_SAMPLE, TiffConstants.SAMPLE_FORMAT_FLOAT);\n\n        int rowsPerStrip = rasters.calculateRowsPerStrip(TiffConstants.PLANAR_CONFIGURATION_CHUNKY);\n\n        FileDirectory fileDirectory = new FileDirectory();\n        fileDirectory.setImageWidth(tileWidth);\n        fileDirectory.setImageHeight(tileHeight);\n        fileDirectory.setBitsPerSample(BITS_PER_SAMPLE);\n        fileDirectory.setCompression(TiffConstants.COMPRESSION_NO);\n        fileDirectory.setPhotometricInterpretation(TiffConstants.PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO);\n        fileDirectory.setSamplesPerPixel(SAMPLES_PER_PIXEL);\n        fileDirectory.setRowsPerStrip(rowsPerStrip);\n        fileDirectory.setPlanarConfiguration(TiffConstants.PLANAR_CONFIGURATION_CHUNKY);\n        fileDirectory.setSampleFormat(TiffConstants.SAMPLE_FORMAT_FLOAT);\n        fileDirectory.setWriteRasters(rasters);\n\n        CoverageDataTiffImage image = new CoverageDataTiffImage(fileDirectory);\n\n        return image;\n    }", "code_tokens": ["public", "CoverageDataTiffImage", "createImage", "(", "int", "tileWidth", ",", "int", "tileHeight", ")", "{", "Rasters", "rasters", "=", "new", "Rasters", "(", "tileWidth", ",", "tileHeight", ",", "1", ",", "BITS_PER_SAMPLE", ",", "TiffConstants", ".", "SAMPLE_FORMAT_FLOAT", ")", ";", "int", "rowsPerStrip", "=", "rasters", ".", "calculateRowsPerStrip", "(", "TiffConstants", ".", "PLANAR_CONFIGURATION_CHUNKY", ")", ";", "FileDirectory", "fileDirectory", "=", "new", "FileDirectory", "(", ")", ";", "fileDirectory", ".", "setImageWidth", "(", "tileWidth", ")", ";", "fileDirectory", ".", "setImageHeight", "(", "tileHeight", ")", ";", "fileDirectory", ".", "setBitsPerSample", "(", "BITS_PER_SAMPLE", ")", ";", "fileDirectory", ".", "setCompression", "(", "TiffConstants", ".", "COMPRESSION_NO", ")", ";", "fileDirectory", ".", "setPhotometricInterpretation", "(", "TiffConstants", ".", "PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO", ")", ";", "fileDirectory", ".", "setSamplesPerPixel", "(", "SAMPLES_PER_PIXEL", ")", ";", "fileDirectory", ".", "setRowsPerStrip", "(", "rowsPerStrip", ")", ";", "fileDirectory", ".", "setPlanarConfiguration", "(", "TiffConstants", ".", "PLANAR_CONFIGURATION_CHUNKY", ")", ";", "fileDirectory", ".", "setSampleFormat", "(", "TiffConstants", ".", "SAMPLE_FORMAT_FLOAT", ")", ";", "fileDirectory", ".", "setWriteRasters", "(", "rasters", ")", ";", "CoverageDataTiffImage", "image", "=", "new", "CoverageDataTiffImage", "(", "fileDirectory", ")", ";", "return", "image", ";", "}"], "docstring": "Create a new image\n\n@param tileWidth  tile width\n@param tileHeight tile height\n@return image", "docstring_tokens": ["Create", "a", "new", "image"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java#L361-L383", "partition": "test", "index": 5948, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java", "func_name": "CoverageDataTiff.setPixelValue", "original_string": "public void setPixelValue(CoverageDataTiffImage image, int x, int y,\n                              float pixelValue) {\n        image.getRasters().setFirstPixelSample(x, y, pixelValue);\n    }", "language": "java", "code": "public void setPixelValue(CoverageDataTiffImage image, int x, int y,\n                              float pixelValue) {\n        image.getRasters().setFirstPixelSample(x, y, pixelValue);\n    }", "code_tokens": ["public", "void", "setPixelValue", "(", "CoverageDataTiffImage", "image", ",", "int", "x", ",", "int", "y", ",", "float", "pixelValue", ")", "{", "image", ".", "getRasters", "(", ")", ".", "setFirstPixelSample", "(", "x", ",", "y", ",", "pixelValue", ")", ";", "}"], "docstring": "Set the pixel value into the image\n\n@param image      image\n@param x          x coordinate\n@param y          y coordinate\n@param pixelValue pixel value", "docstring_tokens": ["Set", "the", "pixel", "value", "into", "the", "image"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java#L393-L396", "partition": "test", "index": 5949, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getValue", "original_string": "public double getValue(TileRow tileRow, int x, int y) {\n        GriddedTile griddedTile = getGriddedTile(tileRow.getId());\n        double value = getValue(griddedTile, tileRow, x, y);\n        return value;\n    }", "language": "java", "code": "public double getValue(TileRow tileRow, int x, int y) {\n        GriddedTile griddedTile = getGriddedTile(tileRow.getId());\n        double value = getValue(griddedTile, tileRow, x, y);\n        return value;\n    }", "code_tokens": ["public", "double", "getValue", "(", "TileRow", "tileRow", ",", "int", "x", ",", "int", "y", ")", "{", "GriddedTile", "griddedTile", "=", "getGriddedTile", "(", "tileRow", ".", "getId", "(", ")", ")", ";", "double", "value", "=", "getValue", "(", "griddedTile", ",", "tileRow", ",", "x", ",", "y", ")", ";", "return", "value", ";", "}"], "docstring": "Get the coverage data value of the pixel in the tile row image\n\n@param tileRow tile row\n@param x       x coordinate\n@param y       y coordinate\n@return coverage data value", "docstring_tokens": ["Get", "the", "coverage", "data", "value", "of", "the", "pixel", "in", "the", "tile", "row", "image"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L990-L994", "partition": "test", "index": 5903, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getTileMatrix", "original_string": "private TileMatrix getTileMatrix(CoverageDataRequest request) {\n\n        TileMatrix tileMatrix = null;\n\n        // Check if the request overlaps coverage data bounding box\n        if (request.overlap(coverageBoundingBox) != null) {\n\n            // Get the tile distance\n            BoundingBox projectedBoundingBox = request\n                    .getProjectedBoundingBox();\n            double distanceWidth = projectedBoundingBox.getMaxLongitude()\n                    - projectedBoundingBox.getMinLongitude();\n            double distanceHeight = projectedBoundingBox.getMaxLatitude()\n                    - projectedBoundingBox.getMinLatitude();\n\n            // Get the zoom level to request based upon the tile size\n            Long zoomLevel = tileDao.getClosestZoomLevel(distanceWidth,\n                    distanceHeight);\n\n            // If there is a matching zoom level\n            if (zoomLevel != null) {\n                tileMatrix = tileDao.getTileMatrix(zoomLevel);\n            }\n        }\n\n        return tileMatrix;\n    }", "language": "java", "code": "private TileMatrix getTileMatrix(CoverageDataRequest request) {\n\n        TileMatrix tileMatrix = null;\n\n        // Check if the request overlaps coverage data bounding box\n        if (request.overlap(coverageBoundingBox) != null) {\n\n            // Get the tile distance\n            BoundingBox projectedBoundingBox = request\n                    .getProjectedBoundingBox();\n            double distanceWidth = projectedBoundingBox.getMaxLongitude()\n                    - projectedBoundingBox.getMinLongitude();\n            double distanceHeight = projectedBoundingBox.getMaxLatitude()\n                    - projectedBoundingBox.getMinLatitude();\n\n            // Get the zoom level to request based upon the tile size\n            Long zoomLevel = tileDao.getClosestZoomLevel(distanceWidth,\n                    distanceHeight);\n\n            // If there is a matching zoom level\n            if (zoomLevel != null) {\n                tileMatrix = tileDao.getTileMatrix(zoomLevel);\n            }\n        }\n\n        return tileMatrix;\n    }", "code_tokens": ["private", "TileMatrix", "getTileMatrix", "(", "CoverageDataRequest", "request", ")", "{", "TileMatrix", "tileMatrix", "=", "null", ";", "// Check if the request overlaps coverage data bounding box", "if", "(", "request", ".", "overlap", "(", "coverageBoundingBox", ")", "!=", "null", ")", "{", "// Get the tile distance", "BoundingBox", "projectedBoundingBox", "=", "request", ".", "getProjectedBoundingBox", "(", ")", ";", "double", "distanceWidth", "=", "projectedBoundingBox", ".", "getMaxLongitude", "(", ")", "-", "projectedBoundingBox", ".", "getMinLongitude", "(", ")", ";", "double", "distanceHeight", "=", "projectedBoundingBox", ".", "getMaxLatitude", "(", ")", "-", "projectedBoundingBox", ".", "getMinLatitude", "(", ")", ";", "// Get the zoom level to request based upon the tile size", "Long", "zoomLevel", "=", "tileDao", ".", "getClosestZoomLevel", "(", "distanceWidth", ",", "distanceHeight", ")", ";", "// If there is a matching zoom level", "if", "(", "zoomLevel", "!=", "null", ")", "{", "tileMatrix", "=", "tileDao", ".", "getTileMatrix", "(", "zoomLevel", ")", ";", "}", "}", "return", "tileMatrix", ";", "}"], "docstring": "Get the tile matrix for the zoom level as defined by the area of the\nrequest\n\n@param request coverage data request\n@return tile matrix or null", "docstring_tokens": ["Get", "the", "tile", "matrix", "for", "the", "zoom", "level", "as", "defined", "by", "the", "area", "of", "the", "request"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L924-L950", "partition": "test", "index": 5902, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getResultsZoomIn", "original_string": "private CoverageDataTileMatrixResults getResultsZoomIn(\n            BoundingBox requestProjectedBoundingBox, TileMatrix tileMatrix,\n            int overlappingPixels) {\n\n        CoverageDataTileMatrixResults results = null;\n        for (long zoomLevel = tileMatrix.getZoomLevel() + 1; zoomLevel <= tileDao\n                .getMaxZoom(); zoomLevel++) {\n            TileMatrix zoomTileMatrix = tileDao.getTileMatrix(zoomLevel);\n            if (zoomTileMatrix != null) {\n                results = getResults(requestProjectedBoundingBox,\n                        zoomTileMatrix, overlappingPixels);\n                if (results != null) {\n                    break;\n                }\n            }\n        }\n        return results;\n    }", "language": "java", "code": "private CoverageDataTileMatrixResults getResultsZoomIn(\n            BoundingBox requestProjectedBoundingBox, TileMatrix tileMatrix,\n            int overlappingPixels) {\n\n        CoverageDataTileMatrixResults results = null;\n        for (long zoomLevel = tileMatrix.getZoomLevel() + 1; zoomLevel <= tileDao\n                .getMaxZoom(); zoomLevel++) {\n            TileMatrix zoomTileMatrix = tileDao.getTileMatrix(zoomLevel);\n            if (zoomTileMatrix != null) {\n                results = getResults(requestProjectedBoundingBox,\n                        zoomTileMatrix, overlappingPixels);\n                if (results != null) {\n                    break;\n                }\n            }\n        }\n        return results;\n    }", "code_tokens": ["private", "CoverageDataTileMatrixResults", "getResultsZoomIn", "(", "BoundingBox", "requestProjectedBoundingBox", ",", "TileMatrix", "tileMatrix", ",", "int", "overlappingPixels", ")", "{", "CoverageDataTileMatrixResults", "results", "=", "null", ";", "for", "(", "long", "zoomLevel", "=", "tileMatrix", ".", "getZoomLevel", "(", ")", "+", "1", ";", "zoomLevel", "<=", "tileDao", ".", "getMaxZoom", "(", ")", ";", "zoomLevel", "++", ")", "{", "TileMatrix", "zoomTileMatrix", "=", "tileDao", ".", "getTileMatrix", "(", "zoomLevel", ")", ";", "if", "(", "zoomTileMatrix", "!=", "null", ")", "{", "results", "=", "getResults", "(", "requestProjectedBoundingBox", ",", "zoomTileMatrix", ",", "overlappingPixels", ")", ";", "if", "(", "results", "!=", "null", ")", "{", "break", ";", "}", "}", "}", "return", "results", ";", "}"], "docstring": "Get the coverage data tile results by zooming in from the provided tile\nmatrix\n\n@param requestProjectedBoundingBox request projected bounding box\n@param tileMatrix                  tile matrix\n@param overlappingPixels           overlapping request pixels\n@return tile matrix results", "docstring_tokens": ["Get", "the", "coverage", "data", "tile", "results", "by", "zooming", "in", "from", "the", "provided", "tile", "matrix"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L510-L527", "partition": "test", "index": 5900, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getResultsZoom", "original_string": "private CoverageDataTileMatrixResults getResultsZoom(\n            BoundingBox requestProjectedBoundingBox, TileMatrix tileMatrix,\n            int overlappingPixels) {\n\n        CoverageDataTileMatrixResults results = null;\n\n        if (zoomIn && zoomInBeforeOut) {\n            results = getResultsZoomIn(requestProjectedBoundingBox, tileMatrix,\n                    overlappingPixels);\n        }\n        if (results == null && zoomOut) {\n            results = getResultsZoomOut(requestProjectedBoundingBox,\n                    tileMatrix, overlappingPixels);\n        }\n        if (results == null && zoomIn && !zoomInBeforeOut) {\n            results = getResultsZoomIn(requestProjectedBoundingBox, tileMatrix,\n                    overlappingPixels);\n        }\n\n        return results;\n    }", "language": "java", "code": "private CoverageDataTileMatrixResults getResultsZoom(\n            BoundingBox requestProjectedBoundingBox, TileMatrix tileMatrix,\n            int overlappingPixels) {\n\n        CoverageDataTileMatrixResults results = null;\n\n        if (zoomIn && zoomInBeforeOut) {\n            results = getResultsZoomIn(requestProjectedBoundingBox, tileMatrix,\n                    overlappingPixels);\n        }\n        if (results == null && zoomOut) {\n            results = getResultsZoomOut(requestProjectedBoundingBox,\n                    tileMatrix, overlappingPixels);\n        }\n        if (results == null && zoomIn && !zoomInBeforeOut) {\n            results = getResultsZoomIn(requestProjectedBoundingBox, tileMatrix,\n                    overlappingPixels);\n        }\n\n        return results;\n    }", "code_tokens": ["private", "CoverageDataTileMatrixResults", "getResultsZoom", "(", "BoundingBox", "requestProjectedBoundingBox", ",", "TileMatrix", "tileMatrix", ",", "int", "overlappingPixels", ")", "{", "CoverageDataTileMatrixResults", "results", "=", "null", ";", "if", "(", "zoomIn", "&&", "zoomInBeforeOut", ")", "{", "results", "=", "getResultsZoomIn", "(", "requestProjectedBoundingBox", ",", "tileMatrix", ",", "overlappingPixels", ")", ";", "}", "if", "(", "results", "==", "null", "&&", "zoomOut", ")", "{", "results", "=", "getResultsZoomOut", "(", "requestProjectedBoundingBox", ",", "tileMatrix", ",", "overlappingPixels", ")", ";", "}", "if", "(", "results", "==", "null", "&&", "zoomIn", "&&", "!", "zoomInBeforeOut", ")", "{", "results", "=", "getResultsZoomIn", "(", "requestProjectedBoundingBox", ",", "tileMatrix", ",", "overlappingPixels", ")", ";", "}", "return", "results", ";", "}"], "docstring": "Get the coverage data tile results by zooming in or out as needed from the\nprovided tile matrix to find values\n\n@param requestProjectedBoundingBox request projected bounding box\n@param tileMatrix                  tile matrix\n@param overlappingPixels           overlapping request pixels\n@return tile matrix results", "docstring_tokens": ["Get", "the", "coverage", "data", "tile", "results", "by", "zooming", "in", "or", "out", "as", "needed", "from", "the", "provided", "tile", "matrix", "to", "find", "values"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L479-L499", "partition": "test", "index": 5899, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getResults", "original_string": "private CoverageDataTileMatrixResults getResults(CoverageDataRequest request,\n                                                     BoundingBox requestProjectedBoundingBox, int overlappingPixels) {\n        // Try to get the coverage data from the current zoom level\n        TileMatrix tileMatrix = getTileMatrix(request);\n        CoverageDataTileMatrixResults results = null;\n        if (tileMatrix != null) {\n            results = getResults(requestProjectedBoundingBox, tileMatrix,\n                    overlappingPixels);\n\n            // Try to zoom in or out to find a matching coverage data\n            if (results == null) {\n                results = getResultsZoom(requestProjectedBoundingBox,\n                        tileMatrix, overlappingPixels);\n            }\n        }\n        return results;\n    }", "language": "java", "code": "private CoverageDataTileMatrixResults getResults(CoverageDataRequest request,\n                                                     BoundingBox requestProjectedBoundingBox, int overlappingPixels) {\n        // Try to get the coverage data from the current zoom level\n        TileMatrix tileMatrix = getTileMatrix(request);\n        CoverageDataTileMatrixResults results = null;\n        if (tileMatrix != null) {\n            results = getResults(requestProjectedBoundingBox, tileMatrix,\n                    overlappingPixels);\n\n            // Try to zoom in or out to find a matching coverage data\n            if (results == null) {\n                results = getResultsZoom(requestProjectedBoundingBox,\n                        tileMatrix, overlappingPixels);\n            }\n        }\n        return results;\n    }", "code_tokens": ["private", "CoverageDataTileMatrixResults", "getResults", "(", "CoverageDataRequest", "request", ",", "BoundingBox", "requestProjectedBoundingBox", ",", "int", "overlappingPixels", ")", "{", "// Try to get the coverage data from the current zoom level", "TileMatrix", "tileMatrix", "=", "getTileMatrix", "(", "request", ")", ";", "CoverageDataTileMatrixResults", "results", "=", "null", ";", "if", "(", "tileMatrix", "!=", "null", ")", "{", "results", "=", "getResults", "(", "requestProjectedBoundingBox", ",", "tileMatrix", ",", "overlappingPixels", ")", ";", "// Try to zoom in or out to find a matching coverage data", "if", "(", "results", "==", "null", ")", "{", "results", "=", "getResultsZoom", "(", "requestProjectedBoundingBox", ",", "tileMatrix", ",", "overlappingPixels", ")", ";", "}", "}", "return", "results", ";", "}"], "docstring": "Get the coverage data tile results by finding the tile matrix with values\n\n@param request                     coverage data request\n@param requestProjectedBoundingBox request projected bounding box\n@param overlappingPixels           overlapping request pixels\n@return tile matrix results", "docstring_tokens": ["Get", "the", "coverage", "data", "tile", "results", "by", "finding", "the", "tile", "matrix", "with", "values"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L425-L441", "partition": "test", "index": 5898, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java", "func_name": "CoverageDataTiff.getPixelValues", "original_string": "public float[] getPixelValues(byte[] imageBytes) {\n        TIFFImage tiffImage = TiffReader.readTiff(imageBytes);\n        FileDirectory directory = tiffImage.getFileDirectory();\n        validateImageType(directory);\n        Rasters rasters = directory.readRasters();\n        float[] pixels = new float[rasters.getWidth() * rasters.getHeight()];\n        for (int y = 0; y < rasters.getHeight(); y++) {\n            for (int x = 0; x < rasters.getWidth(); x++) {\n                int index = rasters.getSampleIndex(x, y);\n                pixels[index] = rasters.getPixelSample(0, x, y).floatValue();\n            }\n        }\n        return pixels;\n    }", "language": "java", "code": "public float[] getPixelValues(byte[] imageBytes) {\n        TIFFImage tiffImage = TiffReader.readTiff(imageBytes);\n        FileDirectory directory = tiffImage.getFileDirectory();\n        validateImageType(directory);\n        Rasters rasters = directory.readRasters();\n        float[] pixels = new float[rasters.getWidth() * rasters.getHeight()];\n        for (int y = 0; y < rasters.getHeight(); y++) {\n            for (int x = 0; x < rasters.getWidth(); x++) {\n                int index = rasters.getSampleIndex(x, y);\n                pixels[index] = rasters.getPixelSample(0, x, y).floatValue();\n            }\n        }\n        return pixels;\n    }", "code_tokens": ["public", "float", "[", "]", "getPixelValues", "(", "byte", "[", "]", "imageBytes", ")", "{", "TIFFImage", "tiffImage", "=", "TiffReader", ".", "readTiff", "(", "imageBytes", ")", ";", "FileDirectory", "directory", "=", "tiffImage", ".", "getFileDirectory", "(", ")", ";", "validateImageType", "(", "directory", ")", ";", "Rasters", "rasters", "=", "directory", ".", "readRasters", "(", ")", ";", "float", "[", "]", "pixels", "=", "new", "float", "[", "rasters", ".", "getWidth", "(", ")", "*", "rasters", ".", "getHeight", "(", ")", "]", ";", "for", "(", "int", "y", "=", "0", ";", "y", "<", "rasters", ".", "getHeight", "(", ")", ";", "y", "++", ")", "{", "for", "(", "int", "x", "=", "0", ";", "x", "<", "rasters", ".", "getWidth", "(", ")", ";", "x", "++", ")", "{", "int", "index", "=", "rasters", ".", "getSampleIndex", "(", "x", ",", "y", ")", ";", "pixels", "[", "index", "]", "=", "rasters", ".", "getPixelSample", "(", "0", ",", "x", ",", "y", ")", ".", "floatValue", "(", ")", ";", "}", "}", "return", "pixels", ";", "}"], "docstring": "Get the pixel values of the image as floats\n\n@param imageBytes image bytes\n@return float pixel values", "docstring_tokens": ["Get", "the", "pixel", "values", "of", "the", "image", "as", "floats"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java#L132-L145", "partition": "test", "index": 5946, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPng.java", "func_name": "CoverageDataPng.getPixelValue", "original_string": "public int getPixelValue(byte[] imageBytes, int x, int y) {\n\n        PngReaderInt reader = new PngReaderInt(new ByteArrayInputStream(imageBytes));\n        validateImageType(reader);\n        ImageLineInt row = (ImageLineInt) reader.readRow(y);\n        int pixelValue = row.getScanline()[x];\n        reader.close();\n\n        return pixelValue;\n    }", "language": "java", "code": "public int getPixelValue(byte[] imageBytes, int x, int y) {\n\n        PngReaderInt reader = new PngReaderInt(new ByteArrayInputStream(imageBytes));\n        validateImageType(reader);\n        ImageLineInt row = (ImageLineInt) reader.readRow(y);\n        int pixelValue = row.getScanline()[x];\n        reader.close();\n\n        return pixelValue;\n    }", "code_tokens": ["public", "int", "getPixelValue", "(", "byte", "[", "]", "imageBytes", ",", "int", "x", ",", "int", "y", ")", "{", "PngReaderInt", "reader", "=", "new", "PngReaderInt", "(", "new", "ByteArrayInputStream", "(", "imageBytes", ")", ")", ";", "validateImageType", "(", "reader", ")", ";", "ImageLineInt", "row", "=", "(", "ImageLineInt", ")", "reader", ".", "readRow", "(", "y", ")", ";", "int", "pixelValue", "=", "row", ".", "getScanline", "(", ")", "[", "x", "]", ";", "reader", ".", "close", "(", ")", ";", "return", "pixelValue", ";", "}"], "docstring": "Get the pixel value as a 16 bit unsigned integer value\n\n@param imageBytes image bytes\n@param x          x coordinate\n@param y          y coordinate\n@return pixel value", "docstring_tokens": ["Get", "the", "pixel", "value", "as", "a", "16", "bit", "unsigned", "integer", "value"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPng.java#L107-L116", "partition": "test", "index": 5882, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPng.java", "func_name": "CoverageDataPng.getPixelValues", "original_string": "public int[] getPixelValues(byte[] imageBytes) {\n\n        PngReaderInt reader = new PngReaderInt(new ByteArrayInputStream(imageBytes));\n        validateImageType(reader);\n        int[] pixels = new int[reader.imgInfo.cols * reader.imgInfo.rows];\n        int rowNumber = 0;\n        while (reader.hasMoreRows()) {\n            ImageLineInt row = reader.readRowInt();\n            int[] rowValues = row.getScanline();\n            System.arraycopy(rowValues, 0, pixels, rowNumber * reader.imgInfo.cols, rowValues.length);\n            rowNumber++;\n        }\n        reader.close();\n\n        return pixels;\n    }", "language": "java", "code": "public int[] getPixelValues(byte[] imageBytes) {\n\n        PngReaderInt reader = new PngReaderInt(new ByteArrayInputStream(imageBytes));\n        validateImageType(reader);\n        int[] pixels = new int[reader.imgInfo.cols * reader.imgInfo.rows];\n        int rowNumber = 0;\n        while (reader.hasMoreRows()) {\n            ImageLineInt row = reader.readRowInt();\n            int[] rowValues = row.getScanline();\n            System.arraycopy(rowValues, 0, pixels, rowNumber * reader.imgInfo.cols, rowValues.length);\n            rowNumber++;\n        }\n        reader.close();\n\n        return pixels;\n    }", "code_tokens": ["public", "int", "[", "]", "getPixelValues", "(", "byte", "[", "]", "imageBytes", ")", "{", "PngReaderInt", "reader", "=", "new", "PngReaderInt", "(", "new", "ByteArrayInputStream", "(", "imageBytes", ")", ")", ";", "validateImageType", "(", "reader", ")", ";", "int", "[", "]", "pixels", "=", "new", "int", "[", "reader", ".", "imgInfo", ".", "cols", "*", "reader", ".", "imgInfo", ".", "rows", "]", ";", "int", "rowNumber", "=", "0", ";", "while", "(", "reader", ".", "hasMoreRows", "(", ")", ")", "{", "ImageLineInt", "row", "=", "reader", ".", "readRowInt", "(", ")", ";", "int", "[", "]", "rowValues", "=", "row", ".", "getScanline", "(", ")", ";", "System", ".", "arraycopy", "(", "rowValues", ",", "0", ",", "pixels", ",", "rowNumber", "*", "reader", ".", "imgInfo", ".", "cols", ",", "rowValues", ".", "length", ")", ";", "rowNumber", "++", ";", "}", "reader", ".", "close", "(", ")", ";", "return", "pixels", ";", "}"], "docstring": "Get the pixel values of the image as 16 bit unsigned integer values\n\n@param imageBytes image bytes\n@return 16 bit unsigned integer pixel values", "docstring_tokens": ["Get", "the", "pixel", "values", "of", "the", "image", "as", "16", "bit", "unsigned", "integer", "values"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPng.java#L124-L139", "partition": "test", "index": 5883, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPng.java", "func_name": "CoverageDataPng.createImage", "original_string": "public CoverageDataPngImage createImage(int tileWidth, int tileHeight) {\n        ImageInfo imageInfo = new ImageInfo(tileWidth, tileHeight, 16, false, true, false);\n        CoverageDataPngImage image = new CoverageDataPngImage(imageInfo);\n        return image;\n    }", "language": "java", "code": "public CoverageDataPngImage createImage(int tileWidth, int tileHeight) {\n        ImageInfo imageInfo = new ImageInfo(tileWidth, tileHeight, 16, false, true, false);\n        CoverageDataPngImage image = new CoverageDataPngImage(imageInfo);\n        return image;\n    }", "code_tokens": ["public", "CoverageDataPngImage", "createImage", "(", "int", "tileWidth", ",", "int", "tileHeight", ")", "{", "ImageInfo", "imageInfo", "=", "new", "ImageInfo", "(", "tileWidth", ",", "tileHeight", ",", "16", ",", "false", ",", "true", ",", "false", ")", ";", "CoverageDataPngImage", "image", "=", "new", "CoverageDataPngImage", "(", "imageInfo", ")", ";", "return", "image", ";", "}"], "docstring": "Create a new 16 bit single channel image\n\n@param tileWidth  tile width\n@param tileHeight tile height\n@return image", "docstring_tokens": ["Create", "a", "new", "16", "bit", "single", "channel", "image"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPng.java#L453-L457", "partition": "test", "index": 5885, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPng.java", "func_name": "CoverageDataPng.validateImageType", "original_string": "public static void validateImageType(PngReader reader) {\n        if (reader == null) {\n            throw new GeoPackageException(\"The image is null\");\n        }\n        if (reader.imgInfo.channels != 1 || reader.imgInfo.bitDepth != 16) {\n            throw new GeoPackageException(\n                    \"The coverage data tile is expected to be a single channel 16 bit unsigned short, channels: \"\n                            + reader.imgInfo.channels + \", bits: \" + reader.imgInfo.bitDepth);\n        }\n    }", "language": "java", "code": "public static void validateImageType(PngReader reader) {\n        if (reader == null) {\n            throw new GeoPackageException(\"The image is null\");\n        }\n        if (reader.imgInfo.channels != 1 || reader.imgInfo.bitDepth != 16) {\n            throw new GeoPackageException(\n                    \"The coverage data tile is expected to be a single channel 16 bit unsigned short, channels: \"\n                            + reader.imgInfo.channels + \", bits: \" + reader.imgInfo.bitDepth);\n        }\n    }", "code_tokens": ["public", "static", "void", "validateImageType", "(", "PngReader", "reader", ")", "{", "if", "(", "reader", "==", "null", ")", "{", "throw", "new", "GeoPackageException", "(", "\"The image is null\"", ")", ";", "}", "if", "(", "reader", ".", "imgInfo", ".", "channels", "!=", "1", "||", "reader", ".", "imgInfo", ".", "bitDepth", "!=", "16", ")", "{", "throw", "new", "GeoPackageException", "(", "\"The coverage data tile is expected to be a single channel 16 bit unsigned short, channels: \"", "+", "reader", ".", "imgInfo", ".", "channels", "+", "\", bits: \"", "+", "reader", ".", "imgInfo", ".", "bitDepth", ")", ";", "}", "}"], "docstring": "Validate that the image type is single channel 16 bit\n\n@param reader png reader", "docstring_tokens": ["Validate", "that", "the", "image", "type", "is", "single", "channel", "16", "bit"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPng.java#L146-L155", "partition": "test", "index": 5884, "time": "2016-09-05 14:31:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java", "func_name": "CoverageDataPngImage.getImageBytes", "original_string": "public byte[] getImageBytes() {\n        byte[] bytes = null;\n        if (imageBytes != null) {\n            bytes = imageBytes;\n        } else if (outputStream != null) {\n            bytes = outputStream.toByteArray();\n        }\n        return bytes;\n    }", "language": "java", "code": "public byte[] getImageBytes() {\n        byte[] bytes = null;\n        if (imageBytes != null) {\n            bytes = imageBytes;\n        } else if (outputStream != null) {\n            bytes = outputStream.toByteArray();\n        }\n        return bytes;\n    }", "code_tokens": ["public", "byte", "[", "]", "getImageBytes", "(", ")", "{", "byte", "[", "]", "bytes", "=", "null", ";", "if", "(", "imageBytes", "!=", "null", ")", "{", "bytes", "=", "imageBytes", ";", "}", "else", "if", "(", "outputStream", "!=", "null", ")", "{", "bytes", "=", "outputStream", ".", "toByteArray", "(", ")", ";", "}", "return", "bytes", ";", "}"], "docstring": "Get the image bytes\n\n@return image bytes", "docstring_tokens": ["Get", "the", "image", "bytes"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java#L89-L97", "partition": "test", "index": 6063, "time": "2016-09-15 17:01:27"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java", "func_name": "CoverageDataPngImage.flushStream", "original_string": "public void flushStream() {\n        if (outputStream != null) {\n            if (imageBytes == null) {\n                imageBytes = outputStream.toByteArray();\n            }\n            try {\n                outputStream.close();\n            } catch (IOException e) {\n                Log.w(CoverageDataPngImage.class.getSimpleName(), \"Failed to close output stream\", e);\n            }\n        }\n    }", "language": "java", "code": "public void flushStream() {\n        if (outputStream != null) {\n            if (imageBytes == null) {\n                imageBytes = outputStream.toByteArray();\n            }\n            try {\n                outputStream.close();\n            } catch (IOException e) {\n                Log.w(CoverageDataPngImage.class.getSimpleName(), \"Failed to close output stream\", e);\n            }\n        }\n    }", "code_tokens": ["public", "void", "flushStream", "(", ")", "{", "if", "(", "outputStream", "!=", "null", ")", "{", "if", "(", "imageBytes", "==", "null", ")", "{", "imageBytes", "=", "outputStream", ".", "toByteArray", "(", ")", ";", "}", "try", "{", "outputStream", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "Log", ".", "w", "(", "CoverageDataPngImage", ".", "class", ".", "getSimpleName", "(", ")", ",", "\"Failed to close output stream\"", ",", "e", ")", ";", "}", "}", "}"], "docstring": "Flush the output stream and set the image bytes, close the stream", "docstring_tokens": ["Flush", "the", "output", "stream", "and", "set", "the", "image", "bytes", "close", "the", "stream"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java#L136-L147", "partition": "test", "index": 6064, "time": "2016-09-15 17:01:27"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java", "func_name": "CoverageDataPngImage.getPixel", "original_string": "public int getPixel(int x, int y) {\n        int pixel = -1;\n        if (pixels == null) {\n            readPixels();\n        }\n        if (pixels != null) {\n            pixel = pixels[y][x];\n        } else {\n            throw new GeoPackageException(\"Could not retrieve pixel value\");\n        }\n        return pixel;\n    }", "language": "java", "code": "public int getPixel(int x, int y) {\n        int pixel = -1;\n        if (pixels == null) {\n            readPixels();\n        }\n        if (pixels != null) {\n            pixel = pixels[y][x];\n        } else {\n            throw new GeoPackageException(\"Could not retrieve pixel value\");\n        }\n        return pixel;\n    }", "code_tokens": ["public", "int", "getPixel", "(", "int", "x", ",", "int", "y", ")", "{", "int", "pixel", "=", "-", "1", ";", "if", "(", "pixels", "==", "null", ")", "{", "readPixels", "(", ")", ";", "}", "if", "(", "pixels", "!=", "null", ")", "{", "pixel", "=", "pixels", "[", "y", "]", "[", "x", "]", ";", "}", "else", "{", "throw", "new", "GeoPackageException", "(", "\"Could not retrieve pixel value\"", ")", ";", "}", "return", "pixel", ";", "}"], "docstring": "Get the pixel at the coordinate\n\n@param x x coordinate\n@param y y coordinate\n@return pixel value", "docstring_tokens": ["Get", "the", "pixel", "at", "the", "coordinate"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java#L156-L167", "partition": "test", "index": 6065, "time": "2016-09-15 17:01:27"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java", "func_name": "CoverageDataPngImage.readPixels", "original_string": "private void readPixels() {\n        if (reader != null) {\n            pixels = new int[reader.imgInfo.rows][reader.imgInfo.cols];\n            int rowCount = 0;\n            while (reader.hasMoreRows()) {\n                ImageLineInt row = reader.readRowInt();\n                int[] columnValues = new int[reader.imgInfo.cols];\n                System.arraycopy(row.getScanline(), 0, columnValues, 0, columnValues.length);\n                pixels[rowCount++] = columnValues;\n            }\n            reader.close();\n        }\n    }", "language": "java", "code": "private void readPixels() {\n        if (reader != null) {\n            pixels = new int[reader.imgInfo.rows][reader.imgInfo.cols];\n            int rowCount = 0;\n            while (reader.hasMoreRows()) {\n                ImageLineInt row = reader.readRowInt();\n                int[] columnValues = new int[reader.imgInfo.cols];\n                System.arraycopy(row.getScanline(), 0, columnValues, 0, columnValues.length);\n                pixels[rowCount++] = columnValues;\n            }\n            reader.close();\n        }\n    }", "code_tokens": ["private", "void", "readPixels", "(", ")", "{", "if", "(", "reader", "!=", "null", ")", "{", "pixels", "=", "new", "int", "[", "reader", ".", "imgInfo", ".", "rows", "]", "[", "reader", ".", "imgInfo", ".", "cols", "]", ";", "int", "rowCount", "=", "0", ";", "while", "(", "reader", ".", "hasMoreRows", "(", ")", ")", "{", "ImageLineInt", "row", "=", "reader", ".", "readRowInt", "(", ")", ";", "int", "[", "]", "columnValues", "=", "new", "int", "[", "reader", ".", "imgInfo", ".", "cols", "]", ";", "System", ".", "arraycopy", "(", "row", ".", "getScanline", "(", ")", ",", "0", ",", "columnValues", ",", "0", ",", "columnValues", ".", "length", ")", ";", "pixels", "[", "rowCount", "++", "]", "=", "columnValues", ";", "}", "reader", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Read all the pixels from the image", "docstring_tokens": ["Read", "all", "the", "pixels", "from", "the", "image"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataPngImage.java#L172-L184", "partition": "test", "index": 6066, "time": "2016-09-15 17:01:27"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java", "func_name": "CoverageDataTiff.validateImageType", "original_string": "public static void validateImageType(FileDirectory directory) {\n        if (directory == null) {\n            throw new GeoPackageException(\"The image is null\");\n        }\n\n        int samplesPerPixel = directory.getSamplesPerPixel();\n        Integer bitsPerSample = null;\n        if (directory.getBitsPerSample() != null && !directory.getBitsPerSample().isEmpty()) {\n            bitsPerSample = directory.getBitsPerSample().get(0);\n        }\n        Integer sampleFormat = null;\n        if (directory.getSampleFormat() != null && !directory.getSampleFormat().isEmpty()) {\n            sampleFormat = directory.getSampleFormat().get(0);\n        }\n\n        if (samplesPerPixel != SAMPLES_PER_PIXEL\n                || bitsPerSample == null || bitsPerSample != BITS_PER_SAMPLE\n                || sampleFormat == null || sampleFormat != TiffConstants.SAMPLE_FORMAT_FLOAT) {\n            throw new GeoPackageException(\n                    \"The coverage data tile is expected to be a single sample 32 bit float. Samples Per Pixel: \"\n                            + samplesPerPixel\n                            + \", Bits Per Sample: \" + bitsPerSample\n                            + \", Sample Format: \" + sampleFormat);\n        }\n\n    }", "language": "java", "code": "public static void validateImageType(FileDirectory directory) {\n        if (directory == null) {\n            throw new GeoPackageException(\"The image is null\");\n        }\n\n        int samplesPerPixel = directory.getSamplesPerPixel();\n        Integer bitsPerSample = null;\n        if (directory.getBitsPerSample() != null && !directory.getBitsPerSample().isEmpty()) {\n            bitsPerSample = directory.getBitsPerSample().get(0);\n        }\n        Integer sampleFormat = null;\n        if (directory.getSampleFormat() != null && !directory.getSampleFormat().isEmpty()) {\n            sampleFormat = directory.getSampleFormat().get(0);\n        }\n\n        if (samplesPerPixel != SAMPLES_PER_PIXEL\n                || bitsPerSample == null || bitsPerSample != BITS_PER_SAMPLE\n                || sampleFormat == null || sampleFormat != TiffConstants.SAMPLE_FORMAT_FLOAT) {\n            throw new GeoPackageException(\n                    \"The coverage data tile is expected to be a single sample 32 bit float. Samples Per Pixel: \"\n                            + samplesPerPixel\n                            + \", Bits Per Sample: \" + bitsPerSample\n                            + \", Sample Format: \" + sampleFormat);\n        }\n\n    }", "code_tokens": ["public", "static", "void", "validateImageType", "(", "FileDirectory", "directory", ")", "{", "if", "(", "directory", "==", "null", ")", "{", "throw", "new", "GeoPackageException", "(", "\"The image is null\"", ")", ";", "}", "int", "samplesPerPixel", "=", "directory", ".", "getSamplesPerPixel", "(", ")", ";", "Integer", "bitsPerSample", "=", "null", ";", "if", "(", "directory", ".", "getBitsPerSample", "(", ")", "!=", "null", "&&", "!", "directory", ".", "getBitsPerSample", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "bitsPerSample", "=", "directory", ".", "getBitsPerSample", "(", ")", ".", "get", "(", "0", ")", ";", "}", "Integer", "sampleFormat", "=", "null", ";", "if", "(", "directory", ".", "getSampleFormat", "(", ")", "!=", "null", "&&", "!", "directory", ".", "getSampleFormat", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "sampleFormat", "=", "directory", ".", "getSampleFormat", "(", ")", ".", "get", "(", "0", ")", ";", "}", "if", "(", "samplesPerPixel", "!=", "SAMPLES_PER_PIXEL", "||", "bitsPerSample", "==", "null", "||", "bitsPerSample", "!=", "BITS_PER_SAMPLE", "||", "sampleFormat", "==", "null", "||", "sampleFormat", "!=", "TiffConstants", ".", "SAMPLE_FORMAT_FLOAT", ")", "{", "throw", "new", "GeoPackageException", "(", "\"The coverage data tile is expected to be a single sample 32 bit float. Samples Per Pixel: \"", "+", "samplesPerPixel", "+", "\", Bits Per Sample: \"", "+", "bitsPerSample", "+", "\", Sample Format: \"", "+", "sampleFormat", ")", ";", "}", "}"], "docstring": "Validate that the image type\n\n@param directory file directory", "docstring_tokens": ["Validate", "that", "the", "image", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageDataTiff.java#L152-L177", "partition": "test", "index": 5947, "time": "2016-09-20 15:52:21"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java", "func_name": "DefaultFeatureTiles.addLineString", "original_string": "private void addLineString(double simplifyTolerance, BoundingBox boundingBox, ProjectionTransform transform, Path path, LineString lineString) {\n\n        List<Point> points = lineString.getPoints();\n\n        if (points.size() >= 2) {\n\n            // Try to simplify the number of points in the LineString\n            points = simplifyPoints(simplifyTolerance, points);\n\n            for (int i = 0; i < points.size(); i++) {\n                Point point = points.get(i);\n                Point webMercatorPoint = transform.transform(point);\n                float x = TileBoundingBoxUtils.getXPixel(tileWidth, boundingBox,\n                        webMercatorPoint.getX());\n                float y = TileBoundingBoxUtils.getYPixel(tileHeight, boundingBox,\n                        webMercatorPoint.getY());\n                if (i == 0) {\n                    path.moveTo(x, y);\n                } else {\n                    path.lineTo(x, y);\n                }\n            }\n        }\n    }", "language": "java", "code": "private void addLineString(double simplifyTolerance, BoundingBox boundingBox, ProjectionTransform transform, Path path, LineString lineString) {\n\n        List<Point> points = lineString.getPoints();\n\n        if (points.size() >= 2) {\n\n            // Try to simplify the number of points in the LineString\n            points = simplifyPoints(simplifyTolerance, points);\n\n            for (int i = 0; i < points.size(); i++) {\n                Point point = points.get(i);\n                Point webMercatorPoint = transform.transform(point);\n                float x = TileBoundingBoxUtils.getXPixel(tileWidth, boundingBox,\n                        webMercatorPoint.getX());\n                float y = TileBoundingBoxUtils.getYPixel(tileHeight, boundingBox,\n                        webMercatorPoint.getY());\n                if (i == 0) {\n                    path.moveTo(x, y);\n                } else {\n                    path.lineTo(x, y);\n                }\n            }\n        }\n    }", "code_tokens": ["private", "void", "addLineString", "(", "double", "simplifyTolerance", ",", "BoundingBox", "boundingBox", ",", "ProjectionTransform", "transform", ",", "Path", "path", ",", "LineString", "lineString", ")", "{", "List", "<", "Point", ">", "points", "=", "lineString", ".", "getPoints", "(", ")", ";", "if", "(", "points", ".", "size", "(", ")", ">=", "2", ")", "{", "// Try to simplify the number of points in the LineString", "points", "=", "simplifyPoints", "(", "simplifyTolerance", ",", "points", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "points", ".", "size", "(", ")", ";", "i", "++", ")", "{", "Point", "point", "=", "points", ".", "get", "(", "i", ")", ";", "Point", "webMercatorPoint", "=", "transform", ".", "transform", "(", "point", ")", ";", "float", "x", "=", "TileBoundingBoxUtils", ".", "getXPixel", "(", "tileWidth", ",", "boundingBox", ",", "webMercatorPoint", ".", "getX", "(", ")", ")", ";", "float", "y", "=", "TileBoundingBoxUtils", ".", "getYPixel", "(", "tileHeight", ",", "boundingBox", ",", "webMercatorPoint", ".", "getY", "(", ")", ")", ";", "if", "(", "i", "==", "0", ")", "{", "path", ".", "moveTo", "(", "x", ",", "y", ")", ";", "}", "else", "{", "path", ".", "lineTo", "(", "x", ",", "y", ")", ";", "}", "}", "}", "}"], "docstring": "Add the linestring to the path\n\n@param simplifyTolerance simplify tolerance in meters\n@param boundingBox       bounding box\n@param transform         projection transform\n@param path              path\n@param lineString        line string", "docstring_tokens": ["Add", "the", "linestring", "to", "the", "path"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java#L420-L443", "partition": "test", "index": 6070, "time": "2017-01-31 10:11:53"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java", "func_name": "DefaultFeatureTiles.drawFeature", "original_string": "private boolean drawFeature(int zoom, BoundingBox boundingBox, BoundingBox expandedBoundingBox, ProjectionTransform transform, FeatureTileCanvas canvas, FeatureRow row) {\n\n        boolean drawn = false;\n\n        try {\n            GeoPackageGeometryData geomData = row.getGeometry();\n            if (geomData != null) {\n                Geometry geometry = geomData.getGeometry();\n                if (geometry != null) {\n\n                    GeometryEnvelope envelope = geomData.getOrBuildEnvelope();\n                    BoundingBox geometryBoundingBox = new BoundingBox(envelope);\n                    BoundingBox transformedBoundingBox = geometryBoundingBox.transform(transform);\n\n                    if (expandedBoundingBox.intersects(transformedBoundingBox, true)) {\n\n                        double simplifyTolerance = TileBoundingBoxUtils.toleranceDistance(zoom, tileWidth, tileHeight);\n                        drawn = drawShape(simplifyTolerance, boundingBox, transform, canvas, row, geometry);\n\n                    }\n                }\n            }\n        } catch (Exception e) {\n            Log.e(DefaultFeatureTiles.class.getSimpleName(), \"Failed to draw feature in tile. Table: \"\n                    + featureDao.getTableName(), e);\n        }\n\n        return drawn;\n    }", "language": "java", "code": "private boolean drawFeature(int zoom, BoundingBox boundingBox, BoundingBox expandedBoundingBox, ProjectionTransform transform, FeatureTileCanvas canvas, FeatureRow row) {\n\n        boolean drawn = false;\n\n        try {\n            GeoPackageGeometryData geomData = row.getGeometry();\n            if (geomData != null) {\n                Geometry geometry = geomData.getGeometry();\n                if (geometry != null) {\n\n                    GeometryEnvelope envelope = geomData.getOrBuildEnvelope();\n                    BoundingBox geometryBoundingBox = new BoundingBox(envelope);\n                    BoundingBox transformedBoundingBox = geometryBoundingBox.transform(transform);\n\n                    if (expandedBoundingBox.intersects(transformedBoundingBox, true)) {\n\n                        double simplifyTolerance = TileBoundingBoxUtils.toleranceDistance(zoom, tileWidth, tileHeight);\n                        drawn = drawShape(simplifyTolerance, boundingBox, transform, canvas, row, geometry);\n\n                    }\n                }\n            }\n        } catch (Exception e) {\n            Log.e(DefaultFeatureTiles.class.getSimpleName(), \"Failed to draw feature in tile. Table: \"\n                    + featureDao.getTableName(), e);\n        }\n\n        return drawn;\n    }", "code_tokens": ["private", "boolean", "drawFeature", "(", "int", "zoom", ",", "BoundingBox", "boundingBox", ",", "BoundingBox", "expandedBoundingBox", ",", "ProjectionTransform", "transform", ",", "FeatureTileCanvas", "canvas", ",", "FeatureRow", "row", ")", "{", "boolean", "drawn", "=", "false", ";", "try", "{", "GeoPackageGeometryData", "geomData", "=", "row", ".", "getGeometry", "(", ")", ";", "if", "(", "geomData", "!=", "null", ")", "{", "Geometry", "geometry", "=", "geomData", ".", "getGeometry", "(", ")", ";", "if", "(", "geometry", "!=", "null", ")", "{", "GeometryEnvelope", "envelope", "=", "geomData", ".", "getOrBuildEnvelope", "(", ")", ";", "BoundingBox", "geometryBoundingBox", "=", "new", "BoundingBox", "(", "envelope", ")", ";", "BoundingBox", "transformedBoundingBox", "=", "geometryBoundingBox", ".", "transform", "(", "transform", ")", ";", "if", "(", "expandedBoundingBox", ".", "intersects", "(", "transformedBoundingBox", ",", "true", ")", ")", "{", "double", "simplifyTolerance", "=", "TileBoundingBoxUtils", ".", "toleranceDistance", "(", "zoom", ",", "tileWidth", ",", "tileHeight", ")", ";", "drawn", "=", "drawShape", "(", "simplifyTolerance", ",", "boundingBox", ",", "transform", ",", "canvas", ",", "row", ",", "geometry", ")", ";", "}", "}", "}", "}", "catch", "(", "Exception", "e", ")", "{", "Log", ".", "e", "(", "DefaultFeatureTiles", ".", "class", ".", "getSimpleName", "(", ")", ",", "\"Failed to draw feature in tile. Table: \"", "+", "featureDao", ".", "getTableName", "(", ")", ",", "e", ")", ";", "}", "return", "drawn", ";", "}"], "docstring": "Draw the feature on the canvas\n\n@param zoom                zoom level\n@param boundingBox         bounding box\n@param expandedBoundingBox expanded bounding box\n@param transform           projection transform\n@param canvas              feature tile canvas\n@param row                 feature row\n@return true if at least one feature was drawn", "docstring_tokens": ["Draw", "the", "feature", "on", "the", "canvas"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java#L247-L275", "partition": "test", "index": 6067, "time": "2017-01-31 10:11:53"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java", "func_name": "DefaultFeatureTiles.drawLinePath", "original_string": "private boolean drawLinePath(FeatureTileCanvas canvas, Path path, FeatureStyle featureStyle) {\n\n        Canvas lineCanvas = canvas.getLineCanvas();\n\n        Paint pathPaint = getLinePaint(featureStyle);\n        lineCanvas.drawPath(path, pathPaint);\n\n        return true;\n    }", "language": "java", "code": "private boolean drawLinePath(FeatureTileCanvas canvas, Path path, FeatureStyle featureStyle) {\n\n        Canvas lineCanvas = canvas.getLineCanvas();\n\n        Paint pathPaint = getLinePaint(featureStyle);\n        lineCanvas.drawPath(path, pathPaint);\n\n        return true;\n    }", "code_tokens": ["private", "boolean", "drawLinePath", "(", "FeatureTileCanvas", "canvas", ",", "Path", "path", ",", "FeatureStyle", "featureStyle", ")", "{", "Canvas", "lineCanvas", "=", "canvas", ".", "getLineCanvas", "(", ")", ";", "Paint", "pathPaint", "=", "getLinePaint", "(", "featureStyle", ")", ";", "lineCanvas", ".", "drawPath", "(", "path", ",", "pathPaint", ")", ";", "return", "true", ";", "}"], "docstring": "Draw the line path on the canvas\n\n@param canvas       canvas\n@param path         path\n@param featureStyle feature style\n@return true if drawn", "docstring_tokens": ["Draw", "the", "line", "path", "on", "the", "canvas"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java#L378-L386", "partition": "test", "index": 6068, "time": "2017-01-31 10:11:53"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java", "func_name": "DefaultFeatureTiles.drawPolygonPath", "original_string": "private boolean drawPolygonPath(FeatureTileCanvas canvas, Path path, FeatureStyle featureStyle) {\n\n        Canvas polygonCanvas = canvas.getPolygonCanvas();\n\n        Paint fillPaint = getPolygonFillPaint(featureStyle);\n        if (fillPaint != null) {\n            path.setFillType(Path.FillType.EVEN_ODD);\n            polygonCanvas.drawPath(path, fillPaint);\n        }\n\n        Paint pathPaint = getPolygonPaint(featureStyle);\n        polygonCanvas.drawPath(path, pathPaint);\n\n        return true;\n    }", "language": "java", "code": "private boolean drawPolygonPath(FeatureTileCanvas canvas, Path path, FeatureStyle featureStyle) {\n\n        Canvas polygonCanvas = canvas.getPolygonCanvas();\n\n        Paint fillPaint = getPolygonFillPaint(featureStyle);\n        if (fillPaint != null) {\n            path.setFillType(Path.FillType.EVEN_ODD);\n            polygonCanvas.drawPath(path, fillPaint);\n        }\n\n        Paint pathPaint = getPolygonPaint(featureStyle);\n        polygonCanvas.drawPath(path, pathPaint);\n\n        return true;\n    }", "code_tokens": ["private", "boolean", "drawPolygonPath", "(", "FeatureTileCanvas", "canvas", ",", "Path", "path", ",", "FeatureStyle", "featureStyle", ")", "{", "Canvas", "polygonCanvas", "=", "canvas", ".", "getPolygonCanvas", "(", ")", ";", "Paint", "fillPaint", "=", "getPolygonFillPaint", "(", "featureStyle", ")", ";", "if", "(", "fillPaint", "!=", "null", ")", "{", "path", ".", "setFillType", "(", "Path", ".", "FillType", ".", "EVEN_ODD", ")", ";", "polygonCanvas", ".", "drawPath", "(", "path", ",", "fillPaint", ")", ";", "}", "Paint", "pathPaint", "=", "getPolygonPaint", "(", "featureStyle", ")", ";", "polygonCanvas", ".", "drawPath", "(", "path", ",", "pathPaint", ")", ";", "return", "true", ";", "}"], "docstring": "Draw the path on the canvas\n\n@param canvas       canvas\n@param path         path\n@param featureStyle feature style", "docstring_tokens": ["Draw", "the", "path", "on", "the", "canvas"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java#L395-L409", "partition": "test", "index": 6069, "time": "2017-01-31 10:11:53"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java", "func_name": "DefaultFeatureTiles.addPolygon", "original_string": "private void addPolygon(double simplifyTolerance, BoundingBox boundingBox, ProjectionTransform transform, Path path, Polygon polygon) {\n        List<LineString> rings = polygon.getRings();\n        if (!rings.isEmpty()) {\n\n            // Add the polygon points\n            LineString polygonLineString = rings.get(0);\n            List<Point> polygonPoints = polygonLineString.getPoints();\n            if (polygonPoints.size() >= 2) {\n                addRing(simplifyTolerance, boundingBox, transform, path, polygonPoints);\n\n                // Add the holes\n                for (int i = 1; i < rings.size(); i++) {\n                    LineString holeLineString = rings.get(i);\n                    List<Point> holePoints = holeLineString.getPoints();\n                    if (holePoints.size() >= 2) {\n                        addRing(simplifyTolerance, boundingBox, transform, path, holePoints);\n                    }\n                }\n            }\n        }\n    }", "language": "java", "code": "private void addPolygon(double simplifyTolerance, BoundingBox boundingBox, ProjectionTransform transform, Path path, Polygon polygon) {\n        List<LineString> rings = polygon.getRings();\n        if (!rings.isEmpty()) {\n\n            // Add the polygon points\n            LineString polygonLineString = rings.get(0);\n            List<Point> polygonPoints = polygonLineString.getPoints();\n            if (polygonPoints.size() >= 2) {\n                addRing(simplifyTolerance, boundingBox, transform, path, polygonPoints);\n\n                // Add the holes\n                for (int i = 1; i < rings.size(); i++) {\n                    LineString holeLineString = rings.get(i);\n                    List<Point> holePoints = holeLineString.getPoints();\n                    if (holePoints.size() >= 2) {\n                        addRing(simplifyTolerance, boundingBox, transform, path, holePoints);\n                    }\n                }\n            }\n        }\n    }", "code_tokens": ["private", "void", "addPolygon", "(", "double", "simplifyTolerance", ",", "BoundingBox", "boundingBox", ",", "ProjectionTransform", "transform", ",", "Path", "path", ",", "Polygon", "polygon", ")", "{", "List", "<", "LineString", ">", "rings", "=", "polygon", ".", "getRings", "(", ")", ";", "if", "(", "!", "rings", ".", "isEmpty", "(", ")", ")", "{", "// Add the polygon points", "LineString", "polygonLineString", "=", "rings", ".", "get", "(", "0", ")", ";", "List", "<", "Point", ">", "polygonPoints", "=", "polygonLineString", ".", "getPoints", "(", ")", ";", "if", "(", "polygonPoints", ".", "size", "(", ")", ">=", "2", ")", "{", "addRing", "(", "simplifyTolerance", ",", "boundingBox", ",", "transform", ",", "path", ",", "polygonPoints", ")", ";", "// Add the holes", "for", "(", "int", "i", "=", "1", ";", "i", "<", "rings", ".", "size", "(", ")", ";", "i", "++", ")", "{", "LineString", "holeLineString", "=", "rings", ".", "get", "(", "i", ")", ";", "List", "<", "Point", ">", "holePoints", "=", "holeLineString", ".", "getPoints", "(", ")", ";", "if", "(", "holePoints", ".", "size", "(", ")", ">=", "2", ")", "{", "addRing", "(", "simplifyTolerance", ",", "boundingBox", ",", "transform", ",", "path", ",", "holePoints", ")", ";", "}", "}", "}", "}", "}"], "docstring": "Add the polygon on the canvas\n\n@param simplifyTolerance simplify tolerance in meters\n@param boundingBox       bounding box\n@param transform         projection transform\n@param path              path\n@param polygon           polygon", "docstring_tokens": ["Add", "the", "polygon", "on", "the", "canvas"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/DefaultFeatureTiles.java#L454-L474", "partition": "test", "index": 6071, "time": "2017-01-31 10:11:53"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileRow.java", "func_name": "TileRow.setTileData", "original_string": "public void setTileData(Bitmap bitmap, CompressFormat format, int quality)\n            throws IOException {\n        byte[] tileData = BitmapConverter.toBytes(bitmap, format, quality);\n        setTileData(tileData);\n    }", "language": "java", "code": "public void setTileData(Bitmap bitmap, CompressFormat format, int quality)\n            throws IOException {\n        byte[] tileData = BitmapConverter.toBytes(bitmap, format, quality);\n        setTileData(tileData);\n    }", "code_tokens": ["public", "void", "setTileData", "(", "Bitmap", "bitmap", ",", "CompressFormat", "format", ",", "int", "quality", ")", "throws", "IOException", "{", "byte", "[", "]", "tileData", "=", "BitmapConverter", ".", "toBytes", "(", "bitmap", ",", "format", ",", "quality", ")", ";", "setTileData", "(", "tileData", ")", ";", "}"], "docstring": "Set the tile data from a bitmap\n\n@param bitmap  tile bitmap\n@param format  compress format\n@param quality quality\n@throws IOException upon failure", "docstring_tokens": ["Set", "the", "tile", "data", "from", "a", "bitmap"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileRow.java#L232-L236", "partition": "test", "index": 5886, "time": "2017-06-21 11:20:56"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserInvalidCursor.java", "func_name": "UserInvalidCursor.readBlobValue", "original_string": "private void readBlobValue(UserRow row, UserColumn column) {\n\n        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n        try {\n\n            byte[] blobChunk = new byte[]{0};\n            for (int i = 1; blobChunk.length > 0; i += CHUNK_SIZE) {\n                if (i > 1) {\n                    byteStream.write(blobChunk);\n                }\n                blobChunk = new byte[]{};\n                String query = \"select substr(\" +\n                        CoreSQLUtils.quoteWrap(column.getName()) + \", \" + i + \", \" + CHUNK_SIZE + \") from \"\n                        + CoreSQLUtils.quoteWrap(dao.getTableName()) + \" where \"\n                        + CoreSQLUtils.quoteWrap(row.getPkColumn().getName()) + \" = \" + row.getId();\n                Cursor blobCursor = dao.getDatabaseConnection().getDb().rawQuery(query, null);\n                try {\n                    if (blobCursor.moveToNext()) {\n                        blobChunk = blobCursor.getBlob(0);\n                    }\n                } finally {\n                    blobCursor.close();\n                }\n            }\n            byte[] blob = byteStream.toByteArray();\n            row.setValue(column.getIndex(), blob);\n\n        } catch (IOException e) {\n            Log.e(UserInvalidCursor.class.getSimpleName(), \"Failed to read large blob value. Table: \"\n                    + dao.getTableName() + \", Column: \" + column.getName() + \", Position: \" + getPosition(), e);\n        } finally {\n            IOUtils.closeQuietly(byteStream);\n        }\n    }", "language": "java", "code": "private void readBlobValue(UserRow row, UserColumn column) {\n\n        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n        try {\n\n            byte[] blobChunk = new byte[]{0};\n            for (int i = 1; blobChunk.length > 0; i += CHUNK_SIZE) {\n                if (i > 1) {\n                    byteStream.write(blobChunk);\n                }\n                blobChunk = new byte[]{};\n                String query = \"select substr(\" +\n                        CoreSQLUtils.quoteWrap(column.getName()) + \", \" + i + \", \" + CHUNK_SIZE + \") from \"\n                        + CoreSQLUtils.quoteWrap(dao.getTableName()) + \" where \"\n                        + CoreSQLUtils.quoteWrap(row.getPkColumn().getName()) + \" = \" + row.getId();\n                Cursor blobCursor = dao.getDatabaseConnection().getDb().rawQuery(query, null);\n                try {\n                    if (blobCursor.moveToNext()) {\n                        blobChunk = blobCursor.getBlob(0);\n                    }\n                } finally {\n                    blobCursor.close();\n                }\n            }\n            byte[] blob = byteStream.toByteArray();\n            row.setValue(column.getIndex(), blob);\n\n        } catch (IOException e) {\n            Log.e(UserInvalidCursor.class.getSimpleName(), \"Failed to read large blob value. Table: \"\n                    + dao.getTableName() + \", Column: \" + column.getName() + \", Position: \" + getPosition(), e);\n        } finally {\n            IOUtils.closeQuietly(byteStream);\n        }\n    }", "code_tokens": ["private", "void", "readBlobValue", "(", "UserRow", "row", ",", "UserColumn", "column", ")", "{", "ByteArrayOutputStream", "byteStream", "=", "new", "ByteArrayOutputStream", "(", ")", ";", "try", "{", "byte", "[", "]", "blobChunk", "=", "new", "byte", "[", "]", "{", "0", "}", ";", "for", "(", "int", "i", "=", "1", ";", "blobChunk", ".", "length", ">", "0", ";", "i", "+=", "CHUNK_SIZE", ")", "{", "if", "(", "i", ">", "1", ")", "{", "byteStream", ".", "write", "(", "blobChunk", ")", ";", "}", "blobChunk", "=", "new", "byte", "[", "]", "{", "}", ";", "String", "query", "=", "\"select substr(\"", "+", "CoreSQLUtils", ".", "quoteWrap", "(", "column", ".", "getName", "(", ")", ")", "+", "\", \"", "+", "i", "+", "\", \"", "+", "CHUNK_SIZE", "+", "\") from \"", "+", "CoreSQLUtils", ".", "quoteWrap", "(", "dao", ".", "getTableName", "(", ")", ")", "+", "\" where \"", "+", "CoreSQLUtils", ".", "quoteWrap", "(", "row", ".", "getPkColumn", "(", ")", ".", "getName", "(", ")", ")", "+", "\" = \"", "+", "row", ".", "getId", "(", ")", ";", "Cursor", "blobCursor", "=", "dao", ".", "getDatabaseConnection", "(", ")", ".", "getDb", "(", ")", ".", "rawQuery", "(", "query", ",", "null", ")", ";", "try", "{", "if", "(", "blobCursor", ".", "moveToNext", "(", ")", ")", "{", "blobChunk", "=", "blobCursor", ".", "getBlob", "(", "0", ")", ";", "}", "}", "finally", "{", "blobCursor", ".", "close", "(", ")", ";", "}", "}", "byte", "[", "]", "blob", "=", "byteStream", ".", "toByteArray", "(", ")", ";", "row", ".", "setValue", "(", "column", ".", "getIndex", "(", ")", ",", "blob", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "Log", ".", "e", "(", "UserInvalidCursor", ".", "class", ".", "getSimpleName", "(", ")", ",", "\"Failed to read large blob value. Table: \"", "+", "dao", ".", "getTableName", "(", ")", "+", "\", Column: \"", "+", "column", ".", "getName", "(", ")", "+", "\", Position: \"", "+", "getPosition", "(", ")", ",", "e", ")", ";", "}", "finally", "{", "IOUtils", ".", "closeQuietly", "(", "byteStream", ")", ";", "}", "}"], "docstring": "Read the blob column value in chunks\n\n@param row    user row\n@param column user blob column", "docstring_tokens": ["Read", "the", "blob", "column", "value", "in", "chunks"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserInvalidCursor.java#L107-L140", "partition": "test", "index": 6082, "time": "2017-08-24 13:30:42"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserConnection.java", "func_name": "UserConnection.handleCursor", "original_string": "private TResult handleCursor(Cursor cursor, UserQuery query) {\n        TResult result = convertCursor(cursor);\n        result.setQuery(query);\n        if (table != null) {\n            result.setTable(table);\n        }\n        return result;\n    }", "language": "java", "code": "private TResult handleCursor(Cursor cursor, UserQuery query) {\n        TResult result = convertCursor(cursor);\n        result.setQuery(query);\n        if (table != null) {\n            result.setTable(table);\n        }\n        return result;\n    }", "code_tokens": ["private", "TResult", "handleCursor", "(", "Cursor", "cursor", ",", "UserQuery", "query", ")", "{", "TResult", "result", "=", "convertCursor", "(", "cursor", ")", ";", "result", ".", "setQuery", "(", "query", ")", ";", "if", "(", "table", "!=", "null", ")", "{", "result", ".", "setTable", "(", "table", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Convert the cursor to the result type cursor\n\n@param cursor cursor\n@param query  user query\n@return result cursor", "docstring_tokens": ["Convert", "the", "cursor", "to", "the", "result", "type", "cursor"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserConnection.java#L182-L189", "partition": "test", "index": 5891, "time": "2017-08-30 11:18:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserConnection.java", "func_name": "UserConnection.query", "original_string": "public TResult query(TResult previousResult) {\n        UserQuery query = previousResult.getQuery();\n        TResult result = query(query);\n        return result;\n    }", "language": "java", "code": "public TResult query(TResult previousResult) {\n        UserQuery query = previousResult.getQuery();\n        TResult result = query(query);\n        return result;\n    }", "code_tokens": ["public", "TResult", "query", "(", "TResult", "previousResult", ")", "{", "UserQuery", "query", "=", "previousResult", ".", "getQuery", "(", ")", ";", "TResult", "result", "=", "query", "(", "query", ")", ";", "return", "result", ";", "}"], "docstring": "Query using the query from a previous query result\n\n@param previousResult previous result\n@return result\n@since 2.0.0", "docstring_tokens": ["Query", "using", "the", "query", "from", "a", "previous", "query", "result"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserConnection.java#L125-L129", "partition": "test", "index": 5889, "time": "2017-08-30 11:18:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserConnection.java", "func_name": "UserConnection.query", "original_string": "public TResult query(UserQuery query) {\n        Cursor cursor = null;\n\n        String[] selectionArgs = query.getSelectionArgs();\n\n        String sql = query.getSql();\n        if (sql != null) {\n            cursor = database.rawQuery(sql, selectionArgs);\n        } else {\n\n            String table = query.getTable();\n            String[] columns = query.getColumns();\n            String selection = query.getSelection();\n            String groupBy = query.getGroupBy();\n            String having = query.getHaving();\n            String orderBy = query.getOrderBy();\n\n            String[] columnsAs = query.getColumnsAs();\n            String limit = query.getLimit();\n\n            if (columnsAs != null && limit != null) {\n                cursor = database.query(table, columns, columnsAs, selection, selectionArgs, groupBy, having, orderBy, limit);\n            } else if (columnsAs != null) {\n                cursor = database.query(table, columns, columnsAs, selection, selectionArgs, groupBy, having, orderBy);\n            } else if (limit != null) {\n                cursor = database.query(table, columns, selection, selectionArgs, groupBy, having, orderBy, limit);\n            } else {\n                cursor = database.query(table, columns, selection, selectionArgs, groupBy, having, orderBy);\n            }\n\n        }\n\n        TResult result = handleCursor(cursor, query);\n\n        return result;\n    }", "language": "java", "code": "public TResult query(UserQuery query) {\n        Cursor cursor = null;\n\n        String[] selectionArgs = query.getSelectionArgs();\n\n        String sql = query.getSql();\n        if (sql != null) {\n            cursor = database.rawQuery(sql, selectionArgs);\n        } else {\n\n            String table = query.getTable();\n            String[] columns = query.getColumns();\n            String selection = query.getSelection();\n            String groupBy = query.getGroupBy();\n            String having = query.getHaving();\n            String orderBy = query.getOrderBy();\n\n            String[] columnsAs = query.getColumnsAs();\n            String limit = query.getLimit();\n\n            if (columnsAs != null && limit != null) {\n                cursor = database.query(table, columns, columnsAs, selection, selectionArgs, groupBy, having, orderBy, limit);\n            } else if (columnsAs != null) {\n                cursor = database.query(table, columns, columnsAs, selection, selectionArgs, groupBy, having, orderBy);\n            } else if (limit != null) {\n                cursor = database.query(table, columns, selection, selectionArgs, groupBy, having, orderBy, limit);\n            } else {\n                cursor = database.query(table, columns, selection, selectionArgs, groupBy, having, orderBy);\n            }\n\n        }\n\n        TResult result = handleCursor(cursor, query);\n\n        return result;\n    }", "code_tokens": ["public", "TResult", "query", "(", "UserQuery", "query", ")", "{", "Cursor", "cursor", "=", "null", ";", "String", "[", "]", "selectionArgs", "=", "query", ".", "getSelectionArgs", "(", ")", ";", "String", "sql", "=", "query", ".", "getSql", "(", ")", ";", "if", "(", "sql", "!=", "null", ")", "{", "cursor", "=", "database", ".", "rawQuery", "(", "sql", ",", "selectionArgs", ")", ";", "}", "else", "{", "String", "table", "=", "query", ".", "getTable", "(", ")", ";", "String", "[", "]", "columns", "=", "query", ".", "getColumns", "(", ")", ";", "String", "selection", "=", "query", ".", "getSelection", "(", ")", ";", "String", "groupBy", "=", "query", ".", "getGroupBy", "(", ")", ";", "String", "having", "=", "query", ".", "getHaving", "(", ")", ";", "String", "orderBy", "=", "query", ".", "getOrderBy", "(", ")", ";", "String", "[", "]", "columnsAs", "=", "query", ".", "getColumnsAs", "(", ")", ";", "String", "limit", "=", "query", ".", "getLimit", "(", ")", ";", "if", "(", "columnsAs", "!=", "null", "&&", "limit", "!=", "null", ")", "{", "cursor", "=", "database", ".", "query", "(", "table", ",", "columns", ",", "columnsAs", ",", "selection", ",", "selectionArgs", ",", "groupBy", ",", "having", ",", "orderBy", ",", "limit", ")", ";", "}", "else", "if", "(", "columnsAs", "!=", "null", ")", "{", "cursor", "=", "database", ".", "query", "(", "table", ",", "columns", ",", "columnsAs", ",", "selection", ",", "selectionArgs", ",", "groupBy", ",", "having", ",", "orderBy", ")", ";", "}", "else", "if", "(", "limit", "!=", "null", ")", "{", "cursor", "=", "database", ".", "query", "(", "table", ",", "columns", ",", "selection", ",", "selectionArgs", ",", "groupBy", ",", "having", ",", "orderBy", ",", "limit", ")", ";", "}", "else", "{", "cursor", "=", "database", ".", "query", "(", "table", ",", "columns", ",", "selection", ",", "selectionArgs", ",", "groupBy", ",", "having", ",", "orderBy", ")", ";", "}", "}", "TResult", "result", "=", "handleCursor", "(", "cursor", ",", "query", ")", ";", "return", "result", ";", "}"], "docstring": "Query using the user query arguments\n\n@param query user query\n@return result\n@since 2.0.0", "docstring_tokens": ["Query", "using", "the", "user", "query", "arguments"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserConnection.java#L138-L173", "partition": "test", "index": 5890, "time": "2017-08-30 11:18:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserCursor.java", "func_name": "UserCursor.moveToNextInvalid", "original_string": "private boolean moveToNextInvalid() {\n\n        boolean hasNext = false;\n\n        // If requery has not been performed, a requery dao has been set, and there are invalid positions\n        if (invalidCursor == null && dao != null && hasInvalidPositions()) {\n\n            // Close the original cursor when performing an invalid cursor query\n            super.close();\n\n            // Set the blob columns to return as null\n            List<TColumn> blobColumns = dao.getTable().columnsOfType(GeoPackageDataType.BLOB);\n            String[] columnsAs = dao.buildColumnsAsNull(blobColumns);\n            query.set(UserQueryParamType.COLUMNS_AS, columnsAs);\n\n            // Query without blob columns and create an invalid cursor\n            UserCursor<TColumn, TTable, TRow> requeryCursor = dao.query(query);\n            invalidCursor = createInvalidCursor(dao, requeryCursor, getInvalidPositions(), blobColumns);\n        }\n\n        if (invalidCursor != null) {\n            hasNext = invalidCursor.moveToNext();\n        }\n\n        return hasNext;\n    }", "language": "java", "code": "private boolean moveToNextInvalid() {\n\n        boolean hasNext = false;\n\n        // If requery has not been performed, a requery dao has been set, and there are invalid positions\n        if (invalidCursor == null && dao != null && hasInvalidPositions()) {\n\n            // Close the original cursor when performing an invalid cursor query\n            super.close();\n\n            // Set the blob columns to return as null\n            List<TColumn> blobColumns = dao.getTable().columnsOfType(GeoPackageDataType.BLOB);\n            String[] columnsAs = dao.buildColumnsAsNull(blobColumns);\n            query.set(UserQueryParamType.COLUMNS_AS, columnsAs);\n\n            // Query without blob columns and create an invalid cursor\n            UserCursor<TColumn, TTable, TRow> requeryCursor = dao.query(query);\n            invalidCursor = createInvalidCursor(dao, requeryCursor, getInvalidPositions(), blobColumns);\n        }\n\n        if (invalidCursor != null) {\n            hasNext = invalidCursor.moveToNext();\n        }\n\n        return hasNext;\n    }", "code_tokens": ["private", "boolean", "moveToNextInvalid", "(", ")", "{", "boolean", "hasNext", "=", "false", ";", "// If requery has not been performed, a requery dao has been set, and there are invalid positions", "if", "(", "invalidCursor", "==", "null", "&&", "dao", "!=", "null", "&&", "hasInvalidPositions", "(", ")", ")", "{", "// Close the original cursor when performing an invalid cursor query", "super", ".", "close", "(", ")", ";", "// Set the blob columns to return as null", "List", "<", "TColumn", ">", "blobColumns", "=", "dao", ".", "getTable", "(", ")", ".", "columnsOfType", "(", "GeoPackageDataType", ".", "BLOB", ")", ";", "String", "[", "]", "columnsAs", "=", "dao", ".", "buildColumnsAsNull", "(", "blobColumns", ")", ";", "query", ".", "set", "(", "UserQueryParamType", ".", "COLUMNS_AS", ",", "columnsAs", ")", ";", "// Query without blob columns and create an invalid cursor", "UserCursor", "<", "TColumn", ",", "TTable", ",", "TRow", ">", "requeryCursor", "=", "dao", ".", "query", "(", "query", ")", ";", "invalidCursor", "=", "createInvalidCursor", "(", "dao", ",", "requeryCursor", ",", "getInvalidPositions", "(", ")", ",", "blobColumns", ")", ";", "}", "if", "(", "invalidCursor", "!=", "null", ")", "{", "hasNext", "=", "invalidCursor", ".", "moveToNext", "(", ")", ";", "}", "return", "hasNext", ";", "}"], "docstring": "Move to the next position of invalid rows to requery.  Perform the requery the first time.\n\n@return true if invalid rows are left", "docstring_tokens": ["Move", "to", "the", "next", "position", "of", "invalid", "rows", "to", "requery", ".", "Perform", "the", "requery", "the", "first", "time", "."], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/UserCursor.java#L231-L256", "partition": "test", "index": 5952, "time": "2017-09-01 13:41:50"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/FeatureCursor.java", "func_name": "FeatureCursor.getGeometry", "original_string": "public GeoPackageGeometryData getGeometry() {\n\n        GeoPackageGeometryData geometry = null;\n\n        int columnIndex = getTable().getGeometryColumnIndex();\n        int type = getType(columnIndex);\n\n        if (type != FIELD_TYPE_NULL) {\n            byte[] geometryBytes = getBlob(columnIndex);\n\n            if (geometryBytes != null) {\n                geometry = new GeoPackageGeometryData(geometryBytes);\n            }\n        }\n\n        return geometry;\n    }", "language": "java", "code": "public GeoPackageGeometryData getGeometry() {\n\n        GeoPackageGeometryData geometry = null;\n\n        int columnIndex = getTable().getGeometryColumnIndex();\n        int type = getType(columnIndex);\n\n        if (type != FIELD_TYPE_NULL) {\n            byte[] geometryBytes = getBlob(columnIndex);\n\n            if (geometryBytes != null) {\n                geometry = new GeoPackageGeometryData(geometryBytes);\n            }\n        }\n\n        return geometry;\n    }", "code_tokens": ["public", "GeoPackageGeometryData", "getGeometry", "(", ")", "{", "GeoPackageGeometryData", "geometry", "=", "null", ";", "int", "columnIndex", "=", "getTable", "(", ")", ".", "getGeometryColumnIndex", "(", ")", ";", "int", "type", "=", "getType", "(", "columnIndex", ")", ";", "if", "(", "type", "!=", "FIELD_TYPE_NULL", ")", "{", "byte", "[", "]", "geometryBytes", "=", "getBlob", "(", "columnIndex", ")", ";", "if", "(", "geometryBytes", "!=", "null", ")", "{", "geometry", "=", "new", "GeoPackageGeometryData", "(", "geometryBytes", ")", ";", "}", "}", "return", "geometry", ";", "}"], "docstring": "Get the geometry\n\n@return geometry data", "docstring_tokens": ["Get", "the", "geometry"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/FeatureCursor.java#L58-L74", "partition": "test", "index": 6111, "time": "2017-09-01 13:41:50"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.simplifyPoints", "original_string": "protected List<Point> simplifyPoints(double simplifyTolerance,\n                                         List<Point> points) {\n\n        List<Point> simplifiedPoints = null;\n        if (simplifyGeometries) {\n\n            // Reproject to web mercator if not in meters\n            if (projection != null && !projection.isUnit(Units.METRES)) {\n                ProjectionTransform toWebMercator = projection\n                        .getTransformation(WEB_MERCATOR_PROJECTION);\n                points = toWebMercator.transform(points);\n            }\n\n            // Simplify the points\n            simplifiedPoints = GeometryUtils.simplifyPoints(points,\n                    simplifyTolerance);\n\n            // Reproject back to the original projection\n            if (projection != null && !projection.isUnit(Units.METRES)) {\n                ProjectionTransform fromWebMercator = WEB_MERCATOR_PROJECTION\n                        .getTransformation(projection);\n                simplifiedPoints = fromWebMercator.transform(simplifiedPoints);\n            }\n        } else {\n            simplifiedPoints = points;\n        }\n\n        return simplifiedPoints;\n    }", "language": "java", "code": "protected List<Point> simplifyPoints(double simplifyTolerance,\n                                         List<Point> points) {\n\n        List<Point> simplifiedPoints = null;\n        if (simplifyGeometries) {\n\n            // Reproject to web mercator if not in meters\n            if (projection != null && !projection.isUnit(Units.METRES)) {\n                ProjectionTransform toWebMercator = projection\n                        .getTransformation(WEB_MERCATOR_PROJECTION);\n                points = toWebMercator.transform(points);\n            }\n\n            // Simplify the points\n            simplifiedPoints = GeometryUtils.simplifyPoints(points,\n                    simplifyTolerance);\n\n            // Reproject back to the original projection\n            if (projection != null && !projection.isUnit(Units.METRES)) {\n                ProjectionTransform fromWebMercator = WEB_MERCATOR_PROJECTION\n                        .getTransformation(projection);\n                simplifiedPoints = fromWebMercator.transform(simplifiedPoints);\n            }\n        } else {\n            simplifiedPoints = points;\n        }\n\n        return simplifiedPoints;\n    }", "code_tokens": ["protected", "List", "<", "Point", ">", "simplifyPoints", "(", "double", "simplifyTolerance", ",", "List", "<", "Point", ">", "points", ")", "{", "List", "<", "Point", ">", "simplifiedPoints", "=", "null", ";", "if", "(", "simplifyGeometries", ")", "{", "// Reproject to web mercator if not in meters", "if", "(", "projection", "!=", "null", "&&", "!", "projection", ".", "isUnit", "(", "Units", ".", "METRES", ")", ")", "{", "ProjectionTransform", "toWebMercator", "=", "projection", ".", "getTransformation", "(", "WEB_MERCATOR_PROJECTION", ")", ";", "points", "=", "toWebMercator", ".", "transform", "(", "points", ")", ";", "}", "// Simplify the points", "simplifiedPoints", "=", "GeometryUtils", ".", "simplifyPoints", "(", "points", ",", "simplifyTolerance", ")", ";", "// Reproject back to the original projection", "if", "(", "projection", "!=", "null", "&&", "!", "projection", ".", "isUnit", "(", "Units", ".", "METRES", ")", ")", "{", "ProjectionTransform", "fromWebMercator", "=", "WEB_MERCATOR_PROJECTION", ".", "getTransformation", "(", "projection", ")", ";", "simplifiedPoints", "=", "fromWebMercator", ".", "transform", "(", "simplifiedPoints", ")", ";", "}", "}", "else", "{", "simplifiedPoints", "=", "points", ";", "}", "return", "simplifiedPoints", ";", "}"], "docstring": "When the simplify tolerance is set, simplify the points to a similar\ncurve with fewer points.\n\n@param simplifyTolerance simplify tolerance in meters\n@param points            ordered points\n@return simplified points\n@since 2.0.0", "docstring_tokens": ["When", "the", "simplify", "tolerance", "is", "set", "simplify", "the", "points", "to", "a", "similar", "curve", "with", "fewer", "points", "."], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1368-L1396", "partition": "test", "index": 6005, "time": "2017-10-06 09:04:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.deleteIndex", "original_string": "public boolean deleteIndex(long geomId, List<FeatureIndexType> types) {\n        boolean deleted = false;\n        for (FeatureIndexType type : types) {\n            if (deleteIndex(type, geomId)) {\n                deleted = true;\n            }\n        }\n        return deleted;\n    }", "language": "java", "code": "public boolean deleteIndex(long geomId, List<FeatureIndexType> types) {\n        boolean deleted = false;\n        for (FeatureIndexType type : types) {\n            if (deleteIndex(type, geomId)) {\n                deleted = true;\n            }\n        }\n        return deleted;\n    }", "code_tokens": ["public", "boolean", "deleteIndex", "(", "long", "geomId", ",", "List", "<", "FeatureIndexType", ">", "types", ")", "{", "boolean", "deleted", "=", "false", ";", "for", "(", "FeatureIndexType", "type", ":", "types", ")", "{", "if", "(", "deleteIndex", "(", "type", ",", "geomId", ")", ")", "{", "deleted", "=", "true", ";", "}", "}", "return", "deleted", ";", "}"], "docstring": "Delete the feature index for the geometry id from the index types\n\n@param geomId geometry id\n@param types  feature index types\n@return true if deleted from any type\n@since 2.0.0", "docstring_tokens": ["Delete", "the", "feature", "index", "for", "the", "geometry", "id", "from", "the", "index", "types"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L541-L549", "partition": "test", "index": 6093, "time": "2017-10-17 13:44:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.getIndexedTypes", "original_string": "public List<FeatureIndexType> getIndexedTypes() {\n        List<FeatureIndexType> indexed = new ArrayList<>();\n        for (FeatureIndexType type : indexLocationQueryOrder) {\n            if (isIndexed(type)) {\n                indexed.add(type);\n            }\n        }\n        return indexed;\n    }", "language": "java", "code": "public List<FeatureIndexType> getIndexedTypes() {\n        List<FeatureIndexType> indexed = new ArrayList<>();\n        for (FeatureIndexType type : indexLocationQueryOrder) {\n            if (isIndexed(type)) {\n                indexed.add(type);\n            }\n        }\n        return indexed;\n    }", "code_tokens": ["public", "List", "<", "FeatureIndexType", ">", "getIndexedTypes", "(", ")", "{", "List", "<", "FeatureIndexType", ">", "indexed", "=", "new", "ArrayList", "<>", "(", ")", ";", "for", "(", "FeatureIndexType", "type", ":", "indexLocationQueryOrder", ")", "{", "if", "(", "isIndexed", "(", "type", ")", ")", "{", "indexed", ".", "add", "(", "type", ")", ";", "}", "}", "return", "indexed", ";", "}"], "docstring": "Get the indexed types that are currently indexed\n\n@return indexed types\n@since 2.0.0", "docstring_tokens": ["Get", "the", "indexed", "types", "that", "are", "currently", "indexed"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L656-L664", "partition": "test", "index": 6096, "time": "2017-10-17 13:44:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.deleteIndex", "original_string": "public boolean deleteIndex(FeatureRow row, List<FeatureIndexType> types) {\n        boolean deleted = false;\n        for (FeatureIndexType type : types) {\n            if (deleteIndex(type, row)) {\n                deleted = true;\n            }\n        }\n        return deleted;\n    }", "language": "java", "code": "public boolean deleteIndex(FeatureRow row, List<FeatureIndexType> types) {\n        boolean deleted = false;\n        for (FeatureIndexType type : types) {\n            if (deleteIndex(type, row)) {\n                deleted = true;\n            }\n        }\n        return deleted;\n    }", "code_tokens": ["public", "boolean", "deleteIndex", "(", "FeatureRow", "row", ",", "List", "<", "FeatureIndexType", ">", "types", ")", "{", "boolean", "deleted", "=", "false", ";", "for", "(", "FeatureIndexType", "type", ":", "types", ")", "{", "if", "(", "deleteIndex", "(", "type", ",", "row", ")", ")", "{", "deleted", "=", "true", ";", "}", "}", "return", "deleted", ";", "}"], "docstring": "Delete the feature index for the feature row from the index types\n\n@param row   feature row\n@param types feature index types\n@return true if deleted from any type\n@since 2.0.0", "docstring_tokens": ["Delete", "the", "feature", "index", "for", "the", "feature", "row", "from", "the", "index", "types"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L502-L510", "partition": "test", "index": 6092, "time": "2017-10-17 13:44:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.index", "original_string": "public boolean index(FeatureRow row, List<FeatureIndexType> types) {\n        boolean indexed = false;\n        for (FeatureIndexType type : types) {\n            if (index(type, row)) {\n                indexed = true;\n            }\n        }\n        return indexed;\n    }", "language": "java", "code": "public boolean index(FeatureRow row, List<FeatureIndexType> types) {\n        boolean indexed = false;\n        for (FeatureIndexType type : types) {\n            if (index(type, row)) {\n                indexed = true;\n            }\n        }\n        return indexed;\n    }", "code_tokens": ["public", "boolean", "index", "(", "FeatureRow", "row", ",", "List", "<", "FeatureIndexType", ">", "types", ")", "{", "boolean", "indexed", "=", "false", ";", "for", "(", "FeatureIndexType", "type", ":", "types", ")", "{", "if", "(", "index", "(", "type", ",", "row", ")", ")", "{", "indexed", "=", "true", ";", "}", "}", "return", "indexed", ";", "}"], "docstring": "Index the feature row for the index types.\nThis method assumes that indexing has been completed and\nmaintained as the last indexed time is updated.\n\n@param row   feature row to index\n@param types feature index types\n@return true if indexed from any type\n@since 2.0.0", "docstring_tokens": ["Index", "the", "feature", "row", "for", "the", "index", "types", ".", "This", "method", "assumes", "that", "indexing", "has", "been", "completed", "and", "maintained", "as", "the", "last", "indexed", "time", "is", "updated", "."], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L380-L388", "partition": "test", "index": 6090, "time": "2017-10-17 13:44:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.index", "original_string": "public int index(boolean force, List<FeatureIndexType> types) {\n        int count = 0;\n        for (FeatureIndexType type : types) {\n            int typeCount = index(type, force);\n            count = Math.max(count, typeCount);\n        }\n        return count;\n    }", "language": "java", "code": "public int index(boolean force, List<FeatureIndexType> types) {\n        int count = 0;\n        for (FeatureIndexType type : types) {\n            int typeCount = index(type, force);\n            count = Math.max(count, typeCount);\n        }\n        return count;\n    }", "code_tokens": ["public", "int", "index", "(", "boolean", "force", ",", "List", "<", "FeatureIndexType", ">", "types", ")", "{", "int", "count", "=", "0", ";", "for", "(", "FeatureIndexType", "type", ":", "types", ")", "{", "int", "typeCount", "=", "index", "(", "type", ",", "force", ")", ";", "count", "=", "Math", ".", "max", "(", "count", ",", "typeCount", ")", ";", "}", "return", "count", ";", "}"], "docstring": "Index the feature tables for the index types\n\n@param force true to force re-indexing\n@param types feature index types\n@return largest count of indexed features\n@since 2.0.0", "docstring_tokens": ["Index", "the", "feature", "tables", "for", "the", "index", "types"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L313-L320", "partition": "test", "index": 6089, "time": "2017-10-17 13:44:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.deleteIndex", "original_string": "public boolean deleteIndex(Collection<FeatureIndexType> types) {\n        boolean deleted = false;\n        for (FeatureIndexType type : types) {\n            if (deleteIndex(type)) {\n                deleted = true;\n            }\n        }\n        return deleted;\n    }", "language": "java", "code": "public boolean deleteIndex(Collection<FeatureIndexType> types) {\n        boolean deleted = false;\n        for (FeatureIndexType type : types) {\n            if (deleteIndex(type)) {\n                deleted = true;\n            }\n        }\n        return deleted;\n    }", "code_tokens": ["public", "boolean", "deleteIndex", "(", "Collection", "<", "FeatureIndexType", ">", "types", ")", "{", "boolean", "deleted", "=", "false", ";", "for", "(", "FeatureIndexType", "type", ":", "types", ")", "{", "if", "(", "deleteIndex", "(", "type", ")", ")", "{", "deleted", "=", "true", ";", "}", "}", "return", "deleted", ";", "}"], "docstring": "Delete the feature index from the index types\n\n@param types feature index types\n@return true if deleted from any type\n@since 2.0.0", "docstring_tokens": ["Delete", "the", "feature", "index", "from", "the", "index", "types"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L446-L454", "partition": "test", "index": 6091, "time": "2017-10-17 13:44:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getCoverageData", "original_string": "public static CoverageData<?> getCoverageData(GeoPackage geoPackage,\n                                                  TileDao tileDao, Projection requestProjection) {\n        return getCoverageData(geoPackage, tileDao, null, null,\n                requestProjection);\n    }", "language": "java", "code": "public static CoverageData<?> getCoverageData(GeoPackage geoPackage,\n                                                  TileDao tileDao, Projection requestProjection) {\n        return getCoverageData(geoPackage, tileDao, null, null,\n                requestProjection);\n    }", "code_tokens": ["public", "static", "CoverageData", "<", "?", ">", "getCoverageData", "(", "GeoPackage", "geoPackage", ",", "TileDao", "tileDao", ",", "Projection", "requestProjection", ")", "{", "return", "getCoverageData", "(", "geoPackage", ",", "tileDao", ",", "null", ",", "null", ",", "requestProjection", ")", ";", "}"], "docstring": "Get a Tiled Gridded Coverage Data, use the coverage data pixel tile size\nas the request size width and height, request as the specified projection\n\n@param geoPackage        GeoPackage\n@param tileDao           tile dao\n@param requestProjection request projection\n@return coverage data", "docstring_tokens": ["Get", "a", "Tiled", "Gridded", "Coverage", "Data", "use", "the", "coverage", "data", "pixel", "tile", "size", "as", "the", "request", "size", "width", "and", "height", "request", "as", "the", "specified", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L106-L110", "partition": "test", "index": 5897, "time": "2017-12-04 16:33:16"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getCoverageData", "original_string": "public static CoverageData<?> getCoverageData(GeoPackage geoPackage,\n                                                  TileDao tileDao) {\n        return getCoverageData(geoPackage, tileDao, null, null,\n                tileDao.getProjection());\n    }", "language": "java", "code": "public static CoverageData<?> getCoverageData(GeoPackage geoPackage,\n                                                  TileDao tileDao) {\n        return getCoverageData(geoPackage, tileDao, null, null,\n                tileDao.getProjection());\n    }", "code_tokens": ["public", "static", "CoverageData", "<", "?", ">", "getCoverageData", "(", "GeoPackage", "geoPackage", ",", "TileDao", "tileDao", ")", "{", "return", "getCoverageData", "(", "geoPackage", ",", "tileDao", ",", "null", ",", "null", ",", "tileDao", ".", "getProjection", "(", ")", ")", ";", "}"], "docstring": "Get a Tiled Gridded Coverage Data, use the coverage data pixel tile size\nas the request size width and height\n\n@param geoPackage GeoPackage\n@param tileDao    tile dao\n@return coverage data", "docstring_tokens": ["Get", "a", "Tiled", "Gridded", "Coverage", "Data", "use", "the", "coverage", "data", "pixel", "tile", "size", "as", "the", "request", "size", "width", "and", "height"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L91-L95", "partition": "test", "index": 5896, "time": "2017-12-04 16:33:16"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java", "func_name": "CoverageData.getCoverageData", "original_string": "public static CoverageData<?> getCoverageData(GeoPackage geoPackage,\n                                                  TileDao tileDao, Integer width, Integer height,\n                                                  Projection requestProjection) {\n\n        TileMatrixSet tileMatrixSet = tileDao.getTileMatrixSet();\n        GriddedCoverageDao griddedCoverageDao = geoPackage\n                .getGriddedCoverageDao();\n\n        GriddedCoverage griddedCoverage = null;\n        try {\n            if (griddedCoverageDao.isTableExists()) {\n                griddedCoverage = griddedCoverageDao.query(tileMatrixSet);\n            }\n        } catch (SQLException e) {\n            throw new GeoPackageException(\n                    \"Failed to get Gridded Coverage for table name: \"\n                            + tileMatrixSet.getTableName(), e);\n        }\n\n        CoverageData<?> coverageData = null;\n\n        GriddedCoverageDataType dataType = griddedCoverage.getDataType();\n        switch (dataType) {\n            case INTEGER:\n                coverageData = new CoverageDataPng(geoPackage, tileDao, width,\n                        height, requestProjection);\n                break;\n            case FLOAT:\n                coverageData = new CoverageDataTiff(geoPackage, tileDao, width,\n                        height, requestProjection);\n                break;\n            default:\n                throw new GeoPackageException(\n                        \"Unsupported Gridded Coverage Data Type: \" + dataType);\n        }\n\n        return coverageData;\n    }", "language": "java", "code": "public static CoverageData<?> getCoverageData(GeoPackage geoPackage,\n                                                  TileDao tileDao, Integer width, Integer height,\n                                                  Projection requestProjection) {\n\n        TileMatrixSet tileMatrixSet = tileDao.getTileMatrixSet();\n        GriddedCoverageDao griddedCoverageDao = geoPackage\n                .getGriddedCoverageDao();\n\n        GriddedCoverage griddedCoverage = null;\n        try {\n            if (griddedCoverageDao.isTableExists()) {\n                griddedCoverage = griddedCoverageDao.query(tileMatrixSet);\n            }\n        } catch (SQLException e) {\n            throw new GeoPackageException(\n                    \"Failed to get Gridded Coverage for table name: \"\n                            + tileMatrixSet.getTableName(), e);\n        }\n\n        CoverageData<?> coverageData = null;\n\n        GriddedCoverageDataType dataType = griddedCoverage.getDataType();\n        switch (dataType) {\n            case INTEGER:\n                coverageData = new CoverageDataPng(geoPackage, tileDao, width,\n                        height, requestProjection);\n                break;\n            case FLOAT:\n                coverageData = new CoverageDataTiff(geoPackage, tileDao, width,\n                        height, requestProjection);\n                break;\n            default:\n                throw new GeoPackageException(\n                        \"Unsupported Gridded Coverage Data Type: \" + dataType);\n        }\n\n        return coverageData;\n    }", "code_tokens": ["public", "static", "CoverageData", "<", "?", ">", "getCoverageData", "(", "GeoPackage", "geoPackage", ",", "TileDao", "tileDao", ",", "Integer", "width", ",", "Integer", "height", ",", "Projection", "requestProjection", ")", "{", "TileMatrixSet", "tileMatrixSet", "=", "tileDao", ".", "getTileMatrixSet", "(", ")", ";", "GriddedCoverageDao", "griddedCoverageDao", "=", "geoPackage", ".", "getGriddedCoverageDao", "(", ")", ";", "GriddedCoverage", "griddedCoverage", "=", "null", ";", "try", "{", "if", "(", "griddedCoverageDao", ".", "isTableExists", "(", ")", ")", "{", "griddedCoverage", "=", "griddedCoverageDao", ".", "query", "(", "tileMatrixSet", ")", ";", "}", "}", "catch", "(", "SQLException", "e", ")", "{", "throw", "new", "GeoPackageException", "(", "\"Failed to get Gridded Coverage for table name: \"", "+", "tileMatrixSet", ".", "getTableName", "(", ")", ",", "e", ")", ";", "}", "CoverageData", "<", "?", ">", "coverageData", "=", "null", ";", "GriddedCoverageDataType", "dataType", "=", "griddedCoverage", ".", "getDataType", "(", ")", ";", "switch", "(", "dataType", ")", "{", "case", "INTEGER", ":", "coverageData", "=", "new", "CoverageDataPng", "(", "geoPackage", ",", "tileDao", ",", "width", ",", "height", ",", "requestProjection", ")", ";", "break", ";", "case", "FLOAT", ":", "coverageData", "=", "new", "CoverageDataTiff", "(", "geoPackage", ",", "tileDao", ",", "width", ",", "height", ",", "requestProjection", ")", ";", "break", ";", "default", ":", "throw", "new", "GeoPackageException", "(", "\"Unsupported Gridded Coverage Data Type: \"", "+", "dataType", ")", ";", "}", "return", "coverageData", ";", "}"], "docstring": "Get a Tiled Gridded Coverage Data\n\n@param geoPackage        GeoPackage\n@param tileDao           tile dao\n@param width             coverage data response width\n@param height            coverage data response height\n@param requestProjection request projection\n@return coverage data", "docstring_tokens": ["Get", "a", "Tiled", "Gridded", "Coverage", "Data"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/coverage/CoverageData.java#L44-L81", "partition": "test", "index": 5895, "time": "2017-12-04 16:33:16"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java", "func_name": "TileDao.getApproximateZoomLevel", "original_string": "public Long getApproximateZoomLevel(double length) {\n\n        Long zoomLevel = TileDaoUtils.getApproximateZoomLevel(widths, heights,\n                tileMatrices, length);\n        return zoomLevel;\n    }", "language": "java", "code": "public Long getApproximateZoomLevel(double length) {\n\n        Long zoomLevel = TileDaoUtils.getApproximateZoomLevel(widths, heights,\n                tileMatrices, length);\n        return zoomLevel;\n    }", "code_tokens": ["public", "Long", "getApproximateZoomLevel", "(", "double", "length", ")", "{", "Long", "zoomLevel", "=", "TileDaoUtils", ".", "getApproximateZoomLevel", "(", "widths", ",", "heights", ",", "tileMatrices", ",", "length", ")", ";", "return", "zoomLevel", ";", "}"], "docstring": "Get the approximate zoom level for the provided length in the default\nunits. Tiles may or may not exist for the returned zoom level. The\napproximate zoom level is determined using a factor of 2 from the zoom\nlevels with tiles.\n\n@param length length in default units\n@return approximate zoom level\n@since 2.0.2", "docstring_tokens": ["Get", "the", "approximate", "zoom", "level", "for", "the", "provided", "length", "in", "the", "default", "units", ".", "Tiles", "may", "or", "may", "not", "exist", "for", "the", "returned", "zoom", "level", ".", "The", "approximate", "zoom", "level", "is", "determined", "using", "a", "factor", "of", "2", "from", "the", "zoom", "levels", "with", "tiles", "."], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/user/TileDao.java#L401-L406", "partition": "test", "index": 5940, "time": "2018-02-20 15:02:55"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java", "func_name": "RelatedTablesExtension.getMappingsForRelated", "original_string": "public List<Long> getMappingsForRelated(ExtendedRelation extendedRelation,\n                                            long relatedId) {\n        return getMappingsForRelated(extendedRelation.getMappingTableName(),\n                relatedId);\n    }", "language": "java", "code": "public List<Long> getMappingsForRelated(ExtendedRelation extendedRelation,\n                                            long relatedId) {\n        return getMappingsForRelated(extendedRelation.getMappingTableName(),\n                relatedId);\n    }", "code_tokens": ["public", "List", "<", "Long", ">", "getMappingsForRelated", "(", "ExtendedRelation", "extendedRelation", ",", "long", "relatedId", ")", "{", "return", "getMappingsForRelated", "(", "extendedRelation", ".", "getMappingTableName", "(", ")", ",", "relatedId", ")", ";", "}"], "docstring": "Get the base id mappings for the related id\n\n@param extendedRelation extended relation\n@param relatedId        related id\n@return IDs representing the matching base IDs", "docstring_tokens": ["Get", "the", "base", "id", "mappings", "for", "the", "related", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java#L212-L216", "partition": "test", "index": 5984, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/custom/UserCustomDao.java", "func_name": "UserCustomDao.count", "original_string": "protected int count(UserCustomCursor cursor) {\n        int count = 0;\n        try {\n            count = cursor.getCount();\n        } finally {\n            cursor.close();\n        }\n        return count;\n    }", "language": "java", "code": "protected int count(UserCustomCursor cursor) {\n        int count = 0;\n        try {\n            count = cursor.getCount();\n        } finally {\n            cursor.close();\n        }\n        return count;\n    }", "code_tokens": ["protected", "int", "count", "(", "UserCustomCursor", "cursor", ")", "{", "int", "count", "=", "0", ";", "try", "{", "count", "=", "cursor", ".", "getCount", "(", ")", ";", "}", "finally", "{", "cursor", ".", "close", "(", ")", ";", "}", "return", "count", ";", "}"], "docstring": "Get the count of the cursor and close it\n\n@param cursor cursor\n@return count", "docstring_tokens": ["Get", "the", "count", "of", "the", "cursor", "and", "close", "it"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/custom/UserCustomDao.java#L103-L111", "partition": "test", "index": 5986, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java", "func_name": "UserMappingDao.deleteByBaseId", "original_string": "public int deleteByBaseId(long baseId) {\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(UserMappingTable.COLUMN_BASE_ID, baseId));\n\n        String[] whereArgs = buildWhereArgs(new Object[]{baseId});\n\n        int deleted = delete(where.toString(), whereArgs);\n\n        return deleted;\n    }", "language": "java", "code": "public int deleteByBaseId(long baseId) {\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(UserMappingTable.COLUMN_BASE_ID, baseId));\n\n        String[] whereArgs = buildWhereArgs(new Object[]{baseId});\n\n        int deleted = delete(where.toString(), whereArgs);\n\n        return deleted;\n    }", "code_tokens": ["public", "int", "deleteByBaseId", "(", "long", "baseId", ")", "{", "StringBuilder", "where", "=", "new", "StringBuilder", "(", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "UserMappingTable", ".", "COLUMN_BASE_ID", ",", "baseId", ")", ")", ";", "String", "[", "]", "whereArgs", "=", "buildWhereArgs", "(", "new", "Object", "[", "]", "{", "baseId", "}", ")", ";", "int", "deleted", "=", "delete", "(", "where", ".", "toString", "(", ")", ",", "whereArgs", ")", ";", "return", "deleted", ";", "}"], "docstring": "Delete user mappings by base id\n\n@param baseId base id\n@return rows deleted", "docstring_tokens": ["Delete", "user", "mappings", "by", "base", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java#L239-L249", "partition": "test", "index": 6134, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java", "func_name": "UserMappingDao.queryByIds", "original_string": "public UserCustomCursor queryByIds(long baseId, long relatedId) {\n        return query(buildWhereIds(baseId, relatedId),\n                buildWhereIdsArgs(baseId, relatedId));\n    }", "language": "java", "code": "public UserCustomCursor queryByIds(long baseId, long relatedId) {\n        return query(buildWhereIds(baseId, relatedId),\n                buildWhereIdsArgs(baseId, relatedId));\n    }", "code_tokens": ["public", "UserCustomCursor", "queryByIds", "(", "long", "baseId", ",", "long", "relatedId", ")", "{", "return", "query", "(", "buildWhereIds", "(", "baseId", ",", "relatedId", ")", ",", "buildWhereIdsArgs", "(", "baseId", ",", "relatedId", ")", ")", ";", "}"], "docstring": "Query by both base id and related id\n\n@param baseId    base id\n@param relatedId related id\n@return cursor", "docstring_tokens": ["Query", "by", "both", "base", "id", "and", "related", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java#L172-L175", "partition": "test", "index": 6131, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java", "func_name": "UserMappingDao.buildWhereIds", "original_string": "private String buildWhereIds(long baseId, long relatedId) {\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(UserMappingTable.COLUMN_BASE_ID, baseId));\n        where.append(\" AND \");\n        where.append(buildWhere(UserMappingTable.COLUMN_RELATED_ID, relatedId));\n\n        return where.toString();\n    }", "language": "java", "code": "private String buildWhereIds(long baseId, long relatedId) {\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(UserMappingTable.COLUMN_BASE_ID, baseId));\n        where.append(\" AND \");\n        where.append(buildWhere(UserMappingTable.COLUMN_RELATED_ID, relatedId));\n\n        return where.toString();\n    }", "code_tokens": ["private", "String", "buildWhereIds", "(", "long", "baseId", ",", "long", "relatedId", ")", "{", "StringBuilder", "where", "=", "new", "StringBuilder", "(", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "UserMappingTable", ".", "COLUMN_BASE_ID", ",", "baseId", ")", ")", ";", "where", ".", "append", "(", "\" AND \"", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "UserMappingTable", ".", "COLUMN_RELATED_ID", ",", "relatedId", ")", ")", ";", "return", "where", ".", "toString", "(", ")", ";", "}"], "docstring": "Build the where ids clause\n\n@param baseId    base id\n@param relatedId related id\n@return where clause", "docstring_tokens": ["Build", "the", "where", "ids", "clause"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java#L309-L317", "partition": "test", "index": 6137, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java", "func_name": "UserMappingDao.deleteByIds", "original_string": "public int deleteByIds(long baseId, long relatedId) {\n        return delete(buildWhereIds(baseId, relatedId),\n                buildWhereIdsArgs(baseId, relatedId));\n    }", "language": "java", "code": "public int deleteByIds(long baseId, long relatedId) {\n        return delete(buildWhereIds(baseId, relatedId),\n                buildWhereIdsArgs(baseId, relatedId));\n    }", "code_tokens": ["public", "int", "deleteByIds", "(", "long", "baseId", ",", "long", "relatedId", ")", "{", "return", "delete", "(", "buildWhereIds", "(", "baseId", ",", "relatedId", ")", ",", "buildWhereIdsArgs", "(", "baseId", ",", "relatedId", ")", ")", ";", "}"], "docstring": "Delete user mappings by both base id and related id\n\n@param baseId    base id\n@param relatedId related id\n@return rows deleted", "docstring_tokens": ["Delete", "user", "mappings", "by", "both", "base", "id", "and", "related", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java#L297-L300", "partition": "test", "index": 6136, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java", "func_name": "UserMappingDao.deleteByRelatedId", "original_string": "public int deleteByRelatedId(long relatedId) {\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(UserMappingTable.COLUMN_RELATED_ID, relatedId));\n\n        String[] whereArgs = buildWhereArgs(new Object[]{relatedId});\n\n        int deleted = delete(where.toString(), whereArgs);\n\n        return deleted;\n    }", "language": "java", "code": "public int deleteByRelatedId(long relatedId) {\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(UserMappingTable.COLUMN_RELATED_ID, relatedId));\n\n        String[] whereArgs = buildWhereArgs(new Object[]{relatedId});\n\n        int deleted = delete(where.toString(), whereArgs);\n\n        return deleted;\n    }", "code_tokens": ["public", "int", "deleteByRelatedId", "(", "long", "relatedId", ")", "{", "StringBuilder", "where", "=", "new", "StringBuilder", "(", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "UserMappingTable", ".", "COLUMN_RELATED_ID", ",", "relatedId", ")", ")", ";", "String", "[", "]", "whereArgs", "=", "buildWhereArgs", "(", "new", "Object", "[", "]", "{", "relatedId", "}", ")", ";", "int", "deleted", "=", "delete", "(", "where", ".", "toString", "(", ")", ",", "whereArgs", ")", ";", "return", "deleted", ";", "}"], "docstring": "Delete user mappings by related id\n\n@param relatedId related id\n@return rows deleted", "docstring_tokens": ["Delete", "user", "mappings", "by", "related", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java#L267-L277", "partition": "test", "index": 6135, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/custom/UserCustomDao.java", "func_name": "UserCustomDao.readTable", "original_string": "public static UserCustomDao readTable(GeoPackage geoPackage, String tableName) {\n\n        UserCustomConnection userDb = new UserCustomConnection(geoPackage.getConnection());\n        final UserCustomTable userCustomTable = UserCustomTableReader.readTable(\n                geoPackage.getConnection(), tableName);\n        UserCustomDao dao = new UserCustomDao(geoPackage.getName(), geoPackage.getConnection(), userDb,\n                userCustomTable);\n\n        dao.registerCursorWrapper(geoPackage);\n\n        return dao;\n    }", "language": "java", "code": "public static UserCustomDao readTable(GeoPackage geoPackage, String tableName) {\n\n        UserCustomConnection userDb = new UserCustomConnection(geoPackage.getConnection());\n        final UserCustomTable userCustomTable = UserCustomTableReader.readTable(\n                geoPackage.getConnection(), tableName);\n        UserCustomDao dao = new UserCustomDao(geoPackage.getName(), geoPackage.getConnection(), userDb,\n                userCustomTable);\n\n        dao.registerCursorWrapper(geoPackage);\n\n        return dao;\n    }", "code_tokens": ["public", "static", "UserCustomDao", "readTable", "(", "GeoPackage", "geoPackage", ",", "String", "tableName", ")", "{", "UserCustomConnection", "userDb", "=", "new", "UserCustomConnection", "(", "geoPackage", ".", "getConnection", "(", ")", ")", ";", "final", "UserCustomTable", "userCustomTable", "=", "UserCustomTableReader", ".", "readTable", "(", "geoPackage", ".", "getConnection", "(", ")", ",", "tableName", ")", ";", "UserCustomDao", "dao", "=", "new", "UserCustomDao", "(", "geoPackage", ".", "getName", "(", ")", ",", "geoPackage", ".", "getConnection", "(", ")", ",", "userDb", ",", "userCustomTable", ")", ";", "dao", ".", "registerCursorWrapper", "(", "geoPackage", ")", ";", "return", "dao", ";", "}"], "docstring": "Read the database table and create a DAO\n\n@param geoPackage GeoPackage\n@param tableName  table name\n@return user custom DAO", "docstring_tokens": ["Read", "the", "database", "table", "and", "create", "a", "DAO"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/custom/UserCustomDao.java#L134-L145", "partition": "test", "index": 5988, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java", "func_name": "RelatedTablesExtension.getMappingsForBase", "original_string": "public List<Long> getMappingsForBase(ExtendedRelation extendedRelation,\n                                         long baseId) {\n        return getMappingsForBase(extendedRelation.getMappingTableName(),\n                baseId);\n    }", "language": "java", "code": "public List<Long> getMappingsForBase(ExtendedRelation extendedRelation,\n                                         long baseId) {\n        return getMappingsForBase(extendedRelation.getMappingTableName(),\n                baseId);\n    }", "code_tokens": ["public", "List", "<", "Long", ">", "getMappingsForBase", "(", "ExtendedRelation", "extendedRelation", ",", "long", "baseId", ")", "{", "return", "getMappingsForBase", "(", "extendedRelation", ".", "getMappingTableName", "(", ")", ",", "baseId", ")", ";", "}"], "docstring": "Get the related id mappings for the base id\n\n@param extendedRelation extended relation\n@param baseId           base id\n@return IDs representing the matching related IDs", "docstring_tokens": ["Get", "the", "related", "id", "mappings", "for", "the", "base", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java#L174-L178", "partition": "test", "index": 5983, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java", "func_name": "RelatedTablesExtension.getSimpleAttributesDao", "original_string": "public SimpleAttributesDao getSimpleAttributesDao(String tableName) {\n        SimpleAttributesDao simpleAttributesDao = new SimpleAttributesDao(\n                getUserDao(tableName));\n        simpleAttributesDao.registerCursorWrapper(getGeoPackage());\n        setContents(simpleAttributesDao.getTable());\n        return simpleAttributesDao;\n    }", "language": "java", "code": "public SimpleAttributesDao getSimpleAttributesDao(String tableName) {\n        SimpleAttributesDao simpleAttributesDao = new SimpleAttributesDao(\n                getUserDao(tableName));\n        simpleAttributesDao.registerCursorWrapper(getGeoPackage());\n        setContents(simpleAttributesDao.getTable());\n        return simpleAttributesDao;\n    }", "code_tokens": ["public", "SimpleAttributesDao", "getSimpleAttributesDao", "(", "String", "tableName", ")", "{", "SimpleAttributesDao", "simpleAttributesDao", "=", "new", "SimpleAttributesDao", "(", "getUserDao", "(", "tableName", ")", ")", ";", "simpleAttributesDao", ".", "registerCursorWrapper", "(", "getGeoPackage", "(", ")", ")", ";", "setContents", "(", "simpleAttributesDao", ".", "getTable", "(", ")", ")", ";", "return", "simpleAttributesDao", ";", "}"], "docstring": "Get a related simple attributes table DAO\n\n@param tableName simple attributes table name\n@return simple attributes DAO", "docstring_tokens": ["Get", "a", "related", "simple", "attributes", "table", "DAO"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java#L159-L165", "partition": "test", "index": 5982, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java", "func_name": "RelatedTablesExtension.getMappingDao", "original_string": "public UserMappingDao getMappingDao(String tableName) {\n        UserMappingDao userMappingDao = new UserMappingDao(getUserDao(tableName));\n        userMappingDao.registerCursorWrapper(getGeoPackage());\n        return userMappingDao;\n    }", "language": "java", "code": "public UserMappingDao getMappingDao(String tableName) {\n        UserMappingDao userMappingDao = new UserMappingDao(getUserDao(tableName));\n        userMappingDao.registerCursorWrapper(getGeoPackage());\n        return userMappingDao;\n    }", "code_tokens": ["public", "UserMappingDao", "getMappingDao", "(", "String", "tableName", ")", "{", "UserMappingDao", "userMappingDao", "=", "new", "UserMappingDao", "(", "getUserDao", "(", "tableName", ")", ")", ";", "userMappingDao", ".", "registerCursorWrapper", "(", "getGeoPackage", "(", ")", ")", ";", "return", "userMappingDao", ";", "}"], "docstring": "Get a User Mapping DAO from a table name\n\n@param tableName mapping table name\n@return user mapping dao", "docstring_tokens": ["Get", "a", "User", "Mapping", "DAO", "from", "a", "table", "name"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java#L92-L96", "partition": "test", "index": 5981, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/simple/SimpleAttributesDao.java", "func_name": "SimpleAttributesDao.getRows", "original_string": "public List<SimpleAttributesRow> getRows(List<Long> ids) {\n        List<SimpleAttributesRow> simpleAttributesRows = new ArrayList<>();\n        for (long id : ids) {\n            UserCustomRow userCustomRow = queryForIdRow(id);\n            if (userCustomRow != null) {\n                simpleAttributesRows.add(getRow(userCustomRow));\n            }\n        }\n        return simpleAttributesRows;\n    }", "language": "java", "code": "public List<SimpleAttributesRow> getRows(List<Long> ids) {\n        List<SimpleAttributesRow> simpleAttributesRows = new ArrayList<>();\n        for (long id : ids) {\n            UserCustomRow userCustomRow = queryForIdRow(id);\n            if (userCustomRow != null) {\n                simpleAttributesRows.add(getRow(userCustomRow));\n            }\n        }\n        return simpleAttributesRows;\n    }", "code_tokens": ["public", "List", "<", "SimpleAttributesRow", ">", "getRows", "(", "List", "<", "Long", ">", "ids", ")", "{", "List", "<", "SimpleAttributesRow", ">", "simpleAttributesRows", "=", "new", "ArrayList", "<>", "(", ")", ";", "for", "(", "long", "id", ":", "ids", ")", "{", "UserCustomRow", "userCustomRow", "=", "queryForIdRow", "(", "id", ")", ";", "if", "(", "userCustomRow", "!=", "null", ")", "{", "simpleAttributesRows", ".", "add", "(", "getRow", "(", "userCustomRow", ")", ")", ";", "}", "}", "return", "simpleAttributesRows", ";", "}"], "docstring": "Get the simple attributes rows that exist with the provided ids\n\n@param ids list of ids\n@return simple attributes rows", "docstring_tokens": ["Get", "the", "simple", "attributes", "rows", "that", "exist", "with", "the", "provided", "ids"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/simple/SimpleAttributesDao.java#L80-L89", "partition": "test", "index": 5979, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/custom/UserCustomTableReader.java", "func_name": "UserCustomTableReader.readTable", "original_string": "public static UserCustomTable readTable(GeoPackageConnection connection,\n                                            String tableName) {\n        UserCustomTableReader tableReader = new UserCustomTableReader(tableName);\n        UserCustomTable customTable = tableReader.readTable(new UserCustomWrapperConnection(connection));\n        return customTable;\n    }", "language": "java", "code": "public static UserCustomTable readTable(GeoPackageConnection connection,\n                                            String tableName) {\n        UserCustomTableReader tableReader = new UserCustomTableReader(tableName);\n        UserCustomTable customTable = tableReader.readTable(new UserCustomWrapperConnection(connection));\n        return customTable;\n    }", "code_tokens": ["public", "static", "UserCustomTable", "readTable", "(", "GeoPackageConnection", "connection", ",", "String", "tableName", ")", "{", "UserCustomTableReader", "tableReader", "=", "new", "UserCustomTableReader", "(", "tableName", ")", ";", "UserCustomTable", "customTable", "=", "tableReader", ".", "readTable", "(", "new", "UserCustomWrapperConnection", "(", "connection", ")", ")", ";", "return", "customTable", ";", "}"], "docstring": "Read the table\n\n@param connection GeoPackage connection\n@param tableName  table name\n@return table", "docstring_tokens": ["Read", "the", "table"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/custom/UserCustomTableReader.java#L62-L67", "partition": "test", "index": 6083, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/user/custom/UserCustomDao.java", "func_name": "UserCustomDao.registerCursorWrapper", "original_string": "public void registerCursorWrapper(GeoPackage geoPackage) {\n        geoPackage.registerCursorWrapper(getTableName(), new GeoPackageCursorWrapper() {\n            @Override\n            public Cursor wrapCursor(Cursor cursor) {\n                return new UserCustomCursor(getTable(), cursor);\n            }\n        });\n    }", "language": "java", "code": "public void registerCursorWrapper(GeoPackage geoPackage) {\n        geoPackage.registerCursorWrapper(getTableName(), new GeoPackageCursorWrapper() {\n            @Override\n            public Cursor wrapCursor(Cursor cursor) {\n                return new UserCustomCursor(getTable(), cursor);\n            }\n        });\n    }", "code_tokens": ["public", "void", "registerCursorWrapper", "(", "GeoPackage", "geoPackage", ")", "{", "geoPackage", ".", "registerCursorWrapper", "(", "getTableName", "(", ")", ",", "new", "GeoPackageCursorWrapper", "(", ")", "{", "@", "Override", "public", "Cursor", "wrapCursor", "(", "Cursor", "cursor", ")", "{", "return", "new", "UserCustomCursor", "(", "getTable", "(", ")", ",", "cursor", ")", ";", "}", "}", ")", ";", "}"], "docstring": "Register the cursor wrapper into the GeoPackage\n\n@param geoPackage GeoPackage", "docstring_tokens": ["Register", "the", "cursor", "wrapper", "into", "the", "GeoPackage"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/user/custom/UserCustomDao.java#L118-L125", "partition": "test", "index": 5987, "time": "2018-06-11 16:39:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/io/BitmapConverter.java", "func_name": "BitmapConverter.toBytes", "original_string": "public static byte[] toBytes(Bitmap bitmap, CompressFormat format,\n                                 int quality) throws IOException {\n        byte[] bytes = null;\n        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n        try {\n            bitmap.compress(format, quality, byteStream);\n            bytes = byteStream.toByteArray();\n        } finally {\n            byteStream.close();\n        }\n        return bytes;\n    }", "language": "java", "code": "public static byte[] toBytes(Bitmap bitmap, CompressFormat format,\n                                 int quality) throws IOException {\n        byte[] bytes = null;\n        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n        try {\n            bitmap.compress(format, quality, byteStream);\n            bytes = byteStream.toByteArray();\n        } finally {\n            byteStream.close();\n        }\n        return bytes;\n    }", "code_tokens": ["public", "static", "byte", "[", "]", "toBytes", "(", "Bitmap", "bitmap", ",", "CompressFormat", "format", ",", "int", "quality", ")", "throws", "IOException", "{", "byte", "[", "]", "bytes", "=", "null", ";", "ByteArrayOutputStream", "byteStream", "=", "new", "ByteArrayOutputStream", "(", ")", ";", "try", "{", "bitmap", ".", "compress", "(", "format", ",", "quality", ",", "byteStream", ")", ";", "bytes", "=", "byteStream", ".", "toByteArray", "(", ")", ";", "}", "finally", "{", "byteStream", ".", "close", "(", ")", ";", "}", "return", "bytes", ";", "}"], "docstring": "Compress the bitmap to a byte array\n\n@param bitmap  bitmap image\n@param format  compress format\n@param quality quality\n@return image bytes\n@throws IOException upon failure", "docstring_tokens": ["Compress", "the", "bitmap", "to", "a", "byte", "array"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/io/BitmapConverter.java#L63-L74", "partition": "test", "index": 5908, "time": "2018-07-11 15:36:45"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/io/BitmapConverter.java", "func_name": "BitmapConverter.toBitmap", "original_string": "public static Bitmap toBitmap(byte[] bytes, Options options) {\n        Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length,\n                options);\n        return bitmap;\n    }", "language": "java", "code": "public static Bitmap toBitmap(byte[] bytes, Options options) {\n        Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length,\n                options);\n        return bitmap;\n    }", "code_tokens": ["public", "static", "Bitmap", "toBitmap", "(", "byte", "[", "]", "bytes", ",", "Options", "options", ")", "{", "Bitmap", "bitmap", "=", "BitmapFactory", ".", "decodeByteArray", "(", "bytes", ",", "0", ",", "bytes", ".", "length", ",", "options", ")", ";", "return", "bitmap", ";", "}"], "docstring": "Decode the bytes to a bitmap, with options\n\n@param bytes   image bytes\n@param options decode options\n@return image bitmap", "docstring_tokens": ["Decode", "the", "bytes", "to", "a", "bitmap", "with", "options"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/io/BitmapConverter.java#L35-L39", "partition": "test", "index": 5907, "time": "2018-07-11 15:36:45"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java", "func_name": "RTreeIndexTableDao.query", "original_string": "public UserCustomCursor query(GeometryEnvelope envelope) {\n        return query(envelope.getMinX(), envelope.getMinY(),\n                envelope.getMaxX(), envelope.getMaxY());\n    }", "language": "java", "code": "public UserCustomCursor query(GeometryEnvelope envelope) {\n        return query(envelope.getMinX(), envelope.getMinY(),\n                envelope.getMaxX(), envelope.getMaxY());\n    }", "code_tokens": ["public", "UserCustomCursor", "query", "(", "GeometryEnvelope", "envelope", ")", "{", "return", "query", "(", "envelope", ".", "getMinX", "(", ")", ",", "envelope", ".", "getMinY", "(", ")", ",", "envelope", ".", "getMaxX", "(", ")", ",", "envelope", ".", "getMaxY", "(", ")", ")", ";", "}"], "docstring": "Query for rows within the geometry envelope\n\n@param envelope geometry envelope\n@return cursor results", "docstring_tokens": ["Query", "for", "rows", "within", "the", "geometry", "envelope"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java#L374-L377", "partition": "test", "index": 5918, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java", "func_name": "ManualFeatureQuery.count", "original_string": "public long count(double minX, double minY, double maxX, double maxY) {\n        return query(minX, minY, maxX, maxY).count();\n    }", "language": "java", "code": "public long count(double minX, double minY, double maxX, double maxY) {\n        return query(minX, minY, maxX, maxY).count();\n    }", "code_tokens": ["public", "long", "count", "(", "double", "minX", ",", "double", "minY", ",", "double", "maxX", ",", "double", "maxY", ")", "{", "return", "query", "(", "minX", ",", "minY", ",", "maxX", ",", "maxY", ")", ".", "count", "(", ")", ";", "}"], "docstring": "Manually count the rows within the bounds\n\n@param minX min x\n@param minY min y\n@param maxX max x\n@param maxY max y\n@return count", "docstring_tokens": ["Manually", "count", "the", "rows", "within", "the", "bounds"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java#L315-L317", "partition": "test", "index": 5926, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java", "func_name": "RTreeIndexTableDao.create", "original_string": "public Extensions create() {\n        Extensions extension = null;\n        if (!has()) {\n            extension = rTree.create(featureDao.getTable());\n            if (progress != null) {\n                progress.addProgress(count());\n            }\n        }\n        return extension;\n    }", "language": "java", "code": "public Extensions create() {\n        Extensions extension = null;\n        if (!has()) {\n            extension = rTree.create(featureDao.getTable());\n            if (progress != null) {\n                progress.addProgress(count());\n            }\n        }\n        return extension;\n    }", "code_tokens": ["public", "Extensions", "create", "(", ")", "{", "Extensions", "extension", "=", "null", ";", "if", "(", "!", "has", "(", ")", ")", "{", "extension", "=", "rTree", ".", "create", "(", "featureDao", ".", "getTable", "(", ")", ")", ";", "if", "(", "progress", "!=", "null", ")", "{", "progress", ".", "addProgress", "(", "count", "(", ")", ")", ";", "}", "}", "return", "extension", ";", "}"], "docstring": "Create the RTree extension for the feature table\n\n@return extension", "docstring_tokens": ["Create", "the", "RTree", "extension", "for", "the", "feature", "table"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java#L117-L126", "partition": "test", "index": 5914, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java", "func_name": "RTreeIndexTableDao.getFeatureRow", "original_string": "public FeatureRow getFeatureRow(UserCustomCursor cursor) {\n        RTreeIndexTableRow row = getRow(cursor);\n        return getFeatureRow(row);\n    }", "language": "java", "code": "public FeatureRow getFeatureRow(UserCustomCursor cursor) {\n        RTreeIndexTableRow row = getRow(cursor);\n        return getFeatureRow(row);\n    }", "code_tokens": ["public", "FeatureRow", "getFeatureRow", "(", "UserCustomCursor", "cursor", ")", "{", "RTreeIndexTableRow", "row", "=", "getRow", "(", "cursor", ")", ";", "return", "getFeatureRow", "(", "row", ")", ";", "}"], "docstring": "Get the feature row from the RTree Index Table row\n\n@param cursor result cursor\n@return feature row", "docstring_tokens": ["Get", "the", "feature", "row", "from", "the", "RTree", "Index", "Table", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java#L189-L192", "partition": "test", "index": 5915, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java", "func_name": "RTreeIndexTableDao.query", "original_string": "public UserCustomCursor query(BoundingBox boundingBox,\n                                  Projection projection) {\n        BoundingBox featureBoundingBox = projectBoundingBox(boundingBox,\n                projection);\n        return query(featureBoundingBox);\n    }", "language": "java", "code": "public UserCustomCursor query(BoundingBox boundingBox,\n                                  Projection projection) {\n        BoundingBox featureBoundingBox = projectBoundingBox(boundingBox,\n                projection);\n        return query(featureBoundingBox);\n    }", "code_tokens": ["public", "UserCustomCursor", "query", "(", "BoundingBox", "boundingBox", ",", "Projection", "projection", ")", "{", "BoundingBox", "featureBoundingBox", "=", "projectBoundingBox", "(", "boundingBox", ",", "projection", ")", ";", "return", "query", "(", "featureBoundingBox", ")", ";", "}"], "docstring": "Query for rows within the bounding box in the provided projection\n\n@param boundingBox bounding box\n@param projection  projection\n@return cursor results", "docstring_tokens": ["Query", "for", "rows", "within", "the", "bounding", "box", "in", "the", "provided", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java#L338-L343", "partition": "test", "index": 5917, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java", "func_name": "RTreeIndexTableDao.query", "original_string": "public UserCustomCursor query(double minX, double minY, double maxX,\n                                  double maxY) {\n        String where = buildWhere(minX, minY, maxX, maxY);\n        String[] whereArgs = buildWhereArgs(minX, minY, maxX, maxY);\n        return query(where, whereArgs);\n    }", "language": "java", "code": "public UserCustomCursor query(double minX, double minY, double maxX,\n                                  double maxY) {\n        String where = buildWhere(minX, minY, maxX, maxY);\n        String[] whereArgs = buildWhereArgs(minX, minY, maxX, maxY);\n        return query(where, whereArgs);\n    }", "code_tokens": ["public", "UserCustomCursor", "query", "(", "double", "minX", ",", "double", "minY", ",", "double", "maxX", ",", "double", "maxY", ")", "{", "String", "where", "=", "buildWhere", "(", "minX", ",", "minY", ",", "maxX", ",", "maxY", ")", ";", "String", "[", "]", "whereArgs", "=", "buildWhereArgs", "(", "minX", ",", "minY", ",", "maxX", ",", "maxY", ")", ";", "return", "query", "(", "where", ",", "whereArgs", ")", ";", "}"], "docstring": "Query for rows within the bounds\n\n@param minX min x\n@param minY min y\n@param maxX max x\n@param maxY max y\n@return cursor results", "docstring_tokens": ["Query", "for", "rows", "within", "the", "bounds"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java#L399-L404", "partition": "test", "index": 5920, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java", "func_name": "RTreeIndexTableDao.buildWhere", "original_string": "private String buildWhere(double minX, double minY, double maxX, double maxY) {\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(RTreeIndexExtension.COLUMN_MIN_X, maxX, \"<=\"));\n        where.append(\" AND \");\n        where.append(buildWhere(RTreeIndexExtension.COLUMN_MIN_Y, maxY, \"<=\"));\n        where.append(\" AND \");\n        where.append(buildWhere(RTreeIndexExtension.COLUMN_MAX_X, minX, \">=\"));\n        where.append(\" AND \");\n        where.append(buildWhere(RTreeIndexExtension.COLUMN_MAX_Y, minY, \">=\"));\n\n        return where.toString();\n    }", "language": "java", "code": "private String buildWhere(double minX, double minY, double maxX, double maxY) {\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(RTreeIndexExtension.COLUMN_MIN_X, maxX, \"<=\"));\n        where.append(\" AND \");\n        where.append(buildWhere(RTreeIndexExtension.COLUMN_MIN_Y, maxY, \"<=\"));\n        where.append(\" AND \");\n        where.append(buildWhere(RTreeIndexExtension.COLUMN_MAX_X, minX, \">=\"));\n        where.append(\" AND \");\n        where.append(buildWhere(RTreeIndexExtension.COLUMN_MAX_Y, minY, \">=\"));\n\n        return where.toString();\n    }", "code_tokens": ["private", "String", "buildWhere", "(", "double", "minX", ",", "double", "minY", ",", "double", "maxX", ",", "double", "maxY", ")", "{", "StringBuilder", "where", "=", "new", "StringBuilder", "(", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "RTreeIndexExtension", ".", "COLUMN_MIN_X", ",", "maxX", ",", "\"<=\"", ")", ")", ";", "where", ".", "append", "(", "\" AND \"", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "RTreeIndexExtension", ".", "COLUMN_MIN_Y", ",", "maxY", ",", "\"<=\"", ")", ")", ";", "where", ".", "append", "(", "\" AND \"", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "RTreeIndexExtension", ".", "COLUMN_MAX_X", ",", "minX", ",", "\">=\"", ")", ")", ";", "where", ".", "append", "(", "\" AND \"", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "RTreeIndexExtension", ".", "COLUMN_MAX_Y", ",", "minY", ",", "\">=\"", ")", ")", ";", "return", "where", ".", "toString", "(", ")", ";", "}"], "docstring": "Build a where clause from the bounds for overlapping ranges\n\n@param minX min x\n@param minY min y\n@param maxX max x\n@param maxY max y\n@return where clause", "docstring_tokens": ["Build", "a", "where", "clause", "from", "the", "bounds", "for", "overlapping", "ranges"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java#L441-L453", "partition": "test", "index": 5921, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java", "func_name": "RTreeIndexTableDao.count", "original_string": "public long count(GeometryEnvelope envelope) {\n        return count(envelope.getMinX(), envelope.getMinY(),\n                envelope.getMaxX(), envelope.getMaxY());\n    }", "language": "java", "code": "public long count(GeometryEnvelope envelope) {\n        return count(envelope.getMinX(), envelope.getMinY(),\n                envelope.getMaxX(), envelope.getMaxY());\n    }", "code_tokens": ["public", "long", "count", "(", "GeometryEnvelope", "envelope", ")", "{", "return", "count", "(", "envelope", ".", "getMinX", "(", ")", ",", "envelope", ".", "getMinY", "(", ")", ",", "envelope", ".", "getMaxX", "(", ")", ",", "envelope", ".", "getMaxY", "(", ")", ")", ";", "}"], "docstring": "Count the rows within the geometry envelope\n\n@param envelope geometry envelope\n@return count", "docstring_tokens": ["Count", "the", "rows", "within", "the", "geometry", "envelope"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java#L385-L388", "partition": "test", "index": 5919, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexExtension.java", "func_name": "RTreeIndexExtension.getTableDao", "original_string": "public RTreeIndexTableDao getTableDao(FeatureDao featureDao) {\n\n        GeoPackageConnection connection = getGeoPackage().getConnection();\n        UserCustomConnection userDb = new UserCustomConnection(connection);\n        UserCustomTable userCustomTable = getRTreeTable(featureDao.getTable());\n        UserCustomDao userCustomDao = new UserCustomDao(geoPackage.getName(),\n                connection, userDb, userCustomTable);\n\n        return new RTreeIndexTableDao(this, userCustomDao, featureDao);\n    }", "language": "java", "code": "public RTreeIndexTableDao getTableDao(FeatureDao featureDao) {\n\n        GeoPackageConnection connection = getGeoPackage().getConnection();\n        UserCustomConnection userDb = new UserCustomConnection(connection);\n        UserCustomTable userCustomTable = getRTreeTable(featureDao.getTable());\n        UserCustomDao userCustomDao = new UserCustomDao(geoPackage.getName(),\n                connection, userDb, userCustomTable);\n\n        return new RTreeIndexTableDao(this, userCustomDao, featureDao);\n    }", "code_tokens": ["public", "RTreeIndexTableDao", "getTableDao", "(", "FeatureDao", "featureDao", ")", "{", "GeoPackageConnection", "connection", "=", "getGeoPackage", "(", ")", ".", "getConnection", "(", ")", ";", "UserCustomConnection", "userDb", "=", "new", "UserCustomConnection", "(", "connection", ")", ";", "UserCustomTable", "userCustomTable", "=", "getRTreeTable", "(", "featureDao", ".", "getTable", "(", ")", ")", ";", "UserCustomDao", "userCustomDao", "=", "new", "UserCustomDao", "(", "geoPackage", ".", "getName", "(", ")", ",", "connection", ",", "userDb", ",", "userCustomTable", ")", ";", "return", "new", "RTreeIndexTableDao", "(", "this", ",", "userCustomDao", ",", "featureDao", ")", ";", "}"], "docstring": "Get a RTree Index Table DAO for the feature dao\n\n@param featureDao feature DAO\n@return RTree Index Table DAO\n@since 3.1.0", "docstring_tokens": ["Get", "a", "RTree", "Index", "Table", "DAO", "for", "the", "feature", "dao"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexExtension.java#L68-L77", "partition": "test", "index": 6077, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java", "func_name": "ManualFeatureQuery.count", "original_string": "public long count(BoundingBox boundingBox, Projection projection) {\n        BoundingBox featureBoundingBox = featureDao.projectBoundingBox(\n                boundingBox, projection);\n        return count(featureBoundingBox);\n    }", "language": "java", "code": "public long count(BoundingBox boundingBox, Projection projection) {\n        BoundingBox featureBoundingBox = featureDao.projectBoundingBox(\n                boundingBox, projection);\n        return count(featureBoundingBox);\n    }", "code_tokens": ["public", "long", "count", "(", "BoundingBox", "boundingBox", ",", "Projection", "projection", ")", "{", "BoundingBox", "featureBoundingBox", "=", "featureDao", ".", "projectBoundingBox", "(", "boundingBox", ",", "projection", ")", ";", "return", "count", "(", "featureBoundingBox", ")", ";", "}"], "docstring": "Manually count the rows within the bounding box in the provided\nprojection\n\n@param boundingBox bounding box\n@param projection  projection\n@return count", "docstring_tokens": ["Manually", "count", "the", "rows", "within", "the", "bounding", "box", "in", "the", "provided", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java#L217-L221", "partition": "test", "index": 5923, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java", "func_name": "ManualFeatureQuery.query", "original_string": "public ManualFeatureQueryResults query(GeometryEnvelope envelope) {\n        return query(envelope.getMinX(), envelope.getMinY(),\n                envelope.getMaxX(), envelope.getMaxY());\n    }", "language": "java", "code": "public ManualFeatureQueryResults query(GeometryEnvelope envelope) {\n        return query(envelope.getMinX(), envelope.getMinY(),\n                envelope.getMaxX(), envelope.getMaxY());\n    }", "code_tokens": ["public", "ManualFeatureQueryResults", "query", "(", "GeometryEnvelope", "envelope", ")", "{", "return", "query", "(", "envelope", ".", "getMinX", "(", ")", ",", "envelope", ".", "getMinY", "(", ")", ",", "envelope", ".", "getMaxX", "(", ")", ",", "envelope", ".", "getMaxY", "(", ")", ")", ";", "}"], "docstring": "Manually query for rows within the geometry envelope\n\n@param envelope geometry envelope\n@return results", "docstring_tokens": ["Manually", "query", "for", "rows", "within", "the", "geometry", "envelope"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java#L229-L232", "partition": "test", "index": 5924, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java", "func_name": "ManualFeatureQuery.query", "original_string": "public ManualFeatureQueryResults query(double minX, double minY,\n                                           double maxX, double maxY) {\n\n        List<Long> featureIds = new ArrayList<>();\n\n        long offset = 0;\n        boolean hasResults = true;\n\n        minX -= tolerance;\n        maxX += tolerance;\n        minY -= tolerance;\n        maxY += tolerance;\n\n        while (hasResults) {\n\n            hasResults = false;\n\n            FeatureCursor featureCursor = featureDao.queryForChunk(chunkLimit,\n                    offset);\n            try {\n                while (featureCursor.moveToNext()) {\n                    hasResults = true;\n\n                    FeatureRow featureRow = featureCursor.getRow();\n                    GeometryEnvelope envelope = featureRow\n                            .getGeometryEnvelope();\n                    if (envelope != null) {\n\n                        double minXMax = Math.max(minX, envelope.getMinX());\n                        double maxXMin = Math.min(maxX, envelope.getMaxX());\n                        double minYMax = Math.max(minY, envelope.getMinY());\n                        double maxYMin = Math.min(maxY, envelope.getMaxY());\n\n                        if (minXMax <= maxXMin && minYMax <= maxYMin) {\n                            featureIds.add(featureRow.getId());\n                        }\n\n                    }\n                }\n            } finally {\n                featureCursor.close();\n            }\n\n            offset += chunkLimit;\n        }\n\n        ManualFeatureQueryResults results = new ManualFeatureQueryResults(\n                featureDao, featureIds);\n\n        return results;\n    }", "language": "java", "code": "public ManualFeatureQueryResults query(double minX, double minY,\n                                           double maxX, double maxY) {\n\n        List<Long> featureIds = new ArrayList<>();\n\n        long offset = 0;\n        boolean hasResults = true;\n\n        minX -= tolerance;\n        maxX += tolerance;\n        minY -= tolerance;\n        maxY += tolerance;\n\n        while (hasResults) {\n\n            hasResults = false;\n\n            FeatureCursor featureCursor = featureDao.queryForChunk(chunkLimit,\n                    offset);\n            try {\n                while (featureCursor.moveToNext()) {\n                    hasResults = true;\n\n                    FeatureRow featureRow = featureCursor.getRow();\n                    GeometryEnvelope envelope = featureRow\n                            .getGeometryEnvelope();\n                    if (envelope != null) {\n\n                        double minXMax = Math.max(minX, envelope.getMinX());\n                        double maxXMin = Math.min(maxX, envelope.getMaxX());\n                        double minYMax = Math.max(minY, envelope.getMinY());\n                        double maxYMin = Math.min(maxY, envelope.getMaxY());\n\n                        if (minXMax <= maxXMin && minYMax <= maxYMin) {\n                            featureIds.add(featureRow.getId());\n                        }\n\n                    }\n                }\n            } finally {\n                featureCursor.close();\n            }\n\n            offset += chunkLimit;\n        }\n\n        ManualFeatureQueryResults results = new ManualFeatureQueryResults(\n                featureDao, featureIds);\n\n        return results;\n    }", "code_tokens": ["public", "ManualFeatureQueryResults", "query", "(", "double", "minX", ",", "double", "minY", ",", "double", "maxX", ",", "double", "maxY", ")", "{", "List", "<", "Long", ">", "featureIds", "=", "new", "ArrayList", "<>", "(", ")", ";", "long", "offset", "=", "0", ";", "boolean", "hasResults", "=", "true", ";", "minX", "-=", "tolerance", ";", "maxX", "+=", "tolerance", ";", "minY", "-=", "tolerance", ";", "maxY", "+=", "tolerance", ";", "while", "(", "hasResults", ")", "{", "hasResults", "=", "false", ";", "FeatureCursor", "featureCursor", "=", "featureDao", ".", "queryForChunk", "(", "chunkLimit", ",", "offset", ")", ";", "try", "{", "while", "(", "featureCursor", ".", "moveToNext", "(", ")", ")", "{", "hasResults", "=", "true", ";", "FeatureRow", "featureRow", "=", "featureCursor", ".", "getRow", "(", ")", ";", "GeometryEnvelope", "envelope", "=", "featureRow", ".", "getGeometryEnvelope", "(", ")", ";", "if", "(", "envelope", "!=", "null", ")", "{", "double", "minXMax", "=", "Math", ".", "max", "(", "minX", ",", "envelope", ".", "getMinX", "(", ")", ")", ";", "double", "maxXMin", "=", "Math", ".", "min", "(", "maxX", ",", "envelope", ".", "getMaxX", "(", ")", ")", ";", "double", "minYMax", "=", "Math", ".", "max", "(", "minY", ",", "envelope", ".", "getMinY", "(", ")", ")", ";", "double", "maxYMin", "=", "Math", ".", "min", "(", "maxY", ",", "envelope", ".", "getMaxY", "(", ")", ")", ";", "if", "(", "minXMax", "<=", "maxXMin", "&&", "minYMax", "<=", "maxYMin", ")", "{", "featureIds", ".", "add", "(", "featureRow", ".", "getId", "(", ")", ")", ";", "}", "}", "}", "}", "finally", "{", "featureCursor", ".", "close", "(", ")", ";", "}", "offset", "+=", "chunkLimit", ";", "}", "ManualFeatureQueryResults", "results", "=", "new", "ManualFeatureQueryResults", "(", "featureDao", ",", "featureIds", ")", ";", "return", "results", ";", "}"], "docstring": "Manually query for rows within the bounds\n\n@param minX min x\n@param minY min y\n@param maxX max x\n@param maxY max y\n@return results", "docstring_tokens": ["Manually", "query", "for", "rows", "within", "the", "bounds"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java#L254-L304", "partition": "test", "index": 5925, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java", "func_name": "ManualFeatureQuery.query", "original_string": "public ManualFeatureQueryResults query(BoundingBox boundingBox,\n                                           Projection projection) {\n        BoundingBox featureBoundingBox = featureDao.projectBoundingBox(\n                boundingBox, projection);\n        return query(featureBoundingBox);\n    }", "language": "java", "code": "public ManualFeatureQueryResults query(BoundingBox boundingBox,\n                                           Projection projection) {\n        BoundingBox featureBoundingBox = featureDao.projectBoundingBox(\n                boundingBox, projection);\n        return query(featureBoundingBox);\n    }", "code_tokens": ["public", "ManualFeatureQueryResults", "query", "(", "BoundingBox", "boundingBox", ",", "Projection", "projection", ")", "{", "BoundingBox", "featureBoundingBox", "=", "featureDao", ".", "projectBoundingBox", "(", "boundingBox", ",", "projection", ")", ";", "return", "query", "(", "featureBoundingBox", ")", ";", "}"], "docstring": "Manually query for rows within the bounding box in the provided\nprojection\n\n@param boundingBox bounding box\n@param projection  projection\n@return results", "docstring_tokens": ["Manually", "query", "for", "rows", "within", "the", "bounding", "box", "in", "the", "provided", "projection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/ManualFeatureQuery.java#L192-L197", "partition": "test", "index": 5922, "time": "2018-08-08 16:31:01"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java", "func_name": "FeatureIndexManager.getBoundingBox", "original_string": "public BoundingBox getBoundingBox() {\n        BoundingBox bounds = null;\n        switch (getIndexedType()) {\n            case GEOPACKAGE:\n                bounds = featureTableIndex.getBoundingBox();\n                break;\n            case METADATA:\n                bounds = featureIndexer.getBoundingBox();\n                break;\n            case RTREE:\n                bounds = rTreeIndexTableDao.getBoundingBox();\n                break;\n            default:\n                bounds = manualFeatureQuery.getBoundingBox();\n        }\n        return bounds;\n    }", "language": "java", "code": "public BoundingBox getBoundingBox() {\n        BoundingBox bounds = null;\n        switch (getIndexedType()) {\n            case GEOPACKAGE:\n                bounds = featureTableIndex.getBoundingBox();\n                break;\n            case METADATA:\n                bounds = featureIndexer.getBoundingBox();\n                break;\n            case RTREE:\n                bounds = rTreeIndexTableDao.getBoundingBox();\n                break;\n            default:\n                bounds = manualFeatureQuery.getBoundingBox();\n        }\n        return bounds;\n    }", "code_tokens": ["public", "BoundingBox", "getBoundingBox", "(", ")", "{", "BoundingBox", "bounds", "=", "null", ";", "switch", "(", "getIndexedType", "(", ")", ")", "{", "case", "GEOPACKAGE", ":", "bounds", "=", "featureTableIndex", ".", "getBoundingBox", "(", ")", ";", "break", ";", "case", "METADATA", ":", "bounds", "=", "featureIndexer", ".", "getBoundingBox", "(", ")", ";", "break", ";", "case", "RTREE", ":", "bounds", "=", "rTreeIndexTableDao", ".", "getBoundingBox", "(", ")", ";", "break", ";", "default", ":", "bounds", "=", "manualFeatureQuery", ".", "getBoundingBox", "(", ")", ";", "}", "return", "bounds", ";", "}"], "docstring": "Query for the feature index bounds\n\n@return bounding box", "docstring_tokens": ["Query", "for", "the", "feature", "index", "bounds"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/index/FeatureIndexManager.java#L770-L786", "partition": "test", "index": 6099, "time": "2018-08-13 18:15:08"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/GeoPackageConnection.java", "func_name": "GeoPackageConnection.wrapQuery", "original_string": "public CursorResult wrapQuery(String sql,\n                                  String[] selectionArgs) {\n        return new CursorResult(rawQuery(sql, selectionArgs));\n    }", "language": "java", "code": "public CursorResult wrapQuery(String sql,\n                                  String[] selectionArgs) {\n        return new CursorResult(rawQuery(sql, selectionArgs));\n    }", "code_tokens": ["public", "CursorResult", "wrapQuery", "(", "String", "sql", ",", "String", "[", "]", "selectionArgs", ")", "{", "return", "new", "CursorResult", "(", "rawQuery", "(", "sql", ",", "selectionArgs", ")", ")", ";", "}"], "docstring": "Perform the query and wrap as a result\n\n@param sql           sql statement\n@param selectionArgs selection arguments\n@return result\n@since 3.1.0", "docstring_tokens": ["Perform", "the", "query", "and", "wrap", "as", "a", "result"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/GeoPackageConnection.java#L247-L250", "partition": "test", "index": 5888, "time": "2018-08-20 15:07:23"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java", "func_name": "RTreeIndexTableDao.rawQuery", "original_string": "public UserCustomCursor rawQuery(String sql, String[] selectionArgs) {\n        validateRTree();\n\n        Cursor cursor = database.rawQuery(sql, selectionArgs);\n        UserCustomCursor customCursor = new UserCustomCursor(getTable(), cursor);\n        return customCursor;\n    }", "language": "java", "code": "public UserCustomCursor rawQuery(String sql, String[] selectionArgs) {\n        validateRTree();\n\n        Cursor cursor = database.rawQuery(sql, selectionArgs);\n        UserCustomCursor customCursor = new UserCustomCursor(getTable(), cursor);\n        return customCursor;\n    }", "code_tokens": ["public", "UserCustomCursor", "rawQuery", "(", "String", "sql", ",", "String", "[", "]", "selectionArgs", ")", "{", "validateRTree", "(", ")", ";", "Cursor", "cursor", "=", "database", ".", "rawQuery", "(", "sql", ",", "selectionArgs", ")", ";", "UserCustomCursor", "customCursor", "=", "new", "UserCustomCursor", "(", "getTable", "(", ")", ",", "cursor", ")", ";", "return", "customCursor", ";", "}"], "docstring": "Perform a raw query\n\n@param sql           sql statement\n@param selectionArgs selection arguments\n@return result cursor", "docstring_tokens": ["Perform", "a", "raw", "query"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/RTreeIndexTableDao.java#L211-L217", "partition": "test", "index": 5916, "time": "2018-08-27 14:07:57"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/db/GeoPackageDatabase.java", "func_name": "GeoPackageDatabase.openOrGetBindingsDb", "original_string": "public org.sqlite.database.sqlite.SQLiteDatabase openOrGetBindingsDb() {\n        if (bindingsDb == null) {\n            synchronized (db) {\n                if (bindingsDb == null) {\n                    System.loadLibrary(\"sqliteX\");\n                    bindingsDb = org.sqlite.database.sqlite.SQLiteDatabase.openDatabase(db.getPath(), null, org.sqlite.database.sqlite.SQLiteDatabase.OPEN_READWRITE);\n                }\n            }\n        }\n        return bindingsDb;\n    }", "language": "java", "code": "public org.sqlite.database.sqlite.SQLiteDatabase openOrGetBindingsDb() {\n        if (bindingsDb == null) {\n            synchronized (db) {\n                if (bindingsDb == null) {\n                    System.loadLibrary(\"sqliteX\");\n                    bindingsDb = org.sqlite.database.sqlite.SQLiteDatabase.openDatabase(db.getPath(), null, org.sqlite.database.sqlite.SQLiteDatabase.OPEN_READWRITE);\n                }\n            }\n        }\n        return bindingsDb;\n    }", "code_tokens": ["public", "org", ".", "sqlite", ".", "database", ".", "sqlite", ".", "SQLiteDatabase", "openOrGetBindingsDb", "(", ")", "{", "if", "(", "bindingsDb", "==", "null", ")", "{", "synchronized", "(", "db", ")", "{", "if", "(", "bindingsDb", "==", "null", ")", "{", "System", ".", "loadLibrary", "(", "\"sqliteX\"", ")", ";", "bindingsDb", "=", "org", ".", "sqlite", ".", "database", ".", "sqlite", ".", "SQLiteDatabase", ".", "openDatabase", "(", "db", ".", "getPath", "(", ")", ",", "null", ",", "org", ".", "sqlite", ".", "database", ".", "sqlite", ".", "SQLiteDatabase", ".", "OPEN_READWRITE", ")", ";", "}", "}", "}", "return", "bindingsDb", ";", "}"], "docstring": "Open or get a connection using the SQLite Android Bindings connection\n\n@return bindings connection", "docstring_tokens": ["Open", "or", "get", "a", "connection", "using", "the", "SQLite", "Android", "Bindings", "connection"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/db/GeoPackageDatabase.java#L49-L59", "partition": "test", "index": 5906, "time": "2018-08-27 14:07:57"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconRow.java", "func_name": "IconRow.setHeight", "original_string": "public void setHeight(Double height) {\n        if (height != null && height < 0.0) {\n            throw new GeoPackageException(\n                    \"Height must be greater than or equal to 0.0, invalid value: \"\n                            + height);\n        }\n        setValue(getHeightColumnIndex(), height);\n    }", "language": "java", "code": "public void setHeight(Double height) {\n        if (height != null && height < 0.0) {\n            throw new GeoPackageException(\n                    \"Height must be greater than or equal to 0.0, invalid value: \"\n                            + height);\n        }\n        setValue(getHeightColumnIndex(), height);\n    }", "code_tokens": ["public", "void", "setHeight", "(", "Double", "height", ")", "{", "if", "(", "height", "!=", "null", "&&", "height", "<", "0.0", ")", "{", "throw", "new", "GeoPackageException", "(", "\"Height must be greater than or equal to 0.0, invalid value: \"", "+", "height", ")", ";", "}", "setValue", "(", "getHeightColumnIndex", "(", ")", ",", "height", ")", ";", "}"], "docstring": "Set the height\n\n@param height Icon display height, when null use actual icon height", "docstring_tokens": ["Set", "the", "height"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconRow.java#L221-L228", "partition": "test", "index": 6079, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/Icons.java", "func_name": "Icons.setIcon", "original_string": "public void setIcon(IconRow iconRow, GeometryType geometryType) {\n        if (geometryType != null) {\n            if (iconRow != null) {\n                icons.put(geometryType, iconRow);\n            } else {\n                icons.remove(geometryType);\n            }\n        } else {\n            defaultIcon = iconRow;\n        }\n    }", "language": "java", "code": "public void setIcon(IconRow iconRow, GeometryType geometryType) {\n        if (geometryType != null) {\n            if (iconRow != null) {\n                icons.put(geometryType, iconRow);\n            } else {\n                icons.remove(geometryType);\n            }\n        } else {\n            defaultIcon = iconRow;\n        }\n    }", "code_tokens": ["public", "void", "setIcon", "(", "IconRow", "iconRow", ",", "GeometryType", "geometryType", ")", "{", "if", "(", "geometryType", "!=", "null", ")", "{", "if", "(", "iconRow", "!=", "null", ")", "{", "icons", ".", "put", "(", "geometryType", ",", "iconRow", ")", ";", "}", "else", "{", "icons", ".", "remove", "(", "geometryType", ")", ";", "}", "}", "else", "{", "defaultIcon", "=", "iconRow", ";", "}", "}"], "docstring": "Set the icon for the geometry type\n\n@param iconRow      icon row\n@param geometryType geometry type", "docstring_tokens": ["Set", "the", "icon", "for", "the", "geometry", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/Icons.java#L44-L54", "partition": "test", "index": 5904, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleRow.java", "func_name": "StyleRow.createColor", "original_string": "private Color createColor(String hexColor, Double opacity) {\n        Color color = null;\n        if (hexColor != null || opacity != null) {\n            color = new Color();\n            if (hexColor != null) {\n                color.setColor(hexColor);\n            }\n            if (opacity != null) {\n                color.setOpacity(opacity.floatValue());\n            }\n        }\n        return color;\n    }", "language": "java", "code": "private Color createColor(String hexColor, Double opacity) {\n        Color color = null;\n        if (hexColor != null || opacity != null) {\n            color = new Color();\n            if (hexColor != null) {\n                color.setColor(hexColor);\n            }\n            if (opacity != null) {\n                color.setOpacity(opacity.floatValue());\n            }\n        }\n        return color;\n    }", "code_tokens": ["private", "Color", "createColor", "(", "String", "hexColor", ",", "Double", "opacity", ")", "{", "Color", "color", "=", "null", ";", "if", "(", "hexColor", "!=", "null", "||", "opacity", "!=", "null", ")", "{", "color", "=", "new", "Color", "(", ")", ";", "if", "(", "hexColor", "!=", "null", ")", "{", "color", ".", "setColor", "(", "hexColor", ")", ";", "}", "if", "(", "opacity", "!=", "null", ")", "{", "color", ".", "setOpacity", "(", "opacity", ".", "floatValue", "(", ")", ")", ";", "}", "}", "return", "color", ";", "}"], "docstring": "Create a color from the hex color and opacity\n\n@param hexColor hex color\n@param opacity  opacity\n@return color or null", "docstring_tokens": ["Create", "a", "color", "from", "the", "hex", "color", "and", "opacity"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleRow.java#L502-L514", "partition": "test", "index": 6086, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleMappingRow.java", "func_name": "StyleMappingRow.getGeometryType", "original_string": "public GeometryType getGeometryType() {\n        GeometryType geometryType = null;\n        String geometryTypeName = getGeometryTypeName();\n        if (geometryTypeName != null) {\n            geometryType = GeometryType.fromName(geometryTypeName);\n        }\n        return geometryType;\n    }", "language": "java", "code": "public GeometryType getGeometryType() {\n        GeometryType geometryType = null;\n        String geometryTypeName = getGeometryTypeName();\n        if (geometryTypeName != null) {\n            geometryType = GeometryType.fromName(geometryTypeName);\n        }\n        return geometryType;\n    }", "code_tokens": ["public", "GeometryType", "getGeometryType", "(", ")", "{", "GeometryType", "geometryType", "=", "null", ";", "String", "geometryTypeName", "=", "getGeometryTypeName", "(", ")", ";", "if", "(", "geometryTypeName", "!=", "null", ")", "{", "geometryType", "=", "GeometryType", ".", "fromName", "(", "geometryTypeName", ")", ";", "}", "return", "geometryType", ";", "}"], "docstring": "Get the geometry type\n\n@return geometry type", "docstring_tokens": ["Get", "the", "geometry", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleMappingRow.java#L83-L90", "partition": "test", "index": 6104, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconRow.java", "func_name": "IconRow.setWidth", "original_string": "public void setWidth(Double width) {\n        if (width != null && width < 0.0) {\n            throw new GeoPackageException(\n                    \"Width must be greater than or equal to 0.0, invalid value: \"\n                            + width);\n        }\n        setValue(getWidthColumnIndex(), width);\n    }", "language": "java", "code": "public void setWidth(Double width) {\n        if (width != null && width < 0.0) {\n            throw new GeoPackageException(\n                    \"Width must be greater than or equal to 0.0, invalid value: \"\n                            + width);\n        }\n        setValue(getWidthColumnIndex(), width);\n    }", "code_tokens": ["public", "void", "setWidth", "(", "Double", "width", ")", "{", "if", "(", "width", "!=", "null", "&&", "width", "<", "0.0", ")", "{", "throw", "new", "GeoPackageException", "(", "\"Width must be greater than or equal to 0.0, invalid value: \"", "+", "width", ")", ";", "}", "setValue", "(", "getWidthColumnIndex", "(", ")", ",", "width", ")", ";", "}"], "docstring": "Set the width\n\n@param width Icon display width, when null use actual icon width", "docstring_tokens": ["Set", "the", "width"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconRow.java#L164-L171", "partition": "test", "index": 6078, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleRow.java", "func_name": "StyleRow.validateColor", "original_string": "private String validateColor(String color) {\n        String validated = color;\n        if (color != null) {\n            if (!color.startsWith(\"#\")) {\n                validated = \"#\" + color;\n            }\n            if (!colorPattern.matcher(validated).matches()) {\n                throw new GeoPackageException(\n                        \"Color must be in hex format #RRGGBB or #RGB, invalid value: \"\n                                + color);\n            }\n            validated = validated.toUpperCase();\n        }\n        return validated;\n    }", "language": "java", "code": "private String validateColor(String color) {\n        String validated = color;\n        if (color != null) {\n            if (!color.startsWith(\"#\")) {\n                validated = \"#\" + color;\n            }\n            if (!colorPattern.matcher(validated).matches()) {\n                throw new GeoPackageException(\n                        \"Color must be in hex format #RRGGBB or #RGB, invalid value: \"\n                                + color);\n            }\n            validated = validated.toUpperCase();\n        }\n        return validated;\n    }", "code_tokens": ["private", "String", "validateColor", "(", "String", "color", ")", "{", "String", "validated", "=", "color", ";", "if", "(", "color", "!=", "null", ")", "{", "if", "(", "!", "color", ".", "startsWith", "(", "\"#\"", ")", ")", "{", "validated", "=", "\"#\"", "+", "color", ";", "}", "if", "(", "!", "colorPattern", ".", "matcher", "(", "validated", ")", ".", "matches", "(", ")", ")", "{", "throw", "new", "GeoPackageException", "(", "\"Color must be in hex format #RRGGBB or #RGB, invalid value: \"", "+", "color", ")", ";", "}", "validated", "=", "validated", ".", "toUpperCase", "(", ")", ";", "}", "return", "validated", ";", "}"], "docstring": "Validate and adjust the color value\n\n@param color color", "docstring_tokens": ["Validate", "and", "adjust", "the", "color", "value"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleRow.java#L466-L480", "partition": "test", "index": 6085, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/Icons.java", "func_name": "Icons.getIcon", "original_string": "public IconRow getIcon(GeometryType geometryType) {\n\n        IconRow iconRow = null;\n\n        if (geometryType != null && !icons.isEmpty()) {\n            List<GeometryType> geometryTypes = GeometryUtils\n                    .parentHierarchy(geometryType);\n            geometryTypes.add(0, geometryType);\n            for (GeometryType type : geometryTypes) {\n                iconRow = icons.get(type);\n                if (iconRow != null) {\n                    break;\n                }\n            }\n        }\n\n        if (iconRow == null) {\n            iconRow = defaultIcon;\n        }\n\n        if (iconRow == null && geometryType == null && icons.size() == 1) {\n            iconRow = icons.values().iterator().next();\n        }\n\n        return iconRow;\n    }", "language": "java", "code": "public IconRow getIcon(GeometryType geometryType) {\n\n        IconRow iconRow = null;\n\n        if (geometryType != null && !icons.isEmpty()) {\n            List<GeometryType> geometryTypes = GeometryUtils\n                    .parentHierarchy(geometryType);\n            geometryTypes.add(0, geometryType);\n            for (GeometryType type : geometryTypes) {\n                iconRow = icons.get(type);\n                if (iconRow != null) {\n                    break;\n                }\n            }\n        }\n\n        if (iconRow == null) {\n            iconRow = defaultIcon;\n        }\n\n        if (iconRow == null && geometryType == null && icons.size() == 1) {\n            iconRow = icons.values().iterator().next();\n        }\n\n        return iconRow;\n    }", "code_tokens": ["public", "IconRow", "getIcon", "(", "GeometryType", "geometryType", ")", "{", "IconRow", "iconRow", "=", "null", ";", "if", "(", "geometryType", "!=", "null", "&&", "!", "icons", ".", "isEmpty", "(", ")", ")", "{", "List", "<", "GeometryType", ">", "geometryTypes", "=", "GeometryUtils", ".", "parentHierarchy", "(", "geometryType", ")", ";", "geometryTypes", ".", "add", "(", "0", ",", "geometryType", ")", ";", "for", "(", "GeometryType", "type", ":", "geometryTypes", ")", "{", "iconRow", "=", "icons", ".", "get", "(", "type", ")", ";", "if", "(", "iconRow", "!=", "null", ")", "{", "break", ";", "}", "}", "}", "if", "(", "iconRow", "==", "null", ")", "{", "iconRow", "=", "defaultIcon", ";", "}", "if", "(", "iconRow", "==", "null", "&&", "geometryType", "==", "null", "&&", "icons", ".", "size", "(", ")", "==", "1", ")", "{", "iconRow", "=", "icons", ".", "values", "(", ")", ".", "iterator", "(", ")", ".", "next", "(", ")", ";", "}", "return", "iconRow", ";", "}"], "docstring": "Get the icon for the geometry type\n\n@param geometryType geometry type\n@return icon", "docstring_tokens": ["Get", "the", "icon", "for", "the", "geometry", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/Icons.java#L89-L114", "partition": "test", "index": 5905, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleMappingRow.java", "func_name": "StyleMappingRow.setGeometryType", "original_string": "public void setGeometryType(GeometryType geometryType) {\n        String geometryTypeName = null;\n        if (geometryType != null) {\n            geometryTypeName = geometryType.getName();\n        }\n        setValue(getGeometryTypeNameColumnIndex(), geometryTypeName);\n    }", "language": "java", "code": "public void setGeometryType(GeometryType geometryType) {\n        String geometryTypeName = null;\n        if (geometryType != null) {\n            geometryTypeName = geometryType.getName();\n        }\n        setValue(getGeometryTypeNameColumnIndex(), geometryTypeName);\n    }", "code_tokens": ["public", "void", "setGeometryType", "(", "GeometryType", "geometryType", ")", "{", "String", "geometryTypeName", "=", "null", ";", "if", "(", "geometryType", "!=", "null", ")", "{", "geometryTypeName", "=", "geometryType", ".", "getName", "(", ")", ";", "}", "setValue", "(", "getGeometryTypeNameColumnIndex", "(", ")", ",", "geometryTypeName", ")", ";", "}"], "docstring": "Set the geometry type\n\n@param geometryType geometry type", "docstring_tokens": ["Set", "the", "geometry", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleMappingRow.java#L97-L103", "partition": "test", "index": 6105, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleDao.java", "func_name": "StyleDao.queryForRow", "original_string": "public StyleRow queryForRow(StyleMappingRow styleMappingRow) {\n        StyleRow styleRow = null;\n\n        AttributesRow attributesRow = queryForIdRow(styleMappingRow\n                .getRelatedId());\n        if (attributesRow != null) {\n            styleRow = getRow(attributesRow);\n        }\n\n        return styleRow;\n    }", "language": "java", "code": "public StyleRow queryForRow(StyleMappingRow styleMappingRow) {\n        StyleRow styleRow = null;\n\n        AttributesRow attributesRow = queryForIdRow(styleMappingRow\n                .getRelatedId());\n        if (attributesRow != null) {\n            styleRow = getRow(attributesRow);\n        }\n\n        return styleRow;\n    }", "code_tokens": ["public", "StyleRow", "queryForRow", "(", "StyleMappingRow", "styleMappingRow", ")", "{", "StyleRow", "styleRow", "=", "null", ";", "AttributesRow", "attributesRow", "=", "queryForIdRow", "(", "styleMappingRow", ".", "getRelatedId", "(", ")", ")", ";", "if", "(", "attributesRow", "!=", "null", ")", "{", "styleRow", "=", "getRow", "(", "attributesRow", ")", ";", "}", "return", "styleRow", ";", "}"], "docstring": "Query for the style row from a style mapping row\n\n@param styleMappingRow style mapping row\n@return style row", "docstring_tokens": ["Query", "for", "the", "style", "row", "from", "a", "style", "mapping", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleDao.java#L67-L77", "partition": "test", "index": 5881, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureTableStyles.java", "func_name": "FeatureTableStyles.getCachedTableStyles", "original_string": "public Styles getCachedTableStyles() {\n\n        Styles styles = cachedTableFeatureStyles.getStyles();\n\n        if (styles == null) {\n            synchronized (cachedTableFeatureStyles) {\n                styles = cachedTableFeatureStyles.getStyles();\n                if (styles == null) {\n                    styles = getTableStyles();\n                    if (styles == null) {\n                        styles = new Styles();\n                    }\n                    cachedTableFeatureStyles.setStyles(styles);\n                }\n            }\n        }\n\n        if (styles.isEmpty()) {\n            styles = null;\n        }\n\n        return styles;\n    }", "language": "java", "code": "public Styles getCachedTableStyles() {\n\n        Styles styles = cachedTableFeatureStyles.getStyles();\n\n        if (styles == null) {\n            synchronized (cachedTableFeatureStyles) {\n                styles = cachedTableFeatureStyles.getStyles();\n                if (styles == null) {\n                    styles = getTableStyles();\n                    if (styles == null) {\n                        styles = new Styles();\n                    }\n                    cachedTableFeatureStyles.setStyles(styles);\n                }\n            }\n        }\n\n        if (styles.isEmpty()) {\n            styles = null;\n        }\n\n        return styles;\n    }", "code_tokens": ["public", "Styles", "getCachedTableStyles", "(", ")", "{", "Styles", "styles", "=", "cachedTableFeatureStyles", ".", "getStyles", "(", ")", ";", "if", "(", "styles", "==", "null", ")", "{", "synchronized", "(", "cachedTableFeatureStyles", ")", "{", "styles", "=", "cachedTableFeatureStyles", ".", "getStyles", "(", ")", ";", "if", "(", "styles", "==", "null", ")", "{", "styles", "=", "getTableStyles", "(", ")", ";", "if", "(", "styles", "==", "null", ")", "{", "styles", "=", "new", "Styles", "(", ")", ";", "}", "cachedTableFeatureStyles", ".", "setStyles", "(", "styles", ")", ";", "}", "}", "}", "if", "(", "styles", ".", "isEmpty", "(", ")", ")", "{", "styles", "=", "null", ";", "}", "return", "styles", ";", "}"], "docstring": "Get the cached table styles, querying and caching if needed\n\n@return cached table styles", "docstring_tokens": ["Get", "the", "cached", "table", "styles", "querying", "and", "caching", "if", "needed"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureTableStyles.java#L306-L328", "partition": "test", "index": 6075, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setStyles", "original_string": "public void setStyles(FeatureRow featureRow, Styles styles) {\n        setStyles(featureRow.getTable().getTableName(), featureRow.getId(),\n                styles);\n    }", "language": "java", "code": "public void setStyles(FeatureRow featureRow, Styles styles) {\n        setStyles(featureRow.getTable().getTableName(), featureRow.getId(),\n                styles);\n    }", "code_tokens": ["public", "void", "setStyles", "(", "FeatureRow", "featureRow", ",", "Styles", "styles", ")", "{", "setStyles", "(", "featureRow", ".", "getTable", "(", ")", ".", "getTableName", "(", ")", ",", "featureRow", ".", "getId", "(", ")", ",", "styles", ")", ";", "}"], "docstring": "Set the styles for the feature row\n\n@param featureRow feature row\n@param styles     styles", "docstring_tokens": ["Set", "the", "styles", "for", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1077-L1080", "partition": "test", "index": 6041, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setFeatureStyles", "original_string": "public void setFeatureStyles(String featureTable, long featureId,\n                                 FeatureStyles featureStyles) {\n        if (featureStyles != null) {\n            setStyles(featureTable, featureId, featureStyles.getStyles());\n            setIcons(featureTable, featureId, featureStyles.getIcons());\n        } else {\n            deleteStyles(featureTable, featureId);\n            deleteIcons(featureTable, featureId);\n        }\n    }", "language": "java", "code": "public void setFeatureStyles(String featureTable, long featureId,\n                                 FeatureStyles featureStyles) {\n        if (featureStyles != null) {\n            setStyles(featureTable, featureId, featureStyles.getStyles());\n            setIcons(featureTable, featureId, featureStyles.getIcons());\n        } else {\n            deleteStyles(featureTable, featureId);\n            deleteIcons(featureTable, featureId);\n        }\n    }", "code_tokens": ["public", "void", "setFeatureStyles", "(", "String", "featureTable", ",", "long", "featureId", ",", "FeatureStyles", "featureStyles", ")", "{", "if", "(", "featureStyles", "!=", "null", ")", "{", "setStyles", "(", "featureTable", ",", "featureId", ",", "featureStyles", ".", "getStyles", "(", ")", ")", ";", "setIcons", "(", "featureTable", ",", "featureId", ",", "featureStyles", ".", "getIcons", "(", ")", ")", ";", "}", "else", "{", "deleteStyles", "(", "featureTable", ",", "featureId", ")", ";", "deleteIcons", "(", "featureTable", ",", "featureId", ")", ";", "}", "}"], "docstring": "Set the feature styles for the feature table and feature id\n\n@param featureTable  feature table\n@param featureId     feature id\n@param featureStyles feature styles", "docstring_tokens": ["Set", "the", "feature", "styles", "for", "the", "feature", "table", "and", "feature", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L991-L1000", "partition": "test", "index": 6040, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setFeatureStyles", "original_string": "public void setFeatureStyles(FeatureRow featureRow,\n                                 FeatureStyles featureStyles) {\n        setFeatureStyles(featureRow.getTable().getTableName(),\n                featureRow.getId(), featureStyles);\n    }", "language": "java", "code": "public void setFeatureStyles(FeatureRow featureRow,\n                                 FeatureStyles featureStyles) {\n        setFeatureStyles(featureRow.getTable().getTableName(),\n                featureRow.getId(), featureStyles);\n    }", "code_tokens": ["public", "void", "setFeatureStyles", "(", "FeatureRow", "featureRow", ",", "FeatureStyles", "featureStyles", ")", "{", "setFeatureStyles", "(", "featureRow", ".", "getTable", "(", ")", ".", "getTableName", "(", ")", ",", "featureRow", ".", "getId", "(", ")", ",", "featureStyles", ")", ";", "}"], "docstring": "Set the feature styles for the feature row\n\n@param featureRow    feature row\n@param featureStyles feature styles", "docstring_tokens": ["Set", "the", "feature", "styles", "for", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L978-L982", "partition": "test", "index": 6039, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setTableIcons", "original_string": "public void setTableIcons(String featureTable, Icons icons) {\n\n        deleteTableIcons(featureTable);\n\n        if (icons != null) {\n\n            if (icons.getDefault() != null) {\n                setTableIconDefault(featureTable, icons.getDefault());\n            }\n\n            for (Entry<GeometryType, IconRow> icon : icons.getIcons()\n                    .entrySet()) {\n                setTableIcon(featureTable, icon.getKey(), icon.getValue());\n            }\n\n        }\n\n    }", "language": "java", "code": "public void setTableIcons(String featureTable, Icons icons) {\n\n        deleteTableIcons(featureTable);\n\n        if (icons != null) {\n\n            if (icons.getDefault() != null) {\n                setTableIconDefault(featureTable, icons.getDefault());\n            }\n\n            for (Entry<GeometryType, IconRow> icon : icons.getIcons()\n                    .entrySet()) {\n                setTableIcon(featureTable, icon.getKey(), icon.getValue());\n            }\n\n        }\n\n    }", "code_tokens": ["public", "void", "setTableIcons", "(", "String", "featureTable", ",", "Icons", "icons", ")", "{", "deleteTableIcons", "(", "featureTable", ")", ";", "if", "(", "icons", "!=", "null", ")", "{", "if", "(", "icons", ".", "getDefault", "(", ")", "!=", "null", ")", "{", "setTableIconDefault", "(", "featureTable", ",", "icons", ".", "getDefault", "(", ")", ")", ";", "}", "for", "(", "Entry", "<", "GeometryType", ",", "IconRow", ">", "icon", ":", "icons", ".", "getIcons", "(", ")", ".", "entrySet", "(", ")", ")", "{", "setTableIcon", "(", "featureTable", ",", "icon", ".", "getKey", "(", ")", ",", "icon", ".", "getValue", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Set the feature table default icons\n\n@param featureTable feature table\n@param icons        default icons", "docstring_tokens": ["Set", "the", "feature", "table", "default", "icons"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L894-L911", "partition": "test", "index": 6038, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setTableStyles", "original_string": "public void setTableStyles(String featureTable, Styles styles) {\n\n        deleteTableStyles(featureTable);\n\n        if (styles != null) {\n\n            if (styles.getDefault() != null) {\n                setTableStyleDefault(featureTable, styles.getDefault());\n            }\n\n            for (Entry<GeometryType, StyleRow> style : styles.getStyles()\n                    .entrySet()) {\n                setTableStyle(featureTable, style.getKey(), style.getValue());\n            }\n\n        }\n    }", "language": "java", "code": "public void setTableStyles(String featureTable, Styles styles) {\n\n        deleteTableStyles(featureTable);\n\n        if (styles != null) {\n\n            if (styles.getDefault() != null) {\n                setTableStyleDefault(featureTable, styles.getDefault());\n            }\n\n            for (Entry<GeometryType, StyleRow> style : styles.getStyles()\n                    .entrySet()) {\n                setTableStyle(featureTable, style.getKey(), style.getValue());\n            }\n\n        }\n    }", "code_tokens": ["public", "void", "setTableStyles", "(", "String", "featureTable", ",", "Styles", "styles", ")", "{", "deleteTableStyles", "(", "featureTable", ")", ";", "if", "(", "styles", "!=", "null", ")", "{", "if", "(", "styles", ".", "getDefault", "(", ")", "!=", "null", ")", "{", "setTableStyleDefault", "(", "featureTable", ",", "styles", ".", "getDefault", "(", ")", ")", ";", "}", "for", "(", "Entry", "<", "GeometryType", ",", "StyleRow", ">", "style", ":", "styles", ".", "getStyles", "(", ")", ".", "entrySet", "(", ")", ")", "{", "setTableStyle", "(", "featureTable", ",", "style", ".", "getKey", "(", ")", ",", "style", ".", "getValue", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Set the feature table default styles\n\n@param featureTable feature table\n@param styles       default styles", "docstring_tokens": ["Set", "the", "feature", "table", "default", "styles"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L800-L816", "partition": "test", "index": 6037, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setTableFeatureStyles", "original_string": "public void setTableFeatureStyles(String featureTable,\n                                      FeatureStyles featureStyles) {\n        if (featureStyles != null) {\n            setTableStyles(featureTable, featureStyles.getStyles());\n            setTableIcons(featureTable, featureStyles.getIcons());\n        } else {\n            deleteTableFeatureStyles(featureTable);\n        }\n    }", "language": "java", "code": "public void setTableFeatureStyles(String featureTable,\n                                      FeatureStyles featureStyles) {\n        if (featureStyles != null) {\n            setTableStyles(featureTable, featureStyles.getStyles());\n            setTableIcons(featureTable, featureStyles.getIcons());\n        } else {\n            deleteTableFeatureStyles(featureTable);\n        }\n    }", "code_tokens": ["public", "void", "setTableFeatureStyles", "(", "String", "featureTable", ",", "FeatureStyles", "featureStyles", ")", "{", "if", "(", "featureStyles", "!=", "null", ")", "{", "setTableStyles", "(", "featureTable", ",", "featureStyles", ".", "getStyles", "(", ")", ")", ";", "setTableIcons", "(", "featureTable", ",", "featureStyles", ".", "getIcons", "(", ")", ")", ";", "}", "else", "{", "deleteTableFeatureStyles", "(", "featureTable", ")", ";", "}", "}"], "docstring": "Set the feature table default feature styles\n\n@param featureTable  feature table\n@param featureStyles default feature styles", "docstring_tokens": ["Set", "the", "feature", "table", "default", "feature", "styles"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L774-L782", "partition": "test", "index": 6036, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getIcons", "original_string": "private Icons getIcons(long featureId, StyleMappingDao mappingDao) {\n\n        Icons icons = null;\n\n        if (mappingDao != null) {\n\n            IconDao iconDao = getIconDao();\n            if (iconDao != null) {\n\n                List<StyleMappingRow> styleMappingRows = mappingDao\n                        .queryByBaseFeatureId(featureId);\n                if (!styleMappingRows.isEmpty()) {\n\n                    for (StyleMappingRow styleMappingRow : styleMappingRows) {\n\n                        IconRow iconRow = iconDao.queryForRow(styleMappingRow);\n                        if (iconRow != null) {\n                            if (icons == null) {\n                                icons = new Icons();\n                            }\n                            icons.setIcon(iconRow,\n                                    styleMappingRow.getGeometryType());\n                        }\n                    }\n                }\n            }\n        }\n\n        return icons;\n    }", "language": "java", "code": "private Icons getIcons(long featureId, StyleMappingDao mappingDao) {\n\n        Icons icons = null;\n\n        if (mappingDao != null) {\n\n            IconDao iconDao = getIconDao();\n            if (iconDao != null) {\n\n                List<StyleMappingRow> styleMappingRows = mappingDao\n                        .queryByBaseFeatureId(featureId);\n                if (!styleMappingRows.isEmpty()) {\n\n                    for (StyleMappingRow styleMappingRow : styleMappingRows) {\n\n                        IconRow iconRow = iconDao.queryForRow(styleMappingRow);\n                        if (iconRow != null) {\n                            if (icons == null) {\n                                icons = new Icons();\n                            }\n                            icons.setIcon(iconRow,\n                                    styleMappingRow.getGeometryType());\n                        }\n                    }\n                }\n            }\n        }\n\n        return icons;\n    }", "code_tokens": ["private", "Icons", "getIcons", "(", "long", "featureId", ",", "StyleMappingDao", "mappingDao", ")", "{", "Icons", "icons", "=", "null", ";", "if", "(", "mappingDao", "!=", "null", ")", "{", "IconDao", "iconDao", "=", "getIconDao", "(", ")", ";", "if", "(", "iconDao", "!=", "null", ")", "{", "List", "<", "StyleMappingRow", ">", "styleMappingRows", "=", "mappingDao", ".", "queryByBaseFeatureId", "(", "featureId", ")", ";", "if", "(", "!", "styleMappingRows", ".", "isEmpty", "(", ")", ")", "{", "for", "(", "StyleMappingRow", "styleMappingRow", ":", "styleMappingRows", ")", "{", "IconRow", "iconRow", "=", "iconDao", ".", "queryForRow", "(", "styleMappingRow", ")", ";", "if", "(", "iconRow", "!=", "null", ")", "{", "if", "(", "icons", "==", "null", ")", "{", "icons", "=", "new", "Icons", "(", ")", ";", "}", "icons", ".", "setIcon", "(", "iconRow", ",", "styleMappingRow", ".", "getGeometryType", "(", ")", ")", ";", "}", "}", "}", "}", "}", "return", "icons", ";", "}"], "docstring": "Get the icons for feature id from the icon mapping dao\n\n@param featureId  geometry feature id or feature table id\n@param mappingDao icon mapping dao\n@return icons", "docstring_tokens": ["Get", "the", "icons", "for", "feature", "id", "from", "the", "icon", "mapping", "dao"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L726-L755", "partition": "test", "index": 6035, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureTableStyles.java", "func_name": "FeatureTableStyles.getCachedTableIcons", "original_string": "public Icons getCachedTableIcons() {\n\n        Icons icons = cachedTableFeatureStyles.getIcons();\n\n        if (icons == null) {\n            synchronized (cachedTableFeatureStyles) {\n                icons = cachedTableFeatureStyles.getIcons();\n                if (icons == null) {\n                    icons = getTableIcons();\n                    if (icons == null) {\n                        icons = new Icons();\n                    }\n                    cachedTableFeatureStyles.setIcons(icons);\n                }\n            }\n        }\n\n        if (icons.isEmpty()) {\n            icons = null;\n        }\n\n        return icons;\n    }", "language": "java", "code": "public Icons getCachedTableIcons() {\n\n        Icons icons = cachedTableFeatureStyles.getIcons();\n\n        if (icons == null) {\n            synchronized (cachedTableFeatureStyles) {\n                icons = cachedTableFeatureStyles.getIcons();\n                if (icons == null) {\n                    icons = getTableIcons();\n                    if (icons == null) {\n                        icons = new Icons();\n                    }\n                    cachedTableFeatureStyles.setIcons(icons);\n                }\n            }\n        }\n\n        if (icons.isEmpty()) {\n            icons = null;\n        }\n\n        return icons;\n    }", "code_tokens": ["public", "Icons", "getCachedTableIcons", "(", ")", "{", "Icons", "icons", "=", "cachedTableFeatureStyles", ".", "getIcons", "(", ")", ";", "if", "(", "icons", "==", "null", ")", "{", "synchronized", "(", "cachedTableFeatureStyles", ")", "{", "icons", "=", "cachedTableFeatureStyles", ".", "getIcons", "(", ")", ";", "if", "(", "icons", "==", "null", ")", "{", "icons", "=", "getTableIcons", "(", ")", ";", "if", "(", "icons", "==", "null", ")", "{", "icons", "=", "new", "Icons", "(", ")", ";", "}", "cachedTableFeatureStyles", ".", "setIcons", "(", "icons", ")", ";", "}", "}", "}", "if", "(", "icons", ".", "isEmpty", "(", ")", ")", "{", "icons", "=", "null", ";", "}", "return", "icons", ";", "}"], "docstring": "Get the cached table icons, querying and caching if needed\n\n@return cached table icons", "docstring_tokens": ["Get", "the", "cached", "table", "icons", "querying", "and", "caching", "if", "needed"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureTableStyles.java#L363-L385", "partition": "test", "index": 6076, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getIcons", "original_string": "public Icons getIcons(FeatureRow featureRow) {\n        return getIcons(featureRow.getTable().getTableName(),\n                featureRow.getId());\n    }", "language": "java", "code": "public Icons getIcons(FeatureRow featureRow) {\n        return getIcons(featureRow.getTable().getTableName(),\n                featureRow.getId());\n    }", "code_tokens": ["public", "Icons", "getIcons", "(", "FeatureRow", "featureRow", ")", "{", "return", "getIcons", "(", "featureRow", ".", "getTable", "(", ")", ".", "getTableName", "(", ")", ",", "featureRow", ".", "getId", "(", ")", ")", ";", "}"], "docstring": "Get the icons for the feature row\n\n@param featureRow feature row\n@return icons or null", "docstring_tokens": ["Get", "the", "icons", "for", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L551-L554", "partition": "test", "index": 6033, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getStyles", "original_string": "public Styles getStyles(FeatureRow featureRow) {\n        return getStyles(featureRow.getTable().getTableName(),\n                featureRow.getId());\n    }", "language": "java", "code": "public Styles getStyles(FeatureRow featureRow) {\n        return getStyles(featureRow.getTable().getTableName(),\n                featureRow.getId());\n    }", "code_tokens": ["public", "Styles", "getStyles", "(", "FeatureRow", "featureRow", ")", "{", "return", "getStyles", "(", "featureRow", ".", "getTable", "(", ")", ".", "getTableName", "(", ")", ",", "featureRow", ".", "getId", "(", ")", ")", ";", "}"], "docstring": "Get the styles for the feature row\n\n@param featureRow feature row\n@return styles or null", "docstring_tokens": ["Get", "the", "styles", "for", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L416-L419", "partition": "test", "index": 6032, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getFeatureStyles", "original_string": "public FeatureStyles getFeatureStyles(String featureTable, long featureId) {\n\n        Styles styles = getStyles(featureTable, featureId);\n        Icons icons = getIcons(featureTable, featureId);\n\n        FeatureStyles featureStyles = null;\n        if (styles != null || icons != null) {\n            featureStyles = new FeatureStyles(styles, icons);\n        }\n\n        return featureStyles;\n    }", "language": "java", "code": "public FeatureStyles getFeatureStyles(String featureTable, long featureId) {\n\n        Styles styles = getStyles(featureTable, featureId);\n        Icons icons = getIcons(featureTable, featureId);\n\n        FeatureStyles featureStyles = null;\n        if (styles != null || icons != null) {\n            featureStyles = new FeatureStyles(styles, icons);\n        }\n\n        return featureStyles;\n    }", "code_tokens": ["public", "FeatureStyles", "getFeatureStyles", "(", "String", "featureTable", ",", "long", "featureId", ")", "{", "Styles", "styles", "=", "getStyles", "(", "featureTable", ",", "featureId", ")", ";", "Icons", "icons", "=", "getIcons", "(", "featureTable", ",", "featureId", ")", ";", "FeatureStyles", "featureStyles", "=", "null", ";", "if", "(", "styles", "!=", "null", "||", "icons", "!=", "null", ")", "{", "featureStyles", "=", "new", "FeatureStyles", "(", "styles", ",", "icons", ")", ";", "}", "return", "featureStyles", ";", "}"], "docstring": "Get the feature styles for the feature table and feature id\n\n@param featureTable feature table\n@param featureId    feature id\n@return feature styles or null", "docstring_tokens": ["Get", "the", "feature", "styles", "for", "the", "feature", "table", "and", "feature", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L317-L328", "partition": "test", "index": 6031, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getFeatureStyles", "original_string": "public FeatureStyles getFeatureStyles(FeatureRow featureRow) {\n        return getFeatureStyles(featureRow.getTable().getTableName(),\n                featureRow.getId());\n    }", "language": "java", "code": "public FeatureStyles getFeatureStyles(FeatureRow featureRow) {\n        return getFeatureStyles(featureRow.getTable().getTableName(),\n                featureRow.getId());\n    }", "code_tokens": ["public", "FeatureStyles", "getFeatureStyles", "(", "FeatureRow", "featureRow", ")", "{", "return", "getFeatureStyles", "(", "featureRow", ".", "getTable", "(", ")", ".", "getTableName", "(", ")", ",", "featureRow", ".", "getId", "(", ")", ")", ";", "}"], "docstring": "Get the feature styles for the feature row\n\n@param featureRow feature row\n@return feature styles or null", "docstring_tokens": ["Get", "the", "feature", "styles", "for", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L305-L308", "partition": "test", "index": 6030, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getTableIcon", "original_string": "public IconRow getTableIcon(String featureTable, GeometryType geometryType) {\n        IconRow iconRow = null;\n        Icons tableIcons = getTableIcons(featureTable);\n        if (tableIcons != null) {\n            iconRow = tableIcons.getIcon(geometryType);\n        }\n        return iconRow;\n    }", "language": "java", "code": "public IconRow getTableIcon(String featureTable, GeometryType geometryType) {\n        IconRow iconRow = null;\n        Icons tableIcons = getTableIcons(featureTable);\n        if (tableIcons != null) {\n            iconRow = tableIcons.getIcon(geometryType);\n        }\n        return iconRow;\n    }", "code_tokens": ["public", "IconRow", "getTableIcon", "(", "String", "featureTable", ",", "GeometryType", "geometryType", ")", "{", "IconRow", "iconRow", "=", "null", ";", "Icons", "tableIcons", "=", "getTableIcons", "(", "featureTable", ")", ";", "if", "(", "tableIcons", "!=", "null", ")", "{", "iconRow", "=", "tableIcons", ".", "getIcon", "(", "geometryType", ")", ";", "}", "return", "iconRow", ";", "}"], "docstring": "Get the icon of the feature table and geometry type\n\n@param featureTable feature table\n@param geometryType geometry type\n@return icon row", "docstring_tokens": ["Get", "the", "icon", "of", "the", "feature", "table", "and", "geometry", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L290-L297", "partition": "test", "index": 6029, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getTableIcons", "original_string": "public Icons getTableIcons(String featureTable) {\n        Icons icons = null;\n        Long id = contentsId.getId(featureTable);\n        if (id != null) {\n            icons = getTableIcons(featureTable, id);\n        }\n        return icons;\n    }", "language": "java", "code": "public Icons getTableIcons(String featureTable) {\n        Icons icons = null;\n        Long id = contentsId.getId(featureTable);\n        if (id != null) {\n            icons = getTableIcons(featureTable, id);\n        }\n        return icons;\n    }", "code_tokens": ["public", "Icons", "getTableIcons", "(", "String", "featureTable", ")", "{", "Icons", "icons", "=", "null", ";", "Long", "id", "=", "contentsId", ".", "getId", "(", "featureTable", ")", ";", "if", "(", "id", "!=", "null", ")", "{", "icons", "=", "getTableIcons", "(", "featureTable", ",", "id", ")", ";", "}", "return", "icons", ";", "}"], "docstring": "Get the feature table default icons\n\n@param featureTable feature table\n@return table icons or null", "docstring_tokens": ["Get", "the", "feature", "table", "default", "icons"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L253-L260", "partition": "test", "index": 6028, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getTableStyle", "original_string": "public StyleRow getTableStyle(String featureTable, GeometryType geometryType) {\n        StyleRow styleRow = null;\n        Styles tableStyles = getTableStyles(featureTable);\n        if (tableStyles != null) {\n            styleRow = tableStyles.getStyle(geometryType);\n        }\n        return styleRow;\n    }", "language": "java", "code": "public StyleRow getTableStyle(String featureTable, GeometryType geometryType) {\n        StyleRow styleRow = null;\n        Styles tableStyles = getTableStyles(featureTable);\n        if (tableStyles != null) {\n            styleRow = tableStyles.getStyle(geometryType);\n        }\n        return styleRow;\n    }", "code_tokens": ["public", "StyleRow", "getTableStyle", "(", "String", "featureTable", ",", "GeometryType", "geometryType", ")", "{", "StyleRow", "styleRow", "=", "null", ";", "Styles", "tableStyles", "=", "getTableStyles", "(", "featureTable", ")", ";", "if", "(", "tableStyles", "!=", "null", ")", "{", "styleRow", "=", "tableStyles", ".", "getStyle", "(", "geometryType", ")", ";", "}", "return", "styleRow", ";", "}"], "docstring": "Get the style of the feature table and geometry type\n\n@param featureTable feature table\n@param geometryType geometry type\n@return style row", "docstring_tokens": ["Get", "the", "style", "of", "the", "feature", "table", "and", "geometry", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L218-L225", "partition": "test", "index": 6027, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getTableStyles", "original_string": "public Styles getTableStyles(String featureTable) {\n        Styles styles = null;\n        Long id = contentsId.getId(featureTable);\n        if (id != null) {\n            styles = getTableStyles(featureTable, id);\n        }\n        return styles;\n    }", "language": "java", "code": "public Styles getTableStyles(String featureTable) {\n        Styles styles = null;\n        Long id = contentsId.getId(featureTable);\n        if (id != null) {\n            styles = getTableStyles(featureTable, id);\n        }\n        return styles;\n    }", "code_tokens": ["public", "Styles", "getTableStyles", "(", "String", "featureTable", ")", "{", "Styles", "styles", "=", "null", ";", "Long", "id", "=", "contentsId", ".", "getId", "(", "featureTable", ")", ";", "if", "(", "id", "!=", "null", ")", "{", "styles", "=", "getTableStyles", "(", "featureTable", ",", "id", ")", ";", "}", "return", "styles", ";", "}"], "docstring": "Get the feature table default styles\n\n@param featureTable feature table\n@return table styles or null", "docstring_tokens": ["Get", "the", "feature", "table", "default", "styles"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L191-L198", "partition": "test", "index": 6026, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getTableFeatureStyles", "original_string": "public FeatureStyles getTableFeatureStyles(String featureTable) {\n\n        FeatureStyles featureStyles = null;\n\n        Long id = contentsId.getId(featureTable);\n        if (id != null) {\n\n            Styles styles = getTableStyles(featureTable, id);\n            Icons icons = getTableIcons(featureTable, id);\n\n            if (styles != null || icons != null) {\n                featureStyles = new FeatureStyles(styles, icons);\n            }\n\n        }\n\n        return featureStyles;\n    }", "language": "java", "code": "public FeatureStyles getTableFeatureStyles(String featureTable) {\n\n        FeatureStyles featureStyles = null;\n\n        Long id = contentsId.getId(featureTable);\n        if (id != null) {\n\n            Styles styles = getTableStyles(featureTable, id);\n            Icons icons = getTableIcons(featureTable, id);\n\n            if (styles != null || icons != null) {\n                featureStyles = new FeatureStyles(styles, icons);\n            }\n\n        }\n\n        return featureStyles;\n    }", "code_tokens": ["public", "FeatureStyles", "getTableFeatureStyles", "(", "String", "featureTable", ")", "{", "FeatureStyles", "featureStyles", "=", "null", ";", "Long", "id", "=", "contentsId", ".", "getId", "(", "featureTable", ")", ";", "if", "(", "id", "!=", "null", ")", "{", "Styles", "styles", "=", "getTableStyles", "(", "featureTable", ",", "id", ")", ";", "Icons", "icons", "=", "getTableIcons", "(", "featureTable", ",", "id", ")", ";", "if", "(", "styles", "!=", "null", "||", "icons", "!=", "null", ")", "{", "featureStyles", "=", "new", "FeatureStyles", "(", "styles", ",", "icons", ")", ";", "}", "}", "return", "featureStyles", ";", "}"], "docstring": "Get the feature table default feature styles\n\n@param featureTable feature table\n@return table feature styles or null", "docstring_tokens": ["Get", "the", "feature", "table", "default", "feature", "styles"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L156-L173", "partition": "test", "index": 6025, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getIconDao", "original_string": "public IconDao getIconDao() {\n        IconDao iconDao = null;\n        if (geoPackage.isTable(IconTable.TABLE_NAME)) {\n            iconDao = new IconDao(\n                    relatedTables.getUserDao(IconTable.TABLE_NAME));\n            relatedTables.setContents(iconDao.getTable());\n        }\n        return iconDao;\n    }", "language": "java", "code": "public IconDao getIconDao() {\n        IconDao iconDao = null;\n        if (geoPackage.isTable(IconTable.TABLE_NAME)) {\n            iconDao = new IconDao(\n                    relatedTables.getUserDao(IconTable.TABLE_NAME));\n            relatedTables.setContents(iconDao.getTable());\n        }\n        return iconDao;\n    }", "code_tokens": ["public", "IconDao", "getIconDao", "(", ")", "{", "IconDao", "iconDao", "=", "null", ";", "if", "(", "geoPackage", ".", "isTable", "(", "IconTable", ".", "TABLE_NAME", ")", ")", "{", "iconDao", "=", "new", "IconDao", "(", "relatedTables", ".", "getUserDao", "(", "IconTable", ".", "TABLE_NAME", ")", ")", ";", "relatedTables", ".", "setContents", "(", "iconDao", ".", "getTable", "(", ")", ")", ";", "}", "return", "iconDao", ";", "}"], "docstring": "Get a icon DAO\n\n@return icon DAO", "docstring_tokens": ["Get", "a", "icon", "DAO"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L130-L138", "partition": "test", "index": 6024, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getStyleDao", "original_string": "public StyleDao getStyleDao() {\n        StyleDao styleDao = null;\n        if (geoPackage.isTable(StyleTable.TABLE_NAME)) {\n            AttributesDao attributesDao = getGeoPackage().getAttributesDao(\n                    StyleTable.TABLE_NAME);\n            styleDao = new StyleDao(attributesDao);\n            relatedTables.setContents(styleDao.getTable());\n        }\n        return styleDao;\n    }", "language": "java", "code": "public StyleDao getStyleDao() {\n        StyleDao styleDao = null;\n        if (geoPackage.isTable(StyleTable.TABLE_NAME)) {\n            AttributesDao attributesDao = getGeoPackage().getAttributesDao(\n                    StyleTable.TABLE_NAME);\n            styleDao = new StyleDao(attributesDao);\n            relatedTables.setContents(styleDao.getTable());\n        }\n        return styleDao;\n    }", "code_tokens": ["public", "StyleDao", "getStyleDao", "(", ")", "{", "StyleDao", "styleDao", "=", "null", ";", "if", "(", "geoPackage", ".", "isTable", "(", "StyleTable", ".", "TABLE_NAME", ")", ")", "{", "AttributesDao", "attributesDao", "=", "getGeoPackage", "(", ")", ".", "getAttributesDao", "(", "StyleTable", ".", "TABLE_NAME", ")", ";", "styleDao", "=", "new", "StyleDao", "(", "attributesDao", ")", ";", "relatedTables", ".", "setContents", "(", "styleDao", ".", "getTable", "(", ")", ")", ";", "}", "return", "styleDao", ";", "}"], "docstring": "Get a style DAO\n\n@return style DAO", "docstring_tokens": ["Get", "a", "style", "DAO"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L114-L123", "partition": "test", "index": 6023, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getMappingDao", "original_string": "private StyleMappingDao getMappingDao(String tablePrefix,\n                                          String featureTable) {\n        String tableName = tablePrefix + featureTable;\n        StyleMappingDao dao = null;\n        if (geoPackage.isTable(tableName)) {\n            dao = new StyleMappingDao(relatedTables.getUserDao(tableName));\n        }\n        return dao;\n    }", "language": "java", "code": "private StyleMappingDao getMappingDao(String tablePrefix,\n                                          String featureTable) {\n        String tableName = tablePrefix + featureTable;\n        StyleMappingDao dao = null;\n        if (geoPackage.isTable(tableName)) {\n            dao = new StyleMappingDao(relatedTables.getUserDao(tableName));\n        }\n        return dao;\n    }", "code_tokens": ["private", "StyleMappingDao", "getMappingDao", "(", "String", "tablePrefix", ",", "String", "featureTable", ")", "{", "String", "tableName", "=", "tablePrefix", "+", "featureTable", ";", "StyleMappingDao", "dao", "=", "null", ";", "if", "(", "geoPackage", ".", "isTable", "(", "tableName", ")", ")", "{", "dao", "=", "new", "StyleMappingDao", "(", "relatedTables", ".", "getUserDao", "(", "tableName", ")", ")", ";", "}", "return", "dao", ";", "}"], "docstring": "Get a Style Mapping DAO from a table name\n\n@param tablePrefix  table name prefix\n@param featureTable feature table\n@return style mapping dao", "docstring_tokens": ["Get", "a", "Style", "Mapping", "DAO", "from", "a", "table", "name"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L99-L107", "partition": "test", "index": 6022, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleMappingDao.java", "func_name": "StyleMappingDao.queryByBaseFeatureId", "original_string": "public List<StyleMappingRow> queryByBaseFeatureId(long id) {\n        List<StyleMappingRow> rows = new ArrayList<>();\n        UserCustomCursor cursor = queryByBaseId(id);\n        try {\n            while (cursor.moveToNext()) {\n                rows.add(getRow(cursor));\n            }\n        } finally {\n            cursor.close();\n        }\n        return rows;\n    }", "language": "java", "code": "public List<StyleMappingRow> queryByBaseFeatureId(long id) {\n        List<StyleMappingRow> rows = new ArrayList<>();\n        UserCustomCursor cursor = queryByBaseId(id);\n        try {\n            while (cursor.moveToNext()) {\n                rows.add(getRow(cursor));\n            }\n        } finally {\n            cursor.close();\n        }\n        return rows;\n    }", "code_tokens": ["public", "List", "<", "StyleMappingRow", ">", "queryByBaseFeatureId", "(", "long", "id", ")", "{", "List", "<", "StyleMappingRow", ">", "rows", "=", "new", "ArrayList", "<>", "(", ")", ";", "UserCustomCursor", "cursor", "=", "queryByBaseId", "(", "id", ")", ";", "try", "{", "while", "(", "cursor", ".", "moveToNext", "(", ")", ")", "{", "rows", ".", "add", "(", "getRow", "(", "cursor", ")", ")", ";", "}", "}", "finally", "{", "cursor", ".", "close", "(", ")", ";", "}", "return", "rows", ";", "}"], "docstring": "Query for style mappings by base id\n\n@param id base id, feature contents id or feature geometry id\n@return style mappings rows", "docstring_tokens": ["Query", "for", "style", "mappings", "by", "base", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleMappingDao.java#L71-L82", "partition": "test", "index": 5953, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleMappingDao.java", "func_name": "StyleMappingDao.deleteByBaseId", "original_string": "public int deleteByBaseId(long id, GeometryType geometryType) {\n\n        String geometryTypeName = null;\n        if (geometryType != null) {\n            geometryTypeName = geometryType.getName();\n        }\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(StyleMappingTable.COLUMN_BASE_ID, id));\n        where.append(\" AND \");\n        where.append(buildWhere(StyleMappingTable.COLUMN_GEOMETRY_TYPE_NAME,\n                geometryTypeName));\n\n        List<Object> whereArguments = new ArrayList<>();\n        whereArguments.add(id);\n        if (geometryTypeName != null) {\n            whereArguments.add(geometryTypeName);\n        }\n\n        String[] whereArgs = buildWhereArgs(whereArguments);\n\n        int deleted = delete(where.toString(), whereArgs);\n\n        return deleted;\n    }", "language": "java", "code": "public int deleteByBaseId(long id, GeometryType geometryType) {\n\n        String geometryTypeName = null;\n        if (geometryType != null) {\n            geometryTypeName = geometryType.getName();\n        }\n\n        StringBuilder where = new StringBuilder();\n        where.append(buildWhere(StyleMappingTable.COLUMN_BASE_ID, id));\n        where.append(\" AND \");\n        where.append(buildWhere(StyleMappingTable.COLUMN_GEOMETRY_TYPE_NAME,\n                geometryTypeName));\n\n        List<Object> whereArguments = new ArrayList<>();\n        whereArguments.add(id);\n        if (geometryTypeName != null) {\n            whereArguments.add(geometryTypeName);\n        }\n\n        String[] whereArgs = buildWhereArgs(whereArguments);\n\n        int deleted = delete(where.toString(), whereArgs);\n\n        return deleted;\n    }", "code_tokens": ["public", "int", "deleteByBaseId", "(", "long", "id", ",", "GeometryType", "geometryType", ")", "{", "String", "geometryTypeName", "=", "null", ";", "if", "(", "geometryType", "!=", "null", ")", "{", "geometryTypeName", "=", "geometryType", ".", "getName", "(", ")", ";", "}", "StringBuilder", "where", "=", "new", "StringBuilder", "(", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "StyleMappingTable", ".", "COLUMN_BASE_ID", ",", "id", ")", ")", ";", "where", ".", "append", "(", "\" AND \"", ")", ";", "where", ".", "append", "(", "buildWhere", "(", "StyleMappingTable", ".", "COLUMN_GEOMETRY_TYPE_NAME", ",", "geometryTypeName", ")", ")", ";", "List", "<", "Object", ">", "whereArguments", "=", "new", "ArrayList", "<>", "(", ")", ";", "whereArguments", ".", "add", "(", "id", ")", ";", "if", "(", "geometryTypeName", "!=", "null", ")", "{", "whereArguments", ".", "add", "(", "geometryTypeName", ")", ";", "}", "String", "[", "]", "whereArgs", "=", "buildWhereArgs", "(", "whereArguments", ")", ";", "int", "deleted", "=", "delete", "(", "where", ".", "toString", "(", ")", ",", "whereArgs", ")", ";", "return", "deleted", ";", "}"], "docstring": "Delete by base is and geometry type\n\n@param id           base id\n@param geometryType geometry type\n@return rows deleted", "docstring_tokens": ["Delete", "by", "base", "is", "and", "geometry", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleMappingDao.java#L91-L115", "partition": "test", "index": 5954, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java", "func_name": "RelatedTablesExtension.hasMapping", "original_string": "public boolean hasMapping(String tableName, long baseId, long relatedId) {\n        boolean has = false;\n        UserMappingDao userMappingDao = getMappingDao(tableName);\n        UserCustomCursor cursor = userMappingDao.queryByIds(baseId,\n                relatedId);\n        try {\n            has = cursor.getCount() > 0;\n        } finally {\n            cursor.close();\n        }\n        return has;\n    }", "language": "java", "code": "public boolean hasMapping(String tableName, long baseId, long relatedId) {\n        boolean has = false;\n        UserMappingDao userMappingDao = getMappingDao(tableName);\n        UserCustomCursor cursor = userMappingDao.queryByIds(baseId,\n                relatedId);\n        try {\n            has = cursor.getCount() > 0;\n        } finally {\n            cursor.close();\n        }\n        return has;\n    }", "code_tokens": ["public", "boolean", "hasMapping", "(", "String", "tableName", ",", "long", "baseId", ",", "long", "relatedId", ")", "{", "boolean", "has", "=", "false", ";", "UserMappingDao", "userMappingDao", "=", "getMappingDao", "(", "tableName", ")", ";", "UserCustomCursor", "cursor", "=", "userMappingDao", ".", "queryByIds", "(", "baseId", ",", "relatedId", ")", ";", "try", "{", "has", "=", "cursor", ".", "getCount", "(", ")", ">", "0", ";", "}", "finally", "{", "cursor", ".", "close", "(", ")", ";", "}", "return", "has", ";", "}"], "docstring": "Determine if the base id and related id mapping exists\n\n@param tableName mapping table name\n@param baseId    base id\n@param relatedId related id\n@return true if mapping exists\n@since 3.2.0", "docstring_tokens": ["Determine", "if", "the", "base", "id", "and", "related", "id", "mapping", "exists"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/RelatedTablesExtension.java#L253-L264", "partition": "test", "index": 5985, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setStyles", "original_string": "public void setStyles(String featureTable, long featureId, Styles styles) {\n        deleteStyles(featureTable, featureId);\n\n        if (styles != null) {\n\n            if (styles.getDefault() != null) {\n                setStyleDefault(featureTable, featureId, styles.getDefault());\n            }\n\n            for (Entry<GeometryType, StyleRow> style : styles.getStyles()\n                    .entrySet()) {\n                setStyle(featureTable, featureId, style.getKey(),\n                        style.getValue());\n            }\n\n        }\n    }", "language": "java", "code": "public void setStyles(String featureTable, long featureId, Styles styles) {\n        deleteStyles(featureTable, featureId);\n\n        if (styles != null) {\n\n            if (styles.getDefault() != null) {\n                setStyleDefault(featureTable, featureId, styles.getDefault());\n            }\n\n            for (Entry<GeometryType, StyleRow> style : styles.getStyles()\n                    .entrySet()) {\n                setStyle(featureTable, featureId, style.getKey(),\n                        style.getValue());\n            }\n\n        }\n    }", "code_tokens": ["public", "void", "setStyles", "(", "String", "featureTable", ",", "long", "featureId", ",", "Styles", "styles", ")", "{", "deleteStyles", "(", "featureTable", ",", "featureId", ")", ";", "if", "(", "styles", "!=", "null", ")", "{", "if", "(", "styles", ".", "getDefault", "(", ")", "!=", "null", ")", "{", "setStyleDefault", "(", "featureTable", ",", "featureId", ",", "styles", ".", "getDefault", "(", ")", ")", ";", "}", "for", "(", "Entry", "<", "GeometryType", ",", "StyleRow", ">", "style", ":", "styles", ".", "getStyles", "(", ")", ".", "entrySet", "(", ")", ")", "{", "setStyle", "(", "featureTable", ",", "featureId", ",", "style", ".", "getKey", "(", ")", ",", "style", ".", "getValue", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Set the styles for the feature table and feature id\n\n@param featureTable feature table\n@param featureId    feature id\n@param styles       styles", "docstring_tokens": ["Set", "the", "styles", "for", "the", "feature", "table", "and", "feature", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1089-L1105", "partition": "test", "index": 6042, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setStyle", "original_string": "public void setStyle(FeatureRow featureRow, StyleRow style) {\n        setStyle(featureRow, featureRow.getGeometryType(), style);\n    }", "language": "java", "code": "public void setStyle(FeatureRow featureRow, StyleRow style) {\n        setStyle(featureRow, featureRow.getGeometryType(), style);\n    }", "code_tokens": ["public", "void", "setStyle", "(", "FeatureRow", "featureRow", ",", "StyleRow", "style", ")", "{", "setStyle", "(", "featureRow", ",", "featureRow", ".", "getGeometryType", "(", ")", ",", "style", ")", ";", "}"], "docstring": "Set the style of the feature row\n\n@param featureRow feature row\n@param style      style row", "docstring_tokens": ["Set", "the", "style", "of", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1113-L1115", "partition": "test", "index": 6043, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getStyles", "original_string": "private Styles getStyles(long featureId, StyleMappingDao mappingDao) {\n\n        Styles styles = null;\n\n        if (mappingDao != null) {\n\n            StyleDao styleDao = getStyleDao();\n\n            if (styleDao != null) {\n\n                List<StyleMappingRow> styleMappingRows = mappingDao\n                        .queryByBaseFeatureId(featureId);\n                if (!styleMappingRows.isEmpty()) {\n\n                    for (StyleMappingRow styleMappingRow : styleMappingRows) {\n\n                        StyleRow styleRow = styleDao\n                                .queryForRow(styleMappingRow);\n                        if (styleRow != null) {\n                            if (styles == null) {\n                                styles = new Styles();\n                            }\n                            styles.setStyle(styleRow,\n                                    styleMappingRow.getGeometryType());\n                        }\n                    }\n                }\n            }\n        }\n\n        return styles;\n    }", "language": "java", "code": "private Styles getStyles(long featureId, StyleMappingDao mappingDao) {\n\n        Styles styles = null;\n\n        if (mappingDao != null) {\n\n            StyleDao styleDao = getStyleDao();\n\n            if (styleDao != null) {\n\n                List<StyleMappingRow> styleMappingRows = mappingDao\n                        .queryByBaseFeatureId(featureId);\n                if (!styleMappingRows.isEmpty()) {\n\n                    for (StyleMappingRow styleMappingRow : styleMappingRows) {\n\n                        StyleRow styleRow = styleDao\n                                .queryForRow(styleMappingRow);\n                        if (styleRow != null) {\n                            if (styles == null) {\n                                styles = new Styles();\n                            }\n                            styles.setStyle(styleRow,\n                                    styleMappingRow.getGeometryType());\n                        }\n                    }\n                }\n            }\n        }\n\n        return styles;\n    }", "code_tokens": ["private", "Styles", "getStyles", "(", "long", "featureId", ",", "StyleMappingDao", "mappingDao", ")", "{", "Styles", "styles", "=", "null", ";", "if", "(", "mappingDao", "!=", "null", ")", "{", "StyleDao", "styleDao", "=", "getStyleDao", "(", ")", ";", "if", "(", "styleDao", "!=", "null", ")", "{", "List", "<", "StyleMappingRow", ">", "styleMappingRows", "=", "mappingDao", ".", "queryByBaseFeatureId", "(", "featureId", ")", ";", "if", "(", "!", "styleMappingRows", ".", "isEmpty", "(", ")", ")", "{", "for", "(", "StyleMappingRow", "styleMappingRow", ":", "styleMappingRows", ")", "{", "StyleRow", "styleRow", "=", "styleDao", ".", "queryForRow", "(", "styleMappingRow", ")", ";", "if", "(", "styleRow", "!=", "null", ")", "{", "if", "(", "styles", "==", "null", ")", "{", "styles", "=", "new", "Styles", "(", ")", ";", "}", "styles", ".", "setStyle", "(", "styleRow", ",", "styleMappingRow", ".", "getGeometryType", "(", ")", ")", ";", "}", "}", "}", "}", "}", "return", "styles", ";", "}"], "docstring": "Get the styles for feature id from the style mapping dao\n\n@param featureId  geometry feature id or feature table id\n@param mappingDao style mapping dao\n@return styles", "docstring_tokens": ["Get", "the", "styles", "for", "feature", "id", "from", "the", "style", "mapping", "dao"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L686-L717", "partition": "test", "index": 6034, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setStyleDefault", "original_string": "public void setStyleDefault(String featureTable, long featureId,\n                                StyleRow style) {\n        setStyle(featureTable, featureId, null, style);\n    }", "language": "java", "code": "public void setStyleDefault(String featureTable, long featureId,\n                                StyleRow style) {\n        setStyle(featureTable, featureId, null, style);\n    }", "code_tokens": ["public", "void", "setStyleDefault", "(", "String", "featureTable", ",", "long", "featureId", ",", "StyleRow", "style", ")", "{", "setStyle", "(", "featureTable", ",", "featureId", ",", "null", ",", "style", ")", ";", "}"], "docstring": "Set the default style of the feature\n\n@param featureTable feature table\n@param featureId    feature id\n@param style        style row", "docstring_tokens": ["Set", "the", "default", "style", "of", "the", "feature"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1171-L1174", "partition": "test", "index": 6045, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.deleteMapping", "original_string": "private void deleteMapping(StyleMappingDao mappingDao, long featureId,\n                               GeometryType geometryType) {\n        if (mappingDao != null) {\n            mappingDao.deleteByBaseId(featureId, geometryType);\n        }\n    }", "language": "java", "code": "private void deleteMapping(StyleMappingDao mappingDao, long featureId,\n                               GeometryType geometryType) {\n        if (mappingDao != null) {\n            mappingDao.deleteByBaseId(featureId, geometryType);\n        }\n    }", "code_tokens": ["private", "void", "deleteMapping", "(", "StyleMappingDao", "mappingDao", ",", "long", "featureId", ",", "GeometryType", "geometryType", ")", "{", "if", "(", "mappingDao", "!=", "null", ")", "{", "mappingDao", ".", "deleteByBaseId", "(", "featureId", ",", "geometryType", ")", ";", "}", "}"], "docstring": "Delete the style mapping with the geometry type value\n\n@param mappingDao   mapping dao\n@param featureId    feature id\n@param geometryType geometry type", "docstring_tokens": ["Delete", "the", "style", "mapping", "with", "the", "geometry", "type", "value"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1789-L1794", "partition": "test", "index": 6058, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.deleteTableMapping", "original_string": "private void deleteTableMapping(StyleMappingDao mappingDao,\n                                    String featureTable, GeometryType geometryType) {\n        if (mappingDao != null) {\n            Long featureContentsId = contentsId.getId(featureTable);\n            if (featureContentsId != null) {\n                mappingDao.deleteByBaseId(featureContentsId, geometryType);\n            }\n        }\n    }", "language": "java", "code": "private void deleteTableMapping(StyleMappingDao mappingDao,\n                                    String featureTable, GeometryType geometryType) {\n        if (mappingDao != null) {\n            Long featureContentsId = contentsId.getId(featureTable);\n            if (featureContentsId != null) {\n                mappingDao.deleteByBaseId(featureContentsId, geometryType);\n            }\n        }\n    }", "code_tokens": ["private", "void", "deleteTableMapping", "(", "StyleMappingDao", "mappingDao", ",", "String", "featureTable", ",", "GeometryType", "geometryType", ")", "{", "if", "(", "mappingDao", "!=", "null", ")", "{", "Long", "featureContentsId", "=", "contentsId", ".", "getId", "(", "featureTable", ")", ";", "if", "(", "featureContentsId", "!=", "null", ")", "{", "mappingDao", ".", "deleteByBaseId", "(", "featureContentsId", ",", "geometryType", ")", ";", "}", "}", "}"], "docstring": "Delete the table style mapping with the geometry type value\n\n@param mappingDao   mapping dao\n@param featureTable feature table\n@param geometryType geometry type", "docstring_tokens": ["Delete", "the", "table", "style", "mapping", "with", "the", "geometry", "type", "value"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1552-L1560", "partition": "test", "index": 6057, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.deleteTableMappings", "original_string": "private void deleteTableMappings(StyleMappingDao mappingDao,\n                                     String featureTable) {\n        if (mappingDao != null) {\n            Long featureContentsId = contentsId.getId(featureTable);\n            if (featureContentsId != null) {\n                mappingDao.deleteByBaseId(featureContentsId);\n            }\n        }\n    }", "language": "java", "code": "private void deleteTableMappings(StyleMappingDao mappingDao,\n                                     String featureTable) {\n        if (mappingDao != null) {\n            Long featureContentsId = contentsId.getId(featureTable);\n            if (featureContentsId != null) {\n                mappingDao.deleteByBaseId(featureContentsId);\n            }\n        }\n    }", "code_tokens": ["private", "void", "deleteTableMappings", "(", "StyleMappingDao", "mappingDao", ",", "String", "featureTable", ")", "{", "if", "(", "mappingDao", "!=", "null", ")", "{", "Long", "featureContentsId", "=", "contentsId", ".", "getId", "(", "featureTable", ")", ";", "if", "(", "featureContentsId", "!=", "null", ")", "{", "mappingDao", ".", "deleteByBaseId", "(", "featureContentsId", ")", ";", "}", "}", "}"], "docstring": "Delete the table style mappings\n\n@param mappingDao   mapping dao\n@param featureTable feature table", "docstring_tokens": ["Delete", "the", "table", "style", "mappings"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1535-L1543", "partition": "test", "index": 6056, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.deleteTableIcon", "original_string": "public void deleteTableIcon(String featureTable, GeometryType geometryType) {\n        deleteTableMapping(getTableIconMappingDao(featureTable), featureTable,\n                geometryType);\n    }", "language": "java", "code": "public void deleteTableIcon(String featureTable, GeometryType geometryType) {\n        deleteTableMapping(getTableIconMappingDao(featureTable), featureTable,\n                geometryType);\n    }", "code_tokens": ["public", "void", "deleteTableIcon", "(", "String", "featureTable", ",", "GeometryType", "geometryType", ")", "{", "deleteTableMapping", "(", "getTableIconMappingDao", "(", "featureTable", ")", ",", "featureTable", ",", "geometryType", ")", ";", "}"], "docstring": "Delete the feature table icon for the geometry type\n\n@param featureTable feature table\n@param geometryType geometry type", "docstring_tokens": ["Delete", "the", "feature", "table", "icon", "for", "the", "geometry", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1524-L1527", "partition": "test", "index": 6055, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.deleteTableStyle", "original_string": "public void deleteTableStyle(String featureTable, GeometryType geometryType) {\n        deleteTableMapping(getTableStyleMappingDao(featureTable), featureTable,\n                geometryType);\n    }", "language": "java", "code": "public void deleteTableStyle(String featureTable, GeometryType geometryType) {\n        deleteTableMapping(getTableStyleMappingDao(featureTable), featureTable,\n                geometryType);\n    }", "code_tokens": ["public", "void", "deleteTableStyle", "(", "String", "featureTable", ",", "GeometryType", "geometryType", ")", "{", "deleteTableMapping", "(", "getTableStyleMappingDao", "(", "featureTable", ")", ",", "featureTable", ",", "geometryType", ")", ";", "}"], "docstring": "Delete the feature table style for the geometry type\n\n@param featureTable feature table\n@param geometryType geometry type", "docstring_tokens": ["Delete", "the", "feature", "table", "style", "for", "the", "geometry", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1466-L1469", "partition": "test", "index": 6054, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setStyleDefault", "original_string": "public void setStyleDefault(FeatureRow featureRow, StyleRow style) {\n        setStyle(featureRow.getTable().getTableName(), featureRow.getId(),\n                null, style);\n    }", "language": "java", "code": "public void setStyleDefault(FeatureRow featureRow, StyleRow style) {\n        setStyle(featureRow.getTable().getTableName(), featureRow.getId(),\n                null, style);\n    }", "code_tokens": ["public", "void", "setStyleDefault", "(", "FeatureRow", "featureRow", ",", "StyleRow", "style", ")", "{", "setStyle", "(", "featureRow", ".", "getTable", "(", ")", ".", "getTableName", "(", ")", ",", "featureRow", ".", "getId", "(", ")", ",", "null", ",", "style", ")", ";", "}"], "docstring": "Set the default style of the feature row\n\n@param featureRow feature row\n@param style      style row", "docstring_tokens": ["Set", "the", "default", "style", "of", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1136-L1139", "partition": "test", "index": 6044, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getOrInsertIcon", "original_string": "private long getOrInsertIcon(IconRow icon) {\n        long iconId;\n        if (icon.hasId()) {\n            iconId = icon.getId();\n        } else {\n            IconDao iconDao = getIconDao();\n            iconId = iconDao.create(icon);\n        }\n        return iconId;\n    }", "language": "java", "code": "private long getOrInsertIcon(IconRow icon) {\n        long iconId;\n        if (icon.hasId()) {\n            iconId = icon.getId();\n        } else {\n            IconDao iconDao = getIconDao();\n            iconId = iconDao.create(icon);\n        }\n        return iconId;\n    }", "code_tokens": ["private", "long", "getOrInsertIcon", "(", "IconRow", "icon", ")", "{", "long", "iconId", ";", "if", "(", "icon", ".", "hasId", "(", ")", ")", "{", "iconId", "=", "icon", ".", "getId", "(", ")", ";", "}", "else", "{", "IconDao", "iconDao", "=", "getIconDao", "(", ")", ";", "iconId", "=", "iconDao", ".", "create", "(", "icon", ")", ";", "}", "return", "iconId", ";", "}"], "docstring": "Get the icon id, either from the existing icon or by inserting a new one\n\n@param icon icon row\n@return icon id", "docstring_tokens": ["Get", "the", "icon", "id", "either", "from", "the", "existing", "icon", "or", "by", "inserting", "a", "new", "one"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1304-L1313", "partition": "test", "index": 6052, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.insertStyleMapping", "original_string": "private void insertStyleMapping(StyleMappingDao mappingDao, long baseId,\n                                    long relatedId, GeometryType geometryType) {\n\n        StyleMappingRow row = mappingDao.newRow();\n\n        row.setBaseId(baseId);\n        row.setRelatedId(relatedId);\n        row.setGeometryType(geometryType);\n\n        mappingDao.insert(row);\n    }", "language": "java", "code": "private void insertStyleMapping(StyleMappingDao mappingDao, long baseId,\n                                    long relatedId, GeometryType geometryType) {\n\n        StyleMappingRow row = mappingDao.newRow();\n\n        row.setBaseId(baseId);\n        row.setRelatedId(relatedId);\n        row.setGeometryType(geometryType);\n\n        mappingDao.insert(row);\n    }", "code_tokens": ["private", "void", "insertStyleMapping", "(", "StyleMappingDao", "mappingDao", ",", "long", "baseId", ",", "long", "relatedId", ",", "GeometryType", "geometryType", ")", "{", "StyleMappingRow", "row", "=", "mappingDao", ".", "newRow", "(", ")", ";", "row", ".", "setBaseId", "(", "baseId", ")", ";", "row", ".", "setRelatedId", "(", "relatedId", ")", ";", "row", ".", "setGeometryType", "(", "geometryType", ")", ";", "mappingDao", ".", "insert", "(", "row", ")", ";", "}"], "docstring": "Insert a style mapping row\n\n@param mappingDao   mapping dao\n@param baseId       base id, either contents id or feature id\n@param relatedId    related id, either style or icon id\n@param geometryType geometry type or null", "docstring_tokens": ["Insert", "a", "style", "mapping", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1323-L1333", "partition": "test", "index": 6053, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setIconDefault", "original_string": "public void setIconDefault(String featureTable, long featureId, IconRow icon) {\n        setIcon(featureTable, featureId, null, icon);\n    }", "language": "java", "code": "public void setIconDefault(String featureTable, long featureId, IconRow icon) {\n        setIcon(featureTable, featureId, null, icon);\n    }", "code_tokens": ["public", "void", "setIconDefault", "(", "String", "featureTable", ",", "long", "featureId", ",", "IconRow", "icon", ")", "{", "setIcon", "(", "featureTable", ",", "featureId", ",", "null", ",", "icon", ")", ";", "}"], "docstring": "Set the default icon of the feature\n\n@param featureTable feature table\n@param featureId    feature id\n@param icon         icon row", "docstring_tokens": ["Set", "the", "default", "icon", "of", "the", "feature"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1276-L1278", "partition": "test", "index": 6050, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setIconDefault", "original_string": "public void setIconDefault(FeatureRow featureRow, IconRow icon) {\n        setIcon(featureRow.getTable().getTableName(), featureRow.getId(), null,\n                icon);\n    }", "language": "java", "code": "public void setIconDefault(FeatureRow featureRow, IconRow icon) {\n        setIcon(featureRow.getTable().getTableName(), featureRow.getId(), null,\n                icon);\n    }", "code_tokens": ["public", "void", "setIconDefault", "(", "FeatureRow", "featureRow", ",", "IconRow", "icon", ")", "{", "setIcon", "(", "featureRow", ".", "getTable", "(", ")", ".", "getTableName", "(", ")", ",", "featureRow", ".", "getId", "(", ")", ",", "null", ",", "icon", ")", ";", "}"], "docstring": "Set the default icon of the feature row\n\n@param featureRow feature row\n@param icon       icon row", "docstring_tokens": ["Set", "the", "default", "icon", "of", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1240-L1243", "partition": "test", "index": 6049, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setIcon", "original_string": "public void setIcon(FeatureRow featureRow, IconRow icon) {\n        setIcon(featureRow, featureRow.getGeometryType(), icon);\n    }", "language": "java", "code": "public void setIcon(FeatureRow featureRow, IconRow icon) {\n        setIcon(featureRow, featureRow.getGeometryType(), icon);\n    }", "code_tokens": ["public", "void", "setIcon", "(", "FeatureRow", "featureRow", ",", "IconRow", "icon", ")", "{", "setIcon", "(", "featureRow", ",", "featureRow", ".", "getGeometryType", "(", ")", ",", "icon", ")", ";", "}"], "docstring": "Set the icon of the feature row\n\n@param featureRow feature row\n@param icon       icon row", "docstring_tokens": ["Set", "the", "icon", "of", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1217-L1219", "partition": "test", "index": 6048, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setIcons", "original_string": "public void setIcons(String featureTable, long featureId, Icons icons) {\n        deleteIcons(featureTable, featureId);\n\n        if (icons != null) {\n\n            if (icons.getDefault() != null) {\n                setIconDefault(featureTable, featureId, icons.getDefault());\n            }\n\n            for (Entry<GeometryType, IconRow> icon : icons.getIcons()\n                    .entrySet()) {\n                setIcon(featureTable, featureId, icon.getKey(), icon.getValue());\n            }\n\n        }\n    }", "language": "java", "code": "public void setIcons(String featureTable, long featureId, Icons icons) {\n        deleteIcons(featureTable, featureId);\n\n        if (icons != null) {\n\n            if (icons.getDefault() != null) {\n                setIconDefault(featureTable, featureId, icons.getDefault());\n            }\n\n            for (Entry<GeometryType, IconRow> icon : icons.getIcons()\n                    .entrySet()) {\n                setIcon(featureTable, featureId, icon.getKey(), icon.getValue());\n            }\n\n        }\n    }", "code_tokens": ["public", "void", "setIcons", "(", "String", "featureTable", ",", "long", "featureId", ",", "Icons", "icons", ")", "{", "deleteIcons", "(", "featureTable", ",", "featureId", ")", ";", "if", "(", "icons", "!=", "null", ")", "{", "if", "(", "icons", ".", "getDefault", "(", ")", "!=", "null", ")", "{", "setIconDefault", "(", "featureTable", ",", "featureId", ",", "icons", ".", "getDefault", "(", ")", ")", ";", "}", "for", "(", "Entry", "<", "GeometryType", ",", "IconRow", ">", "icon", ":", "icons", ".", "getIcons", "(", ")", ".", "entrySet", "(", ")", ")", "{", "setIcon", "(", "featureTable", ",", "featureId", ",", "icon", ".", "getKey", "(", ")", ",", "icon", ".", "getValue", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Set the icons for the feature table and feature id\n\n@param featureTable feature table\n@param featureId    feature id\n@param icons        icons", "docstring_tokens": ["Set", "the", "icons", "for", "the", "feature", "table", "and", "feature", "id"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1194-L1209", "partition": "test", "index": 6047, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.setIcons", "original_string": "public void setIcons(FeatureRow featureRow, Icons icons) {\n        setIcons(featureRow.getTable().getTableName(), featureRow.getId(),\n                icons);\n    }", "language": "java", "code": "public void setIcons(FeatureRow featureRow, Icons icons) {\n        setIcons(featureRow.getTable().getTableName(), featureRow.getId(),\n                icons);\n    }", "code_tokens": ["public", "void", "setIcons", "(", "FeatureRow", "featureRow", ",", "Icons", "icons", ")", "{", "setIcons", "(", "featureRow", ".", "getTable", "(", ")", ".", "getTableName", "(", ")", ",", "featureRow", ".", "getId", "(", ")", ",", "icons", ")", ";", "}"], "docstring": "Set the icons for the feature row\n\n@param featureRow feature row\n@param icons      icons", "docstring_tokens": ["Set", "the", "icons", "for", "the", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1182-L1185", "partition": "test", "index": 6046, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getOrInsertStyle", "original_string": "private long getOrInsertStyle(StyleRow style) {\n        long styleId;\n        if (style.hasId()) {\n            styleId = style.getId();\n        } else {\n            StyleDao styleDao = getStyleDao();\n            styleId = styleDao.create(style);\n        }\n        return styleId;\n    }", "language": "java", "code": "private long getOrInsertStyle(StyleRow style) {\n        long styleId;\n        if (style.hasId()) {\n            styleId = style.getId();\n        } else {\n            StyleDao styleDao = getStyleDao();\n            styleId = styleDao.create(style);\n        }\n        return styleId;\n    }", "code_tokens": ["private", "long", "getOrInsertStyle", "(", "StyleRow", "style", ")", "{", "long", "styleId", ";", "if", "(", "style", ".", "hasId", "(", ")", ")", "{", "styleId", "=", "style", ".", "getId", "(", ")", ";", "}", "else", "{", "StyleDao", "styleDao", "=", "getStyleDao", "(", ")", ";", "styleId", "=", "styleDao", ".", "create", "(", "style", ")", ";", "}", "return", "styleId", ";", "}"], "docstring": "Get the style id, either from the existing style or by inserting a new\none\n\n@param style style row\n@return style id", "docstring_tokens": ["Get", "the", "style", "id", "either", "from", "the", "existing", "style", "or", "by", "inserting", "a", "new", "one"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1287-L1296", "partition": "test", "index": 6051, "time": "2018-11-13 16:44:18"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconCache.java", "func_name": "IconCache.createIcon", "original_string": "public static Bitmap createIcon(IconRow icon, float density, IconCache iconCache) {\n\n        Bitmap iconImage = null;\n\n        if (icon != null) {\n\n            if (iconCache != null) {\n                iconImage = iconCache.get(icon.getId());\n            }\n\n            if (iconImage == null) {\n\n                BitmapFactory.Options options = icon.getDataBounds();\n                int dataWidth = options.outWidth;\n                int dataHeight = options.outHeight;\n\n                double styleWidth = dataWidth;\n                double styleHeight = dataHeight;\n\n                double widthDensity = DisplayMetrics.DENSITY_DEFAULT;\n                double heightDensity = DisplayMetrics.DENSITY_DEFAULT;\n\n                if (icon.getWidth() != null) {\n                    styleWidth = icon.getWidth();\n                    double widthRatio = dataWidth / styleWidth;\n                    widthDensity *= widthRatio;\n                    if (icon.getHeight() == null) {\n                        heightDensity = widthDensity;\n                    }\n                }\n\n                if (icon.getHeight() != null) {\n                    styleHeight = icon.getHeight();\n                    double heightRatio = dataHeight / styleHeight;\n                    heightDensity *= heightRatio;\n                    if (icon.getWidth() == null) {\n                        widthDensity = heightDensity;\n                    }\n                }\n\n                options = new BitmapFactory.Options();\n                options.inDensity = (int) (Math.min(widthDensity, heightDensity) + 0.5f);\n                options.inTargetDensity = (int) (DisplayMetrics.DENSITY_DEFAULT * density + 0.5f);\n\n                iconImage = icon.getDataBitmap(options);\n\n                if (widthDensity != heightDensity) {\n\n                    int width = (int) (styleWidth * density + 0.5f);\n                    int height = (int) (styleHeight * density + 0.5f);\n\n                    if (width != iconImage.getWidth() || height != iconImage.getHeight()) {\n                        Bitmap scaledBitmap = Bitmap.createScaledBitmap(iconImage, width, height, false);\n                        iconImage.recycle();\n                        iconImage = scaledBitmap;\n                    }\n\n                }\n\n                if (iconCache != null) {\n                    iconCache.put(icon.getId(), iconImage);\n                }\n            }\n\n        }\n\n        return iconImage;\n    }", "language": "java", "code": "public static Bitmap createIcon(IconRow icon, float density, IconCache iconCache) {\n\n        Bitmap iconImage = null;\n\n        if (icon != null) {\n\n            if (iconCache != null) {\n                iconImage = iconCache.get(icon.getId());\n            }\n\n            if (iconImage == null) {\n\n                BitmapFactory.Options options = icon.getDataBounds();\n                int dataWidth = options.outWidth;\n                int dataHeight = options.outHeight;\n\n                double styleWidth = dataWidth;\n                double styleHeight = dataHeight;\n\n                double widthDensity = DisplayMetrics.DENSITY_DEFAULT;\n                double heightDensity = DisplayMetrics.DENSITY_DEFAULT;\n\n                if (icon.getWidth() != null) {\n                    styleWidth = icon.getWidth();\n                    double widthRatio = dataWidth / styleWidth;\n                    widthDensity *= widthRatio;\n                    if (icon.getHeight() == null) {\n                        heightDensity = widthDensity;\n                    }\n                }\n\n                if (icon.getHeight() != null) {\n                    styleHeight = icon.getHeight();\n                    double heightRatio = dataHeight / styleHeight;\n                    heightDensity *= heightRatio;\n                    if (icon.getWidth() == null) {\n                        widthDensity = heightDensity;\n                    }\n                }\n\n                options = new BitmapFactory.Options();\n                options.inDensity = (int) (Math.min(widthDensity, heightDensity) + 0.5f);\n                options.inTargetDensity = (int) (DisplayMetrics.DENSITY_DEFAULT * density + 0.5f);\n\n                iconImage = icon.getDataBitmap(options);\n\n                if (widthDensity != heightDensity) {\n\n                    int width = (int) (styleWidth * density + 0.5f);\n                    int height = (int) (styleHeight * density + 0.5f);\n\n                    if (width != iconImage.getWidth() || height != iconImage.getHeight()) {\n                        Bitmap scaledBitmap = Bitmap.createScaledBitmap(iconImage, width, height, false);\n                        iconImage.recycle();\n                        iconImage = scaledBitmap;\n                    }\n\n                }\n\n                if (iconCache != null) {\n                    iconCache.put(icon.getId(), iconImage);\n                }\n            }\n\n        }\n\n        return iconImage;\n    }", "code_tokens": ["public", "static", "Bitmap", "createIcon", "(", "IconRow", "icon", ",", "float", "density", ",", "IconCache", "iconCache", ")", "{", "Bitmap", "iconImage", "=", "null", ";", "if", "(", "icon", "!=", "null", ")", "{", "if", "(", "iconCache", "!=", "null", ")", "{", "iconImage", "=", "iconCache", ".", "get", "(", "icon", ".", "getId", "(", ")", ")", ";", "}", "if", "(", "iconImage", "==", "null", ")", "{", "BitmapFactory", ".", "Options", "options", "=", "icon", ".", "getDataBounds", "(", ")", ";", "int", "dataWidth", "=", "options", ".", "outWidth", ";", "int", "dataHeight", "=", "options", ".", "outHeight", ";", "double", "styleWidth", "=", "dataWidth", ";", "double", "styleHeight", "=", "dataHeight", ";", "double", "widthDensity", "=", "DisplayMetrics", ".", "DENSITY_DEFAULT", ";", "double", "heightDensity", "=", "DisplayMetrics", ".", "DENSITY_DEFAULT", ";", "if", "(", "icon", ".", "getWidth", "(", ")", "!=", "null", ")", "{", "styleWidth", "=", "icon", ".", "getWidth", "(", ")", ";", "double", "widthRatio", "=", "dataWidth", "/", "styleWidth", ";", "widthDensity", "*=", "widthRatio", ";", "if", "(", "icon", ".", "getHeight", "(", ")", "==", "null", ")", "{", "heightDensity", "=", "widthDensity", ";", "}", "}", "if", "(", "icon", ".", "getHeight", "(", ")", "!=", "null", ")", "{", "styleHeight", "=", "icon", ".", "getHeight", "(", ")", ";", "double", "heightRatio", "=", "dataHeight", "/", "styleHeight", ";", "heightDensity", "*=", "heightRatio", ";", "if", "(", "icon", ".", "getWidth", "(", ")", "==", "null", ")", "{", "widthDensity", "=", "heightDensity", ";", "}", "}", "options", "=", "new", "BitmapFactory", ".", "Options", "(", ")", ";", "options", ".", "inDensity", "=", "(", "int", ")", "(", "Math", ".", "min", "(", "widthDensity", ",", "heightDensity", ")", "+", "0.5f", ")", ";", "options", ".", "inTargetDensity", "=", "(", "int", ")", "(", "DisplayMetrics", ".", "DENSITY_DEFAULT", "*", "density", "+", "0.5f", ")", ";", "iconImage", "=", "icon", ".", "getDataBitmap", "(", "options", ")", ";", "if", "(", "widthDensity", "!=", "heightDensity", ")", "{", "int", "width", "=", "(", "int", ")", "(", "styleWidth", "*", "density", "+", "0.5f", ")", ";", "int", "height", "=", "(", "int", ")", "(", "styleHeight", "*", "density", "+", "0.5f", ")", ";", "if", "(", "width", "!=", "iconImage", ".", "getWidth", "(", ")", "||", "height", "!=", "iconImage", ".", "getHeight", "(", ")", ")", "{", "Bitmap", "scaledBitmap", "=", "Bitmap", ".", "createScaledBitmap", "(", "iconImage", ",", "width", ",", "height", ",", "false", ")", ";", "iconImage", ".", "recycle", "(", ")", ";", "iconImage", "=", "scaledBitmap", ";", "}", "}", "if", "(", "iconCache", "!=", "null", ")", "{", "iconCache", ".", "put", "(", "icon", ".", "getId", "(", ")", ",", "iconImage", ")", ";", "}", "}", "}", "return", "iconImage", ";", "}"], "docstring": "Create or retrieve from cache an icon bitmap for the icon row\n\n@param icon      icon row\n@param density   display density: {@link android.util.DisplayMetrics#density}\n@param iconCache icon cache\n@return icon bitmap", "docstring_tokens": ["Create", "or", "retrieve", "from", "cache", "an", "icon", "bitmap", "for", "the", "icon", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconCache.java#L183-L250", "partition": "test", "index": 6015, "time": "2018-11-19 14:06:42"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconCache.java", "func_name": "IconCache.put", "original_string": "public Bitmap put(IconRow iconRow, Bitmap bitmap) {\n        return put(iconRow.getId(), bitmap);\n    }", "language": "java", "code": "public Bitmap put(IconRow iconRow, Bitmap bitmap) {\n        return put(iconRow.getId(), bitmap);\n    }", "code_tokens": ["public", "Bitmap", "put", "(", "IconRow", "iconRow", ",", "Bitmap", "bitmap", ")", "{", "return", "put", "(", "iconRow", ".", "getId", "(", ")", ",", "bitmap", ")", ";", "}"], "docstring": "Cache the icon bitmap for the icon row\n\n@param iconRow icon row\n@param bitmap  icon bitmap\n@return previous cached icon bitmap or null", "docstring_tokens": ["Cache", "the", "icon", "bitmap", "for", "the", "icon", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconCache.java#L70-L72", "partition": "test", "index": 6014, "time": "2018-11-19 14:06:42"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.getPolygonFillPaint", "original_string": "protected Paint getPolygonFillPaint(FeatureStyle featureStyle) {\n\n        Paint paint = null;\n\n        boolean hasStyleColor = false;\n\n        if (featureStyle != null) {\n\n            StyleRow style = featureStyle.getStyle();\n\n            if (style != null) {\n\n                if (style.hasFillColor()) {\n                    paint = getStylePaint(style, FeatureDrawType.FILL);\n                } else {\n                    hasStyleColor = style.hasColor();\n                }\n\n            }\n\n        }\n\n        if (paint == null && !hasStyleColor && fillPolygon) {\n            paint = polygonFillPaint;\n        }\n\n        return paint;\n    }", "language": "java", "code": "protected Paint getPolygonFillPaint(FeatureStyle featureStyle) {\n\n        Paint paint = null;\n\n        boolean hasStyleColor = false;\n\n        if (featureStyle != null) {\n\n            StyleRow style = featureStyle.getStyle();\n\n            if (style != null) {\n\n                if (style.hasFillColor()) {\n                    paint = getStylePaint(style, FeatureDrawType.FILL);\n                } else {\n                    hasStyleColor = style.hasColor();\n                }\n\n            }\n\n        }\n\n        if (paint == null && !hasStyleColor && fillPolygon) {\n            paint = polygonFillPaint;\n        }\n\n        return paint;\n    }", "code_tokens": ["protected", "Paint", "getPolygonFillPaint", "(", "FeatureStyle", "featureStyle", ")", "{", "Paint", "paint", "=", "null", ";", "boolean", "hasStyleColor", "=", "false", ";", "if", "(", "featureStyle", "!=", "null", ")", "{", "StyleRow", "style", "=", "featureStyle", ".", "getStyle", "(", ")", ";", "if", "(", "style", "!=", "null", ")", "{", "if", "(", "style", ".", "hasFillColor", "(", ")", ")", "{", "paint", "=", "getStylePaint", "(", "style", ",", "FeatureDrawType", ".", "FILL", ")", ";", "}", "else", "{", "hasStyleColor", "=", "style", ".", "hasColor", "(", ")", ";", "}", "}", "}", "if", "(", "paint", "==", "null", "&&", "!", "hasStyleColor", "&&", "fillPolygon", ")", "{", "paint", "=", "polygonFillPaint", ";", "}", "return", "paint", ";", "}"], "docstring": "Get the polygon fill paint for the feature style, or return the default paint\n\n@param featureStyle feature style\n@return paint", "docstring_tokens": ["Get", "the", "polygon", "fill", "paint", "for", "the", "feature", "style", "or", "return", "the", "default", "paint"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1494-L1521", "partition": "test", "index": 6009, "time": "2018-11-20 16:04:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.getPolygonPaint", "original_string": "protected Paint getPolygonPaint(FeatureStyle featureStyle) {\n\n        Paint paint = getFeatureStylePaint(featureStyle, FeatureDrawType.STROKE);\n\n        if (paint == null) {\n            paint = polygonPaint;\n        }\n\n        return paint;\n    }", "language": "java", "code": "protected Paint getPolygonPaint(FeatureStyle featureStyle) {\n\n        Paint paint = getFeatureStylePaint(featureStyle, FeatureDrawType.STROKE);\n\n        if (paint == null) {\n            paint = polygonPaint;\n        }\n\n        return paint;\n    }", "code_tokens": ["protected", "Paint", "getPolygonPaint", "(", "FeatureStyle", "featureStyle", ")", "{", "Paint", "paint", "=", "getFeatureStylePaint", "(", "featureStyle", ",", "FeatureDrawType", ".", "STROKE", ")", ";", "if", "(", "paint", "==", "null", ")", "{", "paint", "=", "polygonPaint", ";", "}", "return", "paint", ";", "}"], "docstring": "Get the polygon paint for the feature style, or return the default paint\n\n@param featureStyle feature style\n@return paint", "docstring_tokens": ["Get", "the", "polygon", "paint", "for", "the", "feature", "style", "or", "return", "the", "default", "paint"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1477-L1486", "partition": "test", "index": 6008, "time": "2018-11-20 16:04:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.getLinePaint", "original_string": "protected Paint getLinePaint(FeatureStyle featureStyle) {\n\n        Paint paint = getFeatureStylePaint(featureStyle, FeatureDrawType.STROKE);\n\n        if (paint == null) {\n            paint = linePaint;\n        }\n\n        return paint;\n    }", "language": "java", "code": "protected Paint getLinePaint(FeatureStyle featureStyle) {\n\n        Paint paint = getFeatureStylePaint(featureStyle, FeatureDrawType.STROKE);\n\n        if (paint == null) {\n            paint = linePaint;\n        }\n\n        return paint;\n    }", "code_tokens": ["protected", "Paint", "getLinePaint", "(", "FeatureStyle", "featureStyle", ")", "{", "Paint", "paint", "=", "getFeatureStylePaint", "(", "featureStyle", ",", "FeatureDrawType", ".", "STROKE", ")", ";", "if", "(", "paint", "==", "null", ")", "{", "paint", "=", "linePaint", ";", "}", "return", "paint", ";", "}"], "docstring": "Get the line paint for the feature style, or return the default paint\n\n@param featureStyle feature style\n@return paint", "docstring_tokens": ["Get", "the", "line", "paint", "for", "the", "feature", "style", "or", "return", "the", "default", "paint"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1460-L1469", "partition": "test", "index": 6007, "time": "2018-11-20 16:04:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.getPointPaint", "original_string": "protected Paint getPointPaint(FeatureStyle featureStyle) {\n\n        Paint paint = getFeatureStylePaint(featureStyle, FeatureDrawType.CIRCLE);\n\n        if (paint == null) {\n            paint = pointPaint;\n        }\n\n        return paint;\n    }", "language": "java", "code": "protected Paint getPointPaint(FeatureStyle featureStyle) {\n\n        Paint paint = getFeatureStylePaint(featureStyle, FeatureDrawType.CIRCLE);\n\n        if (paint == null) {\n            paint = pointPaint;\n        }\n\n        return paint;\n    }", "code_tokens": ["protected", "Paint", "getPointPaint", "(", "FeatureStyle", "featureStyle", ")", "{", "Paint", "paint", "=", "getFeatureStylePaint", "(", "featureStyle", ",", "FeatureDrawType", ".", "CIRCLE", ")", ";", "if", "(", "paint", "==", "null", ")", "{", "paint", "=", "pointPaint", ";", "}", "return", "paint", ";", "}"], "docstring": "Get the point paint for the feature style, or return the default paint\n\n@param featureStyle feature style\n@return paint", "docstring_tokens": ["Get", "the", "point", "paint", "for", "the", "feature", "style", "or", "return", "the", "default", "paint"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1443-L1452", "partition": "test", "index": 6006, "time": "2018-11-20 16:04:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.getStylePaint", "original_string": "private Paint getStylePaint(StyleRow style, FeatureDrawType drawType) {\n\n        Paint paint = featurePaintCache.getPaint(style, drawType);\n\n        if (paint == null) {\n\n            Color color = null;\n            Style paintStyle = null;\n            Float strokeWidth = null;\n\n            switch (drawType) {\n                case CIRCLE:\n                    color = style.getColorOrDefault();\n                    paintStyle = Style.FILL;\n                    break;\n                case STROKE:\n                    color = style.getColorOrDefault();\n                    paintStyle = Style.STROKE;\n                    strokeWidth = this.density * (float) style.getWidthOrDefault();\n                    break;\n                case FILL:\n                    color = style.getFillColor();\n                    paintStyle = Style.FILL;\n                    strokeWidth = this.density * (float) style.getWidthOrDefault();\n                    break;\n                default:\n                    throw new GeoPackageException(\"Unsupported Draw Type: \" + drawType);\n            }\n\n            Paint stylePaint = new Paint();\n            stylePaint.setAntiAlias(true);\n            stylePaint.setStyle(paintStyle);\n            stylePaint.setColor(color.getColorWithAlpha());\n            if (strokeWidth != null) {\n                stylePaint.setStrokeWidth(strokeWidth);\n            }\n\n            synchronized (featurePaintCache) {\n\n                paint = featurePaintCache.getPaint(style, drawType);\n\n                if (paint == null) {\n                    featurePaintCache.setPaint(style, drawType, stylePaint);\n                    paint = stylePaint;\n                }\n\n            }\n        }\n\n        return paint;\n    }", "language": "java", "code": "private Paint getStylePaint(StyleRow style, FeatureDrawType drawType) {\n\n        Paint paint = featurePaintCache.getPaint(style, drawType);\n\n        if (paint == null) {\n\n            Color color = null;\n            Style paintStyle = null;\n            Float strokeWidth = null;\n\n            switch (drawType) {\n                case CIRCLE:\n                    color = style.getColorOrDefault();\n                    paintStyle = Style.FILL;\n                    break;\n                case STROKE:\n                    color = style.getColorOrDefault();\n                    paintStyle = Style.STROKE;\n                    strokeWidth = this.density * (float) style.getWidthOrDefault();\n                    break;\n                case FILL:\n                    color = style.getFillColor();\n                    paintStyle = Style.FILL;\n                    strokeWidth = this.density * (float) style.getWidthOrDefault();\n                    break;\n                default:\n                    throw new GeoPackageException(\"Unsupported Draw Type: \" + drawType);\n            }\n\n            Paint stylePaint = new Paint();\n            stylePaint.setAntiAlias(true);\n            stylePaint.setStyle(paintStyle);\n            stylePaint.setColor(color.getColorWithAlpha());\n            if (strokeWidth != null) {\n                stylePaint.setStrokeWidth(strokeWidth);\n            }\n\n            synchronized (featurePaintCache) {\n\n                paint = featurePaintCache.getPaint(style, drawType);\n\n                if (paint == null) {\n                    featurePaintCache.setPaint(style, drawType, stylePaint);\n                    paint = stylePaint;\n                }\n\n            }\n        }\n\n        return paint;\n    }", "code_tokens": ["private", "Paint", "getStylePaint", "(", "StyleRow", "style", ",", "FeatureDrawType", "drawType", ")", "{", "Paint", "paint", "=", "featurePaintCache", ".", "getPaint", "(", "style", ",", "drawType", ")", ";", "if", "(", "paint", "==", "null", ")", "{", "Color", "color", "=", "null", ";", "Style", "paintStyle", "=", "null", ";", "Float", "strokeWidth", "=", "null", ";", "switch", "(", "drawType", ")", "{", "case", "CIRCLE", ":", "color", "=", "style", ".", "getColorOrDefault", "(", ")", ";", "paintStyle", "=", "Style", ".", "FILL", ";", "break", ";", "case", "STROKE", ":", "color", "=", "style", ".", "getColorOrDefault", "(", ")", ";", "paintStyle", "=", "Style", ".", "STROKE", ";", "strokeWidth", "=", "this", ".", "density", "*", "(", "float", ")", "style", ".", "getWidthOrDefault", "(", ")", ";", "break", ";", "case", "FILL", ":", "color", "=", "style", ".", "getFillColor", "(", ")", ";", "paintStyle", "=", "Style", ".", "FILL", ";", "strokeWidth", "=", "this", ".", "density", "*", "(", "float", ")", "style", ".", "getWidthOrDefault", "(", ")", ";", "break", ";", "default", ":", "throw", "new", "GeoPackageException", "(", "\"Unsupported Draw Type: \"", "+", "drawType", ")", ";", "}", "Paint", "stylePaint", "=", "new", "Paint", "(", ")", ";", "stylePaint", ".", "setAntiAlias", "(", "true", ")", ";", "stylePaint", ".", "setStyle", "(", "paintStyle", ")", ";", "stylePaint", ".", "setColor", "(", "color", ".", "getColorWithAlpha", "(", ")", ")", ";", "if", "(", "strokeWidth", "!=", "null", ")", "{", "stylePaint", ".", "setStrokeWidth", "(", "strokeWidth", ")", ";", "}", "synchronized", "(", "featurePaintCache", ")", "{", "paint", "=", "featurePaintCache", ".", "getPaint", "(", "style", ",", "drawType", ")", ";", "if", "(", "paint", "==", "null", ")", "{", "featurePaintCache", ".", "setPaint", "(", "style", ",", "drawType", ",", "stylePaint", ")", ";", "paint", "=", "stylePaint", ";", "}", "}", "}", "return", "paint", ";", "}"], "docstring": "Get the style paint from cache, or create and cache it\n\n@param style    style row\n@param drawType draw type\n@return paint", "docstring_tokens": ["Get", "the", "style", "paint", "from", "cache", "or", "create", "and", "cache", "it"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1555-L1605", "partition": "test", "index": 6011, "time": "2018-11-20 16:04:12"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.getFeatureStylePaint", "original_string": "private Paint getFeatureStylePaint(FeatureStyle featureStyle, FeatureDrawType drawType) {\n\n        Paint paint = null;\n\n        if (featureStyle != null) {\n\n            StyleRow style = featureStyle.getStyle();\n\n            if (style != null && style.hasColor()) {\n\n                paint = getStylePaint(style, drawType);\n\n            }\n        }\n\n        return paint;\n    }", "language": "java", "code": "private Paint getFeatureStylePaint(FeatureStyle featureStyle, FeatureDrawType drawType) {\n\n        Paint paint = null;\n\n        if (featureStyle != null) {\n\n            StyleRow style = featureStyle.getStyle();\n\n            if (style != null && style.hasColor()) {\n\n                paint = getStylePaint(style, drawType);\n\n            }\n        }\n\n        return paint;\n    }", "code_tokens": ["private", "Paint", "getFeatureStylePaint", "(", "FeatureStyle", "featureStyle", ",", "FeatureDrawType", "drawType", ")", "{", "Paint", "paint", "=", "null", ";", "if", "(", "featureStyle", "!=", "null", ")", "{", "StyleRow", "style", "=", "featureStyle", ".", "getStyle", "(", ")", ";", "if", "(", "style", "!=", "null", "&&", "style", ".", "hasColor", "(", ")", ")", "{", "paint", "=", "getStylePaint", "(", "style", ",", "drawType", ")", ";", "}", "}", "return", "paint", ";", "}"], "docstring": "Get the feature style paint from cache, or create and cache it\n\n@param featureStyle feature style\n@param drawType     draw type\n@return feature style paint", "docstring_tokens": ["Get", "the", "feature", "style", "paint", "from", "cache", "or", "create", "and", "cache", "it"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1530-L1546", "partition": "test", "index": 6010, "time": "2018-11-26 13:00:45"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java", "func_name": "UserMappingDao.uniqueBaseIds", "original_string": "public List<Long> uniqueBaseIds() {\n        return querySingleColumnTypedResults(\n                \"SELECT DISTINCT \" + CoreSQLUtils.quoteWrap(UserMappingTable.COLUMN_BASE_ID) + \" FROM \"\n                        + CoreSQLUtils.quoteWrap(getTableName()), null);\n    }", "language": "java", "code": "public List<Long> uniqueBaseIds() {\n        return querySingleColumnTypedResults(\n                \"SELECT DISTINCT \" + CoreSQLUtils.quoteWrap(UserMappingTable.COLUMN_BASE_ID) + \" FROM \"\n                        + CoreSQLUtils.quoteWrap(getTableName()), null);\n    }", "code_tokens": ["public", "List", "<", "Long", ">", "uniqueBaseIds", "(", ")", "{", "return", "querySingleColumnTypedResults", "(", "\"SELECT DISTINCT \"", "+", "CoreSQLUtils", ".", "quoteWrap", "(", "UserMappingTable", ".", "COLUMN_BASE_ID", ")", "+", "\" FROM \"", "+", "CoreSQLUtils", ".", "quoteWrap", "(", "getTableName", "(", ")", ")", ",", "null", ")", ";", "}"], "docstring": "Get the unique base ids\n\n@return list of unique base ids\n@since 3.2.0", "docstring_tokens": ["Get", "the", "unique", "base", "ids"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java#L183-L187", "partition": "test", "index": 6132, "time": "2018-11-27 16:05:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java", "func_name": "UserMappingDao.uniqueRelatedIds", "original_string": "public List<Long> uniqueRelatedIds() {\n        return querySingleColumnTypedResults(\n                \"SELECT DISTINCT \" + CoreSQLUtils.quoteWrap(UserMappingTable.COLUMN_RELATED_ID) + \" FROM \"\n                        + CoreSQLUtils.quoteWrap(getTableName()), null);\n    }", "language": "java", "code": "public List<Long> uniqueRelatedIds() {\n        return querySingleColumnTypedResults(\n                \"SELECT DISTINCT \" + CoreSQLUtils.quoteWrap(UserMappingTable.COLUMN_RELATED_ID) + \" FROM \"\n                        + CoreSQLUtils.quoteWrap(getTableName()), null);\n    }", "code_tokens": ["public", "List", "<", "Long", ">", "uniqueRelatedIds", "(", ")", "{", "return", "querySingleColumnTypedResults", "(", "\"SELECT DISTINCT \"", "+", "CoreSQLUtils", ".", "quoteWrap", "(", "UserMappingTable", ".", "COLUMN_RELATED_ID", ")", "+", "\" FROM \"", "+", "CoreSQLUtils", ".", "quoteWrap", "(", "getTableName", "(", ")", ")", ",", "null", ")", ";", "}"], "docstring": "Get the unique related ids\n\n@return list of unique related ids\n@since 3.2.0", "docstring_tokens": ["Get", "the", "unique", "related", "ids"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/UserMappingDao.java#L195-L199", "partition": "test", "index": 6133, "time": "2018-11-27 16:05:07"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/media/MediaRow.java", "func_name": "MediaRow.setData", "original_string": "public void setData(Bitmap bitmap, Bitmap.CompressFormat format, int quality)\n            throws IOException {\n        setData(BitmapConverter.toBytes(bitmap, format, quality));\n    }", "language": "java", "code": "public void setData(Bitmap bitmap, Bitmap.CompressFormat format, int quality)\n            throws IOException {\n        setData(BitmapConverter.toBytes(bitmap, format, quality));\n    }", "code_tokens": ["public", "void", "setData", "(", "Bitmap", "bitmap", ",", "Bitmap", ".", "CompressFormat", "format", ",", "int", "quality", ")", "throws", "IOException", "{", "setData", "(", "BitmapConverter", ".", "toBytes", "(", "bitmap", ",", "format", ",", "quality", ")", ")", ";", "}"], "docstring": "Set the data from a bitmap\n\n@param bitmap  bitmap\n@param format  compress format\n@param quality quality\n@throws IOException upon failure\n@since 3.2.0", "docstring_tokens": ["Set", "the", "data", "from", "a", "bitmap"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/media/MediaRow.java#L182-L185", "partition": "test", "index": 5928, "time": "2018-11-27 16:05:41"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/media/MediaRow.java", "func_name": "MediaRow.setData", "original_string": "public void setData(Bitmap bitmap, Bitmap.CompressFormat format)\n            throws IOException {\n        setData(bitmap, format, 100);\n    }", "language": "java", "code": "public void setData(Bitmap bitmap, Bitmap.CompressFormat format)\n            throws IOException {\n        setData(bitmap, format, 100);\n    }", "code_tokens": ["public", "void", "setData", "(", "Bitmap", "bitmap", ",", "Bitmap", ".", "CompressFormat", "format", ")", "throws", "IOException", "{", "setData", "(", "bitmap", ",", "format", ",", "100", ")", ";", "}"], "docstring": "Set the data from a full quality bitmap\n\n@param bitmap bitmap\n@param format compress format\n@throws IOException upon failure\n@since 3.2.0", "docstring_tokens": ["Set", "the", "data", "from", "a", "full", "quality", "bitmap"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/related/media/MediaRow.java#L168-L171", "partition": "test", "index": 5927, "time": "2018-11-27 16:05:41"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getAllIconIds", "original_string": "public List<Long> getAllIconIds(String featureTable) {\n        List<Long> iconIds = null;\n        StyleMappingDao mappingDao = getIconMappingDao(featureTable);\n        if (mappingDao != null) {\n            iconIds = mappingDao.uniqueRelatedIds();\n        }\n        return iconIds;\n    }", "language": "java", "code": "public List<Long> getAllIconIds(String featureTable) {\n        List<Long> iconIds = null;\n        StyleMappingDao mappingDao = getIconMappingDao(featureTable);\n        if (mappingDao != null) {\n            iconIds = mappingDao.uniqueRelatedIds();\n        }\n        return iconIds;\n    }", "code_tokens": ["public", "List", "<", "Long", ">", "getAllIconIds", "(", "String", "featureTable", ")", "{", "List", "<", "Long", ">", "iconIds", "=", "null", ";", "StyleMappingDao", "mappingDao", "=", "getIconMappingDao", "(", "featureTable", ")", ";", "if", "(", "mappingDao", "!=", "null", ")", "{", "iconIds", "=", "mappingDao", ".", "uniqueRelatedIds", "(", ")", ";", "}", "return", "iconIds", ";", "}"], "docstring": "Get all the unique icon row ids the features map to\n\n@param featureTable feature table\n@return icon row ids", "docstring_tokens": ["Get", "all", "the", "unique", "icon", "row", "ids", "the", "features", "map", "to"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1887-L1894", "partition": "test", "index": 6062, "time": "2018-11-27 16:06:10"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getAllStyleIds", "original_string": "public List<Long> getAllStyleIds(String featureTable) {\n        List<Long> styleIds = null;\n        StyleMappingDao mappingDao = getStyleMappingDao(featureTable);\n        if (mappingDao != null) {\n            styleIds = mappingDao.uniqueRelatedIds();\n        }\n        return styleIds;\n    }", "language": "java", "code": "public List<Long> getAllStyleIds(String featureTable) {\n        List<Long> styleIds = null;\n        StyleMappingDao mappingDao = getStyleMappingDao(featureTable);\n        if (mappingDao != null) {\n            styleIds = mappingDao.uniqueRelatedIds();\n        }\n        return styleIds;\n    }", "code_tokens": ["public", "List", "<", "Long", ">", "getAllStyleIds", "(", "String", "featureTable", ")", "{", "List", "<", "Long", ">", "styleIds", "=", "null", ";", "StyleMappingDao", "mappingDao", "=", "getStyleMappingDao", "(", "featureTable", ")", ";", "if", "(", "mappingDao", "!=", "null", ")", "{", "styleIds", "=", "mappingDao", ".", "uniqueRelatedIds", "(", ")", ";", "}", "return", "styleIds", ";", "}"], "docstring": "Get all the unique style row ids the features map to\n\n@param featureTable feature table\n@return style row ids", "docstring_tokens": ["Get", "all", "the", "unique", "style", "row", "ids", "the", "features", "map", "to"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1862-L1869", "partition": "test", "index": 6061, "time": "2018-11-27 16:06:10"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getAllTableIconIds", "original_string": "public List<Long> getAllTableIconIds(String featureTable) {\n        List<Long> iconIds = null;\n        StyleMappingDao mappingDao = getTableIconMappingDao(featureTable);\n        if (mappingDao != null) {\n            iconIds = mappingDao.uniqueRelatedIds();\n        }\n        return iconIds;\n    }", "language": "java", "code": "public List<Long> getAllTableIconIds(String featureTable) {\n        List<Long> iconIds = null;\n        StyleMappingDao mappingDao = getTableIconMappingDao(featureTable);\n        if (mappingDao != null) {\n            iconIds = mappingDao.uniqueRelatedIds();\n        }\n        return iconIds;\n    }", "code_tokens": ["public", "List", "<", "Long", ">", "getAllTableIconIds", "(", "String", "featureTable", ")", "{", "List", "<", "Long", ">", "iconIds", "=", "null", ";", "StyleMappingDao", "mappingDao", "=", "getTableIconMappingDao", "(", "featureTable", ")", ";", "if", "(", "mappingDao", "!=", "null", ")", "{", "iconIds", "=", "mappingDao", ".", "uniqueRelatedIds", "(", ")", ";", "}", "return", "iconIds", ";", "}"], "docstring": "Get all the unique icon row ids the table maps to\n\n@param featureTable feature table\n@return icon row ids", "docstring_tokens": ["Get", "all", "the", "unique", "icon", "row", "ids", "the", "table", "maps", "to"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1837-L1844", "partition": "test", "index": 6060, "time": "2018-11-27 16:06:10"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconRow.java", "func_name": "IconRow.getDerivedDimensions", "original_string": "public double[] getDerivedDimensions() {\n\n        Double width = getWidth();\n        Double height = getHeight();\n\n        if (width == null || height == null) {\n\n            BitmapFactory.Options options = getDataBounds();\n            int dataWidth = options.outWidth;\n            int dataHeight = options.outHeight;\n\n            if (width == null) {\n                width = (double) dataWidth;\n\n                if (height != null) {\n                    width *= (height / dataHeight);\n                }\n            }\n\n            if (height == null) {\n                height = (double) dataHeight;\n\n                if (width != null) {\n                    height *= (width / dataWidth);\n                }\n            }\n\n        }\n\n        return new double[]{width, height};\n    }", "language": "java", "code": "public double[] getDerivedDimensions() {\n\n        Double width = getWidth();\n        Double height = getHeight();\n\n        if (width == null || height == null) {\n\n            BitmapFactory.Options options = getDataBounds();\n            int dataWidth = options.outWidth;\n            int dataHeight = options.outHeight;\n\n            if (width == null) {\n                width = (double) dataWidth;\n\n                if (height != null) {\n                    width *= (height / dataHeight);\n                }\n            }\n\n            if (height == null) {\n                height = (double) dataHeight;\n\n                if (width != null) {\n                    height *= (width / dataWidth);\n                }\n            }\n\n        }\n\n        return new double[]{width, height};\n    }", "code_tokens": ["public", "double", "[", "]", "getDerivedDimensions", "(", ")", "{", "Double", "width", "=", "getWidth", "(", ")", ";", "Double", "height", "=", "getHeight", "(", ")", ";", "if", "(", "width", "==", "null", "||", "height", "==", "null", ")", "{", "BitmapFactory", ".", "Options", "options", "=", "getDataBounds", "(", ")", ";", "int", "dataWidth", "=", "options", ".", "outWidth", ";", "int", "dataHeight", "=", "options", ".", "outHeight", ";", "if", "(", "width", "==", "null", ")", "{", "width", "=", "(", "double", ")", "dataWidth", ";", "if", "(", "height", "!=", "null", ")", "{", "width", "*=", "(", "height", "/", "dataHeight", ")", ";", "}", "}", "if", "(", "height", "==", "null", ")", "{", "height", "=", "(", "double", ")", "dataHeight", ";", "if", "(", "width", "!=", "null", ")", "{", "height", "*=", "(", "width", "/", "dataWidth", ")", ";", "}", "}", "}", "return", "new", "double", "[", "]", "{", "width", ",", "height", "}", ";", "}"], "docstring": "Get the derived width and height from the values and icon data, scaled as\nneeded\n\n@return derived dimensions array with two values, width at index 0, height at index 1", "docstring_tokens": ["Get", "the", "derived", "width", "and", "height", "from", "the", "values", "and", "icon", "data", "scaled", "as", "needed"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/IconRow.java#L252-L282", "partition": "test", "index": 6080, "time": "2018-11-27 16:06:10"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java", "func_name": "FeatureStyleExtension.getAllTableStyleIds", "original_string": "public List<Long> getAllTableStyleIds(String featureTable) {\n        List<Long> styleIds = null;\n        StyleMappingDao mappingDao = getTableStyleMappingDao(featureTable);\n        if (mappingDao != null) {\n            styleIds = mappingDao.uniqueRelatedIds();\n        }\n        return styleIds;\n    }", "language": "java", "code": "public List<Long> getAllTableStyleIds(String featureTable) {\n        List<Long> styleIds = null;\n        StyleMappingDao mappingDao = getTableStyleMappingDao(featureTable);\n        if (mappingDao != null) {\n            styleIds = mappingDao.uniqueRelatedIds();\n        }\n        return styleIds;\n    }", "code_tokens": ["public", "List", "<", "Long", ">", "getAllTableStyleIds", "(", "String", "featureTable", ")", "{", "List", "<", "Long", ">", "styleIds", "=", "null", ";", "StyleMappingDao", "mappingDao", "=", "getTableStyleMappingDao", "(", "featureTable", ")", ";", "if", "(", "mappingDao", "!=", "null", ")", "{", "styleIds", "=", "mappingDao", ".", "uniqueRelatedIds", "(", ")", ";", "}", "return", "styleIds", ";", "}"], "docstring": "Get all the unique style row ids the table maps to\n\n@param featureTable feature table\n@return style row ids", "docstring_tokens": ["Get", "all", "the", "unique", "style", "row", "ids", "the", "table", "maps", "to"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/FeatureStyleExtension.java#L1812-L1819", "partition": "test", "index": 6059, "time": "2018-11-27 16:06:10"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleRow.java", "func_name": "StyleRow.getColorOrDefault", "original_string": "public Color getColorOrDefault() {\n        Color color = getColor();\n        if (color == null) {\n            color = new Color();\n        }\n        return color;\n    }", "language": "java", "code": "public Color getColorOrDefault() {\n        Color color = getColor();\n        if (color == null) {\n            color = new Color();\n        }\n        return color;\n    }", "code_tokens": ["public", "Color", "getColorOrDefault", "(", ")", "{", "Color", "color", "=", "getColor", "(", ")", ";", "if", "(", "color", "==", "null", ")", "{", "color", "=", "new", "Color", "(", ")", ";", "}", "return", "color", ";", "}"], "docstring": "Get the color or default value\n\n@return color", "docstring_tokens": ["Get", "the", "color", "or", "default", "value"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/extension/style/StyleRow.java#L213-L219", "partition": "test", "index": 6084, "time": "2018-11-28 13:24:51"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java", "func_name": "FeatureTileCanvas.getCanvas", "original_string": "private Canvas getCanvas(int layer) {\n        Canvas canvas = layeredCanvas[layer];\n        if (canvas == null) {\n            createBitmapAndCanvas(layer);\n            canvas = layeredCanvas[layer];\n        }\n        return canvas;\n    }", "language": "java", "code": "private Canvas getCanvas(int layer) {\n        Canvas canvas = layeredCanvas[layer];\n        if (canvas == null) {\n            createBitmapAndCanvas(layer);\n            canvas = layeredCanvas[layer];\n        }\n        return canvas;\n    }", "code_tokens": ["private", "Canvas", "getCanvas", "(", "int", "layer", ")", "{", "Canvas", "canvas", "=", "layeredCanvas", "[", "layer", "]", ";", "if", "(", "canvas", "==", "null", ")", "{", "createBitmapAndCanvas", "(", "layer", ")", ";", "canvas", "=", "layeredCanvas", "[", "layer", "]", ";", "}", "return", "canvas", ";", "}"], "docstring": "Get the canvas for the layer index\n\n@param layer layer index\n@return canvas", "docstring_tokens": ["Get", "the", "canvas", "for", "the", "layer", "index"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java#L206-L213", "partition": "test", "index": 6020, "time": "2018-11-28 16:04:06"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java", "func_name": "FeatureTileCanvas.createBitmap", "original_string": "public Bitmap createBitmap() {\n\n        Bitmap bitmap = null;\n        Canvas canvas = null;\n\n        for (int layer = 0; layer < 4; layer++) {\n\n            Bitmap layerBitmap = layeredBitmap[layer];\n\n            if (layerBitmap != null) {\n\n                if (bitmap == null) {\n                    bitmap = layerBitmap;\n                    canvas = layeredCanvas[layer];\n                } else {\n                    canvas.drawBitmap(layerBitmap, new Matrix(), null);\n                    layerBitmap.recycle();\n                }\n\n                layeredBitmap[layer] = null;\n                layeredCanvas[layer] = null;\n            }\n        }\n\n        return bitmap;\n    }", "language": "java", "code": "public Bitmap createBitmap() {\n\n        Bitmap bitmap = null;\n        Canvas canvas = null;\n\n        for (int layer = 0; layer < 4; layer++) {\n\n            Bitmap layerBitmap = layeredBitmap[layer];\n\n            if (layerBitmap != null) {\n\n                if (bitmap == null) {\n                    bitmap = layerBitmap;\n                    canvas = layeredCanvas[layer];\n                } else {\n                    canvas.drawBitmap(layerBitmap, new Matrix(), null);\n                    layerBitmap.recycle();\n                }\n\n                layeredBitmap[layer] = null;\n                layeredCanvas[layer] = null;\n            }\n        }\n\n        return bitmap;\n    }", "code_tokens": ["public", "Bitmap", "createBitmap", "(", ")", "{", "Bitmap", "bitmap", "=", "null", ";", "Canvas", "canvas", "=", "null", ";", "for", "(", "int", "layer", "=", "0", ";", "layer", "<", "4", ";", "layer", "++", ")", "{", "Bitmap", "layerBitmap", "=", "layeredBitmap", "[", "layer", "]", ";", "if", "(", "layerBitmap", "!=", "null", ")", "{", "if", "(", "bitmap", "==", "null", ")", "{", "bitmap", "=", "layerBitmap", ";", "canvas", "=", "layeredCanvas", "[", "layer", "]", ";", "}", "else", "{", "canvas", ".", "drawBitmap", "(", "layerBitmap", ",", "new", "Matrix", "(", ")", ",", "null", ")", ";", "layerBitmap", ".", "recycle", "(", ")", ";", "}", "layeredBitmap", "[", "layer", "]", "=", "null", ";", "layeredCanvas", "[", "layer", "]", "=", "null", ";", "}", "}", "return", "bitmap", ";", "}"], "docstring": "Create the final bitmap from the layers, resets the layers\n\n@return bitmap", "docstring_tokens": ["Create", "the", "final", "bitmap", "from", "the", "layers", "resets", "the", "layers"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java#L144-L169", "partition": "test", "index": 6017, "time": "2018-11-28 16:04:06"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java", "func_name": "FeatureTileCanvas.recycle", "original_string": "public void recycle() {\n        for (int layer = 0; layer < 4; layer++) {\n            Bitmap bitmap = layeredBitmap[layer];\n            if (bitmap != null) {\n                bitmap.recycle();\n                layeredBitmap[layer] = null;\n                layeredCanvas[layer] = null;\n            }\n        }\n    }", "language": "java", "code": "public void recycle() {\n        for (int layer = 0; layer < 4; layer++) {\n            Bitmap bitmap = layeredBitmap[layer];\n            if (bitmap != null) {\n                bitmap.recycle();\n                layeredBitmap[layer] = null;\n                layeredCanvas[layer] = null;\n            }\n        }\n    }", "code_tokens": ["public", "void", "recycle", "(", ")", "{", "for", "(", "int", "layer", "=", "0", ";", "layer", "<", "4", ";", "layer", "++", ")", "{", "Bitmap", "bitmap", "=", "layeredBitmap", "[", "layer", "]", ";", "if", "(", "bitmap", "!=", "null", ")", "{", "bitmap", ".", "recycle", "(", ")", ";", "layeredBitmap", "[", "layer", "]", "=", "null", ";", "layeredCanvas", "[", "layer", "]", "=", "null", ";", "}", "}", "}"], "docstring": "Recycle the layered bitmaps", "docstring_tokens": ["Recycle", "the", "layered", "bitmaps"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java#L174-L183", "partition": "test", "index": 6018, "time": "2018-11-28 16:04:06"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java", "func_name": "FeatureTileCanvas.getBitmap", "original_string": "private Bitmap getBitmap(int layer) {\n        Bitmap bitmap = layeredBitmap[layer];\n        if (bitmap == null) {\n            createBitmapAndCanvas(layer);\n            bitmap = layeredBitmap[layer];\n        }\n        return bitmap;\n    }", "language": "java", "code": "private Bitmap getBitmap(int layer) {\n        Bitmap bitmap = layeredBitmap[layer];\n        if (bitmap == null) {\n            createBitmapAndCanvas(layer);\n            bitmap = layeredBitmap[layer];\n        }\n        return bitmap;\n    }", "code_tokens": ["private", "Bitmap", "getBitmap", "(", "int", "layer", ")", "{", "Bitmap", "bitmap", "=", "layeredBitmap", "[", "layer", "]", ";", "if", "(", "bitmap", "==", "null", ")", "{", "createBitmapAndCanvas", "(", "layer", ")", ";", "bitmap", "=", "layeredBitmap", "[", "layer", "]", ";", "}", "return", "bitmap", ";", "}"], "docstring": "Get the bitmap for the layer index\n\n@param layer layer index\n@return bitmap", "docstring_tokens": ["Get", "the", "bitmap", "for", "the", "layer", "index"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java#L191-L198", "partition": "test", "index": 6019, "time": "2018-11-28 16:04:06"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java", "func_name": "FeatureTileCanvas.createBitmapAndCanvas", "original_string": "private void createBitmapAndCanvas(int layer) {\n        layeredBitmap[layer] = Bitmap.createBitmap(tileWidth,\n                tileHeight, Bitmap.Config.ARGB_8888);\n        layeredCanvas[layer] = new Canvas(layeredBitmap[layer]);\n    }", "language": "java", "code": "private void createBitmapAndCanvas(int layer) {\n        layeredBitmap[layer] = Bitmap.createBitmap(tileWidth,\n                tileHeight, Bitmap.Config.ARGB_8888);\n        layeredCanvas[layer] = new Canvas(layeredBitmap[layer]);\n    }", "code_tokens": ["private", "void", "createBitmapAndCanvas", "(", "int", "layer", ")", "{", "layeredBitmap", "[", "layer", "]", "=", "Bitmap", ".", "createBitmap", "(", "tileWidth", ",", "tileHeight", ",", "Bitmap", ".", "Config", ".", "ARGB_8888", ")", ";", "layeredCanvas", "[", "layer", "]", "=", "new", "Canvas", "(", "layeredBitmap", "[", "layer", "]", ")", ";", "}"], "docstring": "Create a new empty Bitmap and Canvas\n\n@param layer layer index", "docstring_tokens": ["Create", "a", "new", "empty", "Bitmap", "and", "Canvas"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileCanvas.java#L220-L224", "partition": "test", "index": 6021, "time": "2018-11-28 16:04:06"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeaturePaintCache.java", "func_name": "FeaturePaintCache.getPaint", "original_string": "public Paint getPaint(long styleId, FeatureDrawType type) {\n        Paint paint = null;\n        FeaturePaint featurePaint = getFeaturePaint(styleId);\n        if (featurePaint != null) {\n            paint = featurePaint.getPaint(type);\n        }\n        return paint;\n    }", "language": "java", "code": "public Paint getPaint(long styleId, FeatureDrawType type) {\n        Paint paint = null;\n        FeaturePaint featurePaint = getFeaturePaint(styleId);\n        if (featurePaint != null) {\n            paint = featurePaint.getPaint(type);\n        }\n        return paint;\n    }", "code_tokens": ["public", "Paint", "getPaint", "(", "long", "styleId", ",", "FeatureDrawType", "type", ")", "{", "Paint", "paint", "=", "null", ";", "FeaturePaint", "featurePaint", "=", "getFeaturePaint", "(", "styleId", ")", ";", "if", "(", "featurePaint", "!=", "null", ")", "{", "paint", "=", "featurePaint", ".", "getPaint", "(", "type", ")", ";", "}", "return", "paint", ";", "}"], "docstring": "Get the paint for the style row id and draw type\n\n@param styleId style row id\n@param type    feature draw type\n@return paint", "docstring_tokens": ["Get", "the", "paint", "for", "the", "style", "row", "id", "and", "draw", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeaturePaintCache.java#L98-L105", "partition": "test", "index": 6013, "time": "2018-11-29 13:51:57"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeaturePaintCache.java", "func_name": "FeaturePaintCache.getPaint", "original_string": "public Paint getPaint(StyleRow styleRow, FeatureDrawType type) {\n        return getPaint(styleRow.getId(), type);\n    }", "language": "java", "code": "public Paint getPaint(StyleRow styleRow, FeatureDrawType type) {\n        return getPaint(styleRow.getId(), type);\n    }", "code_tokens": ["public", "Paint", "getPaint", "(", "StyleRow", "styleRow", ",", "FeatureDrawType", "type", ")", "{", "return", "getPaint", "(", "styleRow", ".", "getId", "(", ")", ",", "type", ")", ";", "}"], "docstring": "Get the paint for the style row and draw type\n\n@param styleRow style row\n@param type     feature draw type\n@return paint", "docstring_tokens": ["Get", "the", "paint", "for", "the", "style", "row", "and", "draw", "type"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeaturePaintCache.java#L87-L89", "partition": "test", "index": 6012, "time": "2018-11-29 13:51:57"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileGenerator.java", "func_name": "FeatureTileGenerator.getBoundingBox", "original_string": "private static BoundingBox getBoundingBox(GeoPackage geoPackage,\n                                              FeatureTiles featureTiles, BoundingBox boundingBox,\n                                              Projection projection) {\n\n        String tableName = featureTiles.getFeatureDao().getTableName();\n        boolean manualQuery = boundingBox == null;\n        BoundingBox featureBoundingBox = geoPackage.getBoundingBox(projection,\n                tableName, manualQuery);\n        if (featureBoundingBox != null) {\n            if (boundingBox == null) {\n                boundingBox = featureBoundingBox;\n            } else {\n                boundingBox = boundingBox.overlap(featureBoundingBox);\n            }\n        }\n\n        if (boundingBox != null) {\n            boundingBox = featureTiles.expandBoundingBox(boundingBox,\n                    projection);\n        }\n\n        return boundingBox;\n    }", "language": "java", "code": "private static BoundingBox getBoundingBox(GeoPackage geoPackage,\n                                              FeatureTiles featureTiles, BoundingBox boundingBox,\n                                              Projection projection) {\n\n        String tableName = featureTiles.getFeatureDao().getTableName();\n        boolean manualQuery = boundingBox == null;\n        BoundingBox featureBoundingBox = geoPackage.getBoundingBox(projection,\n                tableName, manualQuery);\n        if (featureBoundingBox != null) {\n            if (boundingBox == null) {\n                boundingBox = featureBoundingBox;\n            } else {\n                boundingBox = boundingBox.overlap(featureBoundingBox);\n            }\n        }\n\n        if (boundingBox != null) {\n            boundingBox = featureTiles.expandBoundingBox(boundingBox,\n                    projection);\n        }\n\n        return boundingBox;\n    }", "code_tokens": ["private", "static", "BoundingBox", "getBoundingBox", "(", "GeoPackage", "geoPackage", ",", "FeatureTiles", "featureTiles", ",", "BoundingBox", "boundingBox", ",", "Projection", "projection", ")", "{", "String", "tableName", "=", "featureTiles", ".", "getFeatureDao", "(", ")", ".", "getTableName", "(", ")", ";", "boolean", "manualQuery", "=", "boundingBox", "==", "null", ";", "BoundingBox", "featureBoundingBox", "=", "geoPackage", ".", "getBoundingBox", "(", "projection", ",", "tableName", ",", "manualQuery", ")", ";", "if", "(", "featureBoundingBox", "!=", "null", ")", "{", "if", "(", "boundingBox", "==", "null", ")", "{", "boundingBox", "=", "featureBoundingBox", ";", "}", "else", "{", "boundingBox", "=", "boundingBox", ".", "overlap", "(", "featureBoundingBox", ")", ";", "}", "}", "if", "(", "boundingBox", "!=", "null", ")", "{", "boundingBox", "=", "featureTiles", ".", "expandBoundingBox", "(", "boundingBox", ",", "projection", ")", ";", "}", "return", "boundingBox", ";", "}"], "docstring": "Get the bounding box for the feature tile generator, from the provided\nand from the feature table\n\n@param geoPackage   GeoPackage\n@param featureTiles feature tiles\n@param boundingBox  bounding box\n@param projection   projection\n@return bounding box", "docstring_tokens": ["Get", "the", "bounding", "box", "for", "the", "feature", "tile", "generator", "from", "the", "provided", "and", "from", "the", "feature", "table"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTileGenerator.java#L124-L146", "partition": "test", "index": 6130, "time": "2018-12-05 15:59:03"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.queryIndexedFeatures", "original_string": "public FeatureIndexResults queryIndexedFeatures(int x, int y, int zoom) {\n\n        // Get the web mercator bounding box\n        BoundingBox webMercatorBoundingBox = TileBoundingBoxUtils\n                .getWebMercatorBoundingBox(x, y, zoom);\n\n        // Query for the geometries matching the bounds in the index\n        return queryIndexedFeatures(webMercatorBoundingBox);\n    }", "language": "java", "code": "public FeatureIndexResults queryIndexedFeatures(int x, int y, int zoom) {\n\n        // Get the web mercator bounding box\n        BoundingBox webMercatorBoundingBox = TileBoundingBoxUtils\n                .getWebMercatorBoundingBox(x, y, zoom);\n\n        // Query for the geometries matching the bounds in the index\n        return queryIndexedFeatures(webMercatorBoundingBox);\n    }", "code_tokens": ["public", "FeatureIndexResults", "queryIndexedFeatures", "(", "int", "x", ",", "int", "y", ",", "int", "zoom", ")", "{", "// Get the web mercator bounding box", "BoundingBox", "webMercatorBoundingBox", "=", "TileBoundingBoxUtils", ".", "getWebMercatorBoundingBox", "(", "x", ",", "y", ",", "zoom", ")", ";", "// Query for the geometries matching the bounds in the index", "return", "queryIndexedFeatures", "(", "webMercatorBoundingBox", ")", ";", "}"], "docstring": "Query for feature results in the x, y, and zoom level by querying features in the tile location\n\n@param x    x coordinate\n@param y    y coordinate\n@param zoom zoom level\n@return feature index results\n@since 3.2.0", "docstring_tokens": ["Query", "for", "feature", "results", "in", "the", "x", "y", "and", "zoom", "level", "by", "querying", "features", "in", "the", "tile", "location"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L1172-L1180", "partition": "test", "index": 6002, "time": "2018-12-05 15:59:03"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/FeatureCacheTables.java", "func_name": "FeatureCacheTables.remove", "original_string": "public FeatureRow remove(FeatureRow featureRow) {\n        return remove(featureRow.getTable().getTableName(), featureRow.getId());\n    }", "language": "java", "code": "public FeatureRow remove(FeatureRow featureRow) {\n        return remove(featureRow.getTable().getTableName(), featureRow.getId());\n    }", "code_tokens": ["public", "FeatureRow", "remove", "(", "FeatureRow", "featureRow", ")", "{", "return", "remove", "(", "featureRow", ".", "getTable", "(", ")", ".", "getTableName", "(", ")", ",", "featureRow", ".", "getId", "(", ")", ")", ";", "}"], "docstring": "Remove the cached feature row\n\n@param featureRow feature row\n@return removed feature row or null", "docstring_tokens": ["Remove", "the", "cached", "feature", "row"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/FeatureCacheTables.java#L142-L144", "partition": "test", "index": 6073, "time": "2019-01-03 16:37:16"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/FeatureCacheTables.java", "func_name": "FeatureCacheTables.clearAndResize", "original_string": "public void clearAndResize(int maxCacheSize) {\n        setMaxCacheSize(maxCacheSize);\n        for (FeatureCache cache : tableCache.values()) {\n            cache.clearAndResize(maxCacheSize);\n        }\n    }", "language": "java", "code": "public void clearAndResize(int maxCacheSize) {\n        setMaxCacheSize(maxCacheSize);\n        for (FeatureCache cache : tableCache.values()) {\n            cache.clearAndResize(maxCacheSize);\n        }\n    }", "code_tokens": ["public", "void", "clearAndResize", "(", "int", "maxCacheSize", ")", "{", "setMaxCacheSize", "(", "maxCacheSize", ")", ";", "for", "(", "FeatureCache", "cache", ":", "tableCache", ".", "values", "(", ")", ")", "{", "cache", ".", "clearAndResize", "(", "maxCacheSize", ")", ";", "}", "}"], "docstring": "Clear and resize all caches and update the max cache size\n\n@param maxCacheSize max cache size", "docstring_tokens": ["Clear", "and", "resize", "all", "caches", "and", "update", "the", "max", "cache", "size"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/FeatureCacheTables.java#L212-L217", "partition": "test", "index": 6074, "time": "2019-01-03 16:37:16"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/FeatureCacheTables.java", "func_name": "FeatureCacheTables.getCache", "original_string": "public FeatureCache getCache(String tableName) {\n        FeatureCache cache = tableCache.get(tableName);\n        if (cache == null) {\n            cache = new FeatureCache(maxCacheSize);\n            tableCache.put(tableName, cache);\n        }\n        return cache;\n    }", "language": "java", "code": "public FeatureCache getCache(String tableName) {\n        FeatureCache cache = tableCache.get(tableName);\n        if (cache == null) {\n            cache = new FeatureCache(maxCacheSize);\n            tableCache.put(tableName, cache);\n        }\n        return cache;\n    }", "code_tokens": ["public", "FeatureCache", "getCache", "(", "String", "tableName", ")", "{", "FeatureCache", "cache", "=", "tableCache", ".", "get", "(", "tableName", ")", ";", "if", "(", "cache", "==", "null", ")", "{", "cache", "=", "new", "FeatureCache", "(", "maxCacheSize", ")", ";", "tableCache", ".", "put", "(", "tableName", ",", "cache", ")", ";", "}", "return", "cache", ";", "}"], "docstring": "Get or create a feature row cache for the table name\n\n@param tableName feature table name\n@return feature row cache", "docstring_tokens": ["Get", "or", "create", "a", "feature", "row", "cache", "for", "the", "table", "name"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/features/user/FeatureCacheTables.java#L76-L83", "partition": "test", "index": 6072, "time": "2019-01-03 16:37:16"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileUtils.java", "func_name": "TileUtils.tileDensity", "original_string": "public static float tileDensity(float density, int tileWidth, int tileHeight) {\n        return tileDensity(density, Math.min(tileWidth, tileHeight));\n    }", "language": "java", "code": "public static float tileDensity(float density, int tileWidth, int tileHeight) {\n        return tileDensity(density, Math.min(tileWidth, tileHeight));\n    }", "code_tokens": ["public", "static", "float", "tileDensity", "(", "float", "density", ",", "int", "tileWidth", ",", "int", "tileHeight", ")", "{", "return", "tileDensity", "(", "density", ",", "Math", ".", "min", "(", "tileWidth", ",", "tileHeight", ")", ")", ";", "}"], "docstring": "Get the tile density based upon the display density scale and tile dimensions\n\n@param density    display density: {@link android.util.DisplayMetrics#density}\n@param tileWidth  tile width\n@param tileHeight tile height\n@return tile density", "docstring_tokens": ["Get", "the", "tile", "density", "based", "upon", "the", "display", "density", "scale", "and", "tile", "dimensions"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/TileUtils.java#L57-L59", "partition": "test", "index": 6081, "time": "2019-03-05 16:31:11"}
{"repo": "ngageoint/geopackage-android", "path": "geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java", "func_name": "FeatureTiles.setDensity", "original_string": "public void setDensity(float density) {\n        this.density = density;\n        linePaint.setStrokeWidth(this.density * lineStrokeWidth);\n        polygonPaint.setStrokeWidth(this.density * polygonStrokeWidth);\n        featurePaintCache.clear();\n    }", "language": "java", "code": "public void setDensity(float density) {\n        this.density = density;\n        linePaint.setStrokeWidth(this.density * lineStrokeWidth);\n        polygonPaint.setStrokeWidth(this.density * polygonStrokeWidth);\n        featurePaintCache.clear();\n    }", "code_tokens": ["public", "void", "setDensity", "(", "float", "density", ")", "{", "this", ".", "density", "=", "density", ";", "linePaint", ".", "setStrokeWidth", "(", "this", ".", "density", "*", "lineStrokeWidth", ")", ";", "polygonPaint", ".", "setStrokeWidth", "(", "this", ".", "density", "*", "polygonStrokeWidth", ")", ";", "featurePaintCache", ".", "clear", "(", ")", ";", "}"], "docstring": "Set the density\n\n@param density density\n@since 3.2.0", "docstring_tokens": ["Set", "the", "density"], "sha": "d19e9fcc636462c0f0ae1b7eca4acafae48de21b", "url": "https://github.com/ngageoint/geopackage-android/blob/d19e9fcc636462c0f0ae1b7eca4acafae48de21b/geopackage-sdk/src/main/java/mil/nga/geopackage/tiles/features/FeatureTiles.java#L427-L432", "partition": "test", "index": 5994, "time": "2019-03-07 12:55:41"}
