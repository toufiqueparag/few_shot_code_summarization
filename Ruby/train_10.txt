def get_stream_auth_by_songid ( song_id ) result = request ( 'getStreamKeyFromSongIDEx' , 'type' => 0 , 'prefetch' => false , 'songID' => song_id , 'country' => @country , 'mobile' => false ) if result == [ ] fail GeneralError , 'No data for this song. ' 'Maybe Grooveshark banned your IP.' end result end	<s> Get stream authentication by song ID </s>
def finish_request File . open ( @path_to_request , 'w' ) do | f | #jam dat header in there f . puts ( build_request_header ( ) ) #read into the request file from the batches file File . foreach ( @path_to_batches ) do | li | f . puts li end #finally, let's poot in a header, for old time's sake f . puts '</litleRequest>' end #rename the requests file File . rename ( @path_to_request , @path_to_request + COMPLETE_FILE_SUFFIX ) #we don't need the master batch file anymore File . delete ( @path_to_batches ) end	<s> Called when you wish to finish adding batches to your request this method rewrites the aggregate batch file to the final LitleRequest xml doc with the appropos LitleRequest tags . </s>
def multiply_by ( string ) return minute_mult ( string ) || hour_mult ( string ) || day_mult ( string ) || week_mult ( string ) || month_mult ( string ) || year_mult ( string ) || 1 end	<s> Returns seconds to multiply by for the given string </s>
def golomb_rice_encode ( bit_writer , p , x ) q = x >> p while q > 0 nbits = q <= 64 ? q : 64 bit_writer . write ( - 1 , nbits ) # 18446744073709551615 is 2**64 - 1 = ~0ULL in cpp. q -= nbits end bit_writer . write ( 0 , 1 ) bit_writer . write ( x , p ) end	<s> encode golomb rice </s>
def friendly_instance_present? ( friendly_model ) friendly_model_ivar = DetailsDelegator . friendly_model_ivar ( friendly_model ) val = instance_variable_get ( friendly_model_ivar ) val . present? end	<s> Returns true if the FriendlyAttributes specified instance is loaded . </s>
def set_owner return unless owner || group chown = command? 'chown' return unless chown cmd = [ chown , '-R' , "#{owner}:#{group}" , destination_path ] logger . debug { "Running command: #{cmd.join ' '}" } system ( cmd ) end	<s> Recursively sets file owner and group . </s>
def get_by_scope ( scope , lock_name , custom_headers : nil ) response = get_by_scope_async ( scope , lock_name , custom_headers :custom_headers ) . value! response . body unless response . nil? end	<s> Get a management lock by scope . </s>
def wait_for_result ( message ) res = nil message_id = message . msg_id @pending [ message_id ] = Time . now while res . nil? @response_lock . synchronize { # Prune messages that timed out if @timeout now = Time . now @pending . delete_if { | _ , start_time | ( now - start_time ) > @timeout } end pending_ids = @pending . keys fail 'Timed out' unless pending_ids . include? message_id # Prune invalid responses @responses . keep_if { | response | @pending . has_key? response . first } res = @responses . find { | response | message . msg_id == response . first } if ! res . nil? @responses . delete ( res ) else @response_cv . wait @response_lock , @wait_interval end } end return res end	<s> Internal helper block until response matching message id is received </s>
def getAlternateProperties response = conncetion . get do | req | req . url "altProps" , options end return_error_or_body ( response , response . body ) end	<s> Request Alternate Properties </s>
def require ( file ) return if key? ( file ) self [ file ] = deps ( file ) self [ file ] . each do | dependency | self . require dependency end end	<s> Add the given file to this graph . Creates a new entry in the graph the key of which is the relative path to this file and the value is the array of relative paths to its dependencies . Any dependent files will also be recursively added to this graph . </s>
