private function doesStatementProduceOutput ( $ query ) { $ allowedCommands = [ // Data Manipulation Statements 'SELECT' , // Commands for Prepared Statements 'EXECUTE' , // Statements for Condition Handling 'GET' , // Database Administration Statements 'SHOW' , 'CHECKSUM' , // MySQL Utility Statements 'DESCRIBE' , 'EXPLAIN' , 'HELP' , ] ; $ command = $ this -> getFirstCommandInStatement ( $ query ) ; return in_array ( $ command , $ allowedCommands ) ; }	<s> Return true if the given SQL statement is a statement that may produce any output . </s>
protected function makeDataScript ( array $ data ) { $ script = '' ; foreach ( $ data as $ key => $ value ) { $ script .= PHP_EOL . "data.{$key} = '{$value}';" ; } return $ script ; }	<s> Make a data script to be appended on ajax request of dataTables . </s>
protected function setAddressAttribute ( $ items ) { if ( is_array ( $ items ) === false ) { return $ items ; } return $ this -> getNestedContext ( PostalAddress :: class , $ items ) ; }	<s> Set the address </s>
public function createAction ( Request $ request ) { $ formManager = $ this -> get ( 'opifer.form.form_manager' ) ; $ form = $ formManager -> create ( ) ; $ formType = $ this -> createForm ( FormType :: class , $ form ) ; $ formType -> handleRequest ( $ request ) ; if ( $ formType -> isSubmitted ( ) && $ formType -> isValid ( ) ) { foreach ( $ formType -> getData ( ) -> getSchema ( ) -> getAttributes ( ) as $ attribute ) { $ attribute -> setSchema ( $ form -> getSchema ( ) ) ; foreach ( $ attribute -> getOptions ( ) as $ option ) { $ option -> setAttribute ( $ attribute ) ; } } $ formManager -> save ( $ form ) ; $ this -> addFlash ( 'success' , 'Form has been created successfully' ) ; return $ this -> redirectToRoute ( 'opifer_form_form_edit' , [ 'id' => $ form -> getId ( ) ] ) ; } return $ this -> render ( $ this -> getParameter ( 'opifer_form.form_create_view' ) , [ 'form' => $ form , 'form_form' => $ formType -> createView ( ) , ] ) ; }	<s> Create a form . </s>
public function imageButton ( ImageButton $ button ) { $ tag = new Tag ( 'input' ) ; $ tag -> setAttribute ( 'type' , 'image' ) ; $ tag -> setAttribute ( 'src' , $ button -> getSrc ( ) ) ; $ tag -> setAttribute ( 'alt' , $ button -> getAlt ( ) ) ; return $ this -> parseTag ( $ tag , $ button ) ; }	<s> Render an ImageButton </s>
public function request ( $ url , array $ params = [ ] ) { $ curl = new Curl ( ) ; $ query = $ this -> buildQuery ( $ params ) ; $ curl -> setOptions ( $ this -> url . $ url , $ query , $ this -> port ) ; $ response = $ curl -> exec ( ) ; $ this -> setResponse ( $ response ) ; $ this -> setErrors ( $ response ) ; return $ this ; }	<s> Send a curl request </s>
public function addColumn ( $ data ) { if ( $ data instanceof Column ) { $ column = $ data ; $ this -> indexColumns [ ] = $ column -> getName ( ) ; if ( $ column -> getSize ( ) ) { $ this -> indexColumnSizes [ $ column -> getName ( ) ] = $ column -> getSize ( ) ; } } else { $ attrib = $ data ; $ name = $ attrib [ "name" ] ; $ this -> indexColumns [ ] = $ name ; if ( isset ( $ attrib [ "size" ] ) ) { $ this -> indexColumnSizes [ $ name ] = $ attrib [ "size" ] ; } } }	<s> Adds a new column to an index . </s>
public function configureFolderPage ( $ dc ) { if ( null === $ dc -> activeRecord || 'folder' !== $ dc -> activeRecord -> type ) { return ; } $ this -> db -> update ( 'tl_page' , [ 'alias' => '' , 'noSearch' => '1' , 'sitemap' => 'map_never' , 'published' => '1' , 'start' => '' , 'stop' => '' , ] , [ 'id' => $ dc -> id , ] ) ; }	<s> Sets fixed configuration for a folder page . </s>
public function ask ( $ question , $ default = null ) { $ que = new Question ( $ question , $ default ) ; $ helper = new SymfonyQuestionHelper ( ) ; return $ helper -> ask ( $ this -> input , $ this -> output , $ que ) ; }	<s> Ask string param from stdin php input </s>
public function orderBy ( string $ column , string $ order = 'ASC' ) : CollectionInterface { return $ this -> sort ( function ( $ a , $ b ) use ( $ column , $ order ) { if ( strtoupper ( $ order ) == 'ASC' ) { return $ a [ $ column ] <=> $ b [ $ column ] ; } elseif ( strtoupper ( $ order ) == 'DESC' ) { return $ b [ $ column ] <=> $ a [ $ column ] ; } // Must throw exception if item column does not exists } ) ; }	<s> Returns a new Collection containing the items ordered by the especified column . </s>
