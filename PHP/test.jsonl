{"repo": "vanilla/garden", "path": "src/ResourceRoute.php", "func_name": "ResourceRoute.actionExists", "original_string": "protected function actionExists($object, $action, $method = '', $special = false) {\n        if ($special && in_array($action, self::$specialActions)) {\n            return '';\n        }\n\n        // Short circuit on a badly named action.\n        if (!$this->isIdentifier($action)) {\n            return '';\n        }\n\n        if ($method && $method !== $action) {\n            $calledAction = $method.$action;\n            if (Event::methodExists($object, $calledAction)) {\n                return $calledAction;\n            }\n        }\n        $calledAction = $action;\n        if (Event::methodExists($object, $calledAction)) {\n            return $calledAction;\n        }\n        return '';\n    }", "language": "php", "code": "protected function actionExists($object, $action, $method = '', $special = false) {\n        if ($special && in_array($action, self::$specialActions)) {\n            return '';\n        }\n\n        // Short circuit on a badly named action.\n        if (!$this->isIdentifier($action)) {\n            return '';\n        }\n\n        if ($method && $method !== $action) {\n            $calledAction = $method.$action;\n            if (Event::methodExists($object, $calledAction)) {\n                return $calledAction;\n            }\n        }\n        $calledAction = $action;\n        if (Event::methodExists($object, $calledAction)) {\n            return $calledAction;\n        }\n        return '';\n    }", "code_tokens": ["protected", "function", "actionExists", "(", "$", "object", ",", "$", "action", ",", "$", "method", "=", "''", ",", "$", "special", "=", "false", ")", "{", "if", "(", "$", "special", "&&", "in_array", "(", "$", "action", ",", "self", "::", "$", "specialActions", ")", ")", "{", "return", "''", ";", "}", "// Short circuit on a badly named action.", "if", "(", "!", "$", "this", "->", "isIdentifier", "(", "$", "action", ")", ")", "{", "return", "''", ";", "}", "if", "(", "$", "method", "&&", "$", "method", "!==", "$", "action", ")", "{", "$", "calledAction", "=", "$", "method", ".", "$", "action", ";", "if", "(", "Event", "::", "methodExists", "(", "$", "object", ",", "$", "calledAction", ")", ")", "{", "return", "$", "calledAction", ";", "}", "}", "$", "calledAction", "=", "$", "action", ";", "if", "(", "Event", "::", "methodExists", "(", "$", "object", ",", "$", "calledAction", ")", ")", "{", "return", "$", "calledAction", ";", "}", "return", "''", ";", "}"], "docstring": "Tests whether a controller action exists.\n\n@param object $object The controller object that the method should be on.\n@param string $action The name of the action.\n@param string $method The http method.\n@param bool $special Whether or not to blacklist the special methods.\n@return string Returns the name of the action method or an empty string if it doesn't exist.", "docstring_tokens": ["Tests", "whether", "a", "controller", "action", "exists", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/ResourceRoute.php#L234-L255", "partition": "test"}
{"repo": "DevGroup-ru/yii2-extensions-manager", "path": "src/models/BaseConfigurationModel.php", "func_name": "BaseConfigurationModel.saveState", "original_string": "public function saveState($statePath)\n    {\n        $filename = Yii::getAlias($statePath . $this->stateFilename() . '.php');\n        $writer = new ApplicationConfigWriter([\n            'filename' => $filename,\n        ]);\n        $writer->configuration = $this->getAttributesForStateSaving();\n        $result =  $writer->commit();\n        return $result;\n    }", "language": "php", "code": "public function saveState($statePath)\n    {\n        $filename = Yii::getAlias($statePath . $this->stateFilename() . '.php');\n        $writer = new ApplicationConfigWriter([\n            'filename' => $filename,\n        ]);\n        $writer->configuration = $this->getAttributesForStateSaving();\n        $result =  $writer->commit();\n        return $result;\n    }", "code_tokens": ["public", "function", "saveState", "(", "$", "statePath", ")", "{", "$", "filename", "=", "Yii", "::", "getAlias", "(", "$", "statePath", ".", "$", "this", "->", "stateFilename", "(", ")", ".", "'.php'", ")", ";", "$", "writer", "=", "new", "ApplicationConfigWriter", "(", "[", "'filename'", "=>", "$", "filename", ",", "]", ")", ";", "$", "writer", "->", "configuration", "=", "$", "this", "->", "getAttributesForStateSaving", "(", ")", ";", "$", "result", "=", "$", "writer", "->", "commit", "(", ")", ";", "return", "$", "result", ";", "}"], "docstring": "Saves state to file\n@param string $statePath Path where model state files are stored.\n@return bool", "docstring_tokens": ["Saves", "state", "to", "file"], "sha": "25bce89ee085af217c07b779db9fbcd87172b75e", "url": "https://github.com/DevGroup-ru/yii2-extensions-manager/blob/25bce89ee085af217c07b779db9fbcd87172b75e/src/models/BaseConfigurationModel.php#L132-L141", "partition": "test"}
{"repo": "wazsmwazsm/WorkerF", "path": "src/WorkerF/DB/Drivers/PDODriver.php", "func_name": "PDODriver._storeBuildAttr", "original_string": "protected function _storeBuildAttr()\n    {\n        // attribute need to store\n        $store = [];\n        // store attr\n        foreach ($this->_buildAttrs as $buildAttr) {\n            $store[$buildAttr] = $this->$buildAttr;\n        }\n\n        return $store;\n    }", "language": "php", "code": "protected function _storeBuildAttr()\n    {\n        // attribute need to store\n        $store = [];\n        // store attr\n        foreach ($this->_buildAttrs as $buildAttr) {\n            $store[$buildAttr] = $this->$buildAttr;\n        }\n\n        return $store;\n    }", "code_tokens": ["protected", "function", "_storeBuildAttr", "(", ")", "{", "// attribute need to store", "$", "store", "=", "[", "]", ";", "// store attr", "foreach", "(", "$", "this", "->", "_buildAttrs", "as", "$", "buildAttr", ")", "{", "$", "store", "[", "$", "buildAttr", "]", "=", "$", "this", "->", "$", "buildAttr", ";", "}", "return", "$", "store", ";", "}"], "docstring": "store build attr to tmp\n\n@return  array", "docstring_tokens": ["store", "build", "attr", "to", "tmp"], "sha": "5982934d6beb59b3e3e4071be9bbbd4e16247dba", "url": "https://github.com/wazsmwazsm/WorkerF/blob/5982934d6beb59b3e3e4071be9bbbd4e16247dba/src/WorkerF/DB/Drivers/PDODriver.php#L544-L554", "partition": "test"}
{"repo": "xloit/xloit-bridge-zend-session", "path": "src/SaveHandler/Database/DatabaseOptions.php", "func_name": "DatabaseOptions.setIdColumn", "original_string": "public function setIdColumn($idColumn)\n    {\n        $idColumn = (string) $idColumn;\n\n        /** @noinspection IsEmptyFunctionUsageInspection */\n        if (empty($idColumn)) {\n            throw new Exception\\InvalidArgumentException('ID column must be a non-empty string.');\n        }\n\n        $this->idColumn = $idColumn;\n\n        return $this;\n    }", "language": "php", "code": "public function setIdColumn($idColumn)\n    {\n        $idColumn = (string) $idColumn;\n\n        /** @noinspection IsEmptyFunctionUsageInspection */\n        if (empty($idColumn)) {\n            throw new Exception\\InvalidArgumentException('ID column must be a non-empty string.');\n        }\n\n        $this->idColumn = $idColumn;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setIdColumn", "(", "$", "idColumn", ")", "{", "$", "idColumn", "=", "(", "string", ")", "$", "idColumn", ";", "/** @noinspection IsEmptyFunctionUsageInspection */", "if", "(", "empty", "(", "$", "idColumn", ")", ")", "{", "throw", "new", "Exception", "\\", "InvalidArgumentException", "(", "'ID column must be a non-empty string.'", ")", ";", "}", "$", "this", "->", "idColumn", "=", "$", "idColumn", ";", "return", "$", "this", ";", "}"], "docstring": "Sets the IdColumn value.\n\n@param string $idColumn\n\n@return $this\n@throws \\Xloit\\Bridge\\Zend\\Session\\Exception\\InvalidArgumentException", "docstring_tokens": ["Sets", "the", "IdColumn", "value", "."], "sha": "9697c5a4a273999514c53500edbeb1f0cc3a0fd9", "url": "https://github.com/xloit/xloit-bridge-zend-session/blob/9697c5a4a273999514c53500edbeb1f0cc3a0fd9/src/SaveHandler/Database/DatabaseOptions.php#L147-L159", "partition": "test"}
{"repo": "bariew/yii2-module-cms-module", "path": "models/CloneModel.php", "func_name": "CloneModel.findAliases", "original_string": "public static function findAliases($query)\n    {\n        $query = '@' . str_replace('@', '', $query);\n        $pattern = '/' . preg_quote($query, '/') . '/';\n        return preg_grep($pattern, self::aliasList());\n    }", "language": "php", "code": "public static function findAliases($query)\n    {\n        $query = '@' . str_replace('@', '', $query);\n        $pattern = '/' . preg_quote($query, '/') . '/';\n        return preg_grep($pattern, self::aliasList());\n    }", "code_tokens": ["public", "static", "function", "findAliases", "(", "$", "query", ")", "{", "$", "query", "=", "'@'", ".", "str_replace", "(", "'@'", ",", "''", ",", "$", "query", ")", ";", "$", "pattern", "=", "'/'", ".", "preg_quote", "(", "$", "query", ",", "'/'", ")", ".", "'/'", ";", "return", "preg_grep", "(", "$", "pattern", ",", "self", "::", "aliasList", "(", ")", ")", ";", "}"], "docstring": "Searches all path aliases.\n@param string $query search string started with @\n@return array found system path aliases matching search query.", "docstring_tokens": ["Searches", "all", "path", "aliases", "."], "sha": "a0543c9f453baf85eda64fc5ec7429e9a38e8112", "url": "https://github.com/bariew/yii2-module-cms-module/blob/a0543c9f453baf85eda64fc5ec7429e9a38e8112/models/CloneModel.php#L105-L110", "partition": "test"}
{"repo": "APY/APYDataGridBundle", "path": "Grid/GridFactory.php", "func_name": "GridFactory.resolveType", "original_string": "private function resolveType($type)\n    {\n        if (!$type instanceof GridTypeInterface) {\n            if (!is_string($type)) {\n                throw new UnexpectedTypeException($type, 'string, APY\\DataGridBundle\\Grid\\GridTypeInterface');\n            }\n\n            $type = $this->registry->getType($type);\n        }\n\n        return $type;\n    }", "language": "php", "code": "private function resolveType($type)\n    {\n        if (!$type instanceof GridTypeInterface) {\n            if (!is_string($type)) {\n                throw new UnexpectedTypeException($type, 'string, APY\\DataGridBundle\\Grid\\GridTypeInterface');\n            }\n\n            $type = $this->registry->getType($type);\n        }\n\n        return $type;\n    }", "code_tokens": ["private", "function", "resolveType", "(", "$", "type", ")", "{", "if", "(", "!", "$", "type", "instanceof", "GridTypeInterface", ")", "{", "if", "(", "!", "is_string", "(", "$", "type", ")", ")", "{", "throw", "new", "UnexpectedTypeException", "(", "$", "type", ",", "'string, APY\\DataGridBundle\\Grid\\GridTypeInterface'", ")", ";", "}", "$", "type", "=", "$", "this", "->", "registry", "->", "getType", "(", "$", "type", ")", ";", "}", "return", "$", "type", ";", "}"], "docstring": "Returns an instance of type.\n\n@param string|GridTypeInterface $type The type of the grid\n\n@return GridTypeInterface", "docstring_tokens": ["Returns", "an", "instance", "of", "type", "."], "sha": "03050b366a79553b014aa4297d31b585a84622a3", "url": "https://github.com/APY/APYDataGridBundle/blob/03050b366a79553b014aa4297d31b585a84622a3/Grid/GridFactory.php#L99-L110", "partition": "test"}
{"repo": "MichaelRShelton/middleman", "path": "src/Concerns/HasMiddleware.php", "func_name": "HasMiddleware.middleware", "original_string": "protected function middleware(string $key = null, string $group = Group::DEFAULT_ID)\n    {\n        $middleware = $this->middleMan->getGroup($group)->get($key);\n        if ($middleware) {\n            $this->result = $this->then($middleware);\n        }\n        return $this->resultUnlessChainable();\n    }", "language": "php", "code": "protected function middleware(string $key = null, string $group = Group::DEFAULT_ID)\n    {\n        $middleware = $this->middleMan->getGroup($group)->get($key);\n        if ($middleware) {\n            $this->result = $this->then($middleware);\n        }\n        return $this->resultUnlessChainable();\n    }", "code_tokens": ["protected", "function", "middleware", "(", "string", "$", "key", "=", "null", ",", "string", "$", "group", "=", "Group", "::", "DEFAULT_ID", ")", "{", "$", "middleware", "=", "$", "this", "->", "middleMan", "->", "getGroup", "(", "$", "group", ")", "->", "get", "(", "$", "key", ")", ";", "if", "(", "$", "middleware", ")", "{", "$", "this", "->", "result", "=", "$", "this", "->", "then", "(", "$", "middleware", ")", ";", "}", "return", "$", "this", "->", "resultUnlessChainable", "(", ")", ";", "}"], "docstring": "Resolve the defined middleware and include it here if it exists.\n\n@param string|null $key\n@param string $group\n@return mixed", "docstring_tokens": ["Resolve", "the", "defined", "middleware", "and", "include", "it", "here", "if", "it", "exists", "."], "sha": "b67140be2f39a32a27f5a0a9b2498ab3444835ba", "url": "https://github.com/MichaelRShelton/middleman/blob/b67140be2f39a32a27f5a0a9b2498ab3444835ba/src/Concerns/HasMiddleware.php#L380-L387", "partition": "test"}
{"repo": "PHPExif/php-exif", "path": "lib/PHPExif/Exif.php", "func_name": "Exif.getTitle", "original_string": "public function getTitle()\n    {\n        if (!isset($this->data[self::TITLE])) {\n            return false;\n        }\n\n        return $this->data[self::TITLE];\n    }", "language": "php", "code": "public function getTitle()\n    {\n        if (!isset($this->data[self::TITLE])) {\n            return false;\n        }\n\n        return $this->data[self::TITLE];\n    }", "code_tokens": ["public", "function", "getTitle", "(", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "data", "[", "self", "::", "TITLE", "]", ")", ")", "{", "return", "false", ";", "}", "return", "$", "this", "->", "data", "[", "self", "::", "TITLE", "]", ";", "}"], "docstring": "Returns the title, if it exists\n\n@return string|boolean", "docstring_tokens": ["Returns", "the", "title", "if", "it", "exists"], "sha": "41f23db39d7b48e4af0e134c2e80e577c1782ac9", "url": "https://github.com/PHPExif/php-exif/blob/41f23db39d7b48e4af0e134c2e80e577c1782ac9/lib/PHPExif/Exif.php#L444-L451", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Client/GuzzleClient.php", "func_name": "GuzzleClient.patch", "original_string": "public function patch(string $uri, array $options = []): ResponseInterface\n    {\n        return $this->guzzle->patch($uri, $options);\n    }", "language": "php", "code": "public function patch(string $uri, array $options = []): ResponseInterface\n    {\n        return $this->guzzle->patch($uri, $options);\n    }", "code_tokens": ["public", "function", "patch", "(", "string", "$", "uri", ",", "array", "$", "options", "=", "[", "]", ")", ":", "ResponseInterface", "{", "return", "$", "this", "->", "guzzle", "->", "patch", "(", "$", "uri", ",", "$", "options", ")", ";", "}"], "docstring": "Make a patch request.\n\n@param string $uri     The uri to request\n@param array  $options [optional] Custom options for request\n\n@return \\Psr\\Http\\Message\\ResponseInterface", "docstring_tokens": ["Make", "a", "patch", "request", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Client/GuzzleClient.php#L119-L122", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/Image.php", "func_name": "Image.setFormatExt", "original_string": "protected function setFormatExt(string $file, string $format): string\n    {\n        return $this->c::setFileExt($file, $this->formatToExt($format));\n    }", "language": "php", "code": "protected function setFormatExt(string $file, string $format): string\n    {\n        return $this->c::setFileExt($file, $this->formatToExt($format));\n    }", "code_tokens": ["protected", "function", "setFormatExt", "(", "string", "$", "file", ",", "string", "$", "format", ")", ":", "string", "{", "return", "$", "this", "->", "c", "::", "setFileExt", "(", "$", "file", ",", "$", "this", "->", "formatToExt", "(", "$", "format", ")", ")", ";", "}"], "docstring": "Set format extension.\n\n@since 17xxxx Imagick utils.\n\n@param string $file   Image file.\n@param string $format Image format.\n\n@return string File w/ format extension.", "docstring_tokens": ["Set", "format", "extension", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/Image.php#L773-L776", "partition": "test"}
{"repo": "contao-bootstrap/grid-editor", "path": "src/Walker.php", "func_name": "Walker.getIndex", "original_string": "public function getIndex($ignoreInfinite = false)\n    {\n        if ($this->infinite && !$ignoreInfinite) {\n            return $this->infiniteIndex;\n        }\n\n        return $this->index;\n    }", "language": "php", "code": "public function getIndex($ignoreInfinite = false)\n    {\n        if ($this->infinite && !$ignoreInfinite) {\n            return $this->infiniteIndex;\n        }\n\n        return $this->index;\n    }", "code_tokens": ["public", "function", "getIndex", "(", "$", "ignoreInfinite", "=", "false", ")", "{", "if", "(", "$", "this", "->", "infinite", "&&", "!", "$", "ignoreInfinite", ")", "{", "return", "$", "this", "->", "infiniteIndex", ";", "}", "return", "$", "this", "->", "index", ";", "}"], "docstring": "Get index.\n\n@param bool $ignoreInfinite If true the infinite index is ignored and the regular column index is returned.\n\n@return int", "docstring_tokens": ["Get", "index", "."], "sha": "e017332aeec861b64b5dc963156533af4a21dc71", "url": "https://github.com/contao-bootstrap/grid-editor/blob/e017332aeec861b64b5dc963156533af4a21dc71/src/Walker.php#L207-L214", "partition": "test"}
{"repo": "F21/Paradox", "path": "Paradox/AObservable.php", "func_name": "AObservable.attach", "original_string": "public function attach($events, IObserver $observer)\n    {\n        if (is_array($events)) {\n            foreach ($events as $event) {\n                $this->doAttach($event, $observer);\n            }\n        } elseif (is_string($events)) {\n            $this->doAttach($events, $observer);\n        } else {\n            throw new ObservableException(\"Event can only be a string containing the name of the event or an array of event names.\");\n        }\n    }", "language": "php", "code": "public function attach($events, IObserver $observer)\n    {\n        if (is_array($events)) {\n            foreach ($events as $event) {\n                $this->doAttach($event, $observer);\n            }\n        } elseif (is_string($events)) {\n            $this->doAttach($events, $observer);\n        } else {\n            throw new ObservableException(\"Event can only be a string containing the name of the event or an array of event names.\");\n        }\n    }", "code_tokens": ["public", "function", "attach", "(", "$", "events", ",", "IObserver", "$", "observer", ")", "{", "if", "(", "is_array", "(", "$", "events", ")", ")", "{", "foreach", "(", "$", "events", "as", "$", "event", ")", "{", "$", "this", "->", "doAttach", "(", "$", "event", ",", "$", "observer", ")", ";", "}", "}", "elseif", "(", "is_string", "(", "$", "events", ")", ")", "{", "$", "this", "->", "doAttach", "(", "$", "events", ",", "$", "observer", ")", ";", "}", "else", "{", "throw", "new", "ObservableException", "(", "\"Event can only be a string containing the name of the event or an array of event names.\"", ")", ";", "}", "}"], "docstring": "Attach a listener.\n@param  string|array        $events   The event type. This can be an array of event types or just a string for one event.\n@param  IObserver           $observer The listener.\n@throws ObservableException", "docstring_tokens": ["Attach", "a", "listener", "."], "sha": "d1f47203e743760d8d8d6232bf0ea62920e7eefe", "url": "https://github.com/F21/Paradox/blob/d1f47203e743760d8d8d6232bf0ea62920e7eefe/Paradox/AObservable.php#L32-L43", "partition": "test"}
{"repo": "shumkov/rediska", "path": "library/Rediska/Key.php", "func_name": "Rediska_Key.getOrSetValue", "original_string": "public function getOrSetValue($object = null, $expire = null, $expireIsTimestamp = false)\n    {\n        return new Rediska_Key_GetOrSetValue($this, $object, $expire, $expireIsTimestamp);\n    }", "language": "php", "code": "public function getOrSetValue($object = null, $expire = null, $expireIsTimestamp = false)\n    {\n        return new Rediska_Key_GetOrSetValue($this, $object, $expire, $expireIsTimestamp);\n    }", "code_tokens": ["public", "function", "getOrSetValue", "(", "$", "object", "=", "null", ",", "$", "expire", "=", "null", ",", "$", "expireIsTimestamp", "=", "false", ")", "{", "return", "new", "Rediska_Key_GetOrSetValue", "(", "$", "this", ",", "$", "object", ",", "$", "expire", ",", "$", "expireIsTimestamp", ")", ";", "}"], "docstring": "Get value, if value not present set it from chain method\n\n@param mixin[optional]   $object            Object of chain method\n@param integer[optional] $expire            Expire\n@param boolean[optional] $expireIsTimestamp If true $expire argument in seconds, or $expire is timestamp\n@return Rediska_Key_GetOrSetValue", "docstring_tokens": ["Get", "value", "if", "value", "not", "present", "set", "it", "from", "chain", "method"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/library/Rediska/Key.php#L173-L176", "partition": "test"}
{"repo": "TYPO3-Console/TYPO3-Console", "path": "Classes/Console/Mvc/Cli/Symfony/Descriptor/TextDescriptor.php", "func_name": "TextDescriptor.wordWrap", "original_string": "private function wordWrap(string $stringToWrap, int $indent, $maxWidth): string\n    {\n        $wrapped = $maxWidth === null ? $stringToWrap : wordwrap($stringToWrap, $maxWidth, \"\\n\", true);\n\n        return preg_replace('/\\s*[\\r\\n]\\s*/', \"\\n\" . str_repeat(' ', $indent), $wrapped);\n    }", "language": "php", "code": "private function wordWrap(string $stringToWrap, int $indent, $maxWidth): string\n    {\n        $wrapped = $maxWidth === null ? $stringToWrap : wordwrap($stringToWrap, $maxWidth, \"\\n\", true);\n\n        return preg_replace('/\\s*[\\r\\n]\\s*/', \"\\n\" . str_repeat(' ', $indent), $wrapped);\n    }", "code_tokens": ["private", "function", "wordWrap", "(", "string", "$", "stringToWrap", ",", "int", "$", "indent", ",", "$", "maxWidth", ")", ":", "string", "{", "$", "wrapped", "=", "$", "maxWidth", "===", "null", "?", "$", "stringToWrap", ":", "wordwrap", "(", "$", "stringToWrap", ",", "$", "maxWidth", ",", "\"\\n\"", ",", "true", ")", ";", "return", "preg_replace", "(", "'/\\s*[\\r\\n]\\s*/'", ",", "\"\\n\"", ".", "str_repeat", "(", "' '", ",", "$", "indent", ")", ",", "$", "wrapped", ")", ";", "}"], "docstring": "Wraps a text and adds indentation to new lines\n\n@param string $stringToWrap\n@param int $indent\n@param int|null $maxWidth\n@return string", "docstring_tokens": ["Wraps", "a", "text", "and", "adds", "indentation", "to", "new", "lines"], "sha": "a8983d65aa5e2b7495082059cd72b6403b14abfd", "url": "https://github.com/TYPO3-Console/TYPO3-Console/blob/a8983d65aa5e2b7495082059cd72b6403b14abfd/Classes/Console/Mvc/Cli/Symfony/Descriptor/TextDescriptor.php#L243-L248", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Routes/Controller.php", "func_name": "Controller.validateAction", "original_string": "protected function validateAction($action, RequestApplicationInterface $app)\n    {\n        $annotationsCtrl = Reaction::$annotations->getClass($this);\n        $annotationsAction = Reaction::$annotations->getMethod($action, $this);\n        $annotations = ArrayHelper::merge(array_values($annotationsCtrl), array_values($annotationsAction));\n        $promises = [];\n        if (!empty($annotations)) {\n            foreach ($annotations as $annotation) {\n                if (!$annotation instanceof CtrlActionValidatorInterface) {\n                    continue;\n                }\n                $promise = $annotation->validate($app);\n                if (!$promise instanceof PromiseInterface) {\n                    $promise = !empty($promise) ? resolve(true) : reject(false);\n                    Reaction::warning(\"Controller validator '{class}' returned NOT a promise\", [\n                        'class' => get_class($annotation),\n                    ]);\n                }\n                $promises[] = $promise;\n                $promises[] = \\Reaction\\Promise\\resolve(true);\n            }\n        }\n        if (empty($promises)) {\n            return resolve(true);\n        }\n        $all = \\Reaction\\Promise\\all($promises);\n        return $all;\n    }", "language": "php", "code": "protected function validateAction($action, RequestApplicationInterface $app)\n    {\n        $annotationsCtrl = Reaction::$annotations->getClass($this);\n        $annotationsAction = Reaction::$annotations->getMethod($action, $this);\n        $annotations = ArrayHelper::merge(array_values($annotationsCtrl), array_values($annotationsAction));\n        $promises = [];\n        if (!empty($annotations)) {\n            foreach ($annotations as $annotation) {\n                if (!$annotation instanceof CtrlActionValidatorInterface) {\n                    continue;\n                }\n                $promise = $annotation->validate($app);\n                if (!$promise instanceof PromiseInterface) {\n                    $promise = !empty($promise) ? resolve(true) : reject(false);\n                    Reaction::warning(\"Controller validator '{class}' returned NOT a promise\", [\n                        'class' => get_class($annotation),\n                    ]);\n                }\n                $promises[] = $promise;\n                $promises[] = \\Reaction\\Promise\\resolve(true);\n            }\n        }\n        if (empty($promises)) {\n            return resolve(true);\n        }\n        $all = \\Reaction\\Promise\\all($promises);\n        return $all;\n    }", "code_tokens": ["protected", "function", "validateAction", "(", "$", "action", ",", "RequestApplicationInterface", "$", "app", ")", "{", "$", "annotationsCtrl", "=", "Reaction", "::", "$", "annotations", "->", "getClass", "(", "$", "this", ")", ";", "$", "annotationsAction", "=", "Reaction", "::", "$", "annotations", "->", "getMethod", "(", "$", "action", ",", "$", "this", ")", ";", "$", "annotations", "=", "ArrayHelper", "::", "merge", "(", "array_values", "(", "$", "annotationsCtrl", ")", ",", "array_values", "(", "$", "annotationsAction", ")", ")", ";", "$", "promises", "=", "[", "]", ";", "if", "(", "!", "empty", "(", "$", "annotations", ")", ")", "{", "foreach", "(", "$", "annotations", "as", "$", "annotation", ")", "{", "if", "(", "!", "$", "annotation", "instanceof", "CtrlActionValidatorInterface", ")", "{", "continue", ";", "}", "$", "promise", "=", "$", "annotation", "->", "validate", "(", "$", "app", ")", ";", "if", "(", "!", "$", "promise", "instanceof", "PromiseInterface", ")", "{", "$", "promise", "=", "!", "empty", "(", "$", "promise", ")", "?", "resolve", "(", "true", ")", ":", "reject", "(", "false", ")", ";", "Reaction", "::", "warning", "(", "\"Controller validator '{class}' returned NOT a promise\"", ",", "[", "'class'", "=>", "get_class", "(", "$", "annotation", ")", ",", "]", ")", ";", "}", "$", "promises", "[", "]", "=", "$", "promise", ";", "$", "promises", "[", "]", "=", "\\", "Reaction", "\\", "Promise", "\\", "resolve", "(", "true", ")", ";", "}", "}", "if", "(", "empty", "(", "$", "promises", ")", ")", "{", "return", "resolve", "(", "true", ")", ";", "}", "$", "all", "=", "\\", "Reaction", "\\", "Promise", "\\", "all", "(", "$", "promises", ")", ";", "return", "$", "all", ";", "}"], "docstring": "Validate that user can perform that action\n@param string $action\n@param RequestApplicationInterface $app\n@return ExtendedPromiseInterface", "docstring_tokens": ["Validate", "that", "user", "can", "perform", "that", "action"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Routes/Controller.php#L555-L582", "partition": "test"}
{"repo": "philipbrown/magniloquent", "path": "src/Magniloquent/Magniloquent/Magniloquent.php", "func_name": "Magniloquent.autoHash", "original_string": "private function autoHash()\n    {\n        $attributes = array_merge(static::$needsHash, array('password'));\n\n        foreach ($attributes as $name) {\n\n            if (isset($this->attributes[$name]) && $this->isDirty($name))\n            {\n                if ( ! Hash::check($this->attributes[$name], $this->getOriginal($name))) \n                {\n                    $this->attributes[$name] = Hash::make($this->attributes[$name]);                \n                }\n            }\n        }\n    }", "language": "php", "code": "private function autoHash()\n    {\n        $attributes = array_merge(static::$needsHash, array('password'));\n\n        foreach ($attributes as $name) {\n\n            if (isset($this->attributes[$name]) && $this->isDirty($name))\n            {\n                if ( ! Hash::check($this->attributes[$name], $this->getOriginal($name))) \n                {\n                    $this->attributes[$name] = Hash::make($this->attributes[$name]);                \n                }\n            }\n        }\n    }", "code_tokens": ["private", "function", "autoHash", "(", ")", "{", "$", "attributes", "=", "array_merge", "(", "static", "::", "$", "needsHash", ",", "array", "(", "'password'", ")", ")", ";", "foreach", "(", "$", "attributes", "as", "$", "name", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "attributes", "[", "$", "name", "]", ")", "&&", "$", "this", "->", "isDirty", "(", "$", "name", ")", ")", "{", "if", "(", "!", "Hash", "::", "check", "(", "$", "this", "->", "attributes", "[", "$", "name", "]", ",", "$", "this", "->", "getOriginal", "(", "$", "name", ")", ")", ")", "{", "$", "this", "->", "attributes", "[", "$", "name", "]", "=", "Hash", "::", "make", "(", "$", "this", "->", "attributes", "[", "$", "name", "]", ")", ";", "}", "}", "}", "}"], "docstring": "Auto-hashes the password parameter if it exists\n\n@return array", "docstring_tokens": ["Auto", "-", "hashes", "the", "password", "parameter", "if", "it", "exists"], "sha": "5900c271972b2886385b0d29eaacc2137a46659a", "url": "https://github.com/philipbrown/magniloquent/blob/5900c271972b2886385b0d29eaacc2137a46659a/src/Magniloquent/Magniloquent/Magniloquent.php#L417-L431", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/Parser/EventManagerApi.php", "func_name": "EventManagerApi.deleteEmptyTaxonomies", "original_string": "public function deleteEmptyTaxonomies()\n    {\n        if (!empty(get_object_taxonomies('event'))) {\n            foreach (get_object_taxonomies('event') as $taxonomy) {\n                // Skip Event Groups and categories\n                if ($taxonomy == 'event_groups' || $taxonomy == 'event_categories') {\n                    continue;\n                }\n\n                $terms = get_terms(\n                    array(\n                        'taxonomy' => $taxonomy,\n                        'hide_empty' => false,\n                        'childless' => true,\n                    )\n                );\n\n                foreach ($terms as $term) {\n                    if ($term->count == 0) {\n                        wp_delete_term($term->term_id, $taxonomy);\n                    }\n                }\n            }\n        }\n    }", "language": "php", "code": "public function deleteEmptyTaxonomies()\n    {\n        if (!empty(get_object_taxonomies('event'))) {\n            foreach (get_object_taxonomies('event') as $taxonomy) {\n                // Skip Event Groups and categories\n                if ($taxonomy == 'event_groups' || $taxonomy == 'event_categories') {\n                    continue;\n                }\n\n                $terms = get_terms(\n                    array(\n                        'taxonomy' => $taxonomy,\n                        'hide_empty' => false,\n                        'childless' => true,\n                    )\n                );\n\n                foreach ($terms as $term) {\n                    if ($term->count == 0) {\n                        wp_delete_term($term->term_id, $taxonomy);\n                    }\n                }\n            }\n        }\n    }", "code_tokens": ["public", "function", "deleteEmptyTaxonomies", "(", ")", "{", "if", "(", "!", "empty", "(", "get_object_taxonomies", "(", "'event'", ")", ")", ")", "{", "foreach", "(", "get_object_taxonomies", "(", "'event'", ")", "as", "$", "taxonomy", ")", "{", "// Skip Event Groups and categories", "if", "(", "$", "taxonomy", "==", "'event_groups'", "||", "$", "taxonomy", "==", "'event_categories'", ")", "{", "continue", ";", "}", "$", "terms", "=", "get_terms", "(", "array", "(", "'taxonomy'", "=>", "$", "taxonomy", ",", "'hide_empty'", "=>", "false", ",", "'childless'", "=>", "true", ",", ")", ")", ";", "foreach", "(", "$", "terms", "as", "$", "term", ")", "{", "if", "(", "$", "term", "->", "count", "==", "0", ")", "{", "wp_delete_term", "(", "$", "term", "->", "term_id", ",", "$", "taxonomy", ")", ";", "}", "}", "}", "}", "}"], "docstring": "Delete empty event taxonomies\n@return void", "docstring_tokens": ["Delete", "empty", "event", "taxonomies"], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/Parser/EventManagerApi.php#L416-L440", "partition": "test"}
{"repo": "nimbly/Limber", "path": "src/Router/Router.php", "func_name": "Router.mergeGroupConfig", "original_string": "protected function mergeGroupConfig(array $groupConfig): array\n    {\n        $config = $this->config;\n\n        $config['hostname'] = $groupConfig['hostname'] ?? null;\n        $config['prefix'] = $groupConfig['prefix'] ?? null;\n        $config['namespace'] = $groupConfig['namespace'] ?? null;\n\n        if( array_key_exists('middleware', $groupConfig) ){\n\n            if( array_key_exists('middleware', $config) ){\n                $config['middleware'] = array_merge($config['middleware'], $groupConfig['middleware']);\n            }\n\n            else {\n                $config['middleware'] = $groupConfig['middleware'];\n            }\n        }\n\n        return $config;\n    }", "language": "php", "code": "protected function mergeGroupConfig(array $groupConfig): array\n    {\n        $config = $this->config;\n\n        $config['hostname'] = $groupConfig['hostname'] ?? null;\n        $config['prefix'] = $groupConfig['prefix'] ?? null;\n        $config['namespace'] = $groupConfig['namespace'] ?? null;\n\n        if( array_key_exists('middleware', $groupConfig) ){\n\n            if( array_key_exists('middleware', $config) ){\n                $config['middleware'] = array_merge($config['middleware'], $groupConfig['middleware']);\n            }\n\n            else {\n                $config['middleware'] = $groupConfig['middleware'];\n            }\n        }\n\n        return $config;\n    }", "code_tokens": ["protected", "function", "mergeGroupConfig", "(", "array", "$", "groupConfig", ")", ":", "array", "{", "$", "config", "=", "$", "this", "->", "config", ";", "$", "config", "[", "'hostname'", "]", "=", "$", "groupConfig", "[", "'hostname'", "]", "??", "null", ";", "$", "config", "[", "'prefix'", "]", "=", "$", "groupConfig", "[", "'prefix'", "]", "??", "null", ";", "$", "config", "[", "'namespace'", "]", "=", "$", "groupConfig", "[", "'namespace'", "]", "??", "null", ";", "if", "(", "array_key_exists", "(", "'middleware'", ",", "$", "groupConfig", ")", ")", "{", "if", "(", "array_key_exists", "(", "'middleware'", ",", "$", "config", ")", ")", "{", "$", "config", "[", "'middleware'", "]", "=", "array_merge", "(", "$", "config", "[", "'middleware'", "]", ",", "$", "groupConfig", "[", "'middleware'", "]", ")", ";", "}", "else", "{", "$", "config", "[", "'middleware'", "]", "=", "$", "groupConfig", "[", "'middleware'", "]", ";", "}", "}", "return", "$", "config", ";", "}"], "docstring": "Merge parent route Group configs in with child group.\n\n@param array<string> $groupConfig\n@return array", "docstring_tokens": ["Merge", "parent", "route", "Group", "configs", "in", "with", "child", "group", "."], "sha": "f5d4656e5b6ae8da479456f3e642e38d841d7b94", "url": "https://github.com/nimbly/Limber/blob/f5d4656e5b6ae8da479456f3e642e38d841d7b94/src/Router/Router.php#L188-L208", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/I18n/Time.php", "func_name": "Time.instance", "original_string": "public static function instance(DateTime $dateTime, string $locale = null)\n\t{\n\t\t$date     = $dateTime->format('Y-m-d H:i:s');\n\t\t$timezone = $dateTime->getTimezone();\n\n\t\treturn new Time($date, $timezone, $locale);\n\t}", "language": "php", "code": "public static function instance(DateTime $dateTime, string $locale = null)\n\t{\n\t\t$date     = $dateTime->format('Y-m-d H:i:s');\n\t\t$timezone = $dateTime->getTimezone();\n\n\t\treturn new Time($date, $timezone, $locale);\n\t}", "code_tokens": ["public", "static", "function", "instance", "(", "DateTime", "$", "dateTime", ",", "string", "$", "locale", "=", "null", ")", "{", "$", "date", "=", "$", "dateTime", "->", "format", "(", "'Y-m-d H:i:s'", ")", ";", "$", "timezone", "=", "$", "dateTime", "->", "getTimezone", "(", ")", ";", "return", "new", "Time", "(", "$", "date", ",", "$", "timezone", ",", "$", "locale", ")", ";", "}"], "docstring": "Takes an instance of DateTime and returns an instance of Time with it's same values.\n\n@param \\DateTime   $dateTime\n@param string|null $locale\n\n@return \\CodeIgniter\\I18n\\Time\n@throws \\Exception", "docstring_tokens": ["Takes", "an", "instance", "of", "DateTime", "and", "returns", "an", "instance", "of", "Time", "with", "it", "s", "same", "values", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/I18n/Time.php#L340-L346", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/properties/class-papi-property-repeater.php", "func_name": "Papi_Property_Repeater.render_repeater_head", "original_string": "protected function render_repeater_head() {\n\t\t$properties = $this->get_settings_properties();\n\t\t?>\n\t\t<thead>\n\t\t<?php if ( ! $this->layout( 'row' ) ): ?>\n\t\t\t<tr>\n\t\t\t\t<th></th>\n\t\t\t\t<?php\n\t\t\t\tforeach ( $properties as $property ):\n\t\t\t\t\t// Don't show the property if it's disabled.\n\t\t\t\t\tif ( $property->disabled() ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<th class=\"repeater-column <?php echo $property->display() ? '' : 'papi-hide'; ?>\">\n\t\t\t\t\t\t<?php echo esc_html( $property->title ); ?>\n\t\t\t\t\t</th>\n\t\t\t\t<?php endforeach; ?>\n\t\t\t\t<th class=\"last\"></th>\n\t\t\t</tr>\n\t\t<?php endif; ?>\n\t\t</thead>\n\t\t<?php\n\t}", "language": "php", "code": "protected function render_repeater_head() {\n\t\t$properties = $this->get_settings_properties();\n\t\t?>\n\t\t<thead>\n\t\t<?php if ( ! $this->layout( 'row' ) ): ?>\n\t\t\t<tr>\n\t\t\t\t<th></th>\n\t\t\t\t<?php\n\t\t\t\tforeach ( $properties as $property ):\n\t\t\t\t\t// Don't show the property if it's disabled.\n\t\t\t\t\tif ( $property->disabled() ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<th class=\"repeater-column <?php echo $property->display() ? '' : 'papi-hide'; ?>\">\n\t\t\t\t\t\t<?php echo esc_html( $property->title ); ?>\n\t\t\t\t\t</th>\n\t\t\t\t<?php endforeach; ?>\n\t\t\t\t<th class=\"last\"></th>\n\t\t\t</tr>\n\t\t<?php endif; ?>\n\t\t</thead>\n\t\t<?php\n\t}", "code_tokens": ["protected", "function", "render_repeater_head", "(", ")", "{", "$", "properties", "=", "$", "this", "->", "get_settings_properties", "(", ")", ";", "?>\n\t\t<thead>\n\t\t<?php", "if", "(", "!", "$", "this", "->", "layout", "(", "'row'", ")", ")", ":", "?>\n\t\t\t<tr>\n\t\t\t\t<th></th>\n\t\t\t\t<?php", "foreach", "(", "$", "properties", "as", "$", "property", ")", ":", "// Don't show the property if it's disabled.", "if", "(", "$", "property", "->", "disabled", "(", ")", ")", "{", "continue", ";", "}", "?>\n\t\t\t\t\t<th class=\"repeater-column <?php", "echo", "$", "property", "->", "display", "(", ")", "?", "''", ":", "'papi-hide'", ";", "?>\">\n\t\t\t\t\t\t<?php", "echo", "esc_html", "(", "$", "property", "->", "title", ")", ";", "?>\n\t\t\t\t\t</th>\n\t\t\t\t<?php", "endforeach", ";", "?>\n\t\t\t\t<th class=\"last\"></th>\n\t\t\t</tr>\n\t\t<?php", "endif", ";", "?>\n\t\t</thead>\n\t\t<?php", "}"], "docstring": "Render repeater head.", "docstring_tokens": ["Render", "repeater", "head", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/properties/class-papi-property-repeater.php#L710-L733", "partition": "test"}
{"repo": "yawik/organizations", "path": "src/Controller/InviteEmployeeController.php", "func_name": "InviteEmployeeController.createErrorViewModel", "original_string": "protected function createErrorViewModel($message)\n    {\n        /* @var $response \\Zend\\Http\\Response */\n        $response = $this->getResponse();\n        $response->setStatusCode(500);\n\n        $model = new ViewModel(array('message' => $message));\n        $model->setTemplate('organizations/error/invite');\n\n        return $model;\n    }", "language": "php", "code": "protected function createErrorViewModel($message)\n    {\n        /* @var $response \\Zend\\Http\\Response */\n        $response = $this->getResponse();\n        $response->setStatusCode(500);\n\n        $model = new ViewModel(array('message' => $message));\n        $model->setTemplate('organizations/error/invite');\n\n        return $model;\n    }", "code_tokens": ["protected", "function", "createErrorViewModel", "(", "$", "message", ")", "{", "/* @var $response \\Zend\\Http\\Response */", "$", "response", "=", "$", "this", "->", "getResponse", "(", ")", ";", "$", "response", "->", "setStatusCode", "(", "500", ")", ";", "$", "model", "=", "new", "ViewModel", "(", "array", "(", "'message'", "=>", "$", "message", ")", ")", ";", "$", "model", "->", "setTemplate", "(", "'organizations/error/invite'", ")", ";", "return", "$", "model", ";", "}"], "docstring": "Creates a view model for the error page view script.\n\nSets the response status code to 500 (indicating an internal error).\n\n@param string $message\n\n@return ViewModel", "docstring_tokens": ["Creates", "a", "view", "model", "for", "the", "error", "page", "view", "script", "."], "sha": "a5d982212be5f445c067656aeb0aa3ca7daf0251", "url": "https://github.com/yawik/organizations/blob/a5d982212be5f445c067656aeb0aa3ca7daf0251/src/Controller/InviteEmployeeController.php#L170-L180", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Images/Image.php", "func_name": "Image.getProperties", "original_string": "public function getProperties(bool $return = false)\n\t{\n\t\t$path = $this->getPathname();\n\n\t\t$vals  = getimagesize($path);\n\t\t$types = [\n\t\t\t1 => 'gif',\n\t\t\t2 => 'jpeg',\n\t\t\t3 => 'png',\n\t\t];\n\n\t\t$mime = 'image/' . ($types[$vals[2]] ?? 'jpg');\n\n\t\tif ($return === true)\n\t\t{\n\t\t\treturn [\n\t\t\t\t'width'      => $vals[0],\n\t\t\t\t'height'     => $vals[1],\n\t\t\t\t'image_type' => $vals[2],\n\t\t\t\t'size_str'   => $vals[3],\n\t\t\t\t'mime_type'  => $mime,\n\t\t\t];\n\t\t}\n\n\t\t$this->origWidth  = $vals[0];\n\t\t$this->origHeight = $vals[1];\n\t\t$this->imageType  = $vals[2];\n\t\t$this->sizeStr    = $vals[3];\n\t\t$this->mime       = $mime;\n\n\t\treturn true;\n\t}", "language": "php", "code": "public function getProperties(bool $return = false)\n\t{\n\t\t$path = $this->getPathname();\n\n\t\t$vals  = getimagesize($path);\n\t\t$types = [\n\t\t\t1 => 'gif',\n\t\t\t2 => 'jpeg',\n\t\t\t3 => 'png',\n\t\t];\n\n\t\t$mime = 'image/' . ($types[$vals[2]] ?? 'jpg');\n\n\t\tif ($return === true)\n\t\t{\n\t\t\treturn [\n\t\t\t\t'width'      => $vals[0],\n\t\t\t\t'height'     => $vals[1],\n\t\t\t\t'image_type' => $vals[2],\n\t\t\t\t'size_str'   => $vals[3],\n\t\t\t\t'mime_type'  => $mime,\n\t\t\t];\n\t\t}\n\n\t\t$this->origWidth  = $vals[0];\n\t\t$this->origHeight = $vals[1];\n\t\t$this->imageType  = $vals[2];\n\t\t$this->sizeStr    = $vals[3];\n\t\t$this->mime       = $mime;\n\n\t\treturn true;\n\t}", "code_tokens": ["public", "function", "getProperties", "(", "bool", "$", "return", "=", "false", ")", "{", "$", "path", "=", "$", "this", "->", "getPathname", "(", ")", ";", "$", "vals", "=", "getimagesize", "(", "$", "path", ")", ";", "$", "types", "=", "[", "1", "=>", "'gif'", ",", "2", "=>", "'jpeg'", ",", "3", "=>", "'png'", ",", "]", ";", "$", "mime", "=", "'image/'", ".", "(", "$", "types", "[", "$", "vals", "[", "2", "]", "]", "??", "'jpg'", ")", ";", "if", "(", "$", "return", "===", "true", ")", "{", "return", "[", "'width'", "=>", "$", "vals", "[", "0", "]", ",", "'height'", "=>", "$", "vals", "[", "1", "]", ",", "'image_type'", "=>", "$", "vals", "[", "2", "]", ",", "'size_str'", "=>", "$", "vals", "[", "3", "]", ",", "'mime_type'", "=>", "$", "mime", ",", "]", ";", "}", "$", "this", "->", "origWidth", "=", "$", "vals", "[", "0", "]", ";", "$", "this", "->", "origHeight", "=", "$", "vals", "[", "1", "]", ";", "$", "this", "->", "imageType", "=", "$", "vals", "[", "2", "]", ";", "$", "this", "->", "sizeStr", "=", "$", "vals", "[", "3", "]", ";", "$", "this", "->", "mime", "=", "$", "mime", ";", "return", "true", ";", "}"], "docstring": "Get image properties\n\nA helper function that gets info about the file\n\n@param boolean $return\n\n@return mixed", "docstring_tokens": ["Get", "image", "properties"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Images/Image.php#L135-L166", "partition": "test"}
{"repo": "bergie/dnode-php", "path": "examples/phpcr/simple/server.php", "func_name": "SimpleRemoteRepository.getProperties", "original_string": "public function getProperties($sessionName, $path, $cb)\n    {\n        if (!$this->validateSessionName($sessionName, $cb))\n            return false;\n\n        $exception = null;\n        $msg = null;\n        $names = array ();\n\n        try {\n            $parent = $this->sessions[$sessionName]->getNode($path);\n            $properties = $parent->getProperties ();\n            $names = array_keys ($properties);\n        } catch (\\Exception $e) {\n            $exception = get_class($e);\n            $msg = $e->getMessage();\n        }\n\n        $cb($names, $exception, $msg);\n    }", "language": "php", "code": "public function getProperties($sessionName, $path, $cb)\n    {\n        if (!$this->validateSessionName($sessionName, $cb))\n            return false;\n\n        $exception = null;\n        $msg = null;\n        $names = array ();\n\n        try {\n            $parent = $this->sessions[$sessionName]->getNode($path);\n            $properties = $parent->getProperties ();\n            $names = array_keys ($properties);\n        } catch (\\Exception $e) {\n            $exception = get_class($e);\n            $msg = $e->getMessage();\n        }\n\n        $cb($names, $exception, $msg);\n    }", "code_tokens": ["public", "function", "getProperties", "(", "$", "sessionName", ",", "$", "path", ",", "$", "cb", ")", "{", "if", "(", "!", "$", "this", "->", "validateSessionName", "(", "$", "sessionName", ",", "$", "cb", ")", ")", "return", "false", ";", "$", "exception", "=", "null", ";", "$", "msg", "=", "null", ";", "$", "names", "=", "array", "(", ")", ";", "try", "{", "$", "parent", "=", "$", "this", "->", "sessions", "[", "$", "sessionName", "]", "->", "getNode", "(", "$", "path", ")", ";", "$", "properties", "=", "$", "parent", "->", "getProperties", "(", ")", ";", "$", "names", "=", "array_keys", "(", "$", "properties", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "$", "exception", "=", "get_class", "(", "$", "e", ")", ";", "$", "msg", "=", "$", "e", "->", "getMessage", "(", ")", ";", "}", "$", "cb", "(", "$", "names", ",", "$", "exception", ",", "$", "msg", ")", ";", "}"], "docstring": "Get the names of all properties\n\n@param $sessionName - name of the session\n@param $path - absolute path of the node\n@param $cb - callback function\n\n@return void", "docstring_tokens": ["Get", "the", "names", "of", "all", "properties"], "sha": "048deef50afe95e21ef25c026bd79b2917920f3b", "url": "https://github.com/bergie/dnode-php/blob/048deef50afe95e21ef25c026bd79b2917920f3b/examples/phpcr/simple/server.php#L76-L95", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Validation.php", "func_name": "Validation.status", "original_string": "public function status($value = null) {\n        if ($value !== null) {\n            $this->status = $value;\n            return $this;\n        }\n        if ($this->status) {\n            return $this->status;\n        }\n\n        // There was no status so loop through the errors and look for the highest one.\n        $maxStatus = 400;\n        foreach ($this->errors as $field => $errors) {\n            foreach ($errors as $error) {\n                if (isset($error['status']) && $error['status'] > $maxStatus) {\n                    $maxStatus = $error['status'];\n                }\n            }\n        }\n        return $maxStatus;\n    }", "language": "php", "code": "public function status($value = null) {\n        if ($value !== null) {\n            $this->status = $value;\n            return $this;\n        }\n        if ($this->status) {\n            return $this->status;\n        }\n\n        // There was no status so loop through the errors and look for the highest one.\n        $maxStatus = 400;\n        foreach ($this->errors as $field => $errors) {\n            foreach ($errors as $error) {\n                if (isset($error['status']) && $error['status'] > $maxStatus) {\n                    $maxStatus = $error['status'];\n                }\n            }\n        }\n        return $maxStatus;\n    }", "code_tokens": ["public", "function", "status", "(", "$", "value", "=", "null", ")", "{", "if", "(", "$", "value", "!==", "null", ")", "{", "$", "this", "->", "status", "=", "$", "value", ";", "return", "$", "this", ";", "}", "if", "(", "$", "this", "->", "status", ")", "{", "return", "$", "this", "->", "status", ";", "}", "// There was no status so loop through the errors and look for the highest one.", "$", "maxStatus", "=", "400", ";", "foreach", "(", "$", "this", "->", "errors", "as", "$", "field", "=>", "$", "errors", ")", "{", "foreach", "(", "$", "errors", "as", "$", "error", ")", "{", "if", "(", "isset", "(", "$", "error", "[", "'status'", "]", ")", "&&", "$", "error", "[", "'status'", "]", ">", "$", "maxStatus", ")", "{", "$", "maxStatus", "=", "$", "error", "[", "'status'", "]", ";", "}", "}", "}", "return", "$", "maxStatus", ";", "}"], "docstring": "Get or set the error status code.\n\nThe status code is an http resonse code and should be of the 4xx variety.\n\n@param int|null $value Pass a new status code or null to get the current code.\n@return Validation|int Returns the current status code or $this for fluent sets.", "docstring_tokens": ["Get", "or", "set", "the", "error", "status", "code", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Validation.php#L130-L149", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Console/Event/ConsoleErrorEvent.php", "func_name": "ConsoleErrorEvent.setExitCode", "original_string": "public function setExitCode(int $exitCode): void\n    {\n        $this->parameters['exit_code'] = $exitCode;\n\n        $r = new ReflectionProperty($this->parameters['error'], 'code');\n        $r->setAccessible(true);\n        $r->setValue($this->parameters['error'], $this->parameters['exit_code']);\n    }", "language": "php", "code": "public function setExitCode(int $exitCode): void\n    {\n        $this->parameters['exit_code'] = $exitCode;\n\n        $r = new ReflectionProperty($this->parameters['error'], 'code');\n        $r->setAccessible(true);\n        $r->setValue($this->parameters['error'], $this->parameters['exit_code']);\n    }", "code_tokens": ["public", "function", "setExitCode", "(", "int", "$", "exitCode", ")", ":", "void", "{", "$", "this", "->", "parameters", "[", "'exit_code'", "]", "=", "$", "exitCode", ";", "$", "r", "=", "new", "ReflectionProperty", "(", "$", "this", "->", "parameters", "[", "'error'", "]", ",", "'code'", ")", ";", "$", "r", "->", "setAccessible", "(", "true", ")", ";", "$", "r", "->", "setValue", "(", "$", "this", "->", "parameters", "[", "'error'", "]", ",", "$", "this", "->", "parameters", "[", "'exit_code'", "]", ")", ";", "}"], "docstring": "Sets the exit code.\n\n@param int $exitCode The command exit code\n\n@throws \\ReflectionException\n\n@return void", "docstring_tokens": ["Sets", "the", "exit", "code", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Console/Event/ConsoleErrorEvent.php#L68-L75", "partition": "test"}
{"repo": "TYPO3-Console/TYPO3-Console", "path": "Classes/Console/Log/Writer/ConsoleWriter.php", "func_name": "ConsoleWriter.writeLog", "original_string": "public function writeLog(\\TYPO3\\CMS\\Core\\Log\\LogRecord $record)\n    {\n        $this->output->write(\n            $this->wrapMessage(vsprintf($record->getMessage(), $record->getData()), $record->getLevel()),\n            true\n        );\n\n        return $this;\n    }", "language": "php", "code": "public function writeLog(\\TYPO3\\CMS\\Core\\Log\\LogRecord $record)\n    {\n        $this->output->write(\n            $this->wrapMessage(vsprintf($record->getMessage(), $record->getData()), $record->getLevel()),\n            true\n        );\n\n        return $this;\n    }", "code_tokens": ["public", "function", "writeLog", "(", "\\", "TYPO3", "\\", "CMS", "\\", "Core", "\\", "Log", "\\", "LogRecord", "$", "record", ")", "{", "$", "this", "->", "output", "->", "write", "(", "$", "this", "->", "wrapMessage", "(", "vsprintf", "(", "$", "record", "->", "getMessage", "(", ")", ",", "$", "record", "->", "getData", "(", ")", ")", ",", "$", "record", "->", "getLevel", "(", ")", ")", ",", "true", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Writes the log record\n\n@param \\TYPO3\\CMS\\Core\\Log\\LogRecord $record Log record\n@return \\TYPO3\\CMS\\Core\\Log\\Writer\\WriterInterface $this", "docstring_tokens": ["Writes", "the", "log", "record"], "sha": "a8983d65aa5e2b7495082059cd72b6403b14abfd", "url": "https://github.com/TYPO3-Console/TYPO3-Console/blob/a8983d65aa5e2b7495082059cd72b6403b14abfd/Classes/Console/Log/Writer/ConsoleWriter.php#L69-L77", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Cli/Output/Decorate.php", "func_name": "Decorate.apply", "original_string": "public static function apply($text, $foreground = null, $background = null, array $options = [])\n    {\n        if (!self::hasColorSupport()) {\n            return $text;\n        }\n\n        $setCodes   = [];\n        $unsetCodes = [];\n\n        if (null !== $foreground) {\n            $setCodes[]   = self::$availableForegroundColors[$foreground]['set'];\n            $unsetCodes[] = self::$availableForegroundColors[$foreground]['unset'];\n        }\n        if (null !== $background) {\n            $setCodes[]   = self::$availableBackgroundColors[$background]['set'];\n            $unsetCodes[] = self::$availableBackgroundColors[$background]['unset'];\n        }\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                $setCodes[]   = self::$availableOptions[$option]['set'];\n                $unsetCodes[] = self::$availableOptions[$option]['unset'];\n            }\n        }\n\n        if (0 === count($setCodes)) {\n            return $text;\n        }\n\n        return sprintf(\"\\033[%sm%s\\033[%sm\", implode(';', $setCodes), $text, implode(';', $unsetCodes));\n    }", "language": "php", "code": "public static function apply($text, $foreground = null, $background = null, array $options = [])\n    {\n        if (!self::hasColorSupport()) {\n            return $text;\n        }\n\n        $setCodes   = [];\n        $unsetCodes = [];\n\n        if (null !== $foreground) {\n            $setCodes[]   = self::$availableForegroundColors[$foreground]['set'];\n            $unsetCodes[] = self::$availableForegroundColors[$foreground]['unset'];\n        }\n        if (null !== $background) {\n            $setCodes[]   = self::$availableBackgroundColors[$background]['set'];\n            $unsetCodes[] = self::$availableBackgroundColors[$background]['unset'];\n        }\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                $setCodes[]   = self::$availableOptions[$option]['set'];\n                $unsetCodes[] = self::$availableOptions[$option]['unset'];\n            }\n        }\n\n        if (0 === count($setCodes)) {\n            return $text;\n        }\n\n        return sprintf(\"\\033[%sm%s\\033[%sm\", implode(';', $setCodes), $text, implode(';', $unsetCodes));\n    }", "code_tokens": ["public", "static", "function", "apply", "(", "$", "text", ",", "$", "foreground", "=", "null", ",", "$", "background", "=", "null", ",", "array", "$", "options", "=", "[", "]", ")", "{", "if", "(", "!", "self", "::", "hasColorSupport", "(", ")", ")", "{", "return", "$", "text", ";", "}", "$", "setCodes", "=", "[", "]", ";", "$", "unsetCodes", "=", "[", "]", ";", "if", "(", "null", "!==", "$", "foreground", ")", "{", "$", "setCodes", "[", "]", "=", "self", "::", "$", "availableForegroundColors", "[", "$", "foreground", "]", "[", "'set'", "]", ";", "$", "unsetCodes", "[", "]", "=", "self", "::", "$", "availableForegroundColors", "[", "$", "foreground", "]", "[", "'unset'", "]", ";", "}", "if", "(", "null", "!==", "$", "background", ")", "{", "$", "setCodes", "[", "]", "=", "self", "::", "$", "availableBackgroundColors", "[", "$", "background", "]", "[", "'set'", "]", ";", "$", "unsetCodes", "[", "]", "=", "self", "::", "$", "availableBackgroundColors", "[", "$", "background", "]", "[", "'unset'", "]", ";", "}", "if", "(", "!", "empty", "(", "$", "options", ")", ")", "{", "foreach", "(", "$", "options", "as", "$", "option", ")", "{", "$", "setCodes", "[", "]", "=", "self", "::", "$", "availableOptions", "[", "$", "option", "]", "[", "'set'", "]", ";", "$", "unsetCodes", "[", "]", "=", "self", "::", "$", "availableOptions", "[", "$", "option", "]", "[", "'unset'", "]", ";", "}", "}", "if", "(", "0", "===", "count", "(", "$", "setCodes", ")", ")", "{", "return", "$", "text", ";", "}", "return", "sprintf", "(", "\"\\033[%sm%s\\033[%sm\"", ",", "implode", "(", "';'", ",", "$", "setCodes", ")", ",", "$", "text", ",", "implode", "(", "';'", ",", "$", "unsetCodes", ")", ")", ";", "}"], "docstring": "Applies the style to a given text.\n\n@param string $text The text to style=\n@param null   $foreground\n@param null   $background\n@param array  $options\n\n@return string", "docstring_tokens": ["Applies", "the", "style", "to", "a", "given", "text", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Cli/Output/Decorate.php#L93-L122", "partition": "test"}
{"repo": "encorephp/wxwidgets", "path": "src/Collection.php", "func_name": "Collection.getElementById", "original_string": "public function getElementById($id)\n    {\n        $id = $this->getTrueId($id);\n\n        if ($id === false) {\n            // Throw something\n            return;\n        }\n\n        return $this->objects[$id];\n    }", "language": "php", "code": "public function getElementById($id)\n    {\n        $id = $this->getTrueId($id);\n\n        if ($id === false) {\n            // Throw something\n            return;\n        }\n\n        return $this->objects[$id];\n    }", "code_tokens": ["public", "function", "getElementById", "(", "$", "id", ")", "{", "$", "id", "=", "$", "this", "->", "getTrueId", "(", "$", "id", ")", ";", "if", "(", "$", "id", "===", "false", ")", "{", "// Throw something", "return", ";", "}", "return", "$", "this", "->", "objects", "[", "$", "id", "]", ";", "}"], "docstring": "Get an element by its ID\n\n@param  string|int $id\n@return ElementInterface", "docstring_tokens": ["Get", "an", "element", "by", "its", "ID"], "sha": "01038c897b0ab3c95924f524a7c1093f5951d8f7", "url": "https://github.com/encorephp/wxwidgets/blob/01038c897b0ab3c95924f524a7c1093f5951d8f7/src/Collection.php#L84-L94", "partition": "test"}
{"repo": "Dreamscapes/Ldap-Core", "path": "Dreamscapes/Ldap/Core/Ldap.php", "func_name": "Ldap.compare", "original_string": "public function compare($dn, $attribute, $value)\n    {\n        $retVal = @ldap_compare($this->resource, $dn, $attribute, $value);\n        $this->verifyOperation();\n\n        return $retVal;\n    }", "language": "php", "code": "public function compare($dn, $attribute, $value)\n    {\n        $retVal = @ldap_compare($this->resource, $dn, $attribute, $value);\n        $this->verifyOperation();\n\n        return $retVal;\n    }", "code_tokens": ["public", "function", "compare", "(", "$", "dn", ",", "$", "attribute", ",", "$", "value", ")", "{", "$", "retVal", "=", "@", "ldap_compare", "(", "$", "this", "->", "resource", ",", "$", "dn", ",", "$", "attribute", ",", "$", "value", ")", ";", "$", "this", "->", "verifyOperation", "(", ")", ";", "return", "$", "retVal", ";", "}"], "docstring": "Compare value of attribute found in entry specified with DN\n\n@param  string   $dn         The distinguished name of an LDAP entity\n@param  string   $attribute  The attribute name\n@param  string   $value      The compared value\n@return bool                 Returns TRUE if value matches otherwise returns FALSE", "docstring_tokens": ["Compare", "value", "of", "attribute", "found", "in", "entry", "specified", "with", "DN"], "sha": "38635f64d390845f2a63517c93549194c66b3ff8", "url": "https://github.com/Dreamscapes/Ldap-Core/blob/38635f64d390845f2a63517c93549194c66b3ff8/Dreamscapes/Ldap/Core/Ldap.php#L320-L326", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Controls/MapTypeControl.php", "func_name": "MapTypeControl.setMapTypeControlStyle", "original_string": "public function setMapTypeControlStyle($mapTypeControlStyle)\n    {\n        if (!in_array($mapTypeControlStyle, MapTypeControlStyle::getMapTypeControlStyles())) {\n            throw ControlException::invalidMapTypeControlStyle();\n        }\n\n        $this->mapTypeControlStyle = $mapTypeControlStyle;\n    }", "language": "php", "code": "public function setMapTypeControlStyle($mapTypeControlStyle)\n    {\n        if (!in_array($mapTypeControlStyle, MapTypeControlStyle::getMapTypeControlStyles())) {\n            throw ControlException::invalidMapTypeControlStyle();\n        }\n\n        $this->mapTypeControlStyle = $mapTypeControlStyle;\n    }", "code_tokens": ["public", "function", "setMapTypeControlStyle", "(", "$", "mapTypeControlStyle", ")", "{", "if", "(", "!", "in_array", "(", "$", "mapTypeControlStyle", ",", "MapTypeControlStyle", "::", "getMapTypeControlStyles", "(", ")", ")", ")", "{", "throw", "ControlException", "::", "invalidMapTypeControlStyle", "(", ")", ";", "}", "$", "this", "->", "mapTypeControlStyle", "=", "$", "mapTypeControlStyle", ";", "}"], "docstring": "Sets the map type control style.\n\n@param type $mapTypeControlStyle The map type control style.\n\n@throws \\Ivory\\GoogleMap\\Exception\\ControlException If the map type control style is not valid.", "docstring_tokens": ["Sets", "the", "map", "type", "control", "style", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Controls/MapTypeControl.php#L136-L143", "partition": "test"}
{"repo": "darsyn/class-finder", "path": "src/BundleClassFinder.php", "func_name": "BundleClassFinder.findClasses", "original_string": "public function findClasses($subDir = null, $suffix = null, $parent = null, $reflection = false)\n    {\n        $classes = [];\n        foreach ($this->bundles as $bundle) {\n            $this->setRootDirectory($bundle->getPath());\n            $this->setRootNamespace($bundle->getNamespace());\n            $classes = array_merge($classes, parent::findClasses($subDir, $suffix, $parent, $reflection));\n        }\n        return $classes;\n    }", "language": "php", "code": "public function findClasses($subDir = null, $suffix = null, $parent = null, $reflection = false)\n    {\n        $classes = [];\n        foreach ($this->bundles as $bundle) {\n            $this->setRootDirectory($bundle->getPath());\n            $this->setRootNamespace($bundle->getNamespace());\n            $classes = array_merge($classes, parent::findClasses($subDir, $suffix, $parent, $reflection));\n        }\n        return $classes;\n    }", "code_tokens": ["public", "function", "findClasses", "(", "$", "subDir", "=", "null", ",", "$", "suffix", "=", "null", ",", "$", "parent", "=", "null", ",", "$", "reflection", "=", "false", ")", "{", "$", "classes", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "bundles", "as", "$", "bundle", ")", "{", "$", "this", "->", "setRootDirectory", "(", "$", "bundle", "->", "getPath", "(", ")", ")", ";", "$", "this", "->", "setRootNamespace", "(", "$", "bundle", "->", "getNamespace", "(", ")", ")", ";", "$", "classes", "=", "array_merge", "(", "$", "classes", ",", "parent", "::", "findClasses", "(", "$", "subDir", ",", "$", "suffix", ",", "$", "parent", ",", "$", "reflection", ")", ")", ";", "}", "return", "$", "classes", ";", "}"], "docstring": "Find Classes in Bundles\n\n@access public\n@param string $subDir\n@param string $suffix\n@param string $parent\n@param boolean $reflection\n@return array", "docstring_tokens": ["Find", "Classes", "in", "Bundles"], "sha": "706648ca3d334d307caedaba552c702ee7bd867d", "url": "https://github.com/darsyn/class-finder/blob/706648ca3d334d307caedaba552c702ee7bd867d/src/BundleClassFinder.php#L74-L83", "partition": "test"}
{"repo": "Gelembjuk/templating", "path": "src/Gelembjuk/Templating/TwigTemplating.php", "func_name": "TwigTemplating.initPlugins", "original_string": "protected function initPlugins($plugins = '') {\n\t\tif (is_dir(dirname(__FILE__).'/TwigPlugins')) {\n\t\t\t$this->loadPluginsFromDirectory(dirname(__FILE__).'/TwigPlugins');\n\t\t}\n\t\t\n\t\tif (isset($plugins)) {\n\t\t\tif (is_array($plugins)) {\n\t\t\t\tforeach ($plugins as $path) {\n\t\t\t\t\t$this->loadPluginsFromDirectory($path);\n\t\t\t\t}\n\t\t\t} elseif ($plugins != '') {\n\t\t\t\t$this->loadPluginsFromDirectory($plugins);\n\t\t\t}\n\t\t}\n\t}", "language": "php", "code": "protected function initPlugins($plugins = '') {\n\t\tif (is_dir(dirname(__FILE__).'/TwigPlugins')) {\n\t\t\t$this->loadPluginsFromDirectory(dirname(__FILE__).'/TwigPlugins');\n\t\t}\n\t\t\n\t\tif (isset($plugins)) {\n\t\t\tif (is_array($plugins)) {\n\t\t\t\tforeach ($plugins as $path) {\n\t\t\t\t\t$this->loadPluginsFromDirectory($path);\n\t\t\t\t}\n\t\t\t} elseif ($plugins != '') {\n\t\t\t\t$this->loadPluginsFromDirectory($plugins);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["protected", "function", "initPlugins", "(", "$", "plugins", "=", "''", ")", "{", "if", "(", "is_dir", "(", "dirname", "(", "__FILE__", ")", ".", "'/TwigPlugins'", ")", ")", "{", "$", "this", "->", "loadPluginsFromDirectory", "(", "dirname", "(", "__FILE__", ")", ".", "'/TwigPlugins'", ")", ";", "}", "if", "(", "isset", "(", "$", "plugins", ")", ")", "{", "if", "(", "is_array", "(", "$", "plugins", ")", ")", "{", "foreach", "(", "$", "plugins", "as", "$", "path", ")", "{", "$", "this", "->", "loadPluginsFromDirectory", "(", "$", "path", ")", ";", "}", "}", "elseif", "(", "$", "plugins", "!=", "''", ")", "{", "$", "this", "->", "loadPluginsFromDirectory", "(", "$", "plugins", ")", ";", "}", "}", "}"], "docstring": "Init plugins and extra plugins on the engine\n\n@param string|array Path(s) to plugins sirectory", "docstring_tokens": ["Init", "plugins", "and", "extra", "plugins", "on", "the", "engine"], "sha": "5efa66410f02325b5e41cd962f35a07813e859df", "url": "https://github.com/Gelembjuk/templating/blob/5efa66410f02325b5e41cd962f35a07813e859df/src/Gelembjuk/Templating/TwigTemplating.php#L53-L67", "partition": "test"}
{"repo": "miladrahimi/phprouter", "path": "src/Router.php", "func_name": "Router.compareDomain", "original_string": "private function compareDomain(?string $routeDomain, string $requestDomain): bool\n    {\n        return $routeDomain == null || preg_match('@^'.$routeDomain.'$@', $requestDomain);\n    }", "language": "php", "code": "private function compareDomain(?string $routeDomain, string $requestDomain): bool\n    {\n        return $routeDomain == null || preg_match('@^'.$routeDomain.'$@', $requestDomain);\n    }", "code_tokens": ["private", "function", "compareDomain", "(", "?", "string", "$", "routeDomain", ",", "string", "$", "requestDomain", ")", ":", "bool", "{", "return", "$", "routeDomain", "==", "null", "||", "preg_match", "(", "'@^'", ".", "$", "routeDomain", ".", "'$@'", ",", "$", "requestDomain", ")", ";", "}"], "docstring": "Check if given request domain matches given route domain\n\n@param string|null $routeDomain\n@param string $requestDomain\n@return bool", "docstring_tokens": ["Check", "if", "given", "request", "domain", "matches", "given", "route", "domain"], "sha": "7036181516b1cfa77bdd323cc3f2a6a8af95cee8", "url": "https://github.com/miladrahimi/phprouter/blob/7036181516b1cfa77bdd323cc3f2a6a8af95cee8/src/Router.php#L249-L252", "partition": "test"}
{"repo": "tekkla/core-toolbox", "path": "Core/Toolbox/IO/Sendfile.php", "func_name": "Sendfile.getContentType", "original_string": "public function getContentType(): string\n    {\n        if (empty($this->content_type) && !empty($this->file)) {\n            $this->content_type = $this->getMimeType($this->file);\n        }\n\n        return $this->content_type;\n    }", "language": "php", "code": "public function getContentType(): string\n    {\n        if (empty($this->content_type) && !empty($this->file)) {\n            $this->content_type = $this->getMimeType($this->file);\n        }\n\n        return $this->content_type;\n    }", "code_tokens": ["public", "function", "getContentType", "(", ")", ":", "string", "{", "if", "(", "empty", "(", "$", "this", "->", "content_type", ")", "&&", "!", "empty", "(", "$", "this", "->", "file", ")", ")", "{", "$", "this", "->", "content_type", "=", "$", "this", "->", "getMimeType", "(", "$", "this", "->", "file", ")", ";", "}", "return", "$", "this", "->", "content_type", ";", "}"], "docstring": "Returns content type of file\n\nTries to autodetect content type when no type is set.\n\n@return string", "docstring_tokens": ["Returns", "content", "type", "of", "file"], "sha": "c21ad38c54ff57e7ce57dc01dbfa72b4005889e4", "url": "https://github.com/tekkla/core-toolbox/blob/c21ad38c54ff57e7ce57dc01dbfa72b4005889e4/Core/Toolbox/IO/Sendfile.php#L57-L64", "partition": "test"}
{"repo": "OXID-eSales/oxideshop_composer_plugin", "path": "src/Utilities/CopyFileManager/CopyGlobFilteredFileManager.php", "func_name": "CopyGlobFilteredFileManager.getFlatFileListIterator", "original_string": "private static function getFlatFileListIterator($sourcePath)\n    {\n        $recursiveFileIterator = new \\RecursiveDirectoryIterator($sourcePath, \\FilesystemIterator::SKIP_DOTS);\n        $flatFileListIterator = new \\RecursiveIteratorIterator($recursiveFileIterator);\n\n        return $flatFileListIterator;\n    }", "language": "php", "code": "private static function getFlatFileListIterator($sourcePath)\n    {\n        $recursiveFileIterator = new \\RecursiveDirectoryIterator($sourcePath, \\FilesystemIterator::SKIP_DOTS);\n        $flatFileListIterator = new \\RecursiveIteratorIterator($recursiveFileIterator);\n\n        return $flatFileListIterator;\n    }", "code_tokens": ["private", "static", "function", "getFlatFileListIterator", "(", "$", "sourcePath", ")", "{", "$", "recursiveFileIterator", "=", "new", "\\", "RecursiveDirectoryIterator", "(", "$", "sourcePath", ",", "\\", "FilesystemIterator", "::", "SKIP_DOTS", ")", ";", "$", "flatFileListIterator", "=", "new", "\\", "RecursiveIteratorIterator", "(", "$", "recursiveFileIterator", ")", ";", "return", "$", "flatFileListIterator", ";", "}"], "docstring": "Return an iterator which iterates through a given directory tree in a one-dimensional fashion.\n\nConsider the following file/directory structure as an example:\n\n* directory_a\n* file_a_a\n* directory_b\n* file_b_a\n* file_b_b\n* file_c\n\nRecursiveDirectoryIterator would iterate through:\n* directory_a [iterator]\n* directory_b [iterator]\n* file_c [SplFileInfo]\n\nIn contrast current method would iterate through:\n* directory_a [SplFileInfo]\n* directory_a/file_a_a [SplFileInfo]\n* directory_b [SplFileInfo]\n* directory_b/file_b_a [SplFileInfo]\n* directory_b/file_b_b [SplFileInfo]\n* file_c [SplFileInfo]\n\n@param string $sourcePath Absolute path to directory.\n\n@return \\Iterator", "docstring_tokens": ["Return", "an", "iterator", "which", "iterates", "through", "a", "given", "directory", "tree", "in", "a", "one", "-", "dimensional", "fashion", "."], "sha": "867d38a2637a191ceba1680ac6af41f6694affed", "url": "https://github.com/OXID-eSales/oxideshop_composer_plugin/blob/867d38a2637a191ceba1680ac6af41f6694affed/src/Utilities/CopyFileManager/CopyGlobFilteredFileManager.php#L101-L107", "partition": "test"}
{"repo": "lmc-eu/steward", "path": "src/Selenium/Downloader.php", "func_name": "Downloader.getVersion", "original_string": "public function getVersion(): ?string\n    {\n        if (!$this->version) {\n            $this->version = self::getLatestVersion();\n        }\n\n        return $this->version;\n    }", "language": "php", "code": "public function getVersion(): ?string\n    {\n        if (!$this->version) {\n            $this->version = self::getLatestVersion();\n        }\n\n        return $this->version;\n    }", "code_tokens": ["public", "function", "getVersion", "(", ")", ":", "?", "string", "{", "if", "(", "!", "$", "this", "->", "version", ")", "{", "$", "this", "->", "version", "=", "self", "::", "getLatestVersion", "(", ")", ";", "}", "return", "$", "this", "->", "version", ";", "}"], "docstring": "Get version that should be downloaded; if not set, attempt to retrieve latest released version", "docstring_tokens": ["Get", "version", "that", "should", "be", "downloaded", ";", "if", "not", "set", "attempt", "to", "retrieve", "latest", "released", "version"], "sha": "507db72cd5994fd290a79529048fe954f332c9b0", "url": "https://github.com/lmc-eu/steward/blob/507db72cd5994fd290a79529048fe954f332c9b0/src/Selenium/Downloader.php#L98-L105", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-common/src/Common/Middlewares/HistoryMiddleware.php", "func_name": "HistoryMiddleware.appendNewEntryToPath", "original_string": "private function appendNewEntryToPath(array $entry)\n    {\n        $entryNoString = \"Entry \" . $this->count;\n        $delimiter = str_pad(\n            $entryNoString,\n            self::TITLE_LENGTH,\n            '-',\n            STR_PAD_BOTH\n        ) . PHP_EOL;\n        $entryString = $delimiter;\n        $entryString .= sprintf(\n            \"Time: %s\\n\",\n            (new \\DateTime(\"now\", new \\DateTimeZone('UTC')))->format('Y-m-d H:i:s')\n        );\n        $entryString .= MessageSerializer::objectSerialize($entry['request']);\n        if (array_key_exists('reason', $entry)) {\n            $entryString .= MessageSerializer::objectSerialize($entry['reason']);\n        } elseif (array_key_exists('response', $entry)) {\n            $entryString .= MessageSerializer::objectSerialize($entry['response']);\n        }\n\n        $entryString .= $delimiter;\n\n        Utilities::appendToFile($this->path, $entryString);\n    }", "language": "php", "code": "private function appendNewEntryToPath(array $entry)\n    {\n        $entryNoString = \"Entry \" . $this->count;\n        $delimiter = str_pad(\n            $entryNoString,\n            self::TITLE_LENGTH,\n            '-',\n            STR_PAD_BOTH\n        ) . PHP_EOL;\n        $entryString = $delimiter;\n        $entryString .= sprintf(\n            \"Time: %s\\n\",\n            (new \\DateTime(\"now\", new \\DateTimeZone('UTC')))->format('Y-m-d H:i:s')\n        );\n        $entryString .= MessageSerializer::objectSerialize($entry['request']);\n        if (array_key_exists('reason', $entry)) {\n            $entryString .= MessageSerializer::objectSerialize($entry['reason']);\n        } elseif (array_key_exists('response', $entry)) {\n            $entryString .= MessageSerializer::objectSerialize($entry['response']);\n        }\n\n        $entryString .= $delimiter;\n\n        Utilities::appendToFile($this->path, $entryString);\n    }", "code_tokens": ["private", "function", "appendNewEntryToPath", "(", "array", "$", "entry", ")", "{", "$", "entryNoString", "=", "\"Entry \"", ".", "$", "this", "->", "count", ";", "$", "delimiter", "=", "str_pad", "(", "$", "entryNoString", ",", "self", "::", "TITLE_LENGTH", ",", "'-'", ",", "STR_PAD_BOTH", ")", ".", "PHP_EOL", ";", "$", "entryString", "=", "$", "delimiter", ";", "$", "entryString", ".=", "sprintf", "(", "\"Time: %s\\n\"", ",", "(", "new", "\\", "DateTime", "(", "\"now\"", ",", "new", "\\", "DateTimeZone", "(", "'UTC'", ")", ")", ")", "->", "format", "(", "'Y-m-d H:i:s'", ")", ")", ";", "$", "entryString", ".=", "MessageSerializer", "::", "objectSerialize", "(", "$", "entry", "[", "'request'", "]", ")", ";", "if", "(", "array_key_exists", "(", "'reason'", ",", "$", "entry", ")", ")", "{", "$", "entryString", ".=", "MessageSerializer", "::", "objectSerialize", "(", "$", "entry", "[", "'reason'", "]", ")", ";", "}", "elseif", "(", "array_key_exists", "(", "'response'", ",", "$", "entry", ")", ")", "{", "$", "entryString", ".=", "MessageSerializer", "::", "objectSerialize", "(", "$", "entry", "[", "'response'", "]", ")", ";", "}", "$", "entryString", ".=", "$", "delimiter", ";", "Utilities", "::", "appendToFile", "(", "$", "this", "->", "path", ",", "$", "entryString", ")", ";", "}"], "docstring": "Append the new entry to saved file path.\n\n@param array $entry the entry to be added.\n\n@return void", "docstring_tokens": ["Append", "the", "new", "entry", "to", "saved", "file", "path", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-common/src/Common/Middlewares/HistoryMiddleware.php#L175-L199", "partition": "test"}
{"repo": "Chibi86/CDatabaseModel", "path": "src/MVC/CDatabaseModel.php", "func_name": "CDatabaseModel.findAll", "original_string": "public function findAll($page = 1, $perPage = 0)\n  {\n    $this->db->select()\n             ->from($this->getSource());\n    \n    if(is_numeric($perPage) && $perPage > 0){\n      $this->db->limit($perPage);\n      \n      if(is_numeric($page) && $page > 1){\n        $offset = $this->paging->getOffset($page, $perPage);\n        $this->db->offset($offset);\n      }\n    }\n    \n    $this->db->execute();\n    $this->db->setFetchModeClass(__CLASS__);\n    return $this->db->fetchAll();\n  }", "language": "php", "code": "public function findAll($page = 1, $perPage = 0)\n  {\n    $this->db->select()\n             ->from($this->getSource());\n    \n    if(is_numeric($perPage) && $perPage > 0){\n      $this->db->limit($perPage);\n      \n      if(is_numeric($page) && $page > 1){\n        $offset = $this->paging->getOffset($page, $perPage);\n        $this->db->offset($offset);\n      }\n    }\n    \n    $this->db->execute();\n    $this->db->setFetchModeClass(__CLASS__);\n    return $this->db->fetchAll();\n  }", "code_tokens": ["public", "function", "findAll", "(", "$", "page", "=", "1", ",", "$", "perPage", "=", "0", ")", "{", "$", "this", "->", "db", "->", "select", "(", ")", "->", "from", "(", "$", "this", "->", "getSource", "(", ")", ")", ";", "if", "(", "is_numeric", "(", "$", "perPage", ")", "&&", "$", "perPage", ">", "0", ")", "{", "$", "this", "->", "db", "->", "limit", "(", "$", "perPage", ")", ";", "if", "(", "is_numeric", "(", "$", "page", ")", "&&", "$", "page", ">", "1", ")", "{", "$", "offset", "=", "$", "this", "->", "paging", "->", "getOffset", "(", "$", "page", ",", "$", "perPage", ")", ";", "$", "this", "->", "db", "->", "offset", "(", "$", "offset", ")", ";", "}", "}", "$", "this", "->", "db", "->", "execute", "(", ")", ";", "$", "this", "->", "db", "->", "setFetchModeClass", "(", "__CLASS__", ")", ";", "return", "$", "this", "->", "db", "->", "fetchAll", "(", ")", ";", "}"], "docstring": "Find and return all\n\n@param  \t  int\t      $page\t\t\t\tWich page paging are at\n@param  \t  int\t      $perPage\t\tThreads per page\n@return    object                Object of database rows", "docstring_tokens": ["Find", "and", "return", "all"], "sha": "5ac5f0bcd5df5885c714a7a27c3835cf9193094f", "url": "https://github.com/Chibi86/CDatabaseModel/blob/5ac5f0bcd5df5885c714a7a27c3835cf9193094f/src/MVC/CDatabaseModel.php#L58-L75", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Profiler/DataCollector/Bridge/PDO/TraceablePDODecorater.php", "func_name": "TraceablePDODecorater.getMemoryUsage", "original_string": "public function getMemoryUsage(): int\n    {\n        return \\array_reduce($this->executedStatements, static function ($v, $s) {\n            return $v + $s->getMemoryUsage();\n        });\n    }", "language": "php", "code": "public function getMemoryUsage(): int\n    {\n        return \\array_reduce($this->executedStatements, static function ($v, $s) {\n            return $v + $s->getMemoryUsage();\n        });\n    }", "code_tokens": ["public", "function", "getMemoryUsage", "(", ")", ":", "int", "{", "return", "\\", "array_reduce", "(", "$", "this", "->", "executedStatements", ",", "static", "function", "(", "$", "v", ",", "$", "s", ")", "{", "return", "$", "v", "+", "$", "s", "->", "getMemoryUsage", "(", ")", ";", "}", ")", ";", "}"], "docstring": "Returns the peak memory usage while performing statements.\n\n@return int", "docstring_tokens": ["Returns", "the", "peak", "memory", "usage", "while", "performing", "statements", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Profiler/DataCollector/Bridge/PDO/TraceablePDODecorater.php#L178-L183", "partition": "test"}
{"repo": "F21/Paradox", "path": "Paradox/toolbox/CollectionManager.php", "func_name": "CollectionManager.createCollection", "original_string": "public function createCollection($name)\n    {\n        try {\n            return $this->_toolbox->getCollectionHandler()->create($name);\n        } catch (\\Exception $e) {\n            $normalised = $this->_toolbox->normaliseDriverExceptions($e);\n            throw new CollectionManagerException($normalised['message'], $normalised['code']);\n        }\n    }", "language": "php", "code": "public function createCollection($name)\n    {\n        try {\n            return $this->_toolbox->getCollectionHandler()->create($name);\n        } catch (\\Exception $e) {\n            $normalised = $this->_toolbox->normaliseDriverExceptions($e);\n            throw new CollectionManagerException($normalised['message'], $normalised['code']);\n        }\n    }", "code_tokens": ["public", "function", "createCollection", "(", "$", "name", ")", "{", "try", "{", "return", "$", "this", "->", "_toolbox", "->", "getCollectionHandler", "(", ")", "->", "create", "(", "$", "name", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "$", "normalised", "=", "$", "this", "->", "_toolbox", "->", "normaliseDriverExceptions", "(", "$", "e", ")", ";", "throw", "new", "CollectionManagerException", "(", "$", "normalised", "[", "'message'", "]", ",", "$", "normalised", "[", "'code'", "]", ")", ";", "}", "}"], "docstring": "Create a collection.\n@param  string                     $name The name of the collection.\n@throws CollectionManagerException\n@return string", "docstring_tokens": ["Create", "a", "collection", "."], "sha": "d1f47203e743760d8d8d6232bf0ea62920e7eefe", "url": "https://github.com/F21/Paradox/blob/d1f47203e743760d8d8d6232bf0ea62920e7eefe/Paradox/toolbox/CollectionManager.php#L48-L56", "partition": "test"}
{"repo": "Roave/BetterReflection", "path": "src/Reflection/ReflectionParameter.php", "func_name": "ReflectionParameter.allowsNull", "original_string": "public function allowsNull() : bool\n    {\n        if (! $this->hasType()) {\n            return true;\n        }\n\n        if ($this->node->type instanceof NullableType) {\n            return true;\n        }\n\n        if (! $this->isDefaultValueAvailable()) {\n            return false;\n        }\n\n        return $this->getDefaultValue() === null;\n    }", "language": "php", "code": "public function allowsNull() : bool\n    {\n        if (! $this->hasType()) {\n            return true;\n        }\n\n        if ($this->node->type instanceof NullableType) {\n            return true;\n        }\n\n        if (! $this->isDefaultValueAvailable()) {\n            return false;\n        }\n\n        return $this->getDefaultValue() === null;\n    }", "code_tokens": ["public", "function", "allowsNull", "(", ")", ":", "bool", "{", "if", "(", "!", "$", "this", "->", "hasType", "(", ")", ")", "{", "return", "true", ";", "}", "if", "(", "$", "this", "->", "node", "->", "type", "instanceof", "NullableType", ")", "{", "return", "true", ";", "}", "if", "(", "!", "$", "this", "->", "isDefaultValueAvailable", "(", ")", ")", "{", "return", "false", ";", "}", "return", "$", "this", "->", "getDefaultValue", "(", ")", "===", "null", ";", "}"], "docstring": "Does this method allow null for a parameter?", "docstring_tokens": ["Does", "this", "method", "allow", "null", "for", "a", "parameter?"], "sha": "173f42ccb0af41b01b3c2dfd5bd185ccd9ead50c", "url": "https://github.com/Roave/BetterReflection/blob/173f42ccb0af41b01b3c2dfd5bd185ccd9ead50c/src/Reflection/ReflectionParameter.php#L310-L325", "partition": "test"}
{"repo": "realexpayments/rxp-hpp-php", "path": "src/main/php/com-realexpayments-hpp-sdk/domain/HppRequest.php", "func_name": "HppRequest.encode", "original_string": "public function encode( $charSet ) {\n\t\t$this->account               = base64_encode( $this->account );\n\t\t$this->amount                = base64_encode( $this->amount );\n\t\t$this->autoSettleFlag        = base64_encode( $this->autoSettleFlag );\n\t\t$this->billingCode           = base64_encode( $this->billingCode );\n\t\t$this->billingCountry        = base64_encode( $this->billingCountry );\n\t\t$this->cardPaymentButtonText = base64_encode( $this->cardPaymentButtonText );\n\t\t$this->cardStorageEnable     = base64_encode( $this->cardStorageEnable );\n\t\t$this->commentOne            = base64_encode( $this->commentOne );\n\t\t$this->commentTwo            = base64_encode( $this->commentTwo );\n\t\t$this->currency              = base64_encode( $this->currency );\n\t\t$this->customerNumber        = base64_encode( $this->customerNumber );\n\t\t$this->hash                  = base64_encode( $this->hash );\n\t\t$this->language              = base64_encode( $this->language );\n\t\t$this->merchantId            = base64_encode( $this->merchantId );\n\t\t$this->offerSaveCard         = base64_encode( $this->offerSaveCard );\n\t\t$this->orderId               = base64_encode( $this->orderId );\n\t\t$this->payerExists           = base64_encode( $this->payerExists );\n\t\t$this->payerReference        = base64_encode( $this->payerReference );\n\t\t$this->paymentReference      = base64_encode( $this->paymentReference );\n\t\t$this->productId             = base64_encode( $this->productId );\n\t\t$this->returnTss             = base64_encode( $this->returnTss );\n\t\t$this->shippingCode          = base64_encode( $this->shippingCode );\n\t\t$this->shippingCountry       = base64_encode( $this->shippingCountry );\n\t\t$this->timeStamp             = base64_encode( $this->timeStamp );\n\t\t$this->variableReference     = base64_encode( $this->variableReference );\n\t\t$this->validateCardOnly \t = base64_encode( $this->validateCardOnly );\n\t\t$this->dccEnable         \t = base64_encode( $this->dccEnable );\n\t\t$this->hppVersion     \t\t = base64_encode( $this->hppVersion );\n\t\t$this->hppSelectStoredCard    = base64_encode( $this->hppSelectStoredCard );\n\t\t$this->postResponse   \t\t = base64_encode( $this->postResponse );\n\t\t$this->postDimensions   \t = base64_encode( $this->postDimensions );\n\n\t\tif ( is_array( $this->supplementaryData ) ) {\n\t\t\tforeach ( $this->supplementaryData as $key => $value ) {\n\t\t\t\t$this->supplementaryData[ $key ] = base64_encode( $value );\n\t\t\t}\n\t\t}\n\n\n\n\n\t\treturn $this;\n\t}", "language": "php", "code": "public function encode( $charSet ) {\n\t\t$this->account               = base64_encode( $this->account );\n\t\t$this->amount                = base64_encode( $this->amount );\n\t\t$this->autoSettleFlag        = base64_encode( $this->autoSettleFlag );\n\t\t$this->billingCode           = base64_encode( $this->billingCode );\n\t\t$this->billingCountry        = base64_encode( $this->billingCountry );\n\t\t$this->cardPaymentButtonText = base64_encode( $this->cardPaymentButtonText );\n\t\t$this->cardStorageEnable     = base64_encode( $this->cardStorageEnable );\n\t\t$this->commentOne            = base64_encode( $this->commentOne );\n\t\t$this->commentTwo            = base64_encode( $this->commentTwo );\n\t\t$this->currency              = base64_encode( $this->currency );\n\t\t$this->customerNumber        = base64_encode( $this->customerNumber );\n\t\t$this->hash                  = base64_encode( $this->hash );\n\t\t$this->language              = base64_encode( $this->language );\n\t\t$this->merchantId            = base64_encode( $this->merchantId );\n\t\t$this->offerSaveCard         = base64_encode( $this->offerSaveCard );\n\t\t$this->orderId               = base64_encode( $this->orderId );\n\t\t$this->payerExists           = base64_encode( $this->payerExists );\n\t\t$this->payerReference        = base64_encode( $this->payerReference );\n\t\t$this->paymentReference      = base64_encode( $this->paymentReference );\n\t\t$this->productId             = base64_encode( $this->productId );\n\t\t$this->returnTss             = base64_encode( $this->returnTss );\n\t\t$this->shippingCode          = base64_encode( $this->shippingCode );\n\t\t$this->shippingCountry       = base64_encode( $this->shippingCountry );\n\t\t$this->timeStamp             = base64_encode( $this->timeStamp );\n\t\t$this->variableReference     = base64_encode( $this->variableReference );\n\t\t$this->validateCardOnly \t = base64_encode( $this->validateCardOnly );\n\t\t$this->dccEnable         \t = base64_encode( $this->dccEnable );\n\t\t$this->hppVersion     \t\t = base64_encode( $this->hppVersion );\n\t\t$this->hppSelectStoredCard    = base64_encode( $this->hppSelectStoredCard );\n\t\t$this->postResponse   \t\t = base64_encode( $this->postResponse );\n\t\t$this->postDimensions   \t = base64_encode( $this->postDimensions );\n\n\t\tif ( is_array( $this->supplementaryData ) ) {\n\t\t\tforeach ( $this->supplementaryData as $key => $value ) {\n\t\t\t\t$this->supplementaryData[ $key ] = base64_encode( $value );\n\t\t\t}\n\t\t}\n\n\n\n\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "encode", "(", "$", "charSet", ")", "{", "$", "this", "->", "account", "=", "base64_encode", "(", "$", "this", "->", "account", ")", ";", "$", "this", "->", "amount", "=", "base64_encode", "(", "$", "this", "->", "amount", ")", ";", "$", "this", "->", "autoSettleFlag", "=", "base64_encode", "(", "$", "this", "->", "autoSettleFlag", ")", ";", "$", "this", "->", "billingCode", "=", "base64_encode", "(", "$", "this", "->", "billingCode", ")", ";", "$", "this", "->", "billingCountry", "=", "base64_encode", "(", "$", "this", "->", "billingCountry", ")", ";", "$", "this", "->", "cardPaymentButtonText", "=", "base64_encode", "(", "$", "this", "->", "cardPaymentButtonText", ")", ";", "$", "this", "->", "cardStorageEnable", "=", "base64_encode", "(", "$", "this", "->", "cardStorageEnable", ")", ";", "$", "this", "->", "commentOne", "=", "base64_encode", "(", "$", "this", "->", "commentOne", ")", ";", "$", "this", "->", "commentTwo", "=", "base64_encode", "(", "$", "this", "->", "commentTwo", ")", ";", "$", "this", "->", "currency", "=", "base64_encode", "(", "$", "this", "->", "currency", ")", ";", "$", "this", "->", "customerNumber", "=", "base64_encode", "(", "$", "this", "->", "customerNumber", ")", ";", "$", "this", "->", "hash", "=", "base64_encode", "(", "$", "this", "->", "hash", ")", ";", "$", "this", "->", "language", "=", "base64_encode", "(", "$", "this", "->", "language", ")", ";", "$", "this", "->", "merchantId", "=", "base64_encode", "(", "$", "this", "->", "merchantId", ")", ";", "$", "this", "->", "offerSaveCard", "=", "base64_encode", "(", "$", "this", "->", "offerSaveCard", ")", ";", "$", "this", "->", "orderId", "=", "base64_encode", "(", "$", "this", "->", "orderId", ")", ";", "$", "this", "->", "payerExists", "=", "base64_encode", "(", "$", "this", "->", "payerExists", ")", ";", "$", "this", "->", "payerReference", "=", "base64_encode", "(", "$", "this", "->", "payerReference", ")", ";", "$", "this", "->", "paymentReference", "=", "base64_encode", "(", "$", "this", "->", "paymentReference", ")", ";", "$", "this", "->", "productId", "=", "base64_encode", "(", "$", "this", "->", "productId", ")", ";", "$", "this", "->", "returnTss", "=", "base64_encode", "(", "$", "this", "->", "returnTss", ")", ";", "$", "this", "->", "shippingCode", "=", "base64_encode", "(", "$", "this", "->", "shippingCode", ")", ";", "$", "this", "->", "shippingCountry", "=", "base64_encode", "(", "$", "this", "->", "shippingCountry", ")", ";", "$", "this", "->", "timeStamp", "=", "base64_encode", "(", "$", "this", "->", "timeStamp", ")", ";", "$", "this", "->", "variableReference", "=", "base64_encode", "(", "$", "this", "->", "variableReference", ")", ";", "$", "this", "->", "validateCardOnly", "=", "base64_encode", "(", "$", "this", "->", "validateCardOnly", ")", ";", "$", "this", "->", "dccEnable", "=", "base64_encode", "(", "$", "this", "->", "dccEnable", ")", ";", "$", "this", "->", "hppVersion", "=", "base64_encode", "(", "$", "this", "->", "hppVersion", ")", ";", "$", "this", "->", "hppSelectStoredCard", "=", "base64_encode", "(", "$", "this", "->", "hppSelectStoredCard", ")", ";", "$", "this", "->", "postResponse", "=", "base64_encode", "(", "$", "this", "->", "postResponse", ")", ";", "$", "this", "->", "postDimensions", "=", "base64_encode", "(", "$", "this", "->", "postDimensions", ")", ";", "if", "(", "is_array", "(", "$", "this", "->", "supplementaryData", ")", ")", "{", "foreach", "(", "$", "this", "->", "supplementaryData", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "this", "->", "supplementaryData", "[", "$", "key", "]", "=", "base64_encode", "(", "$", "value", ")", ";", "}", "}", "return", "$", "this", ";", "}"], "docstring": "Base64 encodes all Hpp Request values.\n\n@param string $charSet\n\n@return HppRequest", "docstring_tokens": ["Base64", "encodes", "all", "Hpp", "Request", "values", "."], "sha": "95437a296cc87ca69a29dda256872b1ea52e7be9", "url": "https://github.com/realexpayments/rxp-hpp-php/blob/95437a296cc87ca69a29dda256872b1ea52e7be9/src/main/php/com-realexpayments-hpp-sdk/domain/HppRequest.php#L1547-L1590", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/BaseUtils.php", "func_name": "BaseUtils.getCSVFromResult", "original_string": "public function getCSVFromResult(ResultInterface $query, string $delim = ',', string $newline = \"\\n\", string $enclosure = '\"')\n\t{\n\t\t$out = '';\n\t\t// First generate the headings from the table column names\n\t\tforeach ($query->getFieldNames() as $name)\n\t\t{\n\t\t\t$out .= $enclosure . str_replace($enclosure, $enclosure . $enclosure, $name) . $enclosure . $delim;\n\t\t}\n\n\t\t$out = substr($out, 0, -strlen($delim)) . $newline;\n\n\t\t// Next blast through the result array and build out the rows\n\t\twhile ($row = $query->getUnbufferedRow('array'))\n\t\t{\n\t\t\t$line = [];\n\t\t\tforeach ($row as $item)\n\t\t\t{\n\t\t\t\t$line[] = $enclosure . str_replace($enclosure, $enclosure . $enclosure, $item) . $enclosure;\n\t\t\t}\n\t\t\t$out .= implode($delim, $line) . $newline;\n\t\t}\n\n\t\treturn $out;\n\t}", "language": "php", "code": "public function getCSVFromResult(ResultInterface $query, string $delim = ',', string $newline = \"\\n\", string $enclosure = '\"')\n\t{\n\t\t$out = '';\n\t\t// First generate the headings from the table column names\n\t\tforeach ($query->getFieldNames() as $name)\n\t\t{\n\t\t\t$out .= $enclosure . str_replace($enclosure, $enclosure . $enclosure, $name) . $enclosure . $delim;\n\t\t}\n\n\t\t$out = substr($out, 0, -strlen($delim)) . $newline;\n\n\t\t// Next blast through the result array and build out the rows\n\t\twhile ($row = $query->getUnbufferedRow('array'))\n\t\t{\n\t\t\t$line = [];\n\t\t\tforeach ($row as $item)\n\t\t\t{\n\t\t\t\t$line[] = $enclosure . str_replace($enclosure, $enclosure . $enclosure, $item) . $enclosure;\n\t\t\t}\n\t\t\t$out .= implode($delim, $line) . $newline;\n\t\t}\n\n\t\treturn $out;\n\t}", "code_tokens": ["public", "function", "getCSVFromResult", "(", "ResultInterface", "$", "query", ",", "string", "$", "delim", "=", "','", ",", "string", "$", "newline", "=", "\"\\n\"", ",", "string", "$", "enclosure", "=", "'\"'", ")", "{", "$", "out", "=", "''", ";", "// First generate the headings from the table column names", "foreach", "(", "$", "query", "->", "getFieldNames", "(", ")", "as", "$", "name", ")", "{", "$", "out", ".=", "$", "enclosure", ".", "str_replace", "(", "$", "enclosure", ",", "$", "enclosure", ".", "$", "enclosure", ",", "$", "name", ")", ".", "$", "enclosure", ".", "$", "delim", ";", "}", "$", "out", "=", "substr", "(", "$", "out", ",", "0", ",", "-", "strlen", "(", "$", "delim", ")", ")", ".", "$", "newline", ";", "// Next blast through the result array and build out the rows", "while", "(", "$", "row", "=", "$", "query", "->", "getUnbufferedRow", "(", "'array'", ")", ")", "{", "$", "line", "=", "[", "]", ";", "foreach", "(", "$", "row", "as", "$", "item", ")", "{", "$", "line", "[", "]", "=", "$", "enclosure", ".", "str_replace", "(", "$", "enclosure", ",", "$", "enclosure", ".", "$", "enclosure", ",", "$", "item", ")", ".", "$", "enclosure", ";", "}", "$", "out", ".=", "implode", "(", "$", "delim", ",", "$", "line", ")", ".", "$", "newline", ";", "}", "return", "$", "out", ";", "}"], "docstring": "Generate CSV from a query result object\n\n@param ResultInterface $query     Query result object\n@param string          $delim     Delimiter (default: ,)\n@param string          $newline   Newline character (default: \\n)\n@param string          $enclosure Enclosure (default: \")\n\n@return string", "docstring_tokens": ["Generate", "CSV", "from", "a", "query", "result", "object"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/BaseUtils.php#L267-L290", "partition": "test"}
{"repo": "clean/data", "path": "src/Collection.php", "func_name": "Collection.distinctOn", "original_string": "public function distinctOn($propertyName)\n    {\n        $values = [];\n        $keys = [];\n        foreach ($this as $key => $entity) {\n            if (in_array($entity->$propertyName, $values)) {\n                $keys[] = $key;\n            } else {\n                $values[] = $entity->$propertyName;\n            }\n        }\n        $this->offsetUnset($keys);\n        return $this;\n    }", "language": "php", "code": "public function distinctOn($propertyName)\n    {\n        $values = [];\n        $keys = [];\n        foreach ($this as $key => $entity) {\n            if (in_array($entity->$propertyName, $values)) {\n                $keys[] = $key;\n            } else {\n                $values[] = $entity->$propertyName;\n            }\n        }\n        $this->offsetUnset($keys);\n        return $this;\n    }", "code_tokens": ["public", "function", "distinctOn", "(", "$", "propertyName", ")", "{", "$", "values", "=", "[", "]", ";", "$", "keys", "=", "[", "]", ";", "foreach", "(", "$", "this", "as", "$", "key", "=>", "$", "entity", ")", "{", "if", "(", "in_array", "(", "$", "entity", "->", "$", "propertyName", ",", "$", "values", ")", ")", "{", "$", "keys", "[", "]", "=", "$", "key", ";", "}", "else", "{", "$", "values", "[", "]", "=", "$", "entity", "->", "$", "propertyName", ";", "}", "}", "$", "this", "->", "offsetUnset", "(", "$", "keys", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Eliminates entities that contains the same value in given property\n\n@param string $propertyName Name of the property\n\n@return static", "docstring_tokens": ["Eliminates", "entities", "that", "contains", "the", "same", "value", "in", "given", "property"], "sha": "3f5d50bc2bda6d596dc970587da8d3e7a7997d59", "url": "https://github.com/clean/data/blob/3f5d50bc2bda6d596dc970587da8d3e7a7997d59/src/Collection.php#L493-L506", "partition": "test"}
{"repo": "silvershop/silvershop-core", "path": "src/Model/Variation/Variation.php", "func_name": "Variation.onBeforeWrite", "original_string": "public function onBeforeWrite()\n    {\n        parent::onBeforeWrite();\n\n        if (isset($_POST['ProductAttributes']) && is_array($_POST['ProductAttributes'])) {\n            $this->AttributeValues()->setByIDList(array_values($_POST['ProductAttributes']));\n        }\n\n        $img = $this->Image();\n\n        if ($img && $img->exists()) {\n            $img->doPublish();\n        }\n    }", "language": "php", "code": "public function onBeforeWrite()\n    {\n        parent::onBeforeWrite();\n\n        if (isset($_POST['ProductAttributes']) && is_array($_POST['ProductAttributes'])) {\n            $this->AttributeValues()->setByIDList(array_values($_POST['ProductAttributes']));\n        }\n\n        $img = $this->Image();\n\n        if ($img && $img->exists()) {\n            $img->doPublish();\n        }\n    }", "code_tokens": ["public", "function", "onBeforeWrite", "(", ")", "{", "parent", "::", "onBeforeWrite", "(", ")", ";", "if", "(", "isset", "(", "$", "_POST", "[", "'ProductAttributes'", "]", ")", "&&", "is_array", "(", "$", "_POST", "[", "'ProductAttributes'", "]", ")", ")", "{", "$", "this", "->", "AttributeValues", "(", ")", "->", "setByIDList", "(", "array_values", "(", "$", "_POST", "[", "'ProductAttributes'", "]", ")", ")", ";", "}", "$", "img", "=", "$", "this", "->", "Image", "(", ")", ";", "if", "(", "$", "img", "&&", "$", "img", "->", "exists", "(", ")", ")", "{", "$", "img", "->", "doPublish", "(", ")", ";", "}", "}"], "docstring": "Save selected attributes - somewhat of a hack.", "docstring_tokens": ["Save", "selected", "attributes", "-", "somewhat", "of", "a", "hack", "."], "sha": "b090e970b06c0fb7e68107360760b6e2d6d184c4", "url": "https://github.com/silvershop/silvershop-core/blob/b090e970b06c0fb7e68107360760b6e2d6d184c4/src/Model/Variation/Variation.php#L231-L244", "partition": "test"}
{"repo": "cnvs/easel", "path": "src/Helpers/RouteHelper.php", "func_name": "RouteHelper.getBlogPrefix", "original_string": "public static function getBlogPrefix()\n    {\n        $config = ConfigHelper::getWriter();\n        $val = $config->get('blog_prefix');\n\n        return is_null($val) ? self::ROUTE_DEFAULT_BLOG_PREFIX : $val;\n    }", "language": "php", "code": "public static function getBlogPrefix()\n    {\n        $config = ConfigHelper::getWriter();\n        $val = $config->get('blog_prefix');\n\n        return is_null($val) ? self::ROUTE_DEFAULT_BLOG_PREFIX : $val;\n    }", "code_tokens": ["public", "static", "function", "getBlogPrefix", "(", ")", "{", "$", "config", "=", "ConfigHelper", "::", "getWriter", "(", ")", ";", "$", "val", "=", "$", "config", "->", "get", "(", "'blog_prefix'", ")", ";", "return", "is_null", "(", "$", "val", ")", "?", "self", "::", "ROUTE_DEFAULT_BLOG_PREFIX", ":", "$", "val", ";", "}"], "docstring": "Get blog prefix.", "docstring_tokens": ["Get", "blog", "prefix", "."], "sha": "bb2b564432155467944b4a2e719e474fd564b711", "url": "https://github.com/cnvs/easel/blob/bb2b564432155467944b4a2e719e474fd564b711/src/Helpers/RouteHelper.php#L65-L71", "partition": "test"}
{"repo": "marcelog/Ding", "path": "src/mg/Ding/Container/Impl/ContainerImpl.php", "func_name": "ContainerImpl.getBeanDefinition", "original_string": "public function getBeanDefinition($name)\n    {\n        if (isset($this->_beanAliases[$name])) {\n            $name = $this->_beanAliases[$name];\n        }\n        if (isset($this->_beanDefs[$name])) {\n            return $this->_beanDefs[$name];\n        }\n        $beanDefinition = null;\n        if ($this->_beanDefCache !== null) {\n            $beanDefinition = $this->_beanDefCache->fetch($name, $result);\n        }\n        if ($beanDefinition) {\n            $this->_beanDefs[$name] = $beanDefinition;\n            return $beanDefinition;\n        }\n        foreach ($this->_beanDefinitionProviders as $provider) {\n            $beanDefinition = $provider->getBeanDefinition($name);\n            if ($beanDefinition) {\n                $beanDefinition->setClass($this->_searchAndReplaceProperties(\n                    $beanDefinition->getClass()\n                ));\n                break;\n            }\n        }\n        if (!$beanDefinition) {\n            throw new BeanFactoryException('Unknown bean: ' . $name);\n        }\n        $beanDefinition = $this->_lifecycleManager->afterDefinition($beanDefinition);\n        $this->_beanDefs[$name] = $beanDefinition;\n        $this->_beanDefCache->store($name, $beanDefinition);\n        foreach ($beanDefinition->getAliases() as $alias) {\n            $this->_beanAliases[$alias] = $name;\n        }\n        return $beanDefinition;\n    }", "language": "php", "code": "public function getBeanDefinition($name)\n    {\n        if (isset($this->_beanAliases[$name])) {\n            $name = $this->_beanAliases[$name];\n        }\n        if (isset($this->_beanDefs[$name])) {\n            return $this->_beanDefs[$name];\n        }\n        $beanDefinition = null;\n        if ($this->_beanDefCache !== null) {\n            $beanDefinition = $this->_beanDefCache->fetch($name, $result);\n        }\n        if ($beanDefinition) {\n            $this->_beanDefs[$name] = $beanDefinition;\n            return $beanDefinition;\n        }\n        foreach ($this->_beanDefinitionProviders as $provider) {\n            $beanDefinition = $provider->getBeanDefinition($name);\n            if ($beanDefinition) {\n                $beanDefinition->setClass($this->_searchAndReplaceProperties(\n                    $beanDefinition->getClass()\n                ));\n                break;\n            }\n        }\n        if (!$beanDefinition) {\n            throw new BeanFactoryException('Unknown bean: ' . $name);\n        }\n        $beanDefinition = $this->_lifecycleManager->afterDefinition($beanDefinition);\n        $this->_beanDefs[$name] = $beanDefinition;\n        $this->_beanDefCache->store($name, $beanDefinition);\n        foreach ($beanDefinition->getAliases() as $alias) {\n            $this->_beanAliases[$alias] = $name;\n        }\n        return $beanDefinition;\n    }", "code_tokens": ["public", "function", "getBeanDefinition", "(", "$", "name", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "_beanAliases", "[", "$", "name", "]", ")", ")", "{", "$", "name", "=", "$", "this", "->", "_beanAliases", "[", "$", "name", "]", ";", "}", "if", "(", "isset", "(", "$", "this", "->", "_beanDefs", "[", "$", "name", "]", ")", ")", "{", "return", "$", "this", "->", "_beanDefs", "[", "$", "name", "]", ";", "}", "$", "beanDefinition", "=", "null", ";", "if", "(", "$", "this", "->", "_beanDefCache", "!==", "null", ")", "{", "$", "beanDefinition", "=", "$", "this", "->", "_beanDefCache", "->", "fetch", "(", "$", "name", ",", "$", "result", ")", ";", "}", "if", "(", "$", "beanDefinition", ")", "{", "$", "this", "->", "_beanDefs", "[", "$", "name", "]", "=", "$", "beanDefinition", ";", "return", "$", "beanDefinition", ";", "}", "foreach", "(", "$", "this", "->", "_beanDefinitionProviders", "as", "$", "provider", ")", "{", "$", "beanDefinition", "=", "$", "provider", "->", "getBeanDefinition", "(", "$", "name", ")", ";", "if", "(", "$", "beanDefinition", ")", "{", "$", "beanDefinition", "->", "setClass", "(", "$", "this", "->", "_searchAndReplaceProperties", "(", "$", "beanDefinition", "->", "getClass", "(", ")", ")", ")", ";", "break", ";", "}", "}", "if", "(", "!", "$", "beanDefinition", ")", "{", "throw", "new", "BeanFactoryException", "(", "'Unknown bean: '", ".", "$", "name", ")", ";", "}", "$", "beanDefinition", "=", "$", "this", "->", "_lifecycleManager", "->", "afterDefinition", "(", "$", "beanDefinition", ")", ";", "$", "this", "->", "_beanDefs", "[", "$", "name", "]", "=", "$", "beanDefinition", ";", "$", "this", "->", "_beanDefCache", "->", "store", "(", "$", "name", ",", "$", "beanDefinition", ")", ";", "foreach", "(", "$", "beanDefinition", "->", "getAliases", "(", ")", "as", "$", "alias", ")", "{", "$", "this", "->", "_beanAliases", "[", "$", "alias", "]", "=", "$", "name", ";", "}", "return", "$", "beanDefinition", ";", "}"], "docstring": "Returns a bean definition.\n\n@param string $name Bean name.\n\n@return BeanDefinition\n@throws BeanFactoryException", "docstring_tokens": ["Returns", "a", "bean", "definition", "."], "sha": "aad50c28e99509f22c9cb1ba54acbeced3b30c50", "url": "https://github.com/marcelog/Ding/blob/aad50c28e99509f22c9cb1ba54acbeced3b30c50/src/mg/Ding/Container/Impl/ContainerImpl.php#L243-L278", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/Parser/EventManagerGroups.php", "func_name": "EventManagerGroups.activateNewGroup", "original_string": "public function activateNewGroup($termId, $parentId)\n    {\n        $selectedGroups = get_option('options_event_filter_group', false);\n        if (is_array($selectedGroups) && !empty($selectedGroups)) {\n            if (in_array($parentId, $selectedGroups)) {\n                // Add children to option array\n                $selectedGroups[] = (int) $termId;\n                update_field('event_filter_group', $selectedGroups, 'option');\n            }\n        }\n    }", "language": "php", "code": "public function activateNewGroup($termId, $parentId)\n    {\n        $selectedGroups = get_option('options_event_filter_group', false);\n        if (is_array($selectedGroups) && !empty($selectedGroups)) {\n            if (in_array($parentId, $selectedGroups)) {\n                // Add children to option array\n                $selectedGroups[] = (int) $termId;\n                update_field('event_filter_group', $selectedGroups, 'option');\n            }\n        }\n    }", "code_tokens": ["public", "function", "activateNewGroup", "(", "$", "termId", ",", "$", "parentId", ")", "{", "$", "selectedGroups", "=", "get_option", "(", "'options_event_filter_group'", ",", "false", ")", ";", "if", "(", "is_array", "(", "$", "selectedGroups", ")", "&&", "!", "empty", "(", "$", "selectedGroups", ")", ")", "{", "if", "(", "in_array", "(", "$", "parentId", ",", "$", "selectedGroups", ")", ")", "{", "// Add children to option array", "$", "selectedGroups", "[", "]", "=", "(", "int", ")", "$", "termId", ";", "update_field", "(", "'event_filter_group'", ",", "$", "selectedGroups", ",", "'option'", ")", ";", "}", "}", "}"], "docstring": "Automatically add new terms to Group filter option if the parent is selected\n@param  int $termId Term ID\n@param  int $parentId Terms parent ID\n@return void", "docstring_tokens": ["Automatically", "add", "new", "terms", "to", "Group", "filter", "option", "if", "the", "parent", "is", "selected"], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/Parser/EventManagerGroups.php#L99-L109", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Mail/Mailer.php", "func_name": "Mailer.createView", "original_string": "protected function createView(string $view, array $data): string\n    {\n        if ($this->viewFactory !== null) {\n            return $this->viewFactory->create($view, $data)->render();\n        }\n\n        return \\vsprintf($view, $data);\n    }", "language": "php", "code": "protected function createView(string $view, array $data): string\n    {\n        if ($this->viewFactory !== null) {\n            return $this->viewFactory->create($view, $data)->render();\n        }\n\n        return \\vsprintf($view, $data);\n    }", "code_tokens": ["protected", "function", "createView", "(", "string", "$", "view", ",", "array", "$", "data", ")", ":", "string", "{", "if", "(", "$", "this", "->", "viewFactory", "!==", "null", ")", "{", "return", "$", "this", "->", "viewFactory", "->", "create", "(", "$", "view", ",", "$", "data", ")", "->", "render", "(", ")", ";", "}", "return", "\\", "vsprintf", "(", "$", "view", ",", "$", "data", ")", ";", "}"], "docstring": "Creates a view string for the email body.\n\n@param string $view\n@param array  $data\n\n@return string", "docstring_tokens": ["Creates", "a", "view", "string", "for", "the", "email", "body", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Mail/Mailer.php#L373-L380", "partition": "test"}
{"repo": "contao-bootstrap/grid-editor", "path": "src/Builder/Column.php", "func_name": "Column.build", "original_string": "public function build()\n    {\n        $classes = array();\n\n        foreach ($this->sizes as $device => $size) {\n            if ($size['width']) {\n                $classes[] = sprintf('col-%s-%s', $device, $size['width']);\n            } else {\n                $classes[] = 'hidden-' . $device;\n            }\n\n            if ($size['offset'] !== null) {\n                $classes[] = sprintf('col-%s-offset-%s', $device, $size['offset']);\n            }\n\n            if ($size['push'] !== null) {\n                if (is_numeric($size['push'])) {\n                    $push      = ($size['push'] < 0) ? 'pull' : 'push';\n                    $classes[] = sprintf('col-%s-%s-%s', $device, $push, $size['push']);\n                } else {\n                    $classes[] = sprintf('col-%s-%s', $device, $size['push']);\n                }\n            }\n        }\n\n        if ($this->class) {\n            $classes[] = $this->class;\n        }\n\n        return $classes;\n    }", "language": "php", "code": "public function build()\n    {\n        $classes = array();\n\n        foreach ($this->sizes as $device => $size) {\n            if ($size['width']) {\n                $classes[] = sprintf('col-%s-%s', $device, $size['width']);\n            } else {\n                $classes[] = 'hidden-' . $device;\n            }\n\n            if ($size['offset'] !== null) {\n                $classes[] = sprintf('col-%s-offset-%s', $device, $size['offset']);\n            }\n\n            if ($size['push'] !== null) {\n                if (is_numeric($size['push'])) {\n                    $push      = ($size['push'] < 0) ? 'pull' : 'push';\n                    $classes[] = sprintf('col-%s-%s-%s', $device, $push, $size['push']);\n                } else {\n                    $classes[] = sprintf('col-%s-%s', $device, $size['push']);\n                }\n            }\n        }\n\n        if ($this->class) {\n            $classes[] = $this->class;\n        }\n\n        return $classes;\n    }", "code_tokens": ["public", "function", "build", "(", ")", "{", "$", "classes", "=", "array", "(", ")", ";", "foreach", "(", "$", "this", "->", "sizes", "as", "$", "device", "=>", "$", "size", ")", "{", "if", "(", "$", "size", "[", "'width'", "]", ")", "{", "$", "classes", "[", "]", "=", "sprintf", "(", "'col-%s-%s'", ",", "$", "device", ",", "$", "size", "[", "'width'", "]", ")", ";", "}", "else", "{", "$", "classes", "[", "]", "=", "'hidden-'", ".", "$", "device", ";", "}", "if", "(", "$", "size", "[", "'offset'", "]", "!==", "null", ")", "{", "$", "classes", "[", "]", "=", "sprintf", "(", "'col-%s-offset-%s'", ",", "$", "device", ",", "$", "size", "[", "'offset'", "]", ")", ";", "}", "if", "(", "$", "size", "[", "'push'", "]", "!==", "null", ")", "{", "if", "(", "is_numeric", "(", "$", "size", "[", "'push'", "]", ")", ")", "{", "$", "push", "=", "(", "$", "size", "[", "'push'", "]", "<", "0", ")", "?", "'pull'", ":", "'push'", ";", "$", "classes", "[", "]", "=", "sprintf", "(", "'col-%s-%s-%s'", ",", "$", "device", ",", "$", "push", ",", "$", "size", "[", "'push'", "]", ")", ";", "}", "else", "{", "$", "classes", "[", "]", "=", "sprintf", "(", "'col-%s-%s'", ",", "$", "device", ",", "$", "size", "[", "'push'", "]", ")", ";", "}", "}", "}", "if", "(", "$", "this", "->", "class", ")", "{", "$", "classes", "[", "]", "=", "$", "this", "->", "class", ";", "}", "return", "$", "classes", ";", "}"], "docstring": "Build css classes.\n\n@return array classes", "docstring_tokens": ["Build", "css", "classes", "."], "sha": "e017332aeec861b64b5dc963156533af4a21dc71", "url": "https://github.com/contao-bootstrap/grid-editor/blob/e017332aeec861b64b5dc963156533af4a21dc71/src/Builder/Column.php#L188-L218", "partition": "test"}
{"repo": "txthinking/Mailer", "path": "src/Mailer/SMTP.php", "func_name": "SMTP.rcptTo", "original_string": "protected function rcptTo()\n    {\n        $to = array_merge(\n            $this->message->getTo(),\n            $this->message->getCc(),\n            $this->message->getBcc()\n        );\n        foreach ($to as $toEmail=>$_) {\n            $in = \"RCPT TO:<\" . $toEmail . \">\" . $this->CRLF;\n            $code = $this->pushStack($in);\n            if ($code !== '250') {\n                throw new CodeException('250', $code, array_pop($this->resultStack));\n            }\n        }\n        return $this;\n    }", "language": "php", "code": "protected function rcptTo()\n    {\n        $to = array_merge(\n            $this->message->getTo(),\n            $this->message->getCc(),\n            $this->message->getBcc()\n        );\n        foreach ($to as $toEmail=>$_) {\n            $in = \"RCPT TO:<\" . $toEmail . \">\" . $this->CRLF;\n            $code = $this->pushStack($in);\n            if ($code !== '250') {\n                throw new CodeException('250', $code, array_pop($this->resultStack));\n            }\n        }\n        return $this;\n    }", "code_tokens": ["protected", "function", "rcptTo", "(", ")", "{", "$", "to", "=", "array_merge", "(", "$", "this", "->", "message", "->", "getTo", "(", ")", ",", "$", "this", "->", "message", "->", "getCc", "(", ")", ",", "$", "this", "->", "message", "->", "getBcc", "(", ")", ")", ";", "foreach", "(", "$", "to", "as", "$", "toEmail", "=>", "$", "_", ")", "{", "$", "in", "=", "\"RCPT TO:<\"", ".", "$", "toEmail", ".", "\">\"", ".", "$", "this", "->", "CRLF", ";", "$", "code", "=", "$", "this", "->", "pushStack", "(", "$", "in", ")", ";", "if", "(", "$", "code", "!==", "'250'", ")", "{", "throw", "new", "CodeException", "(", "'250'", ",", "$", "code", ",", "array_pop", "(", "$", "this", "->", "resultStack", ")", ")", ";", "}", "}", "return", "$", "this", ";", "}"], "docstring": "SMTP RCPT TO\nSUCCESS 250\n@return $this\n@throws CodeException\n@throws SMTPException", "docstring_tokens": ["SMTP", "RCPT", "TO", "SUCCESS", "250"], "sha": "49cd4e555a926bb4668c946c92691b88e0870b51", "url": "https://github.com/txthinking/Mailer/blob/49cd4e555a926bb4668c946c92691b88e0870b51/src/Mailer/SMTP.php#L378-L393", "partition": "test"}
{"repo": "imkrimerman/primitive", "path": "src/Primitive/Support/Traits/RetrievableTrait.php", "func_name": "RetrievableTrait.getNumberable", "original_string": "public function getNumberable($value, $default = null)\n    {\n        switch(true)\n        {\n            case is_int($value):\n            case is_float($value):\n                return $value;\n            case is_numeric($value) && strpos($value, '.'):\n                return (float) $value;\n            case is_numeric($value):\n            case is_bool($value):\n                return (int) $value;\n            case $value instanceof IntegerContract:\n            case $value instanceof FloatContract:\n                return $value->value();\n            case $value instanceof BooleanContract:\n                return $value->toInt()->value();\n            case $value instanceof StringContract:\n                return (int) $value->value();\n            default:\n                return value($default);\n        }\n    }", "language": "php", "code": "public function getNumberable($value, $default = null)\n    {\n        switch(true)\n        {\n            case is_int($value):\n            case is_float($value):\n                return $value;\n            case is_numeric($value) && strpos($value, '.'):\n                return (float) $value;\n            case is_numeric($value):\n            case is_bool($value):\n                return (int) $value;\n            case $value instanceof IntegerContract:\n            case $value instanceof FloatContract:\n                return $value->value();\n            case $value instanceof BooleanContract:\n                return $value->toInt()->value();\n            case $value instanceof StringContract:\n                return (int) $value->value();\n            default:\n                return value($default);\n        }\n    }", "code_tokens": ["public", "function", "getNumberable", "(", "$", "value", ",", "$", "default", "=", "null", ")", "{", "switch", "(", "true", ")", "{", "case", "is_int", "(", "$", "value", ")", ":", "case", "is_float", "(", "$", "value", ")", ":", "return", "$", "value", ";", "case", "is_numeric", "(", "$", "value", ")", "&&", "strpos", "(", "$", "value", ",", "'.'", ")", ":", "return", "(", "float", ")", "$", "value", ";", "case", "is_numeric", "(", "$", "value", ")", ":", "case", "is_bool", "(", "$", "value", ")", ":", "return", "(", "int", ")", "$", "value", ";", "case", "$", "value", "instanceof", "IntegerContract", ":", "case", "$", "value", "instanceof", "FloatContract", ":", "return", "$", "value", "->", "value", "(", ")", ";", "case", "$", "value", "instanceof", "BooleanContract", ":", "return", "$", "value", "->", "toInt", "(", ")", "->", "value", "(", ")", ";", "case", "$", "value", "instanceof", "StringContract", ":", "return", "(", "int", ")", "$", "value", "->", "value", "(", ")", ";", "default", ":", "return", "value", "(", "$", "default", ")", ";", "}", "}"], "docstring": "Retrieve number from any type or return default.\n\n@param $value\n@param null|mixed $default\n@return float|int|mixed", "docstring_tokens": ["Retrieve", "number", "from", "any", "type", "or", "return", "default", "."], "sha": "bdb45bb5109ca07f116cce571b76804e47ac5d56", "url": "https://github.com/imkrimerman/primitive/blob/bdb45bb5109ca07f116cce571b76804e47ac5d56/src/Primitive/Support/Traits/RetrievableTrait.php#L188-L210", "partition": "test"}
{"repo": "Wedeto/Resolve", "path": "src/Resolver.php", "func_name": "Resolver.registerModule", "original_string": "public function registerModule(string $module, string $path, int $precedence)\n    {\n        // Normalize the module name: lowercased, with dots\n        $module = strtolower(preg_replace('/([\\.\\\\/\\\\\\\\])/', '.', $module));\n\n        $found_elements = array();\n        foreach ($this->resolvers as $type => $resolver)\n        {\n            $type_path = $path . DIRECTORY_SEPARATOR . $resolver['path'];\n            if (is_dir($type_path))\n            {\n                $resolver['resolver']->addToSearchPath($module, $type_path, $precedence);\n                $found_elements[] = $type;\n            }\n        }\n\n        if (!empty($found_elements))\n            $this->modules[$module] = ['path' => $path, 'precedence' => $precedence];\n        else\n            self::getLogger()->debug(\"No resolvable items found in module: \" . $module);\n\n        // No longer sorted, probably\n        $this->sorted = false;\n\n        return $this;\n    }", "language": "php", "code": "public function registerModule(string $module, string $path, int $precedence)\n    {\n        // Normalize the module name: lowercased, with dots\n        $module = strtolower(preg_replace('/([\\.\\\\/\\\\\\\\])/', '.', $module));\n\n        $found_elements = array();\n        foreach ($this->resolvers as $type => $resolver)\n        {\n            $type_path = $path . DIRECTORY_SEPARATOR . $resolver['path'];\n            if (is_dir($type_path))\n            {\n                $resolver['resolver']->addToSearchPath($module, $type_path, $precedence);\n                $found_elements[] = $type;\n            }\n        }\n\n        if (!empty($found_elements))\n            $this->modules[$module] = ['path' => $path, 'precedence' => $precedence];\n        else\n            self::getLogger()->debug(\"No resolvable items found in module: \" . $module);\n\n        // No longer sorted, probably\n        $this->sorted = false;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "registerModule", "(", "string", "$", "module", ",", "string", "$", "path", ",", "int", "$", "precedence", ")", "{", "// Normalize the module name: lowercased, with dots", "$", "module", "=", "strtolower", "(", "preg_replace", "(", "'/([\\.\\\\/\\\\\\\\])/'", ",", "'.'", ",", "$", "module", ")", ")", ";", "$", "found_elements", "=", "array", "(", ")", ";", "foreach", "(", "$", "this", "->", "resolvers", "as", "$", "type", "=>", "$", "resolver", ")", "{", "$", "type_path", "=", "$", "path", ".", "DIRECTORY_SEPARATOR", ".", "$", "resolver", "[", "'path'", "]", ";", "if", "(", "is_dir", "(", "$", "type_path", ")", ")", "{", "$", "resolver", "[", "'resolver'", "]", "->", "addToSearchPath", "(", "$", "module", ",", "$", "type_path", ",", "$", "precedence", ")", ";", "$", "found_elements", "[", "]", "=", "$", "type", ";", "}", "}", "if", "(", "!", "empty", "(", "$", "found_elements", ")", ")", "$", "this", "->", "modules", "[", "$", "module", "]", "=", "[", "'path'", "=>", "$", "path", ",", "'precedence'", "=>", "$", "precedence", "]", ";", "else", "self", "::", "getLogger", "(", ")", "->", "debug", "(", "\"No resolvable items found in module: \"", ".", "$", "module", ")", ";", "// No longer sorted, probably", "$", "this", "->", "sorted", "=", "false", ";", "return", "$", "this", ";", "}"], "docstring": "Register a module\n\n@param string $module The name of the module\n@param string $path The path where the module stores its data\n@param int $precedence Determines the order in which the paths are\nsearched. Used for templates and assets, to\nmake it possible to reliably override others.\n@return Resolver Provides fluent interface", "docstring_tokens": ["Register", "a", "module"], "sha": "328a27fa13df1a71f4eb46f16fa179b6283f7f03", "url": "https://github.com/Wedeto/Resolve/blob/328a27fa13df1a71f4eb46f16fa179b6283f7f03/src/Resolver.php#L191-L216", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/traits/CacheMembers.php", "func_name": "CacheMembers.&", "original_string": "protected function &cacheSet(string $primary_key, $sub_key, $value)\n    {\n        if ($primary_key === 'x___keys' || $primary_key === 'x___refs') {\n            throw $this->c::issue('Attempting to set a reserved primary key.');\n        }\n        $sub_key                                 = (string) $sub_key;\n        $this->x___cache[$primary_key][$sub_key] = $value;\n        return $this->x___cache[$primary_key][$sub_key];\n    }", "language": "php", "code": "protected function &cacheSet(string $primary_key, $sub_key, $value)\n    {\n        if ($primary_key === 'x___keys' || $primary_key === 'x___refs') {\n            throw $this->c::issue('Attempting to set a reserved primary key.');\n        }\n        $sub_key                                 = (string) $sub_key;\n        $this->x___cache[$primary_key][$sub_key] = $value;\n        return $this->x___cache[$primary_key][$sub_key];\n    }", "code_tokens": ["protected", "function", "&", "cacheSet", "(", "string", "$", "primary_key", ",", "$", "sub_key", ",", "$", "value", ")", "{", "if", "(", "$", "primary_key", "===", "'x___keys'", "||", "$", "primary_key", "===", "'x___refs'", ")", "{", "throw", "$", "this", "->", "c", "::", "issue", "(", "'Attempting to set a reserved primary key.'", ")", ";", "}", "$", "sub_key", "=", "(", "string", ")", "$", "sub_key", ";", "$", "this", "->", "x___cache", "[", "$", "primary_key", "]", "[", "$", "sub_key", "]", "=", "$", "value", ";", "return", "$", "this", "->", "x___cache", "[", "$", "primary_key", "]", "[", "$", "sub_key", "]", ";", "}"], "docstring": "Set a cache sub-key.\n\n@since 150424 Initial release.\n\n@param string     $primary_key Primary key.\n@param string|int $sub_key     Sub-key to set.\n@param mixed      $value       New cache key value.\n\n@return mixed|null Value (by reference) for the cache sub-key.\n\n@internal Returns by reference. The use of `&` is highly recommended when calling this utility.\nSee also: <http://php.net/manual/en/language.references.return.php>", "docstring_tokens": ["Set", "a", "cache", "sub", "-", "key", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/traits/CacheMembers.php#L51-L59", "partition": "test"}
{"repo": "APY/APYDataGridBundle", "path": "Grid/Grid.php", "func_name": "Grid.getTweak", "original_string": "public function getTweak($id)\n    {\n        $tweaks = $this->getTweaks();\n        if (isset($tweaks[$id])) {\n            return $tweaks[$id];\n        }\n\n        throw new \\InvalidArgumentException(sprintf(self::NOT_VALID_TWEAK_ID_EX_MSG, $id));\n    }", "language": "php", "code": "public function getTweak($id)\n    {\n        $tweaks = $this->getTweaks();\n        if (isset($tweaks[$id])) {\n            return $tweaks[$id];\n        }\n\n        throw new \\InvalidArgumentException(sprintf(self::NOT_VALID_TWEAK_ID_EX_MSG, $id));\n    }", "code_tokens": ["public", "function", "getTweak", "(", "$", "id", ")", "{", "$", "tweaks", "=", "$", "this", "->", "getTweaks", "(", ")", ";", "if", "(", "isset", "(", "$", "tweaks", "[", "$", "id", "]", ")", ")", "{", "return", "$", "tweaks", "[", "$", "id", "]", ";", "}", "throw", "new", "\\", "InvalidArgumentException", "(", "sprintf", "(", "self", "::", "NOT_VALID_TWEAK_ID_EX_MSG", ",", "$", "id", ")", ")", ";", "}"], "docstring": "Returns a tweak.\n\n@return array", "docstring_tokens": ["Returns", "a", "tweak", "."], "sha": "03050b366a79553b014aa4297d31b585a84622a3", "url": "https://github.com/APY/APYDataGridBundle/blob/03050b366a79553b014aa4297d31b585a84622a3/Grid/Grid.php#L1325-L1333", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Data/BizDataSql.php", "func_name": "BizDataSql.addOrderBy", "original_string": "public function addOrderBy($orderBy)\n    {\n        if ($orderBy == null)\n            return;\n        if ($this->_orderBy == null)\n        {\n            $this->_orderBy = $orderBy;\n        }\n        elseif (strpos($this->_orderBy, $orderBy) === false)\n        {\n            $this->_orderBy .= \" AND \" . $orderBy;\n        }\n    }", "language": "php", "code": "public function addOrderBy($orderBy)\n    {\n        if ($orderBy == null)\n            return;\n        if ($this->_orderBy == null)\n        {\n            $this->_orderBy = $orderBy;\n        }\n        elseif (strpos($this->_orderBy, $orderBy) === false)\n        {\n            $this->_orderBy .= \" AND \" . $orderBy;\n        }\n    }", "code_tokens": ["public", "function", "addOrderBy", "(", "$", "orderBy", ")", "{", "if", "(", "$", "orderBy", "==", "null", ")", "return", ";", "if", "(", "$", "this", "->", "_orderBy", "==", "null", ")", "{", "$", "this", "->", "_orderBy", "=", "$", "orderBy", ";", "}", "elseif", "(", "strpos", "(", "$", "this", "->", "_orderBy", ",", "$", "orderBy", ")", "===", "false", ")", "{", "$", "this", "->", "_orderBy", ".=", "\" AND \"", ".", "$", "orderBy", ";", "}", "}"], "docstring": "Add order by clause\n\n@param string $orderBy SQL ORDER BY clause\n@return void", "docstring_tokens": ["Add", "order", "by", "clause"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Data/BizDataSql.php#L198-L210", "partition": "test"}
{"repo": "vaccuum/dispatcher", "path": "source/Traits/TMethodInvocation.php", "func_name": "TMethodInvocation.invokeMethod", "original_string": "protected function invokeMethod(array $arguments, $action, $object)\n    {\n        if (!method_exists($object, $action))\n        {\n            $message = get_class($object) . \" object has no {$action} method.\";\n            throw new DispatcherException($message);\n        }\n\n        $reflection = new ReflectionMethod($object, $action);\n        $parameters = [];\n\n        foreach ($reflection->getParameters() as $parameter)\n        {\n            if (isset($arguments[$parameter->name]))\n            {\n                $parameters[] = $arguments[$parameter->name];\n            }\n            elseif ($parameter->isDefaultValueAvailable())\n            {\n                $parameters[] = $parameter->getDefaultValue();\n            }\n            else\n            {\n                $message = \"{$parameter->name} argument cannot be resolved.\";\n                throw new DispatcherException($message, $arguments, $action, $object);\n            }\n        }\n\n        return $reflection->invokeArgs($object, $parameters);\n    }", "language": "php", "code": "protected function invokeMethod(array $arguments, $action, $object)\n    {\n        if (!method_exists($object, $action))\n        {\n            $message = get_class($object) . \" object has no {$action} method.\";\n            throw new DispatcherException($message);\n        }\n\n        $reflection = new ReflectionMethod($object, $action);\n        $parameters = [];\n\n        foreach ($reflection->getParameters() as $parameter)\n        {\n            if (isset($arguments[$parameter->name]))\n            {\n                $parameters[] = $arguments[$parameter->name];\n            }\n            elseif ($parameter->isDefaultValueAvailable())\n            {\n                $parameters[] = $parameter->getDefaultValue();\n            }\n            else\n            {\n                $message = \"{$parameter->name} argument cannot be resolved.\";\n                throw new DispatcherException($message, $arguments, $action, $object);\n            }\n        }\n\n        return $reflection->invokeArgs($object, $parameters);\n    }", "code_tokens": ["protected", "function", "invokeMethod", "(", "array", "$", "arguments", ",", "$", "action", ",", "$", "object", ")", "{", "if", "(", "!", "method_exists", "(", "$", "object", ",", "$", "action", ")", ")", "{", "$", "message", "=", "get_class", "(", "$", "object", ")", ".", "\" object has no {$action} method.\"", ";", "throw", "new", "DispatcherException", "(", "$", "message", ")", ";", "}", "$", "reflection", "=", "new", "ReflectionMethod", "(", "$", "object", ",", "$", "action", ")", ";", "$", "parameters", "=", "[", "]", ";", "foreach", "(", "$", "reflection", "->", "getParameters", "(", ")", "as", "$", "parameter", ")", "{", "if", "(", "isset", "(", "$", "arguments", "[", "$", "parameter", "->", "name", "]", ")", ")", "{", "$", "parameters", "[", "]", "=", "$", "arguments", "[", "$", "parameter", "->", "name", "]", ";", "}", "elseif", "(", "$", "parameter", "->", "isDefaultValueAvailable", "(", ")", ")", "{", "$", "parameters", "[", "]", "=", "$", "parameter", "->", "getDefaultValue", "(", ")", ";", "}", "else", "{", "$", "message", "=", "\"{$parameter->name} argument cannot be resolved.\"", ";", "throw", "new", "DispatcherException", "(", "$", "message", ",", "$", "arguments", ",", "$", "action", ",", "$", "object", ")", ";", "}", "}", "return", "$", "reflection", "->", "invokeArgs", "(", "$", "object", ",", "$", "parameters", ")", ";", "}"], "docstring": "Invoke object method using arguments.\n\n@param array  $arguments\n@param string $action\n@param object $object\n\n@throws DispatcherException\n@return mixed", "docstring_tokens": ["Invoke", "object", "method", "using", "arguments", "."], "sha": "21465a880fbef2f6c40e9668e16f235c9afc3faa", "url": "https://github.com/vaccuum/dispatcher/blob/21465a880fbef2f6c40e9668e16f235c9afc3faa/source/Traits/TMethodInvocation.php#L18-L47", "partition": "test"}
{"repo": "wp-cli/package-command", "path": "src/Package_Command.php", "func_name": "Package_Command.get_package_by_shortened_identifier", "original_string": "private function get_package_by_shortened_identifier( $package_name ) {\n\t\t// Check the package index first, so we don't break existing behavior.\n\t\t$lc_package_name = strtolower( $package_name ); // For BC check.\n\t\tforeach ( $this->get_community_packages() as $package ) {\n\t\t\tif ( $package_name === $package->getPrettyName() ) {\n\t\t\t\treturn $package;\n\t\t\t}\n\t\t\t// For BC allow getting by lowercase name.\n\t\t\tif ( $lc_package_name === $package->getName() ) {\n\t\t\t\treturn $package;\n\t\t\t}\n\t\t}\n\n\t\t// Check if the package exists on Packagist.\n\t\t$url      = \"https://repo.packagist.org/p/{$package_name}.json\";\n\t\t$response = Utils\\http_request( 'GET', $url );\n\t\tif ( 20 === (int) substr( $response->status_code, 0, 2 ) ) {\n\t\t\treturn $package_name;\n\t\t}\n\n\t\t// Fall back to GitHub URL if we had no match yet.\n\t\t$url          = \"https://github.com/{$package_name}.git\";\n\t\t$github_token = getenv( 'GITHUB_TOKEN' ); // Use GITHUB_TOKEN if available to avoid authorization failures or rate-limiting.\n\t\t$headers      = $github_token ? [ 'Authorization' => 'token ' . $github_token ] : [];\n\t\t$response     = Utils\\http_request( 'GET', $url, null /*data*/, $headers );\n\t\tif ( 20 === (int) substr( $response->status_code, 0, 2 ) ) {\n\t\t\treturn $url;\n\t\t}\n\n\t\treturn false;\n\t}", "language": "php", "code": "private function get_package_by_shortened_identifier( $package_name ) {\n\t\t// Check the package index first, so we don't break existing behavior.\n\t\t$lc_package_name = strtolower( $package_name ); // For BC check.\n\t\tforeach ( $this->get_community_packages() as $package ) {\n\t\t\tif ( $package_name === $package->getPrettyName() ) {\n\t\t\t\treturn $package;\n\t\t\t}\n\t\t\t// For BC allow getting by lowercase name.\n\t\t\tif ( $lc_package_name === $package->getName() ) {\n\t\t\t\treturn $package;\n\t\t\t}\n\t\t}\n\n\t\t// Check if the package exists on Packagist.\n\t\t$url      = \"https://repo.packagist.org/p/{$package_name}.json\";\n\t\t$response = Utils\\http_request( 'GET', $url );\n\t\tif ( 20 === (int) substr( $response->status_code, 0, 2 ) ) {\n\t\t\treturn $package_name;\n\t\t}\n\n\t\t// Fall back to GitHub URL if we had no match yet.\n\t\t$url          = \"https://github.com/{$package_name}.git\";\n\t\t$github_token = getenv( 'GITHUB_TOKEN' ); // Use GITHUB_TOKEN if available to avoid authorization failures or rate-limiting.\n\t\t$headers      = $github_token ? [ 'Authorization' => 'token ' . $github_token ] : [];\n\t\t$response     = Utils\\http_request( 'GET', $url, null /*data*/, $headers );\n\t\tif ( 20 === (int) substr( $response->status_code, 0, 2 ) ) {\n\t\t\treturn $url;\n\t\t}\n\n\t\treturn false;\n\t}", "code_tokens": ["private", "function", "get_package_by_shortened_identifier", "(", "$", "package_name", ")", "{", "// Check the package index first, so we don't break existing behavior.", "$", "lc_package_name", "=", "strtolower", "(", "$", "package_name", ")", ";", "// For BC check.", "foreach", "(", "$", "this", "->", "get_community_packages", "(", ")", "as", "$", "package", ")", "{", "if", "(", "$", "package_name", "===", "$", "package", "->", "getPrettyName", "(", ")", ")", "{", "return", "$", "package", ";", "}", "// For BC allow getting by lowercase name.", "if", "(", "$", "lc_package_name", "===", "$", "package", "->", "getName", "(", ")", ")", "{", "return", "$", "package", ";", "}", "}", "// Check if the package exists on Packagist.", "$", "url", "=", "\"https://repo.packagist.org/p/{$package_name}.json\"", ";", "$", "response", "=", "Utils", "\\", "http_request", "(", "'GET'", ",", "$", "url", ")", ";", "if", "(", "20", "===", "(", "int", ")", "substr", "(", "$", "response", "->", "status_code", ",", "0", ",", "2", ")", ")", "{", "return", "$", "package_name", ";", "}", "// Fall back to GitHub URL if we had no match yet.", "$", "url", "=", "\"https://github.com/{$package_name}.git\"", ";", "$", "github_token", "=", "getenv", "(", "'GITHUB_TOKEN'", ")", ";", "// Use GITHUB_TOKEN if available to avoid authorization failures or rate-limiting.", "$", "headers", "=", "$", "github_token", "?", "[", "'Authorization'", "=>", "'token '", ".", "$", "github_token", "]", ":", "[", "]", ";", "$", "response", "=", "Utils", "\\", "http_request", "(", "'GET'", ",", "$", "url", ",", "null", "/*data*/", ",", "$", "headers", ")", ";", "if", "(", "20", "===", "(", "int", ")", "substr", "(", "$", "response", "->", "status_code", ",", "0", ",", "2", ")", ")", "{", "return", "$", "url", ";", "}", "return", "false", ";", "}"], "docstring": "Gets a package by its shortened identifier.\n\nA shortened identifier has the form `<vendor>/<package>`.\n\nThis method first checks the deprecated package index, for BC reasons,\nand then falls back to the corresponding GitHub URL.", "docstring_tokens": ["Gets", "a", "package", "by", "its", "shortened", "identifier", "."], "sha": "52fea16f3cec0577b9c417a19ebc0f328c38d853", "url": "https://github.com/wp-cli/package-command/blob/52fea16f3cec0577b9c417a19ebc0f328c38d853/src/Package_Command.php#L773-L803", "partition": "test"}
{"repo": "TYPO3-Console/TYPO3-Console", "path": "Classes/Console/Command/ConfigurationCommandController.php", "func_name": "ConfigurationCommandController.showCommand", "original_string": "public function showCommand($path)\n    {\n        $hasActive = $this->configurationService->hasActive($path);\n        $hasLocal = $this->configurationService->hasLocal($path);\n        if (!$hasActive && !$hasLocal) {\n            $this->outputLine('<error>No configuration found for path \"%s\"</error>', [$path]);\n            $this->quit(1);\n        }\n        $active = null;\n        if ($hasActive) {\n            $active = $this->configurationService->getActive($path);\n        }\n        if ($this->configurationService->localIsActive($path) && $hasActive) {\n            $this->outputLine($this->consoleRenderer->render($active));\n        } else {\n            $local = null;\n            if ($hasLocal) {\n                $local = $this->configurationService->getLocal($path);\n            }\n            $this->outputLine($this->consoleRenderer->renderDiff($local, $active));\n        }\n    }", "language": "php", "code": "public function showCommand($path)\n    {\n        $hasActive = $this->configurationService->hasActive($path);\n        $hasLocal = $this->configurationService->hasLocal($path);\n        if (!$hasActive && !$hasLocal) {\n            $this->outputLine('<error>No configuration found for path \"%s\"</error>', [$path]);\n            $this->quit(1);\n        }\n        $active = null;\n        if ($hasActive) {\n            $active = $this->configurationService->getActive($path);\n        }\n        if ($this->configurationService->localIsActive($path) && $hasActive) {\n            $this->outputLine($this->consoleRenderer->render($active));\n        } else {\n            $local = null;\n            if ($hasLocal) {\n                $local = $this->configurationService->getLocal($path);\n            }\n            $this->outputLine($this->consoleRenderer->renderDiff($local, $active));\n        }\n    }", "code_tokens": ["public", "function", "showCommand", "(", "$", "path", ")", "{", "$", "hasActive", "=", "$", "this", "->", "configurationService", "->", "hasActive", "(", "$", "path", ")", ";", "$", "hasLocal", "=", "$", "this", "->", "configurationService", "->", "hasLocal", "(", "$", "path", ")", ";", "if", "(", "!", "$", "hasActive", "&&", "!", "$", "hasLocal", ")", "{", "$", "this", "->", "outputLine", "(", "'<error>No configuration found for path \"%s\"</error>'", ",", "[", "$", "path", "]", ")", ";", "$", "this", "->", "quit", "(", "1", ")", ";", "}", "$", "active", "=", "null", ";", "if", "(", "$", "hasActive", ")", "{", "$", "active", "=", "$", "this", "->", "configurationService", "->", "getActive", "(", "$", "path", ")", ";", "}", "if", "(", "$", "this", "->", "configurationService", "->", "localIsActive", "(", "$", "path", ")", "&&", "$", "hasActive", ")", "{", "$", "this", "->", "outputLine", "(", "$", "this", "->", "consoleRenderer", "->", "render", "(", "$", "active", ")", ")", ";", "}", "else", "{", "$", "local", "=", "null", ";", "if", "(", "$", "hasLocal", ")", "{", "$", "local", "=", "$", "this", "->", "configurationService", "->", "getLocal", "(", "$", "path", ")", ";", "}", "$", "this", "->", "outputLine", "(", "$", "this", "->", "consoleRenderer", "->", "renderDiff", "(", "$", "local", ",", "$", "active", ")", ")", ";", "}", "}"], "docstring": "Show configuration value\n\nShows system configuration value by path.\nIf the currently active configuration differs from the value in LocalConfiguration.php\nthe difference between these values is shown.\n\n<b>Example:</b> <code>%command.full_name% DB</code>\n\n@param string $path Path to system configuration option", "docstring_tokens": ["Show", "configuration", "value"], "sha": "a8983d65aa5e2b7495082059cd72b6403b14abfd", "url": "https://github.com/TYPO3-Console/TYPO3-Console/blob/a8983d65aa5e2b7495082059cd72b6403b14abfd/Classes/Console/Command/ConfigurationCommandController.php#L86-L107", "partition": "test"}
{"repo": "miladrahimi/phprouter", "path": "src/Router.php", "func_name": "Router.any", "original_string": "public function any(\n        string $route,\n        $controller,\n        $middleware = [],\n        string $domain = null,\n        string $name = null\n    ): Router {\n        return $this->map(null, $route, $controller, $middleware, $domain, $name);\n    }", "language": "php", "code": "public function any(\n        string $route,\n        $controller,\n        $middleware = [],\n        string $domain = null,\n        string $name = null\n    ): Router {\n        return $this->map(null, $route, $controller, $middleware, $domain, $name);\n    }", "code_tokens": ["public", "function", "any", "(", "string", "$", "route", ",", "$", "controller", ",", "$", "middleware", "=", "[", "]", ",", "string", "$", "domain", "=", "null", ",", "string", "$", "name", "=", "null", ")", ":", "Router", "{", "return", "$", "this", "->", "map", "(", "null", ",", "$", "route", ",", "$", "controller", ",", "$", "middleware", ",", "$", "domain", ",", "$", "name", ")", ";", "}"], "docstring": "Map a controller to given route for all the http methods\n\n@param string $route\n@param Closure|callable|string $controller\n@param Middleware|string|Middleware[]|string[] $middleware\n@param string|null $domain\n@param string|null $name\n@return $this", "docstring_tokens": ["Map", "a", "controller", "to", "given", "route", "for", "all", "the", "http", "methods"], "sha": "7036181516b1cfa77bdd323cc3f2a6a8af95cee8", "url": "https://github.com/miladrahimi/phprouter/blob/7036181516b1cfa77bdd323cc3f2a6a8af95cee8/src/Router.php#L494-L502", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Web/Sessions/CachedSessionHandler.php", "func_name": "CachedSessionHandler.extractData", "original_string": "public function extractData($sessionRecord = [], $unserialize = false) {\n        $data = isset($sessionRecord[$this->dataKey]) ? $sessionRecord[$this->dataKey] : [];\n        return $unserialize && is_string($data) ? $this->unserializeData($data) : $data;\n    }", "language": "php", "code": "public function extractData($sessionRecord = [], $unserialize = false) {\n        $data = isset($sessionRecord[$this->dataKey]) ? $sessionRecord[$this->dataKey] : [];\n        return $unserialize && is_string($data) ? $this->unserializeData($data) : $data;\n    }", "code_tokens": ["public", "function", "extractData", "(", "$", "sessionRecord", "=", "[", "]", ",", "$", "unserialize", "=", "false", ")", "{", "$", "data", "=", "isset", "(", "$", "sessionRecord", "[", "$", "this", "->", "dataKey", "]", ")", "?", "$", "sessionRecord", "[", "$", "this", "->", "dataKey", "]", ":", "[", "]", ";", "return", "$", "unserialize", "&&", "is_string", "(", "$", "data", ")", "?", "$", "this", "->", "unserializeData", "(", "$", "data", ")", ":", "$", "data", ";", "}"], "docstring": "Extract session data from record\n@param array $sessionRecord\n@param bool  $unserialize\n@return array", "docstring_tokens": ["Extract", "session", "data", "from", "record"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Web/Sessions/CachedSessionHandler.php#L199-L202", "partition": "test"}
{"repo": "graste/environaut", "path": "src/Environaut/Report/Results/Result.php", "func_name": "Result.getFilteredAsArray", "original_string": "protected function getFilteredAsArray(array $all_settings, $groups = null, $flag = null)\n    {\n        $settings = array();\n\n        foreach ($all_settings as $setting) {\n            if ($setting->matchesGroup($groups) && $setting->matchesFlag($flag)) {\n                $settings[] = $setting->toArray();\n            }\n        }\n\n        return $settings;\n    }", "language": "php", "code": "protected function getFilteredAsArray(array $all_settings, $groups = null, $flag = null)\n    {\n        $settings = array();\n\n        foreach ($all_settings as $setting) {\n            if ($setting->matchesGroup($groups) && $setting->matchesFlag($flag)) {\n                $settings[] = $setting->toArray();\n            }\n        }\n\n        return $settings;\n    }", "code_tokens": ["protected", "function", "getFilteredAsArray", "(", "array", "$", "all_settings", ",", "$", "groups", "=", "null", ",", "$", "flag", "=", "null", ")", "{", "$", "settings", "=", "array", "(", ")", ";", "foreach", "(", "$", "all_settings", "as", "$", "setting", ")", "{", "if", "(", "$", "setting", "->", "matchesGroup", "(", "$", "groups", ")", "&&", "$", "setting", "->", "matchesFlag", "(", "$", "flag", ")", ")", "{", "$", "settings", "[", "]", "=", "$", "setting", "->", "toArray", "(", ")", ";", "}", "}", "return", "$", "settings", ";", "}"], "docstring": "Returns all or just the matching settings of the given groups as an associative array.\n\n@param array $all_settings array of ISetting implementing setting instances\n@param string $group name of group to filter given settings for\n@param integer $flag flag value the setting must be matching\n\n@return array with associative arrays (for each setting)", "docstring_tokens": ["Returns", "all", "or", "just", "the", "matching", "settings", "of", "the", "given", "groups", "as", "an", "associative", "array", "."], "sha": "e40b498c31214fdbdd529f334f6ce5e6138bb5fb", "url": "https://github.com/graste/environaut/blob/e40b498c31214fdbdd529f334f6ce5e6138bb5fb/src/Environaut/Report/Results/Result.php#L268-L279", "partition": "test"}
{"repo": "getjump/VkApiPHP", "path": "src/getjump/Vk/Wrapper/Photos.php", "func_name": "Photos.save", "original_string": "public function save($data)\n    {\n        $this->vk\n            ->param('album_id', $data->aid)\n            ->param('server', $data->server)\n            ->param('photos_list', $data->photos_list)\n            ->param('hash', $data->hash)\n            ->request('photos.save')->execute();\n    }", "language": "php", "code": "public function save($data)\n    {\n        $this->vk\n            ->param('album_id', $data->aid)\n            ->param('server', $data->server)\n            ->param('photos_list', $data->photos_list)\n            ->param('hash', $data->hash)\n            ->request('photos.save')->execute();\n    }", "code_tokens": ["public", "function", "save", "(", "$", "data", ")", "{", "$", "this", "->", "vk", "->", "param", "(", "'album_id'", ",", "$", "data", "->", "aid", ")", "->", "param", "(", "'server'", ",", "$", "data", "->", "server", ")", "->", "param", "(", "'photos_list'", ",", "$", "data", "->", "photos_list", ")", "->", "param", "(", "'hash'", ",", "$", "data", "->", "hash", ")", "->", "request", "(", "'photos.save'", ")", "->", "execute", "(", ")", ";", "}"], "docstring": "todo Process response.\n\n@param UploadResponse $data", "docstring_tokens": ["todo", "Process", "response", "."], "sha": "9627cf05325492e5bb0dfa3d8c486f22ab3915fd", "url": "https://github.com/getjump/VkApiPHP/blob/9627cf05325492e5bb0dfa3d8c486f22ab3915fd/src/getjump/Vk/Wrapper/Photos.php#L41-L49", "partition": "test"}
{"repo": "cundd/noshi", "path": "Classes/Cundd/Noshi/Configuration.php", "func_name": "Configuration.prepareConfigurationArray", "original_string": "private function prepareConfigurationArray(array $configuration)\n    {\n        $pathConfiguration = [\n            'dataPath',\n            'templatePath',\n            'resourcePath',\n        ];\n        foreach ($pathConfiguration as $key) {\n            if (isset($configuration[$key])) {\n                $configuration[$key] = rtrim($configuration[$key], '/') . '/';\n            }\n        }\n\n        return $configuration;\n    }", "language": "php", "code": "private function prepareConfigurationArray(array $configuration)\n    {\n        $pathConfiguration = [\n            'dataPath',\n            'templatePath',\n            'resourcePath',\n        ];\n        foreach ($pathConfiguration as $key) {\n            if (isset($configuration[$key])) {\n                $configuration[$key] = rtrim($configuration[$key], '/') . '/';\n            }\n        }\n\n        return $configuration;\n    }", "code_tokens": ["private", "function", "prepareConfigurationArray", "(", "array", "$", "configuration", ")", "{", "$", "pathConfiguration", "=", "[", "'dataPath'", ",", "'templatePath'", ",", "'resourcePath'", ",", "]", ";", "foreach", "(", "$", "pathConfiguration", "as", "$", "key", ")", "{", "if", "(", "isset", "(", "$", "configuration", "[", "$", "key", "]", ")", ")", "{", "$", "configuration", "[", "$", "key", "]", "=", "rtrim", "(", "$", "configuration", "[", "$", "key", "]", ",", "'/'", ")", ".", "'/'", ";", "}", "}", "return", "$", "configuration", ";", "}"], "docstring": "Prepare the configuration values\n\nAppend a slash at the end of directory configurations\n\n@param array $configuration\n@return array", "docstring_tokens": ["Prepare", "the", "configuration", "values"], "sha": "4c236ccd08532d81ab1f54fc0634ea0445c43388", "url": "https://github.com/cundd/noshi/blob/4c236ccd08532d81ab1f54fc0634ea0445c43388/Classes/Cundd/Noshi/Configuration.php#L54-L68", "partition": "test"}
{"repo": "scheb/yahoo-finance-api", "path": "src/ApiClient.php", "func_name": "ApiClient.fetchQuotes", "original_string": "private function fetchQuotes(array $symbols)\n    {\n        $url = 'https://query1.finance.yahoo.com/v7/finance/quote?symbols='.urlencode(implode(',', $symbols));\n        $responseBody = (string) $this->client->request('GET', $url)->getBody();\n\n        return $this->resultDecoder->transformQuotes($responseBody);\n    }", "language": "php", "code": "private function fetchQuotes(array $symbols)\n    {\n        $url = 'https://query1.finance.yahoo.com/v7/finance/quote?symbols='.urlencode(implode(',', $symbols));\n        $responseBody = (string) $this->client->request('GET', $url)->getBody();\n\n        return $this->resultDecoder->transformQuotes($responseBody);\n    }", "code_tokens": ["private", "function", "fetchQuotes", "(", "array", "$", "symbols", ")", "{", "$", "url", "=", "'https://query1.finance.yahoo.com/v7/finance/quote?symbols='", ".", "urlencode", "(", "implode", "(", "','", ",", "$", "symbols", ")", ")", ";", "$", "responseBody", "=", "(", "string", ")", "$", "this", "->", "client", "->", "request", "(", "'GET'", ",", "$", "url", ")", "->", "getBody", "(", ")", ";", "return", "$", "this", "->", "resultDecoder", "->", "transformQuotes", "(", "$", "responseBody", ")", ";", "}"], "docstring": "Fetch quote data from API.\n\n@param array $symbols\n\n@return array|Quote[]", "docstring_tokens": ["Fetch", "quote", "data", "from", "API", "."], "sha": "fbacb07e338c41489be5a2318a2213cda290e878", "url": "https://github.com/scheb/yahoo-finance-api/blob/fbacb07e338c41489be5a2318a2213cda290e878/src/ApiClient.php#L153-L159", "partition": "test"}
{"repo": "silvershop/silvershop-core", "path": "src/Model/Order.php", "func_name": "Order.getCMSFields", "original_string": "public function getCMSFields()\n    {\n        $fields = FieldList::create(TabSet::create('Root', Tab::create('Main')));\n        $fs = '<div class=\"field\">';\n        $fe = '</div>';\n        $parts = array(\n            DropdownField::create('Status', $this->fieldLabel('Status'), self::get_order_status_options()),\n            LiteralField::create('Customer', $fs . $this->renderWith('SilverShop\\Admin\\OrderAdmin_Customer') . $fe),\n            LiteralField::create('Addresses', $fs . $this->renderWith('SilverShop\\Admin\\OrderAdmin_Addresses') . $fe),\n            LiteralField::create('Content', $fs . $this->renderWith('SilverShop\\Admin\\OrderAdmin_Content') . $fe),\n        );\n        if ($this->Notes) {\n            $parts[] = LiteralField::create('Notes', $fs . $this->renderWith('SilverShop\\Admin\\OrderAdmin_Notes') . $fe);\n        }\n        $fields->addFieldsToTab('Root.Main', $parts);\n        $this->extend('updateCMSFields', $fields);\n        if ($payments = $fields->fieldByName('Root.Payments.Payments')) {\n            $fields->removeByName('Payments');\n            $fields->insertAfter('Content', $payments);\n            $payments->addExtraClass('order-payments');\n        }\n\n        return $fields;\n    }", "language": "php", "code": "public function getCMSFields()\n    {\n        $fields = FieldList::create(TabSet::create('Root', Tab::create('Main')));\n        $fs = '<div class=\"field\">';\n        $fe = '</div>';\n        $parts = array(\n            DropdownField::create('Status', $this->fieldLabel('Status'), self::get_order_status_options()),\n            LiteralField::create('Customer', $fs . $this->renderWith('SilverShop\\Admin\\OrderAdmin_Customer') . $fe),\n            LiteralField::create('Addresses', $fs . $this->renderWith('SilverShop\\Admin\\OrderAdmin_Addresses') . $fe),\n            LiteralField::create('Content', $fs . $this->renderWith('SilverShop\\Admin\\OrderAdmin_Content') . $fe),\n        );\n        if ($this->Notes) {\n            $parts[] = LiteralField::create('Notes', $fs . $this->renderWith('SilverShop\\Admin\\OrderAdmin_Notes') . $fe);\n        }\n        $fields->addFieldsToTab('Root.Main', $parts);\n        $this->extend('updateCMSFields', $fields);\n        if ($payments = $fields->fieldByName('Root.Payments.Payments')) {\n            $fields->removeByName('Payments');\n            $fields->insertAfter('Content', $payments);\n            $payments->addExtraClass('order-payments');\n        }\n\n        return $fields;\n    }", "code_tokens": ["public", "function", "getCMSFields", "(", ")", "{", "$", "fields", "=", "FieldList", "::", "create", "(", "TabSet", "::", "create", "(", "'Root'", ",", "Tab", "::", "create", "(", "'Main'", ")", ")", ")", ";", "$", "fs", "=", "'<div class=\"field\">'", ";", "$", "fe", "=", "'</div>'", ";", "$", "parts", "=", "array", "(", "DropdownField", "::", "create", "(", "'Status'", ",", "$", "this", "->", "fieldLabel", "(", "'Status'", ")", ",", "self", "::", "get_order_status_options", "(", ")", ")", ",", "LiteralField", "::", "create", "(", "'Customer'", ",", "$", "fs", ".", "$", "this", "->", "renderWith", "(", "'SilverShop\\Admin\\OrderAdmin_Customer'", ")", ".", "$", "fe", ")", ",", "LiteralField", "::", "create", "(", "'Addresses'", ",", "$", "fs", ".", "$", "this", "->", "renderWith", "(", "'SilverShop\\Admin\\OrderAdmin_Addresses'", ")", ".", "$", "fe", ")", ",", "LiteralField", "::", "create", "(", "'Content'", ",", "$", "fs", ".", "$", "this", "->", "renderWith", "(", "'SilverShop\\Admin\\OrderAdmin_Content'", ")", ".", "$", "fe", ")", ",", ")", ";", "if", "(", "$", "this", "->", "Notes", ")", "{", "$", "parts", "[", "]", "=", "LiteralField", "::", "create", "(", "'Notes'", ",", "$", "fs", ".", "$", "this", "->", "renderWith", "(", "'SilverShop\\Admin\\OrderAdmin_Notes'", ")", ".", "$", "fe", ")", ";", "}", "$", "fields", "->", "addFieldsToTab", "(", "'Root.Main'", ",", "$", "parts", ")", ";", "$", "this", "->", "extend", "(", "'updateCMSFields'", ",", "$", "fields", ")", ";", "if", "(", "$", "payments", "=", "$", "fields", "->", "fieldByName", "(", "'Root.Payments.Payments'", ")", ")", "{", "$", "fields", "->", "removeByName", "(", "'Payments'", ")", ";", "$", "fields", "->", "insertAfter", "(", "'Content'", ",", "$", "payments", ")", ";", "$", "payments", "->", "addExtraClass", "(", "'order-payments'", ")", ";", "}", "return", "$", "fields", ";", "}"], "docstring": "Create CMS fields for cms viewing and editing orders", "docstring_tokens": ["Create", "CMS", "fields", "for", "cms", "viewing", "and", "editing", "orders"], "sha": "b090e970b06c0fb7e68107360760b6e2d6d184c4", "url": "https://github.com/silvershop/silvershop-core/blob/b090e970b06c0fb7e68107360760b6e2d6d184c4/src/Model/Order.php#L298-L321", "partition": "test"}
{"repo": "xloit/xloit-bridge-doctrine-orm", "path": "src/EntityQueryBuilder.php", "func_name": "EntityQueryBuilder.addOrderBy", "original_string": "public function addOrderBy($sort, $order = null)\n    {\n        if (is_string($sort)) {\n            $sort = $this->alias($sort);\n        }\n\n        parent::addOrderBy($sort, $order);\n\n        return $this;\n    }", "language": "php", "code": "public function addOrderBy($sort, $order = null)\n    {\n        if (is_string($sort)) {\n            $sort = $this->alias($sort);\n        }\n\n        parent::addOrderBy($sort, $order);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addOrderBy", "(", "$", "sort", ",", "$", "order", "=", "null", ")", "{", "if", "(", "is_string", "(", "$", "sort", ")", ")", "{", "$", "sort", "=", "$", "this", "->", "alias", "(", "$", "sort", ")", ";", "}", "parent", "::", "addOrderBy", "(", "$", "sort", ",", "$", "order", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Adds an ordering to the query results.\n\n@param string $sort  The ordering expression.\n@param string $order The ordering direction.\n\n@return $this This QueryBuilder instance.\n@throws \\ReflectionException", "docstring_tokens": ["Adds", "an", "ordering", "to", "the", "query", "results", "."], "sha": "7bcb35b2c0728e43f626ff62a573861315b0ed3f", "url": "https://github.com/xloit/xloit-bridge-doctrine-orm/blob/7bcb35b2c0728e43f626ff62a573861315b0ed3f/src/EntityQueryBuilder.php#L419-L428", "partition": "test"}
{"repo": "mastashake08/laravel-spark-archive", "path": "app/Teams/Team.php", "func_name": "Team.inviteUserByEmail", "original_string": "public function inviteUserByEmail($email)\n    {\n        $model = config('auth.model');\n\n        $invitedUser = (new $model)->where('email', $email)->first();\n\n        $invitation = $this->invitations()\n                ->where('email', $email)->first();\n\n        if (! $invitation) {\n            $invitation = $this->invitations()->create([\n                'user_id' => $invitedUser ? $invitedUser->id : null,\n                'email' => $email,\n                'token' => str_random(40),\n            ]);\n        }\n\n        $email = $invitation->user_id\n                        ? 'spark::emails.team.invitations.existing'\n                        : 'spark::emails.team.invitations.new';\n\n        Mail::send($email, compact('invitation'), function ($m) use ($invitation) {\n            $m->to($invitation->email)->subject('New Invitation!');\n        });\n\n        return $invitation;\n    }", "language": "php", "code": "public function inviteUserByEmail($email)\n    {\n        $model = config('auth.model');\n\n        $invitedUser = (new $model)->where('email', $email)->first();\n\n        $invitation = $this->invitations()\n                ->where('email', $email)->first();\n\n        if (! $invitation) {\n            $invitation = $this->invitations()->create([\n                'user_id' => $invitedUser ? $invitedUser->id : null,\n                'email' => $email,\n                'token' => str_random(40),\n            ]);\n        }\n\n        $email = $invitation->user_id\n                        ? 'spark::emails.team.invitations.existing'\n                        : 'spark::emails.team.invitations.new';\n\n        Mail::send($email, compact('invitation'), function ($m) use ($invitation) {\n            $m->to($invitation->email)->subject('New Invitation!');\n        });\n\n        return $invitation;\n    }", "code_tokens": ["public", "function", "inviteUserByEmail", "(", "$", "email", ")", "{", "$", "model", "=", "config", "(", "'auth.model'", ")", ";", "$", "invitedUser", "=", "(", "new", "$", "model", ")", "->", "where", "(", "'email'", ",", "$", "email", ")", "->", "first", "(", ")", ";", "$", "invitation", "=", "$", "this", "->", "invitations", "(", ")", "->", "where", "(", "'email'", ",", "$", "email", ")", "->", "first", "(", ")", ";", "if", "(", "!", "$", "invitation", ")", "{", "$", "invitation", "=", "$", "this", "->", "invitations", "(", ")", "->", "create", "(", "[", "'user_id'", "=>", "$", "invitedUser", "?", "$", "invitedUser", "->", "id", ":", "null", ",", "'email'", "=>", "$", "email", ",", "'token'", "=>", "str_random", "(", "40", ")", ",", "]", ")", ";", "}", "$", "email", "=", "$", "invitation", "->", "user_id", "?", "'spark::emails.team.invitations.existing'", ":", "'spark::emails.team.invitations.new'", ";", "Mail", "::", "send", "(", "$", "email", ",", "compact", "(", "'invitation'", ")", ",", "function", "(", "$", "m", ")", "use", "(", "$", "invitation", ")", "{", "$", "m", "->", "to", "(", "$", "invitation", "->", "email", ")", "->", "subject", "(", "'New Invitation!'", ")", ";", "}", ")", ";", "return", "$", "invitation", ";", "}"], "docstring": "Invite a user to the team by e-mail address.\n\n@param  string  $email\n@return \\Laravel\\Spark\\Teams\\Invitation", "docstring_tokens": ["Invite", "a", "user", "to", "the", "team", "by", "e", "-", "mail", "address", "."], "sha": "5c833e498eefed6fea79823e0a760f53a323207a", "url": "https://github.com/mastashake08/laravel-spark-archive/blob/5c833e498eefed6fea79823e0a760f53a323207a/app/Teams/Team.php#L57-L83", "partition": "test"}
{"repo": "sminnee/phpcrawl", "path": "libs/CookieCache/PHPCrawlerSQLiteCookieCache.class.php", "func_name": "PHPCrawlerSQLiteCookieCache.openConnection", "original_string": "protected function openConnection($create_tables = false)\r\n  {\r\n    //PHPCrawlerBenchmark::start(\"Connecting to SQLite-cache-db\");\r\n    \r\n    // Open sqlite-file\r\n    try\r\n    {\r\n      $this->PDO = new PDO(\"sqlite:\".$this->sqlite_db_file);\r\n    }\r\n    catch (Exception $e)\r\n    {\r\n      throw new Exception(\"Error creating SQLite-cache-file, \".$e->getMessage().\", try installing sqlite3-extension for PHP.\");\r\n    }\r\n    \r\n    $this->PDO->exec(\"PRAGMA journal_mode = OFF\");\r\n    \r\n    $this->PDO->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\r\n    $this->PDO->setAttribute(PDO::ATTR_TIMEOUT, 100);\r\n    \r\n    if ($create_tables == true)\r\n    {\r\n      // Create url-table (if not exists)\r\n      $this->PDO->exec(\"CREATE TABLE IF NOT EXISTS cookies (id integer PRIMARY KEY AUTOINCREMENT,\r\n                                                            cookie_hash TEXT UNIQUE,\r\n                                                            source_domain TEXT,\r\n                                                            source_url TEXT,\r\n                                                            name TEXT,\r\n                                                            value TEXT,\r\n                                                            domain TEXT,\r\n                                                            path TEXT,\r\n                                                            expires TEXT,\r\n                                                            expire_timestamp INTEGER,\r\n                                                            cookie_send_time INTEGER);\");\r\n      \r\n      // Create indexes (seems that indexes make the whole thingy slower)\r\n      $this->PDO->exec(\"CREATE INDEX IF NOT EXISTS cookie_hash ON cookies (cookie_hash);\");\r\n      \r\n      $this->PDO->exec(\"ANALYZE;\");\r\n    }\r\n    \r\n    //PHPCrawlerBenchmark::stop(\"Connecting to SQLite-cache-db\");\r\n  }", "language": "php", "code": "protected function openConnection($create_tables = false)\r\n  {\r\n    //PHPCrawlerBenchmark::start(\"Connecting to SQLite-cache-db\");\r\n    \r\n    // Open sqlite-file\r\n    try\r\n    {\r\n      $this->PDO = new PDO(\"sqlite:\".$this->sqlite_db_file);\r\n    }\r\n    catch (Exception $e)\r\n    {\r\n      throw new Exception(\"Error creating SQLite-cache-file, \".$e->getMessage().\", try installing sqlite3-extension for PHP.\");\r\n    }\r\n    \r\n    $this->PDO->exec(\"PRAGMA journal_mode = OFF\");\r\n    \r\n    $this->PDO->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\r\n    $this->PDO->setAttribute(PDO::ATTR_TIMEOUT, 100);\r\n    \r\n    if ($create_tables == true)\r\n    {\r\n      // Create url-table (if not exists)\r\n      $this->PDO->exec(\"CREATE TABLE IF NOT EXISTS cookies (id integer PRIMARY KEY AUTOINCREMENT,\r\n                                                            cookie_hash TEXT UNIQUE,\r\n                                                            source_domain TEXT,\r\n                                                            source_url TEXT,\r\n                                                            name TEXT,\r\n                                                            value TEXT,\r\n                                                            domain TEXT,\r\n                                                            path TEXT,\r\n                                                            expires TEXT,\r\n                                                            expire_timestamp INTEGER,\r\n                                                            cookie_send_time INTEGER);\");\r\n      \r\n      // Create indexes (seems that indexes make the whole thingy slower)\r\n      $this->PDO->exec(\"CREATE INDEX IF NOT EXISTS cookie_hash ON cookies (cookie_hash);\");\r\n      \r\n      $this->PDO->exec(\"ANALYZE;\");\r\n    }\r\n    \r\n    //PHPCrawlerBenchmark::stop(\"Connecting to SQLite-cache-db\");\r\n  }", "code_tokens": ["protected", "function", "openConnection", "(", "$", "create_tables", "=", "false", ")", "{", "//PHPCrawlerBenchmark::start(\"Connecting to SQLite-cache-db\");\r", "// Open sqlite-file\r", "try", "{", "$", "this", "->", "PDO", "=", "new", "PDO", "(", "\"sqlite:\"", ".", "$", "this", "->", "sqlite_db_file", ")", ";", "}", "catch", "(", "Exception", "$", "e", ")", "{", "throw", "new", "Exception", "(", "\"Error creating SQLite-cache-file, \"", ".", "$", "e", "->", "getMessage", "(", ")", ".", "\", try installing sqlite3-extension for PHP.\"", ")", ";", "}", "$", "this", "->", "PDO", "->", "exec", "(", "\"PRAGMA journal_mode = OFF\"", ")", ";", "$", "this", "->", "PDO", "->", "setAttribute", "(", "PDO", "::", "ATTR_ERRMODE", ",", "PDO", "::", "ERRMODE_WARNING", ")", ";", "$", "this", "->", "PDO", "->", "setAttribute", "(", "PDO", "::", "ATTR_TIMEOUT", ",", "100", ")", ";", "if", "(", "$", "create_tables", "==", "true", ")", "{", "// Create url-table (if not exists)\r", "$", "this", "->", "PDO", "->", "exec", "(", "\"CREATE TABLE IF NOT EXISTS cookies (id integer PRIMARY KEY AUTOINCREMENT,\r\n                                                            cookie_hash TEXT UNIQUE,\r\n                                                            source_domain TEXT,\r\n                                                            source_url TEXT,\r\n                                                            name TEXT,\r\n                                                            value TEXT,\r\n                                                            domain TEXT,\r\n                                                            path TEXT,\r\n                                                            expires TEXT,\r\n                                                            expire_timestamp INTEGER,\r\n                                                            cookie_send_time INTEGER);\"", ")", ";", "// Create indexes (seems that indexes make the whole thingy slower)\r", "$", "this", "->", "PDO", "->", "exec", "(", "\"CREATE INDEX IF NOT EXISTS cookie_hash ON cookies (cookie_hash);\"", ")", ";", "$", "this", "->", "PDO", "->", "exec", "(", "\"ANALYZE;\"", ")", ";", "}", "//PHPCrawlerBenchmark::stop(\"Connecting to SQLite-cache-db\");\r", "}"], "docstring": "Creates the sqlite-db-file and opens connection to it.\n\n@param bool $create_tables Defines whether all necessary tables should be created", "docstring_tokens": ["Creates", "the", "sqlite", "-", "db", "-", "file", "and", "opens", "connection", "to", "it", "."], "sha": "025c2ce86e5056c09de5a0eb4d76e8cf775dae36", "url": "https://github.com/sminnee/phpcrawl/blob/025c2ce86e5056c09de5a0eb4d76e8cf775dae36/libs/CookieCache/PHPCrawlerSQLiteCookieCache.class.php#L117-L158", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Base/Logger/StdioLogger.php", "func_name": "StdioLogger.log", "original_string": "public function log($level, $message, array $context = [], $traceShift = 0)\n    {\n        $this->checkCorrectLogLevel($level);\n        $message = $this->convertMessageToString($message);\n        $message = $this->processPlaceHolders($message, $context);\n        if (strlen($message) > 0 && mb_substr($message, -1) !== \"\\n\" && !$this->newLine) {\n            $message .= self::NEW_LINE;\n        }\n        if ($this->hideLevel === false) {\n            $logColors = isset(static::$LOG_COLORS[$level]) ? static::$LOG_COLORS[$level] : [];\n            if ($level !== static::LOG_LEVEL_RAW) {\n                $message = str_pad('[' . $level . ']', 10, ' ') . $message;\n            }\n            if (!empty($logColors)) {\n                $message = $this->colorizeText($message, $logColors);\n            }\n        }\n        if ($this->newLine === true) {\n            $message .= self::NEW_LINE;\n        }\n        //Add script and line number\n        if ($this->withLineNum) {\n            $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);\n            $lineNum = $this->getCalleeData($trace, $traceShift + 1);\n            $unixTime = microtime(true);\n            $micro = substr(sprintf(\"%06d\", ($unixTime - floor($unixTime)) * 1000000), 0, 3);\n            $time = date('H:i:s') . '.' . $micro;\n            $message .= $this->colorizeText('^^^ ' . $time . ' - ' . $lineNum, static::FG_BLACK) . self::NEW_LINE;\n        }\n        $message = $this->format($message, $context);\n        $this->stdio->write($message);\n    }", "language": "php", "code": "public function log($level, $message, array $context = [], $traceShift = 0)\n    {\n        $this->checkCorrectLogLevel($level);\n        $message = $this->convertMessageToString($message);\n        $message = $this->processPlaceHolders($message, $context);\n        if (strlen($message) > 0 && mb_substr($message, -1) !== \"\\n\" && !$this->newLine) {\n            $message .= self::NEW_LINE;\n        }\n        if ($this->hideLevel === false) {\n            $logColors = isset(static::$LOG_COLORS[$level]) ? static::$LOG_COLORS[$level] : [];\n            if ($level !== static::LOG_LEVEL_RAW) {\n                $message = str_pad('[' . $level . ']', 10, ' ') . $message;\n            }\n            if (!empty($logColors)) {\n                $message = $this->colorizeText($message, $logColors);\n            }\n        }\n        if ($this->newLine === true) {\n            $message .= self::NEW_LINE;\n        }\n        //Add script and line number\n        if ($this->withLineNum) {\n            $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);\n            $lineNum = $this->getCalleeData($trace, $traceShift + 1);\n            $unixTime = microtime(true);\n            $micro = substr(sprintf(\"%06d\", ($unixTime - floor($unixTime)) * 1000000), 0, 3);\n            $time = date('H:i:s') . '.' . $micro;\n            $message .= $this->colorizeText('^^^ ' . $time . ' - ' . $lineNum, static::FG_BLACK) . self::NEW_LINE;\n        }\n        $message = $this->format($message, $context);\n        $this->stdio->write($message);\n    }", "code_tokens": ["public", "function", "log", "(", "$", "level", ",", "$", "message", ",", "array", "$", "context", "=", "[", "]", ",", "$", "traceShift", "=", "0", ")", "{", "$", "this", "->", "checkCorrectLogLevel", "(", "$", "level", ")", ";", "$", "message", "=", "$", "this", "->", "convertMessageToString", "(", "$", "message", ")", ";", "$", "message", "=", "$", "this", "->", "processPlaceHolders", "(", "$", "message", ",", "$", "context", ")", ";", "if", "(", "strlen", "(", "$", "message", ")", ">", "0", "&&", "mb_substr", "(", "$", "message", ",", "-", "1", ")", "!==", "\"\\n\"", "&&", "!", "$", "this", "->", "newLine", ")", "{", "$", "message", ".=", "self", "::", "NEW_LINE", ";", "}", "if", "(", "$", "this", "->", "hideLevel", "===", "false", ")", "{", "$", "logColors", "=", "isset", "(", "static", "::", "$", "LOG_COLORS", "[", "$", "level", "]", ")", "?", "static", "::", "$", "LOG_COLORS", "[", "$", "level", "]", ":", "[", "]", ";", "if", "(", "$", "level", "!==", "static", "::", "LOG_LEVEL_RAW", ")", "{", "$", "message", "=", "str_pad", "(", "'['", ".", "$", "level", ".", "']'", ",", "10", ",", "' '", ")", ".", "$", "message", ";", "}", "if", "(", "!", "empty", "(", "$", "logColors", ")", ")", "{", "$", "message", "=", "$", "this", "->", "colorizeText", "(", "$", "message", ",", "$", "logColors", ")", ";", "}", "}", "if", "(", "$", "this", "->", "newLine", "===", "true", ")", "{", "$", "message", ".=", "self", "::", "NEW_LINE", ";", "}", "//Add script and line number", "if", "(", "$", "this", "->", "withLineNum", ")", "{", "$", "trace", "=", "debug_backtrace", "(", "DEBUG_BACKTRACE_IGNORE_ARGS", ")", ";", "$", "lineNum", "=", "$", "this", "->", "getCalleeData", "(", "$", "trace", ",", "$", "traceShift", "+", "1", ")", ";", "$", "unixTime", "=", "microtime", "(", "true", ")", ";", "$", "micro", "=", "substr", "(", "sprintf", "(", "\"%06d\"", ",", "(", "$", "unixTime", "-", "floor", "(", "$", "unixTime", ")", ")", "*", "1000000", ")", ",", "0", ",", "3", ")", ";", "$", "time", "=", "date", "(", "'H:i:s'", ")", ".", "'.'", ".", "$", "micro", ";", "$", "message", ".=", "$", "this", "->", "colorizeText", "(", "'^^^ '", ".", "$", "time", ".", "' - '", ".", "$", "lineNum", ",", "static", "::", "FG_BLACK", ")", ".", "self", "::", "NEW_LINE", ";", "}", "$", "message", "=", "$", "this", "->", "format", "(", "$", "message", ",", "$", "context", ")", ";", "$", "this", "->", "stdio", "->", "write", "(", "$", "message", ")", ";", "}"], "docstring": "Log message to STDOUT\n@param string $level\n@param string $message\n@param array  $context\n@param int    $traceShift", "docstring_tokens": ["Log", "message", "to", "STDOUT"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Base/Logger/StdioLogger.php#L326-L357", "partition": "test"}
{"repo": "mamasu/mama-framework", "path": "src/View/BasicViewAbstract.php", "func_name": "BasicViewAbstract.addScript", "original_string": "public function addScript($jsfile, $min = FALSE, $type = 'text/javascript') {\n        //Check if we must minified the style\n        $minTag = \"<script type='$type' src='min/?f=\" . $this->asset($jsfile, TRUE) . \"' ></script>\";\n        $maxTag = \"<script type='$type' src='\" . $this->asset($jsfile, TRUE) . \"' ></script>\";\n\n        //TODO: min files\n        $includeTag = $maxTag;\n\n\n        $minPos = strpos($this->scripts, $minTag);\n        $maxPos = strpos($this->scripts, $maxTag);\n\n        if ($minPos === FALSE && $maxPos === FALSE) {  // Si no esta, concatenamos\n            $this->scripts .= $includeTag;\n        }\n    }", "language": "php", "code": "public function addScript($jsfile, $min = FALSE, $type = 'text/javascript') {\n        //Check if we must minified the style\n        $minTag = \"<script type='$type' src='min/?f=\" . $this->asset($jsfile, TRUE) . \"' ></script>\";\n        $maxTag = \"<script type='$type' src='\" . $this->asset($jsfile, TRUE) . \"' ></script>\";\n\n        //TODO: min files\n        $includeTag = $maxTag;\n\n\n        $minPos = strpos($this->scripts, $minTag);\n        $maxPos = strpos($this->scripts, $maxTag);\n\n        if ($minPos === FALSE && $maxPos === FALSE) {  // Si no esta, concatenamos\n            $this->scripts .= $includeTag;\n        }\n    }", "code_tokens": ["public", "function", "addScript", "(", "$", "jsfile", ",", "$", "min", "=", "FALSE", ",", "$", "type", "=", "'text/javascript'", ")", "{", "//Check if we must minified the style", "$", "minTag", "=", "\"<script type='$type' src='min/?f=\"", ".", "$", "this", "->", "asset", "(", "$", "jsfile", ",", "TRUE", ")", ".", "\"' ></script>\"", ";", "$", "maxTag", "=", "\"<script type='$type' src='\"", ".", "$", "this", "->", "asset", "(", "$", "jsfile", ",", "TRUE", ")", ".", "\"' ></script>\"", ";", "//TODO: min files", "$", "includeTag", "=", "$", "maxTag", ";", "$", "minPos", "=", "strpos", "(", "$", "this", "->", "scripts", ",", "$", "minTag", ")", ";", "$", "maxPos", "=", "strpos", "(", "$", "this", "->", "scripts", ",", "$", "maxTag", ")", ";", "if", "(", "$", "minPos", "===", "FALSE", "&&", "$", "maxPos", "===", "FALSE", ")", "{", "// Si no esta, concatenamos", "$", "this", "->", "scripts", ".=", "$", "includeTag", ";", "}", "}"], "docstring": "Add Script into the cue of Script vars.\n\n@param string $jsfile\n@param bool $min\n@param string $type", "docstring_tokens": ["Add", "Script", "into", "the", "cue", "of", "Script", "vars", "."], "sha": "105a4980b56f1fdaad095a32189ee47d39203a7a", "url": "https://github.com/mamasu/mama-framework/blob/105a4980b56f1fdaad095a32189ee47d39203a7a/src/View/BasicViewAbstract.php#L155-L170", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/XSD2PHP/src/com/mikebevz/xsd2php/wsdl/Wsdl_1_1.php", "func_name": "Wsdl_1_1.createElementWithComplexType", "original_string": "private function createElementWithComplexType($name, $elements)\n    {\n        //print_r('Create complex type '.$name.\"\\n\");\n        $el = $this->dom->createElement($this->xmlSchemaPreffix.':element');\n        $el->setAttribute('name', $name);\n        \n        $compType = $this->dom->createElement($this->xmlSchemaPreffix.':complexType');\n        $seqType = $this->dom->createElement($this->xmlSchemaPreffix.':sequence');\n        \n        foreach ($elements as $element) {\n            $seqType->appendChild($element);\n        }\n        \n        $compType->appendChild($seqType);\n        $el->appendChild($compType);\n        \n        return $el;\n    }", "language": "php", "code": "private function createElementWithComplexType($name, $elements)\n    {\n        //print_r('Create complex type '.$name.\"\\n\");\n        $el = $this->dom->createElement($this->xmlSchemaPreffix.':element');\n        $el->setAttribute('name', $name);\n        \n        $compType = $this->dom->createElement($this->xmlSchemaPreffix.':complexType');\n        $seqType = $this->dom->createElement($this->xmlSchemaPreffix.':sequence');\n        \n        foreach ($elements as $element) {\n            $seqType->appendChild($element);\n        }\n        \n        $compType->appendChild($seqType);\n        $el->appendChild($compType);\n        \n        return $el;\n    }", "code_tokens": ["private", "function", "createElementWithComplexType", "(", "$", "name", ",", "$", "elements", ")", "{", "//print_r('Create complex type '.$name.\"\\n\");", "$", "el", "=", "$", "this", "->", "dom", "->", "createElement", "(", "$", "this", "->", "xmlSchemaPreffix", ".", "':element'", ")", ";", "$", "el", "->", "setAttribute", "(", "'name'", ",", "$", "name", ")", ";", "$", "compType", "=", "$", "this", "->", "dom", "->", "createElement", "(", "$", "this", "->", "xmlSchemaPreffix", ".", "':complexType'", ")", ";", "$", "seqType", "=", "$", "this", "->", "dom", "->", "createElement", "(", "$", "this", "->", "xmlSchemaPreffix", ".", "':sequence'", ")", ";", "foreach", "(", "$", "elements", "as", "$", "element", ")", "{", "$", "seqType", "->", "appendChild", "(", "$", "element", ")", ";", "}", "$", "compType", "->", "appendChild", "(", "$", "seqType", ")", ";", "$", "el", "->", "appendChild", "(", "$", "compType", ")", ";", "return", "$", "el", ";", "}"], "docstring": "Create an element with complex type\n\n<code>\n<element name=\"$name\">\n<complexType>\n<sequence>\n$elements\n</sequence>\n</complexType>\n</element>\n</code>\n\n@param string $name     Element name\n@param array  $elements Array of elements to include into sequence\n\n@return DOMElement", "docstring_tokens": ["Create", "an", "element", "with", "complex", "type"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/XSD2PHP/src/com/mikebevz/xsd2php/wsdl/Wsdl_1_1.php#L323-L340", "partition": "test"}
{"repo": "danbelden/php-siren", "path": "src/Handler.php", "func_name": "Handler.getActionsFromDataArray", "original_string": "protected function getActionsFromDataArray(array $actionsArray)\n    {\n        $actions = array();\n        foreach ($actionsArray as $actionArray) {\n            $action = new Action();\n\n            if (isset($actionArray['name']) && is_string($actionArray['name'])) {\n                $action->setName($actionArray['name']);\n            }\n\n            if (isset($actionArray['title']) && is_string($actionArray['title'])) {\n                $action->setTitle($actionArray['title']);\n            }\n\n            if (isset($actionArray['method']) && is_string($actionArray['method'])) {\n                $action->setMethod($actionArray['method']);\n            }\n\n            if (isset($actionArray['href']) && is_string($actionArray['href'])) {\n                $action->setHref($actionArray['href']);\n            }\n\n            if (isset($actionArray['type']) && is_string($actionArray['type'])) {\n                $action->setType($actionArray['type']);\n            }\n\n            if (isset($actionArray['fields']) && is_array($actionArray['fields'])) {\n                $fields = $this->getFieldsFromDataArray($actionArray['fields']);\n                $action->setFields($fields);\n            }\n\n            $actions[] = $action;\n        }\n\n        return $actions;\n    }", "language": "php", "code": "protected function getActionsFromDataArray(array $actionsArray)\n    {\n        $actions = array();\n        foreach ($actionsArray as $actionArray) {\n            $action = new Action();\n\n            if (isset($actionArray['name']) && is_string($actionArray['name'])) {\n                $action->setName($actionArray['name']);\n            }\n\n            if (isset($actionArray['title']) && is_string($actionArray['title'])) {\n                $action->setTitle($actionArray['title']);\n            }\n\n            if (isset($actionArray['method']) && is_string($actionArray['method'])) {\n                $action->setMethod($actionArray['method']);\n            }\n\n            if (isset($actionArray['href']) && is_string($actionArray['href'])) {\n                $action->setHref($actionArray['href']);\n            }\n\n            if (isset($actionArray['type']) && is_string($actionArray['type'])) {\n                $action->setType($actionArray['type']);\n            }\n\n            if (isset($actionArray['fields']) && is_array($actionArray['fields'])) {\n                $fields = $this->getFieldsFromDataArray($actionArray['fields']);\n                $action->setFields($fields);\n            }\n\n            $actions[] = $action;\n        }\n\n        return $actions;\n    }", "code_tokens": ["protected", "function", "getActionsFromDataArray", "(", "array", "$", "actionsArray", ")", "{", "$", "actions", "=", "array", "(", ")", ";", "foreach", "(", "$", "actionsArray", "as", "$", "actionArray", ")", "{", "$", "action", "=", "new", "Action", "(", ")", ";", "if", "(", "isset", "(", "$", "actionArray", "[", "'name'", "]", ")", "&&", "is_string", "(", "$", "actionArray", "[", "'name'", "]", ")", ")", "{", "$", "action", "->", "setName", "(", "$", "actionArray", "[", "'name'", "]", ")", ";", "}", "if", "(", "isset", "(", "$", "actionArray", "[", "'title'", "]", ")", "&&", "is_string", "(", "$", "actionArray", "[", "'title'", "]", ")", ")", "{", "$", "action", "->", "setTitle", "(", "$", "actionArray", "[", "'title'", "]", ")", ";", "}", "if", "(", "isset", "(", "$", "actionArray", "[", "'method'", "]", ")", "&&", "is_string", "(", "$", "actionArray", "[", "'method'", "]", ")", ")", "{", "$", "action", "->", "setMethod", "(", "$", "actionArray", "[", "'method'", "]", ")", ";", "}", "if", "(", "isset", "(", "$", "actionArray", "[", "'href'", "]", ")", "&&", "is_string", "(", "$", "actionArray", "[", "'href'", "]", ")", ")", "{", "$", "action", "->", "setHref", "(", "$", "actionArray", "[", "'href'", "]", ")", ";", "}", "if", "(", "isset", "(", "$", "actionArray", "[", "'type'", "]", ")", "&&", "is_string", "(", "$", "actionArray", "[", "'type'", "]", ")", ")", "{", "$", "action", "->", "setType", "(", "$", "actionArray", "[", "'type'", "]", ")", ";", "}", "if", "(", "isset", "(", "$", "actionArray", "[", "'fields'", "]", ")", "&&", "is_array", "(", "$", "actionArray", "[", "'fields'", "]", ")", ")", "{", "$", "fields", "=", "$", "this", "->", "getFieldsFromDataArray", "(", "$", "actionArray", "[", "'fields'", "]", ")", ";", "$", "action", "->", "setFields", "(", "$", "fields", ")", ";", "}", "$", "actions", "[", "]", "=", "$", "action", ";", "}", "return", "$", "actions", ";", "}"], "docstring": "Helper method to convert an action data array to an array of action objects\n\n@param array $actionsArray\n@return Action[]", "docstring_tokens": ["Helper", "method", "to", "convert", "an", "action", "data", "array", "to", "an", "array", "of", "action", "objects"], "sha": "284399cae4edea7191b98beed842cc33947f9ce6", "url": "https://github.com/danbelden/php-siren/blob/284399cae4edea7191b98beed842cc33947f9ce6/src/Handler.php#L109-L144", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/HTTP/CURLRequest.php", "func_name": "CURLRequest.send", "original_string": "public function send(string $method, string $url)\n\t{\n\t\t// Reset our curl options so we're on a fresh slate.\n\t\t$curl_options = [];\n\n\t\tif (! empty($this->config['query']) && is_array($this->config['query']))\n\t\t{\n\t\t\t// This is likely too naive a solution.\n\t\t\t// Should look into handling when $url already\n\t\t\t// has query vars on it.\n\t\t\t$url .= '?' . http_build_query($this->config['query']);\n\t\t\tunset($this->config['query']);\n\t\t}\n\n\t\t$curl_options[CURLOPT_URL]            = $url;\n\t\t$curl_options[CURLOPT_RETURNTRANSFER] = true;\n\t\t$curl_options[CURLOPT_HEADER]         = true;\n\t\t$curl_options[CURLOPT_FRESH_CONNECT]  = true;\n\t\t// Disable @file uploads in post data.\n\t\t$curl_options[CURLOPT_SAFE_UPLOAD] = true;\n\n\t\t$curl_options = $this->setCURLOptions($curl_options, $this->config);\n\t\t$curl_options = $this->applyMethod($method, $curl_options);\n\t\t$curl_options = $this->applyRequestHeaders($curl_options);\n\n\t\t// Do we need to delay this request?\n\t\tif ($this->delay > 0)\n\t\t{\n\t\t\tsleep($this->delay);\n\t\t}\n\n\t\t$output = $this->sendRequest($curl_options);\n\n\t\t$continueStr = \"HTTP/1.1 100 Continue\\x0d\\x0a\\x0d\\x0a\";\n\t\tif (strpos($output, $continueStr) === 0)\n\t\t{\n\t\t\t$output = substr($output, strlen($continueStr));\n\t\t}\n\n\t\t// Split out our headers and body\n\t\t$break = strpos($output, \"\\r\\n\\r\\n\");\n\n\t\tif ($break !== false)\n\t\t{\n\t\t\t// Our headers\n\t\t\t$headers = explode(\"\\n\", substr($output, 0, $break));\n\n\t\t\t$this->setResponseHeaders($headers);\n\n\t\t\t// Our body\n\t\t\t$body = substr($output, $break + 4);\n\t\t\t$this->response->setBody($body);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->response->setBody($output);\n\t\t}\n\n\t\treturn $this->response;\n\t}", "language": "php", "code": "public function send(string $method, string $url)\n\t{\n\t\t// Reset our curl options so we're on a fresh slate.\n\t\t$curl_options = [];\n\n\t\tif (! empty($this->config['query']) && is_array($this->config['query']))\n\t\t{\n\t\t\t// This is likely too naive a solution.\n\t\t\t// Should look into handling when $url already\n\t\t\t// has query vars on it.\n\t\t\t$url .= '?' . http_build_query($this->config['query']);\n\t\t\tunset($this->config['query']);\n\t\t}\n\n\t\t$curl_options[CURLOPT_URL]            = $url;\n\t\t$curl_options[CURLOPT_RETURNTRANSFER] = true;\n\t\t$curl_options[CURLOPT_HEADER]         = true;\n\t\t$curl_options[CURLOPT_FRESH_CONNECT]  = true;\n\t\t// Disable @file uploads in post data.\n\t\t$curl_options[CURLOPT_SAFE_UPLOAD] = true;\n\n\t\t$curl_options = $this->setCURLOptions($curl_options, $this->config);\n\t\t$curl_options = $this->applyMethod($method, $curl_options);\n\t\t$curl_options = $this->applyRequestHeaders($curl_options);\n\n\t\t// Do we need to delay this request?\n\t\tif ($this->delay > 0)\n\t\t{\n\t\t\tsleep($this->delay);\n\t\t}\n\n\t\t$output = $this->sendRequest($curl_options);\n\n\t\t$continueStr = \"HTTP/1.1 100 Continue\\x0d\\x0a\\x0d\\x0a\";\n\t\tif (strpos($output, $continueStr) === 0)\n\t\t{\n\t\t\t$output = substr($output, strlen($continueStr));\n\t\t}\n\n\t\t// Split out our headers and body\n\t\t$break = strpos($output, \"\\r\\n\\r\\n\");\n\n\t\tif ($break !== false)\n\t\t{\n\t\t\t// Our headers\n\t\t\t$headers = explode(\"\\n\", substr($output, 0, $break));\n\n\t\t\t$this->setResponseHeaders($headers);\n\n\t\t\t// Our body\n\t\t\t$body = substr($output, $break + 4);\n\t\t\t$this->response->setBody($body);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->response->setBody($output);\n\t\t}\n\n\t\treturn $this->response;\n\t}", "code_tokens": ["public", "function", "send", "(", "string", "$", "method", ",", "string", "$", "url", ")", "{", "// Reset our curl options so we're on a fresh slate.", "$", "curl_options", "=", "[", "]", ";", "if", "(", "!", "empty", "(", "$", "this", "->", "config", "[", "'query'", "]", ")", "&&", "is_array", "(", "$", "this", "->", "config", "[", "'query'", "]", ")", ")", "{", "// This is likely too naive a solution.", "// Should look into handling when $url already", "// has query vars on it.", "$", "url", ".=", "'?'", ".", "http_build_query", "(", "$", "this", "->", "config", "[", "'query'", "]", ")", ";", "unset", "(", "$", "this", "->", "config", "[", "'query'", "]", ")", ";", "}", "$", "curl_options", "[", "CURLOPT_URL", "]", "=", "$", "url", ";", "$", "curl_options", "[", "CURLOPT_RETURNTRANSFER", "]", "=", "true", ";", "$", "curl_options", "[", "CURLOPT_HEADER", "]", "=", "true", ";", "$", "curl_options", "[", "CURLOPT_FRESH_CONNECT", "]", "=", "true", ";", "// Disable @file uploads in post data.", "$", "curl_options", "[", "CURLOPT_SAFE_UPLOAD", "]", "=", "true", ";", "$", "curl_options", "=", "$", "this", "->", "setCURLOptions", "(", "$", "curl_options", ",", "$", "this", "->", "config", ")", ";", "$", "curl_options", "=", "$", "this", "->", "applyMethod", "(", "$", "method", ",", "$", "curl_options", ")", ";", "$", "curl_options", "=", "$", "this", "->", "applyRequestHeaders", "(", "$", "curl_options", ")", ";", "// Do we need to delay this request?", "if", "(", "$", "this", "->", "delay", ">", "0", ")", "{", "sleep", "(", "$", "this", "->", "delay", ")", ";", "}", "$", "output", "=", "$", "this", "->", "sendRequest", "(", "$", "curl_options", ")", ";", "$", "continueStr", "=", "\"HTTP/1.1 100 Continue\\x0d\\x0a\\x0d\\x0a\"", ";", "if", "(", "strpos", "(", "$", "output", ",", "$", "continueStr", ")", "===", "0", ")", "{", "$", "output", "=", "substr", "(", "$", "output", ",", "strlen", "(", "$", "continueStr", ")", ")", ";", "}", "// Split out our headers and body", "$", "break", "=", "strpos", "(", "$", "output", ",", "\"\\r\\n\\r\\n\"", ")", ";", "if", "(", "$", "break", "!==", "false", ")", "{", "// Our headers", "$", "headers", "=", "explode", "(", "\"\\n\"", ",", "substr", "(", "$", "output", ",", "0", ",", "$", "break", ")", ")", ";", "$", "this", "->", "setResponseHeaders", "(", "$", "headers", ")", ";", "// Our body", "$", "body", "=", "substr", "(", "$", "output", ",", "$", "break", "+", "4", ")", ";", "$", "this", "->", "response", "->", "setBody", "(", "$", "body", ")", ";", "}", "else", "{", "$", "this", "->", "response", "->", "setBody", "(", "$", "output", ")", ";", "}", "return", "$", "this", "->", "response", ";", "}"], "docstring": "Fires the actual cURL request.\n\n@param string $method\n@param string $url\n\n@return \\CodeIgniter\\HTTP\\ResponseInterface", "docstring_tokens": ["Fires", "the", "actual", "cURL", "request", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/HTTP/CURLRequest.php#L417-L476", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Exception/ErrorHandler.php", "func_name": "ErrorHandler.prepareException", "original_string": "protected function prepareException($exception)\n    {\n        if (! $exception instanceof Exception && ! $exception instanceof Error) {\n            $exception = new FatalThrowableError($exception);\n        } elseif ($exception instanceof Error) {\n            $trace = $exception->getTrace();\n\n            $exception = new FatalErrorException(\n                $exception->getMessage(),\n                $exception->getCode(),\n                \\E_ERROR,\n                $exception->getFile(),\n                $exception->getLine(),\n                \\count($trace),\n                \\count($trace) !== 0,\n                $trace\n            );\n        }\n\n        return $exception;\n    }", "language": "php", "code": "protected function prepareException($exception)\n    {\n        if (! $exception instanceof Exception && ! $exception instanceof Error) {\n            $exception = new FatalThrowableError($exception);\n        } elseif ($exception instanceof Error) {\n            $trace = $exception->getTrace();\n\n            $exception = new FatalErrorException(\n                $exception->getMessage(),\n                $exception->getCode(),\n                \\E_ERROR,\n                $exception->getFile(),\n                $exception->getLine(),\n                \\count($trace),\n                \\count($trace) !== 0,\n                $trace\n            );\n        }\n\n        return $exception;\n    }", "code_tokens": ["protected", "function", "prepareException", "(", "$", "exception", ")", "{", "if", "(", "!", "$", "exception", "instanceof", "Exception", "&&", "!", "$", "exception", "instanceof", "Error", ")", "{", "$", "exception", "=", "new", "FatalThrowableError", "(", "$", "exception", ")", ";", "}", "elseif", "(", "$", "exception", "instanceof", "Error", ")", "{", "$", "trace", "=", "$", "exception", "->", "getTrace", "(", ")", ";", "$", "exception", "=", "new", "FatalErrorException", "(", "$", "exception", "->", "getMessage", "(", ")", ",", "$", "exception", "->", "getCode", "(", ")", ",", "\\", "E_ERROR", ",", "$", "exception", "->", "getFile", "(", ")", ",", "$", "exception", "->", "getLine", "(", ")", ",", "\\", "count", "(", "$", "trace", ")", ",", "\\", "count", "(", "$", "trace", ")", "!==", "0", ",", "$", "trace", ")", ";", "}", "return", "$", "exception", ";", "}"], "docstring": "Prepare exception in a fatal error handler.\n\n@param \\Error|\\Exception|\\Throwable $exception\n\n@return \\Error|\\Symfony\\Component\\Debug\\FatalErrorHandler\\FatalErrorHandlerInterface|\\Throwable", "docstring_tokens": ["Prepare", "exception", "in", "a", "fatal", "error", "handler", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Exception/ErrorHandler.php#L382-L402", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/Core/Http/Serialization/JsonObjectSerializer.php", "func_name": "JsonObjectSerializer.removeNullProperties", "original_string": "private function removeNullProperties($val){\n        $filterArray = array_filter($val);\n        $returned = array();\n        foreach($filterArray as $k => $v){\n          if(is_array($v)){\n            if(FacadeHelper::isRecurrsiveArray($v)){\n              $list = array();\n              foreach($v as $kk => $vv){\n                  $list[] = array_filter($vv);\n              }\n              $returned[$k] = $list;\n            }\n          }else{\n            $returned[$k] = $v;\n          }\n        }\n        return $returned;\n    }", "language": "php", "code": "private function removeNullProperties($val){\n        $filterArray = array_filter($val);\n        $returned = array();\n        foreach($filterArray as $k => $v){\n          if(is_array($v)){\n            if(FacadeHelper::isRecurrsiveArray($v)){\n              $list = array();\n              foreach($v as $kk => $vv){\n                  $list[] = array_filter($vv);\n              }\n              $returned[$k] = $list;\n            }\n          }else{\n            $returned[$k] = $v;\n          }\n        }\n        return $returned;\n    }", "code_tokens": ["private", "function", "removeNullProperties", "(", "$", "val", ")", "{", "$", "filterArray", "=", "array_filter", "(", "$", "val", ")", ";", "$", "returned", "=", "array", "(", ")", ";", "foreach", "(", "$", "filterArray", "as", "$", "k", "=>", "$", "v", ")", "{", "if", "(", "is_array", "(", "$", "v", ")", ")", "{", "if", "(", "FacadeHelper", "::", "isRecurrsiveArray", "(", "$", "v", ")", ")", "{", "$", "list", "=", "array", "(", ")", ";", "foreach", "(", "$", "v", "as", "$", "kk", "=>", "$", "vv", ")", "{", "$", "list", "[", "]", "=", "array_filter", "(", "$", "vv", ")", ";", "}", "$", "returned", "[", "$", "k", "]", "=", "$", "list", ";", "}", "}", "else", "{", "$", "returned", "[", "$", "k", "]", "=", "$", "v", ";", "}", "}", "return", "$", "returned", ";", "}"], "docstring": "The input will always be an asscoiate array\nSo we will judge based on this two situration", "docstring_tokens": ["The", "input", "will", "always", "be", "an", "asscoiate", "array", "So", "we", "will", "judge", "based", "on", "this", "two", "situration"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/Core/Http/Serialization/JsonObjectSerializer.php#L189-L206", "partition": "test"}
{"repo": "traderinteractive/mongo-queue-php", "path": "src/AbstractQueue.php", "func_name": "AbstractQueue.verifySort", "original_string": "final private function verifySort(array $sort, string $label, array &$completeFields)\n    {\n        foreach ($sort as $key => $value) {\n            $this->throwIfTrue(!is_string($key), \"key in \\${$label} was not a string\");\n            $this->throwIfTrue(\n                $value !== 1 && $value !== -1,\n                \"value of \\${$label} is not 1 or -1 for ascending and descending\"\n            );\n\n            $completeFields[\"payload.{$key}\"] = $value;\n        }\n    }", "language": "php", "code": "final private function verifySort(array $sort, string $label, array &$completeFields)\n    {\n        foreach ($sort as $key => $value) {\n            $this->throwIfTrue(!is_string($key), \"key in \\${$label} was not a string\");\n            $this->throwIfTrue(\n                $value !== 1 && $value !== -1,\n                \"value of \\${$label} is not 1 or -1 for ascending and descending\"\n            );\n\n            $completeFields[\"payload.{$key}\"] = $value;\n        }\n    }", "code_tokens": ["final", "private", "function", "verifySort", "(", "array", "$", "sort", ",", "string", "$", "label", ",", "array", "&", "$", "completeFields", ")", "{", "foreach", "(", "$", "sort", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "this", "->", "throwIfTrue", "(", "!", "is_string", "(", "$", "key", ")", ",", "\"key in \\${$label} was not a string\"", ")", ";", "$", "this", "->", "throwIfTrue", "(", "$", "value", "!==", "1", "&&", "$", "value", "!==", "-", "1", ",", "\"value of \\${$label} is not 1 or -1 for ascending and descending\"", ")", ";", "$", "completeFields", "[", "\"payload.{$key}\"", "]", "=", "$", "value", ";", "}", "}"], "docstring": "Helper method to validate keys and values for the given sort array\n\n@param array  $sort             The proposed sort for a mongo index.\n@param string $label            The name of the variable given to the public ensureXIndex method.\n@param array  &$completedFields The final index array with payload. prefix added to fields.\n\n@return void", "docstring_tokens": ["Helper", "method", "to", "validate", "keys", "and", "values", "for", "the", "given", "sort", "array"], "sha": "08e6d6ae6e4097e911a8df6a3b03b9c338cfa37d", "url": "https://github.com/traderinteractive/mongo-queue-php/blob/08e6d6ae6e4097e911a8df6a3b03b9c338cfa37d/src/AbstractQueue.php#L385-L396", "partition": "test"}
{"repo": "graste/environaut", "path": "src/Environaut/Export/Formatter/PlainTextSettingsWriter.php", "func_name": "PlainTextSettingsWriter.format", "original_string": "public function format(IReport $report)\n    {\n        $params = $this->getParameters();\n\n        $file = $params->get('location', 'environaut-config');\n        $groups = $params->get('groups');\n        $output = $this->startOutput($file, $groups);\n\n        $embed_group_path = $params->get('embed_group_path', true);\n        $filter_settings = $params->get('filter_settings', array());\n        $template = $params->get('template', false);\n\n        if (!$template) {\n            throw new RuntimeException(\n                sprintf(\"The %s does not support a default template. Please define one.\", __CLASS__)\n            );\n        }\n\n        $template_settings = array();\n        foreach ($report->getSettingsAsArray($groups) as $setting) {\n            if ($embed_group_path === true) {\n                $setting_key = $setting['group'] . '.' . $setting['name'];\n            } else {\n                $setting_key = $setting['name'];\n            }\n            $template_settings[$setting_key] = $setting['value'];\n        }\n\n        $content = self::vksprintf($template, $template_settings);\n\n        return $this->endOutput(\n            file_put_contents($file, $content, LOCK_EX)\n        );\n    }", "language": "php", "code": "public function format(IReport $report)\n    {\n        $params = $this->getParameters();\n\n        $file = $params->get('location', 'environaut-config');\n        $groups = $params->get('groups');\n        $output = $this->startOutput($file, $groups);\n\n        $embed_group_path = $params->get('embed_group_path', true);\n        $filter_settings = $params->get('filter_settings', array());\n        $template = $params->get('template', false);\n\n        if (!$template) {\n            throw new RuntimeException(\n                sprintf(\"The %s does not support a default template. Please define one.\", __CLASS__)\n            );\n        }\n\n        $template_settings = array();\n        foreach ($report->getSettingsAsArray($groups) as $setting) {\n            if ($embed_group_path === true) {\n                $setting_key = $setting['group'] . '.' . $setting['name'];\n            } else {\n                $setting_key = $setting['name'];\n            }\n            $template_settings[$setting_key] = $setting['value'];\n        }\n\n        $content = self::vksprintf($template, $template_settings);\n\n        return $this->endOutput(\n            file_put_contents($file, $content, LOCK_EX)\n        );\n    }", "code_tokens": ["public", "function", "format", "(", "IReport", "$", "report", ")", "{", "$", "params", "=", "$", "this", "->", "getParameters", "(", ")", ";", "$", "file", "=", "$", "params", "->", "get", "(", "'location'", ",", "'environaut-config'", ")", ";", "$", "groups", "=", "$", "params", "->", "get", "(", "'groups'", ")", ";", "$", "output", "=", "$", "this", "->", "startOutput", "(", "$", "file", ",", "$", "groups", ")", ";", "$", "embed_group_path", "=", "$", "params", "->", "get", "(", "'embed_group_path'", ",", "true", ")", ";", "$", "filter_settings", "=", "$", "params", "->", "get", "(", "'filter_settings'", ",", "array", "(", ")", ")", ";", "$", "template", "=", "$", "params", "->", "get", "(", "'template'", ",", "false", ")", ";", "if", "(", "!", "$", "template", ")", "{", "throw", "new", "RuntimeException", "(", "sprintf", "(", "\"The %s does not support a default template. Please define one.\"", ",", "__CLASS__", ")", ")", ";", "}", "$", "template_settings", "=", "array", "(", ")", ";", "foreach", "(", "$", "report", "->", "getSettingsAsArray", "(", "$", "groups", ")", "as", "$", "setting", ")", "{", "if", "(", "$", "embed_group_path", "===", "true", ")", "{", "$", "setting_key", "=", "$", "setting", "[", "'group'", "]", ".", "'.'", ".", "$", "setting", "[", "'name'", "]", ";", "}", "else", "{", "$", "setting_key", "=", "$", "setting", "[", "'name'", "]", ";", "}", "$", "template_settings", "[", "$", "setting_key", "]", "=", "$", "setting", "[", "'value'", "]", ";", "}", "$", "content", "=", "self", "::", "vksprintf", "(", "$", "template", ",", "$", "template_settings", ")", ";", "return", "$", "this", "->", "endOutput", "(", "file_put_contents", "(", "$", "file", ",", "$", "content", ",", "LOCK_EX", ")", ")", ";", "}"], "docstring": "Writes all or specific groups of settings as a plain text file and\nreturns a message with some information about that.\n\n@param IReport $report report to take results (and settings) from\n\n@return string messages for CLI output", "docstring_tokens": ["Writes", "all", "or", "specific", "groups", "of", "settings", "as", "a", "plain", "text", "file", "and", "returns", "a", "message", "with", "some", "information", "about", "that", "."], "sha": "e40b498c31214fdbdd529f334f6ce5e6138bb5fb", "url": "https://github.com/graste/environaut/blob/e40b498c31214fdbdd529f334f6ce5e6138bb5fb/src/Environaut/Export/Formatter/PlainTextSettingsWriter.php#L19-L52", "partition": "test"}
{"repo": "cscfaToolDivision/collections", "path": "src/CSDT/CollectionsBundle/CollectionHelper/HelperTrait/HelperArrayCasterTrait.php", "func_name": "HelperArrayCasterTrait.arrayToCollection", "original_string": "public function arrayToCollection(array $source, $collectionClass)\n    {\n        $manager = $this->manager;\n        if ($manager instanceof ArrayCasterManagerInterface) {\n            return $manager->process($source, $collectionClass);\n        }\n        \n        throw new \\LogicException(\n            \"The manager must be set to cast array in collection\"\n        );\n    }", "language": "php", "code": "public function arrayToCollection(array $source, $collectionClass)\n    {\n        $manager = $this->manager;\n        if ($manager instanceof ArrayCasterManagerInterface) {\n            return $manager->process($source, $collectionClass);\n        }\n        \n        throw new \\LogicException(\n            \"The manager must be set to cast array in collection\"\n        );\n    }", "code_tokens": ["public", "function", "arrayToCollection", "(", "array", "$", "source", ",", "$", "collectionClass", ")", "{", "$", "manager", "=", "$", "this", "->", "manager", ";", "if", "(", "$", "manager", "instanceof", "ArrayCasterManagerInterface", ")", "{", "return", "$", "manager", "->", "process", "(", "$", "source", ",", "$", "collectionClass", ")", ";", "}", "throw", "new", "\\", "LogicException", "(", "\"The manager must be set to cast array in collection\"", ")", ";", "}"], "docstring": "Array to collection\n\nThis method inject an array into specific collection type.\n\n@param array  $source          The array source to inject\n@param string $collectionClass The collection class name\n\n@throws \\ParseError if the array cannot be cast\n@return CollectionInterface", "docstring_tokens": ["Array", "to", "collection"], "sha": "31b0b44c9de92aebbecb0fadc179f9a45aec976f", "url": "https://github.com/cscfaToolDivision/collections/blob/31b0b44c9de92aebbecb0fadc179f9a45aec976f/src/CSDT/CollectionsBundle/CollectionHelper/HelperTrait/HelperArrayCasterTrait.php#L47-L57", "partition": "test"}
{"repo": "Hanson/vbot", "path": "src/Message/Traits/Multimedia.php", "func_name": "Multimedia.download", "original_string": "public static function download($message, $callback = null)\n    {\n        if (!$callback) {\n            static::autoDownload($message['raw'], true);\n\n            return true;\n        }\n\n        if ($callback && !is_callable($callback)) {\n            throw new ArgumentException();\n        }\n\n        call_user_func_array($callback, [static::getResource($message['raw'])]);\n\n        return true;\n    }", "language": "php", "code": "public static function download($message, $callback = null)\n    {\n        if (!$callback) {\n            static::autoDownload($message['raw'], true);\n\n            return true;\n        }\n\n        if ($callback && !is_callable($callback)) {\n            throw new ArgumentException();\n        }\n\n        call_user_func_array($callback, [static::getResource($message['raw'])]);\n\n        return true;\n    }", "code_tokens": ["public", "static", "function", "download", "(", "$", "message", ",", "$", "callback", "=", "null", ")", "{", "if", "(", "!", "$", "callback", ")", "{", "static", "::", "autoDownload", "(", "$", "message", "[", "'raw'", "]", ",", "true", ")", ";", "return", "true", ";", "}", "if", "(", "$", "callback", "&&", "!", "is_callable", "(", "$", "callback", ")", ")", "{", "throw", "new", "ArgumentException", "(", ")", ";", "}", "call_user_func_array", "(", "$", "callback", ",", "[", "static", "::", "getResource", "(", "$", "message", "[", "'raw'", "]", ")", "]", ")", ";", "return", "true", ";", "}"], "docstring": "download multimedia.\n\n@param $message\n@param null $callback\n\n@throws ArgumentException\n\n@return bool", "docstring_tokens": ["download", "multimedia", "."], "sha": "6ad88348b28831c2cb18b92f52f807873da0abc7", "url": "https://github.com/Hanson/vbot/blob/6ad88348b28831c2cb18b92f52f807873da0abc7/src/Message/Traits/Multimedia.php#L24-L39", "partition": "test"}
{"repo": "activecollab/databaseobject", "path": "src/Pool.php", "func_name": "Pool.registerProducerByClass", "original_string": "public function registerProducerByClass($type, $producer_class)\n    {\n        if (class_exists($producer_class)) {\n            $producer_class_reflection = new ReflectionClass($producer_class);\n\n            if ($producer_class_reflection->implementsInterface(ProducerInterface::class)) {\n                $this->registerProducer($type, new $producer_class($this->connection, $this));\n            } else {\n                throw new InvalidArgumentException(\"Class '$producer_class' does not implement '\" . ProducerInterface::class . \"' interface\");\n            }\n        }\n    }", "language": "php", "code": "public function registerProducerByClass($type, $producer_class)\n    {\n        if (class_exists($producer_class)) {\n            $producer_class_reflection = new ReflectionClass($producer_class);\n\n            if ($producer_class_reflection->implementsInterface(ProducerInterface::class)) {\n                $this->registerProducer($type, new $producer_class($this->connection, $this));\n            } else {\n                throw new InvalidArgumentException(\"Class '$producer_class' does not implement '\" . ProducerInterface::class . \"' interface\");\n            }\n        }\n    }", "code_tokens": ["public", "function", "registerProducerByClass", "(", "$", "type", ",", "$", "producer_class", ")", "{", "if", "(", "class_exists", "(", "$", "producer_class", ")", ")", "{", "$", "producer_class_reflection", "=", "new", "ReflectionClass", "(", "$", "producer_class", ")", ";", "if", "(", "$", "producer_class_reflection", "->", "implementsInterface", "(", "ProducerInterface", "::", "class", ")", ")", "{", "$", "this", "->", "registerProducer", "(", "$", "type", ",", "new", "$", "producer_class", "(", "$", "this", "->", "connection", ",", "$", "this", ")", ")", ";", "}", "else", "{", "throw", "new", "InvalidArgumentException", "(", "\"Class '$producer_class' does not implement '\"", ".", "ProducerInterface", "::", "class", ".", "\"' interface\"", ")", ";", "}", "}", "}"], "docstring": "Register producerby providing a producer class name.\n\n@param string $type\n@param string $producer_class", "docstring_tokens": ["Register", "producerby", "providing", "a", "producer", "class", "name", "."], "sha": "93ebbc26fdcd82e8effa15fea46432dafbfa5e83", "url": "https://github.com/activecollab/databaseobject/blob/93ebbc26fdcd82e8effa15fea46432dafbfa5e83/src/Pool.php#L199-L210", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/CodeIgniter.php", "func_name": "CodeIgniter.runController", "original_string": "protected function runController($class)\n\t{\n\t\tif (method_exists($class, '_remap'))\n\t\t{\n\t\t\t$output = $class->_remap($this->method, ...$this->router->params());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$output = $class->{$this->method}(...$this->router->params());\n\t\t}\n\n\t\t$this->benchmark->stop('controller');\n\n\t\treturn $output;\n\t}", "language": "php", "code": "protected function runController($class)\n\t{\n\t\tif (method_exists($class, '_remap'))\n\t\t{\n\t\t\t$output = $class->_remap($this->method, ...$this->router->params());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$output = $class->{$this->method}(...$this->router->params());\n\t\t}\n\n\t\t$this->benchmark->stop('controller');\n\n\t\treturn $output;\n\t}", "code_tokens": ["protected", "function", "runController", "(", "$", "class", ")", "{", "if", "(", "method_exists", "(", "$", "class", ",", "'_remap'", ")", ")", "{", "$", "output", "=", "$", "class", "->", "_remap", "(", "$", "this", "->", "method", ",", "...", "$", "this", "->", "router", "->", "params", "(", ")", ")", ";", "}", "else", "{", "$", "output", "=", "$", "class", "->", "{", "$", "this", "->", "method", "}", "(", "...", "$", "this", "->", "router", "->", "params", "(", ")", ")", ";", "}", "$", "this", "->", "benchmark", "->", "stop", "(", "'controller'", ")", ";", "return", "$", "output", ";", "}"], "docstring": "Runs the controller, allowing for _remap methods to function.\n\n@param mixed $class\n\n@return mixed", "docstring_tokens": ["Runs", "the", "controller", "allowing", "for", "_remap", "methods", "to", "function", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/CodeIgniter.php#L825-L839", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/PostTypes/Events.php", "func_name": "Events.acceptOrDeny", "original_string": "public function acceptOrDeny()\n    {\n        if (!isset($_POST['postId']) || !isset($_POST['value'])) {\n            echo _e('Something went wrong!', 'event-integration');\n            die();\n        }\n\n        $postId = $_POST['postId'];\n        $value = $_POST['value'];\n\n        $post = get_post($postId);\n        if ($value == 0) {\n            $post->post_status = 'draft';\n        }\n        if ($value == 1) {\n            $post->post_status = 'publish';\n        }\n\n        $update = wp_update_post($post, true);\n        if (is_wp_error($update)) {\n            echo _e('Error', 'event-integration');\n            die();\n        }\n\n        echo $value;\n        die();\n    }", "language": "php", "code": "public function acceptOrDeny()\n    {\n        if (!isset($_POST['postId']) || !isset($_POST['value'])) {\n            echo _e('Something went wrong!', 'event-integration');\n            die();\n        }\n\n        $postId = $_POST['postId'];\n        $value = $_POST['value'];\n\n        $post = get_post($postId);\n        if ($value == 0) {\n            $post->post_status = 'draft';\n        }\n        if ($value == 1) {\n            $post->post_status = 'publish';\n        }\n\n        $update = wp_update_post($post, true);\n        if (is_wp_error($update)) {\n            echo _e('Error', 'event-integration');\n            die();\n        }\n\n        echo $value;\n        die();\n    }", "code_tokens": ["public", "function", "acceptOrDeny", "(", ")", "{", "if", "(", "!", "isset", "(", "$", "_POST", "[", "'postId'", "]", ")", "||", "!", "isset", "(", "$", "_POST", "[", "'value'", "]", ")", ")", "{", "echo", "_e", "(", "'Something went wrong!'", ",", "'event-integration'", ")", ";", "die", "(", ")", ";", "}", "$", "postId", "=", "$", "_POST", "[", "'postId'", "]", ";", "$", "value", "=", "$", "_POST", "[", "'value'", "]", ";", "$", "post", "=", "get_post", "(", "$", "postId", ")", ";", "if", "(", "$", "value", "==", "0", ")", "{", "$", "post", "->", "post_status", "=", "'draft'", ";", "}", "if", "(", "$", "value", "==", "1", ")", "{", "$", "post", "->", "post_status", "=", "'publish'", ";", "}", "$", "update", "=", "wp_update_post", "(", "$", "post", ",", "true", ")", ";", "if", "(", "is_wp_error", "(", "$", "update", ")", ")", "{", "echo", "_e", "(", "'Error'", ",", "'event-integration'", ")", ";", "die", "(", ")", ";", "}", "echo", "$", "value", ";", "die", "(", ")", ";", "}"], "docstring": "Accept or deny an event. Changes post status to draft if denied.\n@return int $value", "docstring_tokens": ["Accept", "or", "deny", "an", "event", ".", "Changes", "post", "status", "to", "draft", "if", "denied", "."], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/PostTypes/Events.php#L444-L470", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Processors/Inventory/InventoryStockProcessor.php", "func_name": "InventoryStockProcessor.show", "original_string": "public function show($itemId, $stockId)\n    {\n        $item = $this->inventory->findOrFail($itemId);\n\n        $stock = $item->stocks()->findOrFail($stockId);\n\n        $movements = $this->presenter->tableMovements($item, $stock);\n\n        return view('inventory.stocks.show', compact('item', 'stock', 'movements'));\n    }", "language": "php", "code": "public function show($itemId, $stockId)\n    {\n        $item = $this->inventory->findOrFail($itemId);\n\n        $stock = $item->stocks()->findOrFail($stockId);\n\n        $movements = $this->presenter->tableMovements($item, $stock);\n\n        return view('inventory.stocks.show', compact('item', 'stock', 'movements'));\n    }", "code_tokens": ["public", "function", "show", "(", "$", "itemId", ",", "$", "stockId", ")", "{", "$", "item", "=", "$", "this", "->", "inventory", "->", "findOrFail", "(", "$", "itemId", ")", ";", "$", "stock", "=", "$", "item", "->", "stocks", "(", ")", "->", "findOrFail", "(", "$", "stockId", ")", ";", "$", "movements", "=", "$", "this", "->", "presenter", "->", "tableMovements", "(", "$", "item", ",", "$", "stock", ")", ";", "return", "view", "(", "'inventory.stocks.show'", ",", "compact", "(", "'item'", ",", "'stock'", ",", "'movements'", ")", ")", ";", "}"], "docstring": "Displays the specified items stock.\n\n@param int|string $itemId\n@param int|string $stockId\n\n@return \\Illuminate\\View\\View", "docstring_tokens": ["Displays", "the", "specified", "items", "stock", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Processors/Inventory/InventoryStockProcessor.php#L95-L104", "partition": "test"}
{"repo": "Nekland/FeedBundle", "path": "Loader/AtomLoader.php", "func_name": "AtomLoader.setParam", "original_string": "protected function setParam(\\SimpleXMLElement $element, Feed $feed)\n    {\n        if (count($element) === 0) {\n            $feed->set($element->getName(), (string)$element);\n        } else {\n            $feed->set($element->getName(), $this->extractParam($element));\n        }\n    }", "language": "php", "code": "protected function setParam(\\SimpleXMLElement $element, Feed $feed)\n    {\n        if (count($element) === 0) {\n            $feed->set($element->getName(), (string)$element);\n        } else {\n            $feed->set($element->getName(), $this->extractParam($element));\n        }\n    }", "code_tokens": ["protected", "function", "setParam", "(", "\\", "SimpleXMLElement", "$", "element", ",", "Feed", "$", "feed", ")", "{", "if", "(", "count", "(", "$", "element", ")", "===", "0", ")", "{", "$", "feed", "->", "set", "(", "$", "element", "->", "getName", "(", ")", ",", "(", "string", ")", "$", "element", ")", ";", "}", "else", "{", "$", "feed", "->", "set", "(", "$", "element", "->", "getName", "(", ")", ",", "$", "this", "->", "extractParam", "(", "$", "element", ")", ")", ";", "}", "}"], "docstring": "Set a feed param\n\n@param \\SimpleXMLElement        $element\n@param \\Nekland\\Bundle\\FeedBundle\\Feed $feed\n@return void", "docstring_tokens": ["Set", "a", "feed", "param"], "sha": "9cce9e582b06f12849aa217b8fb326661a215760", "url": "https://github.com/Nekland/FeedBundle/blob/9cce9e582b06f12849aa217b8fb326661a215760/Loader/AtomLoader.php#L118-L125", "partition": "test"}
{"repo": "EasyCorp/EasyAdminBundle", "path": "src/Controller/AdminControllerTrait.php", "func_name": "AdminControllerTrait.createListQueryBuilder", "original_string": "protected function createListQueryBuilder($entityClass, $sortDirection, $sortField = null, $dqlFilter = null)\n    {\n        return $this->get('easyadmin.query_builder')->createListQueryBuilder($this->entity, $sortField, $sortDirection, $dqlFilter);\n    }", "language": "php", "code": "protected function createListQueryBuilder($entityClass, $sortDirection, $sortField = null, $dqlFilter = null)\n    {\n        return $this->get('easyadmin.query_builder')->createListQueryBuilder($this->entity, $sortField, $sortDirection, $dqlFilter);\n    }", "code_tokens": ["protected", "function", "createListQueryBuilder", "(", "$", "entityClass", ",", "$", "sortDirection", ",", "$", "sortField", "=", "null", ",", "$", "dqlFilter", "=", "null", ")", "{", "return", "$", "this", "->", "get", "(", "'easyadmin.query_builder'", ")", "->", "createListQueryBuilder", "(", "$", "this", "->", "entity", ",", "$", "sortField", ",", "$", "sortDirection", ",", "$", "dqlFilter", ")", ";", "}"], "docstring": "Creates Query Builder instance for all the records.\n\n@param string      $entityClass\n@param string      $sortDirection\n@param string|null $sortField\n@param string|null $dqlFilter\n\n@return QueryBuilder The Query Builder instance", "docstring_tokens": ["Creates", "Query", "Builder", "instance", "for", "all", "the", "records", "."], "sha": "2e241936000d347a9e1230d08ccfe5bb27dd357f", "url": "https://github.com/EasyCorp/EasyAdminBundle/blob/2e241936000d347a9e1230d08ccfe5bb27dd357f/src/Controller/AdminControllerTrait.php#L550-L553", "partition": "test"}
{"repo": "symbiote/silverstripe-queuedjobs", "path": "src/DataObjects/QueuedJobDescriptor.php", "func_name": "QueuedJobDescriptor.activateOnQueue", "original_string": "public function activateOnQueue()\n    {\n        // if it's an immediate job, lets cache it to disk to be picked up later\n        if ($this->JobType == QueuedJob::IMMEDIATE\n            && !Config::inst()->get(QueuedJobService::class, 'use_shutdown_function')\n        ) {\n            touch($this->getJobDir() . '/queuedjob-' . $this->ID);\n        }\n    }", "language": "php", "code": "public function activateOnQueue()\n    {\n        // if it's an immediate job, lets cache it to disk to be picked up later\n        if ($this->JobType == QueuedJob::IMMEDIATE\n            && !Config::inst()->get(QueuedJobService::class, 'use_shutdown_function')\n        ) {\n            touch($this->getJobDir() . '/queuedjob-' . $this->ID);\n        }\n    }", "code_tokens": ["public", "function", "activateOnQueue", "(", ")", "{", "// if it's an immediate job, lets cache it to disk to be picked up later", "if", "(", "$", "this", "->", "JobType", "==", "QueuedJob", "::", "IMMEDIATE", "&&", "!", "Config", "::", "inst", "(", ")", "->", "get", "(", "QueuedJobService", "::", "class", ",", "'use_shutdown_function'", ")", ")", "{", "touch", "(", "$", "this", "->", "getJobDir", "(", ")", ".", "'/queuedjob-'", ".", "$", "this", "->", "ID", ")", ";", "}", "}"], "docstring": "Called to indicate that the job is ready to be run on the queue. This is done either as the result of\ncreating the job and adding it, or when resuming.", "docstring_tokens": ["Called", "to", "indicate", "that", "the", "job", "is", "ready", "to", "be", "run", "on", "the", "queue", ".", "This", "is", "done", "either", "as", "the", "result", "of", "creating", "the", "job", "and", "adding", "it", "or", "when", "resuming", "."], "sha": "897149ebb689ab2304356048251b2f7c3db659b7", "url": "https://github.com/symbiote/silverstripe-queuedjobs/blob/897149ebb689ab2304356048251b2f7c3db659b7/src/DataObjects/QueuedJobDescriptor.php#L196-L204", "partition": "test"}
{"repo": "ingpsp/ing-php", "path": "src/Client.php", "func_name": "Client.createSofortOrder", "original_string": "public function createSofortOrder(\n        $amount,\n        $currency,\n        array $paymentMethodDetails = [],\n        $description = null,\n        $merchantOrderId = null,\n        $returnUrl = null,\n        $expirationPeriod = null,\n        $customer = null,\n        $extra = null,\n        $webhookUrl = null\n    ) {\n        return $this->postOrder(\n            Order::createWithSofort(\n                $amount,\n                $currency,\n                $paymentMethodDetails,\n                $description,\n                $merchantOrderId,\n                $returnUrl,\n                $expirationPeriod,\n                $customer,\n                $extra,\n                $webhookUrl\n            )\n        );\n    }", "language": "php", "code": "public function createSofortOrder(\n        $amount,\n        $currency,\n        array $paymentMethodDetails = [],\n        $description = null,\n        $merchantOrderId = null,\n        $returnUrl = null,\n        $expirationPeriod = null,\n        $customer = null,\n        $extra = null,\n        $webhookUrl = null\n    ) {\n        return $this->postOrder(\n            Order::createWithSofort(\n                $amount,\n                $currency,\n                $paymentMethodDetails,\n                $description,\n                $merchantOrderId,\n                $returnUrl,\n                $expirationPeriod,\n                $customer,\n                $extra,\n                $webhookUrl\n            )\n        );\n    }", "code_tokens": ["public", "function", "createSofortOrder", "(", "$", "amount", ",", "$", "currency", ",", "array", "$", "paymentMethodDetails", "=", "[", "]", ",", "$", "description", "=", "null", ",", "$", "merchantOrderId", "=", "null", ",", "$", "returnUrl", "=", "null", ",", "$", "expirationPeriod", "=", "null", ",", "$", "customer", "=", "null", ",", "$", "extra", "=", "null", ",", "$", "webhookUrl", "=", "null", ")", "{", "return", "$", "this", "->", "postOrder", "(", "Order", "::", "createWithSofort", "(", "$", "amount", ",", "$", "currency", ",", "$", "paymentMethodDetails", ",", "$", "description", ",", "$", "merchantOrderId", ",", "$", "returnUrl", ",", "$", "expirationPeriod", ",", "$", "customer", ",", "$", "extra", ",", "$", "webhookUrl", ")", ")", ";", "}"], "docstring": "Create a new SOFORT order.\n\n@param integer $amount Amount in cents.\n@param string $currency A valid currency code.\n@param array $paymentMethodDetails An array of extra payment method details.\n@param string $description A description of the order.\n@param string $merchantOrderId A merchant-defined order identifier.\n@param string $returnUrl The return URL.\n@param string $expirationPeriod The expiration period as an ISO 8601 duration\n@param array $customer Customer information.\n@param array $extra Extra information.\n\n@return Order The newly created order.", "docstring_tokens": ["Create", "a", "new", "SOFORT", "order", "."], "sha": "813f8c3573a530734b21ad0b7213cdf9273b58dc", "url": "https://github.com/ingpsp/ing-php/blob/813f8c3573a530734b21ad0b7213cdf9273b58dc/src/Client.php#L287-L313", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Console/Input/NativeInput.php", "func_name": "NativeInput.parseRequestArguments", "original_string": "protected function parseRequestArguments(): void\n    {\n        // Iterate through the request arguments\n        foreach ($this->getRequestArguments() as $argument) {\n            // Split the string on an equal sign\n            $exploded = explode('=', $argument);\n\n            $key   = $exploded[0];\n            $value = $exploded[1] ?? true;\n            $type  = 'arguments';\n\n            // If the key has double dash it is a long option\n            if (strpos($key, '--') !== false) {\n                $type = 'longOptions';\n            } // If the key has a single dash it is a short option\n            elseif (strpos($key, '-') !== false) {\n                $type = 'shortOptions';\n            }\n\n            // If the key is already set\n            if (isset($this->{$type}[$key])) {\n                // If the key isn't already an array\n                if (! \\is_array($this->{$type}[$key])) {\n                    // Make it an array with the current value\n                    $this->{$type}[$key] = [$this->{$type}[$key]];\n                }\n\n                // Add the next value to the array\n                $this->{$type}[$key][] = $value;\n\n                continue;\n            }\n\n            // Set the key value pair\n            $this->{$type}[$key] = $value;\n        }\n    }", "language": "php", "code": "protected function parseRequestArguments(): void\n    {\n        // Iterate through the request arguments\n        foreach ($this->getRequestArguments() as $argument) {\n            // Split the string on an equal sign\n            $exploded = explode('=', $argument);\n\n            $key   = $exploded[0];\n            $value = $exploded[1] ?? true;\n            $type  = 'arguments';\n\n            // If the key has double dash it is a long option\n            if (strpos($key, '--') !== false) {\n                $type = 'longOptions';\n            } // If the key has a single dash it is a short option\n            elseif (strpos($key, '-') !== false) {\n                $type = 'shortOptions';\n            }\n\n            // If the key is already set\n            if (isset($this->{$type}[$key])) {\n                // If the key isn't already an array\n                if (! \\is_array($this->{$type}[$key])) {\n                    // Make it an array with the current value\n                    $this->{$type}[$key] = [$this->{$type}[$key]];\n                }\n\n                // Add the next value to the array\n                $this->{$type}[$key][] = $value;\n\n                continue;\n            }\n\n            // Set the key value pair\n            $this->{$type}[$key] = $value;\n        }\n    }", "code_tokens": ["protected", "function", "parseRequestArguments", "(", ")", ":", "void", "{", "// Iterate through the request arguments", "foreach", "(", "$", "this", "->", "getRequestArguments", "(", ")", "as", "$", "argument", ")", "{", "// Split the string on an equal sign", "$", "exploded", "=", "explode", "(", "'='", ",", "$", "argument", ")", ";", "$", "key", "=", "$", "exploded", "[", "0", "]", ";", "$", "value", "=", "$", "exploded", "[", "1", "]", "??", "true", ";", "$", "type", "=", "'arguments'", ";", "// If the key has double dash it is a long option", "if", "(", "strpos", "(", "$", "key", ",", "'--'", ")", "!==", "false", ")", "{", "$", "type", "=", "'longOptions'", ";", "}", "// If the key has a single dash it is a short option", "elseif", "(", "strpos", "(", "$", "key", ",", "'-'", ")", "!==", "false", ")", "{", "$", "type", "=", "'shortOptions'", ";", "}", "// If the key is already set", "if", "(", "isset", "(", "$", "this", "->", "{", "$", "type", "}", "[", "$", "key", "]", ")", ")", "{", "// If the key isn't already an array", "if", "(", "!", "\\", "is_array", "(", "$", "this", "->", "{", "$", "type", "}", "[", "$", "key", "]", ")", ")", "{", "// Make it an array with the current value", "$", "this", "->", "{", "$", "type", "}", "[", "$", "key", "]", "=", "[", "$", "this", "->", "{", "$", "type", "}", "[", "$", "key", "]", "]", ";", "}", "// Add the next value to the array", "$", "this", "->", "{", "$", "type", "}", "[", "$", "key", "]", "[", "]", "=", "$", "value", ";", "continue", ";", "}", "// Set the key value pair", "$", "this", "->", "{", "$", "type", "}", "[", "$", "key", "]", "=", "$", "value", ";", "}", "}"], "docstring": "Parse request arguments to split by options and arguments.\n\n@return void", "docstring_tokens": ["Parse", "request", "arguments", "to", "split", "by", "options", "and", "arguments", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Console/Input/NativeInput.php#L157-L193", "partition": "test"}
{"repo": "xloit/xloit-bridge-doctrine-orm", "path": "src/EntityQueryBuilder.php", "func_name": "EntityQueryBuilder.parseCallMethods", "original_string": "protected function parseCallMethods($method, array $lists, array $arguments, $prefix = true)\n    {\n        $condition  = null;\n        $fieldName  = null;\n        $methodName = null;\n\n        foreach ($lists as $name => $requireArgs) {\n            if (strpos($method, 'and') === 0) {\n                $method    = lcfirst(substr($method, 3));\n                $condition = 'and';\n            } elseif (strpos($method, 'or') === 0) {\n                $method    = lcfirst(substr($method, 2));\n                $condition = 'or';\n            }\n\n            if (strlen($method) < strlen($name)) {\n                continue;\n            }\n\n            $position = false;\n\n            if ($prefix && strpos($method, $name) === 0) {\n                $position = 0;\n            } elseif (!$prefix) {\n                $position = strpos($method, $name, strlen($name));\n            }\n\n            if ($position !== false) {\n                /** @noinspection IsEmptyFunctionUsageInspection */\n                if ($requireArgs && empty($arguments)) {\n                    throw ORMException::findByRequiresParameter(sprintf('%s::%s', static::class, $method));\n                }\n\n                if ($prefix) {\n                    $fieldName  = substr($method, strlen($name));\n                    $methodName = $name;\n                } elseif (!$prefix) {\n                    $fieldName  = substr($method, 0, $position);\n                    $methodName = $name;\n                }\n                break;\n            }\n        }\n\n        if ($fieldName && $methodName) {\n            $fieldName     = lcfirst(Inflector::classify($fieldName));\n            $className     = $this->getEntityClassName();\n            $classMetadata = $this->getEntityManager()->getClassMetadata($className);\n\n            if (!$classMetadata->hasField($fieldName) && !$classMetadata->hasAssociation($fieldName)) {\n                throw ORMException::invalidFindByCall($className, $fieldName, $method);\n            }\n        }\n\n        return [\n            'condition'  => $condition,\n            'fieldName'  => $fieldName,\n            'methodName' => $methodName\n        ];\n    }", "language": "php", "code": "protected function parseCallMethods($method, array $lists, array $arguments, $prefix = true)\n    {\n        $condition  = null;\n        $fieldName  = null;\n        $methodName = null;\n\n        foreach ($lists as $name => $requireArgs) {\n            if (strpos($method, 'and') === 0) {\n                $method    = lcfirst(substr($method, 3));\n                $condition = 'and';\n            } elseif (strpos($method, 'or') === 0) {\n                $method    = lcfirst(substr($method, 2));\n                $condition = 'or';\n            }\n\n            if (strlen($method) < strlen($name)) {\n                continue;\n            }\n\n            $position = false;\n\n            if ($prefix && strpos($method, $name) === 0) {\n                $position = 0;\n            } elseif (!$prefix) {\n                $position = strpos($method, $name, strlen($name));\n            }\n\n            if ($position !== false) {\n                /** @noinspection IsEmptyFunctionUsageInspection */\n                if ($requireArgs && empty($arguments)) {\n                    throw ORMException::findByRequiresParameter(sprintf('%s::%s', static::class, $method));\n                }\n\n                if ($prefix) {\n                    $fieldName  = substr($method, strlen($name));\n                    $methodName = $name;\n                } elseif (!$prefix) {\n                    $fieldName  = substr($method, 0, $position);\n                    $methodName = $name;\n                }\n                break;\n            }\n        }\n\n        if ($fieldName && $methodName) {\n            $fieldName     = lcfirst(Inflector::classify($fieldName));\n            $className     = $this->getEntityClassName();\n            $classMetadata = $this->getEntityManager()->getClassMetadata($className);\n\n            if (!$classMetadata->hasField($fieldName) && !$classMetadata->hasAssociation($fieldName)) {\n                throw ORMException::invalidFindByCall($className, $fieldName, $method);\n            }\n        }\n\n        return [\n            'condition'  => $condition,\n            'fieldName'  => $fieldName,\n            'methodName' => $methodName\n        ];\n    }", "code_tokens": ["protected", "function", "parseCallMethods", "(", "$", "method", ",", "array", "$", "lists", ",", "array", "$", "arguments", ",", "$", "prefix", "=", "true", ")", "{", "$", "condition", "=", "null", ";", "$", "fieldName", "=", "null", ";", "$", "methodName", "=", "null", ";", "foreach", "(", "$", "lists", "as", "$", "name", "=>", "$", "requireArgs", ")", "{", "if", "(", "strpos", "(", "$", "method", ",", "'and'", ")", "===", "0", ")", "{", "$", "method", "=", "lcfirst", "(", "substr", "(", "$", "method", ",", "3", ")", ")", ";", "$", "condition", "=", "'and'", ";", "}", "elseif", "(", "strpos", "(", "$", "method", ",", "'or'", ")", "===", "0", ")", "{", "$", "method", "=", "lcfirst", "(", "substr", "(", "$", "method", ",", "2", ")", ")", ";", "$", "condition", "=", "'or'", ";", "}", "if", "(", "strlen", "(", "$", "method", ")", "<", "strlen", "(", "$", "name", ")", ")", "{", "continue", ";", "}", "$", "position", "=", "false", ";", "if", "(", "$", "prefix", "&&", "strpos", "(", "$", "method", ",", "$", "name", ")", "===", "0", ")", "{", "$", "position", "=", "0", ";", "}", "elseif", "(", "!", "$", "prefix", ")", "{", "$", "position", "=", "strpos", "(", "$", "method", ",", "$", "name", ",", "strlen", "(", "$", "name", ")", ")", ";", "}", "if", "(", "$", "position", "!==", "false", ")", "{", "/** @noinspection IsEmptyFunctionUsageInspection */", "if", "(", "$", "requireArgs", "&&", "empty", "(", "$", "arguments", ")", ")", "{", "throw", "ORMException", "::", "findByRequiresParameter", "(", "sprintf", "(", "'%s::%s'", ",", "static", "::", "class", ",", "$", "method", ")", ")", ";", "}", "if", "(", "$", "prefix", ")", "{", "$", "fieldName", "=", "substr", "(", "$", "method", ",", "strlen", "(", "$", "name", ")", ")", ";", "$", "methodName", "=", "$", "name", ";", "}", "elseif", "(", "!", "$", "prefix", ")", "{", "$", "fieldName", "=", "substr", "(", "$", "method", ",", "0", ",", "$", "position", ")", ";", "$", "methodName", "=", "$", "name", ";", "}", "break", ";", "}", "}", "if", "(", "$", "fieldName", "&&", "$", "methodName", ")", "{", "$", "fieldName", "=", "lcfirst", "(", "Inflector", "::", "classify", "(", "$", "fieldName", ")", ")", ";", "$", "className", "=", "$", "this", "->", "getEntityClassName", "(", ")", ";", "$", "classMetadata", "=", "$", "this", "->", "getEntityManager", "(", ")", "->", "getClassMetadata", "(", "$", "className", ")", ";", "if", "(", "!", "$", "classMetadata", "->", "hasField", "(", "$", "fieldName", ")", "&&", "!", "$", "classMetadata", "->", "hasAssociation", "(", "$", "fieldName", ")", ")", "{", "throw", "ORMException", "::", "invalidFindByCall", "(", "$", "className", ",", "$", "fieldName", ",", "$", "method", ")", ";", "}", "}", "return", "[", "'condition'", "=>", "$", "condition", ",", "'fieldName'", "=>", "$", "fieldName", ",", "'methodName'", "=>", "$", "methodName", "]", ";", "}"], "docstring": "A parseCallMethods function.\n\n@param string $method\n@param array  $lists\n@param array  $arguments\n@param bool   $prefix\n\n@return array\n@throws \\Doctrine\\ORM\\ORMException", "docstring_tokens": ["A", "parseCallMethods", "function", "."], "sha": "7bcb35b2c0728e43f626ff62a573861315b0ed3f", "url": "https://github.com/xloit/xloit-bridge-doctrine-orm/blob/7bcb35b2c0728e43f626ff62a573861315b0ed3f/src/EntityQueryBuilder.php#L945-L1004", "partition": "test"}
{"repo": "contao-community-alliance/dc-general-contao-frontend", "path": "src/View/WidgetManager.php", "func_name": "WidgetManager.hijackPost", "original_string": "private function hijackPost(PropertyValueBag $valueBag)\n    {\n        $post  = $_POST;\n        $_POST = [];\n        Input::resetCache();\n\n        // Set all POST data, these get used within the Widget::validate() method.\n        foreach ($valueBag as $property => $value) {\n            $_POST[$property] = $value;\n        }\n\n        return $post;\n    }", "language": "php", "code": "private function hijackPost(PropertyValueBag $valueBag)\n    {\n        $post  = $_POST;\n        $_POST = [];\n        Input::resetCache();\n\n        // Set all POST data, these get used within the Widget::validate() method.\n        foreach ($valueBag as $property => $value) {\n            $_POST[$property] = $value;\n        }\n\n        return $post;\n    }", "code_tokens": ["private", "function", "hijackPost", "(", "PropertyValueBag", "$", "valueBag", ")", "{", "$", "post", "=", "$", "_POST", ";", "$", "_POST", "=", "[", "]", ";", "Input", "::", "resetCache", "(", ")", ";", "// Set all POST data, these get used within the Widget::validate() method.", "foreach", "(", "$", "valueBag", "as", "$", "property", "=>", "$", "value", ")", "{", "$", "_POST", "[", "$", "property", "]", "=", "$", "value", ";", "}", "return", "$", "post", ";", "}"], "docstring": "Remember current POST data and overwrite it with the values from the value bag.\n\nThe previous values are returned and can be restored via a call to restorePost().\n\n@param PropertyValueBag $valueBag The value bag to retrieve the new post data from.\n\n@return array\n\n@SuppressWarnings(PHPMD.Superglobals)\n@SuppressWarnings(PHPMD.CamelCaseVariableName)", "docstring_tokens": ["Remember", "current", "POST", "data", "and", "overwrite", "it", "with", "the", "values", "from", "the", "value", "bag", "."], "sha": "0a5c293f90fae42732ce1795f2ccfa26a76effce", "url": "https://github.com/contao-community-alliance/dc-general-contao-frontend/blob/0a5c293f90fae42732ce1795f2ccfa26a76effce/src/View/WidgetManager.php#L229-L241", "partition": "test"}
{"repo": "maniaplanet/manialive-plugins", "path": "Standard/TeamSpeak/TeamSpeak3/Node/Server.php", "func_name": "Server.iconUpload", "original_string": "public function iconUpload($data)\r\n  {\r\n    $crc = crc32($data);\r\n    $size = strlen($data);\r\n\r\n    $upload = $this->transferInitUpload(rand(0x0000, 0xFFFF), 0, \"/icon_\" . $crc, $size);\r\n    $transfer = \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\TeamSpeak3::factory(\"filetransfer://\" . $upload[\"host\"] . \":\" . $upload[\"port\"]);\r\n\r\n    $transfer->upload($upload[\"ftkey\"], $upload[\"seekpos\"], $data);\r\n\r\n    return $crc;\r\n  }", "language": "php", "code": "public function iconUpload($data)\r\n  {\r\n    $crc = crc32($data);\r\n    $size = strlen($data);\r\n\r\n    $upload = $this->transferInitUpload(rand(0x0000, 0xFFFF), 0, \"/icon_\" . $crc, $size);\r\n    $transfer = \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\TeamSpeak3::factory(\"filetransfer://\" . $upload[\"host\"] . \":\" . $upload[\"port\"]);\r\n\r\n    $transfer->upload($upload[\"ftkey\"], $upload[\"seekpos\"], $data);\r\n\r\n    return $crc;\r\n  }", "code_tokens": ["public", "function", "iconUpload", "(", "$", "data", ")", "{", "$", "crc", "=", "crc32", "(", "$", "data", ")", ";", "$", "size", "=", "strlen", "(", "$", "data", ")", ";", "$", "upload", "=", "$", "this", "->", "transferInitUpload", "(", "rand", "(", "0x0000", ",", "0xFFFF", ")", ",", "0", ",", "\"/icon_\"", ".", "$", "crc", ",", "$", "size", ")", ";", "$", "transfer", "=", "\\", "ManiaLivePlugins", "\\", "Standard", "\\", "TeamSpeak", "\\", "TeamSpeak3", "\\", "TeamSpeak3", "::", "factory", "(", "\"filetransfer://\"", ".", "$", "upload", "[", "\"host\"", "]", ".", "\":\"", ".", "$", "upload", "[", "\"port\"", "]", ")", ";", "$", "transfer", "->", "upload", "(", "$", "upload", "[", "\"ftkey\"", "]", ",", "$", "upload", "[", "\"seekpos\"", "]", ",", "$", "data", ")", ";", "return", "$", "crc", ";", "}"], "docstring": "Uploads a given icon file content to the server and returns the ID of the icon.\n\n@param  string $data\n@return integer", "docstring_tokens": ["Uploads", "a", "given", "icon", "file", "content", "to", "the", "server", "and", "returns", "the", "ID", "of", "the", "icon", "."], "sha": "f3f37da6836fe3d06fed32e75880caa6e9c0496b", "url": "https://github.com/maniaplanet/manialive-plugins/blob/f3f37da6836fe3d06fed32e75880caa6e9c0496b/Standard/TeamSpeak/TeamSpeak3/Node/Server.php#L1607-L1618", "partition": "test"}
{"repo": "graste/environaut", "path": "src/Environaut/Checks/Check.php", "func_name": "Check.addCachableSetting", "original_string": "protected function addCachableSetting($name, $value, $group = null, $flag = ISetting::NORMAL)\n    {\n        $this->addSetting($name, $value, $group, $flag, true);\n\n        return $this;\n    }", "language": "php", "code": "protected function addCachableSetting($name, $value, $group = null, $flag = ISetting::NORMAL)\n    {\n        $this->addSetting($name, $value, $group, $flag, true);\n\n        return $this;\n    }", "code_tokens": ["protected", "function", "addCachableSetting", "(", "$", "name", ",", "$", "value", ",", "$", "group", "=", "null", ",", "$", "flag", "=", "ISetting", "::", "NORMAL", ")", "{", "$", "this", "->", "addSetting", "(", "$", "name", ",", "$", "value", ",", "$", "group", ",", "$", "flag", ",", "true", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Adds the given value under the given key to the settings\nof the result. The setting may have a group name to more\neasily separate them on export. If no group name is specified\nthe check's default setting group name is used as the default.\nThis setting may be written to a cache to be available on re-runs\nof the check.\n\n@param string $name key for that setting\n@param mixed $value usually a string value\n@param string $group name of group this setting belongs to\n@param int $flag type of the setting (ISetting::NORMAL by default)\n\n@return Check this instance for fluent API support\n\n@throws \\InvalidArgumentException if no valid setting key was given", "docstring_tokens": ["Adds", "the", "given", "value", "under", "the", "given", "key", "to", "the", "settings", "of", "the", "result", ".", "The", "setting", "may", "have", "a", "group", "name", "to", "more", "easily", "separate", "them", "on", "export", ".", "If", "no", "group", "name", "is", "specified", "the", "check", "s", "default", "setting", "group", "name", "is", "used", "as", "the", "default", ".", "This", "setting", "may", "be", "written", "to", "a", "cache", "to", "be", "available", "on", "re", "-", "runs", "of", "the", "check", "."], "sha": "e40b498c31214fdbdd529f334f6ce5e6138bb5fb", "url": "https://github.com/graste/environaut/blob/e40b498c31214fdbdd529f334f6ce5e6138bb5fb/src/Environaut/Checks/Check.php#L252-L257", "partition": "test"}
{"repo": "YOURLS/YOURLS", "path": "includes/Database/YDB.php", "func_name": "YDB.dead_or_error", "original_string": "public function dead_or_error(\\Exception $exception) {\n        // Use any /user/db_error.php file\n        if( file_exists( YOURLS_USERDIR . '/db_error.php' ) ) {\n            include_once( YOURLS_USERDIR . '/db_error.php' );\n            die();\n        }\n\n        $message  = yourls__( 'Incorrect DB config, or could not connect to DB' );\n        $message .= '<br/>' . get_class($exception) .': ' . $exception->getMessage();\n\n        yourls_die( yourls__( $message ), yourls__( 'Fatal error' ), 503 );\n        die();\n    }", "language": "php", "code": "public function dead_or_error(\\Exception $exception) {\n        // Use any /user/db_error.php file\n        if( file_exists( YOURLS_USERDIR . '/db_error.php' ) ) {\n            include_once( YOURLS_USERDIR . '/db_error.php' );\n            die();\n        }\n\n        $message  = yourls__( 'Incorrect DB config, or could not connect to DB' );\n        $message .= '<br/>' . get_class($exception) .': ' . $exception->getMessage();\n\n        yourls_die( yourls__( $message ), yourls__( 'Fatal error' ), 503 );\n        die();\n    }", "code_tokens": ["public", "function", "dead_or_error", "(", "\\", "Exception", "$", "exception", ")", "{", "// Use any /user/db_error.php file", "if", "(", "file_exists", "(", "YOURLS_USERDIR", ".", "'/db_error.php'", ")", ")", "{", "include_once", "(", "YOURLS_USERDIR", ".", "'/db_error.php'", ")", ";", "die", "(", ")", ";", "}", "$", "message", "=", "yourls__", "(", "'Incorrect DB config, or could not connect to DB'", ")", ";", "$", "message", ".=", "'<br/>'", ".", "get_class", "(", "$", "exception", ")", ".", "': '", ".", "$", "exception", "->", "getMessage", "(", ")", ";", "yourls_die", "(", "yourls__", "(", "$", "message", ")", ",", "yourls__", "(", "'Fatal error'", ")", ",", "503", ")", ";", "die", "(", ")", ";", "}"], "docstring": "Die with an error message\n\n@since  1.7.3\n\n@param \\Exception $exception\n\n@return void", "docstring_tokens": ["Die", "with", "an", "error", "message"], "sha": "c2b2863f416726039be715a67c245f170be12324", "url": "https://github.com/YOURLS/YOURLS/blob/c2b2863f416726039be715a67c245f170be12324/includes/Database/YDB.php#L157-L169", "partition": "test"}
{"repo": "graste/environaut", "path": "src/Environaut/Config/Reader/Dom/DomDocument.php", "func_name": "DomDocument.refreshXpath", "original_string": "protected function refreshXpath()\n    {\n        unset($this->xpath);\n\n        $this->xpath = new \\DOMXPath($this);\n\n        if ($this->isEnvironautDocument()) {\n            $this->setDefaultNamespace(self::NAMESPACE_PREFIX, self::NAMESPACE_ENVIRONAUT_1_0);\n        }\n    }", "language": "php", "code": "protected function refreshXpath()\n    {\n        unset($this->xpath);\n\n        $this->xpath = new \\DOMXPath($this);\n\n        if ($this->isEnvironautDocument()) {\n            $this->setDefaultNamespace(self::NAMESPACE_PREFIX, self::NAMESPACE_ENVIRONAUT_1_0);\n        }\n    }", "code_tokens": ["protected", "function", "refreshXpath", "(", ")", "{", "unset", "(", "$", "this", "->", "xpath", ")", ";", "$", "this", "->", "xpath", "=", "new", "\\", "DOMXPath", "(", "$", "this", ")", ";", "if", "(", "$", "this", "->", "isEnvironautDocument", "(", ")", ")", "{", "$", "this", "->", "setDefaultNamespace", "(", "self", "::", "NAMESPACE_PREFIX", ",", "self", "::", "NAMESPACE_ENVIRONAUT_1_0", ")", ";", "}", "}"], "docstring": "Re-instantiates the internal xpath instance and then\nregisters the Environaut config namespace if necessary.", "docstring_tokens": ["Re", "-", "instantiates", "the", "internal", "xpath", "instance", "and", "then", "registers", "the", "Environaut", "config", "namespace", "if", "necessary", "."], "sha": "e40b498c31214fdbdd529f334f6ce5e6138bb5fb", "url": "https://github.com/graste/environaut/blob/e40b498c31214fdbdd529f334f6ce5e6138bb5fb/src/Environaut/Config/Reader/Dom/DomDocument.php#L342-L351", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Session/Handler/PdoSessionHandler.php", "func_name": "PdoSessionHandler.getConnection", "original_string": "private function getConnection(): PDO\n    {\n        if ($this->pdo === null) {\n            $this->connect($this->dsn);\n        }\n\n        return $this->pdo;\n    }", "language": "php", "code": "private function getConnection(): PDO\n    {\n        if ($this->pdo === null) {\n            $this->connect($this->dsn);\n        }\n\n        return $this->pdo;\n    }", "code_tokens": ["private", "function", "getConnection", "(", ")", ":", "PDO", "{", "if", "(", "$", "this", "->", "pdo", "===", "null", ")", "{", "$", "this", "->", "connect", "(", "$", "this", "->", "dsn", ")", ";", "}", "return", "$", "this", "->", "pdo", ";", "}"], "docstring": "Return a PDO instance.\n\n@return \\PDO", "docstring_tokens": ["Return", "a", "PDO", "instance", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Session/Handler/PdoSessionHandler.php#L554-L561", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/Core/ServiceContext.php", "func_name": "ServiceContext.disableLog", "original_string": "public function disableLog()\n    {\n        try {\n            $_ippConfigInstance = $this->getIppConfig();\n            LocalConfigReader::setupLogger($_ippConfigInstance, CoreConstants::DEFAULT_LOGGINGLOCATION, \"FALSE\");\n        } catch (\\Exception $e) {\n            throw new \\Exception(\"Error in disable Log.\");\n        }\n    }", "language": "php", "code": "public function disableLog()\n    {\n        try {\n            $_ippConfigInstance = $this->getIppConfig();\n            LocalConfigReader::setupLogger($_ippConfigInstance, CoreConstants::DEFAULT_LOGGINGLOCATION, \"FALSE\");\n        } catch (\\Exception $e) {\n            throw new \\Exception(\"Error in disable Log.\");\n        }\n    }", "code_tokens": ["public", "function", "disableLog", "(", ")", "{", "try", "{", "$", "_ippConfigInstance", "=", "$", "this", "->", "getIppConfig", "(", ")", ";", "LocalConfigReader", "::", "setupLogger", "(", "$", "_ippConfigInstance", ",", "CoreConstants", "::", "DEFAULT_LOGGINGLOCATION", ",", "\"FALSE\"", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "throw", "new", "\\", "Exception", "(", "\"Error in disable Log.\"", ")", ";", "}", "}"], "docstring": "Disable Log the request and response to disk", "docstring_tokens": ["Disable", "Log", "the", "request", "and", "response", "to", "disk"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/Core/ServiceContext.php#L293-L301", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Model.php", "func_name": "Model.fire_model_event", "original_string": "protected function fire_model_event( $event, $arguments = array() ) {\n\n\t\tif ( ! static::$_event_dispatcher ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$event = static::table()->get_slug() . \".$event\";\n\n\t\tstatic::$_event_dispatcher->dispatch( $event, new GenericEvent( $this, $arguments ) );\n\t}", "language": "php", "code": "protected function fire_model_event( $event, $arguments = array() ) {\n\n\t\tif ( ! static::$_event_dispatcher ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$event = static::table()->get_slug() . \".$event\";\n\n\t\tstatic::$_event_dispatcher->dispatch( $event, new GenericEvent( $this, $arguments ) );\n\t}", "code_tokens": ["protected", "function", "fire_model_event", "(", "$", "event", ",", "$", "arguments", "=", "array", "(", ")", ")", "{", "if", "(", "!", "static", "::", "$", "_event_dispatcher", ")", "{", "return", ";", "}", "$", "event", "=", "static", "::", "table", "(", ")", "->", "get_slug", "(", ")", ".", "\".$event\"", ";", "static", "::", "$", "_event_dispatcher", "->", "dispatch", "(", "$", "event", ",", "new", "GenericEvent", "(", "$", "this", ",", "$", "arguments", ")", ")", ";", "}"], "docstring": "Fire a model event.\n\nWill bail early if no event dispatcher is available.\n\n@since 2.0\n\n@param string $event     Event name.\n@param array  $arguments Additional arguments passed to the GenericEvent object.", "docstring_tokens": ["Fire", "a", "model", "event", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Model.php#L1370-L1379", "partition": "test"}
{"repo": "didww/php-sdk", "path": "src/Didww/API2/DIDNumber.php", "func_name": "DIDNumber.changeAutorenew", "original_string": "function changeAutorenew($flag)\n    {\n        $this->call('order_autorenew_status', array(\n            \"customer_id\" => $this->_order->getCustomerId(),\n            \"did_number\" => $this->getDIDNumber(),\n            \"status\" => (int)$flag\n        ));\n        $this->_order->setAutorenewEnable($flag);\n    }", "language": "php", "code": "function changeAutorenew($flag)\n    {\n        $this->call('order_autorenew_status', array(\n            \"customer_id\" => $this->_order->getCustomerId(),\n            \"did_number\" => $this->getDIDNumber(),\n            \"status\" => (int)$flag\n        ));\n        $this->_order->setAutorenewEnable($flag);\n    }", "code_tokens": ["function", "changeAutorenew", "(", "$", "flag", ")", "{", "$", "this", "->", "call", "(", "'order_autorenew_status'", ",", "array", "(", "\"customer_id\"", "=>", "$", "this", "->", "_order", "->", "getCustomerId", "(", ")", ",", "\"did_number\"", "=>", "$", "this", "->", "getDIDNumber", "(", ")", ",", "\"status\"", "=>", "(", "int", ")", "$", "flag", ")", ")", ";", "$", "this", "->", "_order", "->", "setAutorenewEnable", "(", "$", "flag", ")", ";", "}"], "docstring": "change API2 order autorenew enable\n@param bool $flag", "docstring_tokens": ["change", "API2", "order", "autorenew", "enable"], "sha": "ee406862bceeb67bc6796f52f2bd60e103cd8de3", "url": "https://github.com/didww/php-sdk/blob/ee406862bceeb67bc6796f52f2bd60e103cd8de3/src/Didww/API2/DIDNumber.php#L444-L452", "partition": "test"}
{"repo": "schmittjoh/php-collection", "path": "src/PhpCollection/AbstractSequence.php", "func_name": "AbstractSequence.remove", "original_string": "public function remove($index)\n    {\n        if ( ! isset($this->elements[$index])) {\n            throw new OutOfBoundsException(sprintf('The index \"%d\" is not in the interval [0, %d).', $index, count($this->elements)));\n        }\n\n        $element = $this->elements[$index];\n        unset($this->elements[$index]);\n        $this->elements = array_values($this->elements);\n\n        return $element;\n    }", "language": "php", "code": "public function remove($index)\n    {\n        if ( ! isset($this->elements[$index])) {\n            throw new OutOfBoundsException(sprintf('The index \"%d\" is not in the interval [0, %d).', $index, count($this->elements)));\n        }\n\n        $element = $this->elements[$index];\n        unset($this->elements[$index]);\n        $this->elements = array_values($this->elements);\n\n        return $element;\n    }", "code_tokens": ["public", "function", "remove", "(", "$", "index", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "elements", "[", "$", "index", "]", ")", ")", "{", "throw", "new", "OutOfBoundsException", "(", "sprintf", "(", "'The index \"%d\" is not in the interval [0, %d).'", ",", "$", "index", ",", "count", "(", "$", "this", "->", "elements", ")", ")", ")", ";", "}", "$", "element", "=", "$", "this", "->", "elements", "[", "$", "index", "]", ";", "unset", "(", "$", "this", "->", "elements", "[", "$", "index", "]", ")", ";", "$", "this", "->", "elements", "=", "array_values", "(", "$", "this", "->", "elements", ")", ";", "return", "$", "element", ";", "}"], "docstring": "Removes the element at the given index, and returns it.\n\n@param int $index\n\n@return T\n\n@throws \\OutOfBoundsException If there is no element at the given index.", "docstring_tokens": ["Removes", "the", "element", "at", "the", "given", "index", "and", "returns", "it", "."], "sha": "f2bcff45c0da7c27991bbc1f90f47c4b7fb434a6", "url": "https://github.com/schmittjoh/php-collection/blob/f2bcff45c0da7c27991bbc1f90f47c4b7fb434a6/src/PhpCollection/AbstractSequence.php#L230-L241", "partition": "test"}
{"repo": "FACT-Finder/FACT-Finder-PHP-Library", "path": "src/FACTFinder/Core/Server/ConnectionData.php", "func_name": "ConnectionData.setResponse", "original_string": "public function setResponse(Response $response, $url)\n    {\n        $this->response = $response;\n        $this->previousUrl = $url;\n    }", "language": "php", "code": "public function setResponse(Response $response, $url)\n    {\n        $this->response = $response;\n        $this->previousUrl = $url;\n    }", "code_tokens": ["public", "function", "setResponse", "(", "Response", "$", "response", ",", "$", "url", ")", "{", "$", "this", "->", "response", "=", "$", "response", ";", "$", "this", "->", "previousUrl", "=", "$", "url", ";", "}"], "docstring": "Set a response for the current connection settings along with the URL\nwhich was used to obtain the response.\n@param Response $response\n@param string $url The URL corresponding to $response.", "docstring_tokens": ["Set", "a", "response", "for", "the", "current", "connection", "settings", "along", "with", "the", "URL", "which", "was", "used", "to", "obtain", "the", "response", "."], "sha": "5c795b94117fa7ac40f5e80d4edc93999a76fc90", "url": "https://github.com/FACT-Finder/FACT-Finder-PHP-Library/blob/5c795b94117fa7ac40f5e80d4edc93999a76fc90/src/FACTFinder/Core/Server/ConnectionData.php#L167-L171", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/ThirdParty/ZendEscaper/Escaper.php", "func_name": "Escaper.jsMatcher", "original_string": "protected function jsMatcher($matches)\n    {\n        $chr = $matches[0];\n        if (strlen($chr) == 1) {\n            return sprintf('\\\\x%02X', ord($chr));\n        }\n        $chr = $this->convertEncoding($chr, 'UTF-16BE', 'UTF-8');\n        $hex = strtoupper(bin2hex($chr));\n        if (strlen($hex) <= 4) {\n            return sprintf('\\\\u%04s', $hex);\n        }\n        $highSurrogate = substr($hex, 0, 4);\n        $lowSurrogate = substr($hex, 4, 4);\n        return sprintf('\\\\u%04s\\\\u%04s', $highSurrogate, $lowSurrogate);\n    }", "language": "php", "code": "protected function jsMatcher($matches)\n    {\n        $chr = $matches[0];\n        if (strlen($chr) == 1) {\n            return sprintf('\\\\x%02X', ord($chr));\n        }\n        $chr = $this->convertEncoding($chr, 'UTF-16BE', 'UTF-8');\n        $hex = strtoupper(bin2hex($chr));\n        if (strlen($hex) <= 4) {\n            return sprintf('\\\\u%04s', $hex);\n        }\n        $highSurrogate = substr($hex, 0, 4);\n        $lowSurrogate = substr($hex, 4, 4);\n        return sprintf('\\\\u%04s\\\\u%04s', $highSurrogate, $lowSurrogate);\n    }", "code_tokens": ["protected", "function", "jsMatcher", "(", "$", "matches", ")", "{", "$", "chr", "=", "$", "matches", "[", "0", "]", ";", "if", "(", "strlen", "(", "$", "chr", ")", "==", "1", ")", "{", "return", "sprintf", "(", "'\\\\x%02X'", ",", "ord", "(", "$", "chr", ")", ")", ";", "}", "$", "chr", "=", "$", "this", "->", "convertEncoding", "(", "$", "chr", ",", "'UTF-16BE'", ",", "'UTF-8'", ")", ";", "$", "hex", "=", "strtoupper", "(", "bin2hex", "(", "$", "chr", ")", ")", ";", "if", "(", "strlen", "(", "$", "hex", ")", "<=", "4", ")", "{", "return", "sprintf", "(", "'\\\\u%04s'", ",", "$", "hex", ")", ";", "}", "$", "highSurrogate", "=", "substr", "(", "$", "hex", ",", "0", ",", "4", ")", ";", "$", "lowSurrogate", "=", "substr", "(", "$", "hex", ",", "4", ",", "4", ")", ";", "return", "sprintf", "(", "'\\\\u%04s\\\\u%04s'", ",", "$", "highSurrogate", ",", "$", "lowSurrogate", ")", ";", "}"], "docstring": "Callback function for preg_replace_callback that applies Javascript\nescaping to all matches.\n\n@param array $matches\n@return string", "docstring_tokens": ["Callback", "function", "for", "preg_replace_callback", "that", "applies", "Javascript", "escaping", "to", "all", "matches", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/ThirdParty/ZendEscaper/Escaper.php#L277-L291", "partition": "test"}
{"repo": "vainproject/vain-menu", "path": "src/Menu/Listeners/MenuComposer.php", "func_name": "MenuComposer.cacheIfConfigured", "original_string": "private function cacheIfConfigured($closure)\n    {\n        if (config('menu.cache.enable')) {\n            $key = config('menu.cache.key');\n            $minutes = config('menu.cache.minutes');\n\n            return Cache::remember($key, $minutes, function () use ($closure) {\n                return call_user_func($closure);\n            });\n        }\n\n        return call_user_func($closure);\n    }", "language": "php", "code": "private function cacheIfConfigured($closure)\n    {\n        if (config('menu.cache.enable')) {\n            $key = config('menu.cache.key');\n            $minutes = config('menu.cache.minutes');\n\n            return Cache::remember($key, $minutes, function () use ($closure) {\n                return call_user_func($closure);\n            });\n        }\n\n        return call_user_func($closure);\n    }", "code_tokens": ["private", "function", "cacheIfConfigured", "(", "$", "closure", ")", "{", "if", "(", "config", "(", "'menu.cache.enable'", ")", ")", "{", "$", "key", "=", "config", "(", "'menu.cache.key'", ")", ";", "$", "minutes", "=", "config", "(", "'menu.cache.minutes'", ")", ";", "return", "Cache", "::", "remember", "(", "$", "key", ",", "$", "minutes", ",", "function", "(", ")", "use", "(", "$", "closure", ")", "{", "return", "call_user_func", "(", "$", "closure", ")", ";", "}", ")", ";", "}", "return", "call_user_func", "(", "$", "closure", ")", ";", "}"], "docstring": "uses the cache if it was configured or calculates\nthe plain output every request otherwise.\n\n@param $closure\n\n@return array", "docstring_tokens": ["uses", "the", "cache", "if", "it", "was", "configured", "or", "calculates", "the", "plain", "output", "every", "request", "otherwise", "."], "sha": "ab7622faf76ef5660cbd3feced8c0894fface9bd", "url": "https://github.com/vainproject/vain-menu/blob/ab7622faf76ef5660cbd3feced8c0894fface9bd/src/Menu/Listeners/MenuComposer.php#L61-L73", "partition": "test"}
{"repo": "Hzhihua/yii2-dump", "path": "src/models/Schema.php", "func_name": "Schema.getTable", "original_string": "public function getTable(TableSchema $table, $indent = 0)\n    {\n        $definition =\n            $this->getCreateTable($table->name, $indent)\n            . $this->getColumns($table->columns, $indent + 1)\n            . $this->getTableOptions($table, $indent)\n        ;\n\n        return $definition;\n    }", "language": "php", "code": "public function getTable(TableSchema $table, $indent = 0)\n    {\n        $definition =\n            $this->getCreateTable($table->name, $indent)\n            . $this->getColumns($table->columns, $indent + 1)\n            . $this->getTableOptions($table, $indent)\n        ;\n\n        return $definition;\n    }", "code_tokens": ["public", "function", "getTable", "(", "TableSchema", "$", "table", ",", "$", "indent", "=", "0", ")", "{", "$", "definition", "=", "$", "this", "->", "getCreateTable", "(", "$", "table", "->", "name", ",", "$", "indent", ")", ".", "$", "this", "->", "getColumns", "(", "$", "table", "->", "columns", ",", "$", "indent", "+", "1", ")", ".", "$", "this", "->", "getTableOptions", "(", "$", "table", ",", "$", "indent", ")", ";", "return", "$", "definition", ";", "}"], "docstring": "get table safeUp definition with primary key\n@param TableSchema $table\n@param $indent int text-indent \u6587\u672c\u7f29\u8fdb\n@return string", "docstring_tokens": ["get", "table", "safeUp", "definition", "with", "primary", "key"], "sha": "6865c2064d72b8361e0d7adfa6f11aa58608ef93", "url": "https://github.com/Hzhihua/yii2-dump/blob/6865c2064d72b8361e0d7adfa6f11aa58608ef93/src/models/Schema.php#L66-L75", "partition": "test"}
{"repo": "develpr/alexa-app", "path": "src/Certificate/FileCertificateProvider.php", "func_name": "FileCertificateProvider.calculateFilePath", "original_string": "private function calculateFilePath($certificateChainUri)\n    {\n        $filename = md5($certificateChainUri);\n\n        $path = $this->filePath.$filename;\n\n        return $path;\n    }", "language": "php", "code": "private function calculateFilePath($certificateChainUri)\n    {\n        $filename = md5($certificateChainUri);\n\n        $path = $this->filePath.$filename;\n\n        return $path;\n    }", "code_tokens": ["private", "function", "calculateFilePath", "(", "$", "certificateChainUri", ")", "{", "$", "filename", "=", "md5", "(", "$", "certificateChainUri", ")", ";", "$", "path", "=", "$", "this", "->", "filePath", ".", "$", "filename", ";", "return", "$", "path", ";", "}"], "docstring": "Calculate the path that the certificate should be stored\n\n@param string $certificateChainUri\n\n@return string", "docstring_tokens": ["Calculate", "the", "path", "that", "the", "certificate", "should", "be", "stored"], "sha": "4e14c2d2b6db4c58fb11c82867d1e712575f1ec3", "url": "https://github.com/develpr/alexa-app/blob/4e14c2d2b6db4c58fb11c82867d1e712575f1ec3/src/Certificate/FileCertificateProvider.php#L73-L80", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Helpers/StringHelper.php", "func_name": "StringHelper.endsWith", "original_string": "public static function endsWith($string, $with, $caseSensitive = true, $encoding = null)\n    {\n        if (!$bytes = static::byteLength($with)) {\n            return true;\n        }\n        if ($caseSensitive) {\n            // Warning check, see http://php.net/manual/en/function.substr-compare.php#refsect1-function.substr-compare-returnvalues\n            if (static::byteLength($string) < $bytes) {\n                return false;\n            }\n\n            return substr_compare($string, $with, -$bytes, $bytes) === 0;\n        }\n        if (!isset($encoding)) {\n            $encoding = \\Reaction::$app ? \\Reaction::$app->charset : 'UTF-8';\n        }\n        return mb_strtolower(mb_substr($string, -$bytes, mb_strlen($string, '8bit'), '8bit'), $encoding) === mb_strtolower($with, $encoding);\n    }", "language": "php", "code": "public static function endsWith($string, $with, $caseSensitive = true, $encoding = null)\n    {\n        if (!$bytes = static::byteLength($with)) {\n            return true;\n        }\n        if ($caseSensitive) {\n            // Warning check, see http://php.net/manual/en/function.substr-compare.php#refsect1-function.substr-compare-returnvalues\n            if (static::byteLength($string) < $bytes) {\n                return false;\n            }\n\n            return substr_compare($string, $with, -$bytes, $bytes) === 0;\n        }\n        if (!isset($encoding)) {\n            $encoding = \\Reaction::$app ? \\Reaction::$app->charset : 'UTF-8';\n        }\n        return mb_strtolower(mb_substr($string, -$bytes, mb_strlen($string, '8bit'), '8bit'), $encoding) === mb_strtolower($with, $encoding);\n    }", "code_tokens": ["public", "static", "function", "endsWith", "(", "$", "string", ",", "$", "with", ",", "$", "caseSensitive", "=", "true", ",", "$", "encoding", "=", "null", ")", "{", "if", "(", "!", "$", "bytes", "=", "static", "::", "byteLength", "(", "$", "with", ")", ")", "{", "return", "true", ";", "}", "if", "(", "$", "caseSensitive", ")", "{", "// Warning check, see http://php.net/manual/en/function.substr-compare.php#refsect1-function.substr-compare-returnvalues", "if", "(", "static", "::", "byteLength", "(", "$", "string", ")", "<", "$", "bytes", ")", "{", "return", "false", ";", "}", "return", "substr_compare", "(", "$", "string", ",", "$", "with", ",", "-", "$", "bytes", ",", "$", "bytes", ")", "===", "0", ";", "}", "if", "(", "!", "isset", "(", "$", "encoding", ")", ")", "{", "$", "encoding", "=", "\\", "Reaction", "::", "$", "app", "?", "\\", "Reaction", "::", "$", "app", "->", "charset", ":", "'UTF-8'", ";", "}", "return", "mb_strtolower", "(", "mb_substr", "(", "$", "string", ",", "-", "$", "bytes", ",", "mb_strlen", "(", "$", "string", ",", "'8bit'", ")", ",", "'8bit'", ")", ",", "$", "encoding", ")", "===", "mb_strtolower", "(", "$", "with", ",", "$", "encoding", ")", ";", "}"], "docstring": "Check if given string ends with specified substring.\nBinary and multibyte safe.\n\n@param string $string Input string to check\n@param string $with Part to search inside of the $string.\n@param bool $caseSensitive Case sensitive search. Default is true. When case sensitive is enabled, $with must exactly match the ending of the string in order to get a true value.\n@param string $encoding String encoding\n@return bool Returns true if first input ends with second input, false otherwise", "docstring_tokens": ["Check", "if", "given", "string", "ends", "with", "specified", "substring", ".", "Binary", "and", "multibyte", "safe", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Helpers/StringHelper.php#L229-L246", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/MySQLi/Connection.php", "func_name": "Connection.prepQuery", "original_string": "protected function prepQuery(string $sql): string\n\t{\n\t\t// mysqli_affected_rows() returns 0 for \"DELETE FROM TABLE\" queries. This hack\n\t\t// modifies the query so that it a proper number of affected rows is returned.\n\t\tif ($this->deleteHack === true && preg_match('/^\\s*DELETE\\s+FROM\\s+(\\S+)\\s*$/i', $sql))\n\t\t{\n\t\t\treturn trim($sql) . ' WHERE 1=1';\n\t\t}\n\n\t\treturn $sql;\n\t}", "language": "php", "code": "protected function prepQuery(string $sql): string\n\t{\n\t\t// mysqli_affected_rows() returns 0 for \"DELETE FROM TABLE\" queries. This hack\n\t\t// modifies the query so that it a proper number of affected rows is returned.\n\t\tif ($this->deleteHack === true && preg_match('/^\\s*DELETE\\s+FROM\\s+(\\S+)\\s*$/i', $sql))\n\t\t{\n\t\t\treturn trim($sql) . ' WHERE 1=1';\n\t\t}\n\n\t\treturn $sql;\n\t}", "code_tokens": ["protected", "function", "prepQuery", "(", "string", "$", "sql", ")", ":", "string", "{", "// mysqli_affected_rows() returns 0 for \"DELETE FROM TABLE\" queries. This hack", "// modifies the query so that it a proper number of affected rows is returned.", "if", "(", "$", "this", "->", "deleteHack", "===", "true", "&&", "preg_match", "(", "'/^\\s*DELETE\\s+FROM\\s+(\\S+)\\s*$/i'", ",", "$", "sql", ")", ")", "{", "return", "trim", "(", "$", "sql", ")", ".", "' WHERE 1=1'", ";", "}", "return", "$", "sql", ";", "}"], "docstring": "Prep the query\n\nIf needed, each database adapter can prep the query string\n\n@param string $sql an SQL query\n\n@return string", "docstring_tokens": ["Prep", "the", "query"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/MySQLi/Connection.php#L343-L353", "partition": "test"}
{"repo": "contao-bootstrap/grid-editor", "path": "src/Integration/Subcolumns.php", "func_name": "Subcolumns.getGrids", "original_string": "public static function getGrids(GetGridsEvent $event)\n    {\n        $model = $event->getModel();\n        $grids = $event->getGrids();\n\n        if ($model->type == 'colsetStart' || $model->type == 'subcolumns') {\n            $query   = 'SELECT * FROM tl_columnset WHERE published=1 AND columns=? ORDER BY title';\n            $columns = $model->sc_type;\n            $result  = \\Database::getInstance()\n                ->prepare($query)\n                ->execute($columns);\n\n            while ($result->next()) {\n                $grids[$result->id] = $result->title;\n            }\n        } elseif ($model->type == 'formcolstart') {\n            $query   = 'SELECT * FROM tl_columnset WHERE published=1 AND columns=? ORDER BY title';\n            $columns = $model->fsc_type;\n            $result  = \\Database::getInstance()\n                ->prepare($query)\n                ->execute($columns);\n\n            while ($result->next()) {\n                $grids[$result->id] = $result->title;\n            }\n        }\n    }", "language": "php", "code": "public static function getGrids(GetGridsEvent $event)\n    {\n        $model = $event->getModel();\n        $grids = $event->getGrids();\n\n        if ($model->type == 'colsetStart' || $model->type == 'subcolumns') {\n            $query   = 'SELECT * FROM tl_columnset WHERE published=1 AND columns=? ORDER BY title';\n            $columns = $model->sc_type;\n            $result  = \\Database::getInstance()\n                ->prepare($query)\n                ->execute($columns);\n\n            while ($result->next()) {\n                $grids[$result->id] = $result->title;\n            }\n        } elseif ($model->type == 'formcolstart') {\n            $query   = 'SELECT * FROM tl_columnset WHERE published=1 AND columns=? ORDER BY title';\n            $columns = $model->fsc_type;\n            $result  = \\Database::getInstance()\n                ->prepare($query)\n                ->execute($columns);\n\n            while ($result->next()) {\n                $grids[$result->id] = $result->title;\n            }\n        }\n    }", "code_tokens": ["public", "static", "function", "getGrids", "(", "GetGridsEvent", "$", "event", ")", "{", "$", "model", "=", "$", "event", "->", "getModel", "(", ")", ";", "$", "grids", "=", "$", "event", "->", "getGrids", "(", ")", ";", "if", "(", "$", "model", "->", "type", "==", "'colsetStart'", "||", "$", "model", "->", "type", "==", "'subcolumns'", ")", "{", "$", "query", "=", "'SELECT * FROM tl_columnset WHERE published=1 AND columns=? ORDER BY title'", ";", "$", "columns", "=", "$", "model", "->", "sc_type", ";", "$", "result", "=", "\\", "Database", "::", "getInstance", "(", ")", "->", "prepare", "(", "$", "query", ")", "->", "execute", "(", "$", "columns", ")", ";", "while", "(", "$", "result", "->", "next", "(", ")", ")", "{", "$", "grids", "[", "$", "result", "->", "id", "]", "=", "$", "result", "->", "title", ";", "}", "}", "elseif", "(", "$", "model", "->", "type", "==", "'formcolstart'", ")", "{", "$", "query", "=", "'SELECT * FROM tl_columnset WHERE published=1 AND columns=? ORDER BY title'", ";", "$", "columns", "=", "$", "model", "->", "fsc_type", ";", "$", "result", "=", "\\", "Database", "::", "getInstance", "(", ")", "->", "prepare", "(", "$", "query", ")", "->", "execute", "(", "$", "columns", ")", ";", "while", "(", "$", "result", "->", "next", "(", ")", ")", "{", "$", "grids", "[", "$", "result", "->", "id", "]", "=", "$", "result", "->", "title", ";", "}", "}", "}"], "docstring": "Load all grids from the database.\n\n@param GetGridsEvent $event The subscribed event.\n\n@return void", "docstring_tokens": ["Load", "all", "grids", "from", "the", "database", "."], "sha": "e017332aeec861b64b5dc963156533af4a21dc71", "url": "https://github.com/contao-bootstrap/grid-editor/blob/e017332aeec861b64b5dc963156533af4a21dc71/src/Integration/Subcolumns.php#L204-L230", "partition": "test"}
{"repo": "yaapis/Theme", "path": "src/YAAP/Theme/Commands/ThemeGeneratorCommand.php", "func_name": "ThemeGeneratorCommand.makeFile", "original_string": "protected function makeFile($file, $template = null, $assets = false)\n\t{\n\t\tif ( ! $this->files->exists($this->getPath($file)))\n\t\t{\n\t\t\t$content = $assets ? $this->getAssetsPath($file, true) : $this->getPath($file);\n\n\t\t\t$this->files->put($content, $template);\n\t\t}\n\t}", "language": "php", "code": "protected function makeFile($file, $template = null, $assets = false)\n\t{\n\t\tif ( ! $this->files->exists($this->getPath($file)))\n\t\t{\n\t\t\t$content = $assets ? $this->getAssetsPath($file, true) : $this->getPath($file);\n\n\t\t\t$this->files->put($content, $template);\n\t\t}\n\t}", "code_tokens": ["protected", "function", "makeFile", "(", "$", "file", ",", "$", "template", "=", "null", ",", "$", "assets", "=", "false", ")", "{", "if", "(", "!", "$", "this", "->", "files", "->", "exists", "(", "$", "this", "->", "getPath", "(", "$", "file", ")", ")", ")", "{", "$", "content", "=", "$", "assets", "?", "$", "this", "->", "getAssetsPath", "(", "$", "file", ",", "true", ")", ":", "$", "this", "->", "getPath", "(", "$", "file", ")", ";", "$", "this", "->", "files", "->", "put", "(", "$", "content", ",", "$", "template", ")", ";", "}", "}"], "docstring": "Make file.\n\n@param  string $file\n@param  string $template\n@param bool $assets\n@return void", "docstring_tokens": ["Make", "file", "."], "sha": "3820752d9bce06aa10c7f31a84a06cd858ff4a92", "url": "https://github.com/yaapis/Theme/blob/3820752d9bce06aa10c7f31a84a06cd858ff4a92/src/YAAP/Theme/Commands/ThemeGeneratorCommand.php#L126-L134", "partition": "test"}
{"repo": "imkrimerman/primitive", "path": "src/Primitive/Container/ContainerFactory.php", "func_name": "ContainerFactory.make", "original_string": "public function make($from, $type)\n    {\n        $type = $type ?: static::SIMPLE;\n\n        switch ($type)\n        {\n            case static::SIMPLE:\n                return new Container($from);\n            case static::REVERTABLE:\n                return new RevertableContainer($from);\n            default:\n                throw new InvalidArgumentException('Argument 2 is invalid');\n        }\n    }", "language": "php", "code": "public function make($from, $type)\n    {\n        $type = $type ?: static::SIMPLE;\n\n        switch ($type)\n        {\n            case static::SIMPLE:\n                return new Container($from);\n            case static::REVERTABLE:\n                return new RevertableContainer($from);\n            default:\n                throw new InvalidArgumentException('Argument 2 is invalid');\n        }\n    }", "code_tokens": ["public", "function", "make", "(", "$", "from", ",", "$", "type", ")", "{", "$", "type", "=", "$", "type", "?", ":", "static", "::", "SIMPLE", ";", "switch", "(", "$", "type", ")", "{", "case", "static", "::", "SIMPLE", ":", "return", "new", "Container", "(", "$", "from", ")", ";", "case", "static", "::", "REVERTABLE", ":", "return", "new", "RevertableContainer", "(", "$", "from", ")", ";", "default", ":", "throw", "new", "InvalidArgumentException", "(", "'Argument 2 is invalid'", ")", ";", "}", "}"], "docstring": "Return constructed instance of Container Type\n\n@param mixed $from\n@param int|null   $type\n@return \\im\\Primitive\\Container\\Container|\\im\\Primitive\\Container\\RevertableContainer", "docstring_tokens": ["Return", "constructed", "instance", "of", "Container", "Type"], "sha": "bdb45bb5109ca07f116cce571b76804e47ac5d56", "url": "https://github.com/imkrimerman/primitive/blob/bdb45bb5109ca07f116cce571b76804e47ac5d56/src/Primitive/Container/ContainerFactory.php#L32-L45", "partition": "test"}
{"repo": "pentagonal/Hookable", "path": "src/Pentagonal/Hookable/Hookable.php", "func_name": "Hookable.append", "original_string": "public function append($hookName, $callable, $priority = 10, $accepted_args = 1, $create = true)\n    {\n        if ($create || ! $this->has($hookName, $callable)) {\n            return $this->add($hookName, $callable, $priority, $accepted_args);\n        }\n        return false;\n    }", "language": "php", "code": "public function append($hookName, $callable, $priority = 10, $accepted_args = 1, $create = true)\n    {\n        if ($create || ! $this->has($hookName, $callable)) {\n            return $this->add($hookName, $callable, $priority, $accepted_args);\n        }\n        return false;\n    }", "code_tokens": ["public", "function", "append", "(", "$", "hookName", ",", "$", "callable", ",", "$", "priority", "=", "10", ",", "$", "accepted_args", "=", "1", ",", "$", "create", "=", "true", ")", "{", "if", "(", "$", "create", "||", "!", "$", "this", "->", "has", "(", "$", "hookName", ",", "$", "callable", ")", ")", "{", "return", "$", "this", "->", "add", "(", "$", "hookName", ",", "$", "callable", ",", "$", "priority", ",", "$", "accepted_args", ")", ";", "}", "return", "false", ";", "}"], "docstring": "Appending Hooks Function, if hooks existor just append the hooks\n\n@param  string    $hookName            Hook Name\n@param  Callable  $callable            Callable\n@param  integer   $priority            priority\n@param  integer   $accepted_args       num count of accepted args / parameter\n@param  boolean   $create              true if want to create new if not exists\n\n@return boolean", "docstring_tokens": ["Appending", "Hooks", "Function", "if", "hooks", "existor", "just", "append", "the", "hooks"], "sha": "fc5b6d334f26dc78c8890231093c3be36892a1a0", "url": "https://github.com/pentagonal/Hookable/blob/fc5b6d334f26dc78c8890231093c3be36892a1a0/src/Pentagonal/Hookable/Hookable.php#L191-L197", "partition": "test"}
{"repo": "spiral/migrations", "path": "src/Migrator.php", "func_name": "Migrator.isConfigured", "original_string": "public function isConfigured(): bool\n    {\n        foreach ($this->dbal->getDatabases() as $db) {\n            if (!$db->hasTable($this->config->getTable())) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "language": "php", "code": "public function isConfigured(): bool\n    {\n        foreach ($this->dbal->getDatabases() as $db) {\n            if (!$db->hasTable($this->config->getTable())) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "code_tokens": ["public", "function", "isConfigured", "(", ")", ":", "bool", "{", "foreach", "(", "$", "this", "->", "dbal", "->", "getDatabases", "(", ")", "as", "$", "db", ")", "{", "if", "(", "!", "$", "db", "->", "hasTable", "(", "$", "this", "->", "config", "->", "getTable", "(", ")", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "docstring": "Check if all related databases are configures with migrations.\n\n@return bool", "docstring_tokens": ["Check", "if", "all", "related", "databases", "are", "configures", "with", "migrations", "."], "sha": "d7ea264874373433bc4e16bb9b86050a4cd28000", "url": "https://github.com/spiral/migrations/blob/d7ea264874373433bc4e16bb9b86050a4cd28000/src/Migrator.php#L56-L65", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/I18n/TimeDifference.php", "func_name": "TimeDifference.getDays", "original_string": "public function getDays(bool $raw = false)\n\t{\n\t\tif ($raw)\n\t\t{\n\t\t\treturn $this->difference / DAY;\n\t\t}\n\n\t\t$time = clone($this->currentTime);\n\t\treturn $time->fieldDifference($this->testTime, IntlCalendar::FIELD_DAY_OF_YEAR);\n\t}", "language": "php", "code": "public function getDays(bool $raw = false)\n\t{\n\t\tif ($raw)\n\t\t{\n\t\t\treturn $this->difference / DAY;\n\t\t}\n\n\t\t$time = clone($this->currentTime);\n\t\treturn $time->fieldDifference($this->testTime, IntlCalendar::FIELD_DAY_OF_YEAR);\n\t}", "code_tokens": ["public", "function", "getDays", "(", "bool", "$", "raw", "=", "false", ")", "{", "if", "(", "$", "raw", ")", "{", "return", "$", "this", "->", "difference", "/", "DAY", ";", "}", "$", "time", "=", "clone", "(", "$", "this", "->", "currentTime", ")", ";", "return", "$", "time", "->", "fieldDifference", "(", "$", "this", "->", "testTime", ",", "IntlCalendar", "::", "FIELD_DAY_OF_YEAR", ")", ";", "}"], "docstring": "Returns the number of days difference between the two dates.\n\n@param boolean $raw\n\n@return float|integer", "docstring_tokens": ["Returns", "the", "number", "of", "days", "difference", "between", "the", "two", "dates", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/I18n/TimeDifference.php#L188-L197", "partition": "test"}
{"repo": "MichaelRShelton/middleman", "path": "src/Support/Helpers.php", "func_name": "Helpers.load", "original_string": "public static function load($id): bool\n    {\n        $loaded = false;\n        if (isset(static::$files[$id])) {\n            $loaded = static::$files[$id] === true;\n\n            if (! $loaded) {\n                assert(file_exists(static::$files[$id]));\n\n                include static::$files[$id];\n                $loaded = static::$files[$id] = true;\n            }\n        }\n        return $loaded;\n    }", "language": "php", "code": "public static function load($id): bool\n    {\n        $loaded = false;\n        if (isset(static::$files[$id])) {\n            $loaded = static::$files[$id] === true;\n\n            if (! $loaded) {\n                assert(file_exists(static::$files[$id]));\n\n                include static::$files[$id];\n                $loaded = static::$files[$id] = true;\n            }\n        }\n        return $loaded;\n    }", "code_tokens": ["public", "static", "function", "load", "(", "$", "id", ")", ":", "bool", "{", "$", "loaded", "=", "false", ";", "if", "(", "isset", "(", "static", "::", "$", "files", "[", "$", "id", "]", ")", ")", "{", "$", "loaded", "=", "static", "::", "$", "files", "[", "$", "id", "]", "===", "true", ";", "if", "(", "!", "$", "loaded", ")", "{", "assert", "(", "file_exists", "(", "static", "::", "$", "files", "[", "$", "id", "]", ")", ")", ";", "include", "static", "::", "$", "files", "[", "$", "id", "]", ";", "$", "loaded", "=", "static", "::", "$", "files", "[", "$", "id", "]", "=", "true", ";", "}", "}", "return", "$", "loaded", ";", "}"], "docstring": "Load the given collection.\n\nAsserts file existence because it should never be the case that they don't\nexist on production.\n\n@param $id\n@return bool", "docstring_tokens": ["Load", "the", "given", "collection", "."], "sha": "b67140be2f39a32a27f5a0a9b2498ab3444835ba", "url": "https://github.com/MichaelRShelton/middleman/blob/b67140be2f39a32a27f5a0a9b2498ab3444835ba/src/Support/Helpers.php#L31-L45", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Container/Container.php", "func_name": "Container.resolvePlain", "original_string": "protected function resolvePlain(string $abstract)\n    {\n        $binding                             = &$this->bindings[$abstract];\n        $binding[TypesContract::IS_RESOLVED] = true;\n\n        return $binding[TypesContract::VALUE];\n    }", "language": "php", "code": "protected function resolvePlain(string $abstract)\n    {\n        $binding                             = &$this->bindings[$abstract];\n        $binding[TypesContract::IS_RESOLVED] = true;\n\n        return $binding[TypesContract::VALUE];\n    }", "code_tokens": ["protected", "function", "resolvePlain", "(", "string", "$", "abstract", ")", "{", "$", "binding", "=", "&", "$", "this", "->", "bindings", "[", "$", "abstract", "]", ";", "$", "binding", "[", "TypesContract", "::", "IS_RESOLVED", "]", "=", "true", ";", "return", "$", "binding", "[", "TypesContract", "::", "VALUE", "]", ";", "}"], "docstring": "Resolve a plain value from the container.\n\n@param string $abstract\n\n@return mixed", "docstring_tokens": ["Resolve", "a", "plain", "value", "from", "the", "container", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Container/Container.php#L604-L610", "partition": "test"}
{"repo": "Intervention/gif", "path": "src/Intervention/Gif/Decoded.php", "func_name": "Decoded.getLoops", "original_string": "public function getLoops()\n    {\n        if ($this->netscapeExtension) {\n            $loops = substr($this->netscapeExtension, 14, 2);\n            $loops = unpack('C', $loops)[1];\n\n            return $loops;\n        }\n\n        return null;\n    }", "language": "php", "code": "public function getLoops()\n    {\n        if ($this->netscapeExtension) {\n            $loops = substr($this->netscapeExtension, 14, 2);\n            $loops = unpack('C', $loops)[1];\n\n            return $loops;\n        }\n\n        return null;\n    }", "code_tokens": ["public", "function", "getLoops", "(", ")", "{", "if", "(", "$", "this", "->", "netscapeExtension", ")", "{", "$", "loops", "=", "substr", "(", "$", "this", "->", "netscapeExtension", ",", "14", ",", "2", ")", ";", "$", "loops", "=", "unpack", "(", "'C'", ",", "$", "loops", ")", "[", "1", "]", ";", "return", "$", "loops", ";", "}", "return", "null", ";", "}"], "docstring": "Returns loops of animation\n\n@return integer|null", "docstring_tokens": ["Returns", "loops", "of", "animation"], "sha": "7f7e747f26b8362f18384f67a9765290523f607a", "url": "https://github.com/Intervention/gif/blob/7f7e747f26b8362f18384f67a9765290523f607a/src/Intervention/Gif/Decoded.php#L345-L355", "partition": "test"}
{"repo": "mamasu/mama-framework", "path": "src/Plugin/FileSystemPluginLocator.php", "func_name": "FileSystemPluginLocator.haveTheFileImplementationOf", "original_string": "public function haveTheFileImplementationOf($file, $implementation = 'PluginInterface') {\n        $matches = array();\n        $fp = fopen($file, 'r');\n        while (!feof($fp)) {\n            $line = stream_get_line($fp, 1000000, \"\\n\");\n            if (preg_match('/class\\s+(\\w+)(.*)\\simplements\\s+(\\w+)(.*)?\\{/', $line, $matches)) {\n                if ($matches[3] === $implementation) {\n                    return $matches[1]; //Return the class name\n                }\n            }\n        }\n        return false;\n    }", "language": "php", "code": "public function haveTheFileImplementationOf($file, $implementation = 'PluginInterface') {\n        $matches = array();\n        $fp = fopen($file, 'r');\n        while (!feof($fp)) {\n            $line = stream_get_line($fp, 1000000, \"\\n\");\n            if (preg_match('/class\\s+(\\w+)(.*)\\simplements\\s+(\\w+)(.*)?\\{/', $line, $matches)) {\n                if ($matches[3] === $implementation) {\n                    return $matches[1]; //Return the class name\n                }\n            }\n        }\n        return false;\n    }", "code_tokens": ["public", "function", "haveTheFileImplementationOf", "(", "$", "file", ",", "$", "implementation", "=", "'PluginInterface'", ")", "{", "$", "matches", "=", "array", "(", ")", ";", "$", "fp", "=", "fopen", "(", "$", "file", ",", "'r'", ")", ";", "while", "(", "!", "feof", "(", "$", "fp", ")", ")", "{", "$", "line", "=", "stream_get_line", "(", "$", "fp", ",", "1000000", ",", "\"\\n\"", ")", ";", "if", "(", "preg_match", "(", "'/class\\s+(\\w+)(.*)\\simplements\\s+(\\w+)(.*)?\\{/'", ",", "$", "line", ",", "$", "matches", ")", ")", "{", "if", "(", "$", "matches", "[", "3", "]", "===", "$", "implementation", ")", "{", "return", "$", "matches", "[", "1", "]", ";", "//Return the class name", "}", "}", "}", "return", "false", ";", "}"], "docstring": "Open the given path file and search for a plugin implementation. It returns\nthe class name in a positive case.\n\n@param string $file\n@param string $implementation\n@return boolean|string", "docstring_tokens": ["Open", "the", "given", "path", "file", "and", "search", "for", "a", "plugin", "implementation", ".", "It", "returns", "the", "class", "name", "in", "a", "positive", "case", "."], "sha": "105a4980b56f1fdaad095a32189ee47d39203a7a", "url": "https://github.com/mamasu/mama-framework/blob/105a4980b56f1fdaad095a32189ee47d39203a7a/src/Plugin/FileSystemPluginLocator.php#L159-L171", "partition": "test"}
{"repo": "PHPExif/php-exif", "path": "lib/PHPExif/Exif.php", "func_name": "Exif.getFocalLength", "original_string": "public function getFocalLength()\n    {\n        if (!isset($this->data[self::FOCAL_LENGTH])) {\n            return false;\n        }\n\n        return $this->data[self::FOCAL_LENGTH];\n    }", "language": "php", "code": "public function getFocalLength()\n    {\n        if (!isset($this->data[self::FOCAL_LENGTH])) {\n            return false;\n        }\n\n        return $this->data[self::FOCAL_LENGTH];\n    }", "code_tokens": ["public", "function", "getFocalLength", "(", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "data", "[", "self", "::", "FOCAL_LENGTH", "]", ")", ")", "{", "return", "false", ";", "}", "return", "$", "this", "->", "data", "[", "self", "::", "FOCAL_LENGTH", "]", ";", "}"], "docstring": "Returns the focal length in mm, if it exists\n\n@return float|boolean", "docstring_tokens": ["Returns", "the", "focal", "length", "in", "mm", "if", "it", "exists"], "sha": "41f23db39d7b48e4af0e134c2e80e577c1782ac9", "url": "https://github.com/PHPExif/php-exif/blob/41f23db39d7b48e4af0e134c2e80e577c1782ac9/lib/PHPExif/Exif.php#L660-L667", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/PEAR/Registry.php", "func_name": "PEAR_Registry.updateChannel", "original_string": "function updateChannel($channel, $lastmodified = null)\n    {\n        if ($channel->getName() == '__uri') {\n            return false;\n        }\n        return $this->addChannel($channel, $lastmodified, true);\n    }", "language": "php", "code": "function updateChannel($channel, $lastmodified = null)\n    {\n        if ($channel->getName() == '__uri') {\n            return false;\n        }\n        return $this->addChannel($channel, $lastmodified, true);\n    }", "code_tokens": ["function", "updateChannel", "(", "$", "channel", ",", "$", "lastmodified", "=", "null", ")", "{", "if", "(", "$", "channel", "->", "getName", "(", ")", "==", "'__uri'", ")", "{", "return", "false", ";", "}", "return", "$", "this", "->", "addChannel", "(", "$", "channel", ",", "$", "lastmodified", ",", "true", ")", ";", "}"], "docstring": "For future expandibility purposes, separate this\n@param PEAR_ChannelFile", "docstring_tokens": ["For", "future", "expandibility", "purposes", "separate", "this"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/PEAR/Registry.php#L1800-L1806", "partition": "test"}
{"repo": "mikecao/flight", "path": "flight/core/Dispatcher.php", "func_name": "Dispatcher.filter", "original_string": "public function filter($filters, &$params, &$output) {\n        $args = array(&$params, &$output);\n        foreach ($filters as $callback) {\n            $continue = $this->execute($callback, $args);\n            if ($continue === false) break;\n        }\n    }", "language": "php", "code": "public function filter($filters, &$params, &$output) {\n        $args = array(&$params, &$output);\n        foreach ($filters as $callback) {\n            $continue = $this->execute($callback, $args);\n            if ($continue === false) break;\n        }\n    }", "code_tokens": ["public", "function", "filter", "(", "$", "filters", ",", "&", "$", "params", ",", "&", "$", "output", ")", "{", "$", "args", "=", "array", "(", "&", "$", "params", ",", "&", "$", "output", ")", ";", "foreach", "(", "$", "filters", "as", "$", "callback", ")", "{", "$", "continue", "=", "$", "this", "->", "execute", "(", "$", "callback", ",", "$", "args", ")", ";", "if", "(", "$", "continue", "===", "false", ")", "break", ";", "}", "}"], "docstring": "Executes a chain of method filters.\n\n@param array $filters Chain of filters\n@param array $params Method parameters\n@param mixed $output Method output\n@throws \\Exception", "docstring_tokens": ["Executes", "a", "chain", "of", "method", "filters", "."], "sha": "c57ee8cb8d8a4479ce7da28df9538eb8265f67be", "url": "https://github.com/mikecao/flight/blob/c57ee8cb8d8a4479ce7da28df9538eb8265f67be/flight/core/Dispatcher.php#L125-L131", "partition": "test"}
{"repo": "cviebrock/eloquent-taggable", "path": "src/Services/TagService.php", "func_name": "TagService.getTagModelKeys", "original_string": "public function getTagModelKeys(array $normalized = []): array\n    {\n        if (count($normalized) === 0) {\n            return [];\n        }\n\n        return $this->tagModel::whereIn('normalized', $normalized)\n            ->pluck('tag_id')\n            ->toArray();\n    }", "language": "php", "code": "public function getTagModelKeys(array $normalized = []): array\n    {\n        if (count($normalized) === 0) {\n            return [];\n        }\n\n        return $this->tagModel::whereIn('normalized', $normalized)\n            ->pluck('tag_id')\n            ->toArray();\n    }", "code_tokens": ["public", "function", "getTagModelKeys", "(", "array", "$", "normalized", "=", "[", "]", ")", ":", "array", "{", "if", "(", "count", "(", "$", "normalized", ")", "===", "0", ")", "{", "return", "[", "]", ";", "}", "return", "$", "this", "->", "tagModel", "::", "whereIn", "(", "'normalized'", ",", "$", "normalized", ")", "->", "pluck", "(", "'tag_id'", ")", "->", "toArray", "(", ")", ";", "}"], "docstring": "Return an array of tag models for the given normalized tags\n\n@param array $normalized\n\n@return array", "docstring_tokens": ["Return", "an", "array", "of", "tag", "models", "for", "the", "given", "normalized", "tags"], "sha": "0201cdc85e5642bf31250527eb779df6dc3ca364", "url": "https://github.com/cviebrock/eloquent-taggable/blob/0201cdc85e5642bf31250527eb779df6dc3ca364/src/Services/TagService.php#L115-L124", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-file/src/File/FileRestProxy.php", "func_name": "FileRestProxy.setSharePropertiesAsync", "original_string": "public function setSharePropertiesAsync(\n        $share,\n        $quota,\n        FileServiceOptions $options = null\n    ) {\n        return $this->setSharePropertiesAsyncImpl(\n            $share,\n            [Resources::X_MS_SHARE_QUOTA => $quota],\n            $options,\n            'properties'\n        );\n    }", "language": "php", "code": "public function setSharePropertiesAsync(\n        $share,\n        $quota,\n        FileServiceOptions $options = null\n    ) {\n        return $this->setSharePropertiesAsyncImpl(\n            $share,\n            [Resources::X_MS_SHARE_QUOTA => $quota],\n            $options,\n            'properties'\n        );\n    }", "code_tokens": ["public", "function", "setSharePropertiesAsync", "(", "$", "share", ",", "$", "quota", ",", "FileServiceOptions", "$", "options", "=", "null", ")", "{", "return", "$", "this", "->", "setSharePropertiesAsyncImpl", "(", "$", "share", ",", "[", "Resources", "::", "X_MS_SHARE_QUOTA", "=>", "$", "quota", "]", ",", "$", "options", ",", "'properties'", ")", ";", "}"], "docstring": "Creates promise to set quota the share.\n\n@param string                  $share   name\n@param int                     $quota   quota of the share\n@param FileServiceOptions|null $options optional parameters\n\n@return \\GuzzleHttp\\Promise\\PromiseInterface\n\n@see https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-properties", "docstring_tokens": ["Creates", "promise", "to", "set", "quota", "the", "share", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-file/src/File/FileRestProxy.php#L730-L741", "partition": "test"}
{"repo": "php-carteblanche/core", "path": "src/CarteBlanche/App/Logger.php", "func_name": "Logger.init", "original_string": "protected function init(array $user_options = array(), $logname = null)\n    {\n        $app_config = CarteBlanche::getConfig('log', array(), true);\n        $app_config['directory'] = CarteBlanche::getFullPath('log_dir');\n        $user_config = CarteBlanche::getConfig('log', array());\n        if (!empty($user_config)) {\n            $config = array_merge($app_config, $user_config, $user_options);\n        } else {\n            $config = array_merge($app_config, $user_options);\n        }\n        parent::init($config, $logname);\n    }", "language": "php", "code": "protected function init(array $user_options = array(), $logname = null)\n    {\n        $app_config = CarteBlanche::getConfig('log', array(), true);\n        $app_config['directory'] = CarteBlanche::getFullPath('log_dir');\n        $user_config = CarteBlanche::getConfig('log', array());\n        if (!empty($user_config)) {\n            $config = array_merge($app_config, $user_config, $user_options);\n        } else {\n            $config = array_merge($app_config, $user_options);\n        }\n        parent::init($config, $logname);\n    }", "code_tokens": ["protected", "function", "init", "(", "array", "$", "user_options", "=", "array", "(", ")", ",", "$", "logname", "=", "null", ")", "{", "$", "app_config", "=", "CarteBlanche", "::", "getConfig", "(", "'log'", ",", "array", "(", ")", ",", "true", ")", ";", "$", "app_config", "[", "'directory'", "]", "=", "CarteBlanche", "::", "getFullPath", "(", "'log_dir'", ")", ";", "$", "user_config", "=", "CarteBlanche", "::", "getConfig", "(", "'log'", ",", "array", "(", ")", ")", ";", "if", "(", "!", "empty", "(", "$", "user_config", ")", ")", "{", "$", "config", "=", "array_merge", "(", "$", "app_config", ",", "$", "user_config", ",", "$", "user_options", ")", ";", "}", "else", "{", "$", "config", "=", "array_merge", "(", "$", "app_config", ",", "$", "user_options", ")", ";", "}", "parent", "::", "init", "(", "$", "config", ",", "$", "logname", ")", ";", "}"], "docstring": "Load the configuration infos\n\n@param array $user_options\n@param string $logname\n\n@return void", "docstring_tokens": ["Load", "the", "configuration", "infos"], "sha": "b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343", "url": "https://github.com/php-carteblanche/core/blob/b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343/src/CarteBlanche/App/Logger.php#L39-L50", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Processors/WorkRequest/WorkRequestProcessor.php", "func_name": "WorkRequestProcessor.edit", "original_string": "public function edit($id)\n    {\n        $workRequest = $this->workRequest->findOrFail($id);\n\n        $form = $this->presenter->form($workRequest);\n\n        return view('work-requests.edit', compact('form'));\n    }", "language": "php", "code": "public function edit($id)\n    {\n        $workRequest = $this->workRequest->findOrFail($id);\n\n        $form = $this->presenter->form($workRequest);\n\n        return view('work-requests.edit', compact('form'));\n    }", "code_tokens": ["public", "function", "edit", "(", "$", "id", ")", "{", "$", "workRequest", "=", "$", "this", "->", "workRequest", "->", "findOrFail", "(", "$", "id", ")", ";", "$", "form", "=", "$", "this", "->", "presenter", "->", "form", "(", "$", "workRequest", ")", ";", "return", "view", "(", "'work-requests.edit'", ",", "compact", "(", "'form'", ")", ")", ";", "}"], "docstring": "Displays the form for editing the specified work request.\n\n@param int|string $id\n\n@return \\Illuminate\\View\\View", "docstring_tokens": ["Displays", "the", "form", "for", "editing", "the", "specified", "work", "request", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Processors/WorkRequest/WorkRequestProcessor.php#L104-L111", "partition": "test"}
{"repo": "nails/module-admin", "path": "src/DataExport/Format/Csv.php", "func_name": "Csv.formatRow", "original_string": "protected function formatRow($oRow)\n    {\n        $aItems = array_map(\n            function ($sItem) {\n                return str_replace('\"', '\"\"', trim($sItem));\n            },\n            (array) $oRow\n        );\n\n        return '\"' . implode('\",\"', $aItems) . '\"' . \"\\n\";\n    }", "language": "php", "code": "protected function formatRow($oRow)\n    {\n        $aItems = array_map(\n            function ($sItem) {\n                return str_replace('\"', '\"\"', trim($sItem));\n            },\n            (array) $oRow\n        );\n\n        return '\"' . implode('\",\"', $aItems) . '\"' . \"\\n\";\n    }", "code_tokens": ["protected", "function", "formatRow", "(", "$", "oRow", ")", "{", "$", "aItems", "=", "array_map", "(", "function", "(", "$", "sItem", ")", "{", "return", "str_replace", "(", "'\"'", ",", "'\"\"'", ",", "trim", "(", "$", "sItem", ")", ")", ";", "}", ",", "(", "array", ")", "$", "oRow", ")", ";", "return", "'\"'", ".", "implode", "(", "'\",\"'", ",", "$", "aItems", ")", ".", "'\"'", ".", "\"\\n\"", ";", "}"], "docstring": "Escapes items to be written to the CSV\n\n@param \\stdClass|array $oRow The row to format\n\n@return string", "docstring_tokens": ["Escapes", "items", "to", "be", "written", "to", "the", "CSV"], "sha": "2ed8a91b5f05c86fcde21feb621cfafe391ee0c3", "url": "https://github.com/nails/module-admin/blob/2ed8a91b5f05c86fcde21feb621cfafe391ee0c3/src/DataExport/Format/Csv.php#L73-L83", "partition": "test"}
{"repo": "theiconic/php-ga-measurement-protocol", "path": "src/Traits/Indexable.php", "func_name": "Indexable.addIndex", "original_string": "protected function addIndex($string, $index)\n    {\n        if (empty($string)) {\n            throw new InvalidNameException('Name attribute not defined for class ' . get_class($this));\n        }\n\n        if (strpos($string, $this->indexPlaceholder) !== false) {\n            if (!is_numeric($index) || $index < $this->minIndex() || $index > $this->maxIndex()) {\n                throw new InvalidIndexException(\n                    'When setting parameter ' . get_class($this)\n                    . ' a numeric index between 1 - 200 must be passed for the second argument'\n                );\n            }\n        }\n\n        return str_replace($this->indexPlaceholder, $index, $string);\n    }", "language": "php", "code": "protected function addIndex($string, $index)\n    {\n        if (empty($string)) {\n            throw new InvalidNameException('Name attribute not defined for class ' . get_class($this));\n        }\n\n        if (strpos($string, $this->indexPlaceholder) !== false) {\n            if (!is_numeric($index) || $index < $this->minIndex() || $index > $this->maxIndex()) {\n                throw new InvalidIndexException(\n                    'When setting parameter ' . get_class($this)\n                    . ' a numeric index between 1 - 200 must be passed for the second argument'\n                );\n            }\n        }\n\n        return str_replace($this->indexPlaceholder, $index, $string);\n    }", "code_tokens": ["protected", "function", "addIndex", "(", "$", "string", ",", "$", "index", ")", "{", "if", "(", "empty", "(", "$", "string", ")", ")", "{", "throw", "new", "InvalidNameException", "(", "'Name attribute not defined for class '", ".", "get_class", "(", "$", "this", ")", ")", ";", "}", "if", "(", "strpos", "(", "$", "string", ",", "$", "this", "->", "indexPlaceholder", ")", "!==", "false", ")", "{", "if", "(", "!", "is_numeric", "(", "$", "index", ")", "||", "$", "index", "<", "$", "this", "->", "minIndex", "(", ")", "||", "$", "index", ">", "$", "this", "->", "maxIndex", "(", ")", ")", "{", "throw", "new", "InvalidIndexException", "(", "'When setting parameter '", ".", "get_class", "(", "$", "this", ")", ".", "' a numeric index between 1 - 200 must be passed for the second argument'", ")", ";", "}", "}", "return", "str_replace", "(", "$", "this", "->", "indexPlaceholder", ",", "$", "index", ",", "$", "string", ")", ";", "}"], "docstring": "Replaces a placeholder for the index passed.\n\n@param string $string\n@param int $index\n@return string\n@throws \\TheIconic\\Tracking\\GoogleAnalytics\\Exception\\InvalidIndexException\n@throws \\TheIconic\\Tracking\\GoogleAnalytics\\Exception\\InvalidNameException", "docstring_tokens": ["Replaces", "a", "placeholder", "for", "the", "index", "passed", "."], "sha": "cef87787f96d774ac9469a537a32d06b93f2bf72", "url": "https://github.com/theiconic/php-ga-measurement-protocol/blob/cef87787f96d774ac9469a537a32d06b93f2bf72/src/Traits/Indexable.php#L51-L67", "partition": "test"}
{"repo": "maniaplanet/manialib", "path": "libraries/ManiaLib/Utils/StyleParser.php", "func_name": "StyleParser.onImageFast", "original_string": "static function onImageFast($string, $image, $fontName, $x = 0, $y = 0, $size = 10, $defaultColor = '000')\n    {\n        $defaultColor = Color::StringToRgb24($defaultColor);\n\n        $xOffset = 0;\n        foreach (self::parseString($string) as $token)\n            $xOffset += $token->onImage($image, $fontName, $x + $xOffset, $y, $size, $defaultColor, 1);\n    }", "language": "php", "code": "static function onImageFast($string, $image, $fontName, $x = 0, $y = 0, $size = 10, $defaultColor = '000')\n    {\n        $defaultColor = Color::StringToRgb24($defaultColor);\n\n        $xOffset = 0;\n        foreach (self::parseString($string) as $token)\n            $xOffset += $token->onImage($image, $fontName, $x + $xOffset, $y, $size, $defaultColor, 1);\n    }", "code_tokens": ["static", "function", "onImageFast", "(", "$", "string", ",", "$", "image", ",", "$", "fontName", ",", "$", "x", "=", "0", ",", "$", "y", "=", "0", ",", "$", "size", "=", "10", ",", "$", "defaultColor", "=", "'000'", ")", "{", "$", "defaultColor", "=", "Color", "::", "StringToRgb24", "(", "$", "defaultColor", ")", ";", "$", "xOffset", "=", "0", ";", "foreach", "(", "self", "::", "parseString", "(", "$", "string", ")", "as", "$", "token", ")", "$", "xOffset", "+=", "$", "token", "->", "onImage", "(", "$", "image", ",", "$", "fontName", ",", "$", "x", "+", "$", "xOffset", ",", "$", "y", ",", "$", "size", ",", "$", "defaultColor", ",", "1", ")", ";", "}"], "docstring": "Draw a string with on an image using fast method. There can be glitches when using small sizes\n@param string $string The style-coded string to draw\n@param imageResource $image The image to draw on\n@param string $fontName The TTF font to use, which has been declared previously\n@param int $x X position\n@param int $y Y position\n@param int $size Font size\n@param string $defaultColor Default text color in 3 or 6 hexadecimal characters", "docstring_tokens": ["Draw", "a", "string", "with", "on", "an", "image", "using", "fast", "method", ".", "There", "can", "be", "glitches", "when", "using", "small", "sizes"], "sha": "d91491c1614ef3bc3c68fd2928ca370c038dd0ad", "url": "https://github.com/maniaplanet/manialib/blob/d91491c1614ef3bc3c68fd2928ca370c038dd0ad/libraries/ManiaLib/Utils/StyleParser.php#L153-L160", "partition": "test"}
{"repo": "mapado/rest-client-sdk", "path": "src/UnitOfWork.php", "func_name": "UnitOfWork.getEntityId", "original_string": "private static function getEntityId(\n        $stringOrEntity,\n        string $idSerializedKey\n    ) {\n        if (!is_array($stringOrEntity)) {\n            return $stringOrEntity;\n        }\n\n        return $stringOrEntity[$idSerializedKey] ?? null;\n    }", "language": "php", "code": "private static function getEntityId(\n        $stringOrEntity,\n        string $idSerializedKey\n    ) {\n        if (!is_array($stringOrEntity)) {\n            return $stringOrEntity;\n        }\n\n        return $stringOrEntity[$idSerializedKey] ?? null;\n    }", "code_tokens": ["private", "static", "function", "getEntityId", "(", "$", "stringOrEntity", ",", "string", "$", "idSerializedKey", ")", "{", "if", "(", "!", "is_array", "(", "$", "stringOrEntity", ")", ")", "{", "return", "$", "stringOrEntity", ";", "}", "return", "$", "stringOrEntity", "[", "$", "idSerializedKey", "]", "??", "null", ";", "}"], "docstring": "get entity id from string or array\n\n@param string|array $stringOrEntity\n@param string $idSerializedKey\n\n@return ?mixed", "docstring_tokens": ["get", "entity", "id", "from", "string", "or", "array"], "sha": "d218542fb28ae50d8e022e5fe6202e955e1d726b", "url": "https://github.com/mapado/rest-client-sdk/blob/d218542fb28ae50d8e022e5fe6202e955e1d726b/src/UnitOfWork.php#L251-L260", "partition": "test"}
{"repo": "yawik/organizations", "path": "src/Form/OrganizationsContactFieldset.php", "func_name": "OrganizationsContactFieldset.init", "original_string": "public function init()\n    {\n        $this->setName('contact');\n        \n        $this->add(\n            array(\n                'name' => 'street',\n                'options' => array(\n                        'label' => /* @translate */ 'Street'\n                )\n            )\n        );\n        \n        $this->add(\n            array(\n                'name' => 'houseNumber',\n                'options' => array(\n                        'label' => /* @translate */ 'House Number'\n                )\n            )\n        );\n        \n        $this->add(\n            array(\n                'name' => 'postalcode',\n                'options' => array(\n                        'label' => /* @translate */ 'Postal Code'\n                )\n            )\n        );\n        \n        $this->add(\n            array(\n                'name' => 'city',\n                'options' => array(\n                        'label' => /* @translate */ 'City'\n                )\n            )\n        );\n        $this->add(\n            [\n                'name' => 'country',\n                'options' => [\n                    'label' => /* @translate */ 'Country'\n                ]\n            ]\n        );\n        $this->add(\n            array(\n                'name' => 'phone',\n                'options' => array(\n                    'label' => /* @translate */ 'Phone'\n                )\n            )\n        );\n        $this->add(\n            array(\n                'name' => 'fax',\n                'options' => array(\n                    'label' => /* @translate */ 'Fax'\n                )\n            )\n        );\n    }", "language": "php", "code": "public function init()\n    {\n        $this->setName('contact');\n        \n        $this->add(\n            array(\n                'name' => 'street',\n                'options' => array(\n                        'label' => /* @translate */ 'Street'\n                )\n            )\n        );\n        \n        $this->add(\n            array(\n                'name' => 'houseNumber',\n                'options' => array(\n                        'label' => /* @translate */ 'House Number'\n                )\n            )\n        );\n        \n        $this->add(\n            array(\n                'name' => 'postalcode',\n                'options' => array(\n                        'label' => /* @translate */ 'Postal Code'\n                )\n            )\n        );\n        \n        $this->add(\n            array(\n                'name' => 'city',\n                'options' => array(\n                        'label' => /* @translate */ 'City'\n                )\n            )\n        );\n        $this->add(\n            [\n                'name' => 'country',\n                'options' => [\n                    'label' => /* @translate */ 'Country'\n                ]\n            ]\n        );\n        $this->add(\n            array(\n                'name' => 'phone',\n                'options' => array(\n                    'label' => /* @translate */ 'Phone'\n                )\n            )\n        );\n        $this->add(\n            array(\n                'name' => 'fax',\n                'options' => array(\n                    'label' => /* @translate */ 'Fax'\n                )\n            )\n        );\n    }", "code_tokens": ["public", "function", "init", "(", ")", "{", "$", "this", "->", "setName", "(", "'contact'", ")", ";", "$", "this", "->", "add", "(", "array", "(", "'name'", "=>", "'street'", ",", "'options'", "=>", "array", "(", "'label'", "=>", "/* @translate */", "'Street'", ")", ")", ")", ";", "$", "this", "->", "add", "(", "array", "(", "'name'", "=>", "'houseNumber'", ",", "'options'", "=>", "array", "(", "'label'", "=>", "/* @translate */", "'House Number'", ")", ")", ")", ";", "$", "this", "->", "add", "(", "array", "(", "'name'", "=>", "'postalcode'", ",", "'options'", "=>", "array", "(", "'label'", "=>", "/* @translate */", "'Postal Code'", ")", ")", ")", ";", "$", "this", "->", "add", "(", "array", "(", "'name'", "=>", "'city'", ",", "'options'", "=>", "array", "(", "'label'", "=>", "/* @translate */", "'City'", ")", ")", ")", ";", "$", "this", "->", "add", "(", "[", "'name'", "=>", "'country'", ",", "'options'", "=>", "[", "'label'", "=>", "/* @translate */", "'Country'", "]", "]", ")", ";", "$", "this", "->", "add", "(", "array", "(", "'name'", "=>", "'phone'", ",", "'options'", "=>", "array", "(", "'label'", "=>", "/* @translate */", "'Phone'", ")", ")", ")", ";", "$", "this", "->", "add", "(", "array", "(", "'name'", "=>", "'fax'", ",", "'options'", "=>", "array", "(", "'label'", "=>", "/* @translate */", "'Fax'", ")", ")", ")", ";", "}"], "docstring": "Set the elements for the contact form", "docstring_tokens": ["Set", "the", "elements", "for", "the", "contact", "form"], "sha": "a5d982212be5f445c067656aeb0aa3ca7daf0251", "url": "https://github.com/yawik/organizations/blob/a5d982212be5f445c067656aeb0aa3ca7daf0251/src/Form/OrganizationsContactFieldset.php#L42-L105", "partition": "test"}
{"repo": "TYPO3-Console/TYPO3-Console", "path": "Classes/Console/Error/ExceptionRenderer.php", "func_name": "ExceptionRenderer.getPossibleShortenedFileName", "original_string": "private function getPossibleShortenedFileName($fileName): string\n    {\n        $pathPrefixes = [];\n        if (getenv('TYPO3_PATH_COMPOSER_ROOT')) {\n            $pathPrefixes = [getenv('TYPO3_PATH_COMPOSER_ROOT') . '/'];\n        }\n        $pathPrefixes[] = PATH_site;\n        $fileName = str_replace($pathPrefixes, '', $fileName);\n        $pathPosition = strpos($fileName, 'typo3conf/ext/');\n        $pathAndFilename = ($pathPosition !== false) ? substr($fileName, $pathPosition) : $fileName;\n        $pathPosition = strpos($pathAndFilename, 'typo3/sysext/');\n\n        return ($pathPosition !== false) ? substr($pathAndFilename, $pathPosition) : $pathAndFilename;\n    }", "language": "php", "code": "private function getPossibleShortenedFileName($fileName): string\n    {\n        $pathPrefixes = [];\n        if (getenv('TYPO3_PATH_COMPOSER_ROOT')) {\n            $pathPrefixes = [getenv('TYPO3_PATH_COMPOSER_ROOT') . '/'];\n        }\n        $pathPrefixes[] = PATH_site;\n        $fileName = str_replace($pathPrefixes, '', $fileName);\n        $pathPosition = strpos($fileName, 'typo3conf/ext/');\n        $pathAndFilename = ($pathPosition !== false) ? substr($fileName, $pathPosition) : $fileName;\n        $pathPosition = strpos($pathAndFilename, 'typo3/sysext/');\n\n        return ($pathPosition !== false) ? substr($pathAndFilename, $pathPosition) : $pathAndFilename;\n    }", "code_tokens": ["private", "function", "getPossibleShortenedFileName", "(", "$", "fileName", ")", ":", "string", "{", "$", "pathPrefixes", "=", "[", "]", ";", "if", "(", "getenv", "(", "'TYPO3_PATH_COMPOSER_ROOT'", ")", ")", "{", "$", "pathPrefixes", "=", "[", "getenv", "(", "'TYPO3_PATH_COMPOSER_ROOT'", ")", ".", "'/'", "]", ";", "}", "$", "pathPrefixes", "[", "]", "=", "PATH_site", ";", "$", "fileName", "=", "str_replace", "(", "$", "pathPrefixes", ",", "''", ",", "$", "fileName", ")", ";", "$", "pathPosition", "=", "strpos", "(", "$", "fileName", ",", "'typo3conf/ext/'", ")", ";", "$", "pathAndFilename", "=", "(", "$", "pathPosition", "!==", "false", ")", "?", "substr", "(", "$", "fileName", ",", "$", "pathPosition", ")", ":", "$", "fileName", ";", "$", "pathPosition", "=", "strpos", "(", "$", "pathAndFilename", ",", "'typo3/sysext/'", ")", ";", "return", "(", "$", "pathPosition", "!==", "false", ")", "?", "substr", "(", "$", "pathAndFilename", ",", "$", "pathPosition", ")", ":", "$", "pathAndFilename", ";", "}"], "docstring": "Shorten file name if inside extension or core extension.\n\n@param string $fileName\n@return string", "docstring_tokens": ["Shorten", "file", "name", "if", "inside", "extension", "or", "core", "extension", "."], "sha": "a8983d65aa5e2b7495082059cd72b6403b14abfd", "url": "https://github.com/TYPO3-Console/TYPO3-Console/blob/a8983d65aa5e2b7495082059cd72b6403b14abfd/Classes/Console/Error/ExceptionRenderer.php#L228-L241", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-common/src/Common/Internal/RestProxy.php", "func_name": "RestProxy.addOptionalQueryParam", "original_string": "protected function addOptionalQueryParam(array &$queryParameters, $key, $value)\n    {\n        Validate::isArray($queryParameters, 'queryParameters');\n        Validate::canCastAsString($key, 'key');\n        Validate::canCastAsString($value, 'value');\n\n        if (!is_null($value) && Resources::EMPTY_STRING !== $value) {\n            $queryParameters[$key] = $value;\n        }\n    }", "language": "php", "code": "protected function addOptionalQueryParam(array &$queryParameters, $key, $value)\n    {\n        Validate::isArray($queryParameters, 'queryParameters');\n        Validate::canCastAsString($key, 'key');\n        Validate::canCastAsString($value, 'value');\n\n        if (!is_null($value) && Resources::EMPTY_STRING !== $value) {\n            $queryParameters[$key] = $value;\n        }\n    }", "code_tokens": ["protected", "function", "addOptionalQueryParam", "(", "array", "&", "$", "queryParameters", ",", "$", "key", ",", "$", "value", ")", "{", "Validate", "::", "isArray", "(", "$", "queryParameters", ",", "'queryParameters'", ")", ";", "Validate", "::", "canCastAsString", "(", "$", "key", ",", "'key'", ")", ";", "Validate", "::", "canCastAsString", "(", "$", "value", ",", "'value'", ")", ";", "if", "(", "!", "is_null", "(", "$", "value", ")", "&&", "Resources", "::", "EMPTY_STRING", "!==", "$", "value", ")", "{", "$", "queryParameters", "[", "$", "key", "]", "=", "$", "value", ";", "}", "}"], "docstring": "Adds optional query parameter.\n\nDoesn't add the value if it satisfies empty().\n\n@param array  &$queryParameters The query parameters.\n@param string $key              The query variable name.\n@param string $value            The query variable value.\n\n@return void", "docstring_tokens": ["Adds", "optional", "query", "parameter", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-common/src/Common/Internal/RestProxy.php#L99-L108", "partition": "test"}
{"repo": "imkrimerman/primitive", "path": "src/Primitive/String/String.php", "func_name": "String.toEntities", "original_string": "public function toEntities($flags = ENT_QUOTES, $encoding = 'UTF-8')\n    {\n        return new static(htmlentities($this->string, $flags, $this->retrieveValue($encoding)));\n    }", "language": "php", "code": "public function toEntities($flags = ENT_QUOTES, $encoding = 'UTF-8')\n    {\n        return new static(htmlentities($this->string, $flags, $this->retrieveValue($encoding)));\n    }", "code_tokens": ["public", "function", "toEntities", "(", "$", "flags", "=", "ENT_QUOTES", ",", "$", "encoding", "=", "'UTF-8'", ")", "{", "return", "new", "static", "(", "htmlentities", "(", "$", "this", "->", "string", ",", "$", "flags", ",", "$", "this", "->", "retrieveValue", "(", "$", "encoding", ")", ")", ")", ";", "}"], "docstring": "Convert all applicable characters to HTML entities.\n\n@param int $flags\n@param string|StringContract $encoding\n@return static", "docstring_tokens": ["Convert", "all", "applicable", "characters", "to", "HTML", "entities", "."], "sha": "bdb45bb5109ca07f116cce571b76804e47ac5d56", "url": "https://github.com/imkrimerman/primitive/blob/bdb45bb5109ca07f116cce571b76804e47ac5d56/src/Primitive/String/String.php#L782-L785", "partition": "test"}
{"repo": "shumkov/rediska", "path": "library/Rediska/Commands.php", "func_name": "Rediska_Commands._getCommandLowerNameAndThrowIfNotPresent", "original_string": "protected static function _getCommandLowerNameAndThrowIfNotPresent($name)\n    {\n        $lowerName = strtolower($name);\n\n        if (!isset(self::$_commands[$lowerName])) {\n            throw new Rediska_Exception(\"Command '$name' not found\");\n        }\n\n        return $lowerName;\n    }", "language": "php", "code": "protected static function _getCommandLowerNameAndThrowIfNotPresent($name)\n    {\n        $lowerName = strtolower($name);\n\n        if (!isset(self::$_commands[$lowerName])) {\n            throw new Rediska_Exception(\"Command '$name' not found\");\n        }\n\n        return $lowerName;\n    }", "code_tokens": ["protected", "static", "function", "_getCommandLowerNameAndThrowIfNotPresent", "(", "$", "name", ")", "{", "$", "lowerName", "=", "strtolower", "(", "$", "name", ")", ";", "if", "(", "!", "isset", "(", "self", "::", "$", "_commands", "[", "$", "lowerName", "]", ")", ")", "{", "throw", "new", "Rediska_Exception", "(", "\"Command '$name' not found\"", ")", ";", "}", "return", "$", "lowerName", ";", "}"], "docstring": "Get command lower name and throw exception if command not present\n\n@param <type> $name\n@return <type>", "docstring_tokens": ["Get", "command", "lower", "name", "and", "throw", "exception", "if", "command", "not", "present"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/library/Rediska/Commands.php#L193-L202", "partition": "test"}
{"repo": "Zeeml/Algorithms", "path": "src/Prediction/Linear/LinearRegression.php", "func_name": "LinearRegression.predict", "original_string": "public function predict(DataSet $dataSet)\n    {\n        foreach ($dataSet as $instance) {\n            $prediction = $this\n                ->calculator\n                ->calculate(new LinearPrediction($instance->getDimensions(), $this->coefficients))\n                ->getResult()\n                ->last()\n            ;\n            $instance->addResult(\n                static::class,\n                [\n                    'type'   => self::PREDICTION,\n                    'result' => $prediction\n                ]\n            );\n        }\n\n        $this->calculator->using($dataSet)->calculate(new Benchmark(LinearRegression::class));\n        $results = $this->calculator->getResult()->of(Benchmark::class);\n\n        $this->accuracy = $results[Benchmark::ACCURACY] ?? 0;\n        $this->rmse = $results[Benchmark::RMSE] ?? 0;\n    }", "language": "php", "code": "public function predict(DataSet $dataSet)\n    {\n        foreach ($dataSet as $instance) {\n            $prediction = $this\n                ->calculator\n                ->calculate(new LinearPrediction($instance->getDimensions(), $this->coefficients))\n                ->getResult()\n                ->last()\n            ;\n            $instance->addResult(\n                static::class,\n                [\n                    'type'   => self::PREDICTION,\n                    'result' => $prediction\n                ]\n            );\n        }\n\n        $this->calculator->using($dataSet)->calculate(new Benchmark(LinearRegression::class));\n        $results = $this->calculator->getResult()->of(Benchmark::class);\n\n        $this->accuracy = $results[Benchmark::ACCURACY] ?? 0;\n        $this->rmse = $results[Benchmark::RMSE] ?? 0;\n    }", "code_tokens": ["public", "function", "predict", "(", "DataSet", "$", "dataSet", ")", "{", "foreach", "(", "$", "dataSet", "as", "$", "instance", ")", "{", "$", "prediction", "=", "$", "this", "->", "calculator", "->", "calculate", "(", "new", "LinearPrediction", "(", "$", "instance", "->", "getDimensions", "(", ")", ",", "$", "this", "->", "coefficients", ")", ")", "->", "getResult", "(", ")", "->", "last", "(", ")", ";", "$", "instance", "->", "addResult", "(", "static", "::", "class", ",", "[", "'type'", "=>", "self", "::", "PREDICTION", ",", "'result'", "=>", "$", "prediction", "]", ")", ";", "}", "$", "this", "->", "calculator", "->", "using", "(", "$", "dataSet", ")", "->", "calculate", "(", "new", "Benchmark", "(", "LinearRegression", "::", "class", ")", ")", ";", "$", "results", "=", "$", "this", "->", "calculator", "->", "getResult", "(", ")", "->", "of", "(", "Benchmark", "::", "class", ")", ";", "$", "this", "->", "accuracy", "=", "$", "results", "[", "Benchmark", "::", "ACCURACY", "]", "??", "0", ";", "$", "this", "->", "rmse", "=", "$", "results", "[", "Benchmark", "::", "RMSE", "]", "??", "0", ";", "}"], "docstring": "Makes a linear prediction of input based on coefficients\n@param DataSet $dataSet\n@throws WrongUsageException", "docstring_tokens": ["Makes", "a", "linear", "prediction", "of", "input", "based", "on", "coefficients"], "sha": "8b000dac8d2ecbf8b1d8eb5819dfa1c54d50fc88", "url": "https://github.com/Zeeml/Algorithms/blob/8b000dac8d2ecbf8b1d8eb5819dfa1c54d50fc88/src/Prediction/Linear/LinearRegression.php#L83-L106", "partition": "test"}
{"repo": "thecodingmachine/html.widgets.menu", "path": "src/Mouf/Html/Widgets/Menu/MenuItem.php", "func_name": "MenuItem.getAdditionalStylesByType", "original_string": "public function getAdditionalStylesByType($type) {\n\t\t$return = array();\n\t\tif($this->additionalStyles) {\n\t\t\tforeach ($this->additionalStyles as $additionalStyle) {\n\t\t\t\tif($additionalStyle instanceof $type) {\n\t\t\t\t\t$return[] = $additionalStyle;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}", "language": "php", "code": "public function getAdditionalStylesByType($type) {\n\t\t$return = array();\n\t\tif($this->additionalStyles) {\n\t\t\tforeach ($this->additionalStyles as $additionalStyle) {\n\t\t\t\tif($additionalStyle instanceof $type) {\n\t\t\t\t\t$return[] = $additionalStyle;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}", "code_tokens": ["public", "function", "getAdditionalStylesByType", "(", "$", "type", ")", "{", "$", "return", "=", "array", "(", ")", ";", "if", "(", "$", "this", "->", "additionalStyles", ")", "{", "foreach", "(", "$", "this", "->", "additionalStyles", "as", "$", "additionalStyle", ")", "{", "if", "(", "$", "additionalStyle", "instanceof", "$", "type", ")", "{", "$", "return", "[", "]", "=", "$", "additionalStyle", ";", "}", "}", "}", "return", "$", "return", ";", "}"], "docstring": "Returns the list of additionnal style\n@return array<MenuItemStyleInterface>", "docstring_tokens": ["Returns", "the", "list", "of", "additionnal", "style"], "sha": "94b140d8dbfd1a071b5cd61ab361cd5948184642", "url": "https://github.com/thecodingmachine/html.widgets.menu/blob/94b140d8dbfd1a071b5cd61ab361cd5948184642/src/Mouf/Html/Widgets/Menu/MenuItem.php#L375-L385", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Base/Logger/StdioLogger.php", "func_name": "StdioLogger.notice", "original_string": "public function notice($message, array $context = array(), $traceShift = 0)\n    {\n        $this->log(LogLevel::NOTICE, $message, $context, $traceShift);\n    }", "language": "php", "code": "public function notice($message, array $context = array(), $traceShift = 0)\n    {\n        $this->log(LogLevel::NOTICE, $message, $context, $traceShift);\n    }", "code_tokens": ["public", "function", "notice", "(", "$", "message", ",", "array", "$", "context", "=", "array", "(", ")", ",", "$", "traceShift", "=", "0", ")", "{", "$", "this", "->", "log", "(", "LogLevel", "::", "NOTICE", ",", "$", "message", ",", "$", "context", ",", "$", "traceShift", ")", ";", "}"], "docstring": "Normal but significant events.\n\n@param string|mixed $message\n@param array        $context\n@param int          $traceShift\n\n@return void", "docstring_tokens": ["Normal", "but", "significant", "events", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Base/Logger/StdioLogger.php#L219-L222", "partition": "test"}
{"repo": "groovel/newsletter-mailchimp", "path": "src/services/MailChimpClient.php", "func_name": "MailChimpClient.getMember", "original_string": "public function getMember($email,$listid)\n    {\n    \t$action =  \"lists/\".$listid.\"/members/\" . md5($email);\n   \t\treturn self::getData($action);\n    }", "language": "php", "code": "public function getMember($email,$listid)\n    {\n    \t$action =  \"lists/\".$listid.\"/members/\" . md5($email);\n   \t\treturn self::getData($action);\n    }", "code_tokens": ["public", "function", "getMember", "(", "$", "email", ",", "$", "listid", ")", "{", "$", "action", "=", "\"lists/\"", ".", "$", "listid", ".", "\"/members/\"", ".", "md5", "(", "$", "email", ")", ";", "return", "self", "::", "getData", "(", "$", "action", ")", ";", "}"], "docstring": "get a user from a given listid with a given email\n@param $email\n@param $listid\n@return mixed", "docstring_tokens": ["get", "a", "user", "from", "a", "given", "listid", "with", "a", "given", "email"], "sha": "bc21a7df65f1001a1126f4962917eb2604f898c2", "url": "https://github.com/groovel/newsletter-mailchimp/blob/bc21a7df65f1001a1126f4962917eb2604f898c2/src/services/MailChimpClient.php#L143-L147", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/types/class-papi-page-type.php", "func_name": "Papi_Page_Type.setup_page_templates", "original_string": "protected function setup_page_templates() {\n\t\tif ( ! is_array( $this->template ) || ! $this->has_post_type( papi_get_post_type() ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->show_page_template = true;\n\t\tforeach ( $this->post_type as $post_type ) {\n\t\t\t// Can't use `theme_templates` filter since it's added in 4.9.6.\n\t\t\tadd_filter( \"theme_{$post_type}_templates\", function( $templates ) {\n\t\t\t\tforeach ( $this->template as $template ) {\n\t\t\t\t\tif ( ! is_array( $template ) || ! isset( $template['template'], $template['label'] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$templates[$template['template']] = $template['label'];\n\t\t\t\t}\n\n\t\t\t\treturn $templates;\n\t\t\t} );\n\t\t}\n\t}", "language": "php", "code": "protected function setup_page_templates() {\n\t\tif ( ! is_array( $this->template ) || ! $this->has_post_type( papi_get_post_type() ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->show_page_template = true;\n\t\tforeach ( $this->post_type as $post_type ) {\n\t\t\t// Can't use `theme_templates` filter since it's added in 4.9.6.\n\t\t\tadd_filter( \"theme_{$post_type}_templates\", function( $templates ) {\n\t\t\t\tforeach ( $this->template as $template ) {\n\t\t\t\t\tif ( ! is_array( $template ) || ! isset( $template['template'], $template['label'] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$templates[$template['template']] = $template['label'];\n\t\t\t\t}\n\n\t\t\t\treturn $templates;\n\t\t\t} );\n\t\t}\n\t}", "code_tokens": ["protected", "function", "setup_page_templates", "(", ")", "{", "if", "(", "!", "is_array", "(", "$", "this", "->", "template", ")", "||", "!", "$", "this", "->", "has_post_type", "(", "papi_get_post_type", "(", ")", ")", ")", "{", "return", ";", "}", "$", "this", "->", "show_page_template", "=", "true", ";", "foreach", "(", "$", "this", "->", "post_type", "as", "$", "post_type", ")", "{", "// Can't use `theme_templates` filter since it's added in 4.9.6.", "add_filter", "(", "\"theme_{$post_type}_templates\"", ",", "function", "(", "$", "templates", ")", "{", "foreach", "(", "$", "this", "->", "template", "as", "$", "template", ")", "{", "if", "(", "!", "is_array", "(", "$", "template", ")", "||", "!", "isset", "(", "$", "template", "[", "'template'", "]", ",", "$", "template", "[", "'label'", "]", ")", ")", "{", "continue", ";", "}", "$", "templates", "[", "$", "template", "[", "'template'", "]", "]", "=", "$", "template", "[", "'label'", "]", ";", "}", "return", "$", "templates", ";", "}", ")", ";", "}", "}"], "docstring": "Setup page templates if templates is a array.", "docstring_tokens": ["Setup", "page", "templates", "if", "templates", "is", "a", "array", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/types/class-papi-page-type.php#L422-L442", "partition": "test"}
{"repo": "activecollab/authentication", "path": "src/Saml/SamlUtils.php", "func_name": "SamlUtils.parseSamlResponse", "original_string": "public function parseSamlResponse(array $payload)\n    {\n        $deserialization_context = new DeserializationContext();\n        $deserialization_context->getDocument()->loadXML(base64_decode($payload['SAMLResponse']));\n\n        $saml_response = new Response();\n        $saml_response->deserialize($deserialization_context->getDocument()->firstChild, $deserialization_context);\n\n        return $saml_response;\n    }", "language": "php", "code": "public function parseSamlResponse(array $payload)\n    {\n        $deserialization_context = new DeserializationContext();\n        $deserialization_context->getDocument()->loadXML(base64_decode($payload['SAMLResponse']));\n\n        $saml_response = new Response();\n        $saml_response->deserialize($deserialization_context->getDocument()->firstChild, $deserialization_context);\n\n        return $saml_response;\n    }", "code_tokens": ["public", "function", "parseSamlResponse", "(", "array", "$", "payload", ")", "{", "$", "deserialization_context", "=", "new", "DeserializationContext", "(", ")", ";", "$", "deserialization_context", "->", "getDocument", "(", ")", "->", "loadXML", "(", "base64_decode", "(", "$", "payload", "[", "'SAMLResponse'", "]", ")", ")", ";", "$", "saml_response", "=", "new", "Response", "(", ")", ";", "$", "saml_response", "->", "deserialize", "(", "$", "deserialization_context", "->", "getDocument", "(", ")", "->", "firstChild", ",", "$", "deserialization_context", ")", ";", "return", "$", "saml_response", ";", "}"], "docstring": "Parse saml response.\n\n@param  array    $payload\n@return Response", "docstring_tokens": ["Parse", "saml", "response", "."], "sha": "ad7feeab769492a8880669fdc41b075c0f316618", "url": "https://github.com/activecollab/authentication/blob/ad7feeab769492a8880669fdc41b075c0f316618/src/Saml/SamlUtils.php#L88-L97", "partition": "test"}
{"repo": "shumkov/rediska", "path": "library/Rediska/Zend/Cache/Backend/Redis.php", "func_name": "Rediska_Zend_Cache_Backend_Redis.load", "original_string": "public function load($id, $doNotTestCacheValidity = false)\n    {\n        $id = (array) $id;\n        foreach ($id as $key){\n            $key = $this->_options['storage']['prefix_key'] . $key;\n            $this->_getTransactionByKey($key)\n                ->getFromHash(\n                    $key,\n                    self::FIELD_DATA\n                );\n        }\n        $oldSerializaerAdapter = $this->getRediska()->getSerializer()->getAdapter();\n        $this->getRediska()->setSerializerAdapter('toString');\n        $result = $this->_execTransactions();\n        $this->getRediska()->getSerializer()->setAdapter($oldSerializaerAdapter);\n        if(count($result) == 1){\n            if(null === ($result = array_shift($result))){\n                return false;\n            } else {\n                return $result;\n            }\n        } else {\n            return $result;\n        }\n    }", "language": "php", "code": "public function load($id, $doNotTestCacheValidity = false)\n    {\n        $id = (array) $id;\n        foreach ($id as $key){\n            $key = $this->_options['storage']['prefix_key'] . $key;\n            $this->_getTransactionByKey($key)\n                ->getFromHash(\n                    $key,\n                    self::FIELD_DATA\n                );\n        }\n        $oldSerializaerAdapter = $this->getRediska()->getSerializer()->getAdapter();\n        $this->getRediska()->setSerializerAdapter('toString');\n        $result = $this->_execTransactions();\n        $this->getRediska()->getSerializer()->setAdapter($oldSerializaerAdapter);\n        if(count($result) == 1){\n            if(null === ($result = array_shift($result))){\n                return false;\n            } else {\n                return $result;\n            }\n        } else {\n            return $result;\n        }\n    }", "code_tokens": ["public", "function", "load", "(", "$", "id", ",", "$", "doNotTestCacheValidity", "=", "false", ")", "{", "$", "id", "=", "(", "array", ")", "$", "id", ";", "foreach", "(", "$", "id", "as", "$", "key", ")", "{", "$", "key", "=", "$", "this", "->", "_options", "[", "'storage'", "]", "[", "'prefix_key'", "]", ".", "$", "key", ";", "$", "this", "->", "_getTransactionByKey", "(", "$", "key", ")", "->", "getFromHash", "(", "$", "key", ",", "self", "::", "FIELD_DATA", ")", ";", "}", "$", "oldSerializaerAdapter", "=", "$", "this", "->", "getRediska", "(", ")", "->", "getSerializer", "(", ")", "->", "getAdapter", "(", ")", ";", "$", "this", "->", "getRediska", "(", ")", "->", "setSerializerAdapter", "(", "'toString'", ")", ";", "$", "result", "=", "$", "this", "->", "_execTransactions", "(", ")", ";", "$", "this", "->", "getRediska", "(", ")", "->", "getSerializer", "(", ")", "->", "setAdapter", "(", "$", "oldSerializaerAdapter", ")", ";", "if", "(", "count", "(", "$", "result", ")", "==", "1", ")", "{", "if", "(", "null", "===", "(", "$", "result", "=", "array_shift", "(", "$", "result", ")", ")", ")", "{", "return", "false", ";", "}", "else", "{", "return", "$", "result", ";", "}", "}", "else", "{", "return", "$", "result", ";", "}", "}"], "docstring": "Load value with given id from cache\n\n@param  string  $id                     Cache id\n@param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested\n@return string|false cached datas", "docstring_tokens": ["Load", "value", "with", "given", "id", "from", "cache"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/library/Rediska/Zend/Cache/Backend/Redis.php#L178-L202", "partition": "test"}
{"repo": "maniaplanet/manialive-plugins", "path": "Standard/TeamSpeak/TeamSpeak3/Node/Server.php", "func_name": "Server.sortClientList", "original_string": "protected static function sortClientList(Client $a, Client $b)\r\n  {\r\n    if(get_class($a) != get_class($b))\r\n    {\r\n      return 0;\r\n\r\n      /* workaround for PHP bug #50688 */\r\n      throw new \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Adapter\\ServerQuery\\Exception(\"invalid parameter\", 0x602);\r\n    }\r\n\r\n    if(!$a instanceof Client)\r\n    {\r\n      return 0;\r\n\r\n      /* workaround for PHP bug #50688 */\r\n      throw new \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Adapter\\ServerQuery\\Exception(\"convert error\", 0x604);\r\n    }\r\n\r\n    if($a->getProperty(\"client_talk_power\", 0) != $b->getProperty(\"client_talk_power\", 0))\r\n    {\r\n      return ($a->getProperty(\"client_talk_power\", 0) > $b->getProperty(\"client_talk_power\", 0)) ? -1 : 1;\r\n    }\r\n\r\n    if($a->getProperty(\"client_is_talker\", 0) != $b->getProperty(\"client_is_talker\", 0))\r\n    {\r\n      return ($a->getProperty(\"client_is_talker\", 0) > $b->getProperty(\"client_is_talker\", 0)) ? -1 : 1;\r\n    }\r\n\r\n    return strcmp(strtolower($a[\"client_nickname\"]), strtolower($b[\"client_nickname\"]));\r\n  }", "language": "php", "code": "protected static function sortClientList(Client $a, Client $b)\r\n  {\r\n    if(get_class($a) != get_class($b))\r\n    {\r\n      return 0;\r\n\r\n      /* workaround for PHP bug #50688 */\r\n      throw new \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Adapter\\ServerQuery\\Exception(\"invalid parameter\", 0x602);\r\n    }\r\n\r\n    if(!$a instanceof Client)\r\n    {\r\n      return 0;\r\n\r\n      /* workaround for PHP bug #50688 */\r\n      throw new \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Adapter\\ServerQuery\\Exception(\"convert error\", 0x604);\r\n    }\r\n\r\n    if($a->getProperty(\"client_talk_power\", 0) != $b->getProperty(\"client_talk_power\", 0))\r\n    {\r\n      return ($a->getProperty(\"client_talk_power\", 0) > $b->getProperty(\"client_talk_power\", 0)) ? -1 : 1;\r\n    }\r\n\r\n    if($a->getProperty(\"client_is_talker\", 0) != $b->getProperty(\"client_is_talker\", 0))\r\n    {\r\n      return ($a->getProperty(\"client_is_talker\", 0) > $b->getProperty(\"client_is_talker\", 0)) ? -1 : 1;\r\n    }\r\n\r\n    return strcmp(strtolower($a[\"client_nickname\"]), strtolower($b[\"client_nickname\"]));\r\n  }", "code_tokens": ["protected", "static", "function", "sortClientList", "(", "Client", "$", "a", ",", "Client", "$", "b", ")", "{", "if", "(", "get_class", "(", "$", "a", ")", "!=", "get_class", "(", "$", "b", ")", ")", "{", "return", "0", ";", "/* workaround for PHP bug #50688 */", "throw", "new", "\\", "ManiaLivePlugins", "\\", "Standard", "\\", "TeamSpeak", "\\", "TeamSpeak3", "\\", "Adapter", "\\", "ServerQuery", "\\", "Exception", "(", "\"invalid parameter\"", ",", "0x602", ")", ";", "}", "if", "(", "!", "$", "a", "instanceof", "Client", ")", "{", "return", "0", ";", "/* workaround for PHP bug #50688 */", "throw", "new", "\\", "ManiaLivePlugins", "\\", "Standard", "\\", "TeamSpeak", "\\", "TeamSpeak3", "\\", "Adapter", "\\", "ServerQuery", "\\", "Exception", "(", "\"convert error\"", ",", "0x604", ")", ";", "}", "if", "(", "$", "a", "->", "getProperty", "(", "\"client_talk_power\"", ",", "0", ")", "!=", "$", "b", "->", "getProperty", "(", "\"client_talk_power\"", ",", "0", ")", ")", "{", "return", "(", "$", "a", "->", "getProperty", "(", "\"client_talk_power\"", ",", "0", ")", ">", "$", "b", "->", "getProperty", "(", "\"client_talk_power\"", ",", "0", ")", ")", "?", "-", "1", ":", "1", ";", "}", "if", "(", "$", "a", "->", "getProperty", "(", "\"client_is_talker\"", ",", "0", ")", "!=", "$", "b", "->", "getProperty", "(", "\"client_is_talker\"", ",", "0", ")", ")", "{", "return", "(", "$", "a", "->", "getProperty", "(", "\"client_is_talker\"", ",", "0", ")", ">", "$", "b", "->", "getProperty", "(", "\"client_is_talker\"", ",", "0", ")", ")", "?", "-", "1", ":", "1", ";", "}", "return", "strcmp", "(", "strtolower", "(", "$", "a", "[", "\"client_nickname\"", "]", ")", ",", "strtolower", "(", "$", "b", "[", "\"client_nickname\"", "]", ")", ")", ";", "}"], "docstring": "Internal callback funtion for sorting of client objects.\n\n@param  Client $a\n@param  Client $b\n@return integer", "docstring_tokens": ["Internal", "callback", "funtion", "for", "sorting", "of", "client", "objects", "."], "sha": "f3f37da6836fe3d06fed32e75880caa6e9c0496b", "url": "https://github.com/maniaplanet/manialive-plugins/blob/f3f37da6836fe3d06fed32e75880caa6e9c0496b/Standard/TeamSpeak/TeamSpeak3/Node/Server.php#L2159-L2188", "partition": "test"}
{"repo": "oxygen-cms/data", "path": "src/Migrations/MigrationsServiceProvider.php", "func_name": "MigrationsServiceProvider.register", "original_string": "public function register() {\n        $this->loadEntitiesFrom(__DIR__);\n\n        $this->app->singleton('migration.repository', function($app) {\n            return new DoctrineMigrationRepository(\n                function() use($app) {\n                    return $app->make(EntityManagerInterface::class);\n                },\n                function() use($app) {\n                    return $app->make(SchemaTool::class);\n                },\n                function() use($app) {\n                    return $app->make(ClassMetadataFactory::class);\n                }\n            );\n        });\n        $this->app->bind(MigrationRepositoryInterface::class, 'migration.repository');\n    }", "language": "php", "code": "public function register() {\n        $this->loadEntitiesFrom(__DIR__);\n\n        $this->app->singleton('migration.repository', function($app) {\n            return new DoctrineMigrationRepository(\n                function() use($app) {\n                    return $app->make(EntityManagerInterface::class);\n                },\n                function() use($app) {\n                    return $app->make(SchemaTool::class);\n                },\n                function() use($app) {\n                    return $app->make(ClassMetadataFactory::class);\n                }\n            );\n        });\n        $this->app->bind(MigrationRepositoryInterface::class, 'migration.repository');\n    }", "code_tokens": ["public", "function", "register", "(", ")", "{", "$", "this", "->", "loadEntitiesFrom", "(", "__DIR__", ")", ";", "$", "this", "->", "app", "->", "singleton", "(", "'migration.repository'", ",", "function", "(", "$", "app", ")", "{", "return", "new", "DoctrineMigrationRepository", "(", "function", "(", ")", "use", "(", "$", "app", ")", "{", "return", "$", "app", "->", "make", "(", "EntityManagerInterface", "::", "class", ")", ";", "}", ",", "function", "(", ")", "use", "(", "$", "app", ")", "{", "return", "$", "app", "->", "make", "(", "SchemaTool", "::", "class", ")", ";", "}", ",", "function", "(", ")", "use", "(", "$", "app", ")", "{", "return", "$", "app", "->", "make", "(", "ClassMetadataFactory", "::", "class", ")", ";", "}", ")", ";", "}", ")", ";", "$", "this", "->", "app", "->", "bind", "(", "MigrationRepositoryInterface", "::", "class", ",", "'migration.repository'", ")", ";", "}"], "docstring": "Registers the migration repository.", "docstring_tokens": ["Registers", "the", "migration", "repository", "."], "sha": "8783d4dee75805a9dcbdcf932e12328ee0224865", "url": "https://github.com/oxygen-cms/data/blob/8783d4dee75805a9dcbdcf932e12328ee0224865/src/Migrations/MigrationsServiceProvider.php#L25-L42", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Database/Migrations/Migrator.php", "func_name": "Migrator.getMigrationsForRollback", "original_string": "protected function getMigrationsForRollback(array $options)\n    {\n        $steps = Arr::get($options, 'step', 0);\n\n        if ($steps > 0) {\n            return $this->storage->getMigrations($steps);\n        } else {\n            return $this->storage->getLast();\n        }\n    }", "language": "php", "code": "protected function getMigrationsForRollback(array $options)\n    {\n        $steps = Arr::get($options, 'step', 0);\n\n        if ($steps > 0) {\n            return $this->storage->getMigrations($steps);\n        } else {\n            return $this->storage->getLast();\n        }\n    }", "code_tokens": ["protected", "function", "getMigrationsForRollback", "(", "array", "$", "options", ")", "{", "$", "steps", "=", "Arr", "::", "get", "(", "$", "options", ",", "'step'", ",", "0", ")", ";", "if", "(", "$", "steps", ">", "0", ")", "{", "return", "$", "this", "->", "storage", "->", "getMigrations", "(", "$", "steps", ")", ";", "}", "else", "{", "return", "$", "this", "->", "storage", "->", "getLast", "(", ")", ";", "}", "}"], "docstring": "Get the migrations for a rollback operation.\n\n@param  array $options\n\n@return array", "docstring_tokens": ["Get", "the", "migrations", "for", "a", "rollback", "operation", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Database/Migrations/Migrator.php#L225-L234", "partition": "test"}
{"repo": "WordPress-Coding-Standards/WordPress-Coding-Standards", "path": "WordPress/Sniffs/Arrays/ArrayIndentationSniff.php", "func_name": "ArrayIndentationSniff.ignore_token", "original_string": "protected function ignore_token( $ptr ) {\n\t\t$token_code = $this->tokens[ $ptr ]['code'];\n\n\t\tif ( isset( $this->ignore_tokens[ $token_code ] ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t/*\n\t\t * If it's a subsequent line of a multi-line sting, it will not start with a quote\n\t\t * character, nor just *be* a quote character.\n\t\t */\n\t\tif ( \\T_CONSTANT_ENCAPSED_STRING === $token_code\n\t\t\t|| \\T_DOUBLE_QUOTED_STRING === $token_code\n\t\t) {\n\t\t\t// Deal with closing quote of a multi-line string being on its own line.\n\t\t\tif ( \"'\" === $this->tokens[ $ptr ]['content']\n\t\t\t\t|| '\"' === $this->tokens[ $ptr ]['content']\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Deal with subsequent lines of a multi-line string where the token is broken up per line.\n\t\t\tif ( \"'\" !== $this->tokens[ $ptr ]['content'][0]\n\t\t\t\t&& '\"' !== $this->tokens[ $ptr ]['content'][0]\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "language": "php", "code": "protected function ignore_token( $ptr ) {\n\t\t$token_code = $this->tokens[ $ptr ]['code'];\n\n\t\tif ( isset( $this->ignore_tokens[ $token_code ] ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t/*\n\t\t * If it's a subsequent line of a multi-line sting, it will not start with a quote\n\t\t * character, nor just *be* a quote character.\n\t\t */\n\t\tif ( \\T_CONSTANT_ENCAPSED_STRING === $token_code\n\t\t\t|| \\T_DOUBLE_QUOTED_STRING === $token_code\n\t\t) {\n\t\t\t// Deal with closing quote of a multi-line string being on its own line.\n\t\t\tif ( \"'\" === $this->tokens[ $ptr ]['content']\n\t\t\t\t|| '\"' === $this->tokens[ $ptr ]['content']\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Deal with subsequent lines of a multi-line string where the token is broken up per line.\n\t\t\tif ( \"'\" !== $this->tokens[ $ptr ]['content'][0]\n\t\t\t\t&& '\"' !== $this->tokens[ $ptr ]['content'][0]\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "code_tokens": ["protected", "function", "ignore_token", "(", "$", "ptr", ")", "{", "$", "token_code", "=", "$", "this", "->", "tokens", "[", "$", "ptr", "]", "[", "'code'", "]", ";", "if", "(", "isset", "(", "$", "this", "->", "ignore_tokens", "[", "$", "token_code", "]", ")", ")", "{", "return", "true", ";", "}", "/*\n\t\t * If it's a subsequent line of a multi-line sting, it will not start with a quote\n\t\t * character, nor just *be* a quote character.\n\t\t */", "if", "(", "\\", "T_CONSTANT_ENCAPSED_STRING", "===", "$", "token_code", "||", "\\", "T_DOUBLE_QUOTED_STRING", "===", "$", "token_code", ")", "{", "// Deal with closing quote of a multi-line string being on its own line.", "if", "(", "\"'\"", "===", "$", "this", "->", "tokens", "[", "$", "ptr", "]", "[", "'content'", "]", "||", "'\"'", "===", "$", "this", "->", "tokens", "[", "$", "ptr", "]", "[", "'content'", "]", ")", "{", "return", "true", ";", "}", "// Deal with subsequent lines of a multi-line string where the token is broken up per line.", "if", "(", "\"'\"", "!==", "$", "this", "->", "tokens", "[", "$", "ptr", "]", "[", "'content'", "]", "[", "0", "]", "&&", "'\"'", "!==", "$", "this", "->", "tokens", "[", "$", "ptr", "]", "[", "'content'", "]", "[", "0", "]", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Should the token be ignored ?\n\nThis method is only intended to be used with the first token on a line\nfor subsequent lines in an multi-line array item.\n\n@param int $ptr Stack pointer to the first token on a line.\n\n@return bool", "docstring_tokens": ["Should", "the", "token", "be", "ignored", "?"], "sha": "04bfa1284ca652e8e9befe82134f440cc31f655d", "url": "https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/blob/04bfa1284ca652e8e9befe82134f440cc31f655d/WordPress/Sniffs/Arrays/ArrayIndentationSniff.php#L404-L434", "partition": "test"}
{"repo": "aphiria/router", "path": "src/Matchers/Trees/Compilers/TrieCompiler.php", "func_name": "TrieCompiler.createTrieNode", "original_string": "private static function createTrieNode(\n        array &$segmentBuffer,\n        bool &$segmentContainsVariable,\n        bool $isEndpoint,\n        Route $route,\n        ?TrieNode $hostTrie\n    ): TrieNode {\n        $routes = $isEndpoint ? $route : [];\n\n        if ($segmentContainsVariable) {\n            $node = new VariableTrieNode($segmentBuffer, [], $routes, $hostTrie);\n        } else {\n            $node = new LiteralTrieNode(\\implode('', $segmentBuffer), [], $routes, $hostTrie);\n        }\n\n        // Clear the buffer data\n        $segmentBuffer = [];\n        $segmentContainsVariable = false;\n\n        return $node;\n    }", "language": "php", "code": "private static function createTrieNode(\n        array &$segmentBuffer,\n        bool &$segmentContainsVariable,\n        bool $isEndpoint,\n        Route $route,\n        ?TrieNode $hostTrie\n    ): TrieNode {\n        $routes = $isEndpoint ? $route : [];\n\n        if ($segmentContainsVariable) {\n            $node = new VariableTrieNode($segmentBuffer, [], $routes, $hostTrie);\n        } else {\n            $node = new LiteralTrieNode(\\implode('', $segmentBuffer), [], $routes, $hostTrie);\n        }\n\n        // Clear the buffer data\n        $segmentBuffer = [];\n        $segmentContainsVariable = false;\n\n        return $node;\n    }", "code_tokens": ["private", "static", "function", "createTrieNode", "(", "array", "&", "$", "segmentBuffer", ",", "bool", "&", "$", "segmentContainsVariable", ",", "bool", "$", "isEndpoint", ",", "Route", "$", "route", ",", "?", "TrieNode", "$", "hostTrie", ")", ":", "TrieNode", "{", "$", "routes", "=", "$", "isEndpoint", "?", "$", "route", ":", "[", "]", ";", "if", "(", "$", "segmentContainsVariable", ")", "{", "$", "node", "=", "new", "VariableTrieNode", "(", "$", "segmentBuffer", ",", "[", "]", ",", "$", "routes", ",", "$", "hostTrie", ")", ";", "}", "else", "{", "$", "node", "=", "new", "LiteralTrieNode", "(", "\\", "implode", "(", "''", ",", "$", "segmentBuffer", ")", ",", "[", "]", ",", "$", "routes", ",", "$", "hostTrie", ")", ";", "}", "// Clear the buffer data", "$", "segmentBuffer", "=", "[", "]", ";", "$", "segmentContainsVariable", "=", "false", ";", "return", "$", "node", ";", "}"], "docstring": "Creates a trie node\n\n@param string[]|RouteVariable[] $segmentBuffer The current buffer of parts (eg text or RouteVariables)\n@param bool $segmentContainsVariable Whether or not the segment contains a variable\n@param bool $isEndpoint Whether or not this node is an endpoint\n@param Route $route The current route\n@param TrieNode|null $hostTrie The host trie\n@return TrieNode The created node", "docstring_tokens": ["Creates", "a", "trie", "node"], "sha": "d9fa90d5f17dddbd52f311c2ec5cfec5865fd66b", "url": "https://github.com/aphiria/router/blob/d9fa90d5f17dddbd52f311c2ec5cfec5865fd66b/src/Matchers/Trees/Compilers/TrieCompiler.php#L210-L230", "partition": "test"}
{"repo": "FiveLab/Reflection", "path": "src/Reflection.php", "func_name": "Reflection.clear", "original_string": "public static function clear($mode = null)\n    {\n        if (is_numeric($mode)) {\n            $mode = self::TYPE_CLASS | self::TYPE_OBJECT;\n        }\n\n        if ($mode & self::TYPE_CLASS) {\n            self::$classReflections = array();\n        }\n\n        if ($mode & self::TYPE_OBJECT) {\n            self::$objectReflections = array();\n        }\n    }", "language": "php", "code": "public static function clear($mode = null)\n    {\n        if (is_numeric($mode)) {\n            $mode = self::TYPE_CLASS | self::TYPE_OBJECT;\n        }\n\n        if ($mode & self::TYPE_CLASS) {\n            self::$classReflections = array();\n        }\n\n        if ($mode & self::TYPE_OBJECT) {\n            self::$objectReflections = array();\n        }\n    }", "code_tokens": ["public", "static", "function", "clear", "(", "$", "mode", "=", "null", ")", "{", "if", "(", "is_numeric", "(", "$", "mode", ")", ")", "{", "$", "mode", "=", "self", "::", "TYPE_CLASS", "|", "self", "::", "TYPE_OBJECT", ";", "}", "if", "(", "$", "mode", "&", "self", "::", "TYPE_CLASS", ")", "{", "self", "::", "$", "classReflections", "=", "array", "(", ")", ";", "}", "if", "(", "$", "mode", "&", "self", "::", "TYPE_OBJECT", ")", "{", "self", "::", "$", "objectReflections", "=", "array", "(", ")", ";", "}", "}"], "docstring": "Clear internal storage\n\n@param int $mode", "docstring_tokens": ["Clear", "internal", "storage"], "sha": "7b97a32f8a63a21f21ca51c3401ca5e4df7cb179", "url": "https://github.com/FiveLab/Reflection/blob/7b97a32f8a63a21f21ca51c3401ca5e4df7cb179/src/Reflection.php#L316-L329", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Template.php", "func_name": "Template.parentVars", "original_string": "protected function parentVars(string $file = null): array\n    {\n        if (isset($file)) {\n            return $this->parent_vars[$file] ?? [];\n        }\n        $closest_ancestor_vars = end($this->parent_vars);\n        return $parent_vars    = $closest_ancestor_vars ?: [];\n    }", "language": "php", "code": "protected function parentVars(string $file = null): array\n    {\n        if (isset($file)) {\n            return $this->parent_vars[$file] ?? [];\n        }\n        $closest_ancestor_vars = end($this->parent_vars);\n        return $parent_vars    = $closest_ancestor_vars ?: [];\n    }", "code_tokens": ["protected", "function", "parentVars", "(", "string", "$", "file", "=", "null", ")", ":", "array", "{", "if", "(", "isset", "(", "$", "file", ")", ")", "{", "return", "$", "this", "->", "parent_vars", "[", "$", "file", "]", "??", "[", "]", ";", "}", "$", "closest_ancestor_vars", "=", "end", "(", "$", "this", "->", "parent_vars", ")", ";", "return", "$", "parent_vars", "=", "$", "closest_ancestor_vars", "?", ":", "[", "]", ";", "}"], "docstring": "Parent template vars.\n\n@since 150424 Initial release.\n\n@param string|null $file Template file.\n\n@return array Parent template vars.", "docstring_tokens": ["Parent", "template", "vars", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Template.php#L220-L227", "partition": "test"}
{"repo": "wasinger/html-pretty-min", "path": "PrettyMin.php", "func_name": "PrettyMin.minify", "original_string": "public function minify($options = [])\n    {\n        $resolver = new OptionsResolver();\n        $resolver->setDefaults([\n            'minify_js' => $this->options['minify_js'],\n            'minify_css' => $this->options['minify_css'],\n            'remove_comments' => $this->options['remove_comments'],\n            'remove_empty_attributes' => $this->options['remove_empty_attributes']\n        ]);\n        $options = $resolver->resolve($options);\n\n        if ($options['minify_js']) {\n            $this->minifyJavascript();\n        }\n        if ($options['minify_css']) {\n            $this->minifyCss();\n        }\n        if ($options['remove_comments']) {\n            $this->removeComments();\n        }\n\n        if ($options['remove_empty_attributes']) {\n            $this->removeEmptyAttributes();\n        }\n\n        $this->removeWhitespace();\n\n        return $this;\n    }", "language": "php", "code": "public function minify($options = [])\n    {\n        $resolver = new OptionsResolver();\n        $resolver->setDefaults([\n            'minify_js' => $this->options['minify_js'],\n            'minify_css' => $this->options['minify_css'],\n            'remove_comments' => $this->options['remove_comments'],\n            'remove_empty_attributes' => $this->options['remove_empty_attributes']\n        ]);\n        $options = $resolver->resolve($options);\n\n        if ($options['minify_js']) {\n            $this->minifyJavascript();\n        }\n        if ($options['minify_css']) {\n            $this->minifyCss();\n        }\n        if ($options['remove_comments']) {\n            $this->removeComments();\n        }\n\n        if ($options['remove_empty_attributes']) {\n            $this->removeEmptyAttributes();\n        }\n\n        $this->removeWhitespace();\n\n        return $this;\n    }", "code_tokens": ["public", "function", "minify", "(", "$", "options", "=", "[", "]", ")", "{", "$", "resolver", "=", "new", "OptionsResolver", "(", ")", ";", "$", "resolver", "->", "setDefaults", "(", "[", "'minify_js'", "=>", "$", "this", "->", "options", "[", "'minify_js'", "]", ",", "'minify_css'", "=>", "$", "this", "->", "options", "[", "'minify_css'", "]", ",", "'remove_comments'", "=>", "$", "this", "->", "options", "[", "'remove_comments'", "]", ",", "'remove_empty_attributes'", "=>", "$", "this", "->", "options", "[", "'remove_empty_attributes'", "]", "]", ")", ";", "$", "options", "=", "$", "resolver", "->", "resolve", "(", "$", "options", ")", ";", "if", "(", "$", "options", "[", "'minify_js'", "]", ")", "{", "$", "this", "->", "minifyJavascript", "(", ")", ";", "}", "if", "(", "$", "options", "[", "'minify_css'", "]", ")", "{", "$", "this", "->", "minifyCss", "(", ")", ";", "}", "if", "(", "$", "options", "[", "'remove_comments'", "]", ")", "{", "$", "this", "->", "removeComments", "(", ")", ";", "}", "if", "(", "$", "options", "[", "'remove_empty_attributes'", "]", ")", "{", "$", "this", "->", "removeEmptyAttributes", "(", ")", ";", "}", "$", "this", "->", "removeWhitespace", "(", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Minify the loaded HTML document\n\n@param array $options\n@return PrettyMin", "docstring_tokens": ["Minify", "the", "loaded", "HTML", "document"], "sha": "1a9503664ff39dea044b433973316186bf094aae", "url": "https://github.com/wasinger/html-pretty-min/blob/1a9503664ff39dea044b433973316186bf094aae/PrettyMin.php#L91-L119", "partition": "test"}
{"repo": "hamjoint/mustard-messaging", "path": "src/lib/Http/Controllers/MessagingController.php", "func_name": "MessagingController.getAddressBook", "original_string": "public function getAddressBook()\n    {\n        $acquaintances = Auth::user()->getAcquaintances();\n\n        return view('mustard::messages.address-book', [\n            'acquaintances' => new Paginator($acquaintances, $acquaintances->count(), config('per_page', 25)),\n        ]);\n    }", "language": "php", "code": "public function getAddressBook()\n    {\n        $acquaintances = Auth::user()->getAcquaintances();\n\n        return view('mustard::messages.address-book', [\n            'acquaintances' => new Paginator($acquaintances, $acquaintances->count(), config('per_page', 25)),\n        ]);\n    }", "code_tokens": ["public", "function", "getAddressBook", "(", ")", "{", "$", "acquaintances", "=", "Auth", "::", "user", "(", ")", "->", "getAcquaintances", "(", ")", ";", "return", "view", "(", "'mustard::messages.address-book'", ",", "[", "'acquaintances'", "=>", "new", "Paginator", "(", "$", "acquaintances", ",", "$", "acquaintances", "->", "count", "(", ")", ",", "config", "(", "'per_page'", ",", "25", ")", ")", ",", "]", ")", ";", "}"], "docstring": "Return the messaging address book view.\n\n@return \\Illuminate\\View\\View", "docstring_tokens": ["Return", "the", "messaging", "address", "book", "view", "."], "sha": "1f778fe675fe53244e4ec0b03575dd3beebfd88b", "url": "https://github.com/hamjoint/mustard-messaging/blob/1f778fe675fe53244e4ec0b03575dd3beebfd88b/src/lib/Http/Controllers/MessagingController.php#L77-L84", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Map.php", "func_name": "Map.hasStylesheetOption", "original_string": "public function hasStylesheetOption($stylesheetOption)\n    {\n        if (!is_string($stylesheetOption)) {\n            throw MapException::invalidStylesheetOption();\n        }\n\n        return isset($this->stylesheetOptions[$stylesheetOption]);\n    }", "language": "php", "code": "public function hasStylesheetOption($stylesheetOption)\n    {\n        if (!is_string($stylesheetOption)) {\n            throw MapException::invalidStylesheetOption();\n        }\n\n        return isset($this->stylesheetOptions[$stylesheetOption]);\n    }", "code_tokens": ["public", "function", "hasStylesheetOption", "(", "$", "stylesheetOption", ")", "{", "if", "(", "!", "is_string", "(", "$", "stylesheetOption", ")", ")", "{", "throw", "MapException", "::", "invalidStylesheetOption", "(", ")", ";", "}", "return", "isset", "(", "$", "this", "->", "stylesheetOptions", "[", "$", "stylesheetOption", "]", ")", ";", "}"], "docstring": "Checks if the stylesheet option exists.\n\n@param string $stylesheetOption The stylesheet option.\n\n@throws \\Ivory\\GoogleMap\\Exception\\MapException If the stylesheet option is not valid.\n\n@return boolean TRUE if the stylesheet option exists else FALSE.", "docstring_tokens": ["Checks", "if", "the", "stylesheet", "option", "exists", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Map.php#L443-L450", "partition": "test"}
{"repo": "m1/Vars", "path": "src/Resource/FileResource.php", "func_name": "FileResource.importResource", "original_string": "private function importResource(ResourceProvider $provider, $imported_resources)\n    {\n        $content = $provider->getContent();\n        $parent_content = $provider->getParentContent();\n\n        if (!empty($content)) {\n            $imported_resources = array_replace_recursive($imported_resources, $content);\n        }\n\n        if (!empty($parent_content)) {\n            $this->provider->addParentContent($parent_content);\n        }\n\n        return $imported_resources;\n    }", "language": "php", "code": "private function importResource(ResourceProvider $provider, $imported_resources)\n    {\n        $content = $provider->getContent();\n        $parent_content = $provider->getParentContent();\n\n        if (!empty($content)) {\n            $imported_resources = array_replace_recursive($imported_resources, $content);\n        }\n\n        if (!empty($parent_content)) {\n            $this->provider->addParentContent($parent_content);\n        }\n\n        return $imported_resources;\n    }", "code_tokens": ["private", "function", "importResource", "(", "ResourceProvider", "$", "provider", ",", "$", "imported_resources", ")", "{", "$", "content", "=", "$", "provider", "->", "getContent", "(", ")", ";", "$", "parent_content", "=", "$", "provider", "->", "getParentContent", "(", ")", ";", "if", "(", "!", "empty", "(", "$", "content", ")", ")", "{", "$", "imported_resources", "=", "array_replace_recursive", "(", "$", "imported_resources", ",", "$", "content", ")", ";", "}", "if", "(", "!", "empty", "(", "$", "parent_content", ")", ")", "{", "$", "this", "->", "provider", "->", "addParentContent", "(", "$", "parent_content", ")", ";", "}", "return", "$", "imported_resources", ";", "}"], "docstring": "Import resource into the imported resources and merge contents\n\n@param ResourceProvider $provider The new imported resource\n@param array            $imported_resources The imported resources\n\n@return array The modified imported resources", "docstring_tokens": ["Import", "resource", "into", "the", "imported", "resources", "and", "merge", "contents"], "sha": "e64beb6d67ad30c0c86ec1e77022d6803ac11eda", "url": "https://github.com/m1/Vars/blob/e64beb6d67ad30c0c86ec1e77022d6803ac11eda/src/Resource/FileResource.php#L310-L324", "partition": "test"}
{"repo": "AltThree/Logger", "path": "src/LevelAwareLogger.php", "func_name": "LevelAwareLogger.shouldLog", "original_string": "protected function shouldLog($level)\n    {\n        if ($this->levels === ['*'] || $this->levels === ['all']) {\n            return true;\n        }\n\n        return in_array($level, $this->levels);\n    }", "language": "php", "code": "protected function shouldLog($level)\n    {\n        if ($this->levels === ['*'] || $this->levels === ['all']) {\n            return true;\n        }\n\n        return in_array($level, $this->levels);\n    }", "code_tokens": ["protected", "function", "shouldLog", "(", "$", "level", ")", "{", "if", "(", "$", "this", "->", "levels", "===", "[", "'*'", "]", "||", "$", "this", "->", "levels", "===", "[", "'all'", "]", ")", "{", "return", "true", ";", "}", "return", "in_array", "(", "$", "level", ",", "$", "this", "->", "levels", ")", ";", "}"], "docstring": "Should the message be logged?\n\n@param string $level\n\n@return bool", "docstring_tokens": ["Should", "the", "message", "be", "logged?"], "sha": "15ded9da1d1cfffe14bca08d5490570819e368dc", "url": "https://github.com/AltThree/Logger/blob/15ded9da1d1cfffe14bca08d5490570819e368dc/src/LevelAwareLogger.php#L79-L86", "partition": "test"}
{"repo": "slickframework/http", "path": "src/Message/Server/BodyParser/UrlEncodedParser.php", "func_name": "UrlEncodedParser.parse", "original_string": "public function parse()\n    {\n        $this->stream->rewind();\n        parse_str($this->stream->getContents(), $parsed);\n        return array_merge($_POST, $parsed);\n    }", "language": "php", "code": "public function parse()\n    {\n        $this->stream->rewind();\n        parse_str($this->stream->getContents(), $parsed);\n        return array_merge($_POST, $parsed);\n    }", "code_tokens": ["public", "function", "parse", "(", ")", "{", "$", "this", "->", "stream", "->", "rewind", "(", ")", ";", "parse_str", "(", "$", "this", "->", "stream", "->", "getContents", "(", ")", ",", "$", "parsed", ")", ";", "return", "array_merge", "(", "$", "_POST", ",", "$", "parsed", ")", ";", "}"], "docstring": "Parses the URL encoded body.\n\n@return array", "docstring_tokens": ["Parses", "the", "URL", "encoded", "body", "."], "sha": "9da14b618e0f75d3d565e0ce928a35d992755e75", "url": "https://github.com/slickframework/http/blob/9da14b618e0f75d3d565e0ce928a35d992755e75/src/Message/Server/BodyParser/UrlEncodedParser.php#L42-L47", "partition": "test"}
{"repo": "cviebrock/eloquent-taggable", "path": "src/Taggable.php", "func_name": "Taggable.getQualifiedRelatedPivotKeyNameWithAlias", "original_string": "private function getQualifiedRelatedPivotKeyNameWithAlias(string $alias): string\n    {\n        $morph = $this->tags();\n\n        return $morph->getTable() . '_' . $alias .\n            '.' . $morph->getRelatedPivotKeyName();\n    }", "language": "php", "code": "private function getQualifiedRelatedPivotKeyNameWithAlias(string $alias): string\n    {\n        $morph = $this->tags();\n\n        return $morph->getTable() . '_' . $alias .\n            '.' . $morph->getRelatedPivotKeyName();\n    }", "code_tokens": ["private", "function", "getQualifiedRelatedPivotKeyNameWithAlias", "(", "string", "$", "alias", ")", ":", "string", "{", "$", "morph", "=", "$", "this", "->", "tags", "(", ")", ";", "return", "$", "morph", "->", "getTable", "(", ")", ".", "'_'", ".", "$", "alias", ".", "'.'", ".", "$", "morph", "->", "getRelatedPivotKeyName", "(", ")", ";", "}"], "docstring": "Returns the Related Pivot Key Name with the table alias.\n\n@param string $alias\n\n@return string", "docstring_tokens": ["Returns", "the", "Related", "Pivot", "Key", "Name", "with", "the", "table", "alias", "."], "sha": "0201cdc85e5642bf31250527eb779df6dc3ca364", "url": "https://github.com/cviebrock/eloquent-taggable/blob/0201cdc85e5642bf31250527eb779df6dc3ca364/src/Taggable.php#L489-L495", "partition": "test"}
{"repo": "colorium/http", "path": "src/Colorium/Http/Request/Accept.php", "func_name": "Accept.parse", "original_string": "protected static function parse($string, $separator = null)\n    {\n        $items = [];\n        if($string) {\n            $string = strtolower(str_replace(' ', '', $string));\n            $rows = explode(',', $string);\n            foreach($rows as $row) {\n                @list($item, $quality) = explode(';q=', $row);\n                if(!$quality) {\n                    if($separator) {\n                        @list($part, $subpart) = explode($separator, $item);\n                        $quality = ($part = '*' or $subpart == '*') ? 0 : 1;\n                    }\n                    else {\n                        $quality = ($item == '*') ? 0 : 1;\n                    }\n                }\n                $items[$item] = (float)$quality;\n            }\n            sort($items);\n            $items = array_keys($items);\n        }\n\n        return $items;\n    }", "language": "php", "code": "protected static function parse($string, $separator = null)\n    {\n        $items = [];\n        if($string) {\n            $string = strtolower(str_replace(' ', '', $string));\n            $rows = explode(',', $string);\n            foreach($rows as $row) {\n                @list($item, $quality) = explode(';q=', $row);\n                if(!$quality) {\n                    if($separator) {\n                        @list($part, $subpart) = explode($separator, $item);\n                        $quality = ($part = '*' or $subpart == '*') ? 0 : 1;\n                    }\n                    else {\n                        $quality = ($item == '*') ? 0 : 1;\n                    }\n                }\n                $items[$item] = (float)$quality;\n            }\n            sort($items);\n            $items = array_keys($items);\n        }\n\n        return $items;\n    }", "code_tokens": ["protected", "static", "function", "parse", "(", "$", "string", ",", "$", "separator", "=", "null", ")", "{", "$", "items", "=", "[", "]", ";", "if", "(", "$", "string", ")", "{", "$", "string", "=", "strtolower", "(", "str_replace", "(", "' '", ",", "''", ",", "$", "string", ")", ")", ";", "$", "rows", "=", "explode", "(", "','", ",", "$", "string", ")", ";", "foreach", "(", "$", "rows", "as", "$", "row", ")", "{", "@", "list", "(", "$", "item", ",", "$", "quality", ")", "=", "explode", "(", "';q='", ",", "$", "row", ")", ";", "if", "(", "!", "$", "quality", ")", "{", "if", "(", "$", "separator", ")", "{", "@", "list", "(", "$", "part", ",", "$", "subpart", ")", "=", "explode", "(", "$", "separator", ",", "$", "item", ")", ";", "$", "quality", "=", "(", "$", "part", "=", "'*'", "or", "$", "subpart", "==", "'*'", ")", "?", "0", ":", "1", ";", "}", "else", "{", "$", "quality", "=", "(", "$", "item", "==", "'*'", ")", "?", "0", ":", "1", ";", "}", "}", "$", "items", "[", "$", "item", "]", "=", "(", "float", ")", "$", "quality", ";", "}", "sort", "(", "$", "items", ")", ";", "$", "items", "=", "array_keys", "(", "$", "items", ")", ";", "}", "return", "$", "items", ";", "}"], "docstring": "Accept string parsing\n\n@param string $string\n@param string $separator\n@return array", "docstring_tokens": ["Accept", "string", "parsing"], "sha": "070877dcd5a283bb3c8cec86fd1f312fb9a1d3a8", "url": "https://github.com/colorium/http/blob/070877dcd5a283bb3c8cec86fd1f312fb9a1d3a8/src/Colorium/Http/Request/Accept.php#L122-L146", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/Orm/ActiveRelationTrait.php", "func_name": "ActiveRelationTrait.populateRelationAsyncMultiple", "original_string": "protected function populateRelationAsyncMultiple($name, &$primaryModels, $viaModels = null, $viaQuery = null) {\n        // https://github.com/yiisoft/yii2/issues/3197\n        // delay indexing related models after buckets are built\n        $indexBy = $this->indexBy;\n        $this->indexBy = null;\n        return $this->all()->otherwise(function() {\n            return [];\n        })->then(\n            function($models) use (&$primaryModels, $name, $viaModels, $viaQuery, $indexBy) {\n                if (isset($viaModels, $viaQuery)) {\n                    $buckets = $this->buildBuckets($models, $this->link, $viaModels, $viaQuery->link);\n                } else {\n                    $buckets = $this->buildBuckets($models, $this->link);\n                }\n                $this->indexBy = $indexBy;\n                if ($this->indexBy !== null && $this->multiple) {\n                    $buckets = $this->indexBuckets($buckets, $this->indexBy);\n                }\n\n                $link = array_values(isset($viaQuery) ? $viaQuery->link : $this->link);\n                foreach ($primaryModels as $i => $primaryModel) {\n                    if ($this->multiple && count($link) === 1 && is_array($keys = $primaryModel[reset($link)])) {\n                        $value = [];\n                        foreach ($keys as $key) {\n                            $key = $this->normalizeModelKey($key);\n                            if (isset($buckets[$key])) {\n                                if ($this->indexBy !== null) {\n                                    // if indexBy is set, array_merge will cause renumbering of numeric array\n                                    foreach ($buckets[$key] as $bucketKey => $bucketValue) {\n                                        $value[$bucketKey] = $bucketValue;\n                                    }\n                                } else {\n                                    $value = array_merge($value, $buckets[$key]);\n                                }\n                            }\n                        }\n                    } else {\n                        $key = $this->getModelKey($primaryModel, $link);\n                        $value = isset($buckets[$key]) ? $buckets[$key] : ($this->multiple ? [] : null);\n                    }\n                    if ($primaryModel instanceof ActiveRecordInterface) {\n                        $primaryModel->populateRelation($name, $value);\n                    } else {\n                        $primaryModels[$i][$name] = $value;\n                    }\n                }\n                if ($this->inverseOf !== null) {\n                    $this->populateInverseRelation($primaryModels, $models, $name, $this->inverseOf);\n                }\n\n                return $models;\n            }\n        );\n    }", "language": "php", "code": "protected function populateRelationAsyncMultiple($name, &$primaryModels, $viaModels = null, $viaQuery = null) {\n        // https://github.com/yiisoft/yii2/issues/3197\n        // delay indexing related models after buckets are built\n        $indexBy = $this->indexBy;\n        $this->indexBy = null;\n        return $this->all()->otherwise(function() {\n            return [];\n        })->then(\n            function($models) use (&$primaryModels, $name, $viaModels, $viaQuery, $indexBy) {\n                if (isset($viaModels, $viaQuery)) {\n                    $buckets = $this->buildBuckets($models, $this->link, $viaModels, $viaQuery->link);\n                } else {\n                    $buckets = $this->buildBuckets($models, $this->link);\n                }\n                $this->indexBy = $indexBy;\n                if ($this->indexBy !== null && $this->multiple) {\n                    $buckets = $this->indexBuckets($buckets, $this->indexBy);\n                }\n\n                $link = array_values(isset($viaQuery) ? $viaQuery->link : $this->link);\n                foreach ($primaryModels as $i => $primaryModel) {\n                    if ($this->multiple && count($link) === 1 && is_array($keys = $primaryModel[reset($link)])) {\n                        $value = [];\n                        foreach ($keys as $key) {\n                            $key = $this->normalizeModelKey($key);\n                            if (isset($buckets[$key])) {\n                                if ($this->indexBy !== null) {\n                                    // if indexBy is set, array_merge will cause renumbering of numeric array\n                                    foreach ($buckets[$key] as $bucketKey => $bucketValue) {\n                                        $value[$bucketKey] = $bucketValue;\n                                    }\n                                } else {\n                                    $value = array_merge($value, $buckets[$key]);\n                                }\n                            }\n                        }\n                    } else {\n                        $key = $this->getModelKey($primaryModel, $link);\n                        $value = isset($buckets[$key]) ? $buckets[$key] : ($this->multiple ? [] : null);\n                    }\n                    if ($primaryModel instanceof ActiveRecordInterface) {\n                        $primaryModel->populateRelation($name, $value);\n                    } else {\n                        $primaryModels[$i][$name] = $value;\n                    }\n                }\n                if ($this->inverseOf !== null) {\n                    $this->populateInverseRelation($primaryModels, $models, $name, $this->inverseOf);\n                }\n\n                return $models;\n            }\n        );\n    }", "code_tokens": ["protected", "function", "populateRelationAsyncMultiple", "(", "$", "name", ",", "&", "$", "primaryModels", ",", "$", "viaModels", "=", "null", ",", "$", "viaQuery", "=", "null", ")", "{", "// https://github.com/yiisoft/yii2/issues/3197", "// delay indexing related models after buckets are built", "$", "indexBy", "=", "$", "this", "->", "indexBy", ";", "$", "this", "->", "indexBy", "=", "null", ";", "return", "$", "this", "->", "all", "(", ")", "->", "otherwise", "(", "function", "(", ")", "{", "return", "[", "]", ";", "}", ")", "->", "then", "(", "function", "(", "$", "models", ")", "use", "(", "&", "$", "primaryModels", ",", "$", "name", ",", "$", "viaModels", ",", "$", "viaQuery", ",", "$", "indexBy", ")", "{", "if", "(", "isset", "(", "$", "viaModels", ",", "$", "viaQuery", ")", ")", "{", "$", "buckets", "=", "$", "this", "->", "buildBuckets", "(", "$", "models", ",", "$", "this", "->", "link", ",", "$", "viaModels", ",", "$", "viaQuery", "->", "link", ")", ";", "}", "else", "{", "$", "buckets", "=", "$", "this", "->", "buildBuckets", "(", "$", "models", ",", "$", "this", "->", "link", ")", ";", "}", "$", "this", "->", "indexBy", "=", "$", "indexBy", ";", "if", "(", "$", "this", "->", "indexBy", "!==", "null", "&&", "$", "this", "->", "multiple", ")", "{", "$", "buckets", "=", "$", "this", "->", "indexBuckets", "(", "$", "buckets", ",", "$", "this", "->", "indexBy", ")", ";", "}", "$", "link", "=", "array_values", "(", "isset", "(", "$", "viaQuery", ")", "?", "$", "viaQuery", "->", "link", ":", "$", "this", "->", "link", ")", ";", "foreach", "(", "$", "primaryModels", "as", "$", "i", "=>", "$", "primaryModel", ")", "{", "if", "(", "$", "this", "->", "multiple", "&&", "count", "(", "$", "link", ")", "===", "1", "&&", "is_array", "(", "$", "keys", "=", "$", "primaryModel", "[", "reset", "(", "$", "link", ")", "]", ")", ")", "{", "$", "value", "=", "[", "]", ";", "foreach", "(", "$", "keys", "as", "$", "key", ")", "{", "$", "key", "=", "$", "this", "->", "normalizeModelKey", "(", "$", "key", ")", ";", "if", "(", "isset", "(", "$", "buckets", "[", "$", "key", "]", ")", ")", "{", "if", "(", "$", "this", "->", "indexBy", "!==", "null", ")", "{", "// if indexBy is set, array_merge will cause renumbering of numeric array", "foreach", "(", "$", "buckets", "[", "$", "key", "]", "as", "$", "bucketKey", "=>", "$", "bucketValue", ")", "{", "$", "value", "[", "$", "bucketKey", "]", "=", "$", "bucketValue", ";", "}", "}", "else", "{", "$", "value", "=", "array_merge", "(", "$", "value", ",", "$", "buckets", "[", "$", "key", "]", ")", ";", "}", "}", "}", "}", "else", "{", "$", "key", "=", "$", "this", "->", "getModelKey", "(", "$", "primaryModel", ",", "$", "link", ")", ";", "$", "value", "=", "isset", "(", "$", "buckets", "[", "$", "key", "]", ")", "?", "$", "buckets", "[", "$", "key", "]", ":", "(", "$", "this", "->", "multiple", "?", "[", "]", ":", "null", ")", ";", "}", "if", "(", "$", "primaryModel", "instanceof", "ActiveRecordInterface", ")", "{", "$", "primaryModel", "->", "populateRelation", "(", "$", "name", ",", "$", "value", ")", ";", "}", "else", "{", "$", "primaryModels", "[", "$", "i", "]", "[", "$", "name", "]", "=", "$", "value", ";", "}", "}", "if", "(", "$", "this", "->", "inverseOf", "!==", "null", ")", "{", "$", "this", "->", "populateInverseRelation", "(", "$", "primaryModels", ",", "$", "models", ",", "$", "name", ",", "$", "this", "->", "inverseOf", ")", ";", "}", "return", "$", "models", ";", "}", ")", ";", "}"], "docstring": "Populate relation for multiple primary models\n@param string                       $name\n@param ActiveRecordInterface[]      $primaryModels\n@param ActiveRecordInterface[]|null $viaModels\n@param ActiveQuery|null             $viaQuery\n@return ExtendedPromiseInterface with ActiveRecordInterface[]", "docstring_tokens": ["Populate", "relation", "for", "multiple", "primary", "models"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/Orm/ActiveRelationTrait.php#L299-L352", "partition": "test"}
{"repo": "silvershop/silvershop-core", "path": "src/Extension/SteppedCheckoutExtension.php", "func_name": "SteppedCheckoutExtension.IsCurrentStep", "original_string": "public function IsCurrentStep($name)\n    {\n        if ($this->owner->getAction() === $name) {\n            return true;\n        } elseif (!$this->owner->getAction() || $this->owner->getAction() === 'index') {\n            return $this->actionPos($name) === 0;\n        }\n        return false;\n    }", "language": "php", "code": "public function IsCurrentStep($name)\n    {\n        if ($this->owner->getAction() === $name) {\n            return true;\n        } elseif (!$this->owner->getAction() || $this->owner->getAction() === 'index') {\n            return $this->actionPos($name) === 0;\n        }\n        return false;\n    }", "code_tokens": ["public", "function", "IsCurrentStep", "(", "$", "name", ")", "{", "if", "(", "$", "this", "->", "owner", "->", "getAction", "(", ")", "===", "$", "name", ")", "{", "return", "true", ";", "}", "elseif", "(", "!", "$", "this", "->", "owner", "->", "getAction", "(", ")", "||", "$", "this", "->", "owner", "->", "getAction", "(", ")", "===", "'index'", ")", "{", "return", "$", "this", "->", "actionPos", "(", "$", "name", ")", "===", "0", ";", "}", "return", "false", ";", "}"], "docstring": "Check if passed action is the same as the current step", "docstring_tokens": ["Check", "if", "passed", "action", "is", "the", "same", "as", "the", "current", "step"], "sha": "b090e970b06c0fb7e68107360760b6e2d6d184c4", "url": "https://github.com/silvershop/silvershop-core/blob/b090e970b06c0fb7e68107360760b6e2d6d184c4/src/Extension/SteppedCheckoutExtension.php#L88-L96", "partition": "test"}
{"repo": "marklogic-community/mlphp", "path": "api/MarkLogic/MLPHP/AbstractConstraint.php", "func_name": "AbstractConstraint.addFacetOptions", "original_string": "protected function addFacetOptions($dom, $elem)\n    {\n        if (!empty($this->facetOptions)) {\n            foreach ($this->facetOptions as $opt) {\n                $facetElem = $dom->createElement('facet-option');\n                $facetElem->nodeValue = $opt;\n                $elem->appendChild($facetElem);\n            }\n        }\n        return $elem;\n    }", "language": "php", "code": "protected function addFacetOptions($dom, $elem)\n    {\n        if (!empty($this->facetOptions)) {\n            foreach ($this->facetOptions as $opt) {\n                $facetElem = $dom->createElement('facet-option');\n                $facetElem->nodeValue = $opt;\n                $elem->appendChild($facetElem);\n            }\n        }\n        return $elem;\n    }", "code_tokens": ["protected", "function", "addFacetOptions", "(", "$", "dom", ",", "$", "elem", ")", "{", "if", "(", "!", "empty", "(", "$", "this", "->", "facetOptions", ")", ")", "{", "foreach", "(", "$", "this", "->", "facetOptions", "as", "$", "opt", ")", "{", "$", "facetElem", "=", "$", "dom", "->", "createElement", "(", "'facet-option'", ")", ";", "$", "facetElem", "->", "nodeValue", "=", "$", "opt", ";", "$", "elem", "->", "appendChild", "(", "$", "facetElem", ")", ";", "}", "}", "return", "$", "elem", ";", "}"], "docstring": "Add facet options to an element.\n\n@param DOMDocument $dom A DOM document.\n@param DOMElement $elem A DOM element.\n@return DOMElement The updated element.", "docstring_tokens": ["Add", "facet", "options", "to", "an", "element", "."], "sha": "c3aa3de82525cc5c3404e348e4d5069c0eee3277", "url": "https://github.com/marklogic-community/mlphp/blob/c3aa3de82525cc5c3404e348e4d5069c0eee3277/api/MarkLogic/MLPHP/AbstractConstraint.php#L97-L107", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Console/Controllers/BaseMigrateController.php", "func_name": "BaseMigrateController.migrateDown", "original_string": "protected function migrateDown($class)\n    {\n        if ($class === self::BASE_MIGRATION) {\n            return resolveLazy(true);\n        }\n\n        $this->stdout(\"*** reverting $class\\n\", Console::FG_YELLOW);\n        $start = microtime(true);\n        $promise = new LazyPromise(function() use (&$migration, $class, $start) {\n            return $this->createMigration($class)\n                ->then(function($migration) {\n                    /** @var MigrationInterface $migration */\n                    return $migration->down();\n                })->then(function() use ($class, $start) {\n                    $time = microtime(true) - $start;\n                    $this->stdout(\"*** reverted $class (time: \" . sprintf('%.3f', $time) . \"s)\\n\\n\", Console::FG_GREEN);\n                    return $this->removeMigrationHistory($class);\n                }, function($error = null) use ($class, $start) {\n                    $time = microtime(true) - $start;\n                    $this->stdout(\"*** failed to revert $class (time: \" . sprintf('%.3f', $time) . \"s)\\n\\n\", Console::FG_RED);\n                    $prevException = $error instanceof \\Throwable ? $error : null;\n                    $exception = new Exception(\"Failed to revert $class (time: \" . sprintf('%.3f', $time) . \"s)\", 0, $prevException);\n                    throw new $exception;\n                });\n        });\n        return $promise;\n    }", "language": "php", "code": "protected function migrateDown($class)\n    {\n        if ($class === self::BASE_MIGRATION) {\n            return resolveLazy(true);\n        }\n\n        $this->stdout(\"*** reverting $class\\n\", Console::FG_YELLOW);\n        $start = microtime(true);\n        $promise = new LazyPromise(function() use (&$migration, $class, $start) {\n            return $this->createMigration($class)\n                ->then(function($migration) {\n                    /** @var MigrationInterface $migration */\n                    return $migration->down();\n                })->then(function() use ($class, $start) {\n                    $time = microtime(true) - $start;\n                    $this->stdout(\"*** reverted $class (time: \" . sprintf('%.3f', $time) . \"s)\\n\\n\", Console::FG_GREEN);\n                    return $this->removeMigrationHistory($class);\n                }, function($error = null) use ($class, $start) {\n                    $time = microtime(true) - $start;\n                    $this->stdout(\"*** failed to revert $class (time: \" . sprintf('%.3f', $time) . \"s)\\n\\n\", Console::FG_RED);\n                    $prevException = $error instanceof \\Throwable ? $error : null;\n                    $exception = new Exception(\"Failed to revert $class (time: \" . sprintf('%.3f', $time) . \"s)\", 0, $prevException);\n                    throw new $exception;\n                });\n        });\n        return $promise;\n    }", "code_tokens": ["protected", "function", "migrateDown", "(", "$", "class", ")", "{", "if", "(", "$", "class", "===", "self", "::", "BASE_MIGRATION", ")", "{", "return", "resolveLazy", "(", "true", ")", ";", "}", "$", "this", "->", "stdout", "(", "\"*** reverting $class\\n\"", ",", "Console", "::", "FG_YELLOW", ")", ";", "$", "start", "=", "microtime", "(", "true", ")", ";", "$", "promise", "=", "new", "LazyPromise", "(", "function", "(", ")", "use", "(", "&", "$", "migration", ",", "$", "class", ",", "$", "start", ")", "{", "return", "$", "this", "->", "createMigration", "(", "$", "class", ")", "->", "then", "(", "function", "(", "$", "migration", ")", "{", "/** @var MigrationInterface $migration */", "return", "$", "migration", "->", "down", "(", ")", ";", "}", ")", "->", "then", "(", "function", "(", ")", "use", "(", "$", "class", ",", "$", "start", ")", "{", "$", "time", "=", "microtime", "(", "true", ")", "-", "$", "start", ";", "$", "this", "->", "stdout", "(", "\"*** reverted $class (time: \"", ".", "sprintf", "(", "'%.3f'", ",", "$", "time", ")", ".", "\"s)\\n\\n\"", ",", "Console", "::", "FG_GREEN", ")", ";", "return", "$", "this", "->", "removeMigrationHistory", "(", "$", "class", ")", ";", "}", ",", "function", "(", "$", "error", "=", "null", ")", "use", "(", "$", "class", ",", "$", "start", ")", "{", "$", "time", "=", "microtime", "(", "true", ")", "-", "$", "start", ";", "$", "this", "->", "stdout", "(", "\"*** failed to revert $class (time: \"", ".", "sprintf", "(", "'%.3f'", ",", "$", "time", ")", ".", "\"s)\\n\\n\"", ",", "Console", "::", "FG_RED", ")", ";", "$", "prevException", "=", "$", "error", "instanceof", "\\", "Throwable", "?", "$", "error", ":", "null", ";", "$", "exception", "=", "new", "Exception", "(", "\"Failed to revert $class (time: \"", ".", "sprintf", "(", "'%.3f'", ",", "$", "time", ")", ".", "\"s)\"", ",", "0", ",", "$", "prevException", ")", ";", "throw", "new", "$", "exception", ";", "}", ")", ";", "}", ")", ";", "return", "$", "promise", ";", "}"], "docstring": "Downgrades with the specified migration class.\n@param string $class the migration class name\n@return LazyPromiseInterface whether the migration is successful", "docstring_tokens": ["Downgrades", "with", "the", "specified", "migration", "class", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Console/Controllers/BaseMigrateController.php#L829-L855", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/HttpClient/Provider/StreamContext.php", "func_name": "StreamContext.buildProxy", "original_string": "protected function buildProxy()\n    {\n        if (isset($this->proxy['host'])) {\n            $uri = new Uri([\n                'scheme' => 'tcp',\n                'host'   => $this->proxy['host'],\n                'port'   => isset($this->proxy['port']) ? $this->proxy['port'] : 80,\n            ]);\n\n            if (isset($this->proxy['access'])) {\n                $uri->user = $this->proxy['access'];\n            }\n\n            $this->setOption('proxy', $uri->build());\n        }\n\n        return $this;\n    }", "language": "php", "code": "protected function buildProxy()\n    {\n        if (isset($this->proxy['host'])) {\n            $uri = new Uri([\n                'scheme' => 'tcp',\n                'host'   => $this->proxy['host'],\n                'port'   => isset($this->proxy['port']) ? $this->proxy['port'] : 80,\n            ]);\n\n            if (isset($this->proxy['access'])) {\n                $uri->user = $this->proxy['access'];\n            }\n\n            $this->setOption('proxy', $uri->build());\n        }\n\n        return $this;\n    }", "code_tokens": ["protected", "function", "buildProxy", "(", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "proxy", "[", "'host'", "]", ")", ")", "{", "$", "uri", "=", "new", "Uri", "(", "[", "'scheme'", "=>", "'tcp'", ",", "'host'", "=>", "$", "this", "->", "proxy", "[", "'host'", "]", ",", "'port'", "=>", "isset", "(", "$", "this", "->", "proxy", "[", "'port'", "]", ")", "?", "$", "this", "->", "proxy", "[", "'port'", "]", ":", "80", ",", "]", ")", ";", "if", "(", "isset", "(", "$", "this", "->", "proxy", "[", "'access'", "]", ")", ")", "{", "$", "uri", "->", "user", "=", "$", "this", "->", "proxy", "[", "'access'", "]", ";", "}", "$", "this", "->", "setOption", "(", "'proxy'", ",", "$", "uri", "->", "build", "(", ")", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Construit le proxy de la requete\n\n@return $this", "docstring_tokens": ["Construit", "le", "proxy", "de", "la", "requete"], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/HttpClient/Provider/StreamContext.php#L197-L214", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/QBXML/Schema/Object.php", "func_name": "QuickBooks_QBXML_Schema_Object.exists", "original_string": "public function exists($path, $case_doesnt_matter = true, $is_end_element = false)\n\t{\n\t\t$ordered_paths = $this->_reorderPathsPaths();\n\t\t\n\t\tif (in_array($path, $ordered_paths))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if ($case_doesnt_matter)\n\t\t{\n\t\t\tforeach ($ordered_paths as $ordered_path)\n\t\t\t{\n\t\t\t\tif (strtolower($path) == strtolower($ordered_path))\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}", "language": "php", "code": "public function exists($path, $case_doesnt_matter = true, $is_end_element = false)\n\t{\n\t\t$ordered_paths = $this->_reorderPathsPaths();\n\t\t\n\t\tif (in_array($path, $ordered_paths))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if ($case_doesnt_matter)\n\t\t{\n\t\t\tforeach ($ordered_paths as $ordered_path)\n\t\t\t{\n\t\t\t\tif (strtolower($path) == strtolower($ordered_path))\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}", "code_tokens": ["public", "function", "exists", "(", "$", "path", ",", "$", "case_doesnt_matter", "=", "true", ",", "$", "is_end_element", "=", "false", ")", "{", "$", "ordered_paths", "=", "$", "this", "->", "_reorderPathsPaths", "(", ")", ";", "if", "(", "in_array", "(", "$", "path", ",", "$", "ordered_paths", ")", ")", "{", "return", "true", ";", "}", "else", "if", "(", "$", "case_doesnt_matter", ")", "{", "foreach", "(", "$", "ordered_paths", "as", "$", "ordered_path", ")", "{", "if", "(", "strtolower", "(", "$", "path", ")", "==", "strtolower", "(", "$", "ordered_path", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "docstring": "Tell whether or not an element exists\n\n@param string $path\n@return boolean", "docstring_tokens": ["Tell", "whether", "or", "not", "an", "element", "exists"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/QBXML/Schema/Object.php#L207-L227", "partition": "test"}
{"repo": "marklogic-community/mlphp", "path": "api/MarkLogic/MLPHP/XMLDocument.php", "func_name": "XMLDocument.write", "original_string": "public function write($uri = null, $params = array())\n    {\n        if ($this->isValidXML($this->getContent())) {\n            $this->uri = (isset($uri)) ? (string)$uri : $this->uri;\n            $params = array_merge(array('format' => 'xml'), $params);\n            return parent::write($this->uri, $params);\n        } else {\n            throw new \\Exception('Attempting to write invalid XML content');\n        }\n    }", "language": "php", "code": "public function write($uri = null, $params = array())\n    {\n        if ($this->isValidXML($this->getContent())) {\n            $this->uri = (isset($uri)) ? (string)$uri : $this->uri;\n            $params = array_merge(array('format' => 'xml'), $params);\n            return parent::write($this->uri, $params);\n        } else {\n            throw new \\Exception('Attempting to write invalid XML content');\n        }\n    }", "code_tokens": ["public", "function", "write", "(", "$", "uri", "=", "null", ",", "$", "params", "=", "array", "(", ")", ")", "{", "if", "(", "$", "this", "->", "isValidXML", "(", "$", "this", "->", "getContent", "(", ")", ")", ")", "{", "$", "this", "->", "uri", "=", "(", "isset", "(", "$", "uri", ")", ")", "?", "(", "string", ")", "$", "uri", ":", "$", "this", "->", "uri", ";", "$", "params", "=", "array_merge", "(", "array", "(", "'format'", "=>", "'xml'", ")", ",", "$", "params", ")", ";", "return", "parent", "::", "write", "(", "$", "this", "->", "uri", ",", "$", "params", ")", ";", "}", "else", "{", "throw", "new", "\\", "Exception", "(", "'Attempting to write invalid XML content'", ")", ";", "}", "}"], "docstring": "Write an XML document to the database.\n\n@param string $uri A document URI.\n@param array $params Optional additional parameters to pass when writing.\n@return Document $this", "docstring_tokens": ["Write", "an", "XML", "document", "to", "the", "database", "."], "sha": "c3aa3de82525cc5c3404e348e4d5069c0eee3277", "url": "https://github.com/marklogic-community/mlphp/blob/c3aa3de82525cc5c3404e348e4d5069c0eee3277/api/MarkLogic/MLPHP/XMLDocument.php#L63-L72", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/Mail/mime.php", "func_name": "Mail_mime.addAttachment", "original_string": "function addAttachment($file,\n        $c_type      = 'application/octet-stream',\n        $name        = '',\n        $isfile      = true,\n        $encoding    = 'base64',\n        $disposition = 'attachment',\n        $charset     = '',\n        $language    = '',\n        $location    = '',\n        $n_encoding  = null,\n        $f_encoding  = null,\n        $description = '',\n        $h_charset   = null,\n        $add_headers = array()\n    ) {\n        $bodyfile = null;\n\n        if ($isfile) {\n            // Don't load file into memory\n            if ($this->_build_params['delay_file_io']) {\n                $filedata = null;\n                $bodyfile = $file;\n            } else {\n                if ($this->_isError($filedata = $this->_file2str($file))) {\n                    return $filedata;\n                }\n            }\n            // Force the name the user supplied, otherwise use $file\n            $filename = ($name ? $name : $this->_basename($file));\n        } else {\n            $filedata = $file;\n            $filename = $name;\n        }\n\n        if (!strlen($filename)) {\n            $msg = \"The supplied filename for the attachment can't be empty\";\n            return $this->_raiseError($msg);\n        }\n\n        $this->_parts[] = array(\n            'body'        => $filedata,\n            'body_file'   => $bodyfile,\n            'name'        => $filename,\n            'c_type'      => $c_type,\n            'charset'     => $charset,\n            'encoding'    => $encoding,\n            'language'    => $language,\n            'location'    => $location,\n            'disposition' => $disposition,\n            'description' => $description,\n            'add_headers' => $add_headers,\n            'name_encoding'     => $n_encoding,\n            'filename_encoding' => $f_encoding,\n            'headers_charset'   => $h_charset,\n        );\n\n        return true;\n    }", "language": "php", "code": "function addAttachment($file,\n        $c_type      = 'application/octet-stream',\n        $name        = '',\n        $isfile      = true,\n        $encoding    = 'base64',\n        $disposition = 'attachment',\n        $charset     = '',\n        $language    = '',\n        $location    = '',\n        $n_encoding  = null,\n        $f_encoding  = null,\n        $description = '',\n        $h_charset   = null,\n        $add_headers = array()\n    ) {\n        $bodyfile = null;\n\n        if ($isfile) {\n            // Don't load file into memory\n            if ($this->_build_params['delay_file_io']) {\n                $filedata = null;\n                $bodyfile = $file;\n            } else {\n                if ($this->_isError($filedata = $this->_file2str($file))) {\n                    return $filedata;\n                }\n            }\n            // Force the name the user supplied, otherwise use $file\n            $filename = ($name ? $name : $this->_basename($file));\n        } else {\n            $filedata = $file;\n            $filename = $name;\n        }\n\n        if (!strlen($filename)) {\n            $msg = \"The supplied filename for the attachment can't be empty\";\n            return $this->_raiseError($msg);\n        }\n\n        $this->_parts[] = array(\n            'body'        => $filedata,\n            'body_file'   => $bodyfile,\n            'name'        => $filename,\n            'c_type'      => $c_type,\n            'charset'     => $charset,\n            'encoding'    => $encoding,\n            'language'    => $language,\n            'location'    => $location,\n            'disposition' => $disposition,\n            'description' => $description,\n            'add_headers' => $add_headers,\n            'name_encoding'     => $n_encoding,\n            'filename_encoding' => $f_encoding,\n            'headers_charset'   => $h_charset,\n        );\n\n        return true;\n    }", "code_tokens": ["function", "addAttachment", "(", "$", "file", ",", "$", "c_type", "=", "'application/octet-stream'", ",", "$", "name", "=", "''", ",", "$", "isfile", "=", "true", ",", "$", "encoding", "=", "'base64'", ",", "$", "disposition", "=", "'attachment'", ",", "$", "charset", "=", "''", ",", "$", "language", "=", "''", ",", "$", "location", "=", "''", ",", "$", "n_encoding", "=", "null", ",", "$", "f_encoding", "=", "null", ",", "$", "description", "=", "''", ",", "$", "h_charset", "=", "null", ",", "$", "add_headers", "=", "array", "(", ")", ")", "{", "$", "bodyfile", "=", "null", ";", "if", "(", "$", "isfile", ")", "{", "// Don't load file into memory", "if", "(", "$", "this", "->", "_build_params", "[", "'delay_file_io'", "]", ")", "{", "$", "filedata", "=", "null", ";", "$", "bodyfile", "=", "$", "file", ";", "}", "else", "{", "if", "(", "$", "this", "->", "_isError", "(", "$", "filedata", "=", "$", "this", "->", "_file2str", "(", "$", "file", ")", ")", ")", "{", "return", "$", "filedata", ";", "}", "}", "// Force the name the user supplied, otherwise use $file", "$", "filename", "=", "(", "$", "name", "?", "$", "name", ":", "$", "this", "->", "_basename", "(", "$", "file", ")", ")", ";", "}", "else", "{", "$", "filedata", "=", "$", "file", ";", "$", "filename", "=", "$", "name", ";", "}", "if", "(", "!", "strlen", "(", "$", "filename", ")", ")", "{", "$", "msg", "=", "\"The supplied filename for the attachment can't be empty\"", ";", "return", "$", "this", "->", "_raiseError", "(", "$", "msg", ")", ";", "}", "$", "this", "->", "_parts", "[", "]", "=", "array", "(", "'body'", "=>", "$", "filedata", ",", "'body_file'", "=>", "$", "bodyfile", ",", "'name'", "=>", "$", "filename", ",", "'c_type'", "=>", "$", "c_type", ",", "'charset'", "=>", "$", "charset", ",", "'encoding'", "=>", "$", "encoding", ",", "'language'", "=>", "$", "language", ",", "'location'", "=>", "$", "location", ",", "'disposition'", "=>", "$", "disposition", ",", "'description'", "=>", "$", "description", ",", "'add_headers'", "=>", "$", "add_headers", ",", "'name_encoding'", "=>", "$", "n_encoding", ",", "'filename_encoding'", "=>", "$", "f_encoding", ",", "'headers_charset'", "=>", "$", "h_charset", ",", ")", ";", "return", "true", ";", "}"], "docstring": "Adds a file to the list of attachments.\n\n@param string $file        The file name of the file to attach\nor the file contents itself\n@param string $c_type      The content type\n@param string $name        The filename of the attachment\nOnly use if $file is the contents\n@param bool   $isfile      Whether $file is a filename or not. Defaults to true\n@param string $encoding    The type of encoding to use. Defaults to base64.\nPossible values: 7bit, 8bit, base64 or quoted-printable.\n@param string $disposition The content-disposition of this file\nDefaults to attachment.\nPossible values: attachment, inline.\n@param string $charset     The character set of attachment's content.\n@param string $language    The language of the attachment\n@param string $location    The RFC 2557.4 location of the attachment\n@param string $n_encoding  Encoding of the attachment's name in Content-Type\nBy default filenames are encoded using RFC2231 method\nHere you can set RFC2047 encoding (quoted-printable\nor base64) instead\n@param string $f_encoding  Encoding of the attachment's filename\nin Content-Disposition header.\n@param string $description Content-Description header\n@param string $h_charset   The character set of the headers e.g. filename\nIf not specified, $charset will be used\n@param array  $add_headers Additional part headers. Array keys can be in form\nof <header_name>:<parameter_name>\n\n@return mixed              True on success or PEAR_Error object\n@access public", "docstring_tokens": ["Adds", "a", "file", "to", "the", "list", "of", "attachments", "."], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/Mail/mime.php#L397-L454", "partition": "test"}
{"repo": "joegreen88/zf1-component-config", "path": "src/Zend/Config/Json.php", "func_name": "Zend_Config_Json._processExtends", "original_string": "protected function _processExtends(array $data, $section, array $config = array())\n    {\n        if (!isset($data[$section])) {\n\n            throw new Zend_Config_Exception(sprintf('Section \"%s\" cannot be found', $section));\n        }\n\n        $thisSection  = $data[$section];\n\n        if (is_array($thisSection) && isset($thisSection[self::EXTENDS_NAME])) {\n            if (is_array($thisSection[self::EXTENDS_NAME])) {\n\n                throw new Zend_Config_Exception('Invalid extends clause: must be a string; array received');\n            }\n            $this->_assertValidExtend($section, $thisSection[self::EXTENDS_NAME]);\n\n            if (!$this->_skipExtends) {\n                $config = $this->_processExtends($data, $thisSection[self::EXTENDS_NAME], $config);\n            }\n            unset($thisSection[self::EXTENDS_NAME]);\n        }\n\n        $config = $this->_arrayMergeRecursive($config, $thisSection);\n\n        return $config;\n    }", "language": "php", "code": "protected function _processExtends(array $data, $section, array $config = array())\n    {\n        if (!isset($data[$section])) {\n\n            throw new Zend_Config_Exception(sprintf('Section \"%s\" cannot be found', $section));\n        }\n\n        $thisSection  = $data[$section];\n\n        if (is_array($thisSection) && isset($thisSection[self::EXTENDS_NAME])) {\n            if (is_array($thisSection[self::EXTENDS_NAME])) {\n\n                throw new Zend_Config_Exception('Invalid extends clause: must be a string; array received');\n            }\n            $this->_assertValidExtend($section, $thisSection[self::EXTENDS_NAME]);\n\n            if (!$this->_skipExtends) {\n                $config = $this->_processExtends($data, $thisSection[self::EXTENDS_NAME], $config);\n            }\n            unset($thisSection[self::EXTENDS_NAME]);\n        }\n\n        $config = $this->_arrayMergeRecursive($config, $thisSection);\n\n        return $config;\n    }", "code_tokens": ["protected", "function", "_processExtends", "(", "array", "$", "data", ",", "$", "section", ",", "array", "$", "config", "=", "array", "(", ")", ")", "{", "if", "(", "!", "isset", "(", "$", "data", "[", "$", "section", "]", ")", ")", "{", "throw", "new", "Zend_Config_Exception", "(", "sprintf", "(", "'Section \"%s\" cannot be found'", ",", "$", "section", ")", ")", ";", "}", "$", "thisSection", "=", "$", "data", "[", "$", "section", "]", ";", "if", "(", "is_array", "(", "$", "thisSection", ")", "&&", "isset", "(", "$", "thisSection", "[", "self", "::", "EXTENDS_NAME", "]", ")", ")", "{", "if", "(", "is_array", "(", "$", "thisSection", "[", "self", "::", "EXTENDS_NAME", "]", ")", ")", "{", "throw", "new", "Zend_Config_Exception", "(", "'Invalid extends clause: must be a string; array received'", ")", ";", "}", "$", "this", "->", "_assertValidExtend", "(", "$", "section", ",", "$", "thisSection", "[", "self", "::", "EXTENDS_NAME", "]", ")", ";", "if", "(", "!", "$", "this", "->", "_skipExtends", ")", "{", "$", "config", "=", "$", "this", "->", "_processExtends", "(", "$", "data", ",", "$", "thisSection", "[", "self", "::", "EXTENDS_NAME", "]", ",", "$", "config", ")", ";", "}", "unset", "(", "$", "thisSection", "[", "self", "::", "EXTENDS_NAME", "]", ")", ";", "}", "$", "config", "=", "$", "this", "->", "_arrayMergeRecursive", "(", "$", "config", ",", "$", "thisSection", ")", ";", "return", "$", "config", ";", "}"], "docstring": "Helper function to process each element in the section and handle\nthe \"_extends\" inheritance attribute.\n\n@param  array            $data Data array to process\n@param  string           $section Section to process\n@param  array            $config  Configuration which was parsed yet\n@throws Zend_Config_Exception When $section cannot be found\n@return array", "docstring_tokens": ["Helper", "function", "to", "process", "each", "element", "in", "the", "section", "and", "handle", "the", "_extends", "inheritance", "attribute", "."], "sha": "c19901ce03417db5aa354ddb80c5ecfe7f111b59", "url": "https://github.com/joegreen88/zf1-component-config/blob/c19901ce03417db5aa354ddb80c5ecfe7f111b59/src/Zend/Config/Json.php#L186-L211", "partition": "test"}
{"repo": "realexpayments/rxp-hpp-php", "path": "src/main/php/com-realexpayments-hpp-sdk/domain/HppRequest.php", "func_name": "HppRequest.addAutoSettleFlag", "original_string": "public function addAutoSettleFlag( $autoSettleFlag ) {\n\t\tif ( is_bool( $autoSettleFlag ) ) {\n\t\t\t$this->autoSettleFlag = $autoSettleFlag ? Flag::TRUE : Flag::FALSE;\n\t\t} else {\n\t\t\t$this->autoSettleFlag = $autoSettleFlag;\n\t\t}\n\n\t\treturn $this;\n\t}", "language": "php", "code": "public function addAutoSettleFlag( $autoSettleFlag ) {\n\t\tif ( is_bool( $autoSettleFlag ) ) {\n\t\t\t$this->autoSettleFlag = $autoSettleFlag ? Flag::TRUE : Flag::FALSE;\n\t\t} else {\n\t\t\t$this->autoSettleFlag = $autoSettleFlag;\n\t\t}\n\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "addAutoSettleFlag", "(", "$", "autoSettleFlag", ")", "{", "if", "(", "is_bool", "(", "$", "autoSettleFlag", ")", ")", "{", "$", "this", "->", "autoSettleFlag", "=", "$", "autoSettleFlag", "?", "Flag", "::", "TRUE", ":", "Flag", "::", "FALSE", ";", "}", "else", "{", "$", "this", "->", "autoSettleFlag", "=", "$", "autoSettleFlag", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Helper method for adding a autoSettleFlag\n\n@param String|bool $autoSettleFlag\n\n@return HppRequest", "docstring_tokens": ["Helper", "method", "for", "adding", "a", "autoSettleFlag"], "sha": "95437a296cc87ca69a29dda256872b1ea52e7be9", "url": "https://github.com/realexpayments/rxp-hpp-php/blob/95437a296cc87ca69a29dda256872b1ea52e7be9/src/main/php/com-realexpayments-hpp-sdk/domain/HppRequest.php#L976-L984", "partition": "test"}
{"repo": "TeknooSoftware/states-life-cycle", "path": "src/StatedClass/LifeCyclableTrait.php", "func_name": "LifeCyclableTrait.registerObserver", "original_string": "public function registerObserver(ObservedInterface $observed): LifeCyclableInterface\n    {\n        $this->observedList[\\spl_object_hash($observed)] = $observed;\n\n        return $this;\n    }", "language": "php", "code": "public function registerObserver(ObservedInterface $observed): LifeCyclableInterface\n    {\n        $this->observedList[\\spl_object_hash($observed)] = $observed;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "registerObserver", "(", "ObservedInterface", "$", "observed", ")", ":", "LifeCyclableInterface", "{", "$", "this", "->", "observedList", "[", "\\", "spl_object_hash", "(", "$", "observed", ")", "]", "=", "$", "observed", ";", "return", "$", "this", ";", "}"], "docstring": "To register a new observer.\n\n@param ObservedInterface $observed\n\n@return LifeCyclableInterface", "docstring_tokens": ["To", "register", "a", "new", "observer", "."], "sha": "6a127b672539f0e40f3db12fca4e0d80412636de", "url": "https://github.com/TeknooSoftware/states-life-cycle/blob/6a127b672539f0e40f3db12fca4e0d80412636de/src/StatedClass/LifeCyclableTrait.php#L58-L63", "partition": "test"}
{"repo": "develpr/alexa-app", "path": "src/Request/AlexaRequest.php", "func_name": "AlexaRequest.updateSlot", "original_string": "public function updateSlot($slotName, $value, $confirmed = null)\n    {\n        if (!$this->processed) {\n            $this->process();\n        }\n\n        if (array_has($this->slots, [$slotName])) {\n            $this->slots[$slotName]['value'] = $value;\n\n            if ($confirmed) {\n                $this->slots[$slotName]['confirmationStatus'] = $this::CONFIRMED_STATUS;\n            } elseif (!is_null($confirmed) && !$confirmed) {\n                $this->slots[$slotName]['confirmationStatus'] = $this::DENIED_STATUS;\n            } else {\n                $this->slots[$slotName]['confirmationStatus'] = $this::NO_CONFIRMATION_STATUS;\n            }\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function updateSlot($slotName, $value, $confirmed = null)\n    {\n        if (!$this->processed) {\n            $this->process();\n        }\n\n        if (array_has($this->slots, [$slotName])) {\n            $this->slots[$slotName]['value'] = $value;\n\n            if ($confirmed) {\n                $this->slots[$slotName]['confirmationStatus'] = $this::CONFIRMED_STATUS;\n            } elseif (!is_null($confirmed) && !$confirmed) {\n                $this->slots[$slotName]['confirmationStatus'] = $this::DENIED_STATUS;\n            } else {\n                $this->slots[$slotName]['confirmationStatus'] = $this::NO_CONFIRMATION_STATUS;\n            }\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "updateSlot", "(", "$", "slotName", ",", "$", "value", ",", "$", "confirmed", "=", "null", ")", "{", "if", "(", "!", "$", "this", "->", "processed", ")", "{", "$", "this", "->", "process", "(", ")", ";", "}", "if", "(", "array_has", "(", "$", "this", "->", "slots", ",", "[", "$", "slotName", "]", ")", ")", "{", "$", "this", "->", "slots", "[", "$", "slotName", "]", "[", "'value'", "]", "=", "$", "value", ";", "if", "(", "$", "confirmed", ")", "{", "$", "this", "->", "slots", "[", "$", "slotName", "]", "[", "'confirmationStatus'", "]", "=", "$", "this", "::", "CONFIRMED_STATUS", ";", "}", "elseif", "(", "!", "is_null", "(", "$", "confirmed", ")", "&&", "!", "$", "confirmed", ")", "{", "$", "this", "->", "slots", "[", "$", "slotName", "]", "[", "'confirmationStatus'", "]", "=", "$", "this", "::", "DENIED_STATUS", ";", "}", "else", "{", "$", "this", "->", "slots", "[", "$", "slotName", "]", "[", "'confirmationStatus'", "]", "=", "$", "this", "::", "NO_CONFIRMATION_STATUS", ";", "}", "}", "return", "$", "this", ";", "}"], "docstring": "Update a slot\n\n@param $slotName\n@param $value\n@param bool $confirmed\n@param bool $denied\n\n@return $this", "docstring_tokens": ["Update", "a", "slot"], "sha": "4e14c2d2b6db4c58fb11c82867d1e712575f1ec3", "url": "https://github.com/develpr/alexa-app/blob/4e14c2d2b6db4c58fb11c82867d1e712575f1ec3/src/Request/AlexaRequest.php#L222-L241", "partition": "test"}
{"repo": "Hzhihua/yii2-dump", "path": "src/models/Schema.php", "func_name": "Schema.getDropFK", "original_string": "public function getDropFK(TableSchema $table, $indent = 0)\n    {\n        if (empty($table->foreignKeys)) {\n            return '';\n        }\n\n        $textIndent = $this->textIndent($indent);\n        $tableName = static::removePrefix($table->name, $this->db->tablePrefix);\n\n        $definition = <<<DEFINITION\n{$textIndent}foreach (\\$this->runSuccess as \\$keyName => \\$value) {\n{$textIndent}    \\$this->dropForeignKey(\\$keyName, '{{%$tableName}}');\n{$textIndent}}\nDEFINITION;\n\n        return $definition . self::ENTER;\n\n    }", "language": "php", "code": "public function getDropFK(TableSchema $table, $indent = 0)\n    {\n        if (empty($table->foreignKeys)) {\n            return '';\n        }\n\n        $textIndent = $this->textIndent($indent);\n        $tableName = static::removePrefix($table->name, $this->db->tablePrefix);\n\n        $definition = <<<DEFINITION\n{$textIndent}foreach (\\$this->runSuccess as \\$keyName => \\$value) {\n{$textIndent}    \\$this->dropForeignKey(\\$keyName, '{{%$tableName}}');\n{$textIndent}}\nDEFINITION;\n\n        return $definition . self::ENTER;\n\n    }", "code_tokens": ["public", "function", "getDropFK", "(", "TableSchema", "$", "table", ",", "$", "indent", "=", "0", ")", "{", "if", "(", "empty", "(", "$", "table", "->", "foreignKeys", ")", ")", "{", "return", "''", ";", "}", "$", "textIndent", "=", "$", "this", "->", "textIndent", "(", "$", "indent", ")", ";", "$", "tableName", "=", "static", "::", "removePrefix", "(", "$", "table", "->", "name", ",", "$", "this", "->", "db", "->", "tablePrefix", ")", ";", "$", "definition", "=", " <<<DEFINITION\n{$textIndent}foreach (\\$this->runSuccess as \\$keyName => \\$value) {\n{$textIndent}    \\$this->dropForeignKey(\\$keyName, '{{%$tableName}}');\n{$textIndent}}\nDEFINITION", ";", "return", "$", "definition", ".", "self", "::", "ENTER", ";", "}"], "docstring": "drop foreign key\n@param TableSchema $table\n@param $indent int text-indent \u6587\u672c\u7f29\u8fdb\n@return string", "docstring_tokens": ["drop", "foreign", "key"], "sha": "6865c2064d72b8361e0d7adfa6f11aa58608ef93", "url": "https://github.com/Hzhihua/yii2-dump/blob/6865c2064d72b8361e0d7adfa6f11aa58608ef93/src/models/Schema.php#L391-L408", "partition": "test"}
{"repo": "maniaplanet/manialive-plugins", "path": "Standard/TeamSpeak/TeamSpeak3/Node/Server.php", "func_name": "Server.logAdd", "original_string": "public function logAdd($logmsg, $loglevel = \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\TeamSpeak3::LOGLEVEL_INFO)\r\n  {\r\n    $this->execute(\"logadd\", array(\"logmsg\" => $logmsg, \"loglevel\" => $loglevel));\r\n  }", "language": "php", "code": "public function logAdd($logmsg, $loglevel = \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\TeamSpeak3::LOGLEVEL_INFO)\r\n  {\r\n    $this->execute(\"logadd\", array(\"logmsg\" => $logmsg, \"loglevel\" => $loglevel));\r\n  }", "code_tokens": ["public", "function", "logAdd", "(", "$", "logmsg", ",", "$", "loglevel", "=", "\\", "ManiaLivePlugins", "\\", "Standard", "\\", "TeamSpeak", "\\", "TeamSpeak3", "\\", "TeamSpeak3", "::", "LOGLEVEL_INFO", ")", "{", "$", "this", "->", "execute", "(", "\"logadd\"", ",", "array", "(", "\"logmsg\"", "=>", "$", "logmsg", ",", "\"loglevel\"", "=>", "$", "loglevel", ")", ")", ";", "}"], "docstring": "Writes a custom entry into the virtual server log.\n\n@param  string  $logmsg\n@param  integer $loglevel\n@return void", "docstring_tokens": ["Writes", "a", "custom", "entry", "into", "the", "virtual", "server", "log", "."], "sha": "f3f37da6836fe3d06fed32e75880caa6e9c0496b", "url": "https://github.com/maniaplanet/manialive-plugins/blob/f3f37da6836fe3d06fed32e75880caa6e9c0496b/Standard/TeamSpeak/TeamSpeak3/Node/Server.php#L2041-L2044", "partition": "test"}
{"repo": "mcamara/laravel-localization", "path": "src/Mcamara/LaravelLocalization/Commands/RouteTranslationsCacheCommand.php", "func_name": "RouteTranslationsCacheCommand.cacheRoutesPerLocale", "original_string": "protected function cacheRoutesPerLocale()\n    {\n        // Store the default routes cache,\n        // this way the Application will detect that routes are cached.\n        $allLocales = $this->getSupportedLocales();\n\n        array_push($allLocales, null);\n\n        foreach ($allLocales as $locale) {\n\n            $routes = $this->getFreshApplicationRoutes($locale);\n\n            if (count($routes) == 0) {\n                $this->error(\"Your application doesn't have any routes.\");\n                return;\n            }\n\n            foreach ($routes as $route) {\n                $route->prepareForSerialization();\n            }\n\n            $this->files->put(\n                $this->makeLocaleRoutesPath($locale), $this->buildRouteCacheFile($routes)\n            );\n        }\n    }", "language": "php", "code": "protected function cacheRoutesPerLocale()\n    {\n        // Store the default routes cache,\n        // this way the Application will detect that routes are cached.\n        $allLocales = $this->getSupportedLocales();\n\n        array_push($allLocales, null);\n\n        foreach ($allLocales as $locale) {\n\n            $routes = $this->getFreshApplicationRoutes($locale);\n\n            if (count($routes) == 0) {\n                $this->error(\"Your application doesn't have any routes.\");\n                return;\n            }\n\n            foreach ($routes as $route) {\n                $route->prepareForSerialization();\n            }\n\n            $this->files->put(\n                $this->makeLocaleRoutesPath($locale), $this->buildRouteCacheFile($routes)\n            );\n        }\n    }", "code_tokens": ["protected", "function", "cacheRoutesPerLocale", "(", ")", "{", "// Store the default routes cache,", "// this way the Application will detect that routes are cached.", "$", "allLocales", "=", "$", "this", "->", "getSupportedLocales", "(", ")", ";", "array_push", "(", "$", "allLocales", ",", "null", ")", ";", "foreach", "(", "$", "allLocales", "as", "$", "locale", ")", "{", "$", "routes", "=", "$", "this", "->", "getFreshApplicationRoutes", "(", "$", "locale", ")", ";", "if", "(", "count", "(", "$", "routes", ")", "==", "0", ")", "{", "$", "this", "->", "error", "(", "\"Your application doesn't have any routes.\"", ")", ";", "return", ";", "}", "foreach", "(", "$", "routes", "as", "$", "route", ")", "{", "$", "route", "->", "prepareForSerialization", "(", ")", ";", "}", "$", "this", "->", "files", "->", "put", "(", "$", "this", "->", "makeLocaleRoutesPath", "(", "$", "locale", ")", ",", "$", "this", "->", "buildRouteCacheFile", "(", "$", "routes", ")", ")", ";", "}", "}"], "docstring": "Cache the routes separately for each locale.", "docstring_tokens": ["Cache", "the", "routes", "separately", "for", "each", "locale", "."], "sha": "cf89d2515d576292e65bfa5893a0efd1cc5a4064", "url": "https://github.com/mcamara/laravel-localization/blob/cf89d2515d576292e65bfa5893a0efd1cc5a4064/src/Mcamara/LaravelLocalization/Commands/RouteTranslationsCacheCommand.php#L60-L85", "partition": "test"}
{"repo": "xloit/xloit-bridge-zend-session", "path": "src/SaveHandler/Database/Adapter/TableGateaway.php", "func_name": "TableGateaway.update", "original_string": "public function update($sessionEntity, $data)\n    {\n        return $this->storageManager->update(\n            $data,\n            [\n                $this->options->getIdColumn()   => $this->getIdValue($sessionEntity),\n                $this->options->getNameColumn() => $this->getNameValue($sessionEntity)\n            ]\n        );\n    }", "language": "php", "code": "public function update($sessionEntity, $data)\n    {\n        return $this->storageManager->update(\n            $data,\n            [\n                $this->options->getIdColumn()   => $this->getIdValue($sessionEntity),\n                $this->options->getNameColumn() => $this->getNameValue($sessionEntity)\n            ]\n        );\n    }", "code_tokens": ["public", "function", "update", "(", "$", "sessionEntity", ",", "$", "data", ")", "{", "return", "$", "this", "->", "storageManager", "->", "update", "(", "$", "data", ",", "[", "$", "this", "->", "options", "->", "getIdColumn", "(", ")", "=>", "$", "this", "->", "getIdValue", "(", "$", "sessionEntity", ")", ",", "$", "this", "->", "options", "->", "getNameColumn", "(", ")", "=>", "$", "this", "->", "getNameValue", "(", "$", "sessionEntity", ")", "]", ")", ";", "}"], "docstring": "Update a record.\n\n@param mixed $sessionEntity\n@param array $data\n\n@return mixed", "docstring_tokens": ["Update", "a", "record", "."], "sha": "9697c5a4a273999514c53500edbeb1f0cc3a0fd9", "url": "https://github.com/xloit/xloit-bridge-zend-session/blob/9697c5a4a273999514c53500edbeb1f0cc3a0fd9/src/SaveHandler/Database/Adapter/TableGateaway.php#L83-L92", "partition": "test"}
{"repo": "perminder-klair/kato-core", "path": "helpers/KatoBase.php", "func_name": "KatoBase.limit_words", "original_string": "public static function limit_words($string, $word_limit)\n    {\n        $words = explode(' ',$string);\n        return trim(implode(' ', array_splice($words, 0, $word_limit))) .'...';\n    }", "language": "php", "code": "public static function limit_words($string, $word_limit)\n    {\n        $words = explode(' ',$string);\n        return trim(implode(' ', array_splice($words, 0, $word_limit))) .'...';\n    }", "code_tokens": ["public", "static", "function", "limit_words", "(", "$", "string", ",", "$", "word_limit", ")", "{", "$", "words", "=", "explode", "(", "' '", ",", "$", "string", ")", ";", "return", "trim", "(", "implode", "(", "' '", ",", "array_splice", "(", "$", "words", ",", "0", ",", "$", "word_limit", ")", ")", ")", ".", "'...'", ";", "}"], "docstring": "Helper function to limit the words in a string\n\n@param string $string the given string\n@param int $word_limit the number of words to limit to\n@return string the limited string", "docstring_tokens": ["Helper", "function", "to", "limit", "the", "words", "in", "a", "string"], "sha": "168227027b857c90e8c5f24a2d591796b49ac9e7", "url": "https://github.com/perminder-klair/kato-core/blob/168227027b857c90e8c5f24a2d591796b49ac9e7/helpers/KatoBase.php#L141-L145", "partition": "test"}
{"repo": "AlcyZ/PHP-Image-Magick", "path": "src/Commands/Command.php", "func_name": "Command._createOption", "original_string": "protected function _createOption($option, $value)\n\t{\n\t\tif(!class_exists($option))\n\t\t{\n\t\t\tthrow new InvalidOptionValueException('Option class \"' . $option . '\" not found.');\n\t\t}\n\t\t$class = new $option();\n\t\treturn $this->_validateOptionInterface($class)->_validateOption($class)->getOption($value);\n\t}", "language": "php", "code": "protected function _createOption($option, $value)\n\t{\n\t\tif(!class_exists($option))\n\t\t{\n\t\t\tthrow new InvalidOptionValueException('Option class \"' . $option . '\" not found.');\n\t\t}\n\t\t$class = new $option();\n\t\treturn $this->_validateOptionInterface($class)->_validateOption($class)->getOption($value);\n\t}", "code_tokens": ["protected", "function", "_createOption", "(", "$", "option", ",", "$", "value", ")", "{", "if", "(", "!", "class_exists", "(", "$", "option", ")", ")", "{", "throw", "new", "InvalidOptionValueException", "(", "'Option class \"'", ".", "$", "option", ".", "'\" not found.'", ")", ";", "}", "$", "class", "=", "new", "$", "option", "(", ")", ";", "return", "$", "this", "->", "_validateOptionInterface", "(", "$", "class", ")", "->", "_validateOption", "(", "$", "class", ")", "->", "getOption", "(", "$", "value", ")", ";", "}"], "docstring": "Creates an option and return it.\n\n@param string $option Full qualified class name.\n@param mixed  $value  Option value.\n\n@return string\n@throws InvalidOptionValueException", "docstring_tokens": ["Creates", "an", "option", "and", "return", "it", "."], "sha": "4a432f89c3829f10a9078df801da4a98b988f06d", "url": "https://github.com/AlcyZ/PHP-Image-Magick/blob/4a432f89c3829f10a9078df801da4a98b988f06d/src/Commands/Command.php#L19-L27", "partition": "test"}
{"repo": "KonstantinFilin/ksutils", "path": "src/KsUtils/StrFilter/Phone.php", "func_name": "Phone.filter", "original_string": "public function filter($str)\n    {\n        $str = preg_replace(\"|[\\D+]|\", \"\", $str);\n\n        if (strlen($str) == 11 && in_array(substr($str, 0, 1), array(\"7\", \"8\"))) {\n            $str = substr($str, 1);\n        }\n\n        $len2 = strlen($str);\n\n        return $len2 == 10 ? $str : \"\";\n    }", "language": "php", "code": "public function filter($str)\n    {\n        $str = preg_replace(\"|[\\D+]|\", \"\", $str);\n\n        if (strlen($str) == 11 && in_array(substr($str, 0, 1), array(\"7\", \"8\"))) {\n            $str = substr($str, 1);\n        }\n\n        $len2 = strlen($str);\n\n        return $len2 == 10 ? $str : \"\";\n    }", "code_tokens": ["public", "function", "filter", "(", "$", "str", ")", "{", "$", "str", "=", "preg_replace", "(", "\"|[\\D+]|\"", ",", "\"\"", ",", "$", "str", ")", ";", "if", "(", "strlen", "(", "$", "str", ")", "==", "11", "&&", "in_array", "(", "substr", "(", "$", "str", ",", "0", ",", "1", ")", ",", "array", "(", "\"7\"", ",", "\"8\"", ")", ")", ")", "{", "$", "str", "=", "substr", "(", "$", "str", ",", "1", ")", ";", "}", "$", "len2", "=", "strlen", "(", "$", "str", ")", ";", "return", "$", "len2", "==", "10", "?", "$", "str", ":", "\"\"", ";", "}"], "docstring": "Returns only digits from source string. If string is\n11 chars length and first char is 7 then that char is stripped\n@param  string $str Source string\n@return string Filtered string", "docstring_tokens": ["Returns", "only", "digits", "from", "source", "string", ".", "If", "string", "is", "11", "chars", "length", "and", "first", "char", "is", "7", "then", "that", "char", "is", "stripped"], "sha": "d9b7645927e6d69c81bd19cfb7601b5e25c4a62b", "url": "https://github.com/KonstantinFilin/ksutils/blob/d9b7645927e6d69c81bd19cfb7601b5e25c4a62b/src/KsUtils/StrFilter/Phone.php#L16-L27", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Pager/PagerRenderer.php", "func_name": "PagerRenderer.getPrevious", "original_string": "public function getPrevious()\n\t{\n\t\tif (! $this->hasPrevious())\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\t$uri = clone $this->uri;\n\n\t\tif ($this->segment === 0)\n\t\t{\n\t\t\t$uri->addQuery('page', $this->first - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$uri->setSegment($this->segment, $this->first - 1);\n\t\t}\n\n\t\treturn (string) $uri;\n\t}", "language": "php", "code": "public function getPrevious()\n\t{\n\t\tif (! $this->hasPrevious())\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\t$uri = clone $this->uri;\n\n\t\tif ($this->segment === 0)\n\t\t{\n\t\t\t$uri->addQuery('page', $this->first - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$uri->setSegment($this->segment, $this->first - 1);\n\t\t}\n\n\t\treturn (string) $uri;\n\t}", "code_tokens": ["public", "function", "getPrevious", "(", ")", "{", "if", "(", "!", "$", "this", "->", "hasPrevious", "(", ")", ")", "{", "return", "null", ";", "}", "$", "uri", "=", "clone", "$", "this", "->", "uri", ";", "if", "(", "$", "this", "->", "segment", "===", "0", ")", "{", "$", "uri", "->", "addQuery", "(", "'page'", ",", "$", "this", "->", "first", "-", "1", ")", ";", "}", "else", "{", "$", "uri", "->", "setSegment", "(", "$", "this", "->", "segment", ",", "$", "this", "->", "first", "-", "1", ")", ";", "}", "return", "(", "string", ")", "$", "uri", ";", "}"], "docstring": "Returns a URL to the \"previous\" page. The previous page is NOT the\npage before the current page, but is the page just before the\n\"first\" page.\n\nYou MUST call hasPrevious() first, or this value may be invalid.\n\n@return string|null", "docstring_tokens": ["Returns", "a", "URL", "to", "the", "previous", "page", ".", "The", "previous", "page", "is", "NOT", "the", "page", "before", "the", "current", "page", "but", "is", "the", "page", "just", "before", "the", "first", "page", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Pager/PagerRenderer.php#L115-L134", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Files/File.php", "func_name": "File.getSize", "original_string": "public function getSize(string $unit = 'b')\n\t{\n\t\tif (is_null($this->size))\n\t\t{\n\t\t\t$this->size = filesize($this->getPathname());\n\t\t}\n\n\t\tswitch (strtolower($unit))\n\t\t{\n\t\t\tcase 'kb':\n\t\t\t\treturn number_format($this->size / 1024, 3);\n\t\t\tcase 'mb':\n\t\t\t\treturn number_format(($this->size / 1024) / 1024, 3);\n\t\t}\n\n\t\treturn (int) $this->size;\n\t}", "language": "php", "code": "public function getSize(string $unit = 'b')\n\t{\n\t\tif (is_null($this->size))\n\t\t{\n\t\t\t$this->size = filesize($this->getPathname());\n\t\t}\n\n\t\tswitch (strtolower($unit))\n\t\t{\n\t\t\tcase 'kb':\n\t\t\t\treturn number_format($this->size / 1024, 3);\n\t\t\tcase 'mb':\n\t\t\t\treturn number_format(($this->size / 1024) / 1024, 3);\n\t\t}\n\n\t\treturn (int) $this->size;\n\t}", "code_tokens": ["public", "function", "getSize", "(", "string", "$", "unit", "=", "'b'", ")", "{", "if", "(", "is_null", "(", "$", "this", "->", "size", ")", ")", "{", "$", "this", "->", "size", "=", "filesize", "(", "$", "this", "->", "getPathname", "(", ")", ")", ";", "}", "switch", "(", "strtolower", "(", "$", "unit", ")", ")", "{", "case", "'kb'", ":", "return", "number_format", "(", "$", "this", "->", "size", "/", "1024", ",", "3", ")", ";", "case", "'mb'", ":", "return", "number_format", "(", "(", "$", "this", "->", "size", "/", "1024", ")", "/", "1024", ",", "3", ")", ";", "}", "return", "(", "int", ")", "$", "this", "->", "size", ";", "}"], "docstring": "Retrieve the file size.\n\nImplementations SHOULD return the value stored in the \"size\" key of\nthe file in the $_FILES array if available, as PHP calculates this based\non the actual size transmitted.\n\n@param string $unit The unit to return:\n- b   Bytes\n- kb  Kilobytes\n- mb  Megabytes\n\n@return integer|null The file size in bytes or null if unknown.", "docstring_tokens": ["Retrieve", "the", "file", "size", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Files/File.php#L96-L112", "partition": "test"}
{"repo": "tripal/TripalTestSuite", "path": "src/Services/MenuCaller.php", "func_name": "MenuCaller.setPath", "original_string": "public function setPath($path)\n    {\n        $this->path = trim($path, '/');\n\n        if(empty($this->path)) {\n            // Home page requested so let's use /node\n            $this->path = 'node';\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function setPath($path)\n    {\n        $this->path = trim($path, '/');\n\n        if(empty($this->path)) {\n            // Home page requested so let's use /node\n            $this->path = 'node';\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setPath", "(", "$", "path", ")", "{", "$", "this", "->", "path", "=", "trim", "(", "$", "path", ",", "'/'", ")", ";", "if", "(", "empty", "(", "$", "this", "->", "path", ")", ")", "{", "// Home page requested so let's use /node", "$", "this", "->", "path", "=", "'node'", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Set public path.\n\n@param $path\n@return $this", "docstring_tokens": ["Set", "public", "path", "."], "sha": "3e877af0204c59b9aa6b7ef0324ca4b985a7e3b4", "url": "https://github.com/tripal/TripalTestSuite/blob/3e877af0204c59b9aa6b7ef0324ca4b985a7e3b4/src/Services/MenuCaller.php#L49-L59", "partition": "test"}
{"repo": "phpzm/model", "path": "src/DataMapper.php", "func_name": "DataMapper.recycle", "original_string": "final public function recycle($record = null): Record\n    {\n        if (!$this->destroyKeys) {\n            throw new SimplesValidationError(\n                ['destroyKeys' => 'requires'],\n                \"Recycle needs the `destroyKeys`\"\n            );\n        }\n\n        $record = Record::parse($record);\n        foreach ($this->destroyKeys as $deletedKey) {\n            $record->set($deletedKey, __NULL__);\n        }\n\n        return $this->update($record, 'recycle', true);\n    }", "language": "php", "code": "final public function recycle($record = null): Record\n    {\n        if (!$this->destroyKeys) {\n            throw new SimplesValidationError(\n                ['destroyKeys' => 'requires'],\n                \"Recycle needs the `destroyKeys`\"\n            );\n        }\n\n        $record = Record::parse($record);\n        foreach ($this->destroyKeys as $deletedKey) {\n            $record->set($deletedKey, __NULL__);\n        }\n\n        return $this->update($record, 'recycle', true);\n    }", "code_tokens": ["final", "public", "function", "recycle", "(", "$", "record", "=", "null", ")", ":", "Record", "{", "if", "(", "!", "$", "this", "->", "destroyKeys", ")", "{", "throw", "new", "SimplesValidationError", "(", "[", "'destroyKeys'", "=>", "'requires'", "]", ",", "\"Recycle needs the `destroyKeys`\"", ")", ";", "}", "$", "record", "=", "Record", "::", "parse", "(", "$", "record", ")", ";", "foreach", "(", "$", "this", "->", "destroyKeys", "as", "$", "deletedKey", ")", "{", "$", "record", "->", "set", "(", "$", "deletedKey", ",", "__NULL__", ")", ";", "}", "return", "$", "this", "->", "update", "(", "$", "record", ",", "'recycle'", ",", "true", ")", ";", "}"], "docstring": "Recycle a destroyed record\n@param array|Record $record (null)\n@return Record\n@throws SimplesActionError\n@throws SimplesHookError\n@throws SimplesResourceError\n@throws SimplesRunTimeError\n@throws SimplesValidationError", "docstring_tokens": ["Recycle", "a", "destroyed", "record"], "sha": "a5d99166162693499c776c5e33e3a705e1842b3d", "url": "https://github.com/phpzm/model/blob/a5d99166162693499c776c5e33e3a705e1842b3d/src/DataMapper.php#L305-L320", "partition": "test"}
{"repo": "sagsoz06/no-captcha", "path": "src/Utilities/Request.php", "func_name": "Request.send", "original_string": "public function send($url, $curled = true)\n    {\n        $this->setUrl($url);\n\n        $result = ($this->isCurlExists() && $curled === true)\n            ? $this->curl()\n            : $this->simple();\n\n        return $this->interpretResponse($result);\n    }", "language": "php", "code": "public function send($url, $curled = true)\n    {\n        $this->setUrl($url);\n\n        $result = ($this->isCurlExists() && $curled === true)\n            ? $this->curl()\n            : $this->simple();\n\n        return $this->interpretResponse($result);\n    }", "code_tokens": ["public", "function", "send", "(", "$", "url", ",", "$", "curled", "=", "true", ")", "{", "$", "this", "->", "setUrl", "(", "$", "url", ")", ";", "$", "result", "=", "(", "$", "this", "->", "isCurlExists", "(", ")", "&&", "$", "curled", "===", "true", ")", "?", "$", "this", "->", "curl", "(", ")", ":", "$", "this", "->", "simple", "(", ")", ";", "return", "$", "this", "->", "interpretResponse", "(", "$", "result", ")", ";", "}"], "docstring": "Run the request and get response.\n\n@param  string  $url\n@param  bool    $curled\n\n@return array", "docstring_tokens": ["Run", "the", "request", "and", "get", "response", "."], "sha": "5c1efdc1d0ba05d51153745da259c76a104095c3", "url": "https://github.com/sagsoz06/no-captcha/blob/5c1efdc1d0ba05d51153745da259c76a104095c3/src/Utilities/Request.php#L88-L97", "partition": "test"}
{"repo": "Josantonius/php-validate", "path": "src/Validate.php", "func_name": "Validate.asFloat", "original_string": "public static function asFloat($data, $default = null)\n    {\n        $float = filter_var($data ?? '', FILTER_VALIDATE_FLOAT);\n\n        return $float !== false ? $float : $default;\n    }", "language": "php", "code": "public static function asFloat($data, $default = null)\n    {\n        $float = filter_var($data ?? '', FILTER_VALIDATE_FLOAT);\n\n        return $float !== false ? $float : $default;\n    }", "code_tokens": ["public", "static", "function", "asFloat", "(", "$", "data", ",", "$", "default", "=", "null", ")", "{", "$", "float", "=", "filter_var", "(", "$", "data", "??", "''", ",", "FILTER_VALIDATE_FLOAT", ")", ";", "return", "$", "float", "!==", "false", "?", "$", "float", ":", "$", "default", ";", "}"], "docstring": "Parameter return as float.\n\n@param mixed $data    \u2192 data to convert\n@param mixed $default \u2192 default value in error case\n\n@return mixed \u2192 value, null or customized return value", "docstring_tokens": ["Parameter", "return", "as", "float", "."], "sha": "666215c14bed457b1b6d5d1213efcec5cbd82fd5", "url": "https://github.com/Josantonius/php-validate/blob/666215c14bed457b1b6d5d1213efcec5cbd82fd5/src/Validate.php#L113-L118", "partition": "test"}
{"repo": "ekyna/CoreBundle", "path": "DependencyInjection/Extension.php", "func_name": "Extension.getConfigurationDirectory", "original_string": "protected function getConfigurationDirectory()\n    {\n        $reflector = new \\ReflectionClass($this);\n        $fileName = $reflector->getFileName();\n\n        if (!is_dir($directory = realpath(dirname($fileName) . $this->configDirectory))) {\n            throw new \\Exception(sprintf('The configuration directory \"%s\" does not exists.', $directory));\n        }\n\n        return $directory;\n    }", "language": "php", "code": "protected function getConfigurationDirectory()\n    {\n        $reflector = new \\ReflectionClass($this);\n        $fileName = $reflector->getFileName();\n\n        if (!is_dir($directory = realpath(dirname($fileName) . $this->configDirectory))) {\n            throw new \\Exception(sprintf('The configuration directory \"%s\" does not exists.', $directory));\n        }\n\n        return $directory;\n    }", "code_tokens": ["protected", "function", "getConfigurationDirectory", "(", ")", "{", "$", "reflector", "=", "new", "\\", "ReflectionClass", "(", "$", "this", ")", ";", "$", "fileName", "=", "$", "reflector", "->", "getFileName", "(", ")", ";", "if", "(", "!", "is_dir", "(", "$", "directory", "=", "realpath", "(", "dirname", "(", "$", "fileName", ")", ".", "$", "this", "->", "configDirectory", ")", ")", ")", "{", "throw", "new", "\\", "Exception", "(", "sprintf", "(", "'The configuration directory \"%s\" does not exists.'", ",", "$", "directory", ")", ")", ";", "}", "return", "$", "directory", ";", "}"], "docstring": "Returns the configuration directory.\n\n@return string\n@throws \\Exception", "docstring_tokens": ["Returns", "the", "configuration", "directory", "."], "sha": "a471324311591489e7cebdb805921dd85ba104ec", "url": "https://github.com/ekyna/CoreBundle/blob/a471324311591489e7cebdb805921dd85ba104ec/DependencyInjection/Extension.php#L49-L59", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Routing/NativeRouter.php", "func_name": "NativeRouter.head", "original_string": "public function head(Route $route): void\n    {\n        $route->setRequestMethods([RequestMethod::HEAD]);\n\n        $this->addRoute($route);\n    }", "language": "php", "code": "public function head(Route $route): void\n    {\n        $route->setRequestMethods([RequestMethod::HEAD]);\n\n        $this->addRoute($route);\n    }", "code_tokens": ["public", "function", "head", "(", "Route", "$", "route", ")", ":", "void", "{", "$", "route", "->", "setRequestMethods", "(", "[", "RequestMethod", "::", "HEAD", "]", ")", ";", "$", "this", "->", "addRoute", "(", "$", "route", ")", ";", "}"], "docstring": "Helper function to set a HEAD addRoute.\n\n@param Route $route The route\n\n@throws \\Exception\n\n@return void", "docstring_tokens": ["Helper", "function", "to", "set", "a", "HEAD", "addRoute", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Routing/NativeRouter.php#L188-L193", "partition": "test"}
{"repo": "RichardTMiles/CarbonPHP", "path": "Request.php", "func_name": "Request.except", "original_string": "public function except(...$argv): self\n    {\n        array_walk($argv, function ($key) {\n            if (array_key_exists($key, $this->storage)) {\n                unset($this->storage[$key]);\n            }\n        });\n        return $this;\n    }", "language": "php", "code": "public function except(...$argv): self\n    {\n        array_walk($argv, function ($key) {\n            if (array_key_exists($key, $this->storage)) {\n                unset($this->storage[$key]);\n            }\n        });\n        return $this;\n    }", "code_tokens": ["public", "function", "except", "(", "...", "$", "argv", ")", ":", "self", "{", "array_walk", "(", "$", "argv", ",", "function", "(", "$", "key", ")", "{", "if", "(", "array_key_exists", "(", "$", "key", ",", "$", "this", "->", "storage", ")", ")", "{", "unset", "(", "$", "this", "->", "storage", "[", "$", "key", "]", ")", ";", "}", "}", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Removes passed arguments from the set\n@param array ...$argv\n@return Request", "docstring_tokens": ["Removes", "passed", "arguments", "from", "the", "set"], "sha": "22a403db161482f19a91771f62b930b8243a04c6", "url": "https://github.com/RichardTMiles/CarbonPHP/blob/22a403db161482f19a91771f62b930b8243a04c6/Request.php#L250-L258", "partition": "test"}
{"repo": "silvershop/silvershop-core", "path": "src/Model/Order.php", "func_name": "Order.Link", "original_string": "public function Link()\n    {\n        if (Security::getCurrentUser()) {\n            $link = Controller::join_links(AccountPage::find_link(), 'order', $this->ID);\n        }\n\n        $link = CheckoutPage::find_link(false, 'order', $this->ID);\n\n        $this->extend('updateLink', $link);\n\n        return $link;\n    }", "language": "php", "code": "public function Link()\n    {\n        if (Security::getCurrentUser()) {\n            $link = Controller::join_links(AccountPage::find_link(), 'order', $this->ID);\n        }\n\n        $link = CheckoutPage::find_link(false, 'order', $this->ID);\n\n        $this->extend('updateLink', $link);\n\n        return $link;\n    }", "code_tokens": ["public", "function", "Link", "(", ")", "{", "if", "(", "Security", "::", "getCurrentUser", "(", ")", ")", "{", "$", "link", "=", "Controller", "::", "join_links", "(", "AccountPage", "::", "find_link", "(", ")", ",", "'order'", ",", "$", "this", "->", "ID", ")", ";", "}", "$", "link", "=", "CheckoutPage", "::", "find_link", "(", "false", ",", "'order'", ",", "$", "this", "->", "ID", ")", ";", "$", "this", "->", "extend", "(", "'updateLink'", ",", "$", "link", ")", ";", "return", "$", "link", ";", "}"], "docstring": "Get the link for finishing order processing.", "docstring_tokens": ["Get", "the", "link", "for", "finishing", "order", "processing", "."], "sha": "b090e970b06c0fb7e68107360760b6e2d6d184c4", "url": "https://github.com/silvershop/silvershop-core/blob/b090e970b06c0fb7e68107360760b6e2d6d184c4/src/Model/Order.php#L508-L519", "partition": "test"}
{"repo": "lootils/geo", "path": "src/Lootils/Geo/Earth.php", "func_name": "Earth.convertDecToDMS", "original_string": "public function convertDecToDMS($coordinate) {\n\n    $dms = array();\n    $parts = explode('.', $coordinate);\n\n    // The degrees portion.\n    $dms['degrees'] = $parts[0];\n\n    // Calculate the minutes\n    $temp = (\"0.\" . $parts[1]) * 3600;\n    $dms['minutes'] = floor($temp / 60);\n\n    // Find the seconds left over\n    $dms['seconds'] = $temp - ($dms['minutes'] * 60);\n\n    return $dms;\n  }", "language": "php", "code": "public function convertDecToDMS($coordinate) {\n\n    $dms = array();\n    $parts = explode('.', $coordinate);\n\n    // The degrees portion.\n    $dms['degrees'] = $parts[0];\n\n    // Calculate the minutes\n    $temp = (\"0.\" . $parts[1]) * 3600;\n    $dms['minutes'] = floor($temp / 60);\n\n    // Find the seconds left over\n    $dms['seconds'] = $temp - ($dms['minutes'] * 60);\n\n    return $dms;\n  }", "code_tokens": ["public", "function", "convertDecToDMS", "(", "$", "coordinate", ")", "{", "$", "dms", "=", "array", "(", ")", ";", "$", "parts", "=", "explode", "(", "'.'", ",", "$", "coordinate", ")", ";", "// The degrees portion.", "$", "dms", "[", "'degrees'", "]", "=", "$", "parts", "[", "0", "]", ";", "// Calculate the minutes", "$", "temp", "=", "(", "\"0.\"", ".", "$", "parts", "[", "1", "]", ")", "*", "3600", ";", "$", "dms", "[", "'minutes'", "]", "=", "floor", "(", "$", "temp", "/", "60", ")", ";", "// Find the seconds left over", "$", "dms", "[", "'seconds'", "]", "=", "$", "temp", "-", "(", "$", "dms", "[", "'minutes'", "]", "*", "60", ")", ";", "return", "$", "dms", ";", "}"], "docstring": "Convert a coordinate into Degree Minute Second format.\n\n@param float $coordinate\nThe coordinate in decimal format to convert.\n\n@return array\nAn array with the keys degrees, minutes, and seconds", "docstring_tokens": ["Convert", "a", "coordinate", "into", "Degree", "Minute", "Second", "format", "."], "sha": "09cb37680489c167acbe3bbf4ab8235841094674", "url": "https://github.com/lootils/geo/blob/09cb37680489c167acbe3bbf4ab8235841094674/src/Lootils/Geo/Earth.php#L60-L76", "partition": "test"}
{"repo": "sabre-io/xml", "path": "lib/Service.php", "func_name": "Service.parse", "original_string": "public function parse($input, string $contextUri = null, string &$rootElementName = null)\n    {\n        if (is_resource($input)) {\n            // Unfortunately the XMLReader doesn't support streams. When it\n            // does, we can optimize this.\n            $input = (string) stream_get_contents($input);\n        }\n        $r = $this->getReader();\n        $r->contextUri = $contextUri;\n        $r->XML($input, null, $this->options);\n\n        $result = $r->parse();\n        $rootElementName = $result['name'];\n\n        return $result['value'];\n    }", "language": "php", "code": "public function parse($input, string $contextUri = null, string &$rootElementName = null)\n    {\n        if (is_resource($input)) {\n            // Unfortunately the XMLReader doesn't support streams. When it\n            // does, we can optimize this.\n            $input = (string) stream_get_contents($input);\n        }\n        $r = $this->getReader();\n        $r->contextUri = $contextUri;\n        $r->XML($input, null, $this->options);\n\n        $result = $r->parse();\n        $rootElementName = $result['name'];\n\n        return $result['value'];\n    }", "code_tokens": ["public", "function", "parse", "(", "$", "input", ",", "string", "$", "contextUri", "=", "null", ",", "string", "&", "$", "rootElementName", "=", "null", ")", "{", "if", "(", "is_resource", "(", "$", "input", ")", ")", "{", "// Unfortunately the XMLReader doesn't support streams. When it", "// does, we can optimize this.", "$", "input", "=", "(", "string", ")", "stream_get_contents", "(", "$", "input", ")", ";", "}", "$", "r", "=", "$", "this", "->", "getReader", "(", ")", ";", "$", "r", "->", "contextUri", "=", "$", "contextUri", ";", "$", "r", "->", "XML", "(", "$", "input", ",", "null", ",", "$", "this", "->", "options", ")", ";", "$", "result", "=", "$", "r", "->", "parse", "(", ")", ";", "$", "rootElementName", "=", "$", "result", "[", "'name'", "]", ";", "return", "$", "result", "[", "'value'", "]", ";", "}"], "docstring": "Parses a document in full.\n\nInput may be specified as a string or readable stream resource.\nThe returned value is the value of the root document.\n\nSpecifying the $contextUri allows the parser to figure out what the URI\nof the document was. This allows relative URIs within the document to be\nexpanded easily.\n\nThe $rootElementName is specified by reference and will be populated\nwith the root element name of the document.\n\n@param string|resource $input\n\n@throws ParseException\n\n@return array|object|string", "docstring_tokens": ["Parses", "a", "document", "in", "full", "."], "sha": "e8e9bb3e46afe12262ffd0e994ffa7fd5e163893", "url": "https://github.com/sabre-io/xml/blob/e8e9bb3e46afe12262ffd0e994ffa7fd5e163893/lib/Service.php#L112-L127", "partition": "test"}
{"repo": "APY/APYDataGridBundle", "path": "Grid/Column/Column.php", "func_name": "Column.renderCell", "original_string": "public function renderCell($value, $row, $router)\n    {\n        if (is_callable($this->callback)) {\n            return call_user_func($this->callback, $value, $row, $router);\n        }\n\n        $value = is_bool($value) ? (int) $value : $value;\n        if (array_key_exists((string) $value, $this->values)) {\n            $value = $this->values[$value];\n        }\n\n        return $value;\n    }", "language": "php", "code": "public function renderCell($value, $row, $router)\n    {\n        if (is_callable($this->callback)) {\n            return call_user_func($this->callback, $value, $row, $router);\n        }\n\n        $value = is_bool($value) ? (int) $value : $value;\n        if (array_key_exists((string) $value, $this->values)) {\n            $value = $this->values[$value];\n        }\n\n        return $value;\n    }", "code_tokens": ["public", "function", "renderCell", "(", "$", "value", ",", "$", "row", ",", "$", "router", ")", "{", "if", "(", "is_callable", "(", "$", "this", "->", "callback", ")", ")", "{", "return", "call_user_func", "(", "$", "this", "->", "callback", ",", "$", "value", ",", "$", "row", ",", "$", "router", ")", ";", "}", "$", "value", "=", "is_bool", "(", "$", "value", ")", "?", "(", "int", ")", "$", "value", ":", "$", "value", ";", "if", "(", "array_key_exists", "(", "(", "string", ")", "$", "value", ",", "$", "this", "->", "values", ")", ")", "{", "$", "value", "=", "$", "this", "->", "values", "[", "$", "value", "]", ";", "}", "return", "$", "value", ";", "}"], "docstring": "Draw cell.\n\n@param string $value\n@param Row    $row\n@param $router\n\n@return string", "docstring_tokens": ["Draw", "cell", "."], "sha": "03050b366a79553b014aa4297d31b585a84622a3", "url": "https://github.com/APY/APYDataGridBundle/blob/03050b366a79553b014aa4297d31b585a84622a3/Grid/Column/Column.php#L208-L220", "partition": "test"}
{"repo": "Roave/BetterReflection", "path": "src/Reflector/FunctionReflector.php", "func_name": "FunctionReflector.getAllFunctions", "original_string": "public function getAllFunctions() : array\n    {\n        /** @var ReflectionFunction[] $allFunctions */\n        $allFunctions = $this->sourceLocator->locateIdentifiersByType(\n            $this,\n            new IdentifierType(IdentifierType::IDENTIFIER_FUNCTION)\n        );\n\n        return $allFunctions;\n    }", "language": "php", "code": "public function getAllFunctions() : array\n    {\n        /** @var ReflectionFunction[] $allFunctions */\n        $allFunctions = $this->sourceLocator->locateIdentifiersByType(\n            $this,\n            new IdentifierType(IdentifierType::IDENTIFIER_FUNCTION)\n        );\n\n        return $allFunctions;\n    }", "code_tokens": ["public", "function", "getAllFunctions", "(", ")", ":", "array", "{", "/** @var ReflectionFunction[] $allFunctions */", "$", "allFunctions", "=", "$", "this", "->", "sourceLocator", "->", "locateIdentifiersByType", "(", "$", "this", ",", "new", "IdentifierType", "(", "IdentifierType", "::", "IDENTIFIER_FUNCTION", ")", ")", ";", "return", "$", "allFunctions", ";", "}"], "docstring": "Get all the functions available in the scope specified by the SourceLocator.\n\n@return ReflectionFunction[]", "docstring_tokens": ["Get", "all", "the", "functions", "available", "in", "the", "scope", "specified", "by", "the", "SourceLocator", "."], "sha": "173f42ccb0af41b01b3c2dfd5bd185ccd9ead50c", "url": "https://github.com/Roave/BetterReflection/blob/173f42ccb0af41b01b3c2dfd5bd185ccd9ead50c/src/Reflector/FunctionReflector.php#L54-L63", "partition": "test"}
{"repo": "jonesiscoding/pleasing-filters", "path": "src/PleasingPrefixFilter.php", "func_name": "PleasingPrefixFilter.prefixJustifyContent", "original_string": "protected function prefixJustifyContent( $value, $extra = null )\n  {\n    $prop = array(\n        '-webkit-justify-content',\n        '-ms-flex-pack',\n        'justify-content'\n    );\n\n    $val[] = $value;\n    switch( $value )\n    {\n      case 'flex-start':\n        $val[] = 'start';\n        break;\n      case 'flex-end':\n        $val[] = 'end';\n        break;\n      case 'space-between':\n        $val[] = 'justify';\n        break;\n      case 'space-around':\n        $val[] = 'distribute';\n        break;\n      default:\n        $val[] = $value;\n    }\n    $val[] = $value;\n\n    return $this->getPrefixRules( $prop, $val, $extra );\n  }", "language": "php", "code": "protected function prefixJustifyContent( $value, $extra = null )\n  {\n    $prop = array(\n        '-webkit-justify-content',\n        '-ms-flex-pack',\n        'justify-content'\n    );\n\n    $val[] = $value;\n    switch( $value )\n    {\n      case 'flex-start':\n        $val[] = 'start';\n        break;\n      case 'flex-end':\n        $val[] = 'end';\n        break;\n      case 'space-between':\n        $val[] = 'justify';\n        break;\n      case 'space-around':\n        $val[] = 'distribute';\n        break;\n      default:\n        $val[] = $value;\n    }\n    $val[] = $value;\n\n    return $this->getPrefixRules( $prop, $val, $extra );\n  }", "code_tokens": ["protected", "function", "prefixJustifyContent", "(", "$", "value", ",", "$", "extra", "=", "null", ")", "{", "$", "prop", "=", "array", "(", "'-webkit-justify-content'", ",", "'-ms-flex-pack'", ",", "'justify-content'", ")", ";", "$", "val", "[", "]", "=", "$", "value", ";", "switch", "(", "$", "value", ")", "{", "case", "'flex-start'", ":", "$", "val", "[", "]", "=", "'start'", ";", "break", ";", "case", "'flex-end'", ":", "$", "val", "[", "]", "=", "'end'", ";", "break", ";", "case", "'space-between'", ":", "$", "val", "[", "]", "=", "'justify'", ";", "break", ";", "case", "'space-around'", ":", "$", "val", "[", "]", "=", "'distribute'", ";", "break", ";", "default", ":", "$", "val", "[", "]", "=", "$", "value", ";", "}", "$", "val", "[", "]", "=", "$", "value", ";", "return", "$", "this", "->", "getPrefixRules", "(", "$", "prop", ",", "$", "val", ",", "$", "extra", ")", ";", "}"], "docstring": "Properly prefixes the 'justify-content' property.\n\n@param string  $value  The value of the property.\n@param null    $extra  !important or null\n\n@return array          The prefixed rules to replace the 'justify-content' rule.", "docstring_tokens": ["Properly", "prefixes", "the", "justify", "-", "content", "property", "."], "sha": "39a364006d0561399ee1e13b0c6ed17de58fdd9b", "url": "https://github.com/jonesiscoding/pleasing-filters/blob/39a364006d0561399ee1e13b0c6ed17de58fdd9b/src/PleasingPrefixFilter.php#L373-L402", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Bridge/Twig/Command/LintCommand.php", "func_name": "LintCommand.displayText", "original_string": "protected function displayText(array $details, bool $verbose = false): int\n    {\n        $errors = 0;\n\n        foreach ($details as $info) {\n            if ($verbose && $info['valid']) {\n                $file = ' in ' . $info['file'];\n                $this->line('<info>OK</info>' . $file);\n            } elseif (! $info['valid']) {\n                $errors++;\n                $this->renderException($info);\n            }\n        }\n\n        if ($errors === 0) {\n            $this->comment(\\sprintf('All %d Twig files contain valid syntax.', \\count($details)));\n        } else {\n            $this->warn(\\sprintf('%d Twig files have valid syntax and %d contain errors.', \\count($details) - $errors, $errors));\n        }\n\n        return \\min($errors, 1);\n    }", "language": "php", "code": "protected function displayText(array $details, bool $verbose = false): int\n    {\n        $errors = 0;\n\n        foreach ($details as $info) {\n            if ($verbose && $info['valid']) {\n                $file = ' in ' . $info['file'];\n                $this->line('<info>OK</info>' . $file);\n            } elseif (! $info['valid']) {\n                $errors++;\n                $this->renderException($info);\n            }\n        }\n\n        if ($errors === 0) {\n            $this->comment(\\sprintf('All %d Twig files contain valid syntax.', \\count($details)));\n        } else {\n            $this->warn(\\sprintf('%d Twig files have valid syntax and %d contain errors.', \\count($details) - $errors, $errors));\n        }\n\n        return \\min($errors, 1);\n    }", "code_tokens": ["protected", "function", "displayText", "(", "array", "$", "details", ",", "bool", "$", "verbose", "=", "false", ")", ":", "int", "{", "$", "errors", "=", "0", ";", "foreach", "(", "$", "details", "as", "$", "info", ")", "{", "if", "(", "$", "verbose", "&&", "$", "info", "[", "'valid'", "]", ")", "{", "$", "file", "=", "' in '", ".", "$", "info", "[", "'file'", "]", ";", "$", "this", "->", "line", "(", "'<info>OK</info>'", ".", "$", "file", ")", ";", "}", "elseif", "(", "!", "$", "info", "[", "'valid'", "]", ")", "{", "$", "errors", "++", ";", "$", "this", "->", "renderException", "(", "$", "info", ")", ";", "}", "}", "if", "(", "$", "errors", "===", "0", ")", "{", "$", "this", "->", "comment", "(", "\\", "sprintf", "(", "'All %d Twig files contain valid syntax.'", ",", "\\", "count", "(", "$", "details", ")", ")", ")", ";", "}", "else", "{", "$", "this", "->", "warn", "(", "\\", "sprintf", "(", "'%d Twig files have valid syntax and %d contain errors.'", ",", "\\", "count", "(", "$", "details", ")", "-", "$", "errors", ",", "$", "errors", ")", ")", ";", "}", "return", "\\", "min", "(", "$", "errors", ",", "1", ")", ";", "}"], "docstring": "Output the results as text.\n\n@param array $details validation results from all linted files\n@param bool  $verbose\n\n@return int", "docstring_tokens": ["Output", "the", "results", "as", "text", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Bridge/Twig/Command/LintCommand.php#L198-L219", "partition": "test"}
{"repo": "softon/indipay", "path": "src/Gateways/CitrusGateway.php", "func_name": "CitrusGateway.encrypt", "original_string": "protected function encrypt()\n    {\n\n        $hash_string = $this->vanityUrl.$this->parameters['orderAmount'].$this->parameters['merchantTxnId'].$this->parameters['currency'];\n\n        $this->hash = hash_hmac('sha1', $hash_string, $this->secretKey);\n\n    }", "language": "php", "code": "protected function encrypt()\n    {\n\n        $hash_string = $this->vanityUrl.$this->parameters['orderAmount'].$this->parameters['merchantTxnId'].$this->parameters['currency'];\n\n        $this->hash = hash_hmac('sha1', $hash_string, $this->secretKey);\n\n    }", "code_tokens": ["protected", "function", "encrypt", "(", ")", "{", "$", "hash_string", "=", "$", "this", "->", "vanityUrl", ".", "$", "this", "->", "parameters", "[", "'orderAmount'", "]", ".", "$", "this", "->", "parameters", "[", "'merchantTxnId'", "]", ".", "$", "this", "->", "parameters", "[", "'currency'", "]", ";", "$", "this", "->", "hash", "=", "hash_hmac", "(", "'sha1'", ",", "$", "hash_string", ",", "$", "this", "->", "secretKey", ")", ";", "}"], "docstring": "Citrus Encrypt Function", "docstring_tokens": ["Citrus", "Encrypt", "Function"], "sha": "b1c2a67a70ec221b1efeb2e920248aeec6a03ae9", "url": "https://github.com/softon/indipay/blob/b1c2a67a70ec221b1efeb2e920248aeec6a03ae9/src/Gateways/CitrusGateway.php#L103-L110", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/DataService/DataService.php", "func_name": "DataService.Query", "original_string": "public function Query($query, $startPosition = null, $maxResults = null)\n    {\n        $this->serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"Called Method Query.\");\n\n        if ('QBO' == $this->serviceContext->serviceType) {\n            $httpsContentType = CoreConstants::CONTENTTYPE_APPLICATIONTEXT;\n        } else {\n            $httpsContentType = CoreConstants::CONTENTTYPE_TEXTPLAIN;\n        }\n\n        $httpsUri = implode(CoreConstants::SLASH_CHAR, array('company', $this->serviceContext->realmId, 'query'));\n        $httpsPostBody = $this->appendPaginationInfo($query, $startPosition, $maxResults);\n\n        $requestParameters = $this->getPostRequestParameters($httpsUri, $httpsContentType);\n        $restRequestHandler = $this->getRestHandler();\n        list($responseCode, $responseBody) = $restRequestHandler->sendRequest($requestParameters, $httpsPostBody, null, $this->isThrownExceptionOnError());\n        $faultHandler = $restRequestHandler->getFaultHandler();\n        if ($faultHandler) {\n            $this->lastError = $faultHandler;\n            return null;\n        } else {\n            $this->lastError = false;\n            $parsedResponseBody = null;\n            try {\n                $responseXmlObj = simplexml_load_string($responseBody);\n                if ($responseXmlObj && $responseXmlObj->QueryResponse) {\n                    $tmpXML = $responseXmlObj->QueryResponse->asXML();\n                }\n                $parsedResponseBody = $this->responseSerializer->Deserialize($tmpXML, false);\n                $this->serviceContext->IppConfiguration->Logger->CustomLogger->Log(TraceLevel::Info, $parsedResponseBody);\n\n            } catch (\\Exception $e) {\n                throw new \\Exception(\"Exception appears in converting Response to XML.\");\n            }\n\n            return $parsedResponseBody;\n        }\n    }", "language": "php", "code": "public function Query($query, $startPosition = null, $maxResults = null)\n    {\n        $this->serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"Called Method Query.\");\n\n        if ('QBO' == $this->serviceContext->serviceType) {\n            $httpsContentType = CoreConstants::CONTENTTYPE_APPLICATIONTEXT;\n        } else {\n            $httpsContentType = CoreConstants::CONTENTTYPE_TEXTPLAIN;\n        }\n\n        $httpsUri = implode(CoreConstants::SLASH_CHAR, array('company', $this->serviceContext->realmId, 'query'));\n        $httpsPostBody = $this->appendPaginationInfo($query, $startPosition, $maxResults);\n\n        $requestParameters = $this->getPostRequestParameters($httpsUri, $httpsContentType);\n        $restRequestHandler = $this->getRestHandler();\n        list($responseCode, $responseBody) = $restRequestHandler->sendRequest($requestParameters, $httpsPostBody, null, $this->isThrownExceptionOnError());\n        $faultHandler = $restRequestHandler->getFaultHandler();\n        if ($faultHandler) {\n            $this->lastError = $faultHandler;\n            return null;\n        } else {\n            $this->lastError = false;\n            $parsedResponseBody = null;\n            try {\n                $responseXmlObj = simplexml_load_string($responseBody);\n                if ($responseXmlObj && $responseXmlObj->QueryResponse) {\n                    $tmpXML = $responseXmlObj->QueryResponse->asXML();\n                }\n                $parsedResponseBody = $this->responseSerializer->Deserialize($tmpXML, false);\n                $this->serviceContext->IppConfiguration->Logger->CustomLogger->Log(TraceLevel::Info, $parsedResponseBody);\n\n            } catch (\\Exception $e) {\n                throw new \\Exception(\"Exception appears in converting Response to XML.\");\n            }\n\n            return $parsedResponseBody;\n        }\n    }", "code_tokens": ["public", "function", "Query", "(", "$", "query", ",", "$", "startPosition", "=", "null", ",", "$", "maxResults", "=", "null", ")", "{", "$", "this", "->", "serviceContext", "->", "IppConfiguration", "->", "Logger", "->", "RequestLog", "->", "Log", "(", "TraceLevel", "::", "Info", ",", "\"Called Method Query.\"", ")", ";", "if", "(", "'QBO'", "==", "$", "this", "->", "serviceContext", "->", "serviceType", ")", "{", "$", "httpsContentType", "=", "CoreConstants", "::", "CONTENTTYPE_APPLICATIONTEXT", ";", "}", "else", "{", "$", "httpsContentType", "=", "CoreConstants", "::", "CONTENTTYPE_TEXTPLAIN", ";", "}", "$", "httpsUri", "=", "implode", "(", "CoreConstants", "::", "SLASH_CHAR", ",", "array", "(", "'company'", ",", "$", "this", "->", "serviceContext", "->", "realmId", ",", "'query'", ")", ")", ";", "$", "httpsPostBody", "=", "$", "this", "->", "appendPaginationInfo", "(", "$", "query", ",", "$", "startPosition", ",", "$", "maxResults", ")", ";", "$", "requestParameters", "=", "$", "this", "->", "getPostRequestParameters", "(", "$", "httpsUri", ",", "$", "httpsContentType", ")", ";", "$", "restRequestHandler", "=", "$", "this", "->", "getRestHandler", "(", ")", ";", "list", "(", "$", "responseCode", ",", "$", "responseBody", ")", "=", "$", "restRequestHandler", "->", "sendRequest", "(", "$", "requestParameters", ",", "$", "httpsPostBody", ",", "null", ",", "$", "this", "->", "isThrownExceptionOnError", "(", ")", ")", ";", "$", "faultHandler", "=", "$", "restRequestHandler", "->", "getFaultHandler", "(", ")", ";", "if", "(", "$", "faultHandler", ")", "{", "$", "this", "->", "lastError", "=", "$", "faultHandler", ";", "return", "null", ";", "}", "else", "{", "$", "this", "->", "lastError", "=", "false", ";", "$", "parsedResponseBody", "=", "null", ";", "try", "{", "$", "responseXmlObj", "=", "simplexml_load_string", "(", "$", "responseBody", ")", ";", "if", "(", "$", "responseXmlObj", "&&", "$", "responseXmlObj", "->", "QueryResponse", ")", "{", "$", "tmpXML", "=", "$", "responseXmlObj", "->", "QueryResponse", "->", "asXML", "(", ")", ";", "}", "$", "parsedResponseBody", "=", "$", "this", "->", "responseSerializer", "->", "Deserialize", "(", "$", "tmpXML", ",", "false", ")", ";", "$", "this", "->", "serviceContext", "->", "IppConfiguration", "->", "Logger", "->", "CustomLogger", "->", "Log", "(", "TraceLevel", "::", "Info", ",", "$", "parsedResponseBody", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "throw", "new", "\\", "Exception", "(", "\"Exception appears in converting Response to XML.\"", ")", ";", "}", "return", "$", "parsedResponseBody", ";", "}", "}"], "docstring": "Retrieves specified entities based passed page number and page size and query\n\n@param string $query Query to issue\n@param int $startPosition Starting page number\n@param int $maxResults Page size\n@return array Returns an array of entities fulfilling the query. If the response is Empty, it will return NULL", "docstring_tokens": ["Retrieves", "specified", "entities", "based", "passed", "page", "number", "and", "page", "size", "and", "query"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/DataService/DataService.php#L965-L1002", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-file/src/File/FileRestProxy.php", "func_name": "FileRestProxy.getDirectoryProperties", "original_string": "public function getDirectoryProperties(\n        $share,\n        $path,\n        FileServiceOptions $options = null\n    ) {\n        return $this->getDirectoryPropertiesAsync($share, $path, $options)->wait();\n    }", "language": "php", "code": "public function getDirectoryProperties(\n        $share,\n        $path,\n        FileServiceOptions $options = null\n    ) {\n        return $this->getDirectoryPropertiesAsync($share, $path, $options)->wait();\n    }", "code_tokens": ["public", "function", "getDirectoryProperties", "(", "$", "share", ",", "$", "path", ",", "FileServiceOptions", "$", "options", "=", "null", ")", "{", "return", "$", "this", "->", "getDirectoryPropertiesAsync", "(", "$", "share", ",", "$", "path", ",", "$", "options", ")", "->", "wait", "(", ")", ";", "}"], "docstring": "Gets a directory's properties from the given share and path.\n\n@param string                  $share     The share name.\n@param string                  $path      The path of the directory.\n@param FileServiceOptions|null $options   The optional parameters.\n\n@return GetDirectoryPropertiesResult\n\n@see https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties", "docstring_tokens": ["Gets", "a", "directory", "s", "properties", "from", "the", "given", "share", "and", "path", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-file/src/File/FileRestProxy.php#L1320-L1326", "partition": "test"}
{"repo": "shumkov/rediska", "path": "library/Rediska/Profiler/Profile.php", "func_name": "Rediska_Profiler_Profile.getElapsedTime", "original_string": "public function getElapsedTime($decimals = null)\n    {\n        if (!$this->hasStopped()) {\n            return false;\n        }\n\n        $elapsedTime = $this->_stopTime - $this->_startTime;\n\n        if ($decimals) {\n            return number_format($elapsedTime, $decimals);\n        } else {\n            return $elapsedTime;\n        }\n    }", "language": "php", "code": "public function getElapsedTime($decimals = null)\n    {\n        if (!$this->hasStopped()) {\n            return false;\n        }\n\n        $elapsedTime = $this->_stopTime - $this->_startTime;\n\n        if ($decimals) {\n            return number_format($elapsedTime, $decimals);\n        } else {\n            return $elapsedTime;\n        }\n    }", "code_tokens": ["public", "function", "getElapsedTime", "(", "$", "decimals", "=", "null", ")", "{", "if", "(", "!", "$", "this", "->", "hasStopped", "(", ")", ")", "{", "return", "false", ";", "}", "$", "elapsedTime", "=", "$", "this", "->", "_stopTime", "-", "$", "this", "->", "_startTime", ";", "if", "(", "$", "decimals", ")", "{", "return", "number_format", "(", "$", "elapsedTime", ",", "$", "decimals", ")", ";", "}", "else", "{", "return", "$", "elapsedTime", ";", "}", "}"], "docstring": "Get elapsed time\n\n@param ineger[optioanl] $decimals\n@return integer|false", "docstring_tokens": ["Get", "elapsed", "time"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/library/Rediska/Profiler/Profile.php#L122-L135", "partition": "test"}
{"repo": "chrisbarr/AmazonSNS-PHP-API", "path": "lib/AmazonSNS.php", "func_name": "AmazonSNS.setTopicAttributes", "original_string": "public function setTopicAttributes($topicArn, $attrName, $attrValue) {\n\t\tif(empty($topicArn) || empty($attrName) || empty($attrValue)) {\n\t\t\tthrow new InvalidArgumentException('Must supply a TopicARN, AttributeName and AttributeValue to set a topic attribute');\n\t\t}\n\n\t\t$this->_request('SetTopicAttributes', array(\n\t\t\t'TopicArn' => $topicArn,\n\t\t\t'AttributeName' => $attrName,\n\t\t\t'AttributeValue' => $attrValue\n\t\t));\n\n\t\treturn true;\n\t}", "language": "php", "code": "public function setTopicAttributes($topicArn, $attrName, $attrValue) {\n\t\tif(empty($topicArn) || empty($attrName) || empty($attrValue)) {\n\t\t\tthrow new InvalidArgumentException('Must supply a TopicARN, AttributeName and AttributeValue to set a topic attribute');\n\t\t}\n\n\t\t$this->_request('SetTopicAttributes', array(\n\t\t\t'TopicArn' => $topicArn,\n\t\t\t'AttributeName' => $attrName,\n\t\t\t'AttributeValue' => $attrValue\n\t\t));\n\n\t\treturn true;\n\t}", "code_tokens": ["public", "function", "setTopicAttributes", "(", "$", "topicArn", ",", "$", "attrName", ",", "$", "attrValue", ")", "{", "if", "(", "empty", "(", "$", "topicArn", ")", "||", "empty", "(", "$", "attrName", ")", "||", "empty", "(", "$", "attrValue", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Must supply a TopicARN, AttributeName and AttributeValue to set a topic attribute'", ")", ";", "}", "$", "this", "->", "_request", "(", "'SetTopicAttributes'", ",", "array", "(", "'TopicArn'", "=>", "$", "topicArn", ",", "'AttributeName'", "=>", "$", "attrName", ",", "'AttributeValue'", "=>", "$", "attrValue", ")", ")", ";", "return", "true", ";", "}"], "docstring": "Set a single attribute on a topic\n\n@link http://docs.amazonwebservices.com/sns/latest/api/API_SetTopicAttributes.html\n@param string $topicArn\n@param string $attrName\n@param mixed $attrValue\n@return bool\n@throws InvalidArgumentException", "docstring_tokens": ["Set", "a", "single", "attribute", "on", "a", "topic"], "sha": "df3c6ae499088cc7be5be9058cbff1e660c2bc2d", "url": "https://github.com/chrisbarr/AmazonSNS-PHP-API/blob/df3c6ae499088cc7be5be9058cbff1e660c2bc2d/lib/AmazonSNS.php#L398-L410", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-table/src/Table/Models/TableContinuationTokenTrait.php", "func_name": "TableContinuationTokenTrait.setNextPartitionKey", "original_string": "public function setNextPartitionKey($nextPartitionKey)\n    {\n        if ($this->continuationToken == null) {\n            $this->setContinuationToken(new TableContinuationToken());\n        }\n        $this->continuationToken->setNextPartitionKey($nextPartitionKey);\n    }", "language": "php", "code": "public function setNextPartitionKey($nextPartitionKey)\n    {\n        if ($this->continuationToken == null) {\n            $this->setContinuationToken(new TableContinuationToken());\n        }\n        $this->continuationToken->setNextPartitionKey($nextPartitionKey);\n    }", "code_tokens": ["public", "function", "setNextPartitionKey", "(", "$", "nextPartitionKey", ")", "{", "if", "(", "$", "this", "->", "continuationToken", "==", "null", ")", "{", "$", "this", "->", "setContinuationToken", "(", "new", "TableContinuationToken", "(", ")", ")", ";", "}", "$", "this", "->", "continuationToken", "->", "setNextPartitionKey", "(", "$", "nextPartitionKey", ")", ";", "}"], "docstring": "Sets entity next partition key.\n\n@param string $nextPartitionKey The entity next partition key value.\n\n@return void", "docstring_tokens": ["Sets", "entity", "next", "partition", "key", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-table/src/Table/Models/TableContinuationTokenTrait.php#L148-L154", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/I18n/MessageSource.php", "func_name": "MessageSource.findCategoriesByPattern", "original_string": "protected function findCategoriesByPattern($pattern)\n    {\n        return $this->findAllCategories()\n            ->then(function($categories) use ($pattern) {\n                $matches = [];\n                foreach ($categories as $category) {\n                    if (Reaction\\Helpers\\StringHelper::matchWildcard($pattern, $category)) {\n                        $matches[] = $category;\n                    }\n                }\n                return $matches;\n            });\n    }", "language": "php", "code": "protected function findCategoriesByPattern($pattern)\n    {\n        return $this->findAllCategories()\n            ->then(function($categories) use ($pattern) {\n                $matches = [];\n                foreach ($categories as $category) {\n                    if (Reaction\\Helpers\\StringHelper::matchWildcard($pattern, $category)) {\n                        $matches[] = $category;\n                    }\n                }\n                return $matches;\n            });\n    }", "code_tokens": ["protected", "function", "findCategoriesByPattern", "(", "$", "pattern", ")", "{", "return", "$", "this", "->", "findAllCategories", "(", ")", "->", "then", "(", "function", "(", "$", "categories", ")", "use", "(", "$", "pattern", ")", "{", "$", "matches", "=", "[", "]", ";", "foreach", "(", "$", "categories", "as", "$", "category", ")", "{", "if", "(", "Reaction", "\\", "Helpers", "\\", "StringHelper", "::", "matchWildcard", "(", "$", "pattern", ",", "$", "category", ")", ")", "{", "$", "matches", "[", "]", "=", "$", "category", ";", "}", "}", "return", "$", "matches", ";", "}", ")", ";", "}"], "docstring": "Find categories by string pattern|wildcard\n@param string $pattern\n@return ExtendedPromiseInterface", "docstring_tokens": ["Find", "categories", "by", "string", "pattern|wildcard"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/I18n/MessageSource.php#L91-L103", "partition": "test"}
{"repo": "eclipxe13/buzoncfdi-cfdireader", "path": "src/CFDIReader/CFDIReader.php", "func_name": "CFDIReader.attribute", "original_string": "public function attribute(string ...$nodePath): string\n    {\n        // cast to string since array_pop can return NULL\n        $attribute = (string) array_pop($nodePath);\n        $node = $this->retrieveNode(...$nodePath);\n        return (null !== $node) ? (string) $node[$attribute] : '';\n    }", "language": "php", "code": "public function attribute(string ...$nodePath): string\n    {\n        // cast to string since array_pop can return NULL\n        $attribute = (string) array_pop($nodePath);\n        $node = $this->retrieveNode(...$nodePath);\n        return (null !== $node) ? (string) $node[$attribute] : '';\n    }", "code_tokens": ["public", "function", "attribute", "(", "string", "...", "$", "nodePath", ")", ":", "string", "{", "// cast to string since array_pop can return NULL", "$", "attribute", "=", "(", "string", ")", "array_pop", "(", "$", "nodePath", ")", ";", "$", "node", "=", "$", "this", "->", "retrieveNode", "(", "...", "$", "nodePath", ")", ";", "return", "(", "null", "!==", "$", "node", ")", "?", "(", "string", ")", "$", "node", "[", "$", "attribute", "]", ":", "''", ";", "}"], "docstring": "Get the attribute content of a comprobante or child node\nReturn an empty string if the node or the attribute does not exists\n\nThe last argument is always the attribute name\n\n@param string[] ...$nodePath\n@return string", "docstring_tokens": ["Get", "the", "attribute", "content", "of", "a", "comprobante", "or", "child", "node", "Return", "an", "empty", "string", "if", "the", "node", "or", "the", "attribute", "does", "not", "exists"], "sha": "61daa5acc339ceeaf71cc5db172e264672a37fc0", "url": "https://github.com/eclipxe13/buzoncfdi-cfdireader/blob/61daa5acc339ceeaf71cc5db172e264672a37fc0/src/CFDIReader/CFDIReader.php#L168-L174", "partition": "test"}
{"repo": "wazsmwazsm/WorkerF", "path": "src/WorkerF/DB/Drivers/PDODriver.php", "func_name": "PDODriver.query", "original_string": "public function query($sql)\n    {\n        try {\n            return $this->_pdo->query($sql);\n        } catch (PDOException $e) {\n            // when time out, reconnect\n            if ($this->_isTimeout($e)) {\n\n                $this->_closeConnection();\n                $this->_connect();\n\n                try {\n                    return $this->_pdo->query($sql);\n                } catch (PDOException $e) {\n                    throw $e;\n                }\n\n            } else {\n                throw $e;\n            }\n        }\n    }", "language": "php", "code": "public function query($sql)\n    {\n        try {\n            return $this->_pdo->query($sql);\n        } catch (PDOException $e) {\n            // when time out, reconnect\n            if ($this->_isTimeout($e)) {\n\n                $this->_closeConnection();\n                $this->_connect();\n\n                try {\n                    return $this->_pdo->query($sql);\n                } catch (PDOException $e) {\n                    throw $e;\n                }\n\n            } else {\n                throw $e;\n            }\n        }\n    }", "code_tokens": ["public", "function", "query", "(", "$", "sql", ")", "{", "try", "{", "return", "$", "this", "->", "_pdo", "->", "query", "(", "$", "sql", ")", ";", "}", "catch", "(", "PDOException", "$", "e", ")", "{", "// when time out, reconnect", "if", "(", "$", "this", "->", "_isTimeout", "(", "$", "e", ")", ")", "{", "$", "this", "->", "_closeConnection", "(", ")", ";", "$", "this", "->", "_connect", "(", ")", ";", "try", "{", "return", "$", "this", "->", "_pdo", "->", "query", "(", "$", "sql", ")", ";", "}", "catch", "(", "PDOException", "$", "e", ")", "{", "throw", "$", "e", ";", "}", "}", "else", "{", "throw", "$", "e", ";", "}", "}", "}"], "docstring": "native query, add auto reconnect\n\n@param  string $sql\n@return  \\PDOStatement/boolean\n@throws  \\PDOException", "docstring_tokens": ["native", "query", "add", "auto", "reconnect"], "sha": "5982934d6beb59b3e3e4071be9bbbd4e16247dba", "url": "https://github.com/wazsmwazsm/WorkerF/blob/5982934d6beb59b3e3e4071be9bbbd4e16247dba/src/WorkerF/DB/Drivers/PDODriver.php#L1499-L1520", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Support/Invoker.php", "func_name": "Invoker.getInvoker", "original_string": "private function getInvoker(): InvokerInterface\n    {\n        if ($this->invoker === null) {\n            $resolvers = \\array_merge([\n                new AssociativeArrayResolver(),\n                new NumericArrayResolver(),\n                new TypeHintResolver(),\n                new DefaultValueResolver(),\n            ], $this->resolvers);\n\n            if (($container = $this->container) !== null) {\n                if (isset($this->inject['type'])) {\n                    $resolvers[] = new TypeHintContainerResolver($container);\n                }\n\n                if (isset($this->inject['parameter'])) {\n                    $resolvers[] = new ParameterNameContainerResolver($container);\n                }\n\n                $this->invoker = new DiInvoker(new ResolverChain($resolvers), $container);\n            } else {\n                $this->invoker = new DiInvoker(new ResolverChain($resolvers));\n            }\n        }\n\n        return $this->invoker;\n    }", "language": "php", "code": "private function getInvoker(): InvokerInterface\n    {\n        if ($this->invoker === null) {\n            $resolvers = \\array_merge([\n                new AssociativeArrayResolver(),\n                new NumericArrayResolver(),\n                new TypeHintResolver(),\n                new DefaultValueResolver(),\n            ], $this->resolvers);\n\n            if (($container = $this->container) !== null) {\n                if (isset($this->inject['type'])) {\n                    $resolvers[] = new TypeHintContainerResolver($container);\n                }\n\n                if (isset($this->inject['parameter'])) {\n                    $resolvers[] = new ParameterNameContainerResolver($container);\n                }\n\n                $this->invoker = new DiInvoker(new ResolverChain($resolvers), $container);\n            } else {\n                $this->invoker = new DiInvoker(new ResolverChain($resolvers));\n            }\n        }\n\n        return $this->invoker;\n    }", "code_tokens": ["private", "function", "getInvoker", "(", ")", ":", "InvokerInterface", "{", "if", "(", "$", "this", "->", "invoker", "===", "null", ")", "{", "$", "resolvers", "=", "\\", "array_merge", "(", "[", "new", "AssociativeArrayResolver", "(", ")", ",", "new", "NumericArrayResolver", "(", ")", ",", "new", "TypeHintResolver", "(", ")", ",", "new", "DefaultValueResolver", "(", ")", ",", "]", ",", "$", "this", "->", "resolvers", ")", ";", "if", "(", "(", "$", "container", "=", "$", "this", "->", "container", ")", "!==", "null", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "inject", "[", "'type'", "]", ")", ")", "{", "$", "resolvers", "[", "]", "=", "new", "TypeHintContainerResolver", "(", "$", "container", ")", ";", "}", "if", "(", "isset", "(", "$", "this", "->", "inject", "[", "'parameter'", "]", ")", ")", "{", "$", "resolvers", "[", "]", "=", "new", "ParameterNameContainerResolver", "(", "$", "container", ")", ";", "}", "$", "this", "->", "invoker", "=", "new", "DiInvoker", "(", "new", "ResolverChain", "(", "$", "resolvers", ")", ",", "$", "container", ")", ";", "}", "else", "{", "$", "this", "->", "invoker", "=", "new", "DiInvoker", "(", "new", "ResolverChain", "(", "$", "resolvers", ")", ")", ";", "}", "}", "return", "$", "this", "->", "invoker", ";", "}"], "docstring": "Get a full configured invoker class.\n\n@return \\Invoker\\InvokerInterface", "docstring_tokens": ["Get", "a", "full", "configured", "invoker", "class", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Support/Invoker.php#L97-L123", "partition": "test"}
{"repo": "stone-lab/Dynamicfield", "path": "Utility/Entity.php", "func_name": "Entity.save", "original_string": "public function save()\n    {\n        $bResult = false;\n        try {\n            if (count($this->groupFields)) {\n                foreach ($this->groupFields as $group) {\n                    $fields = $group['fields'];\n                    foreach ($fields as $field) {\n                        $field->save();\n                    }\n                }\n            }\n            $bResult = true;\n        } catch (\\Exception $e) {\n            //exception handling\n        }\n\n        return $bResult;\n    }", "language": "php", "code": "public function save()\n    {\n        $bResult = false;\n        try {\n            if (count($this->groupFields)) {\n                foreach ($this->groupFields as $group) {\n                    $fields = $group['fields'];\n                    foreach ($fields as $field) {\n                        $field->save();\n                    }\n                }\n            }\n            $bResult = true;\n        } catch (\\Exception $e) {\n            //exception handling\n        }\n\n        return $bResult;\n    }", "code_tokens": ["public", "function", "save", "(", ")", "{", "$", "bResult", "=", "false", ";", "try", "{", "if", "(", "count", "(", "$", "this", "->", "groupFields", ")", ")", "{", "foreach", "(", "$", "this", "->", "groupFields", "as", "$", "group", ")", "{", "$", "fields", "=", "$", "group", "[", "'fields'", "]", ";", "foreach", "(", "$", "fields", "as", "$", "field", ")", "{", "$", "field", "->", "save", "(", ")", ";", "}", "}", "}", "$", "bResult", "=", "true", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "//exception handling", "}", "return", "$", "bResult", ";", "}"], "docstring": "Save group field data.\n\n@return bool", "docstring_tokens": ["Save", "group", "field", "data", "."], "sha": "7d25050180000b482d5efe301f54b9ce78963181", "url": "https://github.com/stone-lab/Dynamicfield/blob/7d25050180000b482d5efe301f54b9ce78963181/Utility/Entity.php#L124-L142", "partition": "test"}
{"repo": "FriendsOfSymfony/FOSElasticaBundle", "path": "src/Command/ProgressClosureBuilder.php", "func_name": "ProgressClosureBuilder.build", "original_string": "public static function build(OutputInterface $output, $action, $index, $type, $offset)\n    {\n        $progress = null;\n\n        return function ($increment, $totalObjects, $message = null) use (&$progress, $output, $action, $index, $type, $offset) {\n            if (null === $progress) {\n                $progress = new ProgressBar($output, $totalObjects);\n                $progress->start();\n                $progress->setProgress($offset);\n            }\n\n            if (null !== $message) {\n                $progress->clear();\n                $output->writeln(sprintf('<info>%s</info> <error>%s</error>', $action, $message));\n                $progress->display();\n            }\n\n            $progress->setMessage(sprintf('<info>%s</info> <comment>%s/%s</comment>', $action, $index, $type));\n            $progress->advance($increment);\n        };\n    }", "language": "php", "code": "public static function build(OutputInterface $output, $action, $index, $type, $offset)\n    {\n        $progress = null;\n\n        return function ($increment, $totalObjects, $message = null) use (&$progress, $output, $action, $index, $type, $offset) {\n            if (null === $progress) {\n                $progress = new ProgressBar($output, $totalObjects);\n                $progress->start();\n                $progress->setProgress($offset);\n            }\n\n            if (null !== $message) {\n                $progress->clear();\n                $output->writeln(sprintf('<info>%s</info> <error>%s</error>', $action, $message));\n                $progress->display();\n            }\n\n            $progress->setMessage(sprintf('<info>%s</info> <comment>%s/%s</comment>', $action, $index, $type));\n            $progress->advance($increment);\n        };\n    }", "code_tokens": ["public", "static", "function", "build", "(", "OutputInterface", "$", "output", ",", "$", "action", ",", "$", "index", ",", "$", "type", ",", "$", "offset", ")", "{", "$", "progress", "=", "null", ";", "return", "function", "(", "$", "increment", ",", "$", "totalObjects", ",", "$", "message", "=", "null", ")", "use", "(", "&", "$", "progress", ",", "$", "output", ",", "$", "action", ",", "$", "index", ",", "$", "type", ",", "$", "offset", ")", "{", "if", "(", "null", "===", "$", "progress", ")", "{", "$", "progress", "=", "new", "ProgressBar", "(", "$", "output", ",", "$", "totalObjects", ")", ";", "$", "progress", "->", "start", "(", ")", ";", "$", "progress", "->", "setProgress", "(", "$", "offset", ")", ";", "}", "if", "(", "null", "!==", "$", "message", ")", "{", "$", "progress", "->", "clear", "(", ")", ";", "$", "output", "->", "writeln", "(", "sprintf", "(", "'<info>%s</info> <error>%s</error>'", ",", "$", "action", ",", "$", "message", ")", ")", ";", "$", "progress", "->", "display", "(", ")", ";", "}", "$", "progress", "->", "setMessage", "(", "sprintf", "(", "'<info>%s</info> <comment>%s/%s</comment>'", ",", "$", "action", ",", "$", "index", ",", "$", "type", ")", ")", ";", "$", "progress", "->", "advance", "(", "$", "increment", ")", ";", "}", ";", "}"], "docstring": "Builds a loggerClosure to be called from inside the Provider to update the command\nline.\n\n@param OutputInterface $output\n@param string          $action\n@param string          $index\n@param string          $type\n@param int             $offset\n\n@return callable", "docstring_tokens": ["Builds", "a", "loggerClosure", "to", "be", "called", "from", "inside", "the", "Provider", "to", "update", "the", "command", "line", "."], "sha": "3f2707d1d606a59527f74e88808b820a170d3f42", "url": "https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/3f2707d1d606a59527f74e88808b820a170d3f42/src/Command/ProgressClosureBuilder.php#L34-L54", "partition": "test"}
{"repo": "nattreid/console", "path": "src/Console.php", "func_name": "Console.printHtmlHelp", "original_string": "private function printHtmlHelp(ClassType $class): void\n\t{\n\t\t$desc = Html::el('h1');\n\t\t$desc->setText($class->getDescription());\n\t\t$this->printLine((string) $desc);\n\n\t\tforeach ($this->getMethod($class) as $method) {\n\t\t\t$desc = Html::el('pre');\n\t\t\t$desc->setStyle('margin-bottom: 0px');\n\t\t\t$desc->setText(Strings::replace($method->getDocComment(), '/(\\ |\\t)+/', ' '));\n\n\t\t\t$el = Html::el('a');\n\t\t\t$el->setHtml($method->name);\n\n\t\t\t$args = '';\n\t\t\t$params = [];\n\t\t\tforeach ($method->getParameters() as $param) {\n\t\t\t\t$p = $param->getName();\n\t\t\t\tif ($param->isDefaultValueAvailable()) {\n\t\t\t\t\t$value = $param->getDefaultValue();\n\t\t\t\t\t$p .= '=' . $this->getValue($value);\n\t\t\t\t} else {\n\t\t\t\t\t$args .= (empty($args) ? '?' : '&') . $param->getName() . '=';\n\t\t\t\t}\n\t\t\t\t$params[] = $p;\n\t\t\t}\n\n\t\t\t$link = Strings::lower(str_replace(':', '/', $this->prefix . '/' . $class->getShortName()) . '/' . $method->name);\n\t\t\t$el->href('/' . $link . $args);\n\n\t\t\t$line = $desc . $el;\n\t\t\tif (!empty($params)) {\n\t\t\t\t$line .= ' (' . implode(', ', $params) . ')';\n\t\t\t}\n\t\t\t$this->printLine($line);\n\t\t}\n\t}", "language": "php", "code": "private function printHtmlHelp(ClassType $class): void\n\t{\n\t\t$desc = Html::el('h1');\n\t\t$desc->setText($class->getDescription());\n\t\t$this->printLine((string) $desc);\n\n\t\tforeach ($this->getMethod($class) as $method) {\n\t\t\t$desc = Html::el('pre');\n\t\t\t$desc->setStyle('margin-bottom: 0px');\n\t\t\t$desc->setText(Strings::replace($method->getDocComment(), '/(\\ |\\t)+/', ' '));\n\n\t\t\t$el = Html::el('a');\n\t\t\t$el->setHtml($method->name);\n\n\t\t\t$args = '';\n\t\t\t$params = [];\n\t\t\tforeach ($method->getParameters() as $param) {\n\t\t\t\t$p = $param->getName();\n\t\t\t\tif ($param->isDefaultValueAvailable()) {\n\t\t\t\t\t$value = $param->getDefaultValue();\n\t\t\t\t\t$p .= '=' . $this->getValue($value);\n\t\t\t\t} else {\n\t\t\t\t\t$args .= (empty($args) ? '?' : '&') . $param->getName() . '=';\n\t\t\t\t}\n\t\t\t\t$params[] = $p;\n\t\t\t}\n\n\t\t\t$link = Strings::lower(str_replace(':', '/', $this->prefix . '/' . $class->getShortName()) . '/' . $method->name);\n\t\t\t$el->href('/' . $link . $args);\n\n\t\t\t$line = $desc . $el;\n\t\t\tif (!empty($params)) {\n\t\t\t\t$line .= ' (' . implode(', ', $params) . ')';\n\t\t\t}\n\t\t\t$this->printLine($line);\n\t\t}\n\t}", "code_tokens": ["private", "function", "printHtmlHelp", "(", "ClassType", "$", "class", ")", ":", "void", "{", "$", "desc", "=", "Html", "::", "el", "(", "'h1'", ")", ";", "$", "desc", "->", "setText", "(", "$", "class", "->", "getDescription", "(", ")", ")", ";", "$", "this", "->", "printLine", "(", "(", "string", ")", "$", "desc", ")", ";", "foreach", "(", "$", "this", "->", "getMethod", "(", "$", "class", ")", "as", "$", "method", ")", "{", "$", "desc", "=", "Html", "::", "el", "(", "'pre'", ")", ";", "$", "desc", "->", "setStyle", "(", "'margin-bottom: 0px'", ")", ";", "$", "desc", "->", "setText", "(", "Strings", "::", "replace", "(", "$", "method", "->", "getDocComment", "(", ")", ",", "'/(\\ |\\t)+/'", ",", "' '", ")", ")", ";", "$", "el", "=", "Html", "::", "el", "(", "'a'", ")", ";", "$", "el", "->", "setHtml", "(", "$", "method", "->", "name", ")", ";", "$", "args", "=", "''", ";", "$", "params", "=", "[", "]", ";", "foreach", "(", "$", "method", "->", "getParameters", "(", ")", "as", "$", "param", ")", "{", "$", "p", "=", "$", "param", "->", "getName", "(", ")", ";", "if", "(", "$", "param", "->", "isDefaultValueAvailable", "(", ")", ")", "{", "$", "value", "=", "$", "param", "->", "getDefaultValue", "(", ")", ";", "$", "p", ".=", "'='", ".", "$", "this", "->", "getValue", "(", "$", "value", ")", ";", "}", "else", "{", "$", "args", ".=", "(", "empty", "(", "$", "args", ")", "?", "'?'", ":", "'&'", ")", ".", "$", "param", "->", "getName", "(", ")", ".", "'='", ";", "}", "$", "params", "[", "]", "=", "$", "p", ";", "}", "$", "link", "=", "Strings", "::", "lower", "(", "str_replace", "(", "':'", ",", "'/'", ",", "$", "this", "->", "prefix", ".", "'/'", ".", "$", "class", "->", "getShortName", "(", ")", ")", ".", "'/'", ".", "$", "method", "->", "name", ")", ";", "$", "el", "->", "href", "(", "'/'", ".", "$", "link", ".", "$", "args", ")", ";", "$", "line", "=", "$", "desc", ".", "$", "el", ";", "if", "(", "!", "empty", "(", "$", "params", ")", ")", "{", "$", "line", ".=", "' ('", ".", "implode", "(", "', '", ",", "$", "params", ")", ".", "')'", ";", "}", "$", "this", "->", "printLine", "(", "$", "line", ")", ";", "}", "}"], "docstring": "Vypise napovedu pro danou tridu v HTML\n@param ClassType $class", "docstring_tokens": ["Vypise", "napovedu", "pro", "danou", "tridu", "v", "HTML"], "sha": "4914f9c1fcccd17f94c9b288fd022350071790c7", "url": "https://github.com/nattreid/console/blob/4914f9c1fcccd17f94c9b288fd022350071790c7/src/Console.php#L168-L204", "partition": "test"}
{"repo": "cnvs/easel", "path": "src/Extensions/ThemeManager.php", "func_name": "ThemeManager.publishThemeViews", "original_string": "protected function publishThemeViews(Theme $theme, $clean = true)\n    {\n        $target = base_path('resources/views/'.self::TARGET_DIR);\n        // Skip the ordeal if theme doesn't have views\n        if (! $this->filesystem->exists($theme->getViewsDirectory())) {\n            return true;\n        }\n        // Clean views directory.\n        if ($clean) {\n            $clean = $this->filesystem->deleteDirectory($target) || true;\n        }\n        // Publish theme views.\n        $published = $this->filesystem->copyDirectory($theme->getViewsDirectory(), $target);\n\n        return $published;\n    }", "language": "php", "code": "protected function publishThemeViews(Theme $theme, $clean = true)\n    {\n        $target = base_path('resources/views/'.self::TARGET_DIR);\n        // Skip the ordeal if theme doesn't have views\n        if (! $this->filesystem->exists($theme->getViewsDirectory())) {\n            return true;\n        }\n        // Clean views directory.\n        if ($clean) {\n            $clean = $this->filesystem->deleteDirectory($target) || true;\n        }\n        // Publish theme views.\n        $published = $this->filesystem->copyDirectory($theme->getViewsDirectory(), $target);\n\n        return $published;\n    }", "code_tokens": ["protected", "function", "publishThemeViews", "(", "Theme", "$", "theme", ",", "$", "clean", "=", "true", ")", "{", "$", "target", "=", "base_path", "(", "'resources/views/'", ".", "self", "::", "TARGET_DIR", ")", ";", "// Skip the ordeal if theme doesn't have views", "if", "(", "!", "$", "this", "->", "filesystem", "->", "exists", "(", "$", "theme", "->", "getViewsDirectory", "(", ")", ")", ")", "{", "return", "true", ";", "}", "// Clean views directory.", "if", "(", "$", "clean", ")", "{", "$", "clean", "=", "$", "this", "->", "filesystem", "->", "deleteDirectory", "(", "$", "target", ")", "||", "true", ";", "}", "// Publish theme views.", "$", "published", "=", "$", "this", "->", "filesystem", "->", "copyDirectory", "(", "$", "theme", "->", "getViewsDirectory", "(", ")", ",", "$", "target", ")", ";", "return", "$", "published", ";", "}"], "docstring": "Publish a themes views.\n@param Theme $theme\n@param bool $clean Views directory is cleaned to ensure no interference with none theme views.\n@return bool", "docstring_tokens": ["Publish", "a", "themes", "views", "."], "sha": "bb2b564432155467944b4a2e719e474fd564b711", "url": "https://github.com/cnvs/easel/blob/bb2b564432155467944b4a2e719e474fd564b711/src/Extensions/ThemeManager.php#L44-L59", "partition": "test"}
{"repo": "BerliozFramework/HttpMessage", "path": "src/UploadedFile.php", "func_name": "UploadedFile.filesFlip", "original_string": "public static function filesFlip(&$result, $keys, $value)\n    {\n        if (is_array($value)) {\n            foreach ($value as $k => $v) {\n                $newKeys = $keys;\n                array_push($newKeys, $k);\n                self::filesFlip($result, $newKeys, $v);\n            }\n        } else {\n            $res = $value;\n            // Move the innermost key to the outer spot\n            $first = array_shift($keys);\n            array_push($keys, $first);\n            foreach (array_reverse($keys) as $k) {\n                // You might think we'd say $res[$k] = $res, but $res starts out not as an array\n                $res = [$k => $res];\n            }\n\n            $result = array_replace_recursive($result, $res);\n        }\n    }", "language": "php", "code": "public static function filesFlip(&$result, $keys, $value)\n    {\n        if (is_array($value)) {\n            foreach ($value as $k => $v) {\n                $newKeys = $keys;\n                array_push($newKeys, $k);\n                self::filesFlip($result, $newKeys, $v);\n            }\n        } else {\n            $res = $value;\n            // Move the innermost key to the outer spot\n            $first = array_shift($keys);\n            array_push($keys, $first);\n            foreach (array_reverse($keys) as $k) {\n                // You might think we'd say $res[$k] = $res, but $res starts out not as an array\n                $res = [$k => $res];\n            }\n\n            $result = array_replace_recursive($result, $res);\n        }\n    }", "code_tokens": ["public", "static", "function", "filesFlip", "(", "&", "$", "result", ",", "$", "keys", ",", "$", "value", ")", "{", "if", "(", "is_array", "(", "$", "value", ")", ")", "{", "foreach", "(", "$", "value", "as", "$", "k", "=>", "$", "v", ")", "{", "$", "newKeys", "=", "$", "keys", ";", "array_push", "(", "$", "newKeys", ",", "$", "k", ")", ";", "self", "::", "filesFlip", "(", "$", "result", ",", "$", "newKeys", ",", "$", "v", ")", ";", "}", "}", "else", "{", "$", "res", "=", "$", "value", ";", "// Move the innermost key to the outer spot", "$", "first", "=", "array_shift", "(", "$", "keys", ")", ";", "array_push", "(", "$", "keys", ",", "$", "first", ")", ";", "foreach", "(", "array_reverse", "(", "$", "keys", ")", "as", "$", "k", ")", "{", "// You might think we'd say $res[$k] = $res, but $res starts out not as an array", "$", "res", "=", "[", "$", "k", "=>", "$", "res", "]", ";", "}", "$", "result", "=", "array_replace_recursive", "(", "$", "result", ",", "$", "res", ")", ";", "}", "}"], "docstring": "Flips the file's array keys.\n\n@param array $result\n@param array $keys\n@param mixed $value\n\n@return void\n\n@author Bart Kelsey <http://www.opengameart.org>\n@see    https://stackoverflow.com/questions/5444827/how-do-you-loop-through-files-array/29664753#29664753", "docstring_tokens": ["Flips", "the", "file", "s", "array", "keys", "."], "sha": "e3edc07ae48e33dbb06a23685c811a72a033c98b", "url": "https://github.com/BerliozFramework/HttpMessage/blob/e3edc07ae48e33dbb06a23685c811a72a033c98b/src/UploadedFile.php#L125-L145", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Web/SessionContext.php", "func_name": "SessionContext.setViewHistory", "original_string": "public function setViewHistory($formName, $historyInfo)\n    {\n        $view = Openbizx::$app->getCurrentViewName();\n        $view_form = $formName; //$view.\"_\".$formname;\n        if (!$historyInfo) {\n            unset($this->_viewHistory[$view_form]);\n        } else {\n            $this->_viewHistory[$view_form] = $historyInfo;\n        }\n    }", "language": "php", "code": "public function setViewHistory($formName, $historyInfo)\n    {\n        $view = Openbizx::$app->getCurrentViewName();\n        $view_form = $formName; //$view.\"_\".$formname;\n        if (!$historyInfo) {\n            unset($this->_viewHistory[$view_form]);\n        } else {\n            $this->_viewHistory[$view_form] = $historyInfo;\n        }\n    }", "code_tokens": ["public", "function", "setViewHistory", "(", "$", "formName", ",", "$", "historyInfo", ")", "{", "$", "view", "=", "Openbizx", "::", "$", "app", "->", "getCurrentViewName", "(", ")", ";", "$", "view_form", "=", "$", "formName", ";", "//$view.\"_\".$formname;", "if", "(", "!", "$", "historyInfo", ")", "{", "unset", "(", "$", "this", "->", "_viewHistory", "[", "$", "view_form", "]", ")", ";", "}", "else", "{", "$", "this", "->", "_viewHistory", "[", "$", "view_form", "]", "=", "$", "historyInfo", ";", "}", "}"], "docstring": "Set view history data of given bizform into session file\n\n@param string $formName - name of bizform\n@param array $historyInfo - view history data represented by an associated array\n@return void", "docstring_tokens": ["Set", "view", "history", "data", "of", "given", "bizform", "into", "session", "file"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Web/SessionContext.php#L365-L374", "partition": "test"}
{"repo": "DevFactoryCH/media", "path": "src/MediaTrait.php", "func_name": "MediaTrait.updateMediaById", "original_string": "public function updateMediaById($id, $options) {\n    $this->options = $options;\n\n    $this->parseOptions();\n\n    $model = config('media.config.model');\n    $this->media = $model::find($id);\n\n    $this->media->alt = $this->getAlt();\n    $this->media->title = $this->getTitle();\n    $this->media->name = $this->getName();\n    $this->media->weight = $this->getWeight();\n\n    $this->media->save();\n  }", "language": "php", "code": "public function updateMediaById($id, $options) {\n    $this->options = $options;\n\n    $this->parseOptions();\n\n    $model = config('media.config.model');\n    $this->media = $model::find($id);\n\n    $this->media->alt = $this->getAlt();\n    $this->media->title = $this->getTitle();\n    $this->media->name = $this->getName();\n    $this->media->weight = $this->getWeight();\n\n    $this->media->save();\n  }", "code_tokens": ["public", "function", "updateMediaById", "(", "$", "id", ",", "$", "options", ")", "{", "$", "this", "->", "options", "=", "$", "options", ";", "$", "this", "->", "parseOptions", "(", ")", ";", "$", "model", "=", "config", "(", "'media.config.model'", ")", ";", "$", "this", "->", "media", "=", "$", "model", "::", "find", "(", "$", "id", ")", ";", "$", "this", "->", "media", "->", "alt", "=", "$", "this", "->", "getAlt", "(", ")", ";", "$", "this", "->", "media", "->", "title", "=", "$", "this", "->", "getTitle", "(", ")", ";", "$", "this", "->", "media", "->", "name", "=", "$", "this", "->", "getName", "(", ")", ";", "$", "this", "->", "media", "->", "weight", "=", "$", "this", "->", "getWeight", "(", ")", ";", "$", "this", "->", "media", "->", "save", "(", ")", ";", "}"], "docstring": "Update the meta data of a certain media file.\n\n@param $id int\nThe ID of the media item to update\n\n@param $options array\nAn key => value array of elements in the DB to change, key must be one of:\n'alt', 'title', 'name', 'weight'\n\n@return void", "docstring_tokens": ["Update", "the", "meta", "data", "of", "a", "certain", "media", "file", "."], "sha": "d30611fe32bc302616eec3e7db1c2df5d3542ba6", "url": "https://github.com/DevFactoryCH/media/blob/d30611fe32bc302616eec3e7db1c2df5d3542ba6/src/MediaTrait.php#L113-L127", "partition": "test"}
{"repo": "sminnee/phpcrawl", "path": "libs/PHPCrawler.class.php", "func_name": "PHPCrawler.setWorkingDirectory", "original_string": "public function setWorkingDirectory($directory)\r\n  {\r\n    if (is_writeable($this->working_base_directory))\r\n    {\r\n      $this->working_base_directory = $directory;\r\n      return true;\r\n    }\r\n    else return false;\r\n  }", "language": "php", "code": "public function setWorkingDirectory($directory)\r\n  {\r\n    if (is_writeable($this->working_base_directory))\r\n    {\r\n      $this->working_base_directory = $directory;\r\n      return true;\r\n    }\r\n    else return false;\r\n  }", "code_tokens": ["public", "function", "setWorkingDirectory", "(", "$", "directory", ")", "{", "if", "(", "is_writeable", "(", "$", "this", "->", "working_base_directory", ")", ")", "{", "$", "this", "->", "working_base_directory", "=", "$", "directory", ";", "return", "true", ";", "}", "else", "return", "false", ";", "}"], "docstring": "Sets the working-directory the crawler should use for storing temporary data.\n\nEvery instance of the crawler needs and creates a temporary directory for storing some\ninternal data.\n\nThis setting defines which base-directory the crawler will use to store the temporary\ndirectories in. By default, the crawler uses the systems temp-directory as working-directory.\n(i.e. \"/tmp/\" on linux-systems)\n\nAll temporary directories created in the working-directory will be deleted automatically\nafter a crawling-process has finished.\n\nNOTE: To speed up the performance of a crawling-process (especially when using the\nSQLite-urlcache), try to set a mounted shared-memory device as working-direcotry\n(i.e. \"/dev/shm/\" on Debian/Ubuntu-systems).\n\nExample:\n<code>\n$crawler->setWorkingDirectory(\"/tmp/\");\n</code>\n\n@param string $directory The working-directory\n@return bool             TRUE on success, otherwise false.\n@section 1 Basic settings", "docstring_tokens": ["Sets", "the", "working", "-", "directory", "the", "crawler", "should", "use", "for", "storing", "temporary", "data", "."], "sha": "025c2ce86e5056c09de5a0eb4d76e8cf775dae36", "url": "https://github.com/sminnee/phpcrawl/blob/025c2ce86e5056c09de5a0eb4d76e8cf775dae36/libs/PHPCrawler.class.php#L1604-L1612", "partition": "test"}
{"repo": "tomahawkphp/framework", "path": "src/Tomahawk/Asset/AssetManager.php", "func_name": "AssetManager.outputCss", "original_string": "public function outputCss($container = 'default')\n    {\n        $assets = $this->getAssets($container, 'css');\n\n        $html = [];\n\n        foreach ($assets as $asset) {\n            $source = $this->url ? $this->url->asset($asset['source']): $asset['source'];\n            $html[] = $this->html->style($source, $asset['attributes']);\n        }\n\n        return trim(implode(PHP_EOL, $html));\n    }", "language": "php", "code": "public function outputCss($container = 'default')\n    {\n        $assets = $this->getAssets($container, 'css');\n\n        $html = [];\n\n        foreach ($assets as $asset) {\n            $source = $this->url ? $this->url->asset($asset['source']): $asset['source'];\n            $html[] = $this->html->style($source, $asset['attributes']);\n        }\n\n        return trim(implode(PHP_EOL, $html));\n    }", "code_tokens": ["public", "function", "outputCss", "(", "$", "container", "=", "'default'", ")", "{", "$", "assets", "=", "$", "this", "->", "getAssets", "(", "$", "container", ",", "'css'", ")", ";", "$", "html", "=", "[", "]", ";", "foreach", "(", "$", "assets", "as", "$", "asset", ")", "{", "$", "source", "=", "$", "this", "->", "url", "?", "$", "this", "->", "url", "->", "asset", "(", "$", "asset", "[", "'source'", "]", ")", ":", "$", "asset", "[", "'source'", "]", ";", "$", "html", "[", "]", "=", "$", "this", "->", "html", "->", "style", "(", "$", "source", ",", "$", "asset", "[", "'attributes'", "]", ")", ";", "}", "return", "trim", "(", "implode", "(", "PHP_EOL", ",", "$", "html", ")", ")", ";", "}"], "docstring": "Output a CSS asset from the container\n\n@param string $container\n@return string", "docstring_tokens": ["Output", "a", "CSS", "asset", "from", "the", "container"], "sha": "087ee2d362fe70a9020d32c00f7a48cb11b9c04f", "url": "https://github.com/tomahawkphp/framework/blob/087ee2d362fe70a9020d32c00f7a48cb11b9c04f/src/Tomahawk/Asset/AssetManager.php#L146-L158", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Web/Sessions/Session.php", "func_name": "Session.removeAll", "original_string": "public function removeAll()\n    {\n        $this->open();\n        $data = $this->data;\n        foreach (array_keys($data) as $key) {\n            unset($data[$key]);\n        }\n        $this->data = $data;\n        return $this->writeSession();\n    }", "language": "php", "code": "public function removeAll()\n    {\n        $this->open();\n        $data = $this->data;\n        foreach (array_keys($data) as $key) {\n            unset($data[$key]);\n        }\n        $this->data = $data;\n        return $this->writeSession();\n    }", "code_tokens": ["public", "function", "removeAll", "(", ")", "{", "$", "this", "->", "open", "(", ")", ";", "$", "data", "=", "$", "this", "->", "data", ";", "foreach", "(", "array_keys", "(", "$", "data", ")", "as", "$", "key", ")", "{", "unset", "(", "$", "data", "[", "$", "key", "]", ")", ";", "}", "$", "this", "->", "data", "=", "$", "data", ";", "return", "$", "this", "->", "writeSession", "(", ")", ";", "}"], "docstring": "Removes all session variables.\n@return PromiseInterface with bool when write process ends", "docstring_tokens": ["Removes", "all", "session", "variables", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Web/Sessions/Session.php#L603-L612", "partition": "test"}
{"repo": "delight-im/PHP-DB", "path": "src/PdoDataSource.php", "func_name": "PdoDataSource.setCharset", "original_string": "public function setCharset($charset = null) {\n\t\t$this->charset = $charset !== null ? (string) $charset : null;\n\n\t\treturn $this;\n\t}", "language": "php", "code": "public function setCharset($charset = null) {\n\t\t$this->charset = $charset !== null ? (string) $charset : null;\n\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "setCharset", "(", "$", "charset", "=", "null", ")", "{", "$", "this", "->", "charset", "=", "$", "charset", "!==", "null", "?", "(", "string", ")", "$", "charset", ":", "null", ";", "return", "$", "this", ";", "}"], "docstring": "Sets the charset\n\n@param string|null $charset the character encoding, e.g. `utf8`\n@return static this instance for chaining", "docstring_tokens": ["Sets", "the", "charset"], "sha": "7a03da20b5592fa445c10cd6c7245d51037292c4", "url": "https://github.com/delight-im/PHP-DB/blob/7a03da20b5592fa445c10cd6c7245d51037292c4/src/PdoDataSource.php#L146-L150", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/Driver/Sql.php", "func_name": "QuickBooks_Driver_Sql._recurDequeue", "original_string": "protected function _recurDequeue($user, $by_priority = false)\n\t{\n\t\t$errnum = 0;\n\t\t$errmsg = '';\n\n\t\t$sql = \"\n\t\t\tSELECT\n\t\t\t\t*\n\t\t\tFROM\n\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \"\n\t\t\tWHERE\n\t\t\t\tqb_username = '\" . $this->_escape($user) . \"' AND\n\t\t\t\trecur_lasttime + run_every <= \" . time();\n\n\t\tif ($by_priority)\n\t\t{\n\t\t\t$sql .= ' ORDER BY priority DESC ';\n\t\t}\n\n\t\tif ($arr = $this->_fetch($this->_query($sql . ' ', $errnum, $errmsg, 0, 1)))\n\t\t{\n\t\t\t// Update it, so it doesn't get fetched again until it's supposed to\n\t\t\t$errnum = 0;\n\t\t\t$errmsg = '';\n\t\t\t$this->_query(\"UPDATE \" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \" SET recur_lasttime = \" . time() . \" WHERE quickbooks_recur_id = \" . $arr['quickbooks_recur_id'], $errnum, $errmsg);\n\n\t\t\treturn $arr;\n\t\t}\n\n\t\treturn false;\n\t}", "language": "php", "code": "protected function _recurDequeue($user, $by_priority = false)\n\t{\n\t\t$errnum = 0;\n\t\t$errmsg = '';\n\n\t\t$sql = \"\n\t\t\tSELECT\n\t\t\t\t*\n\t\t\tFROM\n\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \"\n\t\t\tWHERE\n\t\t\t\tqb_username = '\" . $this->_escape($user) . \"' AND\n\t\t\t\trecur_lasttime + run_every <= \" . time();\n\n\t\tif ($by_priority)\n\t\t{\n\t\t\t$sql .= ' ORDER BY priority DESC ';\n\t\t}\n\n\t\tif ($arr = $this->_fetch($this->_query($sql . ' ', $errnum, $errmsg, 0, 1)))\n\t\t{\n\t\t\t// Update it, so it doesn't get fetched again until it's supposed to\n\t\t\t$errnum = 0;\n\t\t\t$errmsg = '';\n\t\t\t$this->_query(\"UPDATE \" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \" SET recur_lasttime = \" . time() . \" WHERE quickbooks_recur_id = \" . $arr['quickbooks_recur_id'], $errnum, $errmsg);\n\n\t\t\treturn $arr;\n\t\t}\n\n\t\treturn false;\n\t}", "code_tokens": ["protected", "function", "_recurDequeue", "(", "$", "user", ",", "$", "by_priority", "=", "false", ")", "{", "$", "errnum", "=", "0", ";", "$", "errmsg", "=", "''", ";", "$", "sql", "=", "\"\n\t\t\tSELECT\n\t\t\t\t*\n\t\t\tFROM\n\t\t\t\t\"", ".", "$", "this", "->", "_mapTableName", "(", "QUICKBOOKS_DRIVER_SQL_RECURTABLE", ")", ".", "\"\n\t\t\tWHERE\n\t\t\t\tqb_username = '\"", ".", "$", "this", "->", "_escape", "(", "$", "user", ")", ".", "\"' AND\n\t\t\t\trecur_lasttime + run_every <= \"", ".", "time", "(", ")", ";", "if", "(", "$", "by_priority", ")", "{", "$", "sql", ".=", "' ORDER BY priority DESC '", ";", "}", "if", "(", "$", "arr", "=", "$", "this", "->", "_fetch", "(", "$", "this", "->", "_query", "(", "$", "sql", ".", "' '", ",", "$", "errnum", ",", "$", "errmsg", ",", "0", ",", "1", ")", ")", ")", "{", "// Update it, so it doesn't get fetched again until it's supposed to", "$", "errnum", "=", "0", ";", "$", "errmsg", "=", "''", ";", "$", "this", "->", "_query", "(", "\"UPDATE \"", ".", "$", "this", "->", "_mapTableName", "(", "QUICKBOOKS_DRIVER_SQL_RECURTABLE", ")", ".", "\" SET recur_lasttime = \"", ".", "time", "(", ")", ".", "\" WHERE quickbooks_recur_id = \"", ".", "$", "arr", "[", "'quickbooks_recur_id'", "]", ",", "$", "errnum", ",", "$", "errmsg", ")", ";", "return", "$", "arr", ";", "}", "return", "false", ";", "}"], "docstring": "Dequeue a recurring even that is schedule to be run\n\n@param string $user\n@param boolean $by_priority\n@return array", "docstring_tokens": ["Dequeue", "a", "recurring", "even", "that", "is", "schedule", "to", "be", "run"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/Driver/Sql.php#L1092-L1122", "partition": "test"}
{"repo": "APY/APYDataGridBundle", "path": "Grid/GridRegistry.php", "func_name": "GridRegistry.addType", "original_string": "public function addType(GridTypeInterface $type)\n    {\n        $name = $type->getName();\n\n        if ($this->hasType($name)) {\n            throw new TypeAlreadyExistsException($name);\n        }\n\n        $this->types[$name] = $type;\n\n        return $this;\n    }", "language": "php", "code": "public function addType(GridTypeInterface $type)\n    {\n        $name = $type->getName();\n\n        if ($this->hasType($name)) {\n            throw new TypeAlreadyExistsException($name);\n        }\n\n        $this->types[$name] = $type;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addType", "(", "GridTypeInterface", "$", "type", ")", "{", "$", "name", "=", "$", "type", "->", "getName", "(", ")", ";", "if", "(", "$", "this", "->", "hasType", "(", "$", "name", ")", ")", "{", "throw", "new", "TypeAlreadyExistsException", "(", "$", "name", ")", ";", "}", "$", "this", "->", "types", "[", "$", "name", "]", "=", "$", "type", ";", "return", "$", "this", ";", "}"], "docstring": "Add a grid type.\n\n@param GridTypeInterface $type\n\n@return $this", "docstring_tokens": ["Add", "a", "grid", "type", "."], "sha": "03050b366a79553b014aa4297d31b585a84622a3", "url": "https://github.com/APY/APYDataGridBundle/blob/03050b366a79553b014aa4297d31b585a84622a3/Grid/GridRegistry.php#L39-L50", "partition": "test"}
{"repo": "techdivision/import", "path": "src/Repositories/EavAttributeRepository.php", "func_name": "EavAttributeRepository.findAllByEntityTypeIdAndAttributeSetName", "original_string": "public function findAllByEntityTypeIdAndAttributeSetName($entityTypeId, $attributeSetName)\n    {\n\n        // initialize the params\n        $params = array(\n            MemberNames::ENTITY_TYPE_ID     => $entityTypeId,\n            MemberNames::ATTRIBUTE_SET_NAME => $attributeSetName\n        );\n\n        // initialize the array for the EAV attributes\n        $eavAttributes = array();\n\n        // execute the prepared statement and return the array with the EAV attributes\n        $this->eavAttributesByEntityTypeIdAndAttributeSetNameStmt->execute($params);\n\n        // load the available EAV attributes\n        $availableEavAttributes = $this->eavAttributesByEntityTypeIdAndAttributeSetNameStmt->fetchAll(\\PDO::FETCH_ASSOC);\n        foreach ($availableEavAttributes as $eavAttribute) {\n            $eavAttributes[$eavAttribute[MemberNames::ATTRIBUTE_CODE]] = $eavAttribute;\n        }\n\n        // return the array with the EAV attributes\n        return $eavAttributes;\n    }", "language": "php", "code": "public function findAllByEntityTypeIdAndAttributeSetName($entityTypeId, $attributeSetName)\n    {\n\n        // initialize the params\n        $params = array(\n            MemberNames::ENTITY_TYPE_ID     => $entityTypeId,\n            MemberNames::ATTRIBUTE_SET_NAME => $attributeSetName\n        );\n\n        // initialize the array for the EAV attributes\n        $eavAttributes = array();\n\n        // execute the prepared statement and return the array with the EAV attributes\n        $this->eavAttributesByEntityTypeIdAndAttributeSetNameStmt->execute($params);\n\n        // load the available EAV attributes\n        $availableEavAttributes = $this->eavAttributesByEntityTypeIdAndAttributeSetNameStmt->fetchAll(\\PDO::FETCH_ASSOC);\n        foreach ($availableEavAttributes as $eavAttribute) {\n            $eavAttributes[$eavAttribute[MemberNames::ATTRIBUTE_CODE]] = $eavAttribute;\n        }\n\n        // return the array with the EAV attributes\n        return $eavAttributes;\n    }", "code_tokens": ["public", "function", "findAllByEntityTypeIdAndAttributeSetName", "(", "$", "entityTypeId", ",", "$", "attributeSetName", ")", "{", "// initialize the params", "$", "params", "=", "array", "(", "MemberNames", "::", "ENTITY_TYPE_ID", "=>", "$", "entityTypeId", ",", "MemberNames", "::", "ATTRIBUTE_SET_NAME", "=>", "$", "attributeSetName", ")", ";", "// initialize the array for the EAV attributes", "$", "eavAttributes", "=", "array", "(", ")", ";", "// execute the prepared statement and return the array with the EAV attributes", "$", "this", "->", "eavAttributesByEntityTypeIdAndAttributeSetNameStmt", "->", "execute", "(", "$", "params", ")", ";", "// load the available EAV attributes", "$", "availableEavAttributes", "=", "$", "this", "->", "eavAttributesByEntityTypeIdAndAttributeSetNameStmt", "->", "fetchAll", "(", "\\", "PDO", "::", "FETCH_ASSOC", ")", ";", "foreach", "(", "$", "availableEavAttributes", "as", "$", "eavAttribute", ")", "{", "$", "eavAttributes", "[", "$", "eavAttribute", "[", "MemberNames", "::", "ATTRIBUTE_CODE", "]", "]", "=", "$", "eavAttribute", ";", "}", "// return the array with the EAV attributes", "return", "$", "eavAttributes", ";", "}"], "docstring": "Return's an array with the available EAV attributes for the passed entity type ID and attribute set name.\n\n@param integer $entityTypeId     The entity type ID of the EAV attributes to return\n@param string  $attributeSetName The attribute set name of the EAV attributes to return\n\n@return array The array with all available EAV attributes", "docstring_tokens": ["Return", "s", "an", "array", "with", "the", "available", "EAV", "attributes", "for", "the", "passed", "entity", "type", "ID", "and", "attribute", "set", "name", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/Repositories/EavAttributeRepository.php#L124-L147", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Addons.php", "func_name": "Addons.scanAddonRecursive", "original_string": "protected static function scanAddonRecursive($dir, &$addons, $enabled = null) {\n        $dir = rtrim($dir, '/');\n        $addonKey = strtolower(basename($dir));\n\n        // Scan the addon if it is enabled.\n        if ($enabled === null || in_array($addonKey, $enabled)) {\n            list($addonKey, $addon) = static::scanAddon($dir);\n        } else {\n            $addon = null;\n        }\n\n        // Add the addon to the collection array if one was supplied.\n        if ($addon !== null) {\n            $addons[$addonKey] = $addon;\n        }\n\n        // Recurse.\n        $addon_subdirs = array('/addons');\n        foreach ($addon_subdirs as $addon_subdir) {\n            if (is_dir($dir.$addon_subdir)) {\n                static::scanAddons($dir.$addon_subdir, $enabled, $addons);\n            }\n        }\n\n        return array($addonKey, $addon);\n    }", "language": "php", "code": "protected static function scanAddonRecursive($dir, &$addons, $enabled = null) {\n        $dir = rtrim($dir, '/');\n        $addonKey = strtolower(basename($dir));\n\n        // Scan the addon if it is enabled.\n        if ($enabled === null || in_array($addonKey, $enabled)) {\n            list($addonKey, $addon) = static::scanAddon($dir);\n        } else {\n            $addon = null;\n        }\n\n        // Add the addon to the collection array if one was supplied.\n        if ($addon !== null) {\n            $addons[$addonKey] = $addon;\n        }\n\n        // Recurse.\n        $addon_subdirs = array('/addons');\n        foreach ($addon_subdirs as $addon_subdir) {\n            if (is_dir($dir.$addon_subdir)) {\n                static::scanAddons($dir.$addon_subdir, $enabled, $addons);\n            }\n        }\n\n        return array($addonKey, $addon);\n    }", "code_tokens": ["protected", "static", "function", "scanAddonRecursive", "(", "$", "dir", ",", "&", "$", "addons", ",", "$", "enabled", "=", "null", ")", "{", "$", "dir", "=", "rtrim", "(", "$", "dir", ",", "'/'", ")", ";", "$", "addonKey", "=", "strtolower", "(", "basename", "(", "$", "dir", ")", ")", ";", "// Scan the addon if it is enabled.", "if", "(", "$", "enabled", "===", "null", "||", "in_array", "(", "$", "addonKey", ",", "$", "enabled", ")", ")", "{", "list", "(", "$", "addonKey", ",", "$", "addon", ")", "=", "static", "::", "scanAddon", "(", "$", "dir", ")", ";", "}", "else", "{", "$", "addon", "=", "null", ";", "}", "// Add the addon to the collection array if one was supplied.", "if", "(", "$", "addon", "!==", "null", ")", "{", "$", "addons", "[", "$", "addonKey", "]", "=", "$", "addon", ";", "}", "// Recurse.", "$", "addon_subdirs", "=", "array", "(", "'/addons'", ")", ";", "foreach", "(", "$", "addon_subdirs", "as", "$", "addon_subdir", ")", "{", "if", "(", "is_dir", "(", "$", "dir", ".", "$", "addon_subdir", ")", ")", "{", "static", "::", "scanAddons", "(", "$", "dir", ".", "$", "addon_subdir", ",", "$", "enabled", ",", "$", "addons", ")", ";", "}", "}", "return", "array", "(", "$", "addonKey", ",", "$", "addon", ")", ";", "}"], "docstring": "Scan an addon directory for information.\n\n@param string $dir The addon directory to scan.\n@param array &$addons The addons array.\n@param array $enabled An array of enabled addons or null to scan all addons.\n@return array Returns an array in the form [addonKey, addonInfo].", "docstring_tokens": ["Scan", "an", "addon", "directory", "for", "information", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Addons.php#L304-L329", "partition": "test"}
{"repo": "sminnee/phpcrawl", "path": "libs/PHPCrawler.class.php", "func_name": "PHPCrawler.setTrafficLimit", "original_string": "public function setTrafficLimit($bytes, $complete_requested_files = true)\r\n  {\r\n    if (preg_match(\"#^[0-9]*$#\", $bytes))\r\n    {\r\n      $this->traffic_limit = $bytes;\r\n      return true;\r\n    }\r\n    else return false;\r\n  }", "language": "php", "code": "public function setTrafficLimit($bytes, $complete_requested_files = true)\r\n  {\r\n    if (preg_match(\"#^[0-9]*$#\", $bytes))\r\n    {\r\n      $this->traffic_limit = $bytes;\r\n      return true;\r\n    }\r\n    else return false;\r\n  }", "code_tokens": ["public", "function", "setTrafficLimit", "(", "$", "bytes", ",", "$", "complete_requested_files", "=", "true", ")", "{", "if", "(", "preg_match", "(", "\"#^[0-9]*$#\"", ",", "$", "bytes", ")", ")", "{", "$", "this", "->", "traffic_limit", "=", "$", "bytes", ";", "return", "true", ";", "}", "else", "return", "false", ";", "}"], "docstring": "Sets a limit to the number of bytes the crawler should receive alltogether during crawling-process.\n\nIf the limit is reached, the crawler stops the crawling-process.\nThe default-value is 0 (no limit).\n\n@param int $bytes Maximum number of bytes\n@param bool $complete_requested_files This parameter has no function anymore!\n\n@return bool\n@section 5 Limit-settings", "docstring_tokens": ["Sets", "a", "limit", "to", "the", "number", "of", "bytes", "the", "crawler", "should", "receive", "alltogether", "during", "crawling", "-", "process", "."], "sha": "025c2ce86e5056c09de5a0eb4d76e8cf775dae36", "url": "https://github.com/sminnee/phpcrawl/blob/025c2ce86e5056c09de5a0eb4d76e8cf775dae36/libs/PHPCrawler.class.php#L1419-L1427", "partition": "test"}
{"repo": "simphotonics/utils", "path": "src/ArrayUtils.php", "func_name": "ArrayUtils.key2offset", "original_string": "public static function key2offset(array &$arr, $key)\n    {\n        return isset($arr[$key]) ? array_flip(array_keys($arr))[$key] : false;\n    }", "language": "php", "code": "public static function key2offset(array &$arr, $key)\n    {\n        return isset($arr[$key]) ? array_flip(array_keys($arr))[$key] : false;\n    }", "code_tokens": ["public", "static", "function", "key2offset", "(", "array", "&", "$", "arr", ",", "$", "key", ")", "{", "return", "isset", "(", "$", "arr", "[", "$", "key", "]", ")", "?", "array_flip", "(", "array_keys", "(", "$", "arr", ")", ")", "[", "$", "key", "]", ":", "false", ";", "}"], "docstring": "Return the array offset corresponding to an array key.\n@param  Array  &$arr\n@param  strin|int $key\n@return int", "docstring_tokens": ["Return", "the", "array", "offset", "corresponding", "to", "an", "array", "key", "."], "sha": "4e4ec3b4ddd9a0c603d71fd60d17c826cf537539", "url": "https://github.com/simphotonics/utils/blob/4e4ec3b4ddd9a0c603d71fd60d17c826cf537539/src/ArrayUtils.php#L18-L21", "partition": "test"}
{"repo": "belgattitude/solublecomponents", "path": "src/Soluble/Normalist/Synthetic/TableSearch.php", "func_name": "TableSearch.join", "original_string": "public function join($table, $on, $columns = [])\n    {\n        $prefixed_table = $this->prefixTableJoinCondition($table);\n\n\n        //$this->columns($this->getPrefixedColumns());\n\n        $this->select->join($prefixed_table, $on, $columns, Select::JOIN_INNER);\n        return $this;\n    }", "language": "php", "code": "public function join($table, $on, $columns = [])\n    {\n        $prefixed_table = $this->prefixTableJoinCondition($table);\n\n\n        //$this->columns($this->getPrefixedColumns());\n\n        $this->select->join($prefixed_table, $on, $columns, Select::JOIN_INNER);\n        return $this;\n    }", "code_tokens": ["public", "function", "join", "(", "$", "table", ",", "$", "on", ",", "$", "columns", "=", "[", "]", ")", "{", "$", "prefixed_table", "=", "$", "this", "->", "prefixTableJoinCondition", "(", "$", "table", ")", ";", "//$this->columns($this->getPrefixedColumns());", "$", "this", "->", "select", "->", "join", "(", "$", "prefixed_table", ",", "$", "on", ",", "$", "columns", ",", "Select", "::", "JOIN_INNER", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Add an inner table join to the search\n\n@param  string|array $table\n@param  string $on\n@param  string|array $columns by default won't retrieve any column from the joined table\n@return TableSearch", "docstring_tokens": ["Add", "an", "inner", "table", "join", "to", "the", "search"], "sha": "f045b3967e42d352d8e70fb2c1f8a427df62599f", "url": "https://github.com/belgattitude/solublecomponents/blob/f045b3967e42d352d8e70fb2c1f8a427df62599f/src/Soluble/Normalist/Synthetic/TableSearch.php#L175-L184", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Query/FluentQuery.php", "func_name": "FluentQuery.generate_where_tag", "original_string": "protected function generate_where_tag( $column, $equality = '', $value = '' ) {\n\n\t\tif ( $column instanceof Where ) {\n\t\t\treturn $column;\n\t\t}\n\n\t\tif ( is_array( $value ) ) {\n\n\t\t\tif ( count( $value ) === 0 ) {\n\t\t\t\tthrow new \\InvalidArgumentException( 'Must provide at least one value for IN query.' );\n\t\t\t}\n\n\t\t\t$self  = $this;\n\t\t\t$value = array_map( function ( $value ) use ( $column, $self ) {\n\t\t\t\treturn $self->escape_value( $column, $value );\n\t\t\t}, $value );\n\t\t} else {\n\t\t\t$value = $this->escape_value( $column, $value );\n\t\t}\n\n\t\t$column = $this->prepare_column( $column );\n\n\t\treturn new Where( $column, $equality, $value );\n\t}", "language": "php", "code": "protected function generate_where_tag( $column, $equality = '', $value = '' ) {\n\n\t\tif ( $column instanceof Where ) {\n\t\t\treturn $column;\n\t\t}\n\n\t\tif ( is_array( $value ) ) {\n\n\t\t\tif ( count( $value ) === 0 ) {\n\t\t\t\tthrow new \\InvalidArgumentException( 'Must provide at least one value for IN query.' );\n\t\t\t}\n\n\t\t\t$self  = $this;\n\t\t\t$value = array_map( function ( $value ) use ( $column, $self ) {\n\t\t\t\treturn $self->escape_value( $column, $value );\n\t\t\t}, $value );\n\t\t} else {\n\t\t\t$value = $this->escape_value( $column, $value );\n\t\t}\n\n\t\t$column = $this->prepare_column( $column );\n\n\t\treturn new Where( $column, $equality, $value );\n\t}", "code_tokens": ["protected", "function", "generate_where_tag", "(", "$", "column", ",", "$", "equality", "=", "''", ",", "$", "value", "=", "''", ")", "{", "if", "(", "$", "column", "instanceof", "Where", ")", "{", "return", "$", "column", ";", "}", "if", "(", "is_array", "(", "$", "value", ")", ")", "{", "if", "(", "count", "(", "$", "value", ")", "===", "0", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'Must provide at least one value for IN query.'", ")", ";", "}", "$", "self", "=", "$", "this", ";", "$", "value", "=", "array_map", "(", "function", "(", "$", "value", ")", "use", "(", "$", "column", ",", "$", "self", ")", "{", "return", "$", "self", "->", "escape_value", "(", "$", "column", ",", "$", "value", ")", ";", "}", ",", "$", "value", ")", ";", "}", "else", "{", "$", "value", "=", "$", "this", "->", "escape_value", "(", "$", "column", ",", "$", "value", ")", ";", "}", "$", "column", "=", "$", "this", "->", "prepare_column", "(", "$", "column", ")", ";", "return", "new", "Where", "(", "$", "column", ",", "$", "equality", ",", "$", "value", ")", ";", "}"], "docstring": "Generate a Where tag.\n\n@since 2.0.0\n\n@param string       $column\n@param string|bool  $equality\n@param string|array $value\n\n@return Where\n\n@throws \\IronBound\\DB\\Exception\\InvalidColumnException\n@throws \\InvalidArgumentException", "docstring_tokens": ["Generate", "a", "Where", "tag", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Query/FluentQuery.php#L346-L369", "partition": "test"}
{"repo": "maniaplanet/manialive-plugins", "path": "Standard/TeamSpeak/TeamSpeak3/Transport/TCP.php", "func_name": "TCP.connect", "original_string": "public function connect()\r\n  {\r\n    if($this->stream !== null) return;\r\n\r\n    $host = strval($this->config[\"host\"]);\r\n    $port = strval($this->config[\"port\"]);\r\n\r\n    $address = \"tcp://\" . $host . \":\" . $port;\r\n    $timeout = intval($this->config[\"timeout\"]);\r\n\r\n    $this->stream = @stream_socket_client($address, $errno, $errstr, $timeout);\r\n\r\n    if($this->stream === FALSE)\r\n    {\r\n      throw new Exception(utf8_encode($errstr), $errno);\r\n    }\r\n\r\n    @stream_set_timeout($this->stream, $timeout);\r\n    @stream_set_blocking($this->stream, $this->config[\"blocking\"] ? 1 : 0);\r\n  }", "language": "php", "code": "public function connect()\r\n  {\r\n    if($this->stream !== null) return;\r\n\r\n    $host = strval($this->config[\"host\"]);\r\n    $port = strval($this->config[\"port\"]);\r\n\r\n    $address = \"tcp://\" . $host . \":\" . $port;\r\n    $timeout = intval($this->config[\"timeout\"]);\r\n\r\n    $this->stream = @stream_socket_client($address, $errno, $errstr, $timeout);\r\n\r\n    if($this->stream === FALSE)\r\n    {\r\n      throw new Exception(utf8_encode($errstr), $errno);\r\n    }\r\n\r\n    @stream_set_timeout($this->stream, $timeout);\r\n    @stream_set_blocking($this->stream, $this->config[\"blocking\"] ? 1 : 0);\r\n  }", "code_tokens": ["public", "function", "connect", "(", ")", "{", "if", "(", "$", "this", "->", "stream", "!==", "null", ")", "return", ";", "$", "host", "=", "strval", "(", "$", "this", "->", "config", "[", "\"host\"", "]", ")", ";", "$", "port", "=", "strval", "(", "$", "this", "->", "config", "[", "\"port\"", "]", ")", ";", "$", "address", "=", "\"tcp://\"", ".", "$", "host", ".", "\":\"", ".", "$", "port", ";", "$", "timeout", "=", "intval", "(", "$", "this", "->", "config", "[", "\"timeout\"", "]", ")", ";", "$", "this", "->", "stream", "=", "@", "stream_socket_client", "(", "$", "address", ",", "$", "errno", ",", "$", "errstr", ",", "$", "timeout", ")", ";", "if", "(", "$", "this", "->", "stream", "===", "FALSE", ")", "{", "throw", "new", "Exception", "(", "utf8_encode", "(", "$", "errstr", ")", ",", "$", "errno", ")", ";", "}", "@", "stream_set_timeout", "(", "$", "this", "->", "stream", ",", "$", "timeout", ")", ";", "@", "stream_set_blocking", "(", "$", "this", "->", "stream", ",", "$", "this", "->", "config", "[", "\"blocking\"", "]", "?", "1", ":", "0", ")", ";", "}"], "docstring": "Connects to a remote server.\n\n@throws Exception\n@return void", "docstring_tokens": ["Connects", "to", "a", "remote", "server", "."], "sha": "f3f37da6836fe3d06fed32e75880caa6e9c0496b", "url": "https://github.com/maniaplanet/manialive-plugins/blob/f3f37da6836fe3d06fed32e75880caa6e9c0496b/Standard/TeamSpeak/TeamSpeak3/Transport/TCP.php#L42-L61", "partition": "test"}
{"repo": "F21/Paradox", "path": "Paradox/toolbox/CollectionManager.php", "func_name": "CollectionManager.loadCollection", "original_string": "public function loadCollection($collection)\n    {\n        try {\n            return $this->_toolbox->getCollectionHandler()->load($collection);\n        } catch (\\Exception $e) {\n            $normalised = $this->_toolbox->normaliseDriverExceptions($e);\n            throw new CollectionManagerException($normalised['message'], $normalised['code']);\n        }\n    }", "language": "php", "code": "public function loadCollection($collection)\n    {\n        try {\n            return $this->_toolbox->getCollectionHandler()->load($collection);\n        } catch (\\Exception $e) {\n            $normalised = $this->_toolbox->normaliseDriverExceptions($e);\n            throw new CollectionManagerException($normalised['message'], $normalised['code']);\n        }\n    }", "code_tokens": ["public", "function", "loadCollection", "(", "$", "collection", ")", "{", "try", "{", "return", "$", "this", "->", "_toolbox", "->", "getCollectionHandler", "(", ")", "->", "load", "(", "$", "collection", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "$", "normalised", "=", "$", "this", "->", "_toolbox", "->", "normaliseDriverExceptions", "(", "$", "e", ")", ";", "throw", "new", "CollectionManagerException", "(", "$", "normalised", "[", "'message'", "]", ",", "$", "normalised", "[", "'code'", "]", ")", ";", "}", "}"], "docstring": "Load a collection on the server.\n@param  string                     $collection The name of the collection.\n@throws CollectionManagerException", "docstring_tokens": ["Load", "a", "collection", "on", "the", "server", "."], "sha": "d1f47203e743760d8d8d6232bf0ea62920e7eefe", "url": "https://github.com/F21/Paradox/blob/d1f47203e743760d8d8d6232bf0ea62920e7eefe/Paradox/toolbox/CollectionManager.php#L199-L207", "partition": "test"}
{"repo": "miBadger/miBadger.File", "path": "src/File.php", "func_name": "File.listFiles", "original_string": "public function listFiles($recursive = false, $showHidden = false)\n\t{\n\t\t$result = [];\n\n\t\tforeach ($this->listAllIterator($recursive, $showHidden) as $element) {\n\t\t\tif ($element->isFile()) {\n\t\t\t\t$result[] = $element->getFilename();\n\t\t\t}\n\t\t}\n\n\t\treturn $result;\n\t}", "language": "php", "code": "public function listFiles($recursive = false, $showHidden = false)\n\t{\n\t\t$result = [];\n\n\t\tforeach ($this->listAllIterator($recursive, $showHidden) as $element) {\n\t\t\tif ($element->isFile()) {\n\t\t\t\t$result[] = $element->getFilename();\n\t\t\t}\n\t\t}\n\n\t\treturn $result;\n\t}", "code_tokens": ["public", "function", "listFiles", "(", "$", "recursive", "=", "false", ",", "$", "showHidden", "=", "false", ")", "{", "$", "result", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "listAllIterator", "(", "$", "recursive", ",", "$", "showHidden", ")", "as", "$", "element", ")", "{", "if", "(", "$", "element", "->", "isFile", "(", ")", ")", "{", "$", "result", "[", "]", "=", "$", "element", "->", "getFilename", "(", ")", ";", "}", "}", "return", "$", "result", ";", "}"], "docstring": "Returns an array with the files in the current directory.\n\n@param bool $recursive = false\n@param bool $showHidden = false\n@return string[] an array with the files in the current directory.", "docstring_tokens": ["Returns", "an", "array", "with", "the", "files", "in", "the", "current", "directory", "."], "sha": "5b681fe3345ab68f0bda151e5f85a33f8bbca24e", "url": "https://github.com/miBadger/miBadger.File/blob/5b681fe3345ab68f0bda151e5f85a33f8bbca24e/src/File.php#L248-L259", "partition": "test"}
{"repo": "Laralum/Social", "path": "src/Controllers/SocialController.php", "func_name": "SocialController.settings", "original_string": "public function settings(Request $request)\n    {\n        $this->authorize('update', Settings::class);\n\n        $this->settings->update([\n            'enabled'                 => $request->enabled ? true : false,\n            'allow_register'          => $request->allow_register ? false : false, // Not enabled yet\n            'facebook_client_id'      => $request->facebook_client_id ? encrypt($request->facebook_client_id) : null,\n            'facebook_client_secret'  => $request->facebook_client_secret ? encrypt($request->facebook_client_secret) : null,\n            'twitter_client_id'       => $request->twitter_client_id ? encrypt($request->twitter_client_id) : null,\n            'twitter_client_secret'   => $request->twitter_client_secret ? encrypt($request->twitter_client_secret) : null,\n            'linkedin_client_id'      => $request->linkedin_client_id ? encrypt($request->linkedin_client_id) : null,\n            'linkedin_client_secret'  => $request->linkedin_client_secret ? encrypt($request->linkedin_client_secret) : null,\n            'google_client_id'        => $request->google_client_id ? encrypt($request->google_client_id) : null,\n            'google_client_secret'    => $request->google_client_secret ? encrypt($request->google_client_secret) : null,\n            'github_client_id'        => $request->github_client_id ? encrypt($request->github_client_id) : null,\n            'github_client_secret'    => $request->github_client_secret ? encrypt($request->github_client_secret) : null,\n            'bitbucket_client_id'     => $request->bitbucket_client_id ? encrypt($request->bitbucket_client_id) : null,\n            'bitbucket_client_secret' => $request->bitbucket_client_secret ? encrypt($request->bitbucket_client_secret) : null,\n        ]);\n\n        $this->settings->touch();\n\n        return redirect()->route('laralum::settings.index', ['p' => 'Social'])->with('success', __('laralum_social::general.updated_settings'));\n    }", "language": "php", "code": "public function settings(Request $request)\n    {\n        $this->authorize('update', Settings::class);\n\n        $this->settings->update([\n            'enabled'                 => $request->enabled ? true : false,\n            'allow_register'          => $request->allow_register ? false : false, // Not enabled yet\n            'facebook_client_id'      => $request->facebook_client_id ? encrypt($request->facebook_client_id) : null,\n            'facebook_client_secret'  => $request->facebook_client_secret ? encrypt($request->facebook_client_secret) : null,\n            'twitter_client_id'       => $request->twitter_client_id ? encrypt($request->twitter_client_id) : null,\n            'twitter_client_secret'   => $request->twitter_client_secret ? encrypt($request->twitter_client_secret) : null,\n            'linkedin_client_id'      => $request->linkedin_client_id ? encrypt($request->linkedin_client_id) : null,\n            'linkedin_client_secret'  => $request->linkedin_client_secret ? encrypt($request->linkedin_client_secret) : null,\n            'google_client_id'        => $request->google_client_id ? encrypt($request->google_client_id) : null,\n            'google_client_secret'    => $request->google_client_secret ? encrypt($request->google_client_secret) : null,\n            'github_client_id'        => $request->github_client_id ? encrypt($request->github_client_id) : null,\n            'github_client_secret'    => $request->github_client_secret ? encrypt($request->github_client_secret) : null,\n            'bitbucket_client_id'     => $request->bitbucket_client_id ? encrypt($request->bitbucket_client_id) : null,\n            'bitbucket_client_secret' => $request->bitbucket_client_secret ? encrypt($request->bitbucket_client_secret) : null,\n        ]);\n\n        $this->settings->touch();\n\n        return redirect()->route('laralum::settings.index', ['p' => 'Social'])->with('success', __('laralum_social::general.updated_settings'));\n    }", "code_tokens": ["public", "function", "settings", "(", "Request", "$", "request", ")", "{", "$", "this", "->", "authorize", "(", "'update'", ",", "Settings", "::", "class", ")", ";", "$", "this", "->", "settings", "->", "update", "(", "[", "'enabled'", "=>", "$", "request", "->", "enabled", "?", "true", ":", "false", ",", "'allow_register'", "=>", "$", "request", "->", "allow_register", "?", "false", ":", "false", ",", "// Not enabled yet", "'facebook_client_id'", "=>", "$", "request", "->", "facebook_client_id", "?", "encrypt", "(", "$", "request", "->", "facebook_client_id", ")", ":", "null", ",", "'facebook_client_secret'", "=>", "$", "request", "->", "facebook_client_secret", "?", "encrypt", "(", "$", "request", "->", "facebook_client_secret", ")", ":", "null", ",", "'twitter_client_id'", "=>", "$", "request", "->", "twitter_client_id", "?", "encrypt", "(", "$", "request", "->", "twitter_client_id", ")", ":", "null", ",", "'twitter_client_secret'", "=>", "$", "request", "->", "twitter_client_secret", "?", "encrypt", "(", "$", "request", "->", "twitter_client_secret", ")", ":", "null", ",", "'linkedin_client_id'", "=>", "$", "request", "->", "linkedin_client_id", "?", "encrypt", "(", "$", "request", "->", "linkedin_client_id", ")", ":", "null", ",", "'linkedin_client_secret'", "=>", "$", "request", "->", "linkedin_client_secret", "?", "encrypt", "(", "$", "request", "->", "linkedin_client_secret", ")", ":", "null", ",", "'google_client_id'", "=>", "$", "request", "->", "google_client_id", "?", "encrypt", "(", "$", "request", "->", "google_client_id", ")", ":", "null", ",", "'google_client_secret'", "=>", "$", "request", "->", "google_client_secret", "?", "encrypt", "(", "$", "request", "->", "google_client_secret", ")", ":", "null", ",", "'github_client_id'", "=>", "$", "request", "->", "github_client_id", "?", "encrypt", "(", "$", "request", "->", "github_client_id", ")", ":", "null", ",", "'github_client_secret'", "=>", "$", "request", "->", "github_client_secret", "?", "encrypt", "(", "$", "request", "->", "github_client_secret", ")", ":", "null", ",", "'bitbucket_client_id'", "=>", "$", "request", "->", "bitbucket_client_id", "?", "encrypt", "(", "$", "request", "->", "bitbucket_client_id", ")", ":", "null", ",", "'bitbucket_client_secret'", "=>", "$", "request", "->", "bitbucket_client_secret", "?", "encrypt", "(", "$", "request", "->", "bitbucket_client_secret", ")", ":", "null", ",", "]", ")", ";", "$", "this", "->", "settings", "->", "touch", "(", ")", ";", "return", "redirect", "(", ")", "->", "route", "(", "'laralum::settings.index'", ",", "[", "'p'", "=>", "'Social'", "]", ")", "->", "with", "(", "'success'", ",", "__", "(", "'laralum_social::general.updated_settings'", ")", ")", ";", "}"], "docstring": "Update the social settings.\n\n@return Response", "docstring_tokens": ["Update", "the", "social", "settings", "."], "sha": "1a0cd5e59f5c2ce6a89d4bf1549ff34f7b20ed8b", "url": "https://github.com/Laralum/Social/blob/1a0cd5e59f5c2ce6a89d4bf1549ff34f7b20ed8b/src/Controllers/SocialController.php#L131-L155", "partition": "test"}
{"repo": "yawik/organizations", "path": "src/Controller/Plugin/InvitationHandler.php", "func_name": "InvitationHandler.loadOrCreateUser", "original_string": "protected function loadOrCreateUser($email)\n    {\n        $repository = $this->getUserRepository();\n        $generator  = $this->getUserTokenGenerator();\n\n        /* @var $user \\Auth\\Entity\\User */\n        $user = $repository->findByEmail(\n            $email, /*do not check isDraft flag */\n            null\n        );\n\n        if (!$user) {\n            $user = $repository->create();\n            $user->setEmail($email)\n                 ->setLogin($email)\n                 ->setRole(\\Auth\\Entity\\User::ROLE_RECRUITER)\n                 ->setIsDraft(true);\n            $info = $user->getInfo();\n            /* @var $info \\Auth\\Entity\\InfoInterface */\n            $info->setEmail($email);\n        }\n\n        $token = $generator->generate(\n            $user, /* daysToLive */\n            7\n        ); // will store user!\n\n        return array('user' => $user, 'token' => $token);\n    }", "language": "php", "code": "protected function loadOrCreateUser($email)\n    {\n        $repository = $this->getUserRepository();\n        $generator  = $this->getUserTokenGenerator();\n\n        /* @var $user \\Auth\\Entity\\User */\n        $user = $repository->findByEmail(\n            $email, /*do not check isDraft flag */\n            null\n        );\n\n        if (!$user) {\n            $user = $repository->create();\n            $user->setEmail($email)\n                 ->setLogin($email)\n                 ->setRole(\\Auth\\Entity\\User::ROLE_RECRUITER)\n                 ->setIsDraft(true);\n            $info = $user->getInfo();\n            /* @var $info \\Auth\\Entity\\InfoInterface */\n            $info->setEmail($email);\n        }\n\n        $token = $generator->generate(\n            $user, /* daysToLive */\n            7\n        ); // will store user!\n\n        return array('user' => $user, 'token' => $token);\n    }", "code_tokens": ["protected", "function", "loadOrCreateUser", "(", "$", "email", ")", "{", "$", "repository", "=", "$", "this", "->", "getUserRepository", "(", ")", ";", "$", "generator", "=", "$", "this", "->", "getUserTokenGenerator", "(", ")", ";", "/* @var $user \\Auth\\Entity\\User */", "$", "user", "=", "$", "repository", "->", "findByEmail", "(", "$", "email", ",", "/*do not check isDraft flag */", "null", ")", ";", "if", "(", "!", "$", "user", ")", "{", "$", "user", "=", "$", "repository", "->", "create", "(", ")", ";", "$", "user", "->", "setEmail", "(", "$", "email", ")", "->", "setLogin", "(", "$", "email", ")", "->", "setRole", "(", "\\", "Auth", "\\", "Entity", "\\", "User", "::", "ROLE_RECRUITER", ")", "->", "setIsDraft", "(", "true", ")", ";", "$", "info", "=", "$", "user", "->", "getInfo", "(", ")", ";", "/* @var $info \\Auth\\Entity\\InfoInterface */", "$", "info", "->", "setEmail", "(", "$", "email", ")", ";", "}", "$", "token", "=", "$", "generator", "->", "generate", "(", "$", "user", ",", "/* daysToLive */", "7", ")", ";", "// will store user!", "return", "array", "(", "'user'", "=>", "$", "user", ",", "'token'", "=>", "$", "token", ")", ";", "}"], "docstring": "Loads or creates an user.\n\nTries to load an user from the database, and creates a new\nuser draft, if no user was found.\nA token will be generated to authenticate this user in further interactions\n(with other parts of this application).\n\n@param string $email\n\n@return array An array with the keys 'user' and 'token', where 'user' is an UserInterface instance and\n'token' is the generated token.", "docstring_tokens": ["Loads", "or", "creates", "an", "user", "."], "sha": "a5d982212be5f445c067656aeb0aa3ca7daf0251", "url": "https://github.com/yawik/organizations/blob/a5d982212be5f445c067656aeb0aa3ca7daf0251/src/Controller/Plugin/InvitationHandler.php#L298-L326", "partition": "test"}
{"repo": "findologic/libflexport", "path": "src/FINDOLOGIC/Export/Helpers/DataHelper.php", "func_name": "DataHelper.checkForIllegalCsvPropertyKeys", "original_string": "public static function checkForIllegalCsvPropertyKeys(string $propertyKey): void\n    {\n        if (strpos($propertyKey, \"\\t\") !== false || strpos($propertyKey, \"\\n\") !== false) {\n            throw new BadPropertyKeyException($propertyKey);\n        }\n    }", "language": "php", "code": "public static function checkForIllegalCsvPropertyKeys(string $propertyKey): void\n    {\n        if (strpos($propertyKey, \"\\t\") !== false || strpos($propertyKey, \"\\n\") !== false) {\n            throw new BadPropertyKeyException($propertyKey);\n        }\n    }", "code_tokens": ["public", "static", "function", "checkForIllegalCsvPropertyKeys", "(", "string", "$", "propertyKey", ")", ":", "void", "{", "if", "(", "strpos", "(", "$", "propertyKey", ",", "\"\\t\"", ")", "!==", "false", "||", "strpos", "(", "$", "propertyKey", ",", "\"\\n\"", ")", "!==", "false", ")", "{", "throw", "new", "BadPropertyKeyException", "(", "$", "propertyKey", ")", ";", "}", "}"], "docstring": "Verifies that property keys for use in CSV export don't contain characters that could break the format fatally.\n\n@param string $propertyKey The property key to check.\n@throw BadPropertyKeyException In case the property key contains dangerous characters.", "docstring_tokens": ["Verifies", "that", "property", "keys", "for", "use", "in", "CSV", "export", "don", "t", "contain", "characters", "that", "could", "break", "the", "format", "fatally", "."], "sha": "3724b48d11223ae5721c55192a358d57c7e4269b", "url": "https://github.com/findologic/libflexport/blob/3724b48d11223ae5721c55192a358d57c7e4269b/src/FINDOLOGIC/Export/Helpers/DataHelper.php#L83-L88", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Helpers/ClassFinderHelper.php", "func_name": "ClassFinderHelper.getNamespacePath", "original_string": "public static function getNamespacePath($namespace, $first = true)\n    {\n        $namespace = trim($namespace, static::CS);\n        $nsPrefixes = static::getNamespacePrefixes($namespace);\n        $loaderPrefixes = static::getLoaderPrefixes();\n        $nsSuffix = '';\n        foreach ($nsPrefixes as $prefix) {\n            if (!isset($loaderPrefixes[$prefix])) {\n                continue;\n            }\n            $nsSuffix = trim(mb_substr($namespace, mb_strlen($prefix)), static::CS);\n            $paths = $loaderPrefixes[$prefix];\n            break;\n        }\n        if (!isset($paths)) {\n            return $first ? null : [];\n        }\n        $results = [];\n        foreach ($paths as $path) {\n            $result = $path . static::DS . str_replace('\\\\', static::DS, $nsSuffix);\n            if (!file_exists($result) || !is_dir($result)) {\n                continue;\n            }\n            if ($first) {\n                return $result;\n            }\n            $results[] = $result;\n        }\n        return $results;\n    }", "language": "php", "code": "public static function getNamespacePath($namespace, $first = true)\n    {\n        $namespace = trim($namespace, static::CS);\n        $nsPrefixes = static::getNamespacePrefixes($namespace);\n        $loaderPrefixes = static::getLoaderPrefixes();\n        $nsSuffix = '';\n        foreach ($nsPrefixes as $prefix) {\n            if (!isset($loaderPrefixes[$prefix])) {\n                continue;\n            }\n            $nsSuffix = trim(mb_substr($namespace, mb_strlen($prefix)), static::CS);\n            $paths = $loaderPrefixes[$prefix];\n            break;\n        }\n        if (!isset($paths)) {\n            return $first ? null : [];\n        }\n        $results = [];\n        foreach ($paths as $path) {\n            $result = $path . static::DS . str_replace('\\\\', static::DS, $nsSuffix);\n            if (!file_exists($result) || !is_dir($result)) {\n                continue;\n            }\n            if ($first) {\n                return $result;\n            }\n            $results[] = $result;\n        }\n        return $results;\n    }", "code_tokens": ["public", "static", "function", "getNamespacePath", "(", "$", "namespace", ",", "$", "first", "=", "true", ")", "{", "$", "namespace", "=", "trim", "(", "$", "namespace", ",", "static", "::", "CS", ")", ";", "$", "nsPrefixes", "=", "static", "::", "getNamespacePrefixes", "(", "$", "namespace", ")", ";", "$", "loaderPrefixes", "=", "static", "::", "getLoaderPrefixes", "(", ")", ";", "$", "nsSuffix", "=", "''", ";", "foreach", "(", "$", "nsPrefixes", "as", "$", "prefix", ")", "{", "if", "(", "!", "isset", "(", "$", "loaderPrefixes", "[", "$", "prefix", "]", ")", ")", "{", "continue", ";", "}", "$", "nsSuffix", "=", "trim", "(", "mb_substr", "(", "$", "namespace", ",", "mb_strlen", "(", "$", "prefix", ")", ")", ",", "static", "::", "CS", ")", ";", "$", "paths", "=", "$", "loaderPrefixes", "[", "$", "prefix", "]", ";", "break", ";", "}", "if", "(", "!", "isset", "(", "$", "paths", ")", ")", "{", "return", "$", "first", "?", "null", ":", "[", "]", ";", "}", "$", "results", "=", "[", "]", ";", "foreach", "(", "$", "paths", "as", "$", "path", ")", "{", "$", "result", "=", "$", "path", ".", "static", "::", "DS", ".", "str_replace", "(", "'\\\\'", ",", "static", "::", "DS", ",", "$", "nsSuffix", ")", ";", "if", "(", "!", "file_exists", "(", "$", "result", ")", "||", "!", "is_dir", "(", "$", "result", ")", ")", "{", "continue", ";", "}", "if", "(", "$", "first", ")", "{", "return", "$", "result", ";", "}", "$", "results", "[", "]", "=", "$", "result", ";", "}", "return", "$", "results", ";", "}"], "docstring": "Get namespace directory path\n@param string $namespace\n@param bool $first\n@return array|mixed|null|string", "docstring_tokens": ["Get", "namespace", "directory", "path"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Helpers/ClassFinderHelper.php#L78-L107", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/BaseConnection.php", "func_name": "BaseConnection.listTables", "original_string": "public function listTables(bool $constrainByPrefix = false)\n\t{\n\t\t// Is there a cached result?\n\t\tif (isset($this->dataCache['table_names']) && $this->dataCache['table_names'])\n\t\t{\n\t\t\treturn $this->dataCache['table_names'];\n\t\t}\n\n\t\tif (false === ($sql = $this->_listTables($constrainByPrefix)))\n\t\t{\n\t\t\tif ($this->DBDebug)\n\t\t\t{\n\t\t\t\tthrow new DatabaseException('This feature is not available for the database you are using.');\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->dataCache['table_names'] = [];\n\t\t$query                          = $this->query($sql);\n\n\t\tforeach ($query->getResultArray() as $row)\n\t\t{\n\t\t\t// Do we know from which column to get the table name?\n\t\t\tif (! isset($key))\n\t\t\t{\n\t\t\t\tif (isset($row['table_name']))\n\t\t\t\t{\n\t\t\t\t\t$key = 'table_name';\n\t\t\t\t}\n\t\t\t\telseif (isset($row['TABLE_NAME']))\n\t\t\t\t{\n\t\t\t\t\t$key = 'TABLE_NAME';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t/* We have no other choice but to just get the first element's key.\n\t\t\t\t\t * Due to array_shift() accepting its argument by reference, if\n\t\t\t\t\t * E_STRICT is on, this would trigger a warning. So we'll have to\n\t\t\t\t\t * assign it first.\n\t\t\t\t\t */\n\t\t\t\t\t$key = array_keys($row);\n\t\t\t\t\t$key = array_shift($key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->dataCache['table_names'][] = $row[$key];\n\t\t}\n\n\t\treturn $this->dataCache['table_names'];\n\t}", "language": "php", "code": "public function listTables(bool $constrainByPrefix = false)\n\t{\n\t\t// Is there a cached result?\n\t\tif (isset($this->dataCache['table_names']) && $this->dataCache['table_names'])\n\t\t{\n\t\t\treturn $this->dataCache['table_names'];\n\t\t}\n\n\t\tif (false === ($sql = $this->_listTables($constrainByPrefix)))\n\t\t{\n\t\t\tif ($this->DBDebug)\n\t\t\t{\n\t\t\t\tthrow new DatabaseException('This feature is not available for the database you are using.');\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->dataCache['table_names'] = [];\n\t\t$query                          = $this->query($sql);\n\n\t\tforeach ($query->getResultArray() as $row)\n\t\t{\n\t\t\t// Do we know from which column to get the table name?\n\t\t\tif (! isset($key))\n\t\t\t{\n\t\t\t\tif (isset($row['table_name']))\n\t\t\t\t{\n\t\t\t\t\t$key = 'table_name';\n\t\t\t\t}\n\t\t\t\telseif (isset($row['TABLE_NAME']))\n\t\t\t\t{\n\t\t\t\t\t$key = 'TABLE_NAME';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t/* We have no other choice but to just get the first element's key.\n\t\t\t\t\t * Due to array_shift() accepting its argument by reference, if\n\t\t\t\t\t * E_STRICT is on, this would trigger a warning. So we'll have to\n\t\t\t\t\t * assign it first.\n\t\t\t\t\t */\n\t\t\t\t\t$key = array_keys($row);\n\t\t\t\t\t$key = array_shift($key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->dataCache['table_names'][] = $row[$key];\n\t\t}\n\n\t\treturn $this->dataCache['table_names'];\n\t}", "code_tokens": ["public", "function", "listTables", "(", "bool", "$", "constrainByPrefix", "=", "false", ")", "{", "// Is there a cached result?", "if", "(", "isset", "(", "$", "this", "->", "dataCache", "[", "'table_names'", "]", ")", "&&", "$", "this", "->", "dataCache", "[", "'table_names'", "]", ")", "{", "return", "$", "this", "->", "dataCache", "[", "'table_names'", "]", ";", "}", "if", "(", "false", "===", "(", "$", "sql", "=", "$", "this", "->", "_listTables", "(", "$", "constrainByPrefix", ")", ")", ")", "{", "if", "(", "$", "this", "->", "DBDebug", ")", "{", "throw", "new", "DatabaseException", "(", "'This feature is not available for the database you are using.'", ")", ";", "}", "return", "false", ";", "}", "$", "this", "->", "dataCache", "[", "'table_names'", "]", "=", "[", "]", ";", "$", "query", "=", "$", "this", "->", "query", "(", "$", "sql", ")", ";", "foreach", "(", "$", "query", "->", "getResultArray", "(", ")", "as", "$", "row", ")", "{", "// Do we know from which column to get the table name?", "if", "(", "!", "isset", "(", "$", "key", ")", ")", "{", "if", "(", "isset", "(", "$", "row", "[", "'table_name'", "]", ")", ")", "{", "$", "key", "=", "'table_name'", ";", "}", "elseif", "(", "isset", "(", "$", "row", "[", "'TABLE_NAME'", "]", ")", ")", "{", "$", "key", "=", "'TABLE_NAME'", ";", "}", "else", "{", "/* We have no other choice but to just get the first element's key.\n\t\t\t\t\t * Due to array_shift() accepting its argument by reference, if\n\t\t\t\t\t * E_STRICT is on, this would trigger a warning. So we'll have to\n\t\t\t\t\t * assign it first.\n\t\t\t\t\t */", "$", "key", "=", "array_keys", "(", "$", "row", ")", ";", "$", "key", "=", "array_shift", "(", "$", "key", ")", ";", "}", "}", "$", "this", "->", "dataCache", "[", "'table_names'", "]", "[", "]", "=", "$", "row", "[", "$", "key", "]", ";", "}", "return", "$", "this", "->", "dataCache", "[", "'table_names'", "]", ";", "}"], "docstring": "Returns an array of table names\n\n@param  boolean $constrainByPrefix = FALSE\n@return boolean|array\n@throws \\CodeIgniter\\Database\\Exceptions\\DatabaseException", "docstring_tokens": ["Returns", "an", "array", "of", "table", "names"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/BaseConnection.php#L1514-L1563", "partition": "test"}
{"repo": "wp-cli/i18n-command", "path": "src/MakeJsonCommand.php", "func_name": "MakeJsonCommand.remove_js_strings_from_po_file", "original_string": "protected function remove_js_strings_from_po_file( $source_file ) {\n\t\t/** @var Translations[] $mapping */\n\t\t$translations = new Translations();\n\n\t\tPoExtractor::fromFile( $source_file, $translations );\n\n\t\tforeach ( $translations->getArrayCopy() as $translation ) {\n\t\t\t/** @var Translation $translation */\n\n\t\t\tif ( ! $translation->hasReferences() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tforeach ( $translation->getReferences() as $reference ) {\n\t\t\t\t$file = $reference[0];\n\n\t\t\t\tif ( substr( $file, - 3 ) !== '.js' ) {\n\t\t\t\t\tcontinue 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tunset( $translations[ $translation->getId() ] );\n\t\t}\n\n\t\treturn PoGenerator::toFile( $translations, $source_file );\n\t}", "language": "php", "code": "protected function remove_js_strings_from_po_file( $source_file ) {\n\t\t/** @var Translations[] $mapping */\n\t\t$translations = new Translations();\n\n\t\tPoExtractor::fromFile( $source_file, $translations );\n\n\t\tforeach ( $translations->getArrayCopy() as $translation ) {\n\t\t\t/** @var Translation $translation */\n\n\t\t\tif ( ! $translation->hasReferences() ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tforeach ( $translation->getReferences() as $reference ) {\n\t\t\t\t$file = $reference[0];\n\n\t\t\t\tif ( substr( $file, - 3 ) !== '.js' ) {\n\t\t\t\t\tcontinue 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tunset( $translations[ $translation->getId() ] );\n\t\t}\n\n\t\treturn PoGenerator::toFile( $translations, $source_file );\n\t}", "code_tokens": ["protected", "function", "remove_js_strings_from_po_file", "(", "$", "source_file", ")", "{", "/** @var Translations[] $mapping */", "$", "translations", "=", "new", "Translations", "(", ")", ";", "PoExtractor", "::", "fromFile", "(", "$", "source_file", ",", "$", "translations", ")", ";", "foreach", "(", "$", "translations", "->", "getArrayCopy", "(", ")", "as", "$", "translation", ")", "{", "/** @var Translation $translation */", "if", "(", "!", "$", "translation", "->", "hasReferences", "(", ")", ")", "{", "continue", ";", "}", "foreach", "(", "$", "translation", "->", "getReferences", "(", ")", "as", "$", "reference", ")", "{", "$", "file", "=", "$", "reference", "[", "0", "]", ";", "if", "(", "substr", "(", "$", "file", ",", "-", "3", ")", "!==", "'.js'", ")", "{", "continue", "2", ";", "}", "}", "unset", "(", "$", "translations", "[", "$", "translation", "->", "getId", "(", ")", "]", ")", ";", "}", "return", "PoGenerator", "::", "toFile", "(", "$", "translations", ",", "$", "source_file", ")", ";", "}"], "docstring": "Removes strings from PO file that only occur in JavaScript file.\n\n@param string $source_file Path to the PO file.\n@return bool True on success, false otherwise.", "docstring_tokens": ["Removes", "strings", "from", "PO", "file", "that", "only", "occur", "in", "JavaScript", "file", "."], "sha": "e52a9a602772339a0f844bd5e9a9ac8cc8b490ea", "url": "https://github.com/wp-cli/i18n-command/blob/e52a9a602772339a0f844bd5e9a9ac8cc8b490ea/src/MakeJsonCommand.php#L228-L253", "partition": "test"}
{"repo": "kitpages/KitpagesCmsBundle", "path": "Entity/Page.php", "func_name": "Page.isPage", "original_string": "public function isPage(Page $page = null)\n    {\n        return null !== $page && $this->getId() === $page->getId();\n    }", "language": "php", "code": "public function isPage(Page $page = null)\n    {\n        return null !== $page && $this->getId() === $page->getId();\n    }", "code_tokens": ["public", "function", "isPage", "(", "Page", "$", "page", "=", "null", ")", "{", "return", "null", "!==", "$", "page", "&&", "$", "this", "->", "getId", "(", ")", "===", "$", "page", "->", "getId", "(", ")", ";", "}"], "docstring": "Tells if the the given page is this page.\n\nUseful when not hydrating all fields.\n\n@param Page $Page\n@return Boolean", "docstring_tokens": ["Tells", "if", "the", "the", "given", "page", "is", "this", "page", "."], "sha": "ae950dd4f4adb401644805f9f5a971ab34993c02", "url": "https://github.com/kitpages/KitpagesCmsBundle/blob/ae950dd4f4adb401644805f9f5a971ab34993c02/Entity/Page.php#L818-L821", "partition": "test"}
{"repo": "oxygen-cms/data", "path": "src/Validation/Laravel/DoctrinePresenceVerifier.php", "func_name": "DoctrinePresenceVerifier.createCountQuery", "original_string": "protected function createCountQuery($collection, $alias = 'o') {\n        return $this->getEntityManager()->createQueryBuilder()\n            ->select('COUNT(' . $alias . ')')\n            ->from($collection, $alias);\n    }", "language": "php", "code": "protected function createCountQuery($collection, $alias = 'o') {\n        return $this->getEntityManager()->createQueryBuilder()\n            ->select('COUNT(' . $alias . ')')\n            ->from($collection, $alias);\n    }", "code_tokens": ["protected", "function", "createCountQuery", "(", "$", "collection", ",", "$", "alias", "=", "'o'", ")", "{", "return", "$", "this", "->", "getEntityManager", "(", ")", "->", "createQueryBuilder", "(", ")", "->", "select", "(", "'COUNT('", ".", "$", "alias", ".", "')'", ")", "->", "from", "(", "$", "collection", ",", "$", "alias", ")", ";", "}"], "docstring": "Creates a query builder.\n\n@param string $collection\n@param string $alias\n@return QueryBuilder", "docstring_tokens": ["Creates", "a", "query", "builder", "."], "sha": "8783d4dee75805a9dcbdcf932e12328ee0224865", "url": "https://github.com/oxygen-cms/data/blob/8783d4dee75805a9dcbdcf932e12328ee0224865/src/Validation/Laravel/DoctrinePresenceVerifier.php#L135-L139", "partition": "test"}
{"repo": "RevisionTen/forms", "path": "Handler/FormShiftItemHandler.php", "func_name": "FormShiftItemHandler.up", "original_string": "private static function up(array $array, int $item): array\n    {\n        if ($item > 0 && $item < \\count($array)) {\n            $b = \\array_slice($array, 0, $item - 1, true);\n            $b[] = $array[$item];\n            $b[] = $array[$item - 1];\n            $b += \\array_slice($array, $item + 1, \\count($array), true);\n\n            return $b;\n        }\n\n        return $array;\n    }", "language": "php", "code": "private static function up(array $array, int $item): array\n    {\n        if ($item > 0 && $item < \\count($array)) {\n            $b = \\array_slice($array, 0, $item - 1, true);\n            $b[] = $array[$item];\n            $b[] = $array[$item - 1];\n            $b += \\array_slice($array, $item + 1, \\count($array), true);\n\n            return $b;\n        }\n\n        return $array;\n    }", "code_tokens": ["private", "static", "function", "up", "(", "array", "$", "array", ",", "int", "$", "item", ")", ":", "array", "{", "if", "(", "$", "item", ">", "0", "&&", "$", "item", "<", "\\", "count", "(", "$", "array", ")", ")", "{", "$", "b", "=", "\\", "array_slice", "(", "$", "array", ",", "0", ",", "$", "item", "-", "1", ",", "true", ")", ";", "$", "b", "[", "]", "=", "$", "array", "[", "$", "item", "]", ";", "$", "b", "[", "]", "=", "$", "array", "[", "$", "item", "-", "1", "]", ";", "$", "b", "+=", "\\", "array_slice", "(", "$", "array", ",", "$", "item", "+", "1", ",", "\\", "count", "(", "$", "array", ")", ",", "true", ")", ";", "return", "$", "b", ";", "}", "return", "$", "array", ";", "}"], "docstring": "Shifts an item in an array one up.\n\n@param array $array\n@param int   $item\n\n@return array", "docstring_tokens": ["Shifts", "an", "item", "in", "an", "array", "one", "up", "."], "sha": "248fdd562a3d1744d05a4f955ac759fa24389ef7", "url": "https://github.com/RevisionTen/forms/blob/248fdd562a3d1744d05a4f955ac759fa24389ef7/Handler/FormShiftItemHandler.php#L48-L60", "partition": "test"}
{"repo": "tekkla/core-toolbox", "path": "Core/Toolbox/Strings/Shorten.php", "func_name": "Shorten.shorten", "original_string": "public function shorten(): string\n    {\n        // Shorten only what is longer than the length\n        if (strlen($this->string) < $this->length) {\n            return $this->string;\n        }\n\n        // Shorten string by length\n        $this->result = substr($this->string, 0, $this->length);\n\n        // Shorten further until last occurence of a ' '\n        $string = substr($this->result, 0, strrpos($this->result, $this->endstring));\n\n        if (!empty($this->wrap_url)) {\n            $addition = '<a href=\"' . $this->wrap_url . '\">' . $this->addition . '</a>';\n        }\n\n        // Add addition\n        $this->result .= $addition;\n\n        // Done.\n        return $this->result;\n    }", "language": "php", "code": "public function shorten(): string\n    {\n        // Shorten only what is longer than the length\n        if (strlen($this->string) < $this->length) {\n            return $this->string;\n        }\n\n        // Shorten string by length\n        $this->result = substr($this->string, 0, $this->length);\n\n        // Shorten further until last occurence of a ' '\n        $string = substr($this->result, 0, strrpos($this->result, $this->endstring));\n\n        if (!empty($this->wrap_url)) {\n            $addition = '<a href=\"' . $this->wrap_url . '\">' . $this->addition . '</a>';\n        }\n\n        // Add addition\n        $this->result .= $addition;\n\n        // Done.\n        return $this->result;\n    }", "code_tokens": ["public", "function", "shorten", "(", ")", ":", "string", "{", "// Shorten only what is longer than the length", "if", "(", "strlen", "(", "$", "this", "->", "string", ")", "<", "$", "this", "->", "length", ")", "{", "return", "$", "this", "->", "string", ";", "}", "// Shorten string by length", "$", "this", "->", "result", "=", "substr", "(", "$", "this", "->", "string", ",", "0", ",", "$", "this", "->", "length", ")", ";", "// Shorten further until last occurence of a ' '", "$", "string", "=", "substr", "(", "$", "this", "->", "result", ",", "0", ",", "strrpos", "(", "$", "this", "->", "result", ",", "$", "this", "->", "endstring", ")", ")", ";", "if", "(", "!", "empty", "(", "$", "this", "->", "wrap_url", ")", ")", "{", "$", "addition", "=", "'<a href=\"'", ".", "$", "this", "->", "wrap_url", ".", "'\">'", ".", "$", "this", "->", "addition", ".", "'</a>'", ";", "}", "// Add addition", "$", "this", "->", "result", ".=", "$", "addition", ";", "// Done.", "return", "$", "this", "->", "result", ";", "}"], "docstring": "Shortens a string to the given length and appends the additional string that can be wrapped by a link when a\nwrap url is set.\n\n@return string", "docstring_tokens": ["Shortens", "a", "string", "to", "the", "given", "length", "and", "appends", "the", "additional", "string", "that", "can", "be", "wrapped", "by", "a", "link", "when", "a", "wrap", "url", "is", "set", "."], "sha": "c21ad38c54ff57e7ce57dc01dbfa72b4005889e4", "url": "https://github.com/tekkla/core-toolbox/blob/c21ad38c54ff57e7ce57dc01dbfa72b4005889e4/Core/Toolbox/Strings/Shorten.php#L125-L147", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Log/Logger.php", "func_name": "Logger.cleanFileNames", "original_string": "protected function cleanFileNames(string $file): string\n\t{\n\t\t$file = str_replace(APPPATH, 'APPPATH/', $file);\n\t\t$file = str_replace(SYSTEMPATH, 'SYSTEMPATH/', $file);\n\t\t$file = str_replace(FCPATH, 'FCPATH/', $file);\n\n\t\treturn $file;\n\t}", "language": "php", "code": "protected function cleanFileNames(string $file): string\n\t{\n\t\t$file = str_replace(APPPATH, 'APPPATH/', $file);\n\t\t$file = str_replace(SYSTEMPATH, 'SYSTEMPATH/', $file);\n\t\t$file = str_replace(FCPATH, 'FCPATH/', $file);\n\n\t\treturn $file;\n\t}", "code_tokens": ["protected", "function", "cleanFileNames", "(", "string", "$", "file", ")", ":", "string", "{", "$", "file", "=", "str_replace", "(", "APPPATH", ",", "'APPPATH/'", ",", "$", "file", ")", ";", "$", "file", "=", "str_replace", "(", "SYSTEMPATH", ",", "'SYSTEMPATH/'", ",", "$", "file", ")", ";", "$", "file", "=", "str_replace", "(", "FCPATH", ",", "'FCPATH/'", ",", "$", "file", ")", ";", "return", "$", "file", ";", "}"], "docstring": "Cleans the paths of filenames by replacing APPPATH, SYSTEMPATH, FCPATH\nwith the actual var. i.e.\n\n/var/www/site/app/Controllers/Home.php\nbecomes:\nAPPPATH/Controllers/Home.php\n\n@param $file\n\n@return string", "docstring_tokens": ["Cleans", "the", "paths", "of", "filenames", "by", "replacing", "APPPATH", "SYSTEMPATH", "FCPATH", "with", "the", "actual", "var", ".", "i", ".", "e", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Log/Logger.php#L524-L531", "partition": "test"}
{"repo": "ipinfo/php", "path": "src/cache/Default.php", "func_name": "DefaultCache.manageSize", "original_string": "private function manageSize()\n  {\n    $overflow = count($this->element_queue) - $this->maxsize;\n    if ($overflow > 0) {\n        foreach (array_slice($this->element_queue, 0, $overflow) as $name) {\n          if ($this->cache->has($name)) {\n            $this->cache->delete($name);\n          }\n        }\n        $this->element_queue = array_slice($this->element_queue, $overflow);\n    }\n  }", "language": "php", "code": "private function manageSize()\n  {\n    $overflow = count($this->element_queue) - $this->maxsize;\n    if ($overflow > 0) {\n        foreach (array_slice($this->element_queue, 0, $overflow) as $name) {\n          if ($this->cache->has($name)) {\n            $this->cache->delete($name);\n          }\n        }\n        $this->element_queue = array_slice($this->element_queue, $overflow);\n    }\n  }", "code_tokens": ["private", "function", "manageSize", "(", ")", "{", "$", "overflow", "=", "count", "(", "$", "this", "->", "element_queue", ")", "-", "$", "this", "->", "maxsize", ";", "if", "(", "$", "overflow", ">", "0", ")", "{", "foreach", "(", "array_slice", "(", "$", "this", "->", "element_queue", ",", "0", ",", "$", "overflow", ")", "as", "$", "name", ")", "{", "if", "(", "$", "this", "->", "cache", "->", "has", "(", "$", "name", ")", ")", "{", "$", "this", "->", "cache", "->", "delete", "(", "$", "name", ")", ";", "}", "}", "$", "this", "->", "element_queue", "=", "array_slice", "(", "$", "this", "->", "element_queue", ",", "$", "overflow", ")", ";", "}", "}"], "docstring": "If cache maxsize has been reached, remove oldest elements until limit is reached.", "docstring_tokens": ["If", "cache", "maxsize", "has", "been", "reached", "remove", "oldest", "elements", "until", "limit", "is", "reached", "."], "sha": "87e5b3e059246bd8c241b006c0e7354d2beef5cd", "url": "https://github.com/ipinfo/php/blob/87e5b3e059246bd8c241b006c0e7354d2beef5cd/src/cache/Default.php#L66-L77", "partition": "test"}
{"repo": "mbezhanov/silex-alice-data-fixtures", "path": "src/FixturesLoader.php", "func_name": "FixturesLoader.loadFromIterator", "original_string": "private function loadFromIterator(\\Iterator $iterator)\n    {\n        /* @var \\SplFileInfo[] $iterator */\n        foreach ($iterator as $file) {\n            if ($file->getFilename() === 'fixtures.yml') {\n                $this->addFixture($file->getPathname());\n            }\n        }\n    }", "language": "php", "code": "private function loadFromIterator(\\Iterator $iterator)\n    {\n        /* @var \\SplFileInfo[] $iterator */\n        foreach ($iterator as $file) {\n            if ($file->getFilename() === 'fixtures.yml') {\n                $this->addFixture($file->getPathname());\n            }\n        }\n    }", "code_tokens": ["private", "function", "loadFromIterator", "(", "\\", "Iterator", "$", "iterator", ")", "{", "/* @var \\SplFileInfo[] $iterator */", "foreach", "(", "$", "iterator", "as", "$", "file", ")", "{", "if", "(", "$", "file", "->", "getFilename", "(", ")", "===", "'fixtures.yml'", ")", "{", "$", "this", "->", "addFixture", "(", "$", "file", "->", "getPathname", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Load fixtures from YML files contained in iterator.\n\n@param \\Iterator $iterator Iterator over files from which fixtures should be loaded.", "docstring_tokens": ["Load", "fixtures", "from", "YML", "files", "contained", "in", "iterator", "."], "sha": "ae4280bb7c27d117484c5781e096bbfa44402b63", "url": "https://github.com/mbezhanov/silex-alice-data-fixtures/blob/ae4280bb7c27d117484c5781e096bbfa44402b63/src/FixturesLoader.php#L59-L67", "partition": "test"}
{"repo": "miBadger/miBadger.File", "path": "src/File.php", "func_name": "File.removeDirectory", "original_string": "public function removeDirectory($recursive = false)\n\t{\n\t\tif (!$recursive) {\n\t\t\treturn rmdir($this->path);\n\t\t}\n\n\t\tforeach (new \\RecursiveIteratorIterator(new \\RecursiveDirectoryIterator($this->path, \\FilesystemIterator::SKIP_DOTS), \\RecursiveIteratorIterator::CHILD_FIRST) as $path) {\n\t\t\t$path->isFile() ? unlink($path->getPathname()) : rmdir($path->getPathname());\n\t\t}\n\n\t\treturn true;\n\t}", "language": "php", "code": "public function removeDirectory($recursive = false)\n\t{\n\t\tif (!$recursive) {\n\t\t\treturn rmdir($this->path);\n\t\t}\n\n\t\tforeach (new \\RecursiveIteratorIterator(new \\RecursiveDirectoryIterator($this->path, \\FilesystemIterator::SKIP_DOTS), \\RecursiveIteratorIterator::CHILD_FIRST) as $path) {\n\t\t\t$path->isFile() ? unlink($path->getPathname()) : rmdir($path->getPathname());\n\t\t}\n\n\t\treturn true;\n\t}", "code_tokens": ["public", "function", "removeDirectory", "(", "$", "recursive", "=", "false", ")", "{", "if", "(", "!", "$", "recursive", ")", "{", "return", "rmdir", "(", "$", "this", "->", "path", ")", ";", "}", "foreach", "(", "new", "\\", "RecursiveIteratorIterator", "(", "new", "\\", "RecursiveDirectoryIterator", "(", "$", "this", "->", "path", ",", "\\", "FilesystemIterator", "::", "SKIP_DOTS", ")", ",", "\\", "RecursiveIteratorIterator", "::", "CHILD_FIRST", ")", "as", "$", "path", ")", "{", "$", "path", "->", "isFile", "(", ")", "?", "unlink", "(", "$", "path", "->", "getPathname", "(", ")", ")", ":", "rmdir", "(", "$", "path", "->", "getPathname", "(", ")", ")", ";", "}", "return", "true", ";", "}"], "docstring": "Returns true if the directory is succesfully removed.\n\n@param bool $recursive = false\n@return bool true if the directory is succesfully removed.", "docstring_tokens": ["Returns", "true", "if", "the", "directory", "is", "succesfully", "removed", "."], "sha": "5b681fe3345ab68f0bda151e5f85a33f8bbca24e", "url": "https://github.com/miBadger/miBadger.File/blob/5b681fe3345ab68f0bda151e5f85a33f8bbca24e/src/File.php#L338-L349", "partition": "test"}
{"repo": "ekyna/CoreBundle", "path": "Uploader/Uploader.php", "func_name": "Uploader.isDistant", "original_string": "private function isDistant($key)\n    {\n        /** @noinspection PhpUnusedLocalVariableInspection */\n        list($prefix, $args) = $this->mountManager->filterPrefix([$key]);\n\n        /** @var \\League\\Flysystem\\FileSystem $fs */\n        $fs = $this->mountManager->getFilesystem($prefix);\n        $adapter = $fs->getAdapter();\n\n        // Try reconnection\n        if ($adapter instanceof AbstractFtpAdapter) {\n            return true;\n        }\n\n        return false;\n    }", "language": "php", "code": "private function isDistant($key)\n    {\n        /** @noinspection PhpUnusedLocalVariableInspection */\n        list($prefix, $args) = $this->mountManager->filterPrefix([$key]);\n\n        /** @var \\League\\Flysystem\\FileSystem $fs */\n        $fs = $this->mountManager->getFilesystem($prefix);\n        $adapter = $fs->getAdapter();\n\n        // Try reconnection\n        if ($adapter instanceof AbstractFtpAdapter) {\n            return true;\n        }\n\n        return false;\n    }", "code_tokens": ["private", "function", "isDistant", "(", "$", "key", ")", "{", "/** @noinspection PhpUnusedLocalVariableInspection */", "list", "(", "$", "prefix", ",", "$", "args", ")", "=", "$", "this", "->", "mountManager", "->", "filterPrefix", "(", "[", "$", "key", "]", ")", ";", "/** @var \\League\\Flysystem\\FileSystem $fs */", "$", "fs", "=", "$", "this", "->", "mountManager", "->", "getFilesystem", "(", "$", "prefix", ")", ";", "$", "adapter", "=", "$", "fs", "->", "getAdapter", "(", ")", ";", "// Try reconnection", "if", "(", "$", "adapter", "instanceof", "AbstractFtpAdapter", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Returns whether the key is distant.\n\n@param string $key\n@return bool", "docstring_tokens": ["Returns", "whether", "the", "key", "is", "distant", "."], "sha": "a471324311591489e7cebdb805921dd85ba104ec", "url": "https://github.com/ekyna/CoreBundle/blob/a471324311591489e7cebdb805921dd85ba104ec/Uploader/Uploader.php#L275-L290", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-common/src/Common/Internal/RestProxy.php", "func_name": "RestProxy.addOptionalHeader", "original_string": "protected function addOptionalHeader(array &$headers, $key, $value)\n    {\n        Validate::isArray($headers, 'headers');\n        Validate::canCastAsString($key, 'key');\n        Validate::canCastAsString($value, 'value');\n\n        if (!is_null($value) && Resources::EMPTY_STRING !== $value) {\n            $headers[$key] = $value;\n        }\n    }", "language": "php", "code": "protected function addOptionalHeader(array &$headers, $key, $value)\n    {\n        Validate::isArray($headers, 'headers');\n        Validate::canCastAsString($key, 'key');\n        Validate::canCastAsString($value, 'value');\n\n        if (!is_null($value) && Resources::EMPTY_STRING !== $value) {\n            $headers[$key] = $value;\n        }\n    }", "code_tokens": ["protected", "function", "addOptionalHeader", "(", "array", "&", "$", "headers", ",", "$", "key", ",", "$", "value", ")", "{", "Validate", "::", "isArray", "(", "$", "headers", ",", "'headers'", ")", ";", "Validate", "::", "canCastAsString", "(", "$", "key", ",", "'key'", ")", ";", "Validate", "::", "canCastAsString", "(", "$", "value", ",", "'value'", ")", ";", "if", "(", "!", "is_null", "(", "$", "value", ")", "&&", "Resources", "::", "EMPTY_STRING", "!==", "$", "value", ")", "{", "$", "headers", "[", "$", "key", "]", "=", "$", "value", ";", "}", "}"], "docstring": "Adds optional header.\n\nDoesn't add the value if it satisfies empty().\n\n@param array  &$headers The HTTP header parameters.\n@param string $key      The HTTP header name.\n@param string $value    The HTTP header value.\n\n@return void", "docstring_tokens": ["Adds", "optional", "header", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-common/src/Common/Internal/RestProxy.php#L121-L130", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Services/Directions/Directions.php", "func_name": "Directions.buildDirectionsRoute", "original_string": "protected function buildDirectionsRoute(\\stdClass $directionsRoute)\n    {\n        $bound = new Bound(\n            new Coordinate($directionsRoute->bounds->southwest->lat, $directionsRoute->bounds->southwest->lng),\n            new Coordinate($directionsRoute->bounds->northeast->lat, $directionsRoute->bounds->northeast->lng)\n        );\n\n        // @see https://github.com/egeloen/IvoryGoogleMapBundle/issues/72\n        // @codeCoverageIgnoreStart\n        if (!isset($directionsRoute->copyrights)) {\n            $directionsRoute->copyrights = '';\n        }\n\n        if (!isset($directionsRoute->summary)) {\n            $directionsRoute->summary = '';\n        }\n        // @codeCoverageIgnoreEnd\n\n        $summary = $directionsRoute->summary;\n        $copyrights = $directionsRoute->copyrights;\n\n        $directionsLegs = $this->buildDirectionsLegs($directionsRoute->legs);\n        $overviewPolyline = new EncodedPolyline($directionsRoute->overview_polyline->points);\n\n        // The warnings & waypoint_order properties can not be defined in the xml format.\n        if (!isset($directionsRoute->warnings)) {\n            $directionsRoute->warnings = array();\n        }\n\n        if (!isset($directionsRoute->waypoint_order)) {\n            $directionsRoute->waypoint_order = array();\n        }\n\n        $warnings = $directionsRoute->warnings;\n        $waypointOrder = $directionsRoute->waypoint_order;\n\n        return new DirectionsRoute(\n            $bound,\n            $copyrights,\n            $directionsLegs,\n            $overviewPolyline,\n            $summary,\n            $warnings,\n            $waypointOrder\n        );\n    }", "language": "php", "code": "protected function buildDirectionsRoute(\\stdClass $directionsRoute)\n    {\n        $bound = new Bound(\n            new Coordinate($directionsRoute->bounds->southwest->lat, $directionsRoute->bounds->southwest->lng),\n            new Coordinate($directionsRoute->bounds->northeast->lat, $directionsRoute->bounds->northeast->lng)\n        );\n\n        // @see https://github.com/egeloen/IvoryGoogleMapBundle/issues/72\n        // @codeCoverageIgnoreStart\n        if (!isset($directionsRoute->copyrights)) {\n            $directionsRoute->copyrights = '';\n        }\n\n        if (!isset($directionsRoute->summary)) {\n            $directionsRoute->summary = '';\n        }\n        // @codeCoverageIgnoreEnd\n\n        $summary = $directionsRoute->summary;\n        $copyrights = $directionsRoute->copyrights;\n\n        $directionsLegs = $this->buildDirectionsLegs($directionsRoute->legs);\n        $overviewPolyline = new EncodedPolyline($directionsRoute->overview_polyline->points);\n\n        // The warnings & waypoint_order properties can not be defined in the xml format.\n        if (!isset($directionsRoute->warnings)) {\n            $directionsRoute->warnings = array();\n        }\n\n        if (!isset($directionsRoute->waypoint_order)) {\n            $directionsRoute->waypoint_order = array();\n        }\n\n        $warnings = $directionsRoute->warnings;\n        $waypointOrder = $directionsRoute->waypoint_order;\n\n        return new DirectionsRoute(\n            $bound,\n            $copyrights,\n            $directionsLegs,\n            $overviewPolyline,\n            $summary,\n            $warnings,\n            $waypointOrder\n        );\n    }", "code_tokens": ["protected", "function", "buildDirectionsRoute", "(", "\\", "stdClass", "$", "directionsRoute", ")", "{", "$", "bound", "=", "new", "Bound", "(", "new", "Coordinate", "(", "$", "directionsRoute", "->", "bounds", "->", "southwest", "->", "lat", ",", "$", "directionsRoute", "->", "bounds", "->", "southwest", "->", "lng", ")", ",", "new", "Coordinate", "(", "$", "directionsRoute", "->", "bounds", "->", "northeast", "->", "lat", ",", "$", "directionsRoute", "->", "bounds", "->", "northeast", "->", "lng", ")", ")", ";", "// @see https://github.com/egeloen/IvoryGoogleMapBundle/issues/72", "// @codeCoverageIgnoreStart", "if", "(", "!", "isset", "(", "$", "directionsRoute", "->", "copyrights", ")", ")", "{", "$", "directionsRoute", "->", "copyrights", "=", "''", ";", "}", "if", "(", "!", "isset", "(", "$", "directionsRoute", "->", "summary", ")", ")", "{", "$", "directionsRoute", "->", "summary", "=", "''", ";", "}", "// @codeCoverageIgnoreEnd", "$", "summary", "=", "$", "directionsRoute", "->", "summary", ";", "$", "copyrights", "=", "$", "directionsRoute", "->", "copyrights", ";", "$", "directionsLegs", "=", "$", "this", "->", "buildDirectionsLegs", "(", "$", "directionsRoute", "->", "legs", ")", ";", "$", "overviewPolyline", "=", "new", "EncodedPolyline", "(", "$", "directionsRoute", "->", "overview_polyline", "->", "points", ")", ";", "// The warnings & waypoint_order properties can not be defined in the xml format.", "if", "(", "!", "isset", "(", "$", "directionsRoute", "->", "warnings", ")", ")", "{", "$", "directionsRoute", "->", "warnings", "=", "array", "(", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "directionsRoute", "->", "waypoint_order", ")", ")", "{", "$", "directionsRoute", "->", "waypoint_order", "=", "array", "(", ")", ";", "}", "$", "warnings", "=", "$", "directionsRoute", "->", "warnings", ";", "$", "waypointOrder", "=", "$", "directionsRoute", "->", "waypoint_order", ";", "return", "new", "DirectionsRoute", "(", "$", "bound", ",", "$", "copyrights", ",", "$", "directionsLegs", ",", "$", "overviewPolyline", ",", "$", "summary", ",", "$", "warnings", ",", "$", "waypointOrder", ")", ";", "}"], "docstring": "Builds the directions route according to the normalized directions API route.\n\n@param \\stdClass $directionsRoute The normalized directions route.\n\n@return \\Ivory\\GoogleMap\\Services\\Directions\\DirectionsRoute The builded directions route.", "docstring_tokens": ["Builds", "the", "directions", "route", "according", "to", "the", "normalized", "directions", "API", "route", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Services/Directions/Directions.php#L256-L301", "partition": "test"}
{"repo": "yiisoft/yii2-queue", "path": "src/drivers/db/Queue.php", "func_name": "Queue.moveExpired", "original_string": "private function moveExpired()\n    {\n        if ($this->reserveTime !== time()) {\n            $this->reserveTime = time();\n            $this->db->createCommand()->update(\n                $this->tableName,\n                ['reserved_at' => null],\n                '[[reserved_at]] < :time - [[ttr]] and [[done_at]] is null',\n                [':time' => $this->reserveTime]\n            )->execute();\n        }\n    }", "language": "php", "code": "private function moveExpired()\n    {\n        if ($this->reserveTime !== time()) {\n            $this->reserveTime = time();\n            $this->db->createCommand()->update(\n                $this->tableName,\n                ['reserved_at' => null],\n                '[[reserved_at]] < :time - [[ttr]] and [[done_at]] is null',\n                [':time' => $this->reserveTime]\n            )->execute();\n        }\n    }", "code_tokens": ["private", "function", "moveExpired", "(", ")", "{", "if", "(", "$", "this", "->", "reserveTime", "!==", "time", "(", ")", ")", "{", "$", "this", "->", "reserveTime", "=", "time", "(", ")", ";", "$", "this", "->", "db", "->", "createCommand", "(", ")", "->", "update", "(", "$", "this", "->", "tableName", ",", "[", "'reserved_at'", "=>", "null", "]", ",", "'[[reserved_at]] < :time - [[ttr]] and [[done_at]] is null'", ",", "[", "':time'", "=>", "$", "this", "->", "reserveTime", "]", ")", "->", "execute", "(", ")", ";", "}", "}"], "docstring": "Moves expired messages into waiting list.", "docstring_tokens": ["Moves", "expired", "messages", "into", "waiting", "list", "."], "sha": "c5e75f9c4a8c38f5abd387165e16945da32b84dc", "url": "https://github.com/yiisoft/yii2-queue/blob/c5e75f9c4a8c38f5abd387165e16945da32b84dc/src/drivers/db/Queue.php#L239-L250", "partition": "test"}
{"repo": "iNem0o/PicORM", "path": "src/PicORM/Collection.php", "func_name": "Collection.fetch", "original_string": "public function fetch()\n    {\n        $modelName = $this->_className;\n\n        // execute fetch query\n        $query = $this->_dataSource->prepare($this->_queryHelper->buildQuery());\n        $query->execute($this->_queryHelper->getWhereParamsValues());\n\n        // check for mysql error\n        $errorcode = $query->errorInfo();\n        if ($errorcode[0] != \"00000\") {\n            throw new Exception($errorcode[2]);\n        }\n\n        // fetch query and hydrate models\n        $fetch = $query->fetchAll(\\PDO::FETCH_ASSOC);\n        foreach ($fetch as &$unRes) {\n            /** @var $object \\PicORM\\Model */\n            $object = new $modelName();\n            $object->hydrate($unRes, false);\n            $unRes = $object;\n        }\n\n        // configure collection after fetch\n        $this->isFetched = true;\n        $this->models    = $fetch;\n\n        // if pagination used grab the total found model\n        if ($this->_usePagination) {\n            $this->_paginationFoundModels = $this->queryFoundModels();\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function fetch()\n    {\n        $modelName = $this->_className;\n\n        // execute fetch query\n        $query = $this->_dataSource->prepare($this->_queryHelper->buildQuery());\n        $query->execute($this->_queryHelper->getWhereParamsValues());\n\n        // check for mysql error\n        $errorcode = $query->errorInfo();\n        if ($errorcode[0] != \"00000\") {\n            throw new Exception($errorcode[2]);\n        }\n\n        // fetch query and hydrate models\n        $fetch = $query->fetchAll(\\PDO::FETCH_ASSOC);\n        foreach ($fetch as &$unRes) {\n            /** @var $object \\PicORM\\Model */\n            $object = new $modelName();\n            $object->hydrate($unRes, false);\n            $unRes = $object;\n        }\n\n        // configure collection after fetch\n        $this->isFetched = true;\n        $this->models    = $fetch;\n\n        // if pagination used grab the total found model\n        if ($this->_usePagination) {\n            $this->_paginationFoundModels = $this->queryFoundModels();\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "fetch", "(", ")", "{", "$", "modelName", "=", "$", "this", "->", "_className", ";", "// execute fetch query", "$", "query", "=", "$", "this", "->", "_dataSource", "->", "prepare", "(", "$", "this", "->", "_queryHelper", "->", "buildQuery", "(", ")", ")", ";", "$", "query", "->", "execute", "(", "$", "this", "->", "_queryHelper", "->", "getWhereParamsValues", "(", ")", ")", ";", "// check for mysql error", "$", "errorcode", "=", "$", "query", "->", "errorInfo", "(", ")", ";", "if", "(", "$", "errorcode", "[", "0", "]", "!=", "\"00000\"", ")", "{", "throw", "new", "Exception", "(", "$", "errorcode", "[", "2", "]", ")", ";", "}", "// fetch query and hydrate models", "$", "fetch", "=", "$", "query", "->", "fetchAll", "(", "\\", "PDO", "::", "FETCH_ASSOC", ")", ";", "foreach", "(", "$", "fetch", "as", "&", "$", "unRes", ")", "{", "/** @var $object \\PicORM\\Model */", "$", "object", "=", "new", "$", "modelName", "(", ")", ";", "$", "object", "->", "hydrate", "(", "$", "unRes", ",", "false", ")", ";", "$", "unRes", "=", "$", "object", ";", "}", "// configure collection after fetch", "$", "this", "->", "isFetched", "=", "true", ";", "$", "this", "->", "models", "=", "$", "fetch", ";", "// if pagination used grab the total found model", "if", "(", "$", "this", "->", "_usePagination", ")", "{", "$", "this", "->", "_paginationFoundModels", "=", "$", "this", "->", "queryFoundModels", "(", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Execute query and fetch models from database\n\n@return $this\n@throws Exception", "docstring_tokens": ["Execute", "query", "and", "fetch", "models", "from", "database"], "sha": "0bf6c5b359d5fcb098b43d3ea3bf99839bee8b9f", "url": "https://github.com/iNem0o/PicORM/blob/0bf6c5b359d5fcb098b43d3ea3bf99839bee8b9f/src/PicORM/Collection.php#L152-L185", "partition": "test"}
{"repo": "VitexSoftware/EaseFramework", "path": "src/Ease/Logger/ToConsole.php", "func_name": "ToConsole.getTypeColor", "original_string": "public static function getTypeColor($type)\n    {\n        switch ($type) {\n            case 'mail':                       // Envelope\n                $color = 'blue';\n                break;\n            case 'warning':                    // Vyk\u0159i\u010dn\u00edk v troj\u016fheln\u00edku\n                $color = 'yellow';\n                break;\n            case 'error':                      // Lebka\n                $color = 'red';\n                break;\n            case 'debug':                      // Kyti\u010dka\n                $color = 'magenta';\n                break;\n            case 'success':                    // Kyti\u010dka\n                $color = 'green';\n                break;\n            default:                           // i v krou\u017eku\n                $color = 'white';\n                break;\n        }\n        return $color;\n    }", "language": "php", "code": "public static function getTypeColor($type)\n    {\n        switch ($type) {\n            case 'mail':                       // Envelope\n                $color = 'blue';\n                break;\n            case 'warning':                    // Vyk\u0159i\u010dn\u00edk v troj\u016fheln\u00edku\n                $color = 'yellow';\n                break;\n            case 'error':                      // Lebka\n                $color = 'red';\n                break;\n            case 'debug':                      // Kyti\u010dka\n                $color = 'magenta';\n                break;\n            case 'success':                    // Kyti\u010dka\n                $color = 'green';\n                break;\n            default:                           // i v krou\u017eku\n                $color = 'white';\n                break;\n        }\n        return $color;\n    }", "code_tokens": ["public", "static", "function", "getTypeColor", "(", "$", "type", ")", "{", "switch", "(", "$", "type", ")", "{", "case", "'mail'", ":", "// Envelope", "$", "color", "=", "'blue'", ";", "break", ";", "case", "'warning'", ":", "// Vyk\u0159i\u010dn\u00edk v troj\u016fheln\u00edku", "$", "color", "=", "'yellow'", ";", "break", ";", "case", "'error'", ":", "// Lebka", "$", "color", "=", "'red'", ";", "break", ";", "case", "'debug'", ":", "// Kyti\u010dka", "$", "color", "=", "'magenta'", ";", "break", ";", "case", "'success'", ":", "// Kyti\u010dka", "$", "color", "=", "'green'", ";", "break", ";", "default", ":", "// i v krou\u017eku", "$", "color", "=", "'white'", ";", "break", ";", "}", "return", "$", "color", ";", "}"], "docstring": "Get color code for given message\n\n@param string $type", "docstring_tokens": ["Get", "color", "code", "for", "given", "message"], "sha": "700693949ee6c858d40365c6d3c3825e8a742397", "url": "https://github.com/VitexSoftware/EaseFramework/blob/700693949ee6c858d40365c6d3c3825e8a742397/src/Ease/Logger/ToConsole.php#L123-L146", "partition": "test"}
{"repo": "OXIDprojects/oxid-module-internals", "path": "Core/InternalModule.php", "func_name": "InternalModule.checkModuleSettings", "original_string": "public function checkModuleSettings()\n    {\n        $aDatabaseSettings = $this->getModuleSettings();\n        $aDatabaseSettings = is_array($aDatabaseSettings) ? $aDatabaseSettings : [];\n        $list = [];\n        foreach ($aDatabaseSettings as $v) {\n            $list[$v['OXVARNAME']] = $v['OXVARTYPE'];\n        }\n\n        $aResult = $this->toResult($list);\n        return $aResult;\n    }", "language": "php", "code": "public function checkModuleSettings()\n    {\n        $aDatabaseSettings = $this->getModuleSettings();\n        $aDatabaseSettings = is_array($aDatabaseSettings) ? $aDatabaseSettings : [];\n        $list = [];\n        foreach ($aDatabaseSettings as $v) {\n            $list[$v['OXVARNAME']] = $v['OXVARTYPE'];\n        }\n\n        $aResult = $this->toResult($list);\n        return $aResult;\n    }", "code_tokens": ["public", "function", "checkModuleSettings", "(", ")", "{", "$", "aDatabaseSettings", "=", "$", "this", "->", "getModuleSettings", "(", ")", ";", "$", "aDatabaseSettings", "=", "is_array", "(", "$", "aDatabaseSettings", ")", "?", "$", "aDatabaseSettings", ":", "[", "]", ";", "$", "list", "=", "[", "]", ";", "foreach", "(", "$", "aDatabaseSettings", "as", "$", "v", ")", "{", "$", "list", "[", "$", "v", "[", "'OXVARNAME'", "]", "]", "=", "$", "v", "[", "'OXVARTYPE'", "]", ";", "}", "$", "aResult", "=", "$", "this", "->", "toResult", "(", "$", "list", ")", ";", "return", "$", "aResult", ";", "}"], "docstring": "Analyze settings in metadata ans settings.\n\n@return array", "docstring_tokens": ["Analyze", "settings", "in", "metadata", "ans", "settings", "."], "sha": "acfd0e6334b99b02c0f6ebcb738190511e89a4ee", "url": "https://github.com/OXIDprojects/oxid-module-internals/blob/acfd0e6334b99b02c0f6ebcb738190511e89a4ee/Core/InternalModule.php#L430-L441", "partition": "test"}
{"repo": "kernel64/JQueryAjaxBundle", "path": "Twig/JqueryAjaxExtension.php", "func_name": "JqueryAjaxExtension.remoteCall", "original_string": "public function remoteCall($options = array())\n    {\n        return function ($options) {\n            $type = isset($options['type']) ? $options['type'] : \"POST\";\n            $dataType = isset($options['dataType']) ? $options['dataType'] : \"html\";\n            $js = \"$.ajax({\n\t\t\t\t\t\t\turl: '\" . $options['url'] . \"',\n\t\t\t\t\t\t\ttype: '\" . $type . \"',\n\t\t\t\t\t\t\tdataType: '\" . $dataType . \"',\";\n            \n            if (isset($options['before'])) {\n                $before = str_replace('\"', \"'\", $options['before']);\n                $js .= \"beforeSend: function(){\" . $before . \"},\";\n            }\n            \n            $js .= \"success: function( data ){ $('\" . $options['update'] . \"').html(data);\";\n            \n            if (isset($options['after'])) {\n                $after = str_replace('\"', \"'\", $options['after']);\n                $js .= $after;\n            }\n            \n            $js .= \"}\";\n            \n            if (isset($options['complete'])) {\n                $complete = str_replace('\"', \"'\", $options['complete']);\n                $js .= \",complete: function(){\" . $complete . \"},\";\n            }\n            \n            $js .= \"});\";\n            \n            return $js;\n        };\n    }", "language": "php", "code": "public function remoteCall($options = array())\n    {\n        return function ($options) {\n            $type = isset($options['type']) ? $options['type'] : \"POST\";\n            $dataType = isset($options['dataType']) ? $options['dataType'] : \"html\";\n            $js = \"$.ajax({\n\t\t\t\t\t\t\turl: '\" . $options['url'] . \"',\n\t\t\t\t\t\t\ttype: '\" . $type . \"',\n\t\t\t\t\t\t\tdataType: '\" . $dataType . \"',\";\n            \n            if (isset($options['before'])) {\n                $before = str_replace('\"', \"'\", $options['before']);\n                $js .= \"beforeSend: function(){\" . $before . \"},\";\n            }\n            \n            $js .= \"success: function( data ){ $('\" . $options['update'] . \"').html(data);\";\n            \n            if (isset($options['after'])) {\n                $after = str_replace('\"', \"'\", $options['after']);\n                $js .= $after;\n            }\n            \n            $js .= \"}\";\n            \n            if (isset($options['complete'])) {\n                $complete = str_replace('\"', \"'\", $options['complete']);\n                $js .= \",complete: function(){\" . $complete . \"},\";\n            }\n            \n            $js .= \"});\";\n            \n            return $js;\n        };\n    }", "code_tokens": ["public", "function", "remoteCall", "(", "$", "options", "=", "array", "(", ")", ")", "{", "return", "function", "(", "$", "options", ")", "{", "$", "type", "=", "isset", "(", "$", "options", "[", "'type'", "]", ")", "?", "$", "options", "[", "'type'", "]", ":", "\"POST\"", ";", "$", "dataType", "=", "isset", "(", "$", "options", "[", "'dataType'", "]", ")", "?", "$", "options", "[", "'dataType'", "]", ":", "\"html\"", ";", "$", "js", "=", "\"$.ajax({\n\t\t\t\t\t\t\turl: '\"", ".", "$", "options", "[", "'url'", "]", ".", "\"',\n\t\t\t\t\t\t\ttype: '\"", ".", "$", "type", ".", "\"',\n\t\t\t\t\t\t\tdataType: '\"", ".", "$", "dataType", ".", "\"',\"", ";", "if", "(", "isset", "(", "$", "options", "[", "'before'", "]", ")", ")", "{", "$", "before", "=", "str_replace", "(", "'\"'", ",", "\"'\"", ",", "$", "options", "[", "'before'", "]", ")", ";", "$", "js", ".=", "\"beforeSend: function(){\"", ".", "$", "before", ".", "\"},\"", ";", "}", "$", "js", ".=", "\"success: function( data ){ $('\"", ".", "$", "options", "[", "'update'", "]", ".", "\"').html(data);\"", ";", "if", "(", "isset", "(", "$", "options", "[", "'after'", "]", ")", ")", "{", "$", "after", "=", "str_replace", "(", "'\"'", ",", "\"'\"", ",", "$", "options", "[", "'after'", "]", ")", ";", "$", "js", ".=", "$", "after", ";", "}", "$", "js", ".=", "\"}\"", ";", "if", "(", "isset", "(", "$", "options", "[", "'complete'", "]", ")", ")", "{", "$", "complete", "=", "str_replace", "(", "'\"'", ",", "\"'\"", ",", "$", "options", "[", "'complete'", "]", ")", ";", "$", "js", ".=", "\",complete: function(){\"", ".", "$", "complete", ".", "\"},\"", ";", "}", "$", "js", ".=", "\"});\"", ";", "return", "$", "js", ";", "}", ";", "}"], "docstring": "Generate Js function to send ajax request.\n\n@param array $options", "docstring_tokens": ["Generate", "Js", "function", "to", "send", "ajax", "request", "."], "sha": "ae2a161eb4528a4a4f7bfb8417f693fd880d1da7", "url": "https://github.com/kernel64/JQueryAjaxBundle/blob/ae2a161eb4528a4a4f7bfb8417f693fd880d1da7/Twig/JqueryAjaxExtension.php#L38-L71", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Overlays/MarkerCluster.php", "func_name": "MarkerCluster.setMarkers", "original_string": "public function setMarkers($markers)\n    {\n        $this->markers = array();\n\n        foreach ($markers as $marker) {\n            $this->addMarker($marker);\n        }\n    }", "language": "php", "code": "public function setMarkers($markers)\n    {\n        $this->markers = array();\n\n        foreach ($markers as $marker) {\n            $this->addMarker($marker);\n        }\n    }", "code_tokens": ["public", "function", "setMarkers", "(", "$", "markers", ")", "{", "$", "this", "->", "markers", "=", "array", "(", ")", ";", "foreach", "(", "$", "markers", "as", "$", "marker", ")", "{", "$", "this", "->", "addMarker", "(", "$", "marker", ")", ";", "}", "}"], "docstring": "Sets the cluster markers.\n\n@param array $markers The cluster markers.", "docstring_tokens": ["Sets", "the", "cluster", "markers", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Overlays/MarkerCluster.php#L92-L99", "partition": "test"}
{"repo": "cleverage/process-bundle", "path": "Configuration/TaskConfiguration.php", "func_name": "TaskConfiguration.hasAncestor", "original_string": "public function hasAncestor(TaskConfiguration $taskConfig)\n    {\n        foreach ($this->getPreviousTasksConfigurations() as $previousTaskConfig) {\n            // Avoid errors for direct ancestors\n            if ($this->getCode() === $previousTaskConfig->getCode()) {\n                continue;\n            }\n\n            if ($previousTaskConfig->getCode() === $taskConfig->getCode()) {\n                return true;\n            }\n\n            if ($previousTaskConfig->hasAncestor($taskConfig)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "language": "php", "code": "public function hasAncestor(TaskConfiguration $taskConfig)\n    {\n        foreach ($this->getPreviousTasksConfigurations() as $previousTaskConfig) {\n            // Avoid errors for direct ancestors\n            if ($this->getCode() === $previousTaskConfig->getCode()) {\n                continue;\n            }\n\n            if ($previousTaskConfig->getCode() === $taskConfig->getCode()) {\n                return true;\n            }\n\n            if ($previousTaskConfig->hasAncestor($taskConfig)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "hasAncestor", "(", "TaskConfiguration", "$", "taskConfig", ")", "{", "foreach", "(", "$", "this", "->", "getPreviousTasksConfigurations", "(", ")", "as", "$", "previousTaskConfig", ")", "{", "// Avoid errors for direct ancestors", "if", "(", "$", "this", "->", "getCode", "(", ")", "===", "$", "previousTaskConfig", "->", "getCode", "(", ")", ")", "{", "continue", ";", "}", "if", "(", "$", "previousTaskConfig", "->", "getCode", "(", ")", "===", "$", "taskConfig", "->", "getCode", "(", ")", ")", "{", "return", "true", ";", "}", "if", "(", "$", "previousTaskConfig", "->", "hasAncestor", "(", "$", "taskConfig", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Check task ancestors to find if it have a given task as parent\n\n@param TaskConfiguration $taskConfig\n\n@return bool", "docstring_tokens": ["Check", "task", "ancestors", "to", "find", "if", "it", "have", "a", "given", "task", "as", "parent"], "sha": "d03bfe390a9d94d4d51752e463abd0b6323bf4f7", "url": "https://github.com/cleverage/process-bundle/blob/d03bfe390a9d94d4d51752e463abd0b6323bf4f7/Configuration/TaskConfiguration.php#L304-L322", "partition": "test"}
{"repo": "jelix/inifile", "path": "lib/MultiIniModifier.php", "func_name": "MultiIniModifier.isSection", "original_string": "public function isSection($name)\n    {\n        return $this->overrider->isSection($name) || $this->master->isSection($name);\n    }", "language": "php", "code": "public function isSection($name)\n    {\n        return $this->overrider->isSection($name) || $this->master->isSection($name);\n    }", "code_tokens": ["public", "function", "isSection", "(", "$", "name", ")", "{", "return", "$", "this", "->", "overrider", "->", "isSection", "(", "$", "name", ")", "||", "$", "this", "->", "master", "->", "isSection", "(", "$", "name", ")", ";", "}"], "docstring": "says if there is a section with the given name.", "docstring_tokens": ["says", "if", "there", "is", "a", "section", "with", "the", "given", "name", "."], "sha": "003f15245f074cc3a3b6023fae31861a090df832", "url": "https://github.com/jelix/inifile/blob/003f15245f074cc3a3b6023fae31861a090df832/lib/MultiIniModifier.php#L299-L302", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/HttpMessage/NativeStream.php", "func_name": "NativeStream.setStream", "original_string": "protected function setStream(string $stream, string $mode = null): void\n    {\n        // Set the mode\n        $mode = $mode ?? 'r';\n\n        // Open a new resource stream\n        $resource = fopen($stream, $mode);\n\n        // If the resource isn't a resource or a stream resource type\n        if (! \\is_resource($resource) || 'stream' !== get_resource_type(\n                $resource\n            )\n        ) {\n            // Throw a new invalid stream exception\n            throw new InvalidStream(\n                'Invalid stream provided; must be a string stream identifier or stream resource'\n            );\n        }\n\n        // Set the stream\n        $this->stream = $resource;\n    }", "language": "php", "code": "protected function setStream(string $stream, string $mode = null): void\n    {\n        // Set the mode\n        $mode = $mode ?? 'r';\n\n        // Open a new resource stream\n        $resource = fopen($stream, $mode);\n\n        // If the resource isn't a resource or a stream resource type\n        if (! \\is_resource($resource) || 'stream' !== get_resource_type(\n                $resource\n            )\n        ) {\n            // Throw a new invalid stream exception\n            throw new InvalidStream(\n                'Invalid stream provided; must be a string stream identifier or stream resource'\n            );\n        }\n\n        // Set the stream\n        $this->stream = $resource;\n    }", "code_tokens": ["protected", "function", "setStream", "(", "string", "$", "stream", ",", "string", "$", "mode", "=", "null", ")", ":", "void", "{", "// Set the mode", "$", "mode", "=", "$", "mode", "??", "'r'", ";", "// Open a new resource stream", "$", "resource", "=", "fopen", "(", "$", "stream", ",", "$", "mode", ")", ";", "// If the resource isn't a resource or a stream resource type", "if", "(", "!", "\\", "is_resource", "(", "$", "resource", ")", "||", "'stream'", "!==", "get_resource_type", "(", "$", "resource", ")", ")", "{", "// Throw a new invalid stream exception", "throw", "new", "InvalidStream", "(", "'Invalid stream provided; must be a string stream identifier or stream resource'", ")", ";", "}", "// Set the stream", "$", "this", "->", "stream", "=", "$", "resource", ";", "}"], "docstring": "Set the stream.\n\n@param string $stream The stream\n@param string $mode   [optional] The mode\n\n@throws \\Valkyrja\\HttpMessage\\Exceptions\\InvalidStream\n\n@return void", "docstring_tokens": ["Set", "the", "stream", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/HttpMessage/NativeStream.php#L478-L499", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Services/Geocoding/GeocoderProvider.php", "func_name": "GeocoderProvider.buildGeocoderAddressComponents", "original_string": "protected function buildGeocoderAddressComponents(array $geocoderAddressComponents)\n    {\n        $results = array();\n\n        foreach ($geocoderAddressComponents as $geocoderAddressComponent) {\n            $results[] = $this->buildGeocoderAddressComponent($geocoderAddressComponent);\n        }\n\n        return $results;\n    }", "language": "php", "code": "protected function buildGeocoderAddressComponents(array $geocoderAddressComponents)\n    {\n        $results = array();\n\n        foreach ($geocoderAddressComponents as $geocoderAddressComponent) {\n            $results[] = $this->buildGeocoderAddressComponent($geocoderAddressComponent);\n        }\n\n        return $results;\n    }", "code_tokens": ["protected", "function", "buildGeocoderAddressComponents", "(", "array", "$", "geocoderAddressComponents", ")", "{", "$", "results", "=", "array", "(", ")", ";", "foreach", "(", "$", "geocoderAddressComponents", "as", "$", "geocoderAddressComponent", ")", "{", "$", "results", "[", "]", "=", "$", "this", "->", "buildGeocoderAddressComponent", "(", "$", "geocoderAddressComponent", ")", ";", "}", "return", "$", "results", ";", "}"], "docstring": "Builds the gecoder address components according to a normalized geocoding address components.\n\n@param array $geocoderAddressComponents The normalized geocoder address components.\n\n@return array The builded geocoder address components.", "docstring_tokens": ["Builds", "the", "gecoder", "address", "components", "according", "to", "a", "normalized", "geocoding", "address", "components", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Services/Geocoding/GeocoderProvider.php#L397-L406", "partition": "test"}
{"repo": "mapado/rest-client-sdk", "path": "src/Mapping.php", "func_name": "Mapping.getModelName", "original_string": "public function getModelName(string $key): string\n    {\n        $this->checkMappingExistence($key, true);\n\n        /** @var ClassMetadata */\n        $classMetadata = $this->getClassMetadataByKey($key);\n\n        return $classMetadata->getModelName();\n    }", "language": "php", "code": "public function getModelName(string $key): string\n    {\n        $this->checkMappingExistence($key, true);\n\n        /** @var ClassMetadata */\n        $classMetadata = $this->getClassMetadataByKey($key);\n\n        return $classMetadata->getModelName();\n    }", "code_tokens": ["public", "function", "getModelName", "(", "string", "$", "key", ")", ":", "string", "{", "$", "this", "->", "checkMappingExistence", "(", "$", "key", ",", "true", ")", ";", "/** @var ClassMetadata */", "$", "classMetadata", "=", "$", "this", "->", "getClassMetadataByKey", "(", "$", "key", ")", ";", "return", "$", "classMetadata", "->", "getModelName", "(", ")", ";", "}"], "docstring": "return a model class name for a given key", "docstring_tokens": ["return", "a", "model", "class", "name", "for", "a", "given", "key"], "sha": "d218542fb28ae50d8e022e5fe6202e955e1d726b", "url": "https://github.com/mapado/rest-client-sdk/blob/d218542fb28ae50d8e022e5fe6202e955e1d726b/src/Mapping.php#L76-L84", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Table/Column/SimpleForeign.php", "func_name": "SimpleForeign.get_column", "original_string": "protected function get_column() {\n\n\t\t$column  = $this->foreign_column ?: $this->foreign_table->get_primary_key();\n\t\t$columns = $this->foreign_table->get_columns();\n\n\t\treturn $columns[ $column ];\n\t}", "language": "php", "code": "protected function get_column() {\n\n\t\t$column  = $this->foreign_column ?: $this->foreign_table->get_primary_key();\n\t\t$columns = $this->foreign_table->get_columns();\n\n\t\treturn $columns[ $column ];\n\t}", "code_tokens": ["protected", "function", "get_column", "(", ")", "{", "$", "column", "=", "$", "this", "->", "foreign_column", "?", ":", "$", "this", "->", "foreign_table", "->", "get_primary_key", "(", ")", ";", "$", "columns", "=", "$", "this", "->", "foreign_table", "->", "get_columns", "(", ")", ";", "return", "$", "columns", "[", "$", "column", "]", ";", "}"], "docstring": "Get the referenced column.\n\n@since 2.0\n\n@return BaseColumn", "docstring_tokens": ["Get", "the", "referenced", "column", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Table/Column/SimpleForeign.php#L66-L72", "partition": "test"}
{"repo": "dreamfactorysoftware/df-database", "path": "src/Components/Schema.php", "func_name": "Schema.addPrimaryKey", "original_string": "public function addPrimaryKey($name, $table, $columns)\n    {\n        if (is_string($columns)) {\n            $columns = preg_split('/\\s*,\\s*/', $columns, -1, PREG_SPLIT_NO_EMPTY);\n        }\n        foreach ($columns as $i => $col) {\n            $columns[$i] = $this->quoteColumnName($col);\n        }\n\n        return\n            'ALTER TABLE ' .\n            $this->quoteTableName($table) .\n            ' ADD CONSTRAINT ' .\n            $this->quoteColumnName($name) .\n            '  PRIMARY KEY (' .\n            implode(', ', $columns) .\n            ' )';\n    }", "language": "php", "code": "public function addPrimaryKey($name, $table, $columns)\n    {\n        if (is_string($columns)) {\n            $columns = preg_split('/\\s*,\\s*/', $columns, -1, PREG_SPLIT_NO_EMPTY);\n        }\n        foreach ($columns as $i => $col) {\n            $columns[$i] = $this->quoteColumnName($col);\n        }\n\n        return\n            'ALTER TABLE ' .\n            $this->quoteTableName($table) .\n            ' ADD CONSTRAINT ' .\n            $this->quoteColumnName($name) .\n            '  PRIMARY KEY (' .\n            implode(', ', $columns) .\n            ' )';\n    }", "code_tokens": ["public", "function", "addPrimaryKey", "(", "$", "name", ",", "$", "table", ",", "$", "columns", ")", "{", "if", "(", "is_string", "(", "$", "columns", ")", ")", "{", "$", "columns", "=", "preg_split", "(", "'/\\s*,\\s*/'", ",", "$", "columns", ",", "-", "1", ",", "PREG_SPLIT_NO_EMPTY", ")", ";", "}", "foreach", "(", "$", "columns", "as", "$", "i", "=>", "$", "col", ")", "{", "$", "columns", "[", "$", "i", "]", "=", "$", "this", "->", "quoteColumnName", "(", "$", "col", ")", ";", "}", "return", "'ALTER TABLE '", ".", "$", "this", "->", "quoteTableName", "(", "$", "table", ")", ".", "' ADD CONSTRAINT '", ".", "$", "this", "->", "quoteColumnName", "(", "$", "name", ")", ".", "'  PRIMARY KEY ('", ".", "implode", "(", "', '", ",", "$", "columns", ")", ".", "' )'", ";", "}"], "docstring": "Builds a SQL statement for adding a primary key constraint to an existing table.\n\n@param string       $name    the name of the primary key constraint.\n@param string       $table   the table that the primary key constraint will be added to.\n@param string|array $columns comma separated string or array of columns that the primary key will consist of.\nArray value can be passed.\n\n@return string the SQL statement for adding a primary key constraint to an existing table.", "docstring_tokens": ["Builds", "a", "SQL", "statement", "for", "adding", "a", "primary", "key", "constraint", "to", "an", "existing", "table", "."], "sha": "ab6d2f0643ab292d1bcce2bc25002db9b0731139", "url": "https://github.com/dreamfactorysoftware/df-database/blob/ab6d2f0643ab292d1bcce2bc25002db9b0731139/src/Components/Schema.php#L974-L991", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/Core/Http/Serialization/XmlObjectSerializer.php", "func_name": "XmlObjectSerializer.getPostXmlFromArbitraryEntity", "original_string": "public static function getPostXmlFromArbitraryEntity($entity, &$urlResource)\n    {\n        if (null==$entity) {\n            return false;\n        }\n\n        $xmlElementName = XmlObjectSerializer::cleanPhpClassNameToIntuitEntityName(get_class($entity));\n        $xmlElementName = trim($xmlElementName);\n        $urlResource = strtolower($xmlElementName);\n        $httpsPostBody = XmlObjectSerializer::getXmlFromObj($entity);\n        return $httpsPostBody;\n    }", "language": "php", "code": "public static function getPostXmlFromArbitraryEntity($entity, &$urlResource)\n    {\n        if (null==$entity) {\n            return false;\n        }\n\n        $xmlElementName = XmlObjectSerializer::cleanPhpClassNameToIntuitEntityName(get_class($entity));\n        $xmlElementName = trim($xmlElementName);\n        $urlResource = strtolower($xmlElementName);\n        $httpsPostBody = XmlObjectSerializer::getXmlFromObj($entity);\n        return $httpsPostBody;\n    }", "code_tokens": ["public", "static", "function", "getPostXmlFromArbitraryEntity", "(", "$", "entity", ",", "&", "$", "urlResource", ")", "{", "if", "(", "null", "==", "$", "entity", ")", "{", "return", "false", ";", "}", "$", "xmlElementName", "=", "XmlObjectSerializer", "::", "cleanPhpClassNameToIntuitEntityName", "(", "get_class", "(", "$", "entity", ")", ")", ";", "$", "xmlElementName", "=", "trim", "(", "$", "xmlElementName", ")", ";", "$", "urlResource", "=", "strtolower", "(", "$", "xmlElementName", ")", ";", "$", "httpsPostBody", "=", "XmlObjectSerializer", "::", "getXmlFromObj", "(", "$", "entity", ")", ";", "return", "$", "httpsPostBody", ";", "}"], "docstring": "Marshall a POPO object to be XML\n\n@param IPPIntuitEntity $entity The POPO object\n@param string $urlResource the type of the POPO object\n@return string the XML of the POPO object", "docstring_tokens": ["Marshall", "a", "POPO", "object", "to", "be", "XML"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/Core/Http/Serialization/XmlObjectSerializer.php#L64-L75", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Translation/Extractor/ChainExtractor.php", "func_name": "ChainExtractor.addExtractor", "original_string": "public function addExtractor(string $format, ExtractorContract $extractor): void\n    {\n        $this->extractors[$format] = $extractor;\n    }", "language": "php", "code": "public function addExtractor(string $format, ExtractorContract $extractor): void\n    {\n        $this->extractors[$format] = $extractor;\n    }", "code_tokens": ["public", "function", "addExtractor", "(", "string", "$", "format", ",", "ExtractorContract", "$", "extractor", ")", ":", "void", "{", "$", "this", "->", "extractors", "[", "$", "format", "]", "=", "$", "extractor", ";", "}"], "docstring": "Adds a loader to the translation extractor.\n\n@param string                                            $format\n@param \\Viserio\\Component\\Contract\\Translation\\Extractor $extractor\n\n@return void", "docstring_tokens": ["Adds", "a", "loader", "to", "the", "translation", "extractor", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Translation/Extractor/ChainExtractor.php#L25-L28", "partition": "test"}
{"repo": "perminder-klair/kato-core", "path": "gii/generators/crud/Generator.php", "func_name": "Generator.generateActiveField", "original_string": "public function generateActiveField($attribute)\n    {\n        $tableSchema = $this->getTableSchema();\n        if ($tableSchema === false || !isset($tableSchema->columns[$attribute])) {\n            if (preg_match('/^(password|pass|passwd|passcode)$/i', $attribute)) {\n                return \"\\$form->field(\\$model, '$attribute')->passwordInput()\";\n            } else {\n                return \"\\$form->field(\\$model, '$attribute')\";\n            }\n        }\n        $column = $tableSchema->columns[$attribute];\n\n        if ($column->name === 'tags') {\n            return \"\\$form->field(\\$model, '$attribute')->widget(Select2::classname(), [\n            'language' => 'en',\n            'options' => [\n                'multiple' => true,\n                'placeholder' => 'Select a tag ...'\n            ],\n            'pluginOptions' => [\n                'allowClear' => true,\n                'tags' => \\$tag->listTags(\\$model->className()),\n            ],\n        ])\";\n        } elseif ($column->type === 'timestamp') {\n            return \"\\$form->field(\\$model, '$attribute')->widget(DatePicker::classname(), [\n                'options' => [\n                    'placeholder' => 'Select date ...',\n                ],\n                'pluginOptions' => [\n                    'format' => 'yyyy-mm-dd',\n                    'todayHighlight' => true\n                ],\n            ])\";\n        } elseif ($column->phpType === 'boolean' || $column->name === 'active' || $column->name === 'deleted') {\n            return \"\\$form->field(\\$model, '$attribute')->widget(SwitchInput::classname(), [\n                'pluginOptions' => [\n                    'size' => 'small'\n                ],\n            ])\";\n        } elseif ($column->type === 'text') {\n            return \"\\$form->field(\\$model, '$attribute')->widget(ImperaviWidget::classname())\";\n        } else {\n            if (preg_match('/^(password|pass|passwd|passcode)$/i', $column->name)) {\n                $input = 'passwordInput';\n            } else {\n                $input = 'textInput';\n            }\n            if ($column->phpType !== 'string' || $column->size === null) {\n                return \"\\$form->field(\\$model, '$attribute')->$input()\";\n            } else {\n                return \"\\$form->field(\\$model, '$attribute')->$input(['maxlength' => $column->size])\";\n            }\n        }\n    }", "language": "php", "code": "public function generateActiveField($attribute)\n    {\n        $tableSchema = $this->getTableSchema();\n        if ($tableSchema === false || !isset($tableSchema->columns[$attribute])) {\n            if (preg_match('/^(password|pass|passwd|passcode)$/i', $attribute)) {\n                return \"\\$form->field(\\$model, '$attribute')->passwordInput()\";\n            } else {\n                return \"\\$form->field(\\$model, '$attribute')\";\n            }\n        }\n        $column = $tableSchema->columns[$attribute];\n\n        if ($column->name === 'tags') {\n            return \"\\$form->field(\\$model, '$attribute')->widget(Select2::classname(), [\n            'language' => 'en',\n            'options' => [\n                'multiple' => true,\n                'placeholder' => 'Select a tag ...'\n            ],\n            'pluginOptions' => [\n                'allowClear' => true,\n                'tags' => \\$tag->listTags(\\$model->className()),\n            ],\n        ])\";\n        } elseif ($column->type === 'timestamp') {\n            return \"\\$form->field(\\$model, '$attribute')->widget(DatePicker::classname(), [\n                'options' => [\n                    'placeholder' => 'Select date ...',\n                ],\n                'pluginOptions' => [\n                    'format' => 'yyyy-mm-dd',\n                    'todayHighlight' => true\n                ],\n            ])\";\n        } elseif ($column->phpType === 'boolean' || $column->name === 'active' || $column->name === 'deleted') {\n            return \"\\$form->field(\\$model, '$attribute')->widget(SwitchInput::classname(), [\n                'pluginOptions' => [\n                    'size' => 'small'\n                ],\n            ])\";\n        } elseif ($column->type === 'text') {\n            return \"\\$form->field(\\$model, '$attribute')->widget(ImperaviWidget::classname())\";\n        } else {\n            if (preg_match('/^(password|pass|passwd|passcode)$/i', $column->name)) {\n                $input = 'passwordInput';\n            } else {\n                $input = 'textInput';\n            }\n            if ($column->phpType !== 'string' || $column->size === null) {\n                return \"\\$form->field(\\$model, '$attribute')->$input()\";\n            } else {\n                return \"\\$form->field(\\$model, '$attribute')->$input(['maxlength' => $column->size])\";\n            }\n        }\n    }", "code_tokens": ["public", "function", "generateActiveField", "(", "$", "attribute", ")", "{", "$", "tableSchema", "=", "$", "this", "->", "getTableSchema", "(", ")", ";", "if", "(", "$", "tableSchema", "===", "false", "||", "!", "isset", "(", "$", "tableSchema", "->", "columns", "[", "$", "attribute", "]", ")", ")", "{", "if", "(", "preg_match", "(", "'/^(password|pass|passwd|passcode)$/i'", ",", "$", "attribute", ")", ")", "{", "return", "\"\\$form->field(\\$model, '$attribute')->passwordInput()\"", ";", "}", "else", "{", "return", "\"\\$form->field(\\$model, '$attribute')\"", ";", "}", "}", "$", "column", "=", "$", "tableSchema", "->", "columns", "[", "$", "attribute", "]", ";", "if", "(", "$", "column", "->", "name", "===", "'tags'", ")", "{", "return", "\"\\$form->field(\\$model, '$attribute')->widget(Select2::classname(), [\n            'language' => 'en',\n            'options' => [\n                'multiple' => true,\n                'placeholder' => 'Select a tag ...'\n            ],\n            'pluginOptions' => [\n                'allowClear' => true,\n                'tags' => \\$tag->listTags(\\$model->className()),\n            ],\n        ])\"", ";", "}", "elseif", "(", "$", "column", "->", "type", "===", "'timestamp'", ")", "{", "return", "\"\\$form->field(\\$model, '$attribute')->widget(DatePicker::classname(), [\n                'options' => [\n                    'placeholder' => 'Select date ...',\n                ],\n                'pluginOptions' => [\n                    'format' => 'yyyy-mm-dd',\n                    'todayHighlight' => true\n                ],\n            ])\"", ";", "}", "elseif", "(", "$", "column", "->", "phpType", "===", "'boolean'", "||", "$", "column", "->", "name", "===", "'active'", "||", "$", "column", "->", "name", "===", "'deleted'", ")", "{", "return", "\"\\$form->field(\\$model, '$attribute')->widget(SwitchInput::classname(), [\n                'pluginOptions' => [\n                    'size' => 'small'\n                ],\n            ])\"", ";", "}", "elseif", "(", "$", "column", "->", "type", "===", "'text'", ")", "{", "return", "\"\\$form->field(\\$model, '$attribute')->widget(ImperaviWidget::classname())\"", ";", "}", "else", "{", "if", "(", "preg_match", "(", "'/^(password|pass|passwd|passcode)$/i'", ",", "$", "column", "->", "name", ")", ")", "{", "$", "input", "=", "'passwordInput'", ";", "}", "else", "{", "$", "input", "=", "'textInput'", ";", "}", "if", "(", "$", "column", "->", "phpType", "!==", "'string'", "||", "$", "column", "->", "size", "===", "null", ")", "{", "return", "\"\\$form->field(\\$model, '$attribute')->$input()\"", ";", "}", "else", "{", "return", "\"\\$form->field(\\$model, '$attribute')->$input(['maxlength' => $column->size])\"", ";", "}", "}", "}"], "docstring": "Generates code for active field\n@param  string $attribute\n@return string", "docstring_tokens": ["Generates", "code", "for", "active", "field"], "sha": "168227027b857c90e8c5f24a2d591796b49ac9e7", "url": "https://github.com/perminder-klair/kato-core/blob/168227027b857c90e8c5f24a2d591796b49ac9e7/gii/generators/crud/Generator.php#L12-L66", "partition": "test"}
{"repo": "agmscode/omnipay-agms", "path": "src/Message/Response.php", "func_name": "Response.parseResponse", "original_string": "private function parseResponse($data, $op)\n    {\n        $arr = array();\n        $xml = new \\SimpleXMLElement($data);\n        $xml = $xml->xpath('/soap:Envelope/soap:Body');\n        $xml = $xml[0];\n        $data = json_decode(json_encode($xml));\n        $opResponse = $op . 'Response';\n        $opResult = $op . 'Result';\n        $arr = $this->object2array($data->$opResponse->$opResult);\n        return $arr;\n    }", "language": "php", "code": "private function parseResponse($data, $op)\n    {\n        $arr = array();\n        $xml = new \\SimpleXMLElement($data);\n        $xml = $xml->xpath('/soap:Envelope/soap:Body');\n        $xml = $xml[0];\n        $data = json_decode(json_encode($xml));\n        $opResponse = $op . 'Response';\n        $opResult = $op . 'Result';\n        $arr = $this->object2array($data->$opResponse->$opResult);\n        return $arr;\n    }", "code_tokens": ["private", "function", "parseResponse", "(", "$", "data", ",", "$", "op", ")", "{", "$", "arr", "=", "array", "(", ")", ";", "$", "xml", "=", "new", "\\", "SimpleXMLElement", "(", "$", "data", ")", ";", "$", "xml", "=", "$", "xml", "->", "xpath", "(", "'/soap:Envelope/soap:Body'", ")", ";", "$", "xml", "=", "$", "xml", "[", "0", "]", ";", "$", "data", "=", "json_decode", "(", "json_encode", "(", "$", "xml", ")", ")", ";", "$", "opResponse", "=", "$", "op", ".", "'Response'", ";", "$", "opResult", "=", "$", "op", ".", "'Result'", ";", "$", "arr", "=", "$", "this", "->", "object2array", "(", "$", "data", "->", "$", "opResponse", "->", "$", "opResult", ")", ";", "return", "$", "arr", ";", "}"], "docstring": "Parse the transaction response\n\n@return array", "docstring_tokens": ["Parse", "the", "transaction", "response"], "sha": "0eb2cc41a3111b47ddae9238d069896c66ce5d50", "url": "https://github.com/agmscode/omnipay-agms/blob/0eb2cc41a3111b47ddae9238d069896c66ce5d50/src/Message/Response.php#L73-L84", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Data/Tools/BizRecord.php", "func_name": "BizRecord.convertSqlArrToRecArr", "original_string": "public function convertSqlArrToRecArr($sqlArr)\n    {\n        $recArr = array();\n        /* @var $field BizField */\n        foreach ($this->varValue as $key => $field) {\n            if ($field->column || $field->sqlExpression) {\n                $recArr[$key] = $sqlArr[$field->index];\n            } else {\n                $recArr[$key] = \"\";\n            }\n        }\n        return $recArr;\n    }", "language": "php", "code": "public function convertSqlArrToRecArr($sqlArr)\n    {\n        $recArr = array();\n        /* @var $field BizField */\n        foreach ($this->varValue as $key => $field) {\n            if ($field->column || $field->sqlExpression) {\n                $recArr[$key] = $sqlArr[$field->index];\n            } else {\n                $recArr[$key] = \"\";\n            }\n        }\n        return $recArr;\n    }", "code_tokens": ["public", "function", "convertSqlArrToRecArr", "(", "$", "sqlArr", ")", "{", "$", "recArr", "=", "array", "(", ")", ";", "/* @var $field BizField */", "foreach", "(", "$", "this", "->", "varValue", "as", "$", "key", "=>", "$", "field", ")", "{", "if", "(", "$", "field", "->", "column", "||", "$", "field", "->", "sqlExpression", ")", "{", "$", "recArr", "[", "$", "key", "]", "=", "$", "sqlArr", "[", "$", "field", "->", "index", "]", ";", "}", "else", "{", "$", "recArr", "[", "$", "key", "]", "=", "\"\"", ";", "}", "}", "return", "$", "recArr", ";", "}"], "docstring": "Conver sql array to record array\n\n@param array $sqlArr indexed-value pair array\n@return array field-value record array", "docstring_tokens": ["Conver", "sql", "array", "to", "record", "array"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Data/Tools/BizRecord.php#L303-L315", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Mail/Transport/PostmarkTransport.php", "func_name": "PostmarkTransport.convertEmailsArray", "original_string": "protected function convertEmailsArray(array $emails): array\n    {\n        $convertedEmails = [];\n\n        foreach ($emails as $email => $name) {\n            $convertedEmails[] = $name ?\n            '\"' . \\str_replace('\"', '\\\\\"', $name) . \"\\\" <{$email}>\" :\n            $email;\n        }\n\n        return $convertedEmails;\n    }", "language": "php", "code": "protected function convertEmailsArray(array $emails): array\n    {\n        $convertedEmails = [];\n\n        foreach ($emails as $email => $name) {\n            $convertedEmails[] = $name ?\n            '\"' . \\str_replace('\"', '\\\\\"', $name) . \"\\\" <{$email}>\" :\n            $email;\n        }\n\n        return $convertedEmails;\n    }", "code_tokens": ["protected", "function", "convertEmailsArray", "(", "array", "$", "emails", ")", ":", "array", "{", "$", "convertedEmails", "=", "[", "]", ";", "foreach", "(", "$", "emails", "as", "$", "email", "=>", "$", "name", ")", "{", "$", "convertedEmails", "[", "]", "=", "$", "name", "?", "'\"'", ".", "\\", "str_replace", "(", "'\"'", ",", "'\\\\\"'", ",", "$", "name", ")", ".", "\"\\\" <{$email}>\"", ":", "$", "email", ";", "}", "return", "$", "convertedEmails", ";", "}"], "docstring": "Convert email dictionary with emails and names\nto array of emails with names.\n\n@param string[] $emails\n\n@return array", "docstring_tokens": ["Convert", "email", "dictionary", "with", "emails", "and", "names", "to", "array", "of", "emails", "with", "names", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Mail/Transport/PostmarkTransport.php#L143-L154", "partition": "test"}
{"repo": "ublaboo/controls", "path": "src/Controls/TextInputCustomLabel.php", "func_name": "TextInputCustomLabel.getLabel", "original_string": "public function getLabel($caption = NULL)\n\t{\n\t\t$label = clone $this->label;\n\t\t$label->for = $this->getHtmlId();\n\n\t\tif (!$label->getHtml()) {\n\t\t\t$label->setText($this->translate($caption === NULL ? $this->caption : $caption));\n\t\t}\n\n\t\treturn $label;\n\t}", "language": "php", "code": "public function getLabel($caption = NULL)\n\t{\n\t\t$label = clone $this->label;\n\t\t$label->for = $this->getHtmlId();\n\n\t\tif (!$label->getHtml()) {\n\t\t\t$label->setText($this->translate($caption === NULL ? $this->caption : $caption));\n\t\t}\n\n\t\treturn $label;\n\t}", "code_tokens": ["public", "function", "getLabel", "(", "$", "caption", "=", "NULL", ")", "{", "$", "label", "=", "clone", "$", "this", "->", "label", ";", "$", "label", "->", "for", "=", "$", "this", "->", "getHtmlId", "(", ")", ";", "if", "(", "!", "$", "label", "->", "getHtml", "(", ")", ")", "{", "$", "label", "->", "setText", "(", "$", "this", "->", "translate", "(", "$", "caption", "===", "NULL", "?", "$", "this", "->", "caption", ":", "$", "caption", ")", ")", ";", "}", "return", "$", "label", ";", "}"], "docstring": "Generates label's HTML element.\n@param  string\n@return Html|string", "docstring_tokens": ["Generates", "label", "s", "HTML", "element", "."], "sha": "7d2816c4f733b727b6c2ec3343bba6c55c2862b1", "url": "https://github.com/ublaboo/controls/blob/7d2816c4f733b727b6c2ec3343bba6c55c2862b1/src/Controls/TextInputCustomLabel.php#L38-L48", "partition": "test"}
{"repo": "stone-lab/Dynamicfield", "path": "Utility/Entity.php", "func_name": "Entity.initGroup", "original_string": "private function initGroup($group, $default = null)\n    {\n        $groupId = $group->id;\n        $groupName = $group->name;\n        $fields = $group->getListFields();\n\n        $fieldData = $this->getFieldPostData($default);\n        $controls = array();\n        if ($fields->count()) {\n            $this->fieldInDB = EntityModel::getAllDataFields($this->entityId, $this->type);\n\n            $controls['name'] = $groupName;\n            foreach ($fields as $field) {\n                $fieldValue = @$fieldData['fields'][$field->id];\n                $fieldControl = null;\n                $dbData = $this->getFieldDataInDB($field->id, $this->locale);\n\n                switch ($field->type) {\n                    case 'text':\n                        $fieldControl = new Text($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'number':\n                        $fieldControl = new Number($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'textarea':\n                        $fieldControl = new Textarea($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'wysiwyg':\n                        $fieldControl = new Wysiwyg($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'file':\n                        $fieldControl = new File($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'image':\n                        $fieldControl = new Image($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'repeater':\n                        $fieldControl = new Repeater($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                }\n\n                // assign entity type class to field to use for save data;\n                $fieldControl->setEntityType($this->type);\n                $fieldControl->init($fieldValue);\n                $controls['fields'][$field->id] = $fieldControl;\n                $this->fieldValues[$field->name] = $fieldControl->getDisplayValue();\n            }\n            $this->groupFields[$groupId] = $controls;\n        }\n    }", "language": "php", "code": "private function initGroup($group, $default = null)\n    {\n        $groupId = $group->id;\n        $groupName = $group->name;\n        $fields = $group->getListFields();\n\n        $fieldData = $this->getFieldPostData($default);\n        $controls = array();\n        if ($fields->count()) {\n            $this->fieldInDB = EntityModel::getAllDataFields($this->entityId, $this->type);\n\n            $controls['name'] = $groupName;\n            foreach ($fields as $field) {\n                $fieldValue = @$fieldData['fields'][$field->id];\n                $fieldControl = null;\n                $dbData = $this->getFieldDataInDB($field->id, $this->locale);\n\n                switch ($field->type) {\n                    case 'text':\n                        $fieldControl = new Text($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'number':\n                        $fieldControl = new Number($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'textarea':\n                        $fieldControl = new Textarea($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'wysiwyg':\n                        $fieldControl = new Wysiwyg($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'file':\n                        $fieldControl = new File($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'image':\n                        $fieldControl = new Image($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                    case 'repeater':\n                        $fieldControl = new Repeater($field, $this->entityId, $this->locale, $dbData);\n                        break;\n                }\n\n                // assign entity type class to field to use for save data;\n                $fieldControl->setEntityType($this->type);\n                $fieldControl->init($fieldValue);\n                $controls['fields'][$field->id] = $fieldControl;\n                $this->fieldValues[$field->name] = $fieldControl->getDisplayValue();\n            }\n            $this->groupFields[$groupId] = $controls;\n        }\n    }", "code_tokens": ["private", "function", "initGroup", "(", "$", "group", ",", "$", "default", "=", "null", ")", "{", "$", "groupId", "=", "$", "group", "->", "id", ";", "$", "groupName", "=", "$", "group", "->", "name", ";", "$", "fields", "=", "$", "group", "->", "getListFields", "(", ")", ";", "$", "fieldData", "=", "$", "this", "->", "getFieldPostData", "(", "$", "default", ")", ";", "$", "controls", "=", "array", "(", ")", ";", "if", "(", "$", "fields", "->", "count", "(", ")", ")", "{", "$", "this", "->", "fieldInDB", "=", "EntityModel", "::", "getAllDataFields", "(", "$", "this", "->", "entityId", ",", "$", "this", "->", "type", ")", ";", "$", "controls", "[", "'name'", "]", "=", "$", "groupName", ";", "foreach", "(", "$", "fields", "as", "$", "field", ")", "{", "$", "fieldValue", "=", "@", "$", "fieldData", "[", "'fields'", "]", "[", "$", "field", "->", "id", "]", ";", "$", "fieldControl", "=", "null", ";", "$", "dbData", "=", "$", "this", "->", "getFieldDataInDB", "(", "$", "field", "->", "id", ",", "$", "this", "->", "locale", ")", ";", "switch", "(", "$", "field", "->", "type", ")", "{", "case", "'text'", ":", "$", "fieldControl", "=", "new", "Text", "(", "$", "field", ",", "$", "this", "->", "entityId", ",", "$", "this", "->", "locale", ",", "$", "dbData", ")", ";", "break", ";", "case", "'number'", ":", "$", "fieldControl", "=", "new", "Number", "(", "$", "field", ",", "$", "this", "->", "entityId", ",", "$", "this", "->", "locale", ",", "$", "dbData", ")", ";", "break", ";", "case", "'textarea'", ":", "$", "fieldControl", "=", "new", "Textarea", "(", "$", "field", ",", "$", "this", "->", "entityId", ",", "$", "this", "->", "locale", ",", "$", "dbData", ")", ";", "break", ";", "case", "'wysiwyg'", ":", "$", "fieldControl", "=", "new", "Wysiwyg", "(", "$", "field", ",", "$", "this", "->", "entityId", ",", "$", "this", "->", "locale", ",", "$", "dbData", ")", ";", "break", ";", "case", "'file'", ":", "$", "fieldControl", "=", "new", "File", "(", "$", "field", ",", "$", "this", "->", "entityId", ",", "$", "this", "->", "locale", ",", "$", "dbData", ")", ";", "break", ";", "case", "'image'", ":", "$", "fieldControl", "=", "new", "Image", "(", "$", "field", ",", "$", "this", "->", "entityId", ",", "$", "this", "->", "locale", ",", "$", "dbData", ")", ";", "break", ";", "case", "'repeater'", ":", "$", "fieldControl", "=", "new", "Repeater", "(", "$", "field", ",", "$", "this", "->", "entityId", ",", "$", "this", "->", "locale", ",", "$", "dbData", ")", ";", "break", ";", "}", "// assign entity type class to field to use for save data;", "$", "fieldControl", "->", "setEntityType", "(", "$", "this", "->", "type", ")", ";", "$", "fieldControl", "->", "init", "(", "$", "fieldValue", ")", ";", "$", "controls", "[", "'fields'", "]", "[", "$", "field", "->", "id", "]", "=", "$", "fieldControl", ";", "$", "this", "->", "fieldValues", "[", "$", "field", "->", "name", "]", "=", "$", "fieldControl", "->", "getDisplayValue", "(", ")", ";", "}", "$", "this", "->", "groupFields", "[", "$", "groupId", "]", "=", "$", "controls", ";", "}", "}"], "docstring": "Initial fields of each group and assign to GroupFields array.\n\n@param $group\n@param null $default", "docstring_tokens": ["Initial", "fields", "of", "each", "group", "and", "assign", "to", "GroupFields", "array", "."], "sha": "7d25050180000b482d5efe301f54b9ce78963181", "url": "https://github.com/stone-lab/Dynamicfield/blob/7d25050180000b482d5efe301f54b9ce78963181/Utility/Entity.php#L211-L260", "partition": "test"}
{"repo": "aphiria/router", "path": "src/UriTemplates/Parsers/AstNode.php", "func_name": "AstNode.addChild", "original_string": "public function addChild(AstNode $node): AstNode\n    {\n        $node->parent = $this;\n        $this->children[] = $node;\n\n        return $this;\n    }", "language": "php", "code": "public function addChild(AstNode $node): AstNode\n    {\n        $node->parent = $this;\n        $this->children[] = $node;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addChild", "(", "AstNode", "$", "node", ")", ":", "AstNode", "{", "$", "node", "->", "parent", "=", "$", "this", ";", "$", "this", "->", "children", "[", "]", "=", "$", "node", ";", "return", "$", "this", ";", "}"], "docstring": "Adds a child to this node\n\n@param AstNode $node The child to add\n@return AstNode Returns this for chaining", "docstring_tokens": ["Adds", "a", "child", "to", "this", "node"], "sha": "d9fa90d5f17dddbd52f311c2ec5cfec5865fd66b", "url": "https://github.com/aphiria/router/blob/d9fa90d5f17dddbd52f311c2ec5cfec5865fd66b/src/UriTemplates/Parsers/AstNode.php#L45-L51", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Model.php", "func_name": "Model.is_fillable", "original_string": "protected function is_fillable( $column ) {\n\n\t\tif ( static::$_unguarded ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( empty( $this->_fillable ) ) {\n\t\t\treturn ! in_array( $column, $this->_guarded );\n\t\t} else {\n\t\t\treturn in_array( $column, $this->_fillable );\n\t\t}\n\t}", "language": "php", "code": "protected function is_fillable( $column ) {\n\n\t\tif ( static::$_unguarded ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( empty( $this->_fillable ) ) {\n\t\t\treturn ! in_array( $column, $this->_guarded );\n\t\t} else {\n\t\t\treturn in_array( $column, $this->_fillable );\n\t\t}\n\t}", "code_tokens": ["protected", "function", "is_fillable", "(", "$", "column", ")", "{", "if", "(", "static", "::", "$", "_unguarded", ")", "{", "return", "true", ";", "}", "if", "(", "empty", "(", "$", "this", "->", "_fillable", ")", ")", "{", "return", "!", "in_array", "(", "$", "column", ",", "$", "this", "->", "_guarded", ")", ";", "}", "else", "{", "return", "in_array", "(", "$", "column", ",", "$", "this", "->", "_fillable", ")", ";", "}", "}"], "docstring": "Determine if a given attribute is fillable.\n\n@since 2.0\n\n@param string $column\n\n@return bool", "docstring_tokens": ["Determine", "if", "a", "given", "attribute", "is", "fillable", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Model.php#L359-L370", "partition": "test"}
{"repo": "cnvs/easel", "path": "src/Extensions/ExtensionManager.php", "func_name": "ExtensionManager.disable", "original_string": "public function disable($name)\n    {\n        $enabled = $this->getEnabled();\n\n        if (($k = array_search($name, $enabled)) !== false) {\n            unset($enabled[$k]);\n\n            $extension = $this->getExtension($name);\n\n            $this->setEnabled($enabled);\n\n            $extension->setEnabled(false);\n        }\n    }", "language": "php", "code": "public function disable($name)\n    {\n        $enabled = $this->getEnabled();\n\n        if (($k = array_search($name, $enabled)) !== false) {\n            unset($enabled[$k]);\n\n            $extension = $this->getExtension($name);\n\n            $this->setEnabled($enabled);\n\n            $extension->setEnabled(false);\n        }\n    }", "code_tokens": ["public", "function", "disable", "(", "$", "name", ")", "{", "$", "enabled", "=", "$", "this", "->", "getEnabled", "(", ")", ";", "if", "(", "(", "$", "k", "=", "array_search", "(", "$", "name", ",", "$", "enabled", ")", ")", "!==", "false", ")", "{", "unset", "(", "$", "enabled", "[", "$", "k", "]", ")", ";", "$", "extension", "=", "$", "this", "->", "getExtension", "(", "$", "name", ")", ";", "$", "this", "->", "setEnabled", "(", "$", "enabled", ")", ";", "$", "extension", "->", "setEnabled", "(", "false", ")", ";", "}", "}"], "docstring": "Disables an extension.\n\n@param string $name", "docstring_tokens": ["Disables", "an", "extension", "."], "sha": "bb2b564432155467944b4a2e719e474fd564b711", "url": "https://github.com/cnvs/easel/blob/bb2b564432155467944b4a2e719e474fd564b711/src/Extensions/ExtensionManager.php#L125-L138", "partition": "test"}
{"repo": "symbiote/silverstripe-queuedjobs", "path": "src/Services/QueuedJobService.php", "func_name": "QueuedJobService.getJobListFilter", "original_string": "public function getJobListFilter($type = null, $includeUpUntil = 0)\n    {\n        $util = singleton(QJUtils::class);\n\n        $filter = ['JobStatus <>' => QueuedJob::STATUS_COMPLETE];\n        if ($includeUpUntil) {\n            $filter['JobFinished > '] = DBDatetime::create()->setValue(\n                DBDatetime::now()->getTimestamp() - $includeUpUntil\n            )->Rfc2822();\n        }\n\n        $filter = $util->dbQuote($filter, ' OR ');\n\n        if ($type) {\n            $filter = $util->dbQuote(['JobType =' => (string)$type]) . ' AND (' . $filter . ')';\n        }\n\n        return $filter;\n    }", "language": "php", "code": "public function getJobListFilter($type = null, $includeUpUntil = 0)\n    {\n        $util = singleton(QJUtils::class);\n\n        $filter = ['JobStatus <>' => QueuedJob::STATUS_COMPLETE];\n        if ($includeUpUntil) {\n            $filter['JobFinished > '] = DBDatetime::create()->setValue(\n                DBDatetime::now()->getTimestamp() - $includeUpUntil\n            )->Rfc2822();\n        }\n\n        $filter = $util->dbQuote($filter, ' OR ');\n\n        if ($type) {\n            $filter = $util->dbQuote(['JobType =' => (string)$type]) . ' AND (' . $filter . ')';\n        }\n\n        return $filter;\n    }", "code_tokens": ["public", "function", "getJobListFilter", "(", "$", "type", "=", "null", ",", "$", "includeUpUntil", "=", "0", ")", "{", "$", "util", "=", "singleton", "(", "QJUtils", "::", "class", ")", ";", "$", "filter", "=", "[", "'JobStatus <>'", "=>", "QueuedJob", "::", "STATUS_COMPLETE", "]", ";", "if", "(", "$", "includeUpUntil", ")", "{", "$", "filter", "[", "'JobFinished > '", "]", "=", "DBDatetime", "::", "create", "(", ")", "->", "setValue", "(", "DBDatetime", "::", "now", "(", ")", "->", "getTimestamp", "(", ")", "-", "$", "includeUpUntil", ")", "->", "Rfc2822", "(", ")", ";", "}", "$", "filter", "=", "$", "util", "->", "dbQuote", "(", "$", "filter", ",", "' OR '", ")", ";", "if", "(", "$", "type", ")", "{", "$", "filter", "=", "$", "util", "->", "dbQuote", "(", "[", "'JobType ='", "=>", "(", "string", ")", "$", "type", "]", ")", ".", "' AND ('", ".", "$", "filter", ".", "')'", ";", "}", "return", "$", "filter", ";", "}"], "docstring": "Return the SQL filter used to get the job list - this is used by the UI for displaying the job list...\n\n@param string $type\nif we're after a particular job list\n@param int $includeUpUntil\nThe number of seconds to include jobs that have just finished, allowing a job list to be built that\nincludes recently finished jobs\n\n@return string", "docstring_tokens": ["Return", "the", "SQL", "filter", "used", "to", "get", "the", "job", "list", "-", "this", "is", "used", "by", "the", "UI", "for", "displaying", "the", "job", "list", "..."], "sha": "897149ebb689ab2304356048251b2f7c3db659b7", "url": "https://github.com/symbiote/silverstripe-queuedjobs/blob/897149ebb689ab2304356048251b2f7c3db659b7/src/Services/QueuedJobService.php#L1089-L1107", "partition": "test"}
{"repo": "imatic/view-bundle", "path": "Twig/Loader/RemoteLoader.php", "func_name": "RemoteLoader.addTemplate", "original_string": "public function addTemplate($name, $url, $ttl, array $blocks, array $metadata)\n    {\n        $this->templates[$name] = [\n            'url' => $url,\n            'ttl' => $ttl,\n            'blocks' => $blocks,\n            'metadata' => $metadata,\n            'checked_ttl' => false,\n            'checking_ttl' => false,\n        ];\n    }", "language": "php", "code": "public function addTemplate($name, $url, $ttl, array $blocks, array $metadata)\n    {\n        $this->templates[$name] = [\n            'url' => $url,\n            'ttl' => $ttl,\n            'blocks' => $blocks,\n            'metadata' => $metadata,\n            'checked_ttl' => false,\n            'checking_ttl' => false,\n        ];\n    }", "code_tokens": ["public", "function", "addTemplate", "(", "$", "name", ",", "$", "url", ",", "$", "ttl", ",", "array", "$", "blocks", ",", "array", "$", "metadata", ")", "{", "$", "this", "->", "templates", "[", "$", "name", "]", "=", "[", "'url'", "=>", "$", "url", ",", "'ttl'", "=>", "$", "ttl", ",", "'blocks'", "=>", "$", "blocks", ",", "'metadata'", "=>", "$", "metadata", ",", "'checked_ttl'", "=>", "false", ",", "'checking_ttl'", "=>", "false", ",", "]", ";", "}"], "docstring": "Add a remote template.\n\n@param string $name\n@param string $url\n@param int    $ttl\n@param array  $blocks\n@param array  $metadata", "docstring_tokens": ["Add", "a", "remote", "template", "."], "sha": "dd7896fbd9b07bfb3f7a75c7dc0d7dccf2cbf254", "url": "https://github.com/imatic/view-bundle/blob/dd7896fbd9b07bfb3f7a75c7dc0d7dccf2cbf254/Twig/Loader/RemoteLoader.php#L32-L42", "partition": "test"}
{"repo": "siriusphp/upload", "path": "src/Container/Local.php", "func_name": "Local.delete", "original_string": "public function delete($file)\n    {\n        $file = $this->normalizePath($file);\n        if (file_exists($this->baseDirectory . $file)) {\n            return unlink($this->baseDirectory . $file);\n        }\n\n        return true;\n    }", "language": "php", "code": "public function delete($file)\n    {\n        $file = $this->normalizePath($file);\n        if (file_exists($this->baseDirectory . $file)) {\n            return unlink($this->baseDirectory . $file);\n        }\n\n        return true;\n    }", "code_tokens": ["public", "function", "delete", "(", "$", "file", ")", "{", "$", "file", "=", "$", "this", "->", "normalizePath", "(", "$", "file", ")", ";", "if", "(", "file_exists", "(", "$", "this", "->", "baseDirectory", ".", "$", "file", ")", ")", "{", "return", "unlink", "(", "$", "this", "->", "baseDirectory", ".", "$", "file", ")", ";", "}", "return", "true", ";", "}"], "docstring": "Delete the file from the container\n\n@param  string $file\n@return bool", "docstring_tokens": ["Delete", "the", "file", "from", "the", "container"], "sha": "2776c526612cc870b2d673e1df8677649c5a0d30", "url": "https://github.com/siriusphp/upload/blob/2776c526612cc870b2d673e1df8677649c5a0d30/src/Container/Local.php#L75-L83", "partition": "test"}
{"repo": "locomotivemtl/charcoal-object", "path": "src/Charcoal/Object/HierarchicalTrait.php", "func_name": "HierarchicalTrait.siblings", "original_string": "public function siblings()\n    {\n        if ($this->siblings !== null) {\n            return $this->siblings;\n        }\n        $master = $this->master();\n        if ($master === null) {\n            // Todo: return all top-level objects.\n            $siblings = [];\n        } else {\n            // Todo: Remove \"current\" object from siblings\n            $siblings = $master->children();\n        }\n        $this->siblings = $siblings;\n        return $this->siblings;\n    }", "language": "php", "code": "public function siblings()\n    {\n        if ($this->siblings !== null) {\n            return $this->siblings;\n        }\n        $master = $this->master();\n        if ($master === null) {\n            // Todo: return all top-level objects.\n            $siblings = [];\n        } else {\n            // Todo: Remove \"current\" object from siblings\n            $siblings = $master->children();\n        }\n        $this->siblings = $siblings;\n        return $this->siblings;\n    }", "code_tokens": ["public", "function", "siblings", "(", ")", "{", "if", "(", "$", "this", "->", "siblings", "!==", "null", ")", "{", "return", "$", "this", "->", "siblings", ";", "}", "$", "master", "=", "$", "this", "->", "master", "(", ")", ";", "if", "(", "$", "master", "===", "null", ")", "{", "// Todo: return all top-level objects.", "$", "siblings", "=", "[", "]", ";", "}", "else", "{", "// Todo: Remove \"current\" object from siblings", "$", "siblings", "=", "$", "master", "->", "children", "(", ")", ";", "}", "$", "this", "->", "siblings", "=", "$", "siblings", ";", "return", "$", "this", "->", "siblings", ";", "}"], "docstring": "Get all the objects on the same level as this one.\n@return array", "docstring_tokens": ["Get", "all", "the", "objects", "on", "the", "same", "level", "as", "this", "one", "."], "sha": "11c459d0e1519de215ca1c18301ee8f5e8d1e09b", "url": "https://github.com/locomotivemtl/charcoal-object/blob/11c459d0e1519de215ca1c18301ee8f5e8d1e09b/src/Charcoal/Object/HierarchicalTrait.php#L370-L385", "partition": "test"}
{"repo": "hugodias/cakegallery", "path": "Model/Album.php", "func_name": "Album.init", "original_string": "public function init($model = null, $model_id = null)\n    {\n        # If there is a Model and ModelID on parameters, get or create a folder for it\n        if ($model && $model_id) {\n            # Searching for folder that belongs to this particular $model and $model_id\n            if (!$album = $this->getAttachedAlbum($model, $model_id)) {\n                # If there is no Album , lets create one for it\n                $album = $this->createInitAlbum($model, $model_id);\n            }\n        } else {\n            # If there is no model on parameters, lets create a generic folder\n            $album = $this->createInitAlbum(null, null);\n        }\n\n        return $album;\n    }", "language": "php", "code": "public function init($model = null, $model_id = null)\n    {\n        # If there is a Model and ModelID on parameters, get or create a folder for it\n        if ($model && $model_id) {\n            # Searching for folder that belongs to this particular $model and $model_id\n            if (!$album = $this->getAttachedAlbum($model, $model_id)) {\n                # If there is no Album , lets create one for it\n                $album = $this->createInitAlbum($model, $model_id);\n            }\n        } else {\n            # If there is no model on parameters, lets create a generic folder\n            $album = $this->createInitAlbum(null, null);\n        }\n\n        return $album;\n    }", "code_tokens": ["public", "function", "init", "(", "$", "model", "=", "null", ",", "$", "model_id", "=", "null", ")", "{", "# If there is a Model and ModelID on parameters, get or create a folder for it", "if", "(", "$", "model", "&&", "$", "model_id", ")", "{", "# Searching for folder that belongs to this particular $model and $model_id", "if", "(", "!", "$", "album", "=", "$", "this", "->", "getAttachedAlbum", "(", "$", "model", ",", "$", "model_id", ")", ")", "{", "# If there is no Album , lets create one for it", "$", "album", "=", "$", "this", "->", "createInitAlbum", "(", "$", "model", ",", "$", "model_id", ")", ";", "}", "}", "else", "{", "# If there is no model on parameters, lets create a generic folder", "$", "album", "=", "$", "this", "->", "createInitAlbum", "(", "null", ",", "null", ")", ";", "}", "return", "$", "album", ";", "}"], "docstring": "Create an album record on database\n@param $model\n@param $model_id", "docstring_tokens": ["Create", "an", "album", "record", "on", "database"], "sha": "5289c7babadaf0981cbbd71825f42f46cbbd7650", "url": "https://github.com/hugodias/cakegallery/blob/5289c7babadaf0981cbbd71825f42f46cbbd7650/Model/Album.php#L84-L99", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Foundation/Cli/Tasks/RouteListTask.php", "func_name": "RouteListTask.mainAction", "original_string": "public function mainAction()\n    {\n        $infos = $this->getHttpRoutesInfos();\n\n        $datas = [];\n        foreach ($infos['routes'] as $route) {\n            /** @var \\Phalcon\\Mvc\\Router\\Route $route */\n            $paths = $route->getPaths();\n\n            if (!$this->hasOption('no-substitution')) {\n                $compiled = Helper::describeRoutePattern($route, true);\n            } else {\n                $compiled = $route->getPattern();\n            }\n\n            $httpMethods = $route->getHttpMethods();\n\n            if (is_array($httpMethods)) {\n                $httpMethods = implode('|', $httpMethods);\n            }\n            $middlewares = Arr::fetch($paths, 'middleware');\n            if (is_array($middlewares)) {\n                $_middlewares = [];\n                foreach ($middlewares as $key => $middleware) {\n                    if (is_int($key)) {\n                        $_middlewares[] = $middleware;\n                    } else {\n                        $_middlewares[] = $key;\n                    }\n                }\n                $middleware = implode('|', $_middlewares);\n            } else {\n                $middleware = $middlewares;\n            }\n\n            if (Arr::has($paths, 'controller')) {\n                $controller = Str::capitalize($paths['controller']);\n            } else {\n                $controller = Decorate::notice('{controller}');\n            }\n\n            $controller .= Arr::fetch($infos, 'controllerSuffix', '');\n\n            if (Arr::has($paths, 'action')) {\n                $action = $paths['action'];\n            } else {\n                $action = Decorate::notice('{action}');\n            }\n\n            $action .= Arr::fetch($infos, 'actionSuffix', '');\n\n            $module = Arr::get($paths, 'module');\n            $namespace = Arr::fetch($paths, 'namespace', Arr::fetch($infos['defaults'], 'namespace'));\n\n            $datas[$module . '::' . $namespace][] = [\n                'domain'     => $route->getHostname(),\n                'name'       => $route->getName(),\n                'method'     => $httpMethods,\n                'pattern'    => $compiled,\n                'action'     => $controller . '::' . $action,\n                'middleware' => $middleware\n            ];\n        }\n\n        foreach ($datas as $key => $data) {\n            $parts = explode('::', $key, 2);\n\n            $this->table([['MODULE    : '.$parts[0]],['NAMESPACE : ' . $parts[1]]], [], Table::NO_HEADER);\n\n            $this->table($data);\n\n            $this->line('');\n        }\n    }", "language": "php", "code": "public function mainAction()\n    {\n        $infos = $this->getHttpRoutesInfos();\n\n        $datas = [];\n        foreach ($infos['routes'] as $route) {\n            /** @var \\Phalcon\\Mvc\\Router\\Route $route */\n            $paths = $route->getPaths();\n\n            if (!$this->hasOption('no-substitution')) {\n                $compiled = Helper::describeRoutePattern($route, true);\n            } else {\n                $compiled = $route->getPattern();\n            }\n\n            $httpMethods = $route->getHttpMethods();\n\n            if (is_array($httpMethods)) {\n                $httpMethods = implode('|', $httpMethods);\n            }\n            $middlewares = Arr::fetch($paths, 'middleware');\n            if (is_array($middlewares)) {\n                $_middlewares = [];\n                foreach ($middlewares as $key => $middleware) {\n                    if (is_int($key)) {\n                        $_middlewares[] = $middleware;\n                    } else {\n                        $_middlewares[] = $key;\n                    }\n                }\n                $middleware = implode('|', $_middlewares);\n            } else {\n                $middleware = $middlewares;\n            }\n\n            if (Arr::has($paths, 'controller')) {\n                $controller = Str::capitalize($paths['controller']);\n            } else {\n                $controller = Decorate::notice('{controller}');\n            }\n\n            $controller .= Arr::fetch($infos, 'controllerSuffix', '');\n\n            if (Arr::has($paths, 'action')) {\n                $action = $paths['action'];\n            } else {\n                $action = Decorate::notice('{action}');\n            }\n\n            $action .= Arr::fetch($infos, 'actionSuffix', '');\n\n            $module = Arr::get($paths, 'module');\n            $namespace = Arr::fetch($paths, 'namespace', Arr::fetch($infos['defaults'], 'namespace'));\n\n            $datas[$module . '::' . $namespace][] = [\n                'domain'     => $route->getHostname(),\n                'name'       => $route->getName(),\n                'method'     => $httpMethods,\n                'pattern'    => $compiled,\n                'action'     => $controller . '::' . $action,\n                'middleware' => $middleware\n            ];\n        }\n\n        foreach ($datas as $key => $data) {\n            $parts = explode('::', $key, 2);\n\n            $this->table([['MODULE    : '.$parts[0]],['NAMESPACE : ' . $parts[1]]], [], Table::NO_HEADER);\n\n            $this->table($data);\n\n            $this->line('');\n        }\n    }", "code_tokens": ["public", "function", "mainAction", "(", ")", "{", "$", "infos", "=", "$", "this", "->", "getHttpRoutesInfos", "(", ")", ";", "$", "datas", "=", "[", "]", ";", "foreach", "(", "$", "infos", "[", "'routes'", "]", "as", "$", "route", ")", "{", "/** @var \\Phalcon\\Mvc\\Router\\Route $route */", "$", "paths", "=", "$", "route", "->", "getPaths", "(", ")", ";", "if", "(", "!", "$", "this", "->", "hasOption", "(", "'no-substitution'", ")", ")", "{", "$", "compiled", "=", "Helper", "::", "describeRoutePattern", "(", "$", "route", ",", "true", ")", ";", "}", "else", "{", "$", "compiled", "=", "$", "route", "->", "getPattern", "(", ")", ";", "}", "$", "httpMethods", "=", "$", "route", "->", "getHttpMethods", "(", ")", ";", "if", "(", "is_array", "(", "$", "httpMethods", ")", ")", "{", "$", "httpMethods", "=", "implode", "(", "'|'", ",", "$", "httpMethods", ")", ";", "}", "$", "middlewares", "=", "Arr", "::", "fetch", "(", "$", "paths", ",", "'middleware'", ")", ";", "if", "(", "is_array", "(", "$", "middlewares", ")", ")", "{", "$", "_middlewares", "=", "[", "]", ";", "foreach", "(", "$", "middlewares", "as", "$", "key", "=>", "$", "middleware", ")", "{", "if", "(", "is_int", "(", "$", "key", ")", ")", "{", "$", "_middlewares", "[", "]", "=", "$", "middleware", ";", "}", "else", "{", "$", "_middlewares", "[", "]", "=", "$", "key", ";", "}", "}", "$", "middleware", "=", "implode", "(", "'|'", ",", "$", "_middlewares", ")", ";", "}", "else", "{", "$", "middleware", "=", "$", "middlewares", ";", "}", "if", "(", "Arr", "::", "has", "(", "$", "paths", ",", "'controller'", ")", ")", "{", "$", "controller", "=", "Str", "::", "capitalize", "(", "$", "paths", "[", "'controller'", "]", ")", ";", "}", "else", "{", "$", "controller", "=", "Decorate", "::", "notice", "(", "'{controller}'", ")", ";", "}", "$", "controller", ".=", "Arr", "::", "fetch", "(", "$", "infos", ",", "'controllerSuffix'", ",", "''", ")", ";", "if", "(", "Arr", "::", "has", "(", "$", "paths", ",", "'action'", ")", ")", "{", "$", "action", "=", "$", "paths", "[", "'action'", "]", ";", "}", "else", "{", "$", "action", "=", "Decorate", "::", "notice", "(", "'{action}'", ")", ";", "}", "$", "action", ".=", "Arr", "::", "fetch", "(", "$", "infos", ",", "'actionSuffix'", ",", "''", ")", ";", "$", "module", "=", "Arr", "::", "get", "(", "$", "paths", ",", "'module'", ")", ";", "$", "namespace", "=", "Arr", "::", "fetch", "(", "$", "paths", ",", "'namespace'", ",", "Arr", "::", "fetch", "(", "$", "infos", "[", "'defaults'", "]", ",", "'namespace'", ")", ")", ";", "$", "datas", "[", "$", "module", ".", "'::'", ".", "$", "namespace", "]", "[", "]", "=", "[", "'domain'", "=>", "$", "route", "->", "getHostname", "(", ")", ",", "'name'", "=>", "$", "route", "->", "getName", "(", ")", ",", "'method'", "=>", "$", "httpMethods", ",", "'pattern'", "=>", "$", "compiled", ",", "'action'", "=>", "$", "controller", ".", "'::'", ".", "$", "action", ",", "'middleware'", "=>", "$", "middleware", "]", ";", "}", "foreach", "(", "$", "datas", "as", "$", "key", "=>", "$", "data", ")", "{", "$", "parts", "=", "explode", "(", "'::'", ",", "$", "key", ",", "2", ")", ";", "$", "this", "->", "table", "(", "[", "[", "'MODULE    : '", ".", "$", "parts", "[", "0", "]", "]", ",", "[", "'NAMESPACE : '", ".", "$", "parts", "[", "1", "]", "]", "]", ",", "[", "]", ",", "Table", "::", "NO_HEADER", ")", ";", "$", "this", "->", "table", "(", "$", "data", ")", ";", "$", "this", "->", "line", "(", "''", ")", ";", "}", "}"], "docstring": "List all routes.\n\n@description List all routes.\n\n@option      --no-substitution: Doesn't replace matching group by params name", "docstring_tokens": ["List", "all", "routes", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Foundation/Cli/Tasks/RouteListTask.php#L28-L101", "partition": "test"}
{"repo": "M6Web/StatsdBundle", "path": "src/Client/Client.php", "func_name": "Client.mergeTags", "original_string": "private function mergeTags($event, $config)\n    {\n        $configTags = isset($config['tags']) ? $config['tags'] : [];\n\n        if ($event instanceof MonitorableEventInterface) {\n            return array_merge($configTags, $event->getTags());\n        }\n\n        return $configTags;\n    }", "language": "php", "code": "private function mergeTags($event, $config)\n    {\n        $configTags = isset($config['tags']) ? $config['tags'] : [];\n\n        if ($event instanceof MonitorableEventInterface) {\n            return array_merge($configTags, $event->getTags());\n        }\n\n        return $configTags;\n    }", "code_tokens": ["private", "function", "mergeTags", "(", "$", "event", ",", "$", "config", ")", "{", "$", "configTags", "=", "isset", "(", "$", "config", "[", "'tags'", "]", ")", "?", "$", "config", "[", "'tags'", "]", ":", "[", "]", ";", "if", "(", "$", "event", "instanceof", "MonitorableEventInterface", ")", "{", "return", "array_merge", "(", "$", "configTags", ",", "$", "event", "->", "getTags", "(", ")", ")", ";", "}", "return", "$", "configTags", ";", "}"], "docstring": "Merge config tags with tags manually sent with the event\n\n@param mixed $event\n@param array $config\n\n@return array of tags", "docstring_tokens": ["Merge", "config", "tags", "with", "tags", "manually", "sent", "with", "the", "event"], "sha": "a9f9f465eb81f3c8a8c39fa7b33da818c34ec656", "url": "https://github.com/M6Web/StatsdBundle/blob/a9f9f465eb81f3c8a8c39fa7b33da818c34ec656/src/Client/Client.php#L210-L219", "partition": "test"}
{"repo": "ARCANEDEV/LaravelSeo", "path": "src/Models/Redirect.php", "func_name": "Redirect.createOne", "original_string": "public static function createOne($oldUrl, $newUrl, $status = Response::HTTP_MOVED_PERMANENTLY)\n    {\n        $redirect = new self([\n            'old_url' => $oldUrl,\n            'new_url' => $newUrl,\n            'status'  => $status,\n        ]);\n\n        $redirect->save();\n\n        return $redirect;\n    }", "language": "php", "code": "public static function createOne($oldUrl, $newUrl, $status = Response::HTTP_MOVED_PERMANENTLY)\n    {\n        $redirect = new self([\n            'old_url' => $oldUrl,\n            'new_url' => $newUrl,\n            'status'  => $status,\n        ]);\n\n        $redirect->save();\n\n        return $redirect;\n    }", "code_tokens": ["public", "static", "function", "createOne", "(", "$", "oldUrl", ",", "$", "newUrl", ",", "$", "status", "=", "Response", "::", "HTTP_MOVED_PERMANENTLY", ")", "{", "$", "redirect", "=", "new", "self", "(", "[", "'old_url'", "=>", "$", "oldUrl", ",", "'new_url'", "=>", "$", "newUrl", ",", "'status'", "=>", "$", "status", ",", "]", ")", ";", "$", "redirect", "->", "save", "(", ")", ";", "return", "$", "redirect", ";", "}"], "docstring": "Create a redirect url.\n\n@param  string  $oldUrl\n@param  string  $newUrl\n@param  int     $status\n\n@return \\Arcanedev\\LaravelSeo\\Models\\Redirect", "docstring_tokens": ["Create", "a", "redirect", "url", "."], "sha": "7fb3bc4bd4d09bfc6c07d19993386e2227947f6f", "url": "https://github.com/ARCANEDEV/LaravelSeo/blob/7fb3bc4bd4d09bfc6c07d19993386e2227947f6f/src/Models/Redirect.php#L107-L118", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/BaseResult.php", "func_name": "BaseResult.getCustomRowObject", "original_string": "public function getCustomRowObject(int $n, string $className)\n\t{\n\t\tisset($this->customResultObject[$className]) || $this->getCustomResultObject($className);\n\n\t\tif (empty($this->customResultObject[$className]))\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tif ($n !== $this->currentRow && isset($this->customResultObject[$className][$n]))\n\t\t{\n\t\t\t$this->currentRow = $n;\n\t\t}\n\n\t\treturn $this->customResultObject[$className][$this->currentRow];\n\t}", "language": "php", "code": "public function getCustomRowObject(int $n, string $className)\n\t{\n\t\tisset($this->customResultObject[$className]) || $this->getCustomResultObject($className);\n\n\t\tif (empty($this->customResultObject[$className]))\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tif ($n !== $this->currentRow && isset($this->customResultObject[$className][$n]))\n\t\t{\n\t\t\t$this->currentRow = $n;\n\t\t}\n\n\t\treturn $this->customResultObject[$className][$this->currentRow];\n\t}", "code_tokens": ["public", "function", "getCustomRowObject", "(", "int", "$", "n", ",", "string", "$", "className", ")", "{", "isset", "(", "$", "this", "->", "customResultObject", "[", "$", "className", "]", ")", "||", "$", "this", "->", "getCustomResultObject", "(", "$", "className", ")", ";", "if", "(", "empty", "(", "$", "this", "->", "customResultObject", "[", "$", "className", "]", ")", ")", "{", "return", "null", ";", "}", "if", "(", "$", "n", "!==", "$", "this", "->", "currentRow", "&&", "isset", "(", "$", "this", "->", "customResultObject", "[", "$", "className", "]", "[", "$", "n", "]", ")", ")", "{", "$", "this", "->", "currentRow", "=", "$", "n", ";", "}", "return", "$", "this", "->", "customResultObject", "[", "$", "className", "]", "[", "$", "this", "->", "currentRow", "]", ";", "}"], "docstring": "Returns a row as a custom class instance.\n\nIf row doesn't exists, returns null.\n\n@param integer $n\n@param string  $className\n\n@return mixed", "docstring_tokens": ["Returns", "a", "row", "as", "a", "custom", "class", "instance", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/BaseResult.php#L339-L354", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Object/ObjectFactory.php", "func_name": "ObjectFactory.createObject", "original_string": "public function createObject($objName, &$xmlArr = null)\n    {\n        $obj = $this->constructObject($objName, $xmlArr);\n        return $obj;\n    }", "language": "php", "code": "public function createObject($objName, &$xmlArr = null)\n    {\n        $obj = $this->constructObject($objName, $xmlArr);\n        return $obj;\n    }", "code_tokens": ["public", "function", "createObject", "(", "$", "objName", ",", "&", "$", "xmlArr", "=", "null", ")", "{", "$", "obj", "=", "$", "this", "->", "constructObject", "(", "$", "objName", ",", "$", "xmlArr", ")", ";", "return", "$", "obj", ";", "}"], "docstring": "Create a new metadata based object instance\n\n@param string $objName name of object will be create\n@param array $xmlArr propery array of object\n@return object", "docstring_tokens": ["Create", "a", "new", "metadata", "based", "object", "instance"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Object/ObjectFactory.php#L105-L109", "partition": "test"}
{"repo": "foush/common", "path": "module/FzyCommon/src/FzyCommon/Service/Update/Base.php", "func_name": "Base.postValidate", "original_string": "protected function postValidate($valid, Params $params, $options = array())\n    {\n        if ($valid) {\n            foreach ($this->getEntities() as $tag => $entity) {\n                $this->em()->persist($entity);\n            }\n            if (!isset($options[static::OPTION_NO_FLUSH]) || !$options[static::OPTION_NO_FLUSH]) {\n                $this->em()->flush();\n            }\n        }\n    }", "language": "php", "code": "protected function postValidate($valid, Params $params, $options = array())\n    {\n        if ($valid) {\n            foreach ($this->getEntities() as $tag => $entity) {\n                $this->em()->persist($entity);\n            }\n            if (!isset($options[static::OPTION_NO_FLUSH]) || !$options[static::OPTION_NO_FLUSH]) {\n                $this->em()->flush();\n            }\n        }\n    }", "code_tokens": ["protected", "function", "postValidate", "(", "$", "valid", ",", "Params", "$", "params", ",", "$", "options", "=", "array", "(", ")", ")", "{", "if", "(", "$", "valid", ")", "{", "foreach", "(", "$", "this", "->", "getEntities", "(", ")", "as", "$", "tag", "=>", "$", "entity", ")", "{", "$", "this", "->", "em", "(", ")", "->", "persist", "(", "$", "entity", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "options", "[", "static", "::", "OPTION_NO_FLUSH", "]", ")", "||", "!", "$", "options", "[", "static", "::", "OPTION_NO_FLUSH", "]", ")", "{", "$", "this", "->", "em", "(", ")", "->", "flush", "(", ")", ";", "}", "}", "}"], "docstring": "Called after all forms have been validated.\nPassed the validation result\n@param boolean $valid\n@param Param   $params", "docstring_tokens": ["Called", "after", "all", "forms", "have", "been", "validated", ".", "Passed", "the", "validation", "result"], "sha": "881dd0f487f4a3124f789f4ad3392a2cc350308d", "url": "https://github.com/foush/common/blob/881dd0f487f4a3124f789f4ad3392a2cc350308d/module/FzyCommon/src/FzyCommon/Service/Update/Base.php#L281-L291", "partition": "test"}
{"repo": "rinvex/laravel-cacheable", "path": "src/CacheableEloquent.php", "func_name": "CacheableEloquent.flushCacheKeys", "original_string": "protected static function flushCacheKeys(string $modelName): array\n    {\n        $flushedKeys = [];\n        $keysFile = storage_path('framework/cache/data/rinvex.cacheable.json');\n        $cacheKeys = static::getCacheKeys($keysFile);\n\n        if (isset($cacheKeys[$modelName])) {\n            $flushedKeys = $cacheKeys[$modelName];\n\n            unset($cacheKeys[$modelName]);\n\n            file_put_contents($keysFile, json_encode($cacheKeys));\n        }\n\n        return $flushedKeys;\n    }", "language": "php", "code": "protected static function flushCacheKeys(string $modelName): array\n    {\n        $flushedKeys = [];\n        $keysFile = storage_path('framework/cache/data/rinvex.cacheable.json');\n        $cacheKeys = static::getCacheKeys($keysFile);\n\n        if (isset($cacheKeys[$modelName])) {\n            $flushedKeys = $cacheKeys[$modelName];\n\n            unset($cacheKeys[$modelName]);\n\n            file_put_contents($keysFile, json_encode($cacheKeys));\n        }\n\n        return $flushedKeys;\n    }", "code_tokens": ["protected", "static", "function", "flushCacheKeys", "(", "string", "$", "modelName", ")", ":", "array", "{", "$", "flushedKeys", "=", "[", "]", ";", "$", "keysFile", "=", "storage_path", "(", "'framework/cache/data/rinvex.cacheable.json'", ")", ";", "$", "cacheKeys", "=", "static", "::", "getCacheKeys", "(", "$", "keysFile", ")", ";", "if", "(", "isset", "(", "$", "cacheKeys", "[", "$", "modelName", "]", ")", ")", "{", "$", "flushedKeys", "=", "$", "cacheKeys", "[", "$", "modelName", "]", ";", "unset", "(", "$", "cacheKeys", "[", "$", "modelName", "]", ")", ";", "file_put_contents", "(", "$", "keysFile", ",", "json_encode", "(", "$", "cacheKeys", ")", ")", ";", "}", "return", "$", "flushedKeys", ";", "}"], "docstring": "Flush cache keys of the given model by mimicking cache tags.\n\n@param string $modelName\n\n@return array", "docstring_tokens": ["Flush", "cache", "keys", "of", "the", "given", "model", "by", "mimicking", "cache", "tags", "."], "sha": "d6b8a48ab6fa3e018f2eda05930915f6870339e0", "url": "https://github.com/rinvex/laravel-cacheable/blob/d6b8a48ab6fa3e018f2eda05930915f6870339e0/src/CacheableEloquent.php#L104-L119", "partition": "test"}
{"repo": "mvqn/rest", "path": "src/MVQN/REST/RestClient.php", "func_name": "RestClient.curl", "original_string": "private static function curl(string $endpoint)\n    {\n        // Get the base URL and App Key.\n        $baseUrl = self::$_baseUrl;\n\n        // Create a cURL session.\n        $curl = curl_init();\n\n        // Set the options necessary for communicating with the UCRM Server.\n        curl_setopt($curl, CURLOPT_URL, $baseUrl.$endpoint);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_HEADER, false);\n\n        // IF the Base URL is using HTTPS AND is requesting localhost...\n        if(Strings::startsWith(self::$_baseUrl, \"https://localhost\"))\n        {\n            // THEN disable host/peer certificate checks, as localhost cannot resolve to a valid name for SSL!\n            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n        }\n        else\n        {\n            // OTHERWISE, enable host/peer certificate checks, this is fine for all HTTP URLs (including localhost)!\n            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2); // DEFAULT\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 1); // DEFAULT\n\n            // Downloaded from: https://curl.haxx.se/docs/caextract.html\n            curl_setopt($curl, CURLOPT_CAINFO, __DIR__ . \"/Certificates/cacert-2018-10-17.pem\");\n            curl_setopt($curl, CURLOPT_CAPATH, __DIR__ . \"/Certificates/cacert-2018-10-17.pem\");\n        }\n\n        // Set the necessary HTTP HEADERS.\n        curl_setopt($curl, CURLOPT_HTTPHEADER, self::$_headers);\n\n        return $curl;\n    }", "language": "php", "code": "private static function curl(string $endpoint)\n    {\n        // Get the base URL and App Key.\n        $baseUrl = self::$_baseUrl;\n\n        // Create a cURL session.\n        $curl = curl_init();\n\n        // Set the options necessary for communicating with the UCRM Server.\n        curl_setopt($curl, CURLOPT_URL, $baseUrl.$endpoint);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_HEADER, false);\n\n        // IF the Base URL is using HTTPS AND is requesting localhost...\n        if(Strings::startsWith(self::$_baseUrl, \"https://localhost\"))\n        {\n            // THEN disable host/peer certificate checks, as localhost cannot resolve to a valid name for SSL!\n            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n        }\n        else\n        {\n            // OTHERWISE, enable host/peer certificate checks, this is fine for all HTTP URLs (including localhost)!\n            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2); // DEFAULT\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 1); // DEFAULT\n\n            // Downloaded from: https://curl.haxx.se/docs/caextract.html\n            curl_setopt($curl, CURLOPT_CAINFO, __DIR__ . \"/Certificates/cacert-2018-10-17.pem\");\n            curl_setopt($curl, CURLOPT_CAPATH, __DIR__ . \"/Certificates/cacert-2018-10-17.pem\");\n        }\n\n        // Set the necessary HTTP HEADERS.\n        curl_setopt($curl, CURLOPT_HTTPHEADER, self::$_headers);\n\n        return $curl;\n    }", "code_tokens": ["private", "static", "function", "curl", "(", "string", "$", "endpoint", ")", "{", "// Get the base URL and App Key.", "$", "baseUrl", "=", "self", "::", "$", "_baseUrl", ";", "// Create a cURL session.", "$", "curl", "=", "curl_init", "(", ")", ";", "// Set the options necessary for communicating with the UCRM Server.", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_URL", ",", "$", "baseUrl", ".", "$", "endpoint", ")", ";", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_RETURNTRANSFER", ",", "true", ")", ";", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_HEADER", ",", "false", ")", ";", "// IF the Base URL is using HTTPS AND is requesting localhost...", "if", "(", "Strings", "::", "startsWith", "(", "self", "::", "$", "_baseUrl", ",", "\"https://localhost\"", ")", ")", "{", "// THEN disable host/peer certificate checks, as localhost cannot resolve to a valid name for SSL!", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_SSL_VERIFYHOST", ",", "0", ")", ";", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_SSL_VERIFYPEER", ",", "0", ")", ";", "}", "else", "{", "// OTHERWISE, enable host/peer certificate checks, this is fine for all HTTP URLs (including localhost)!", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_SSL_VERIFYHOST", ",", "2", ")", ";", "// DEFAULT", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_SSL_VERIFYPEER", ",", "1", ")", ";", "// DEFAULT", "// Downloaded from: https://curl.haxx.se/docs/caextract.html", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_CAINFO", ",", "__DIR__", ".", "\"/Certificates/cacert-2018-10-17.pem\"", ")", ";", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_CAPATH", ",", "__DIR__", ".", "\"/Certificates/cacert-2018-10-17.pem\"", ")", ";", "}", "// Set the necessary HTTP HEADERS.", "curl_setopt", "(", "$", "curl", ",", "CURLOPT_HTTPHEADER", ",", "self", "::", "$", "_headers", ")", ";", "return", "$", "curl", ";", "}"], "docstring": "Creates a cURL session with the necessary options, headers and endpoint to communicate with the UCRM Server.\n\n@param string $endpoint The endpoint at which to make the request.\n@return resource Returns a cURL session.", "docstring_tokens": ["Creates", "a", "cURL", "session", "with", "the", "necessary", "options", "headers", "and", "endpoint", "to", "communicate", "with", "the", "UCRM", "Server", "."], "sha": "2949215a972151fce5c0c03b292f6342b6754a14", "url": "https://github.com/mvqn/rest/blob/2949215a972151fce5c0c03b292f6342b6754a14/src/MVQN/REST/RestClient.php#L227-L262", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/UrlCurrent.php", "func_name": "UrlCurrent.isLocalhost", "original_string": "public function isLocalhost(): bool\n    {\n        if (($is = &$this->cacheKey(__FUNCTION__)) !== null) {\n            return $is; // Cached this already.\n        }\n        if (defined('LOCALHOST') && LOCALHOST) {\n            return $is = true;\n        } elseif (preg_match('/(?:\\b(?:localhost|127\\.0\\.0\\.1)\\b|\\.vm)$/ui', $this->host(false))) {\n            return $is = true;\n        }\n        return $is = false;\n    }", "language": "php", "code": "public function isLocalhost(): bool\n    {\n        if (($is = &$this->cacheKey(__FUNCTION__)) !== null) {\n            return $is; // Cached this already.\n        }\n        if (defined('LOCALHOST') && LOCALHOST) {\n            return $is = true;\n        } elseif (preg_match('/(?:\\b(?:localhost|127\\.0\\.0\\.1)\\b|\\.vm)$/ui', $this->host(false))) {\n            return $is = true;\n        }\n        return $is = false;\n    }", "code_tokens": ["public", "function", "isLocalhost", "(", ")", ":", "bool", "{", "if", "(", "(", "$", "is", "=", "&", "$", "this", "->", "cacheKey", "(", "__FUNCTION__", ")", ")", "!==", "null", ")", "{", "return", "$", "is", ";", "// Cached this already.", "}", "if", "(", "defined", "(", "'LOCALHOST'", ")", "&&", "LOCALHOST", ")", "{", "return", "$", "is", "=", "true", ";", "}", "elseif", "(", "preg_match", "(", "'/(?:\\b(?:localhost|127\\.0\\.0\\.1)\\b|\\.vm)$/ui'", ",", "$", "this", "->", "host", "(", "false", ")", ")", ")", "{", "return", "$", "is", "=", "true", ";", "}", "return", "$", "is", "=", "false", ";", "}"], "docstring": "Current URL is on a localhost?\n\n@since 150424 Initial release.\n\n@return bool `TRUE` if current URL is on a localhost.", "docstring_tokens": ["Current", "URL", "is", "on", "a", "localhost?"], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/UrlCurrent.php#L263-L274", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/QBXML/Object.php", "func_name": "QuickBooks_QBXML_Object.set", "original_string": "public function set($key, $value, $cast = true)\n\t{\n\t\tif (is_array($value))\n\t\t{\n\t\t\t$this->_object[$key] = $value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//print('set(' . $key . ', ' . $value . ', ' . $cast . ')' . \"\\n\");\n\t\t\t\n\t\t\tif ($cast and $value != '__EMPTY__')\n\t\t\t{\n\t\t\t\t$value = QuickBooks_Cast::cast($this->object(), $key, $value, true, false);\n\t\t\t}\n\t\t\t\n\t\t\t//print('\tsetting [' . $key . '] to value {' . $value . '}' . \"\\n\");\n\t\t\t\n\t\t\t$this->_object[$key] = $value;\n\t\t}\n\t\t\n\t\treturn true;\n\t}", "language": "php", "code": "public function set($key, $value, $cast = true)\n\t{\n\t\tif (is_array($value))\n\t\t{\n\t\t\t$this->_object[$key] = $value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//print('set(' . $key . ', ' . $value . ', ' . $cast . ')' . \"\\n\");\n\t\t\t\n\t\t\tif ($cast and $value != '__EMPTY__')\n\t\t\t{\n\t\t\t\t$value = QuickBooks_Cast::cast($this->object(), $key, $value, true, false);\n\t\t\t}\n\t\t\t\n\t\t\t//print('\tsetting [' . $key . '] to value {' . $value . '}' . \"\\n\");\n\t\t\t\n\t\t\t$this->_object[$key] = $value;\n\t\t}\n\t\t\n\t\treturn true;\n\t}", "code_tokens": ["public", "function", "set", "(", "$", "key", ",", "$", "value", ",", "$", "cast", "=", "true", ")", "{", "if", "(", "is_array", "(", "$", "value", ")", ")", "{", "$", "this", "->", "_object", "[", "$", "key", "]", "=", "$", "value", ";", "}", "else", "{", "//print('set(' . $key . ', ' . $value . ', ' . $cast . ')' . \"\\n\");", "if", "(", "$", "cast", "and", "$", "value", "!=", "'__EMPTY__'", ")", "{", "$", "value", "=", "QuickBooks_Cast", "::", "cast", "(", "$", "this", "->", "object", "(", ")", ",", "$", "key", ",", "$", "value", ",", "true", ",", "false", ")", ";", "}", "//print('\tsetting [' . $key . '] to value {' . $value . '}' . \"\\n\");", "$", "this", "->", "_object", "[", "$", "key", "]", "=", "$", "value", ";", "}", "return", "true", ";", "}"], "docstring": "Set a value within the object\n\n@param string $key\n@param string $value\n@return boolean", "docstring_tokens": ["Set", "a", "value", "within", "the", "object"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/QBXML/Object.php#L132-L153", "partition": "test"}
{"repo": "WordPress-Coding-Standards/WordPress-Coding-Standards", "path": "WordPress/Sniff.php", "func_name": "Sniff.is_token_namespaced", "original_string": "protected function is_token_namespaced( $stackPtr ) {\n\t\t$prev = $this->phpcsFile->findPrevious( Tokens::$emptyTokens, ( $stackPtr - 1 ), null, true, null, true );\n\n\t\tif ( false === $prev ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( \\T_NS_SEPARATOR !== $this->tokens[ $prev ]['code'] ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$before_prev = $this->phpcsFile->findPrevious( Tokens::$emptyTokens, ( $prev - 1 ), null, true, null, true );\n\t\tif ( false === $before_prev ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( \\T_STRING !== $this->tokens[ $before_prev ]['code']\n\t\t\t&& \\T_NAMESPACE !== $this->tokens[ $before_prev ]['code']\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}", "language": "php", "code": "protected function is_token_namespaced( $stackPtr ) {\n\t\t$prev = $this->phpcsFile->findPrevious( Tokens::$emptyTokens, ( $stackPtr - 1 ), null, true, null, true );\n\n\t\tif ( false === $prev ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( \\T_NS_SEPARATOR !== $this->tokens[ $prev ]['code'] ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$before_prev = $this->phpcsFile->findPrevious( Tokens::$emptyTokens, ( $prev - 1 ), null, true, null, true );\n\t\tif ( false === $before_prev ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( \\T_STRING !== $this->tokens[ $before_prev ]['code']\n\t\t\t&& \\T_NAMESPACE !== $this->tokens[ $before_prev ]['code']\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}", "code_tokens": ["protected", "function", "is_token_namespaced", "(", "$", "stackPtr", ")", "{", "$", "prev", "=", "$", "this", "->", "phpcsFile", "->", "findPrevious", "(", "Tokens", "::", "$", "emptyTokens", ",", "(", "$", "stackPtr", "-", "1", ")", ",", "null", ",", "true", ",", "null", ",", "true", ")", ";", "if", "(", "false", "===", "$", "prev", ")", "{", "return", "false", ";", "}", "if", "(", "\\", "T_NS_SEPARATOR", "!==", "$", "this", "->", "tokens", "[", "$", "prev", "]", "[", "'code'", "]", ")", "{", "return", "false", ";", "}", "$", "before_prev", "=", "$", "this", "->", "phpcsFile", "->", "findPrevious", "(", "Tokens", "::", "$", "emptyTokens", ",", "(", "$", "prev", "-", "1", ")", ",", "null", ",", "true", ",", "null", ",", "true", ")", ";", "if", "(", "false", "===", "$", "before_prev", ")", "{", "return", "false", ";", "}", "if", "(", "\\", "T_STRING", "!==", "$", "this", "->", "tokens", "[", "$", "before_prev", "]", "[", "'code'", "]", "&&", "\\", "T_NAMESPACE", "!==", "$", "this", "->", "tokens", "[", "$", "before_prev", "]", "[", "'code'", "]", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "Check if a particular token is prefixed with a namespace.\n\n@internal This will give a false positive if the file is not namespaced and the token is prefixed\nwith `namespace\\`.\n\n@since 2.1.0\n\n@param int $stackPtr The index of the token in the stack.\n\n@return bool", "docstring_tokens": ["Check", "if", "a", "particular", "token", "is", "prefixed", "with", "a", "namespace", "."], "sha": "04bfa1284ca652e8e9befe82134f440cc31f655d", "url": "https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/blob/04bfa1284ca652e8e9befe82134f440cc31f655d/WordPress/Sniff.php#L1634-L1657", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Response.php", "func_name": "Response.globalHeaders", "original_string": "public static function globalHeaders($name = null, $value = null, $replace = true) {\n        if (self::$globalHeaders === null) {\n            self::$globalHeaders = [\n                'P3P' => 'CP=\"CAO PSA OUR\"'\n            ];\n        }\n\n        if ($name === null) {\n            return self::$globalHeaders;\n        }\n\n        $headers = static::splitHeaders($name, $value);\n\n        if (is_string($headers)) {\n            return val($headers, self::$globalHeaders);\n        }\n\n        foreach ($headers as $name => $value) {\n            if ($replace || !isset(self::$globalHeaders[$name])) {\n                self::$globalHeaders[$name] = $value;\n            } else {\n                self::$globalHeaders[$name] = array_merge((array)self::$globalHeaders, [$value]);\n            }\n        }\n        return null;\n    }", "language": "php", "code": "public static function globalHeaders($name = null, $value = null, $replace = true) {\n        if (self::$globalHeaders === null) {\n            self::$globalHeaders = [\n                'P3P' => 'CP=\"CAO PSA OUR\"'\n            ];\n        }\n\n        if ($name === null) {\n            return self::$globalHeaders;\n        }\n\n        $headers = static::splitHeaders($name, $value);\n\n        if (is_string($headers)) {\n            return val($headers, self::$globalHeaders);\n        }\n\n        foreach ($headers as $name => $value) {\n            if ($replace || !isset(self::$globalHeaders[$name])) {\n                self::$globalHeaders[$name] = $value;\n            } else {\n                self::$globalHeaders[$name] = array_merge((array)self::$globalHeaders, [$value]);\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "static", "function", "globalHeaders", "(", "$", "name", "=", "null", ",", "$", "value", "=", "null", ",", "$", "replace", "=", "true", ")", "{", "if", "(", "self", "::", "$", "globalHeaders", "===", "null", ")", "{", "self", "::", "$", "globalHeaders", "=", "[", "'P3P'", "=>", "'CP=\"CAO PSA OUR\"'", "]", ";", "}", "if", "(", "$", "name", "===", "null", ")", "{", "return", "self", "::", "$", "globalHeaders", ";", "}", "$", "headers", "=", "static", "::", "splitHeaders", "(", "$", "name", ",", "$", "value", ")", ";", "if", "(", "is_string", "(", "$", "headers", ")", ")", "{", "return", "val", "(", "$", "headers", ",", "self", "::", "$", "globalHeaders", ")", ";", "}", "foreach", "(", "$", "headers", "as", "$", "name", "=>", "$", "value", ")", "{", "if", "(", "$", "replace", "||", "!", "isset", "(", "self", "::", "$", "globalHeaders", "[", "$", "name", "]", ")", ")", "{", "self", "::", "$", "globalHeaders", "[", "$", "name", "]", "=", "$", "value", ";", "}", "else", "{", "self", "::", "$", "globalHeaders", "[", "$", "name", "]", "=", "array_merge", "(", "(", "array", ")", "self", "::", "$", "globalHeaders", ",", "[", "$", "value", "]", ")", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Gets or sets global headers.\n\nThe global headers exist to allow code to queue up headers before the response has been constructed.\n\n@param string|array|null $name The name of the header or an array of headers.\n@param string|null $value A new value for the header or null to get the current header.\n@param bool $replace Whether or not to replace the current header or append.\n@return string|array Returns one of the following:\n- string|array: Returns the current value of the header at {@link $name}.\n- array: Returns the entire global headers array when {@link $name} is not passed.\n- null: Returns `null` when setting a global header.", "docstring_tokens": ["Gets", "or", "sets", "global", "headers", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Response.php#L427-L452", "partition": "test"}
{"repo": "EXSyst/Security", "path": "TOTP/TOTPGenerator.php", "func_name": "TOTPGenerator.generate", "original_string": "public static function generate($stamp, $key)\n    {\n        $key = self::base32_decode($key);\n        if (strlen($key) < 8) {\n            throw new TooShortKeyException('Secret key is too short. Must be at least 16 base 32 characters');\n        }\n\n        $bin_counter = pack('N*', 0).pack('N*', $stamp);        // Stamp must be 64-bit int\n        $hash = hash_hmac('sha1', $bin_counter, $key, true);\n\n        return str_pad(self::oath_truncate($hash), 6, '0', STR_PAD_LEFT);\n    }", "language": "php", "code": "public static function generate($stamp, $key)\n    {\n        $key = self::base32_decode($key);\n        if (strlen($key) < 8) {\n            throw new TooShortKeyException('Secret key is too short. Must be at least 16 base 32 characters');\n        }\n\n        $bin_counter = pack('N*', 0).pack('N*', $stamp);        // Stamp must be 64-bit int\n        $hash = hash_hmac('sha1', $bin_counter, $key, true);\n\n        return str_pad(self::oath_truncate($hash), 6, '0', STR_PAD_LEFT);\n    }", "code_tokens": ["public", "static", "function", "generate", "(", "$", "stamp", ",", "$", "key", ")", "{", "$", "key", "=", "self", "::", "base32_decode", "(", "$", "key", ")", ";", "if", "(", "strlen", "(", "$", "key", ")", "<", "8", ")", "{", "throw", "new", "TooShortKeyException", "(", "'Secret key is too short. Must be at least 16 base 32 characters'", ")", ";", "}", "$", "bin_counter", "=", "pack", "(", "'N*'", ",", "0", ")", ".", "pack", "(", "'N*'", ",", "$", "stamp", ")", ";", "// Stamp must be 64-bit int", "$", "hash", "=", "hash_hmac", "(", "'sha1'", ",", "$", "bin_counter", ",", "$", "key", ",", "true", ")", ";", "return", "str_pad", "(", "self", "::", "oath_truncate", "(", "$", "hash", ")", ",", "6", ",", "'0'", ",", "STR_PAD_LEFT", ")", ";", "}"], "docstring": "Generates a TOTP code.\n\n@param int    $stamp Unit time\n@param string $key   TOTP key\n\n@return string TOTP corresponding to the key and stamp provided", "docstring_tokens": ["Generates", "a", "TOTP", "code", "."], "sha": "e59126ce49e712221d2fe0d8a5afca14fb65febd", "url": "https://github.com/EXSyst/Security/blob/e59126ce49e712221d2fe0d8a5afca14fb65febd/TOTP/TOTPGenerator.php#L53-L64", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/Api/Events.php", "func_name": "Events.getCollectionParams", "original_string": "public function getCollectionParams()\n    {\n        return array(\n            'page' => array(\n                'description' => 'Current page of the collection.',\n                'type' => 'integer',\n                'default' => 1,\n                'sanitize_callback' => 'absint',\n            ),\n            'per_page' => array(\n                'description' => 'Maximum number of items to be returned in result collection.',\n                'type' => 'integer',\n                'default' => 10,\n                'sanitize_callback' => array($this, 'sanitizePerPage'),\n            ),\n            'start_date' => array(\n                'description' => 'Get events from this date',\n                'type' => 'string',\n                'default' => date('Y-m-d H:i:s', strtotime(\"today midnight\")),\n                'sanitize_callback' => array($this, 'sanitizeDate'),\n            ),\n            'end_date' => array(\n                'description' => 'Get events to this date',\n                'type' => 'string',\n                'default' => date('Y-m-d H:i:s', strtotime(\"today midnight\")),\n                'sanitize_callback' => array($this, 'sanitizeEndDate'),\n            ),\n            'categories' => array(\n                'description' => 'Filter by categories',\n                'type' => 'object',\n                'default' => null,\n            ),\n            'tags' => array(\n                'description' => 'Filter by tags',\n                'type' => 'object',\n                'default' => null,\n            ),\n            'groups' => array(\n                'description' => 'Filter by groups',\n                'type' => 'object',\n                'default' => null,\n            ),\n            'lat' => array(\n                'description' => 'Filter by coordinates',\n                'type' => 'string',\n                'default' => null,\n            ),\n            'lng' => array(\n                'description' => 'Filter by coordinates',\n                'type' => 'string',\n                'default' => null,\n            ),\n            'distance' => array(\n                'description' => 'Distance (km) radius from coordinates',\n                'type' => 'float',\n                'default' => null,\n            ),\n            'module_id' => array(\n                'description' => 'The module ID',\n                'type' => 'integer',\n                'default' => 0,\n                'sanitize_callback' => 'absint',\n            ),\n            'search_string' => array(\n                'description' => 'Filter by search string',\n                'type' => 'string',\n                'default' => '',\n                'sanitize_callback' => 'sanitize_text_field',\n            ),\n            'age_group' => array(\n                'description' => 'Filter by age group.',\n                'type' => 'object',\n                'default' => null,\n            ),\n            'lang' => array(\n                'description' => 'Filter by language.',\n                'type' => 'string',\n                'default' => null,\n            ),\n        );\n    }", "language": "php", "code": "public function getCollectionParams()\n    {\n        return array(\n            'page' => array(\n                'description' => 'Current page of the collection.',\n                'type' => 'integer',\n                'default' => 1,\n                'sanitize_callback' => 'absint',\n            ),\n            'per_page' => array(\n                'description' => 'Maximum number of items to be returned in result collection.',\n                'type' => 'integer',\n                'default' => 10,\n                'sanitize_callback' => array($this, 'sanitizePerPage'),\n            ),\n            'start_date' => array(\n                'description' => 'Get events from this date',\n                'type' => 'string',\n                'default' => date('Y-m-d H:i:s', strtotime(\"today midnight\")),\n                'sanitize_callback' => array($this, 'sanitizeDate'),\n            ),\n            'end_date' => array(\n                'description' => 'Get events to this date',\n                'type' => 'string',\n                'default' => date('Y-m-d H:i:s', strtotime(\"today midnight\")),\n                'sanitize_callback' => array($this, 'sanitizeEndDate'),\n            ),\n            'categories' => array(\n                'description' => 'Filter by categories',\n                'type' => 'object',\n                'default' => null,\n            ),\n            'tags' => array(\n                'description' => 'Filter by tags',\n                'type' => 'object',\n                'default' => null,\n            ),\n            'groups' => array(\n                'description' => 'Filter by groups',\n                'type' => 'object',\n                'default' => null,\n            ),\n            'lat' => array(\n                'description' => 'Filter by coordinates',\n                'type' => 'string',\n                'default' => null,\n            ),\n            'lng' => array(\n                'description' => 'Filter by coordinates',\n                'type' => 'string',\n                'default' => null,\n            ),\n            'distance' => array(\n                'description' => 'Distance (km) radius from coordinates',\n                'type' => 'float',\n                'default' => null,\n            ),\n            'module_id' => array(\n                'description' => 'The module ID',\n                'type' => 'integer',\n                'default' => 0,\n                'sanitize_callback' => 'absint',\n            ),\n            'search_string' => array(\n                'description' => 'Filter by search string',\n                'type' => 'string',\n                'default' => '',\n                'sanitize_callback' => 'sanitize_text_field',\n            ),\n            'age_group' => array(\n                'description' => 'Filter by age group.',\n                'type' => 'object',\n                'default' => null,\n            ),\n            'lang' => array(\n                'description' => 'Filter by language.',\n                'type' => 'string',\n                'default' => null,\n            ),\n        );\n    }", "code_tokens": ["public", "function", "getCollectionParams", "(", ")", "{", "return", "array", "(", "'page'", "=>", "array", "(", "'description'", "=>", "'Current page of the collection.'", ",", "'type'", "=>", "'integer'", ",", "'default'", "=>", "1", ",", "'sanitize_callback'", "=>", "'absint'", ",", ")", ",", "'per_page'", "=>", "array", "(", "'description'", "=>", "'Maximum number of items to be returned in result collection.'", ",", "'type'", "=>", "'integer'", ",", "'default'", "=>", "10", ",", "'sanitize_callback'", "=>", "array", "(", "$", "this", ",", "'sanitizePerPage'", ")", ",", ")", ",", "'start_date'", "=>", "array", "(", "'description'", "=>", "'Get events from this date'", ",", "'type'", "=>", "'string'", ",", "'default'", "=>", "date", "(", "'Y-m-d H:i:s'", ",", "strtotime", "(", "\"today midnight\"", ")", ")", ",", "'sanitize_callback'", "=>", "array", "(", "$", "this", ",", "'sanitizeDate'", ")", ",", ")", ",", "'end_date'", "=>", "array", "(", "'description'", "=>", "'Get events to this date'", ",", "'type'", "=>", "'string'", ",", "'default'", "=>", "date", "(", "'Y-m-d H:i:s'", ",", "strtotime", "(", "\"today midnight\"", ")", ")", ",", "'sanitize_callback'", "=>", "array", "(", "$", "this", ",", "'sanitizeEndDate'", ")", ",", ")", ",", "'categories'", "=>", "array", "(", "'description'", "=>", "'Filter by categories'", ",", "'type'", "=>", "'object'", ",", "'default'", "=>", "null", ",", ")", ",", "'tags'", "=>", "array", "(", "'description'", "=>", "'Filter by tags'", ",", "'type'", "=>", "'object'", ",", "'default'", "=>", "null", ",", ")", ",", "'groups'", "=>", "array", "(", "'description'", "=>", "'Filter by groups'", ",", "'type'", "=>", "'object'", ",", "'default'", "=>", "null", ",", ")", ",", "'lat'", "=>", "array", "(", "'description'", "=>", "'Filter by coordinates'", ",", "'type'", "=>", "'string'", ",", "'default'", "=>", "null", ",", ")", ",", "'lng'", "=>", "array", "(", "'description'", "=>", "'Filter by coordinates'", ",", "'type'", "=>", "'string'", ",", "'default'", "=>", "null", ",", ")", ",", "'distance'", "=>", "array", "(", "'description'", "=>", "'Distance (km) radius from coordinates'", ",", "'type'", "=>", "'float'", ",", "'default'", "=>", "null", ",", ")", ",", "'module_id'", "=>", "array", "(", "'description'", "=>", "'The module ID'", ",", "'type'", "=>", "'integer'", ",", "'default'", "=>", "0", ",", "'sanitize_callback'", "=>", "'absint'", ",", ")", ",", "'search_string'", "=>", "array", "(", "'description'", "=>", "'Filter by search string'", ",", "'type'", "=>", "'string'", ",", "'default'", "=>", "''", ",", "'sanitize_callback'", "=>", "'sanitize_text_field'", ",", ")", ",", "'age_group'", "=>", "array", "(", "'description'", "=>", "'Filter by age group.'", ",", "'type'", "=>", "'object'", ",", "'default'", "=>", "null", ",", ")", ",", "'lang'", "=>", "array", "(", "'description'", "=>", "'Filter by language.'", ",", "'type'", "=>", "'string'", ",", "'default'", "=>", "null", ",", ")", ",", ")", ";", "}"], "docstring": "Get the query params for collections\n@return array", "docstring_tokens": ["Get", "the", "query", "params", "for", "collections"], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/Api/Events.php#L52-L132", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Client/GuzzleClient.php", "func_name": "GuzzleClient.put", "original_string": "public function put(string $uri, array $options = []): ResponseInterface\n    {\n        return $this->guzzle->put($uri, $options);\n    }", "language": "php", "code": "public function put(string $uri, array $options = []): ResponseInterface\n    {\n        return $this->guzzle->put($uri, $options);\n    }", "code_tokens": ["public", "function", "put", "(", "string", "$", "uri", ",", "array", "$", "options", "=", "[", "]", ")", ":", "ResponseInterface", "{", "return", "$", "this", "->", "guzzle", "->", "put", "(", "$", "uri", ",", "$", "options", ")", ";", "}"], "docstring": "Make a put request.\n\n@param string $uri     The uri to request\n@param array  $options [optional] Custom options for request\n\n@return \\Psr\\Http\\Message\\ResponseInterface", "docstring_tokens": ["Make", "a", "put", "request", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Client/GuzzleClient.php#L106-L109", "partition": "test"}
{"repo": "orchestral/extension", "path": "src/Plugin.php", "func_name": "Plugin.bootstrapForm", "original_string": "protected function bootstrapForm(Application $app)\n    {\n        $this->attachListenerOn($app, 'form', function (Fluent $model, FormBuilder $form) {\n            $this->form($model, $form);\n        });\n    }", "language": "php", "code": "protected function bootstrapForm(Application $app)\n    {\n        $this->attachListenerOn($app, 'form', function (Fluent $model, FormBuilder $form) {\n            $this->form($model, $form);\n        });\n    }", "code_tokens": ["protected", "function", "bootstrapForm", "(", "Application", "$", "app", ")", "{", "$", "this", "->", "attachListenerOn", "(", "$", "app", ",", "'form'", ",", "function", "(", "Fluent", "$", "model", ",", "FormBuilder", "$", "form", ")", "{", "$", "this", "->", "form", "(", "$", "model", ",", "$", "form", ")", ";", "}", ")", ";", "}"], "docstring": "Bootstrap the form.\n\n@param  \\Illuminate\\Contracts\\Foundation\\Application  $app\n\n@return void", "docstring_tokens": ["Bootstrap", "the", "form", "."], "sha": "d461c988ba6ec0200fc8f4e35b515e6710d3ef0a", "url": "https://github.com/orchestral/extension/blob/d461c988ba6ec0200fc8f4e35b515e6710d3ef0a/src/Plugin.php#L90-L95", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/FileSize.php", "func_name": "FileSize.remoteBytes", "original_string": "public function remoteBytes(string $url, bool $report_failure = false, int $expires_after = 86400): int\n    {\n        if (!$url) { // If no URL, no file size.\n            return $report_failure ? -1 : 0;\n        }\n        if (($bytes = $this->c::dirCacheGet(__METHOD__, $url)) !== null) {\n            return $bytes; // Cached this already.\n        } // Get from an existing cache if at all possible.\n\n        $r = $this->c::remoteResponse('HEAD::'.$url, [\n            'max_con_secs' => 5, 'max_stream_secs' => 5,\n        ]);\n        if ($r->code === 200 && isset($r->headers['content-length'])) {\n            $bytes = (int) $r->headers['content-length'];\n        } else {\n            $bytes = $report_failure ? -1 : 0; // Not possible.\n        }\n        $this->c::dirCacheSet(__METHOD__, $url, $bytes, $expires_after);\n        return $bytes; // Cached for future reference.\n    }", "language": "php", "code": "public function remoteBytes(string $url, bool $report_failure = false, int $expires_after = 86400): int\n    {\n        if (!$url) { // If no URL, no file size.\n            return $report_failure ? -1 : 0;\n        }\n        if (($bytes = $this->c::dirCacheGet(__METHOD__, $url)) !== null) {\n            return $bytes; // Cached this already.\n        } // Get from an existing cache if at all possible.\n\n        $r = $this->c::remoteResponse('HEAD::'.$url, [\n            'max_con_secs' => 5, 'max_stream_secs' => 5,\n        ]);\n        if ($r->code === 200 && isset($r->headers['content-length'])) {\n            $bytes = (int) $r->headers['content-length'];\n        } else {\n            $bytes = $report_failure ? -1 : 0; // Not possible.\n        }\n        $this->c::dirCacheSet(__METHOD__, $url, $bytes, $expires_after);\n        return $bytes; // Cached for future reference.\n    }", "code_tokens": ["public", "function", "remoteBytes", "(", "string", "$", "url", ",", "bool", "$", "report_failure", "=", "false", ",", "int", "$", "expires_after", "=", "86400", ")", ":", "int", "{", "if", "(", "!", "$", "url", ")", "{", "// If no URL, no file size.", "return", "$", "report_failure", "?", "-", "1", ":", "0", ";", "}", "if", "(", "(", "$", "bytes", "=", "$", "this", "->", "c", "::", "dirCacheGet", "(", "__METHOD__", ",", "$", "url", ")", ")", "!==", "null", ")", "{", "return", "$", "bytes", ";", "// Cached this already.", "}", "// Get from an existing cache if at all possible.", "$", "r", "=", "$", "this", "->", "c", "::", "remoteResponse", "(", "'HEAD::'", ".", "$", "url", ",", "[", "'max_con_secs'", "=>", "5", ",", "'max_stream_secs'", "=>", "5", ",", "]", ")", ";", "if", "(", "$", "r", "->", "code", "===", "200", "&&", "isset", "(", "$", "r", "->", "headers", "[", "'content-length'", "]", ")", ")", "{", "$", "bytes", "=", "(", "int", ")", "$", "r", "->", "headers", "[", "'content-length'", "]", ";", "}", "else", "{", "$", "bytes", "=", "$", "report_failure", "?", "-", "1", ":", "0", ";", "// Not possible.", "}", "$", "this", "->", "c", "::", "dirCacheSet", "(", "__METHOD__", ",", "$", "url", ",", "$", "bytes", ",", "$", "expires_after", ")", ";", "return", "$", "bytes", ";", "// Cached for future reference.", "}"], "docstring": "Determines remote file size.\n\n@since 170824.30708 Remote file size.\n\n@param string $url            URL to check size of.\n@param int    $expires_after  Cache expires after (in seconds).\n@param bool   $report_failure If true, return `-1` on failure.\n\n@return int Remote file size, in bytes.\n@note If `$report_failure` is true, `-1` indicates failure.\nFor example, if file does not exist, or it has no `content-length` header.", "docstring_tokens": ["Determines", "remote", "file", "size", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/FileSize.php#L135-L154", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/DataService/DataService.php", "func_name": "DataService.getCompanyInfo", "original_string": "public function getCompanyInfo()\n    {\n        $currentServiceContext = $this->getServiceContext();\n        if (!isset($currentServiceContext) || empty($currentServiceContext->realmId)) {\n            throw new SdkException(\"Please Setup Service Context before making get CompanyInfo call.\");\n        }\n        //The CompanyInfo URL\n        $uri = implode(CoreConstants::SLASH_CHAR, array('company', $currentServiceContext->realmId, 'companyinfo', $currentServiceContext->realmId));\n        $requestParameters = new RequestParameters($uri, 'GET', CoreConstants::CONTENTTYPE_APPLICATIONXML, null);\n        $restRequestHandler = $this->getRestHandler();\n        list($responseCode, $responseBody) = $restRequestHandler->sendRequest($requestParameters, null, null, $this->isThrownExceptionOnError());\n        $faultHandler = $restRequestHandler->getFaultHandler();\n        //$faultHandler now is true or false\n        if ($faultHandler) {\n            $this->lastError = $faultHandler;\n            return null;\n        } else {\n            $this->lastError = false;\n            $parsedResponseBody = $this->getResponseSerializer()->Deserialize($responseBody, true);\n            return $parsedResponseBody;\n        }\n    }", "language": "php", "code": "public function getCompanyInfo()\n    {\n        $currentServiceContext = $this->getServiceContext();\n        if (!isset($currentServiceContext) || empty($currentServiceContext->realmId)) {\n            throw new SdkException(\"Please Setup Service Context before making get CompanyInfo call.\");\n        }\n        //The CompanyInfo URL\n        $uri = implode(CoreConstants::SLASH_CHAR, array('company', $currentServiceContext->realmId, 'companyinfo', $currentServiceContext->realmId));\n        $requestParameters = new RequestParameters($uri, 'GET', CoreConstants::CONTENTTYPE_APPLICATIONXML, null);\n        $restRequestHandler = $this->getRestHandler();\n        list($responseCode, $responseBody) = $restRequestHandler->sendRequest($requestParameters, null, null, $this->isThrownExceptionOnError());\n        $faultHandler = $restRequestHandler->getFaultHandler();\n        //$faultHandler now is true or false\n        if ($faultHandler) {\n            $this->lastError = $faultHandler;\n            return null;\n        } else {\n            $this->lastError = false;\n            $parsedResponseBody = $this->getResponseSerializer()->Deserialize($responseBody, true);\n            return $parsedResponseBody;\n        }\n    }", "code_tokens": ["public", "function", "getCompanyInfo", "(", ")", "{", "$", "currentServiceContext", "=", "$", "this", "->", "getServiceContext", "(", ")", ";", "if", "(", "!", "isset", "(", "$", "currentServiceContext", ")", "||", "empty", "(", "$", "currentServiceContext", "->", "realmId", ")", ")", "{", "throw", "new", "SdkException", "(", "\"Please Setup Service Context before making get CompanyInfo call.\"", ")", ";", "}", "//The CompanyInfo URL", "$", "uri", "=", "implode", "(", "CoreConstants", "::", "SLASH_CHAR", ",", "array", "(", "'company'", ",", "$", "currentServiceContext", "->", "realmId", ",", "'companyinfo'", ",", "$", "currentServiceContext", "->", "realmId", ")", ")", ";", "$", "requestParameters", "=", "new", "RequestParameters", "(", "$", "uri", ",", "'GET'", ",", "CoreConstants", "::", "CONTENTTYPE_APPLICATIONXML", ",", "null", ")", ";", "$", "restRequestHandler", "=", "$", "this", "->", "getRestHandler", "(", ")", ";", "list", "(", "$", "responseCode", ",", "$", "responseBody", ")", "=", "$", "restRequestHandler", "->", "sendRequest", "(", "$", "requestParameters", ",", "null", ",", "null", ",", "$", "this", "->", "isThrownExceptionOnError", "(", ")", ")", ";", "$", "faultHandler", "=", "$", "restRequestHandler", "->", "getFaultHandler", "(", ")", ";", "//$faultHandler now is true or false", "if", "(", "$", "faultHandler", ")", "{", "$", "this", "->", "lastError", "=", "$", "faultHandler", ";", "return", "null", ";", "}", "else", "{", "$", "this", "->", "lastError", "=", "false", ";", "$", "parsedResponseBody", "=", "$", "this", "->", "getResponseSerializer", "(", ")", "->", "Deserialize", "(", "$", "responseBody", ",", "true", ")", ";", "return", "$", "parsedResponseBody", ";", "}", "}"], "docstring": "Get the Company Information\n@return IPPCompanyInfo   CompanyInformation", "docstring_tokens": ["Get", "the", "Company", "Information"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/DataService/DataService.php#L1615-L1636", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Http/NativeResponseBuilder.php", "func_name": "NativeResponseBuilder.route", "original_string": "public function route(\n        string $route,\n        array $parameters = [],\n        int $statusCode = StatusCode::FOUND,\n        array $headers = []\n    ): RedirectResponse {\n        return $this->app->redirectRoute(\n            $route,\n            $parameters,\n            $statusCode,\n            $headers\n        );\n    }", "language": "php", "code": "public function route(\n        string $route,\n        array $parameters = [],\n        int $statusCode = StatusCode::FOUND,\n        array $headers = []\n    ): RedirectResponse {\n        return $this->app->redirectRoute(\n            $route,\n            $parameters,\n            $statusCode,\n            $headers\n        );\n    }", "code_tokens": ["public", "function", "route", "(", "string", "$", "route", ",", "array", "$", "parameters", "=", "[", "]", ",", "int", "$", "statusCode", "=", "StatusCode", "::", "FOUND", ",", "array", "$", "headers", "=", "[", "]", ")", ":", "RedirectResponse", "{", "return", "$", "this", "->", "app", "->", "redirectRoute", "(", "$", "route", ",", "$", "parameters", ",", "$", "statusCode", ",", "$", "headers", ")", ";", "}"], "docstring": "Redirect to a named route response builder.\n\n@param string $route      The route to match\n@param array  $parameters [optional] Any parameters to set for dynamic\nroutes\n@param int    $statusCode [optional] The response status code\n@param array  $headers    [optional] An array of response headers\n\n@return \\Valkyrja\\Http\\RedirectResponse", "docstring_tokens": ["Redirect", "to", "a", "named", "route", "response", "builder", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Http/NativeResponseBuilder.php#L143-L155", "partition": "test"}
{"repo": "OXID-eSales/oxideshop_composer_plugin", "path": "src/Utilities/CopyFileManager/GlobMatcher/Integration/AbstractGlobMatcher.php", "func_name": "AbstractGlobMatcher.match", "original_string": "public function match($relativePath, $globExpression)\n    {\n        if (!is_string($globExpression) && !is_null($globExpression)) {\n            $message = \"Given value \\\"$globExpression\\\" is not a valid glob expression. \".\n                \"Valid expression must be a string e.g. \\\"*.txt\\\".\";\n\n            throw new InvalidArgumentException($message);\n        }\n\n        if (Path::isAbsolute((string)$globExpression)) {\n            $message = \"Given value \\\"$globExpression\\\" is an absolute path. \".\n                \"Glob expression can only be accepted if it's a relative path.\";\n\n            throw new InvalidArgumentException($message);\n        }\n\n        if (is_null($globExpression)) {\n            return true;\n        }\n\n        return static::isGlobMatch($relativePath, $globExpression);\n    }", "language": "php", "code": "public function match($relativePath, $globExpression)\n    {\n        if (!is_string($globExpression) && !is_null($globExpression)) {\n            $message = \"Given value \\\"$globExpression\\\" is not a valid glob expression. \".\n                \"Valid expression must be a string e.g. \\\"*.txt\\\".\";\n\n            throw new InvalidArgumentException($message);\n        }\n\n        if (Path::isAbsolute((string)$globExpression)) {\n            $message = \"Given value \\\"$globExpression\\\" is an absolute path. \".\n                \"Glob expression can only be accepted if it's a relative path.\";\n\n            throw new InvalidArgumentException($message);\n        }\n\n        if (is_null($globExpression)) {\n            return true;\n        }\n\n        return static::isGlobMatch($relativePath, $globExpression);\n    }", "code_tokens": ["public", "function", "match", "(", "$", "relativePath", ",", "$", "globExpression", ")", "{", "if", "(", "!", "is_string", "(", "$", "globExpression", ")", "&&", "!", "is_null", "(", "$", "globExpression", ")", ")", "{", "$", "message", "=", "\"Given value \\\"$globExpression\\\" is not a valid glob expression. \"", ".", "\"Valid expression must be a string e.g. \\\"*.txt\\\".\"", ";", "throw", "new", "InvalidArgumentException", "(", "$", "message", ")", ";", "}", "if", "(", "Path", "::", "isAbsolute", "(", "(", "string", ")", "$", "globExpression", ")", ")", "{", "$", "message", "=", "\"Given value \\\"$globExpression\\\" is an absolute path. \"", ".", "\"Glob expression can only be accepted if it's a relative path.\"", ";", "throw", "new", "InvalidArgumentException", "(", "$", "message", ")", ";", "}", "if", "(", "is_null", "(", "$", "globExpression", ")", ")", "{", "return", "true", ";", "}", "return", "static", "::", "isGlobMatch", "(", "$", "relativePath", ",", "$", "globExpression", ")", ";", "}"], "docstring": "Returns true if given path matches a glob expression.\n\n@param string $relativePath\n@param string $globExpression Glob filter expressions, e.g. \"*.txt\" or \"*.pdf\".\n\n@throws \\InvalidArgumentException If given $globExpression is not a valid string.\n@throws \\InvalidArgumentException If given $globExpression is an absolute path.\n\n@return bool", "docstring_tokens": ["Returns", "true", "if", "given", "path", "matches", "a", "glob", "expression", "."], "sha": "867d38a2637a191ceba1680ac6af41f6694affed", "url": "https://github.com/OXID-eSales/oxideshop_composer_plugin/blob/867d38a2637a191ceba1680ac6af41f6694affed/src/Utilities/CopyFileManager/GlobMatcher/Integration/AbstractGlobMatcher.php#L30-L51", "partition": "test"}
{"repo": "googleapis/google-api-php-client", "path": "src/Google/Utils/UriTemplate.php", "func_name": "Google_Utils_UriTemplate.getDataType", "original_string": "private function getDataType($data)\n  {\n    if (is_array($data)) {\n      reset($data);\n      if (key($data) !== 0) {\n        return self::TYPE_MAP;\n      }\n      return self::TYPE_LIST;\n    }\n    return self::TYPE_SCALAR;\n  }", "language": "php", "code": "private function getDataType($data)\n  {\n    if (is_array($data)) {\n      reset($data);\n      if (key($data) !== 0) {\n        return self::TYPE_MAP;\n      }\n      return self::TYPE_LIST;\n    }\n    return self::TYPE_SCALAR;\n  }", "code_tokens": ["private", "function", "getDataType", "(", "$", "data", ")", "{", "if", "(", "is_array", "(", "$", "data", ")", ")", "{", "reset", "(", "$", "data", ")", ";", "if", "(", "key", "(", "$", "data", ")", "!==", "0", ")", "{", "return", "self", "::", "TYPE_MAP", ";", "}", "return", "self", "::", "TYPE_LIST", ";", "}", "return", "self", "::", "TYPE_SCALAR", ";", "}"], "docstring": "Return the type of a passed in value", "docstring_tokens": ["Return", "the", "type", "of", "a", "passed", "in", "value"], "sha": "1b76fa672c31e4cab58427f413315356682ba68a", "url": "https://github.com/googleapis/google-api-php-client/blob/1b76fa672c31e4cab58427f413315356682ba68a/src/Google/Utils/UriTemplate.php#L278-L288", "partition": "test"}
{"repo": "techdivision/import", "path": "src/Repositories/EavAttributeSetRepository.php", "func_name": "EavAttributeSetRepository.load", "original_string": "public function load($id)\n    {\n\n        // execute the prepared statement and return the EAV attribute set with the passed ID\n        $this->eavAttributeSetStmt->execute(array($id));\n        return $this->eavAttributeSetStmt->fetch(\\PDO::FETCH_ASSOC);\n    }", "language": "php", "code": "public function load($id)\n    {\n\n        // execute the prepared statement and return the EAV attribute set with the passed ID\n        $this->eavAttributeSetStmt->execute(array($id));\n        return $this->eavAttributeSetStmt->fetch(\\PDO::FETCH_ASSOC);\n    }", "code_tokens": ["public", "function", "load", "(", "$", "id", ")", "{", "// execute the prepared statement and return the EAV attribute set with the passed ID", "$", "this", "->", "eavAttributeSetStmt", "->", "execute", "(", "array", "(", "$", "id", ")", ")", ";", "return", "$", "this", "->", "eavAttributeSetStmt", "->", "fetch", "(", "\\", "PDO", "::", "FETCH_ASSOC", ")", ";", "}"], "docstring": "Return's the EAV attribute set with the passed ID.\n\n@param integer $id The EAV attribute set ID\n\n@return array The attribute set", "docstring_tokens": ["Return", "s", "the", "EAV", "attribute", "set", "with", "the", "passed", "ID", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/Repositories/EavAttributeSetRepository.php#L93-L99", "partition": "test"}
{"repo": "DevGroup-ru/yii2-extensions-manager", "path": "src/helpers/ApplicationConfigWriter.php", "func_name": "ApplicationConfigWriter.commit", "original_string": "public function commit()\n    {\n        $data = <<<PHP\n<?php\n/*\n * ! WARNING !\n *\n * This file is auto-generated.\n * Please don't modify it by-hand or all your changes can be lost.\n */\n{$this->append}\nreturn\nPHP;\n        $data .= VarDumper::export($this->configuration);\n        $data .= \";\\n\\n\";\n\n        $result = file_put_contents($this->filename, $data, LOCK_EX) !== false;\n        if ($result) {\n            if (function_exists('opcache_invalidate')) {\n                opcache_invalidate($this->filename, true);\n            }\n            if (function_exists('apc_delete_file')) {\n                @apc_delete_file($this->filename);\n            }\n        }\n        return $result;\n    }", "language": "php", "code": "public function commit()\n    {\n        $data = <<<PHP\n<?php\n/*\n * ! WARNING !\n *\n * This file is auto-generated.\n * Please don't modify it by-hand or all your changes can be lost.\n */\n{$this->append}\nreturn\nPHP;\n        $data .= VarDumper::export($this->configuration);\n        $data .= \";\\n\\n\";\n\n        $result = file_put_contents($this->filename, $data, LOCK_EX) !== false;\n        if ($result) {\n            if (function_exists('opcache_invalidate')) {\n                opcache_invalidate($this->filename, true);\n            }\n            if (function_exists('apc_delete_file')) {\n                @apc_delete_file($this->filename);\n            }\n        }\n        return $result;\n    }", "code_tokens": ["public", "function", "commit", "(", ")", "{", "$", "data", "=", " <<<PHP\n<?php\n/*\n * ! WARNING !\n *\n * This file is auto-generated.\n * Please don't modify it by-hand or all your changes can be lost.\n */\n{$this->append}\nreturn\nPHP", ";", "$", "data", ".=", "VarDumper", "::", "export", "(", "$", "this", "->", "configuration", ")", ";", "$", "data", ".=", "\";\\n\\n\"", ";", "$", "result", "=", "file_put_contents", "(", "$", "this", "->", "filename", ",", "$", "data", ",", "LOCK_EX", ")", "!==", "false", ";", "if", "(", "$", "result", ")", "{", "if", "(", "function_exists", "(", "'opcache_invalidate'", ")", ")", "{", "opcache_invalidate", "(", "$", "this", "->", "filename", ",", "true", ")", ";", "}", "if", "(", "function_exists", "(", "'apc_delete_file'", ")", ")", "{", "@", "apc_delete_file", "(", "$", "this", "->", "filename", ")", ";", "}", "}", "return", "$", "result", ";", "}"], "docstring": "Writes all configuration to application configuration file\n@return bool result, true if success", "docstring_tokens": ["Writes", "all", "configuration", "to", "application", "configuration", "file"], "sha": "25bce89ee085af217c07b779db9fbcd87172b75e", "url": "https://github.com/DevGroup-ru/yii2-extensions-manager/blob/25bce89ee085af217c07b779db9fbcd87172b75e/src/helpers/ApplicationConfigWriter.php#L60-L86", "partition": "test"}
{"repo": "pietercolpaert/hardf", "path": "src/Util.php", "func_name": "Util.createIRI", "original_string": "public static function createIRI ($iri)\n    {\n        return !empty($iri) && substr($iri,0,1) === '\"' ? self::getLiteralValue($iri) : $iri;\n    }", "language": "php", "code": "public static function createIRI ($iri)\n    {\n        return !empty($iri) && substr($iri,0,1) === '\"' ? self::getLiteralValue($iri) : $iri;\n    }", "code_tokens": ["public", "static", "function", "createIRI", "(", "$", "iri", ")", "{", "return", "!", "empty", "(", "$", "iri", ")", "&&", "substr", "(", "$", "iri", ",", "0", ",", "1", ")", "===", "'\"'", "?", "self", "::", "getLiteralValue", "(", "$", "iri", ")", ":", "$", "iri", ";", "}"], "docstring": "Creates an IRI in N3.js representation", "docstring_tokens": ["Creates", "an", "IRI", "in", "N3", ".", "js", "representation"], "sha": "39dd566889175a81202565d4e5c4071a6b866b3b", "url": "https://github.com/pietercolpaert/hardf/blob/39dd566889175a81202565d4e5c4071a6b866b3b/src/Util.php#L119-L122", "partition": "test"}
{"repo": "hassankhan/Sonic", "path": "src/Sonic/Helper.php", "func_name": "Helper.dot_extensions", "original_string": "private function dot_extensions()\n    {\n        $extensions = $this->app['settings']['sonic.content_ext'];\n\n        foreach ($extensions as $extension) {\n            $dotted_extensions[] = '.' . $extension;\n        }\n\n        return $dotted_extensions;\n    }", "language": "php", "code": "private function dot_extensions()\n    {\n        $extensions = $this->app['settings']['sonic.content_ext'];\n\n        foreach ($extensions as $extension) {\n            $dotted_extensions[] = '.' . $extension;\n        }\n\n        return $dotted_extensions;\n    }", "code_tokens": ["private", "function", "dot_extensions", "(", ")", "{", "$", "extensions", "=", "$", "this", "->", "app", "[", "'settings'", "]", "[", "'sonic.content_ext'", "]", ";", "foreach", "(", "$", "extensions", "as", "$", "extension", ")", "{", "$", "dotted_extensions", "[", "]", "=", "'.'", ".", "$", "extension", ";", "}", "return", "$", "dotted_extensions", ";", "}"], "docstring": "Adds a '.' to each extension given\n\n@return array", "docstring_tokens": ["Adds", "a", ".", "to", "each", "extension", "given"], "sha": "8c842343f6bddc063bf6aa9de460d48bc113af64", "url": "https://github.com/hassankhan/Sonic/blob/8c842343f6bddc063bf6aa9de460d48bc113af64/src/Sonic/Helper.php#L248-L257", "partition": "test"}
{"repo": "lmc-eu/steward", "path": "src/Console/EventListener/ListenerInstantiator.php", "func_name": "ListenerInstantiator.instantiate", "original_string": "public function instantiate(EventDispatcher $dispatcher, string $dirToSearchForListeners): void\n    {\n        $listeners = $this->searchListeners($dirToSearchForListeners);\n\n        foreach ($listeners as $listener) {\n            $r = new \\ReflectionClass($listener);\n            if ($r->implementsInterface('Symfony\\\\Component\\\\EventDispatcher\\\\EventSubscriberInterface')\n                && !$r->isAbstract()\n            ) {\n                /** @var EventSubscriberInterface $listenerInstance */\n                $listenerInstance = $r->newInstanceWithoutConstructor();\n                $dispatcher->addSubscriber($listenerInstance);\n            }\n        }\n    }", "language": "php", "code": "public function instantiate(EventDispatcher $dispatcher, string $dirToSearchForListeners): void\n    {\n        $listeners = $this->searchListeners($dirToSearchForListeners);\n\n        foreach ($listeners as $listener) {\n            $r = new \\ReflectionClass($listener);\n            if ($r->implementsInterface('Symfony\\\\Component\\\\EventDispatcher\\\\EventSubscriberInterface')\n                && !$r->isAbstract()\n            ) {\n                /** @var EventSubscriberInterface $listenerInstance */\n                $listenerInstance = $r->newInstanceWithoutConstructor();\n                $dispatcher->addSubscriber($listenerInstance);\n            }\n        }\n    }", "code_tokens": ["public", "function", "instantiate", "(", "EventDispatcher", "$", "dispatcher", ",", "string", "$", "dirToSearchForListeners", ")", ":", "void", "{", "$", "listeners", "=", "$", "this", "->", "searchListeners", "(", "$", "dirToSearchForListeners", ")", ";", "foreach", "(", "$", "listeners", "as", "$", "listener", ")", "{", "$", "r", "=", "new", "\\", "ReflectionClass", "(", "$", "listener", ")", ";", "if", "(", "$", "r", "->", "implementsInterface", "(", "'Symfony\\\\Component\\\\EventDispatcher\\\\EventSubscriberInterface'", ")", "&&", "!", "$", "r", "->", "isAbstract", "(", ")", ")", "{", "/** @var EventSubscriberInterface $listenerInstance */", "$", "listenerInstance", "=", "$", "r", "->", "newInstanceWithoutConstructor", "(", ")", ";", "$", "dispatcher", "->", "addSubscriber", "(", "$", "listenerInstance", ")", ";", "}", "}", "}"], "docstring": "Instantiate listeners in given directory and register them to given dispatcher", "docstring_tokens": ["Instantiate", "listeners", "in", "given", "directory", "and", "register", "them", "to", "given", "dispatcher"], "sha": "507db72cd5994fd290a79529048fe954f332c9b0", "url": "https://github.com/lmc-eu/steward/blob/507db72cd5994fd290a79529048fe954f332c9b0/src/Console/EventListener/ListenerInstantiator.php#L22-L36", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Relations/Relation.php", "func_name": "Relation.cache_results", "original_string": "protected function cache_results( $results, Model $model ) {\n\n\t\tif ( $results instanceof Collection ) {\n\t\t\t$this->cache_collection( $results, $model );\n\t\t} elseif ( is_object( $results ) ) {\n\t\t\t$this->cache_single( $results, $model );\n\t\t}\n\t}", "language": "php", "code": "protected function cache_results( $results, Model $model ) {\n\n\t\tif ( $results instanceof Collection ) {\n\t\t\t$this->cache_collection( $results, $model );\n\t\t} elseif ( is_object( $results ) ) {\n\t\t\t$this->cache_single( $results, $model );\n\t\t}\n\t}", "code_tokens": ["protected", "function", "cache_results", "(", "$", "results", ",", "Model", "$", "model", ")", "{", "if", "(", "$", "results", "instanceof", "Collection", ")", "{", "$", "this", "->", "cache_collection", "(", "$", "results", ",", "$", "model", ")", ";", "}", "elseif", "(", "is_object", "(", "$", "results", ")", ")", "{", "$", "this", "->", "cache_single", "(", "$", "results", ",", "$", "model", ")", ";", "}", "}"], "docstring": "Cache the results of a relation.\n\n@since 2.0\n\n@param Collection|Model|mixed $results\n@param Model                  $model", "docstring_tokens": ["Cache", "the", "results", "of", "a", "relation", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Relations/Relation.php#L222-L229", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Mail/Transport/PostmarkTransport.php", "func_name": "PostmarkTransport.getMIMEPart", "original_string": "protected function getMIMEPart(Swift_Mime_SimpleMessage $message, $mimeType): ?Swift_Mime_SimpleMimeEntity\n    {\n        foreach ($message->getChildren() as $part) {\n            if (! ($part instanceof Swift_Mime_Attachment) && \\mb_strpos($part->getContentType(), $mimeType) === 0) {\n                return $part;\n            }\n        }\n\n        return null;\n    }", "language": "php", "code": "protected function getMIMEPart(Swift_Mime_SimpleMessage $message, $mimeType): ?Swift_Mime_SimpleMimeEntity\n    {\n        foreach ($message->getChildren() as $part) {\n            if (! ($part instanceof Swift_Mime_Attachment) && \\mb_strpos($part->getContentType(), $mimeType) === 0) {\n                return $part;\n            }\n        }\n\n        return null;\n    }", "code_tokens": ["protected", "function", "getMIMEPart", "(", "Swift_Mime_SimpleMessage", "$", "message", ",", "$", "mimeType", ")", ":", "?", "Swift_Mime_SimpleMimeEntity", "{", "foreach", "(", "$", "message", "->", "getChildren", "(", ")", "as", "$", "part", ")", "{", "if", "(", "!", "(", "$", "part", "instanceof", "Swift_Mime_Attachment", ")", "&&", "\\", "mb_strpos", "(", "$", "part", "->", "getContentType", "(", ")", ",", "$", "mimeType", ")", "===", "0", ")", "{", "return", "$", "part", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Gets MIME parts that match the message type.\nExcludes parts of type \\Swift_Mime_Attachment as those\nare handled later.\n\n@param \\Swift_Mime_SimpleMessage $message\n@param string                    $mimeType\n\n@return null|\\Swift_Mime_SimpleMimeEntity", "docstring_tokens": ["Gets", "MIME", "parts", "that", "match", "the", "message", "type", ".", "Excludes", "parts", "of", "type", "\\", "Swift_Mime_Attachment", "as", "those", "are", "handled", "later", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Mail/Transport/PostmarkTransport.php#L166-L175", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Services/DistanceMatrix/DistanceMatrixResponseRow.php", "func_name": "DistanceMatrixResponseRow.setElements", "original_string": "public function setElements(array $elements)\n    {\n        $this->elements = array();\n\n        foreach ($elements as $element) {\n            $this->addElement($element);\n        }\n    }", "language": "php", "code": "public function setElements(array $elements)\n    {\n        $this->elements = array();\n\n        foreach ($elements as $element) {\n            $this->addElement($element);\n        }\n    }", "code_tokens": ["public", "function", "setElements", "(", "array", "$", "elements", ")", "{", "$", "this", "->", "elements", "=", "array", "(", ")", ";", "foreach", "(", "$", "elements", "as", "$", "element", ")", "{", "$", "this", "->", "addElement", "(", "$", "element", ")", ";", "}", "}"], "docstring": "Sets the distance matrix row elements.\n\n@param array $elements The row elements.", "docstring_tokens": ["Sets", "the", "distance", "matrix", "row", "elements", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Services/DistanceMatrix/DistanceMatrixResponseRow.php#L50-L57", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/ORM/QueryBuilder/NativeQueryBuilder.php", "func_name": "NativeQueryBuilder.table", "original_string": "public function table(string $table, string $alias = null): QueryBuilder\n    {\n        $this->table = $table . ($alias !== null ? ' ' . $alias : '');\n\n        return $this;\n    }", "language": "php", "code": "public function table(string $table, string $alias = null): QueryBuilder\n    {\n        $this->table = $table . ($alias !== null ? ' ' . $alias : '');\n\n        return $this;\n    }", "code_tokens": ["public", "function", "table", "(", "string", "$", "table", ",", "string", "$", "alias", "=", "null", ")", ":", "QueryBuilder", "{", "$", "this", "->", "table", "=", "$", "table", ".", "(", "$", "alias", "!==", "null", "?", "' '", ".", "$", "alias", ":", "''", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Set the table on which to perform the query statement.\n\n<code>\n$queryBuilder\n->select()\n->table('table');\n\n$queryBuilder\n->select()\n->table('table', 't');\n</code>\n\n@param string      $table\n@param string|null $alias\n\n@return static", "docstring_tokens": ["Set", "the", "table", "on", "which", "to", "perform", "the", "query", "statement", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/ORM/QueryBuilder/NativeQueryBuilder.php#L190-L195", "partition": "test"}
{"repo": "hassankhan/Sonic", "path": "src/Sonic/Helper.php", "func_name": "Helper.config", "original_string": "public function config($option)\n    {\n        return isset($this->app['settings'][$option]) === TRUE\n            ? $this->app['settings'][$option]\n            : NULL;\n    }", "language": "php", "code": "public function config($option)\n    {\n        return isset($this->app['settings'][$option]) === TRUE\n            ? $this->app['settings'][$option]\n            : NULL;\n    }", "code_tokens": ["public", "function", "config", "(", "$", "option", ")", "{", "return", "isset", "(", "$", "this", "->", "app", "[", "'settings'", "]", "[", "$", "option", "]", ")", "===", "TRUE", "?", "$", "this", "->", "app", "[", "'settings'", "]", "[", "$", "option", "]", ":", "NULL", ";", "}"], "docstring": "Returns Sonic configuration option\n\n@return array", "docstring_tokens": ["Returns", "Sonic", "configuration", "option"], "sha": "8c842343f6bddc063bf6aa9de460d48bc113af64", "url": "https://github.com/hassankhan/Sonic/blob/8c842343f6bddc063bf6aa9de460d48bc113af64/src/Sonic/Helper.php#L44-L49", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Validation.php", "func_name": "Validation.errorMessage", "original_string": "public static function errorMessage(array $error) {\n        if (isset($error['message'])) {\n            return $error['message'];\n        } else {\n            $field = val('field', $error, '*');\n            if (is_array($field)) {\n                $field = implode(', ', $field);\n            }\n            return sprintft($error['code'].': %s.', $field);\n        }\n    }", "language": "php", "code": "public static function errorMessage(array $error) {\n        if (isset($error['message'])) {\n            return $error['message'];\n        } else {\n            $field = val('field', $error, '*');\n            if (is_array($field)) {\n                $field = implode(', ', $field);\n            }\n            return sprintft($error['code'].': %s.', $field);\n        }\n    }", "code_tokens": ["public", "static", "function", "errorMessage", "(", "array", "$", "error", ")", "{", "if", "(", "isset", "(", "$", "error", "[", "'message'", "]", ")", ")", "{", "return", "$", "error", "[", "'message'", "]", ";", "}", "else", "{", "$", "field", "=", "val", "(", "'field'", ",", "$", "error", ",", "'*'", ")", ";", "if", "(", "is_array", "(", "$", "field", ")", ")", "{", "$", "field", "=", "implode", "(", "', '", ",", "$", "field", ")", ";", "}", "return", "sprintft", "(", "$", "error", "[", "'code'", "]", ".", "': %s.'", ",", "$", "field", ")", ";", "}", "}"], "docstring": "Gets the error message from an error.\n\nErrors are stored with either a message or a translation code.\nThis method will look at both to determine the full message.\n\n@param array $error The error array.\n@return string Returns the message from the error.", "docstring_tokens": ["Gets", "the", "error", "message", "from", "an", "error", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Validation.php#L49-L59", "partition": "test"}
{"repo": "realexpayments/rxp-hpp-php", "path": "src/main/php/com-realexpayments-hpp-sdk/utils/ValidationUtils.php", "func_name": "ValidationUtils.validate", "original_string": "public static function validate( HppRequest $hppRequest ) {\n\t\tself::Initialise();\n\n\t\t$violations = self::$validator->validate( $hppRequest );\n\n\t\tif ( $violations->count() > 0 ) {\n\t\t\t$validationMessages = array();\n\n\t\t\tforeach ( $violations as $violation ) {\n\n\t\t\t\t/* @var ConstraintViolationInterface $violation */\n\t\t\t\t$validationMessages[] = $violation->getMessage();\n\t\t\t}\n\n\t\t\t$message = \"HppRequest failed validation with the following errors:\";\n\t\t\tforeach ( $validationMessages as $validationMessage ) {\n\t\t\t\t$message .= $validationMessage . '.';\n\t\t\t}\n\n\t\t\tself::$logger->info( $message );\n\t\t\tthrow new RealexValidationException( \"HppRequest failed validation\", $validationMessages );\n\t\t}\n\n\t}", "language": "php", "code": "public static function validate( HppRequest $hppRequest ) {\n\t\tself::Initialise();\n\n\t\t$violations = self::$validator->validate( $hppRequest );\n\n\t\tif ( $violations->count() > 0 ) {\n\t\t\t$validationMessages = array();\n\n\t\t\tforeach ( $violations as $violation ) {\n\n\t\t\t\t/* @var ConstraintViolationInterface $violation */\n\t\t\t\t$validationMessages[] = $violation->getMessage();\n\t\t\t}\n\n\t\t\t$message = \"HppRequest failed validation with the following errors:\";\n\t\t\tforeach ( $validationMessages as $validationMessage ) {\n\t\t\t\t$message .= $validationMessage . '.';\n\t\t\t}\n\n\t\t\tself::$logger->info( $message );\n\t\t\tthrow new RealexValidationException( \"HppRequest failed validation\", $validationMessages );\n\t\t}\n\n\t}", "code_tokens": ["public", "static", "function", "validate", "(", "HppRequest", "$", "hppRequest", ")", "{", "self", "::", "Initialise", "(", ")", ";", "$", "violations", "=", "self", "::", "$", "validator", "->", "validate", "(", "$", "hppRequest", ")", ";", "if", "(", "$", "violations", "->", "count", "(", ")", ">", "0", ")", "{", "$", "validationMessages", "=", "array", "(", ")", ";", "foreach", "(", "$", "violations", "as", "$", "violation", ")", "{", "/* @var ConstraintViolationInterface $violation */", "$", "validationMessages", "[", "]", "=", "$", "violation", "->", "getMessage", "(", ")", ";", "}", "$", "message", "=", "\"HppRequest failed validation with the following errors:\"", ";", "foreach", "(", "$", "validationMessages", "as", "$", "validationMessage", ")", "{", "$", "message", ".=", "$", "validationMessage", ".", "'.'", ";", "}", "self", "::", "$", "logger", "->", "info", "(", "$", "message", ")", ";", "throw", "new", "RealexValidationException", "(", "\"HppRequest failed validation\"", ",", "$", "validationMessages", ")", ";", "}", "}"], "docstring": "Method validates HPP request object using JSR-303 bean validation.\n\n@param HppRequest|HppResponse $hppRequest", "docstring_tokens": ["Method", "validates", "HPP", "request", "object", "using", "JSR", "-", "303", "bean", "validation", "."], "sha": "95437a296cc87ca69a29dda256872b1ea52e7be9", "url": "https://github.com/realexpayments/rxp-hpp-php/blob/95437a296cc87ca69a29dda256872b1ea52e7be9/src/main/php/com-realexpayments-hpp-sdk/utils/ValidationUtils.php#L42-L65", "partition": "test"}
{"repo": "Speicher210/business-hours", "path": "src/Day/Time/Time.php", "func_name": "Time.setHours", "original_string": "public function setHours(int $hours): void\n    {\n        $this->timeElementsAreValid($hours, $this->minutes, $this->seconds);\n\n        $this->hours = $hours;\n    }", "language": "php", "code": "public function setHours(int $hours): void\n    {\n        $this->timeElementsAreValid($hours, $this->minutes, $this->seconds);\n\n        $this->hours = $hours;\n    }", "code_tokens": ["public", "function", "setHours", "(", "int", "$", "hours", ")", ":", "void", "{", "$", "this", "->", "timeElementsAreValid", "(", "$", "hours", ",", "$", "this", "->", "minutes", ",", "$", "this", "->", "seconds", ")", ";", "$", "this", "->", "hours", "=", "$", "hours", ";", "}"], "docstring": "Set the hours.\n\n@param integer $hours The hours.", "docstring_tokens": ["Set", "the", "hours", "."], "sha": "f8479821532991927d7ff9ea1b659f76153a2587", "url": "https://github.com/Speicher210/business-hours/blob/f8479821532991927d7ff9ea1b659f76153a2587/src/Day/Time/Time.php#L93-L98", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/properties/class-papi-property-term.php", "func_name": "Papi_Property_Term.format_value", "original_string": "public function format_value( $value, $slug, $term_id ) {\n\t\t$meta_key = $this->get_setting( 'meta_key' );\n\n\t\tif ( empty( $meta_key ) ) {\n\t\t\tif ( is_numeric( $value ) && intval( $value ) !== 0 ) {\n\t\t\t\t$term_id = $value;\n\t\t\t}\n\t\t} else {\n\t\t\t$args = [\n\t\t\t\t'fields'     => 'ids',\n\t\t\t\t'meta_key'   => $meta_key,\n\t\t\t\t'meta_value' => $value,\n\t\t\t\t'hide_empty' => false,\n\t\t\t\t'taxonomy'   => $this->get_setting( 'taxonomy' ),\n\t\t\t\t'number'     => 1\n\t\t\t];\n\n\t\t\t$terms = get_terms( $args );\n\n\t\t\tif ( ! empty( $terms ) && ! is_wp_error( $terms ) ) {\n\t\t\t\t$term_id = $terms[0];\n\t\t\t}\n\t\t}\n\n\t\t// Allow only id to be returned.\n\t\tif ( ! papi_is_admin() && $this->get_setting( 'fields' ) === 'ids' ) {\n\t\t\t$term = $this->get_term_value( $term_id );\n\t\t} elseif ( ! empty( $term_id ) ) {\n\t\t\t$term = get_term( $term_id );\n\t\t}\n\n\t\tif ( empty( $term ) || is_wp_error( $term ) ) {\n\t\t\t$term = $this->default_value;\n\t\t}\n\n\t\treturn $term;\n\t}", "language": "php", "code": "public function format_value( $value, $slug, $term_id ) {\n\t\t$meta_key = $this->get_setting( 'meta_key' );\n\n\t\tif ( empty( $meta_key ) ) {\n\t\t\tif ( is_numeric( $value ) && intval( $value ) !== 0 ) {\n\t\t\t\t$term_id = $value;\n\t\t\t}\n\t\t} else {\n\t\t\t$args = [\n\t\t\t\t'fields'     => 'ids',\n\t\t\t\t'meta_key'   => $meta_key,\n\t\t\t\t'meta_value' => $value,\n\t\t\t\t'hide_empty' => false,\n\t\t\t\t'taxonomy'   => $this->get_setting( 'taxonomy' ),\n\t\t\t\t'number'     => 1\n\t\t\t];\n\n\t\t\t$terms = get_terms( $args );\n\n\t\t\tif ( ! empty( $terms ) && ! is_wp_error( $terms ) ) {\n\t\t\t\t$term_id = $terms[0];\n\t\t\t}\n\t\t}\n\n\t\t// Allow only id to be returned.\n\t\tif ( ! papi_is_admin() && $this->get_setting( 'fields' ) === 'ids' ) {\n\t\t\t$term = $this->get_term_value( $term_id );\n\t\t} elseif ( ! empty( $term_id ) ) {\n\t\t\t$term = get_term( $term_id );\n\t\t}\n\n\t\tif ( empty( $term ) || is_wp_error( $term ) ) {\n\t\t\t$term = $this->default_value;\n\t\t}\n\n\t\treturn $term;\n\t}", "code_tokens": ["public", "function", "format_value", "(", "$", "value", ",", "$", "slug", ",", "$", "term_id", ")", "{", "$", "meta_key", "=", "$", "this", "->", "get_setting", "(", "'meta_key'", ")", ";", "if", "(", "empty", "(", "$", "meta_key", ")", ")", "{", "if", "(", "is_numeric", "(", "$", "value", ")", "&&", "intval", "(", "$", "value", ")", "!==", "0", ")", "{", "$", "term_id", "=", "$", "value", ";", "}", "}", "else", "{", "$", "args", "=", "[", "'fields'", "=>", "'ids'", ",", "'meta_key'", "=>", "$", "meta_key", ",", "'meta_value'", "=>", "$", "value", ",", "'hide_empty'", "=>", "false", ",", "'taxonomy'", "=>", "$", "this", "->", "get_setting", "(", "'taxonomy'", ")", ",", "'number'", "=>", "1", "]", ";", "$", "terms", "=", "get_terms", "(", "$", "args", ")", ";", "if", "(", "!", "empty", "(", "$", "terms", ")", "&&", "!", "is_wp_error", "(", "$", "terms", ")", ")", "{", "$", "term_id", "=", "$", "terms", "[", "0", "]", ";", "}", "}", "// Allow only id to be returned.", "if", "(", "!", "papi_is_admin", "(", ")", "&&", "$", "this", "->", "get_setting", "(", "'fields'", ")", "===", "'ids'", ")", "{", "$", "term", "=", "$", "this", "->", "get_term_value", "(", "$", "term_id", ")", ";", "}", "elseif", "(", "!", "empty", "(", "$", "term_id", ")", ")", "{", "$", "term", "=", "get_term", "(", "$", "term_id", ")", ";", "}", "if", "(", "empty", "(", "$", "term", ")", "||", "is_wp_error", "(", "$", "term", ")", ")", "{", "$", "term", "=", "$", "this", "->", "default_value", ";", "}", "return", "$", "term", ";", "}"], "docstring": "Format the value of the property before it's returned to the application.\n\n@param  mixed  $value\n@param  string $slug\n@param  int    $term_id\n\n@return array", "docstring_tokens": ["Format", "the", "value", "of", "the", "property", "before", "it", "s", "returned", "to", "the", "application", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/properties/class-papi-property-term.php#L24-L60", "partition": "test"}
{"repo": "symfony/class-loader", "path": "ClassCollectionLoader.php", "func_name": "ClassCollectionLoader.writeCacheFile", "original_string": "private static function writeCacheFile($file, $content)\n    {\n        $dir = dirname($file);\n        if (!is_writable($dir)) {\n            throw new \\RuntimeException(sprintf('Cache directory \"%s\" is not writable.', $dir));\n        }\n\n        $tmpFile = tempnam($dir, basename($file));\n\n        if (false !== @file_put_contents($tmpFile, $content) && @rename($tmpFile, $file)) {\n            @chmod($file, 0666 & ~umask());\n\n            return;\n        }\n\n        throw new \\RuntimeException(sprintf('Failed to write cache file \"%s\".', $file));\n    }", "language": "php", "code": "private static function writeCacheFile($file, $content)\n    {\n        $dir = dirname($file);\n        if (!is_writable($dir)) {\n            throw new \\RuntimeException(sprintf('Cache directory \"%s\" is not writable.', $dir));\n        }\n\n        $tmpFile = tempnam($dir, basename($file));\n\n        if (false !== @file_put_contents($tmpFile, $content) && @rename($tmpFile, $file)) {\n            @chmod($file, 0666 & ~umask());\n\n            return;\n        }\n\n        throw new \\RuntimeException(sprintf('Failed to write cache file \"%s\".', $file));\n    }", "code_tokens": ["private", "static", "function", "writeCacheFile", "(", "$", "file", ",", "$", "content", ")", "{", "$", "dir", "=", "dirname", "(", "$", "file", ")", ";", "if", "(", "!", "is_writable", "(", "$", "dir", ")", ")", "{", "throw", "new", "\\", "RuntimeException", "(", "sprintf", "(", "'Cache directory \"%s\" is not writable.'", ",", "$", "dir", ")", ")", ";", "}", "$", "tmpFile", "=", "tempnam", "(", "$", "dir", ",", "basename", "(", "$", "file", ")", ")", ";", "if", "(", "false", "!==", "@", "file_put_contents", "(", "$", "tmpFile", ",", "$", "content", ")", "&&", "@", "rename", "(", "$", "tmpFile", ",", "$", "file", ")", ")", "{", "@", "chmod", "(", "$", "file", ",", "0666", "&", "~", "umask", "(", ")", ")", ";", "return", ";", "}", "throw", "new", "\\", "RuntimeException", "(", "sprintf", "(", "'Failed to write cache file \"%s\".'", ",", "$", "file", ")", ")", ";", "}"], "docstring": "Writes a cache file.\n\n@param string $file    Filename\n@param string $content Temporary file content\n\n@throws \\RuntimeException when a cache file cannot be written", "docstring_tokens": ["Writes", "a", "cache", "file", "."], "sha": "2141b7653aca7407c80981371146a24da83a228c", "url": "https://github.com/symfony/class-loader/blob/2141b7653aca7407c80981371146a24da83a228c/ClassCollectionLoader.php#L306-L322", "partition": "test"}
{"repo": "slickframework/http", "path": "src/Message/Request.php", "func_name": "Request.withMethod", "original_string": "public function withMethod($method)\n    {\n        $method = strtoupper($method);\n        $knownMethods = [\n            'HEAD', 'OPTIONS', 'GET', 'POST', 'PUT',\n            'DELETE', 'CONNECT', 'TRACE', 'PATCH', 'PURGE'\n        ];\n\n        if (! in_array($method, $knownMethods)) {\n            throw new InvalidArgumentException(\n                \"Invalid or unknown method name.\"\n            );\n        }\n\n        $message = clone $this;\n        $message->method = $method;\n        return $message;\n    }", "language": "php", "code": "public function withMethod($method)\n    {\n        $method = strtoupper($method);\n        $knownMethods = [\n            'HEAD', 'OPTIONS', 'GET', 'POST', 'PUT',\n            'DELETE', 'CONNECT', 'TRACE', 'PATCH', 'PURGE'\n        ];\n\n        if (! in_array($method, $knownMethods)) {\n            throw new InvalidArgumentException(\n                \"Invalid or unknown method name.\"\n            );\n        }\n\n        $message = clone $this;\n        $message->method = $method;\n        return $message;\n    }", "code_tokens": ["public", "function", "withMethod", "(", "$", "method", ")", "{", "$", "method", "=", "strtoupper", "(", "$", "method", ")", ";", "$", "knownMethods", "=", "[", "'HEAD'", ",", "'OPTIONS'", ",", "'GET'", ",", "'POST'", ",", "'PUT'", ",", "'DELETE'", ",", "'CONNECT'", ",", "'TRACE'", ",", "'PATCH'", ",", "'PURGE'", "]", ";", "if", "(", "!", "in_array", "(", "$", "method", ",", "$", "knownMethods", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "\"Invalid or unknown method name.\"", ")", ";", "}", "$", "message", "=", "clone", "$", "this", ";", "$", "message", "->", "method", "=", "$", "method", ";", "return", "$", "message", ";", "}"], "docstring": "Return an instance with the provided HTTP method.\n\n@param string $method Case-sensitive method.\n@return static\n@throws InvalidArgumentException for invalid HTTP methods.", "docstring_tokens": ["Return", "an", "instance", "with", "the", "provided", "HTTP", "method", "."], "sha": "9da14b618e0f75d3d565e0ce928a35d992755e75", "url": "https://github.com/slickframework/http/blob/9da14b618e0f75d3d565e0ce928a35d992755e75/src/Message/Request.php#L110-L127", "partition": "test"}
{"repo": "symbiote/silverstripe-queuedjobs", "path": "src/Jobs/PublishItemsJob.php", "func_name": "PublishItemsJob.getTitle", "original_string": "public function getTitle()\n    {\n        $title = 'Unknown';\n\n        if ($root = $this->getRoot()) {\n            $title = $root->Title;\n        }\n\n        return _t(\n            __CLASS__ . '.Title',\n            \"Publish items beneath {title}\",\n            ['title' => $title]\n        );\n    }", "language": "php", "code": "public function getTitle()\n    {\n        $title = 'Unknown';\n\n        if ($root = $this->getRoot()) {\n            $title = $root->Title;\n        }\n\n        return _t(\n            __CLASS__ . '.Title',\n            \"Publish items beneath {title}\",\n            ['title' => $title]\n        );\n    }", "code_tokens": ["public", "function", "getTitle", "(", ")", "{", "$", "title", "=", "'Unknown'", ";", "if", "(", "$", "root", "=", "$", "this", "->", "getRoot", "(", ")", ")", "{", "$", "title", "=", "$", "root", "->", "Title", ";", "}", "return", "_t", "(", "__CLASS__", ".", "'.Title'", ",", "\"Publish items beneath {title}\"", ",", "[", "'title'", "=>", "$", "title", "]", ")", ";", "}"], "docstring": "Defines the title of the job\n\n@return string", "docstring_tokens": ["Defines", "the", "title", "of", "the", "job"], "sha": "897149ebb689ab2304356048251b2f7c3db659b7", "url": "https://github.com/symbiote/silverstripe-queuedjobs/blob/897149ebb689ab2304356048251b2f7c3db659b7/src/Jobs/PublishItemsJob.php#L42-L55", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/core/class-papi-core-property.php", "func_name": "Papi_Core_Property.disabled", "original_string": "public function disabled() {\n\t\t// Return true if site id isn't zero and don't match the current site id.\n\t\tif ( $this->site_id !== 0 && $this->site_id !== get_current_blog_id() ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the post type don't match the current one\n\t\t// the property should not be rendered.\n\t\tif ( papi_get_meta_type() === 'post' && ! empty( $this->post_type ) && $this->post_type !== papi_get_post_type() ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn $this->disabled;\n\t}", "language": "php", "code": "public function disabled() {\n\t\t// Return true if site id isn't zero and don't match the current site id.\n\t\tif ( $this->site_id !== 0 && $this->site_id !== get_current_blog_id() ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the post type don't match the current one\n\t\t// the property should not be rendered.\n\t\tif ( papi_get_meta_type() === 'post' && ! empty( $this->post_type ) && $this->post_type !== papi_get_post_type() ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn $this->disabled;\n\t}", "code_tokens": ["public", "function", "disabled", "(", ")", "{", "// Return true if site id isn't zero and don't match the current site id.", "if", "(", "$", "this", "->", "site_id", "!==", "0", "&&", "$", "this", "->", "site_id", "!==", "get_current_blog_id", "(", ")", ")", "{", "return", "true", ";", "}", "// If the post type don't match the current one", "// the property should not be rendered.", "if", "(", "papi_get_meta_type", "(", ")", "===", "'post'", "&&", "!", "empty", "(", "$", "this", "->", "post_type", ")", "&&", "$", "this", "->", "post_type", "!==", "papi_get_post_type", "(", ")", ")", "{", "return", "true", ";", "}", "return", "$", "this", "->", "disabled", ";", "}"], "docstring": "Determine if the property is disabled or not.\n\n@return bool", "docstring_tokens": ["Determine", "if", "the", "property", "is", "disabled", "or", "not", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/core/class-papi-core-property.php#L185-L198", "partition": "test"}
{"repo": "develpr/alexa-app", "path": "src/Http/Routing/AlexaRouter.php", "func_name": "AlexaRouter.newAlexaRoute", "original_string": "protected function newAlexaRoute($methods, $uri, $intent, $action)\n    {\n        return (new AlexaRoute($methods, $uri, $intent, $action))->setContainer($this->container)->setRouter($this);\n    }", "language": "php", "code": "protected function newAlexaRoute($methods, $uri, $intent, $action)\n    {\n        return (new AlexaRoute($methods, $uri, $intent, $action))->setContainer($this->container)->setRouter($this);\n    }", "code_tokens": ["protected", "function", "newAlexaRoute", "(", "$", "methods", ",", "$", "uri", ",", "$", "intent", ",", "$", "action", ")", "{", "return", "(", "new", "AlexaRoute", "(", "$", "methods", ",", "$", "uri", ",", "$", "intent", ",", "$", "action", ")", ")", "->", "setContainer", "(", "$", "this", "->", "container", ")", "->", "setRouter", "(", "$", "this", ")", ";", "}"], "docstring": "Create a new Route object.\n\n@param array|string               $methods\n@param string                     $uri\n@param string                     $intent\n@param \\Closure|array|string|null $action\n\n@return \\Illuminate\\Routing\\Route", "docstring_tokens": ["Create", "a", "new", "Route", "object", "."], "sha": "4e14c2d2b6db4c58fb11c82867d1e712575f1ec3", "url": "https://github.com/develpr/alexa-app/blob/4e14c2d2b6db4c58fb11c82867d1e712575f1ec3/src/Http/Routing/AlexaRouter.php#L154-L157", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/Query.php", "func_name": "Query.column", "original_string": "public function column($db = null)\n    {\n        if ($this->emulateExecution) {\n            return new LazyPromise(function() { return resolve([]); });\n        }\n\n        if ($this->indexBy === null) {\n            return $this->createCommand($db)->queryColumn();\n        }\n\n        if (is_string($this->indexBy) && is_array($this->select) && count($this->select) === 1) {\n            if (strpos($this->indexBy, '.') === false && count($tables = $this->getTablesUsedInFrom()) > 0) {\n                $this->select[] = key($tables) . '.' . $this->indexBy;\n            } else {\n                $this->select[] = $this->indexBy;\n            }\n        }\n        return $this->createCommand($db)->queryAll()->thenLazy(\n            function($results) {\n                $rows = [];\n                foreach ($results as $row) {\n                    $value = reset($row);\n\n                    if ($this->indexBy instanceof \\Closure) {\n                        $rows[call_user_func($this->indexBy, $row)] = $value;\n                    } else {\n                        $rows[$row[$this->indexBy]] = $value;\n                    }\n                }\n\n                return $rows;\n            }\n        );\n    }", "language": "php", "code": "public function column($db = null)\n    {\n        if ($this->emulateExecution) {\n            return new LazyPromise(function() { return resolve([]); });\n        }\n\n        if ($this->indexBy === null) {\n            return $this->createCommand($db)->queryColumn();\n        }\n\n        if (is_string($this->indexBy) && is_array($this->select) && count($this->select) === 1) {\n            if (strpos($this->indexBy, '.') === false && count($tables = $this->getTablesUsedInFrom()) > 0) {\n                $this->select[] = key($tables) . '.' . $this->indexBy;\n            } else {\n                $this->select[] = $this->indexBy;\n            }\n        }\n        return $this->createCommand($db)->queryAll()->thenLazy(\n            function($results) {\n                $rows = [];\n                foreach ($results as $row) {\n                    $value = reset($row);\n\n                    if ($this->indexBy instanceof \\Closure) {\n                        $rows[call_user_func($this->indexBy, $row)] = $value;\n                    } else {\n                        $rows[$row[$this->indexBy]] = $value;\n                    }\n                }\n\n                return $rows;\n            }\n        );\n    }", "code_tokens": ["public", "function", "column", "(", "$", "db", "=", "null", ")", "{", "if", "(", "$", "this", "->", "emulateExecution", ")", "{", "return", "new", "LazyPromise", "(", "function", "(", ")", "{", "return", "resolve", "(", "[", "]", ")", ";", "}", ")", ";", "}", "if", "(", "$", "this", "->", "indexBy", "===", "null", ")", "{", "return", "$", "this", "->", "createCommand", "(", "$", "db", ")", "->", "queryColumn", "(", ")", ";", "}", "if", "(", "is_string", "(", "$", "this", "->", "indexBy", ")", "&&", "is_array", "(", "$", "this", "->", "select", ")", "&&", "count", "(", "$", "this", "->", "select", ")", "===", "1", ")", "{", "if", "(", "strpos", "(", "$", "this", "->", "indexBy", ",", "'.'", ")", "===", "false", "&&", "count", "(", "$", "tables", "=", "$", "this", "->", "getTablesUsedInFrom", "(", ")", ")", ">", "0", ")", "{", "$", "this", "->", "select", "[", "]", "=", "key", "(", "$", "tables", ")", ".", "'.'", ".", "$", "this", "->", "indexBy", ";", "}", "else", "{", "$", "this", "->", "select", "[", "]", "=", "$", "this", "->", "indexBy", ";", "}", "}", "return", "$", "this", "->", "createCommand", "(", "$", "db", ")", "->", "queryAll", "(", ")", "->", "thenLazy", "(", "function", "(", "$", "results", ")", "{", "$", "rows", "=", "[", "]", ";", "foreach", "(", "$", "results", "as", "$", "row", ")", "{", "$", "value", "=", "reset", "(", "$", "row", ")", ";", "if", "(", "$", "this", "->", "indexBy", "instanceof", "\\", "Closure", ")", "{", "$", "rows", "[", "call_user_func", "(", "$", "this", "->", "indexBy", ",", "$", "row", ")", "]", "=", "$", "value", ";", "}", "else", "{", "$", "rows", "[", "$", "row", "[", "$", "this", "->", "indexBy", "]", "]", "=", "$", "value", ";", "}", "}", "return", "$", "rows", ";", "}", ")", ";", "}"], "docstring": "Executes the query and returns the first column of the result.\n@param DatabaseInterface|DbConnectionGetterInterface $db the database connection used to generate the SQL statement.\nIf this parameter is not given, the `db` application component will be used.\n@return LazyPromiseInterface with array the first column of the query result. An empty array is returned if the query results in nothing.", "docstring_tokens": ["Executes", "the", "query", "and", "returns", "the", "first", "column", "of", "the", "result", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/Query.php#L238-L271", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Helper/Controls/PanControlHelper.php", "func_name": "PanControlHelper.render", "original_string": "public function render(PanControl $panControl)\n    {\n        return $this->jsonBuilder\n            ->reset()\n            ->setValue('[position]', $this->controlPositionHelper->render($panControl->getControlPosition()), false)\n            ->build();\n    }", "language": "php", "code": "public function render(PanControl $panControl)\n    {\n        return $this->jsonBuilder\n            ->reset()\n            ->setValue('[position]', $this->controlPositionHelper->render($panControl->getControlPosition()), false)\n            ->build();\n    }", "code_tokens": ["public", "function", "render", "(", "PanControl", "$", "panControl", ")", "{", "return", "$", "this", "->", "jsonBuilder", "->", "reset", "(", ")", "->", "setValue", "(", "'[position]'", ",", "$", "this", "->", "controlPositionHelper", "->", "render", "(", "$", "panControl", "->", "getControlPosition", "(", ")", ")", ",", "false", ")", "->", "build", "(", ")", ";", "}"], "docstring": "Renders a pan control.\n\n@param \\Ivory\\GoogleMap\\Controls\\PanControl $panControl The pan control.\n\n@return string The JS output.", "docstring_tokens": ["Renders", "a", "pan", "control", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Helper/Controls/PanControlHelper.php#L70-L76", "partition": "test"}
{"repo": "tastyigniter/flame", "path": "src/Pagic/Concerns/HasEvents.php", "func_name": "HasEvents.observe", "original_string": "public static function observe($class)\n    {\n        $instance = new static;\n\n        $className = is_string($class) ? $class : get_class($class);\n\n        // When registering a model observer, we will spin through the possible events\n        // and determine if this observer has that method. If it does, we will hook\n        // it into the model's event system, making it convenient to watch these.\n        foreach ($instance->getObservableEvents() as $event) {\n            if (method_exists($class, $event)) {\n                static::registerModelEvent($event, $className.'@'.$event);\n            }\n        }\n    }", "language": "php", "code": "public static function observe($class)\n    {\n        $instance = new static;\n\n        $className = is_string($class) ? $class : get_class($class);\n\n        // When registering a model observer, we will spin through the possible events\n        // and determine if this observer has that method. If it does, we will hook\n        // it into the model's event system, making it convenient to watch these.\n        foreach ($instance->getObservableEvents() as $event) {\n            if (method_exists($class, $event)) {\n                static::registerModelEvent($event, $className.'@'.$event);\n            }\n        }\n    }", "code_tokens": ["public", "static", "function", "observe", "(", "$", "class", ")", "{", "$", "instance", "=", "new", "static", ";", "$", "className", "=", "is_string", "(", "$", "class", ")", "?", "$", "class", ":", "get_class", "(", "$", "class", ")", ";", "// When registering a model observer, we will spin through the possible events", "// and determine if this observer has that method. If it does, we will hook", "// it into the model's event system, making it convenient to watch these.", "foreach", "(", "$", "instance", "->", "getObservableEvents", "(", ")", "as", "$", "event", ")", "{", "if", "(", "method_exists", "(", "$", "class", ",", "$", "event", ")", ")", "{", "static", "::", "registerModelEvent", "(", "$", "event", ",", "$", "className", ".", "'@'", ".", "$", "event", ")", ";", "}", "}", "}"], "docstring": "Register an observer with the Model.\n\n@param  object|string $class\n\n@return void", "docstring_tokens": ["Register", "an", "observer", "with", "the", "Model", "."], "sha": "3c922ba1c02b3c14ad4adf91c2f37498045fa92a", "url": "https://github.com/tastyigniter/flame/blob/3c922ba1c02b3c14ad4adf91c2f37498045fa92a/src/Pagic/Concerns/HasEvents.php#L34-L48", "partition": "test"}
{"repo": "debuss/borsch-http-message", "path": "src/Http/Uri.php", "func_name": "Uri.withScheme", "original_string": "public function withScheme($scheme): UriInterface\n    {\n        if (!in_array(strtolower($scheme), ['', 'http', 'https'])) {\n            throw new InvalidArgumentException('Scheme must be one of : \"\", \"http\" or \"https\"');\n        }\n\n        $uri = clone $this;\n        $uri->scheme = $scheme;\n\n        return $uri;\n    }", "language": "php", "code": "public function withScheme($scheme): UriInterface\n    {\n        if (!in_array(strtolower($scheme), ['', 'http', 'https'])) {\n            throw new InvalidArgumentException('Scheme must be one of : \"\", \"http\" or \"https\"');\n        }\n\n        $uri = clone $this;\n        $uri->scheme = $scheme;\n\n        return $uri;\n    }", "code_tokens": ["public", "function", "withScheme", "(", "$", "scheme", ")", ":", "UriInterface", "{", "if", "(", "!", "in_array", "(", "strtolower", "(", "$", "scheme", ")", ",", "[", "''", ",", "'http'", ",", "'https'", "]", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Scheme must be one of : \"\", \"http\" or \"https\"'", ")", ";", "}", "$", "uri", "=", "clone", "$", "this", ";", "$", "uri", "->", "scheme", "=", "$", "scheme", ";", "return", "$", "uri", ";", "}"], "docstring": "Return an instance with the specified scheme.\nThis method MUST retain the state of the current instance, and return\nan instance that contains the specified scheme.\nImplementations MUST support the schemes \"http\" and \"https\" case\ninsensitively, and MAY accommodate other schemes if required.\nAn empty scheme is equivalent to removing the scheme.\n\n@param string $scheme The scheme to use with the new instance.\n@return UriInterface A new instance with the specified scheme.\n@throws \\InvalidArgumentException for invalid or unsupported schemes.", "docstring_tokens": ["Return", "an", "instance", "with", "the", "specified", "scheme", ".", "This", "method", "MUST", "retain", "the", "state", "of", "the", "current", "instance", "and", "return", "an", "instance", "that", "contains", "the", "specified", "scheme", ".", "Implementations", "MUST", "support", "the", "schemes", "http", "and", "https", "case", "insensitively", "and", "MAY", "accommodate", "other", "schemes", "if", "required", ".", "An", "empty", "scheme", "is", "equivalent", "to", "removing", "the", "scheme", "."], "sha": "b4f1ddf18221ab809bce3422c6c7337a7c233a6f", "url": "https://github.com/debuss/borsch-http-message/blob/b4f1ddf18221ab809bce3422c6c7337a7c233a6f/src/Http/Uri.php#L295-L305", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Helpers/ReflectionHelper.php", "func_name": "ReflectionHelper.checkMethodArguments", "original_string": "public static function checkMethodArguments($arguments = [], $method, $objectOrName = null, $returnType = self::ARG_CHECK_RETURN_DATA)\n    {\n        if ($method instanceof \\ReflectionMethod) {\n            $reflection = $method;\n        } elseif ($objectOrName !== null) {\n            $reflection = static::getMethodReflection($objectOrName, $method);\n        } else {\n            return null;\n        }\n        if ($reflection->getNumberOfRequiredParameters() === 0) {\n            return $returnType === static::ARG_CHECK_RETURN_DATA ? [] : true;\n        }\n        $methodParams = $reflection->getParameters();\n        $data = [];\n        foreach ($methodParams as $param) {\n            if (!$param->isOptional() && empty($arguments)) {\n                $data[$param->name] = static::ARG_REQUIRED_MISSING;\n            } elseif(!empty($arguments) && ($type = $param->getType()) !== null) {\n                $arg = reset($arguments);\n                $typeName = $type->getName();\n                $stdTypes = ['bool', 'int', 'string', 'array', 'object', 'float', 'callable'];\n                if (!in_array($typeName, $stdTypes) && !$arg instanceof $typeName) {\n                    $data[$param->name] = static::ARG_TYPE_MISMATCH;\n                }\n            }\n            array_shift($arguments);\n        }\n        return $returnType === static::ARG_CHECK_RETURN_DATA ? $data : empty($data);\n    }", "language": "php", "code": "public static function checkMethodArguments($arguments = [], $method, $objectOrName = null, $returnType = self::ARG_CHECK_RETURN_DATA)\n    {\n        if ($method instanceof \\ReflectionMethod) {\n            $reflection = $method;\n        } elseif ($objectOrName !== null) {\n            $reflection = static::getMethodReflection($objectOrName, $method);\n        } else {\n            return null;\n        }\n        if ($reflection->getNumberOfRequiredParameters() === 0) {\n            return $returnType === static::ARG_CHECK_RETURN_DATA ? [] : true;\n        }\n        $methodParams = $reflection->getParameters();\n        $data = [];\n        foreach ($methodParams as $param) {\n            if (!$param->isOptional() && empty($arguments)) {\n                $data[$param->name] = static::ARG_REQUIRED_MISSING;\n            } elseif(!empty($arguments) && ($type = $param->getType()) !== null) {\n                $arg = reset($arguments);\n                $typeName = $type->getName();\n                $stdTypes = ['bool', 'int', 'string', 'array', 'object', 'float', 'callable'];\n                if (!in_array($typeName, $stdTypes) && !$arg instanceof $typeName) {\n                    $data[$param->name] = static::ARG_TYPE_MISMATCH;\n                }\n            }\n            array_shift($arguments);\n        }\n        return $returnType === static::ARG_CHECK_RETURN_DATA ? $data : empty($data);\n    }", "code_tokens": ["public", "static", "function", "checkMethodArguments", "(", "$", "arguments", "=", "[", "]", ",", "$", "method", ",", "$", "objectOrName", "=", "null", ",", "$", "returnType", "=", "self", "::", "ARG_CHECK_RETURN_DATA", ")", "{", "if", "(", "$", "method", "instanceof", "\\", "ReflectionMethod", ")", "{", "$", "reflection", "=", "$", "method", ";", "}", "elseif", "(", "$", "objectOrName", "!==", "null", ")", "{", "$", "reflection", "=", "static", "::", "getMethodReflection", "(", "$", "objectOrName", ",", "$", "method", ")", ";", "}", "else", "{", "return", "null", ";", "}", "if", "(", "$", "reflection", "->", "getNumberOfRequiredParameters", "(", ")", "===", "0", ")", "{", "return", "$", "returnType", "===", "static", "::", "ARG_CHECK_RETURN_DATA", "?", "[", "]", ":", "true", ";", "}", "$", "methodParams", "=", "$", "reflection", "->", "getParameters", "(", ")", ";", "$", "data", "=", "[", "]", ";", "foreach", "(", "$", "methodParams", "as", "$", "param", ")", "{", "if", "(", "!", "$", "param", "->", "isOptional", "(", ")", "&&", "empty", "(", "$", "arguments", ")", ")", "{", "$", "data", "[", "$", "param", "->", "name", "]", "=", "static", "::", "ARG_REQUIRED_MISSING", ";", "}", "elseif", "(", "!", "empty", "(", "$", "arguments", ")", "&&", "(", "$", "type", "=", "$", "param", "->", "getType", "(", ")", ")", "!==", "null", ")", "{", "$", "arg", "=", "reset", "(", "$", "arguments", ")", ";", "$", "typeName", "=", "$", "type", "->", "getName", "(", ")", ";", "$", "stdTypes", "=", "[", "'bool'", ",", "'int'", ",", "'string'", ",", "'array'", ",", "'object'", ",", "'float'", ",", "'callable'", "]", ";", "if", "(", "!", "in_array", "(", "$", "typeName", ",", "$", "stdTypes", ")", "&&", "!", "$", "arg", "instanceof", "$", "typeName", ")", "{", "$", "data", "[", "$", "param", "->", "name", "]", "=", "static", "::", "ARG_TYPE_MISMATCH", ";", "}", "}", "array_shift", "(", "$", "arguments", ")", ";", "}", "return", "$", "returnType", "===", "static", "::", "ARG_CHECK_RETURN_DATA", "?", "$", "data", ":", "empty", "(", "$", "data", ")", ";", "}"], "docstring": "Check class method arguments for consistency\n@param array  $arguments\n@param string|\\ReflectionMethod $method\n@param null   $objectOrName\n@param string $returnType\n@return array|bool|null", "docstring_tokens": ["Check", "class", "method", "arguments", "for", "consistency"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Helpers/ReflectionHelper.php#L227-L255", "partition": "test"}
{"repo": "the-control-group/voyager", "path": "src/Traits/Translatable.php", "func_name": "Translatable.translatable", "original_string": "public function translatable()\n    {\n        if (isset($this->translatable) && $this->translatable == false) {\n            return false;\n        }\n\n        return !empty($this->getTranslatableAttributes());\n    }", "language": "php", "code": "public function translatable()\n    {\n        if (isset($this->translatable) && $this->translatable == false) {\n            return false;\n        }\n\n        return !empty($this->getTranslatableAttributes());\n    }", "code_tokens": ["public", "function", "translatable", "(", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "translatable", ")", "&&", "$", "this", "->", "translatable", "==", "false", ")", "{", "return", "false", ";", "}", "return", "!", "empty", "(", "$", "this", "->", "getTranslatableAttributes", "(", ")", ")", ";", "}"], "docstring": "Check if this model can translate.\n\n@return bool", "docstring_tokens": ["Check", "if", "this", "model", "can", "translate", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Traits/Translatable.php#L19-L26", "partition": "test"}
{"repo": "qcubed/composer", "path": "Installer.php", "func_name": "Installer.composerPluginInstall", "original_string": "protected function composerPluginInstall ($package) {\n\t\trequire_once(($this->vendorDir ? $this->vendorDir . '/' : '') . 'qcubed/qcubed/qcubed.inc.php');\t// get the configuration options so we can know where to put the plugin files\n\n\t\t// recursively copy the contents of the install subdirectory in the plugin.\n\t\t$strPluginDir = $this->getPackageBasePath($package);\n\t\t$strInstallDir = $strPluginDir . '/install';\n\t\t$strDestDir = __INCLUDES__ . '/plugins';\n\n\t\t$this->filesystem->ensureDirectoryExists($strDestDir);\n\t\t$this->io->write('Copying files from ' . $strInstallDir . ' to ' . $strDestDir);\n\t\tself::copy_dir($strInstallDir, $strDestDir);\n\t}", "language": "php", "code": "protected function composerPluginInstall ($package) {\n\t\trequire_once(($this->vendorDir ? $this->vendorDir . '/' : '') . 'qcubed/qcubed/qcubed.inc.php');\t// get the configuration options so we can know where to put the plugin files\n\n\t\t// recursively copy the contents of the install subdirectory in the plugin.\n\t\t$strPluginDir = $this->getPackageBasePath($package);\n\t\t$strInstallDir = $strPluginDir . '/install';\n\t\t$strDestDir = __INCLUDES__ . '/plugins';\n\n\t\t$this->filesystem->ensureDirectoryExists($strDestDir);\n\t\t$this->io->write('Copying files from ' . $strInstallDir . ' to ' . $strDestDir);\n\t\tself::copy_dir($strInstallDir, $strDestDir);\n\t}", "code_tokens": ["protected", "function", "composerPluginInstall", "(", "$", "package", ")", "{", "require_once", "(", "(", "$", "this", "->", "vendorDir", "?", "$", "this", "->", "vendorDir", ".", "'/'", ":", "''", ")", ".", "'qcubed/qcubed/qcubed.inc.php'", ")", ";", "// get the configuration options so we can know where to put the plugin files", "// recursively copy the contents of the install subdirectory in the plugin.", "$", "strPluginDir", "=", "$", "this", "->", "getPackageBasePath", "(", "$", "package", ")", ";", "$", "strInstallDir", "=", "$", "strPluginDir", ".", "'/install'", ";", "$", "strDestDir", "=", "__INCLUDES__", ".", "'/plugins'", ";", "$", "this", "->", "filesystem", "->", "ensureDirectoryExists", "(", "$", "strDestDir", ")", ";", "$", "this", "->", "io", "->", "write", "(", "'Copying files from '", ".", "$", "strInstallDir", ".", "' to '", ".", "$", "strDestDir", ")", ";", "self", "::", "copy_dir", "(", "$", "strInstallDir", ",", "$", "strDestDir", ")", ";", "}"], "docstring": "Move files out of the vendor directory and into the project directory that are in the plugin's install directory.\n@param $strPackageName", "docstring_tokens": ["Move", "files", "out", "of", "the", "vendor", "directory", "and", "into", "the", "project", "directory", "that", "are", "in", "the", "plugin", "s", "install", "directory", "."], "sha": "0c6dfd90d3051d1b885702ab91f91fe4b5d7826f", "url": "https://github.com/qcubed/composer/blob/0c6dfd90d3051d1b885702ab91f91fe4b5d7826f/Installer.php#L66-L77", "partition": "test"}
{"repo": "OXID-eSales/oxideshop_composer_plugin", "path": "src/Installer/Package/ThemePackageInstaller.php", "func_name": "ThemePackageInstaller.update", "original_string": "public function update($packagePath)\n    {\n        $this->writeUpdatingMessage($this->getPackageTypeDescription());\n        $question = 'All files in the following directories will be overwritten:' . PHP_EOL .\n                    '- ' . $this->formThemeTargetPath() . PHP_EOL .\n                    '- ' . Path::join($this->getRootDirectory(), $this->formAssetsDirectoryName()) . PHP_EOL .\n                    'Do you want to overwrite them? (y/N) ';\n\n        if ($this->askQuestionIfNotInstalled($question)) {\n            $this->writeCopyingMessage();\n            $this->copyPackage($packagePath);\n            $this->writeDoneMessage();\n        } else {\n            $this->writeSkippedMessage();\n        }\n    }", "language": "php", "code": "public function update($packagePath)\n    {\n        $this->writeUpdatingMessage($this->getPackageTypeDescription());\n        $question = 'All files in the following directories will be overwritten:' . PHP_EOL .\n                    '- ' . $this->formThemeTargetPath() . PHP_EOL .\n                    '- ' . Path::join($this->getRootDirectory(), $this->formAssetsDirectoryName()) . PHP_EOL .\n                    'Do you want to overwrite them? (y/N) ';\n\n        if ($this->askQuestionIfNotInstalled($question)) {\n            $this->writeCopyingMessage();\n            $this->copyPackage($packagePath);\n            $this->writeDoneMessage();\n        } else {\n            $this->writeSkippedMessage();\n        }\n    }", "code_tokens": ["public", "function", "update", "(", "$", "packagePath", ")", "{", "$", "this", "->", "writeUpdatingMessage", "(", "$", "this", "->", "getPackageTypeDescription", "(", ")", ")", ";", "$", "question", "=", "'All files in the following directories will be overwritten:'", ".", "PHP_EOL", ".", "'- '", ".", "$", "this", "->", "formThemeTargetPath", "(", ")", ".", "PHP_EOL", ".", "'- '", ".", "Path", "::", "join", "(", "$", "this", "->", "getRootDirectory", "(", ")", ",", "$", "this", "->", "formAssetsDirectoryName", "(", ")", ")", ".", "PHP_EOL", ".", "'Do you want to overwrite them? (y/N) '", ";", "if", "(", "$", "this", "->", "askQuestionIfNotInstalled", "(", "$", "question", ")", ")", "{", "$", "this", "->", "writeCopyingMessage", "(", ")", ";", "$", "this", "->", "copyPackage", "(", "$", "packagePath", ")", ";", "$", "this", "->", "writeDoneMessage", "(", ")", ";", "}", "else", "{", "$", "this", "->", "writeSkippedMessage", "(", ")", ";", "}", "}"], "docstring": "Overwrites theme files.\n\n@param string $packagePath", "docstring_tokens": ["Overwrites", "theme", "files", "."], "sha": "867d38a2637a191ceba1680ac6af41f6694affed", "url": "https://github.com/OXID-eSales/oxideshop_composer_plugin/blob/867d38a2637a191ceba1680ac6af41f6694affed/src/Installer/Package/ThemePackageInstaller.php#L47-L62", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Rbac/DbManager.php", "func_name": "DbManager.init", "original_string": "public function init()\n    {\n        parent::init();\n        $this->db = Instance::ensure($this->db, DatabaseInterface::class);\n        if ($this->cache !== null) {\n            $this->cache = Instance::ensure($this->cache, CacheInterface::class);\n        }\n    }", "language": "php", "code": "public function init()\n    {\n        parent::init();\n        $this->db = Instance::ensure($this->db, DatabaseInterface::class);\n        if ($this->cache !== null) {\n            $this->cache = Instance::ensure($this->cache, CacheInterface::class);\n        }\n    }", "code_tokens": ["public", "function", "init", "(", ")", "{", "parent", "::", "init", "(", ")", ";", "$", "this", "->", "db", "=", "Instance", "::", "ensure", "(", "$", "this", "->", "db", ",", "DatabaseInterface", "::", "class", ")", ";", "if", "(", "$", "this", "->", "cache", "!==", "null", ")", "{", "$", "this", "->", "cache", "=", "Instance", "::", "ensure", "(", "$", "this", "->", "cache", ",", "CacheInterface", "::", "class", ")", ";", "}", "}"], "docstring": "Initializes the application component.\nThis method overrides the parent implementation by establishing the database connection.", "docstring_tokens": ["Initializes", "the", "application", "component", ".", "This", "method", "overrides", "the", "parent", "implementation", "by", "establishing", "the", "database", "connection", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Rbac/DbManager.php#L106-L113", "partition": "test"}
{"repo": "xloit/xloit-bridge-zend-session", "path": "src/SaveHandler/Database/CryptDatabase.php", "func_name": "CryptDatabase.generateKey", "original_string": "protected function generateKey($key)\n    {\n        $keySize = openssl_cipher_iv_length(static::CRYPT_MODE);\n        $key     = hash(\n            'SHA256', $this->options->getClassName() . ':' . $this->sessionName . ':' . $key, true\n        );\n\n        return substr($key, 0, $keySize);\n    }", "language": "php", "code": "protected function generateKey($key)\n    {\n        $keySize = openssl_cipher_iv_length(static::CRYPT_MODE);\n        $key     = hash(\n            'SHA256', $this->options->getClassName() . ':' . $this->sessionName . ':' . $key, true\n        );\n\n        return substr($key, 0, $keySize);\n    }", "code_tokens": ["protected", "function", "generateKey", "(", "$", "key", ")", "{", "$", "keySize", "=", "openssl_cipher_iv_length", "(", "static", "::", "CRYPT_MODE", ")", ";", "$", "key", "=", "hash", "(", "'SHA256'", ",", "$", "this", "->", "options", "->", "getClassName", "(", ")", ".", "':'", ".", "$", "this", "->", "sessionName", ".", "':'", ".", "$", "key", ",", "true", ")", ";", "return", "substr", "(", "$", "key", ",", "0", ",", "$", "keySize", ")", ";", "}"], "docstring": "Generate secret key.\n\n@param string $key\n\n@return string Generated secret key", "docstring_tokens": ["Generate", "secret", "key", "."], "sha": "9697c5a4a273999514c53500edbeb1f0cc3a0fd9", "url": "https://github.com/xloit/xloit-bridge-zend-session/blob/9697c5a4a273999514c53500edbeb1f0cc3a0fd9/src/SaveHandler/Database/CryptDatabase.php#L120-L128", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Viewers/Event/EventViewer.php", "func_name": "EventViewer.endTimeFormatted", "original_string": "public function endTimeFormatted(Event $apiObject)\n    {\n        if (!$apiObject->all_day) {\n            $end = new \\DateTime();\n\n            $end->setTimestamp(strtotime($apiObject->start));\n\n            return $end->format('h:i A');\n        }\n\n        return;\n    }", "language": "php", "code": "public function endTimeFormatted(Event $apiObject)\n    {\n        if (!$apiObject->all_day) {\n            $end = new \\DateTime();\n\n            $end->setTimestamp(strtotime($apiObject->start));\n\n            return $end->format('h:i A');\n        }\n\n        return;\n    }", "code_tokens": ["public", "function", "endTimeFormatted", "(", "Event", "$", "apiObject", ")", "{", "if", "(", "!", "$", "apiObject", "->", "all_day", ")", "{", "$", "end", "=", "new", "\\", "DateTime", "(", ")", ";", "$", "end", "->", "setTimestamp", "(", "strtotime", "(", "$", "apiObject", "->", "start", ")", ")", ";", "return", "$", "end", "->", "format", "(", "'h:i A'", ")", ";", "}", "return", ";", "}"], "docstring": "Presents the correct end time formatted for editing.\n\n@param Event $apiObject\n\n@return string|null", "docstring_tokens": ["Presents", "the", "correct", "end", "time", "formatted", "for", "editing", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Viewers/Event/EventViewer.php#L161-L172", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/Payments.php", "func_name": "Quickbooks_Payments._handleError", "original_string": "protected function _handleError($data, $ignore_declines = false)\n\t{\n\t\tif (!$data)\n\t\t{\n\t\t\t// Check for 401/other errors\n\t\t\t$info = $this->_last_httpinfo;\n\n\t\t\tif ($info['http_code'] == QuickBooks_HTTP::HTTP_401)\n\t\t\t{\n\t\t\t\t$this->_setError($info['http_code'], 'Unauthorized.');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if ($info['http_code'] == QuickBooks_HTTP::HTTP_404)\n\t\t\t{\n\t\t\t\t$this->_setError($info['http_code'], 'Not Found.');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if ($info['http_code'] == QuickBooks_HTTP::HTTP_500)\n\t\t\t{\n\t\t\t\t$this->_setError($info['http_code'], 'Internal Server Error.');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (isset($data['errors']))\n\t\t{\n\t\t\t$err = array_merge(array(\n\t\t\t\t'code' => null,\n\t\t\t\t'message' => null,\n\t\t\t\t'type' => null,\n\t\t\t\t'detail' => null,\n\t\t\t\t'infoLink' => null,\n\t\t\t\t), $data['errors'][0]);\n\n\t\t\t$this->_setError($err['code'], $err['message'], $err['type'], $err['detail'], $err['infoLink']);\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!$ignore_declines)\n\t\t{\n\t\t\tif (isset($data['status']) and\n\t\t\t\t$data['status'] == self::STATUS_DECLINED)\n\t\t\t{\n\t\t\t\t$this->_setError(self::ERROR_DECLINE, 'This transaction was declined.');\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "language": "php", "code": "protected function _handleError($data, $ignore_declines = false)\n\t{\n\t\tif (!$data)\n\t\t{\n\t\t\t// Check for 401/other errors\n\t\t\t$info = $this->_last_httpinfo;\n\n\t\t\tif ($info['http_code'] == QuickBooks_HTTP::HTTP_401)\n\t\t\t{\n\t\t\t\t$this->_setError($info['http_code'], 'Unauthorized.');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if ($info['http_code'] == QuickBooks_HTTP::HTTP_404)\n\t\t\t{\n\t\t\t\t$this->_setError($info['http_code'], 'Not Found.');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if ($info['http_code'] == QuickBooks_HTTP::HTTP_500)\n\t\t\t{\n\t\t\t\t$this->_setError($info['http_code'], 'Internal Server Error.');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (isset($data['errors']))\n\t\t{\n\t\t\t$err = array_merge(array(\n\t\t\t\t'code' => null,\n\t\t\t\t'message' => null,\n\t\t\t\t'type' => null,\n\t\t\t\t'detail' => null,\n\t\t\t\t'infoLink' => null,\n\t\t\t\t), $data['errors'][0]);\n\n\t\t\t$this->_setError($err['code'], $err['message'], $err['type'], $err['detail'], $err['infoLink']);\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!$ignore_declines)\n\t\t{\n\t\t\tif (isset($data['status']) and\n\t\t\t\t$data['status'] == self::STATUS_DECLINED)\n\t\t\t{\n\t\t\t\t$this->_setError(self::ERROR_DECLINE, 'This transaction was declined.');\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "code_tokens": ["protected", "function", "_handleError", "(", "$", "data", ",", "$", "ignore_declines", "=", "false", ")", "{", "if", "(", "!", "$", "data", ")", "{", "// Check for 401/other errors", "$", "info", "=", "$", "this", "->", "_last_httpinfo", ";", "if", "(", "$", "info", "[", "'http_code'", "]", "==", "QuickBooks_HTTP", "::", "HTTP_401", ")", "{", "$", "this", "->", "_setError", "(", "$", "info", "[", "'http_code'", "]", ",", "'Unauthorized.'", ")", ";", "return", "true", ";", "}", "else", "if", "(", "$", "info", "[", "'http_code'", "]", "==", "QuickBooks_HTTP", "::", "HTTP_404", ")", "{", "$", "this", "->", "_setError", "(", "$", "info", "[", "'http_code'", "]", ",", "'Not Found.'", ")", ";", "return", "true", ";", "}", "else", "if", "(", "$", "info", "[", "'http_code'", "]", "==", "QuickBooks_HTTP", "::", "HTTP_500", ")", "{", "$", "this", "->", "_setError", "(", "$", "info", "[", "'http_code'", "]", ",", "'Internal Server Error.'", ")", ";", "return", "true", ";", "}", "}", "if", "(", "isset", "(", "$", "data", "[", "'errors'", "]", ")", ")", "{", "$", "err", "=", "array_merge", "(", "array", "(", "'code'", "=>", "null", ",", "'message'", "=>", "null", ",", "'type'", "=>", "null", ",", "'detail'", "=>", "null", ",", "'infoLink'", "=>", "null", ",", ")", ",", "$", "data", "[", "'errors'", "]", "[", "0", "]", ")", ";", "$", "this", "->", "_setError", "(", "$", "err", "[", "'code'", "]", ",", "$", "err", "[", "'message'", "]", ",", "$", "err", "[", "'type'", "]", ",", "$", "err", "[", "'detail'", "]", ",", "$", "err", "[", "'infoLink'", "]", ")", ";", "return", "true", ";", "}", "if", "(", "!", "$", "ignore_declines", ")", "{", "if", "(", "isset", "(", "$", "data", "[", "'status'", "]", ")", "and", "$", "data", "[", "'status'", "]", "==", "self", "::", "STATUS_DECLINED", ")", "{", "$", "this", "->", "_setError", "(", "self", "::", "ERROR_DECLINE", ",", "'This transaction was declined.'", ")", ";", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Handle an error, if set in the returned data\n\n@return boolean", "docstring_tokens": ["Handle", "an", "error", "if", "set", "in", "the", "returned", "data"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/Payments.php#L538-L589", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Request.php", "func_name": "Request.defaultEnvironment", "original_string": "public static function defaultEnvironment($key = null, $merge = false) {\n        if (self::$defaultEnv === null) {\n            self::$defaultEnv = array(\n                'REQUEST_METHOD' => 'GET',\n                'X_REWRITE' => true,\n                'SCRIPT_NAME' => '',\n                'PATH_INFO' => '/',\n                'EXT' => '',\n                'QUERY' => [],\n                'SERVER_NAME' => 'localhost',\n                'SERVER_PORT' => 80,\n                'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n                'HTTP_ACCEPT_LANGUAGE' => 'en-US,en;q=0.8',\n                'HTTP_ACCEPT_CHARSET' => 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',\n                'HTTP_USER_AGENT' => 'Garden/0.1 (Howdy stranger)',\n                'REMOTE_ADDR' => '127.0.0.1',\n                'URL_SCHEME' => 'http',\n                'INPUT' => [],\n            );\n        }\n\n        if ($key === null) {\n            return self::$defaultEnv;\n        } elseif (is_array($key)) {\n            if ($merge) {\n                self::$defaultEnv = array_merge(self::$defaultEnv, $key);\n            } else {\n                self::$defaultEnv = $key;\n            }\n            return self::$defaultEnv;\n        } elseif (is_string($key)) {\n            return val($key, self::$defaultEnv);\n        } else {\n            throw new \\InvalidArgumentException(\"Argument #1 for Request::globalEnvironment() is invalid.\", 422);\n        }\n    }", "language": "php", "code": "public static function defaultEnvironment($key = null, $merge = false) {\n        if (self::$defaultEnv === null) {\n            self::$defaultEnv = array(\n                'REQUEST_METHOD' => 'GET',\n                'X_REWRITE' => true,\n                'SCRIPT_NAME' => '',\n                'PATH_INFO' => '/',\n                'EXT' => '',\n                'QUERY' => [],\n                'SERVER_NAME' => 'localhost',\n                'SERVER_PORT' => 80,\n                'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n                'HTTP_ACCEPT_LANGUAGE' => 'en-US,en;q=0.8',\n                'HTTP_ACCEPT_CHARSET' => 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',\n                'HTTP_USER_AGENT' => 'Garden/0.1 (Howdy stranger)',\n                'REMOTE_ADDR' => '127.0.0.1',\n                'URL_SCHEME' => 'http',\n                'INPUT' => [],\n            );\n        }\n\n        if ($key === null) {\n            return self::$defaultEnv;\n        } elseif (is_array($key)) {\n            if ($merge) {\n                self::$defaultEnv = array_merge(self::$defaultEnv, $key);\n            } else {\n                self::$defaultEnv = $key;\n            }\n            return self::$defaultEnv;\n        } elseif (is_string($key)) {\n            return val($key, self::$defaultEnv);\n        } else {\n            throw new \\InvalidArgumentException(\"Argument #1 for Request::globalEnvironment() is invalid.\", 422);\n        }\n    }", "code_tokens": ["public", "static", "function", "defaultEnvironment", "(", "$", "key", "=", "null", ",", "$", "merge", "=", "false", ")", "{", "if", "(", "self", "::", "$", "defaultEnv", "===", "null", ")", "{", "self", "::", "$", "defaultEnv", "=", "array", "(", "'REQUEST_METHOD'", "=>", "'GET'", ",", "'X_REWRITE'", "=>", "true", ",", "'SCRIPT_NAME'", "=>", "''", ",", "'PATH_INFO'", "=>", "'/'", ",", "'EXT'", "=>", "''", ",", "'QUERY'", "=>", "[", "]", ",", "'SERVER_NAME'", "=>", "'localhost'", ",", "'SERVER_PORT'", "=>", "80", ",", "'HTTP_ACCEPT'", "=>", "'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'", ",", "'HTTP_ACCEPT_LANGUAGE'", "=>", "'en-US,en;q=0.8'", ",", "'HTTP_ACCEPT_CHARSET'", "=>", "'ISO-8859-1,utf-8;q=0.7,*;q=0.3'", ",", "'HTTP_USER_AGENT'", "=>", "'Garden/0.1 (Howdy stranger)'", ",", "'REMOTE_ADDR'", "=>", "'127.0.0.1'", ",", "'URL_SCHEME'", "=>", "'http'", ",", "'INPUT'", "=>", "[", "]", ",", ")", ";", "}", "if", "(", "$", "key", "===", "null", ")", "{", "return", "self", "::", "$", "defaultEnv", ";", "}", "elseif", "(", "is_array", "(", "$", "key", ")", ")", "{", "if", "(", "$", "merge", ")", "{", "self", "::", "$", "defaultEnv", "=", "array_merge", "(", "self", "::", "$", "defaultEnv", ",", "$", "key", ")", ";", "}", "else", "{", "self", "::", "$", "defaultEnv", "=", "$", "key", ";", "}", "return", "self", "::", "$", "defaultEnv", ";", "}", "elseif", "(", "is_string", "(", "$", "key", ")", ")", "{", "return", "val", "(", "$", "key", ",", "self", "::", "$", "defaultEnv", ")", ";", "}", "else", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"Argument #1 for Request::globalEnvironment() is invalid.\"", ",", "422", ")", ";", "}", "}"], "docstring": "Gets or updates the default environment.\n\n@param string|array|null $key Specifies a specific key in the environment array.\nIf you pass an array for this parameter then you can set the default environment.\n@param bool $merge Whether or not to merge the new value.\n@return array|mixed Returns the value at {@link $key} or the entire environment array.\n@throws \\InvalidArgumentException Throws an exception when {@link $key} is not valid.", "docstring_tokens": ["Gets", "or", "updates", "the", "default", "environment", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Request.php#L139-L174", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Addons.php", "func_name": "Addons.info", "original_string": "public static function info($addon_key) {\n        $addon_key = strtolower($addon_key);\n\n        // Check the enabled array first so that we don't load all addons if we don't have to.\n        if (isset(self::$enabledKeys[$addon_key])) {\n            return static::enabled($addon_key, self::K_INFO);\n        } else {\n            return static::all($addon_key, self::K_INFO);\n        }\n    }", "language": "php", "code": "public static function info($addon_key) {\n        $addon_key = strtolower($addon_key);\n\n        // Check the enabled array first so that we don't load all addons if we don't have to.\n        if (isset(self::$enabledKeys[$addon_key])) {\n            return static::enabled($addon_key, self::K_INFO);\n        } else {\n            return static::all($addon_key, self::K_INFO);\n        }\n    }", "code_tokens": ["public", "static", "function", "info", "(", "$", "addon_key", ")", "{", "$", "addon_key", "=", "strtolower", "(", "$", "addon_key", ")", ";", "// Check the enabled array first so that we don't load all addons if we don't have to.", "if", "(", "isset", "(", "self", "::", "$", "enabledKeys", "[", "$", "addon_key", "]", ")", ")", "{", "return", "static", "::", "enabled", "(", "$", "addon_key", ",", "self", "::", "K_INFO", ")", ";", "}", "else", "{", "return", "static", "::", "all", "(", "$", "addon_key", ",", "self", "::", "K_INFO", ")", ";", "}", "}"], "docstring": "Return the info array for an addon.\n\n@param string $addon_key The addon key.\n@return array|null Returns the addon's info array or null if the addon wasn't found.", "docstring_tokens": ["Return", "the", "info", "array", "for", "an", "addon", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Addons.php#L285-L294", "partition": "test"}
{"repo": "AlcyZ/PHP-Image-Magick", "path": "src/Options/Channel.php", "func_name": "Channel.getOption", "original_string": "public function getOption($value)\n\t{\n\t\tif(is_array($value))\n\t\t{\n\t\t\treturn $this->_getOptionFromArray($value);\n\t\t}\n\t\telseif(preg_match($this->shortHandRegex, strtoupper($value)))\n\t\t{\n\t\t\treturn '-channel ' . $value . ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$msg = 'Invalid argument $value \"' . $value . '\", allowed values are ' . implode(', ',\n\t\t\t                                                                                 $this->allowedOptions)\n\t\t\t       . ' as array (e.g.: [\"Green\", \"Blue\"]) or some of the characters R G B A O C M Y K without whitespaces and unique';\n\n\t\t\treturn $this->_optionValueException($msg);\n\t\t}\n\t}", "language": "php", "code": "public function getOption($value)\n\t{\n\t\tif(is_array($value))\n\t\t{\n\t\t\treturn $this->_getOptionFromArray($value);\n\t\t}\n\t\telseif(preg_match($this->shortHandRegex, strtoupper($value)))\n\t\t{\n\t\t\treturn '-channel ' . $value . ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$msg = 'Invalid argument $value \"' . $value . '\", allowed values are ' . implode(', ',\n\t\t\t                                                                                 $this->allowedOptions)\n\t\t\t       . ' as array (e.g.: [\"Green\", \"Blue\"]) or some of the characters R G B A O C M Y K without whitespaces and unique';\n\n\t\t\treturn $this->_optionValueException($msg);\n\t\t}\n\t}", "code_tokens": ["public", "function", "getOption", "(", "$", "value", ")", "{", "if", "(", "is_array", "(", "$", "value", ")", ")", "{", "return", "$", "this", "->", "_getOptionFromArray", "(", "$", "value", ")", ";", "}", "elseif", "(", "preg_match", "(", "$", "this", "->", "shortHandRegex", ",", "strtoupper", "(", "$", "value", ")", ")", ")", "{", "return", "'-channel '", ".", "$", "value", ".", "' '", ";", "}", "else", "{", "$", "msg", "=", "'Invalid argument $value \"'", ".", "$", "value", ".", "'\", allowed values are '", ".", "implode", "(", "', '", ",", "$", "this", "->", "allowedOptions", ")", ".", "' as array (e.g.: [\"Green\", \"Blue\"]) or some of the characters R G B A O C M Y K without whitespaces and unique'", ";", "return", "$", "this", "->", "_optionValueException", "(", "$", "msg", ")", ";", "}", "}"], "docstring": "Returns a prepared option string.\n\n@param array|string $value Option values.\n\n@throws InvalidOptionValueException If the $values argument is invalid.\n@return string Prepared option string.", "docstring_tokens": ["Returns", "a", "prepared", "option", "string", "."], "sha": "4a432f89c3829f10a9078df801da4a98b988f06d", "url": "https://github.com/AlcyZ/PHP-Image-Magick/blob/4a432f89c3829f10a9078df801da4a98b988f06d/src/Options/Channel.php#L52-L70", "partition": "test"}
{"repo": "wp-cli/widget-command", "path": "src/Widget_Command.php", "func_name": "Widget_Command.move", "original_string": "public function move( $args, $assoc_args ) {\n\n\t\tlist( $widget_id ) = $args;\n\t\tif ( ! $this->validate_sidebar_widget( $widget_id ) ) {\n\t\t\tWP_CLI::error( \"Widget doesn't exist.\" );\n\t\t}\n\n\t\tif ( empty( $assoc_args['position'] ) && empty( $assoc_args['sidebar-id'] ) ) {\n\t\t\tWP_CLI::error( 'A new position or new sidebar must be specified.' );\n\t\t}\n\n\t\tlist( $name, $option_index, $current_sidebar_id, $current_sidebar_index ) = $this->get_widget_data( $widget_id );\n\n\t\t$new_sidebar_id = ! empty( $assoc_args['sidebar-id'] ) ? $assoc_args['sidebar-id'] : $current_sidebar_id;\n\t\t$this->validate_sidebar( $new_sidebar_id );\n\n\t\t$new_sidebar_index = ! empty( $assoc_args['position'] ) ? $assoc_args['position'] - 1 : $current_sidebar_index;\n\t\t// Moving between sidebars adds to the top\n\t\tif ( $new_sidebar_id !== $current_sidebar_id && $new_sidebar_index === $current_sidebar_index ) {\n\t\t\t// Human-readable positions are different than numerically indexed array\n\t\t\t$new_sidebar_index = 0;\n\t\t}\n\n\t\t$this->move_sidebar_widget( $widget_id, $current_sidebar_id, $new_sidebar_id, $current_sidebar_index, $new_sidebar_index );\n\n\t\tWP_CLI::success( 'Widget moved.' );\n\n\t}", "language": "php", "code": "public function move( $args, $assoc_args ) {\n\n\t\tlist( $widget_id ) = $args;\n\t\tif ( ! $this->validate_sidebar_widget( $widget_id ) ) {\n\t\t\tWP_CLI::error( \"Widget doesn't exist.\" );\n\t\t}\n\n\t\tif ( empty( $assoc_args['position'] ) && empty( $assoc_args['sidebar-id'] ) ) {\n\t\t\tWP_CLI::error( 'A new position or new sidebar must be specified.' );\n\t\t}\n\n\t\tlist( $name, $option_index, $current_sidebar_id, $current_sidebar_index ) = $this->get_widget_data( $widget_id );\n\n\t\t$new_sidebar_id = ! empty( $assoc_args['sidebar-id'] ) ? $assoc_args['sidebar-id'] : $current_sidebar_id;\n\t\t$this->validate_sidebar( $new_sidebar_id );\n\n\t\t$new_sidebar_index = ! empty( $assoc_args['position'] ) ? $assoc_args['position'] - 1 : $current_sidebar_index;\n\t\t// Moving between sidebars adds to the top\n\t\tif ( $new_sidebar_id !== $current_sidebar_id && $new_sidebar_index === $current_sidebar_index ) {\n\t\t\t// Human-readable positions are different than numerically indexed array\n\t\t\t$new_sidebar_index = 0;\n\t\t}\n\n\t\t$this->move_sidebar_widget( $widget_id, $current_sidebar_id, $new_sidebar_id, $current_sidebar_index, $new_sidebar_index );\n\n\t\tWP_CLI::success( 'Widget moved.' );\n\n\t}", "code_tokens": ["public", "function", "move", "(", "$", "args", ",", "$", "assoc_args", ")", "{", "list", "(", "$", "widget_id", ")", "=", "$", "args", ";", "if", "(", "!", "$", "this", "->", "validate_sidebar_widget", "(", "$", "widget_id", ")", ")", "{", "WP_CLI", "::", "error", "(", "\"Widget doesn't exist.\"", ")", ";", "}", "if", "(", "empty", "(", "$", "assoc_args", "[", "'position'", "]", ")", "&&", "empty", "(", "$", "assoc_args", "[", "'sidebar-id'", "]", ")", ")", "{", "WP_CLI", "::", "error", "(", "'A new position or new sidebar must be specified.'", ")", ";", "}", "list", "(", "$", "name", ",", "$", "option_index", ",", "$", "current_sidebar_id", ",", "$", "current_sidebar_index", ")", "=", "$", "this", "->", "get_widget_data", "(", "$", "widget_id", ")", ";", "$", "new_sidebar_id", "=", "!", "empty", "(", "$", "assoc_args", "[", "'sidebar-id'", "]", ")", "?", "$", "assoc_args", "[", "'sidebar-id'", "]", ":", "$", "current_sidebar_id", ";", "$", "this", "->", "validate_sidebar", "(", "$", "new_sidebar_id", ")", ";", "$", "new_sidebar_index", "=", "!", "empty", "(", "$", "assoc_args", "[", "'position'", "]", ")", "?", "$", "assoc_args", "[", "'position'", "]", "-", "1", ":", "$", "current_sidebar_index", ";", "// Moving between sidebars adds to the top", "if", "(", "$", "new_sidebar_id", "!==", "$", "current_sidebar_id", "&&", "$", "new_sidebar_index", "===", "$", "current_sidebar_index", ")", "{", "// Human-readable positions are different than numerically indexed array", "$", "new_sidebar_index", "=", "0", ";", "}", "$", "this", "->", "move_sidebar_widget", "(", "$", "widget_id", ",", "$", "current_sidebar_id", ",", "$", "new_sidebar_id", ",", "$", "current_sidebar_index", ",", "$", "new_sidebar_index", ")", ";", "WP_CLI", "::", "success", "(", "'Widget moved.'", ")", ";", "}"], "docstring": "Moves the position of a widget.\n\nChanges the order of a widget in its existing sidebar, or moves it to a\nnew sidebar.\n\n## OPTIONS\n\n<widget-id>\n: Unique ID for the widget\n\n[--position=<position>]\n: Assign the widget to a new position.\n\n[--sidebar-id=<sidebar-id>]\n: Assign the widget to a new sidebar\n\n## EXAMPLES\n\n# Change position of widget\n$ wp widget move recent-comments-2 --position=2\nSuccess: Widget moved.\n\n# Move widget to Inactive Widgets\n$ wp widget move recent-comments-2 --sidebar-id=wp_inactive_widgets\nSuccess: Widget moved.\n\n@subcommand move", "docstring_tokens": ["Moves", "the", "position", "of", "a", "widget", "."], "sha": "58a1b2d2221cee852eb8a589535aaadb1217bb74", "url": "https://github.com/wp-cli/widget-command/blob/58a1b2d2221cee852eb8a589535aaadb1217bb74/src/Widget_Command.php#L238-L265", "partition": "test"}
{"repo": "silvershop/silvershop-core", "path": "src/Cart/ShoppingCart.php", "func_name": "ShoppingCart.updateOrderItemQuantity", "original_string": "public function updateOrderItemQuantity(OrderItem $item, $quantity = 1, $filter = [])\n    {\n        $order = $this->current();\n\n        if (!$order) {\n            return $this->error(_t(__CLASS__ . '.NoOrder', 'No current order.'));\n        }\n\n        if (!$item || $item->OrderID != $order->ID) {\n            return $this->error(_t(__CLASS__ . '.ItemNotFound', 'Item not found.'));\n        }\n\n        $buyable = $item->Buyable();\n        // If an extension throws an exception, error out\n        try {\n            $order->extend('beforeSetQuantity', $buyable, $quantity, $filter);\n        } catch (Exception $exception) {\n            return $this->error($exception->getMessage());\n        }\n\n        $item->Quantity = $quantity;\n\n        // If an extension throws an exception, error out\n        try {\n            $order->extend('afterSetQuantity', $item, $buyable, $quantity, $filter);\n        } catch (Exception $exception) {\n            return $this->error($exception->getMessage());\n        }\n\n        $item->write();\n        $this->message(_t(__CLASS__ . '.QuantitySet', 'Quantity has been set.'));\n\n        return true;\n    }", "language": "php", "code": "public function updateOrderItemQuantity(OrderItem $item, $quantity = 1, $filter = [])\n    {\n        $order = $this->current();\n\n        if (!$order) {\n            return $this->error(_t(__CLASS__ . '.NoOrder', 'No current order.'));\n        }\n\n        if (!$item || $item->OrderID != $order->ID) {\n            return $this->error(_t(__CLASS__ . '.ItemNotFound', 'Item not found.'));\n        }\n\n        $buyable = $item->Buyable();\n        // If an extension throws an exception, error out\n        try {\n            $order->extend('beforeSetQuantity', $buyable, $quantity, $filter);\n        } catch (Exception $exception) {\n            return $this->error($exception->getMessage());\n        }\n\n        $item->Quantity = $quantity;\n\n        // If an extension throws an exception, error out\n        try {\n            $order->extend('afterSetQuantity', $item, $buyable, $quantity, $filter);\n        } catch (Exception $exception) {\n            return $this->error($exception->getMessage());\n        }\n\n        $item->write();\n        $this->message(_t(__CLASS__ . '.QuantitySet', 'Quantity has been set.'));\n\n        return true;\n    }", "code_tokens": ["public", "function", "updateOrderItemQuantity", "(", "OrderItem", "$", "item", ",", "$", "quantity", "=", "1", ",", "$", "filter", "=", "[", "]", ")", "{", "$", "order", "=", "$", "this", "->", "current", "(", ")", ";", "if", "(", "!", "$", "order", ")", "{", "return", "$", "this", "->", "error", "(", "_t", "(", "__CLASS__", ".", "'.NoOrder'", ",", "'No current order.'", ")", ")", ";", "}", "if", "(", "!", "$", "item", "||", "$", "item", "->", "OrderID", "!=", "$", "order", "->", "ID", ")", "{", "return", "$", "this", "->", "error", "(", "_t", "(", "__CLASS__", ".", "'.ItemNotFound'", ",", "'Item not found.'", ")", ")", ";", "}", "$", "buyable", "=", "$", "item", "->", "Buyable", "(", ")", ";", "// If an extension throws an exception, error out", "try", "{", "$", "order", "->", "extend", "(", "'beforeSetQuantity'", ",", "$", "buyable", ",", "$", "quantity", ",", "$", "filter", ")", ";", "}", "catch", "(", "Exception", "$", "exception", ")", "{", "return", "$", "this", "->", "error", "(", "$", "exception", "->", "getMessage", "(", ")", ")", ";", "}", "$", "item", "->", "Quantity", "=", "$", "quantity", ";", "// If an extension throws an exception, error out", "try", "{", "$", "order", "->", "extend", "(", "'afterSetQuantity'", ",", "$", "item", ",", "$", "buyable", ",", "$", "quantity", ",", "$", "filter", ")", ";", "}", "catch", "(", "Exception", "$", "exception", ")", "{", "return", "$", "this", "->", "error", "(", "$", "exception", "->", "getMessage", "(", ")", ")", ";", "}", "$", "item", "->", "write", "(", ")", ";", "$", "this", "->", "message", "(", "_t", "(", "__CLASS__", ".", "'.QuantitySet'", ",", "'Quantity has been set.'", ")", ")", ";", "return", "true", ";", "}"], "docstring": "Update quantity of a given order item\n\n@param  OrderItem $item\n@param  int       $quantity the new quantity to use\n@param  array     $filter\n@return boolean success/failure", "docstring_tokens": ["Update", "quantity", "of", "a", "given", "order", "item"], "sha": "b090e970b06c0fb7e68107360760b6e2d6d184c4", "url": "https://github.com/silvershop/silvershop-core/blob/b090e970b06c0fb7e68107360760b6e2d6d184c4/src/Cart/ShoppingCart.php#L279-L312", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Profiler/DataCollector/AbstractDataCollector.php", "func_name": "AbstractDataCollector.createTooltipGroup", "original_string": "protected function createTooltipGroup(array $data): string\n    {\n        $tooltip = '<div class=\"profiler-menu-tooltip-group\">';\n\n        foreach ($data as $strong => $infos) {\n            $tooltip .= '<div class=\"profiler-menu-tooltip-group-piece\">';\n\n            if (\\is_array($infos)) {\n                $tooltip .= '<b>' . $strong . '</b>';\n\n                foreach ($infos as $info) {\n                    $class = isset($info['class']) ? ' class=\"' . $info['class'] . '\"' : '';\n\n                    $tooltip .= '<span' . $class . '>' . $info['value'] . '</span>';\n                }\n            } elseif (\\is_int($strong) && \\is_string($infos)) {\n                $tooltip .= $infos;\n            } else {\n                $tooltip .= '<b>' . $strong . '</b><span>' . $infos . '</span>';\n            }\n\n            $tooltip .= '</div>';\n        }\n\n        $tooltip .= '</div>';\n\n        return $tooltip;\n    }", "language": "php", "code": "protected function createTooltipGroup(array $data): string\n    {\n        $tooltip = '<div class=\"profiler-menu-tooltip-group\">';\n\n        foreach ($data as $strong => $infos) {\n            $tooltip .= '<div class=\"profiler-menu-tooltip-group-piece\">';\n\n            if (\\is_array($infos)) {\n                $tooltip .= '<b>' . $strong . '</b>';\n\n                foreach ($infos as $info) {\n                    $class = isset($info['class']) ? ' class=\"' . $info['class'] . '\"' : '';\n\n                    $tooltip .= '<span' . $class . '>' . $info['value'] . '</span>';\n                }\n            } elseif (\\is_int($strong) && \\is_string($infos)) {\n                $tooltip .= $infos;\n            } else {\n                $tooltip .= '<b>' . $strong . '</b><span>' . $infos . '</span>';\n            }\n\n            $tooltip .= '</div>';\n        }\n\n        $tooltip .= '</div>';\n\n        return $tooltip;\n    }", "code_tokens": ["protected", "function", "createTooltipGroup", "(", "array", "$", "data", ")", ":", "string", "{", "$", "tooltip", "=", "'<div class=\"profiler-menu-tooltip-group\">'", ";", "foreach", "(", "$", "data", "as", "$", "strong", "=>", "$", "infos", ")", "{", "$", "tooltip", ".=", "'<div class=\"profiler-menu-tooltip-group-piece\">'", ";", "if", "(", "\\", "is_array", "(", "$", "infos", ")", ")", "{", "$", "tooltip", ".=", "'<b>'", ".", "$", "strong", ".", "'</b>'", ";", "foreach", "(", "$", "infos", "as", "$", "info", ")", "{", "$", "class", "=", "isset", "(", "$", "info", "[", "'class'", "]", ")", "?", "' class=\"'", ".", "$", "info", "[", "'class'", "]", ".", "'\"'", ":", "''", ";", "$", "tooltip", ".=", "'<span'", ".", "$", "class", ".", "'>'", ".", "$", "info", "[", "'value'", "]", ".", "'</span>'", ";", "}", "}", "elseif", "(", "\\", "is_int", "(", "$", "strong", ")", "&&", "\\", "is_string", "(", "$", "infos", ")", ")", "{", "$", "tooltip", ".=", "$", "infos", ";", "}", "else", "{", "$", "tooltip", ".=", "'<b>'", ".", "$", "strong", ".", "'</b><span>'", ".", "$", "infos", ".", "'</span>'", ";", "}", "$", "tooltip", ".=", "'</div>'", ";", "}", "$", "tooltip", ".=", "'</div>'", ";", "return", "$", "tooltip", ";", "}"], "docstring": "Creates a tooltip group from array.\n\narray[]\n['key']       string          Defines the name of <b> html element.\n['value']     array|string    Defines the content to be shown in the <span> html element.\n['class'] string          Adds a class to the <span> html element.\n['value'] string          Adds the content.\n\n@param array $data (See above)\n\n@return string", "docstring_tokens": ["Creates", "a", "tooltip", "group", "from", "array", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Profiler/DataCollector/AbstractDataCollector.php#L128-L155", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Config/Config.php", "func_name": "Config.get", "original_string": "public static function get(string $name, bool $getShared = true)\n\t{\n\t\t$class = $name;\n\t\tif (($pos = strrpos($name, '\\\\')) !== false)\n\t\t{\n\t\t\t$class = substr($name, $pos + 1);\n\t\t}\n\n\t\tif (! $getShared)\n\t\t{\n\t\t\treturn self::createClass($name);\n\t\t}\n\n\t\tif (! isset( self::$instances[$class] ))\n\t\t{\n\t\t\tself::$instances[$class] = self::createClass($name);\n\t\t}\n\t\treturn self::$instances[$class];\n\t}", "language": "php", "code": "public static function get(string $name, bool $getShared = true)\n\t{\n\t\t$class = $name;\n\t\tif (($pos = strrpos($name, '\\\\')) !== false)\n\t\t{\n\t\t\t$class = substr($name, $pos + 1);\n\t\t}\n\n\t\tif (! $getShared)\n\t\t{\n\t\t\treturn self::createClass($name);\n\t\t}\n\n\t\tif (! isset( self::$instances[$class] ))\n\t\t{\n\t\t\tself::$instances[$class] = self::createClass($name);\n\t\t}\n\t\treturn self::$instances[$class];\n\t}", "code_tokens": ["public", "static", "function", "get", "(", "string", "$", "name", ",", "bool", "$", "getShared", "=", "true", ")", "{", "$", "class", "=", "$", "name", ";", "if", "(", "(", "$", "pos", "=", "strrpos", "(", "$", "name", ",", "'\\\\'", ")", ")", "!==", "false", ")", "{", "$", "class", "=", "substr", "(", "$", "name", ",", "$", "pos", "+", "1", ")", ";", "}", "if", "(", "!", "$", "getShared", ")", "{", "return", "self", "::", "createClass", "(", "$", "name", ")", ";", "}", "if", "(", "!", "isset", "(", "self", "::", "$", "instances", "[", "$", "class", "]", ")", ")", "{", "self", "::", "$", "instances", "[", "$", "class", "]", "=", "self", "::", "createClass", "(", "$", "name", ")", ";", "}", "return", "self", "::", "$", "instances", "[", "$", "class", "]", ";", "}"], "docstring": "Create new configuration instances or return\na shared instance\n\n@param string  $name      Configuration name\n@param boolean $getShared Use shared instance\n\n@return mixed|null", "docstring_tokens": ["Create", "new", "configuration", "instances", "or", "return", "a", "shared", "instance"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Config/Config.php#L67-L85", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Helper/MapHelper.php", "func_name": "MapHelper.renderJsContainerCircles", "original_string": "public function renderJsContainerCircles(Map $map)\n    {\n        $output = array();\n\n        foreach ($map->getCircles() as $circle) {\n            $output[] = sprintf(\n                '%s.circles.%s = %s',\n                $this->getJsContainerName($map),\n                $circle->getJavascriptVariable(),\n                $this->circleHelper->render($circle, $map)\n            );\n        }\n\n        return implode('', $output);\n    }", "language": "php", "code": "public function renderJsContainerCircles(Map $map)\n    {\n        $output = array();\n\n        foreach ($map->getCircles() as $circle) {\n            $output[] = sprintf(\n                '%s.circles.%s = %s',\n                $this->getJsContainerName($map),\n                $circle->getJavascriptVariable(),\n                $this->circleHelper->render($circle, $map)\n            );\n        }\n\n        return implode('', $output);\n    }", "code_tokens": ["public", "function", "renderJsContainerCircles", "(", "Map", "$", "map", ")", "{", "$", "output", "=", "array", "(", ")", ";", "foreach", "(", "$", "map", "->", "getCircles", "(", ")", "as", "$", "circle", ")", "{", "$", "output", "[", "]", "=", "sprintf", "(", "'%s.circles.%s = %s'", ",", "$", "this", "->", "getJsContainerName", "(", "$", "map", ")", ",", "$", "circle", "->", "getJavascriptVariable", "(", ")", ",", "$", "this", "->", "circleHelper", "->", "render", "(", "$", "circle", ",", "$", "map", ")", ")", ";", "}", "return", "implode", "(", "''", ",", "$", "output", ")", ";", "}"], "docstring": "Renders the javascript container circles.\n\n@param \\Ivory\\GoogleMap\\Map $map The map.\n\n@return string The JS output.", "docstring_tokens": ["Renders", "the", "javascript", "container", "circles", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Helper/MapHelper.php#L1228-L1242", "partition": "test"}
{"repo": "zicht/itertools", "path": "src/Zicht/Itertools/lib/Traits/ZipTrait.php", "func_name": "ZipTrait.zip", "original_string": "public function zip(/* $iterable, $iterable2, ... */)\n    {\n        if ($this instanceof \\Iterator) {\n            $iterables = array_map(\n                '\\Zicht\\Itertools\\conversions\\mixed_to_iterator',\n                func_get_args()\n            );\n            $reflectorClass = new \\ReflectionClass('\\Zicht\\Itertools\\lib\\ZipIterator');\n            return $reflectorClass->newInstanceArgs(array_merge([$this], $iterables));\n        }\n\n        return null;\n    }", "language": "php", "code": "public function zip(/* $iterable, $iterable2, ... */)\n    {\n        if ($this instanceof \\Iterator) {\n            $iterables = array_map(\n                '\\Zicht\\Itertools\\conversions\\mixed_to_iterator',\n                func_get_args()\n            );\n            $reflectorClass = new \\ReflectionClass('\\Zicht\\Itertools\\lib\\ZipIterator');\n            return $reflectorClass->newInstanceArgs(array_merge([$this], $iterables));\n        }\n\n        return null;\n    }", "code_tokens": ["public", "function", "zip", "(", "/* $iterable, $iterable2, ... */", ")", "{", "if", "(", "$", "this", "instanceof", "\\", "Iterator", ")", "{", "$", "iterables", "=", "array_map", "(", "'\\Zicht\\Itertools\\conversions\\mixed_to_iterator'", ",", "func_get_args", "(", ")", ")", ";", "$", "reflectorClass", "=", "new", "\\", "ReflectionClass", "(", "'\\Zicht\\Itertools\\lib\\ZipIterator'", ")", ";", "return", "$", "reflectorClass", "->", "newInstanceArgs", "(", "array_merge", "(", "[", "$", "this", "]", ",", "$", "iterables", ")", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Returns an iterator where one or more iterables are zipped together\n\nThis function returns a list of tuples, where the i-th tuple contains\nthe i-th element from each of the argument sequences or iterables.\n\nThe returned list is truncated in length to the length of the\nshortest argument sequence.\n\n> zip([1, 2, 3], ['a', 'b', 'c'])\n[1, 'a'] [2, 'b'] [3, 'c']\n\n@param array|string|\\Iterator $iterable\n@param array|string|\\Iterator $iterable2\n@return ZipIterator", "docstring_tokens": ["Returns", "an", "iterator", "where", "one", "or", "more", "iterables", "are", "zipped", "together"], "sha": "f0439a572f7ccbc363ab692927e970727c6eb776", "url": "https://github.com/zicht/itertools/blob/f0439a572f7ccbc363ab692927e970727c6eb776/src/Zicht/Itertools/lib/Traits/ZipTrait.php#L30-L42", "partition": "test"}
{"repo": "marklogic-community/mlphp", "path": "api/MarkLogic/MLPHP/RESTClient.php", "func_name": "RESTClient.delete", "original_string": "public function delete($request)\n    {\n        $this->logger->debug(\"DELETE\");\n\n        $ch = curl_init();\n\n        $this->setOptions($ch, $request->getUrlStr(), $request->getHeaders());\n\n\n        // Options specific to DELETE\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n\n        return $this->execute($ch);\n    }", "language": "php", "code": "public function delete($request)\n    {\n        $this->logger->debug(\"DELETE\");\n\n        $ch = curl_init();\n\n        $this->setOptions($ch, $request->getUrlStr(), $request->getHeaders());\n\n\n        // Options specific to DELETE\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n\n        return $this->execute($ch);\n    }", "code_tokens": ["public", "function", "delete", "(", "$", "request", ")", "{", "$", "this", "->", "logger", "->", "debug", "(", "\"DELETE\"", ")", ";", "$", "ch", "=", "curl_init", "(", ")", ";", "$", "this", "->", "setOptions", "(", "$", "ch", ",", "$", "request", "->", "getUrlStr", "(", ")", ",", "$", "request", "->", "getHeaders", "(", ")", ")", ";", "// Options specific to DELETE", "curl_setopt", "(", "$", "ch", ",", "CURLOPT_CUSTOMREQUEST", ",", "'DELETE'", ")", ";", "return", "$", "this", "->", "execute", "(", "$", "ch", ")", ";", "}"], "docstring": "Perform a DELETE request with cURL\n\n@param RESTRequest request A REST request.\n@return RESTResponse A REST response.", "docstring_tokens": ["Perform", "a", "DELETE", "request", "with", "cURL"], "sha": "c3aa3de82525cc5c3404e348e4d5069c0eee3277", "url": "https://github.com/marklogic-community/mlphp/blob/c3aa3de82525cc5c3404e348e4d5069c0eee3277/api/MarkLogic/MLPHP/RESTClient.php#L325-L338", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/SchemaBuilderTrait.php", "func_name": "SchemaBuilderTrait.json", "original_string": "public function json()\n    {\n        /*\n         * TODO Remove in Yii 2.1\n         *\n         * Disabled due to bug in MySQL extension\n         * @link https://bugs.php.net/bug.php?id=70384\n         */\n        if (version_compare(PHP_VERSION, '5.6', '<') && $this->getDb()->getDriverName() === 'mysql') {\n            throw new \\Reaction\\Exceptions\\Exception('JSON column type is not supported in PHP < 5.6');\n        }\n\n        return $this->getDb()->getSchema()->createColumnSchemaBuilder(Schema::TYPE_JSON);\n    }", "language": "php", "code": "public function json()\n    {\n        /*\n         * TODO Remove in Yii 2.1\n         *\n         * Disabled due to bug in MySQL extension\n         * @link https://bugs.php.net/bug.php?id=70384\n         */\n        if (version_compare(PHP_VERSION, '5.6', '<') && $this->getDb()->getDriverName() === 'mysql') {\n            throw new \\Reaction\\Exceptions\\Exception('JSON column type is not supported in PHP < 5.6');\n        }\n\n        return $this->getDb()->getSchema()->createColumnSchemaBuilder(Schema::TYPE_JSON);\n    }", "code_tokens": ["public", "function", "json", "(", ")", "{", "/*\n         * TODO Remove in Yii 2.1\n         *\n         * Disabled due to bug in MySQL extension\n         * @link https://bugs.php.net/bug.php?id=70384\n         */", "if", "(", "version_compare", "(", "PHP_VERSION", ",", "'5.6'", ",", "'<'", ")", "&&", "$", "this", "->", "getDb", "(", ")", "->", "getDriverName", "(", ")", "===", "'mysql'", ")", "{", "throw", "new", "\\", "Reaction", "\\", "Exceptions", "\\", "Exception", "(", "'JSON column type is not supported in PHP < 5.6'", ")", ";", "}", "return", "$", "this", "->", "getDb", "(", ")", "->", "getSchema", "(", ")", "->", "createColumnSchemaBuilder", "(", "Schema", "::", "TYPE_JSON", ")", ";", "}"], "docstring": "Creates a JSON column.\n@return ColumnSchemaBuilder the column instance which can be further customized.\n@throws \\Reaction\\Exceptions\\Exception", "docstring_tokens": ["Creates", "a", "JSON", "column", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/SchemaBuilderTrait.php#L266-L279", "partition": "test"}
{"repo": "subfission/cas", "path": "src/Subfission/Cas/CasManager.php", "func_name": "CasManager.logout", "original_string": "public function logout( $url = '', $service = '' ) {\n\t\tif ( phpCAS::isSessionAuthenticated() ) {\n\t\t\tif ( isset( $_SESSION['phpCAS'] ) ) {\n\t\t\t\t$serialized = serialize( $_SESSION['phpCAS'] );\n\t\t\t\tphpCAS::log( 'Logout requested, but no session data found for user:'\n\t\t\t\t             . PHP_EOL . $serialized );\n\t\t\t}\n\t\t}\n\t\t$params = [];\n\t\tif ( $service ) {\n\t\t\t$params['service'] = $service;\n\t\t} elseif ( $this->config['cas_logout_redirect'] ) {\n\t\t\t$params['service'] = $this->config['cas_logout_redirect'];\n\t\t}\n\t\tif ( $url ) {\n\t\t\t$params['url'] = $url;\n\t\t}\n\t\tphpCAS::logout( $params );\n\t\texit;\n\t}", "language": "php", "code": "public function logout( $url = '', $service = '' ) {\n\t\tif ( phpCAS::isSessionAuthenticated() ) {\n\t\t\tif ( isset( $_SESSION['phpCAS'] ) ) {\n\t\t\t\t$serialized = serialize( $_SESSION['phpCAS'] );\n\t\t\t\tphpCAS::log( 'Logout requested, but no session data found for user:'\n\t\t\t\t             . PHP_EOL . $serialized );\n\t\t\t}\n\t\t}\n\t\t$params = [];\n\t\tif ( $service ) {\n\t\t\t$params['service'] = $service;\n\t\t} elseif ( $this->config['cas_logout_redirect'] ) {\n\t\t\t$params['service'] = $this->config['cas_logout_redirect'];\n\t\t}\n\t\tif ( $url ) {\n\t\t\t$params['url'] = $url;\n\t\t}\n\t\tphpCAS::logout( $params );\n\t\texit;\n\t}", "code_tokens": ["public", "function", "logout", "(", "$", "url", "=", "''", ",", "$", "service", "=", "''", ")", "{", "if", "(", "phpCAS", "::", "isSessionAuthenticated", "(", ")", ")", "{", "if", "(", "isset", "(", "$", "_SESSION", "[", "'phpCAS'", "]", ")", ")", "{", "$", "serialized", "=", "serialize", "(", "$", "_SESSION", "[", "'phpCAS'", "]", ")", ";", "phpCAS", "::", "log", "(", "'Logout requested, but no session data found for user:'", ".", "PHP_EOL", ".", "$", "serialized", ")", ";", "}", "}", "$", "params", "=", "[", "]", ";", "if", "(", "$", "service", ")", "{", "$", "params", "[", "'service'", "]", "=", "$", "service", ";", "}", "elseif", "(", "$", "this", "->", "config", "[", "'cas_logout_redirect'", "]", ")", "{", "$", "params", "[", "'service'", "]", "=", "$", "this", "->", "config", "[", "'cas_logout_redirect'", "]", ";", "}", "if", "(", "$", "url", ")", "{", "$", "params", "[", "'url'", "]", "=", "$", "url", ";", "}", "phpCAS", "::", "logout", "(", "$", "params", ")", ";", "exit", ";", "}"], "docstring": "Logout of the CAS session and redirect users.\n\n@param string $url\n@param string $service", "docstring_tokens": ["Logout", "of", "the", "CAS", "session", "and", "redirect", "users", "."], "sha": "f3c9c003e293a7f6d1c364c2f8612a4cfbfa4d3a", "url": "https://github.com/subfission/cas/blob/f3c9c003e293a7f6d1c364c2f8612a4cfbfa4d3a/src/Subfission/Cas/CasManager.php#L241-L260", "partition": "test"}
{"repo": "PHPExif/php-exif", "path": "lib/PHPExif/Adapter/AdapterAbstract.php", "func_name": "AdapterAbstract.getMapper", "original_string": "public function getMapper()\n    {\n        if (null === $this->mapper) {\n            // lazy load one\n            $mapper = new $this->mapperClass;\n\n            $this->setMapper($mapper);\n        }\n\n        return $this->mapper;\n    }", "language": "php", "code": "public function getMapper()\n    {\n        if (null === $this->mapper) {\n            // lazy load one\n            $mapper = new $this->mapperClass;\n\n            $this->setMapper($mapper);\n        }\n\n        return $this->mapper;\n    }", "code_tokens": ["public", "function", "getMapper", "(", ")", "{", "if", "(", "null", "===", "$", "this", "->", "mapper", ")", "{", "// lazy load one", "$", "mapper", "=", "new", "$", "this", "->", "mapperClass", ";", "$", "this", "->", "setMapper", "(", "$", "mapper", ")", ";", "}", "return", "$", "this", "->", "mapper", ";", "}"], "docstring": "Accessor for the data mapper\n\n@return \\PHPExif\\Mapper\\MapperInterface", "docstring_tokens": ["Accessor", "for", "the", "data", "mapper"], "sha": "41f23db39d7b48e4af0e134c2e80e577c1782ac9", "url": "https://github.com/PHPExif/php-exif/blob/41f23db39d7b48e4af0e134c2e80e577c1782ac9/lib/PHPExif/Adapter/AdapterAbstract.php#L77-L87", "partition": "test"}
{"repo": "TypistTech/wp-better-settings", "path": "src/Registrar.php", "func_name": "Registrar.registerSection", "original_string": "private function registerSection(SectionInterface $section)\n    {\n        add_settings_section(\n            $section->getId(),\n            $section->getTitle(),\n            $section->getRenderClosure(),\n            $this->pageSlug\n        );\n    }", "language": "php", "code": "private function registerSection(SectionInterface $section)\n    {\n        add_settings_section(\n            $section->getId(),\n            $section->getTitle(),\n            $section->getRenderClosure(),\n            $this->pageSlug\n        );\n    }", "code_tokens": ["private", "function", "registerSection", "(", "SectionInterface", "$", "section", ")", "{", "add_settings_section", "(", "$", "section", "->", "getId", "(", ")", ",", "$", "section", "->", "getTitle", "(", ")", ",", "$", "section", "->", "getRenderClosure", "(", ")", ",", "$", "this", "->", "pageSlug", ")", ";", "}"], "docstring": "Register a section to the settings page with WordPress.\n\n@param SectionInterface $section Section to be registered.\n\n@void", "docstring_tokens": ["Register", "a", "section", "to", "the", "settings", "page", "with", "WordPress", "."], "sha": "30fd7f962f8ab029ae6d6d53f48f8d4826a87f20", "url": "https://github.com/TypistTech/wp-better-settings/blob/30fd7f962f8ab029ae6d6d53f48f8d4826a87f20/src/Registrar.php#L71-L79", "partition": "test"}
{"repo": "atelierspierrot/maths", "path": "src/Maths/Geometry/Line.php", "func_name": "Line.getAbscissaByOrdinate", "original_string": "public function getAbscissaByOrdinate($y)\n    {\n        if ($this->isVertical()) {\n            return $this->getPointA()->getAbscissa();\n        }\n        return (($y - $this->getYIntercept()) / $this->getSlope());\n    }", "language": "php", "code": "public function getAbscissaByOrdinate($y)\n    {\n        if ($this->isVertical()) {\n            return $this->getPointA()->getAbscissa();\n        }\n        return (($y - $this->getYIntercept()) / $this->getSlope());\n    }", "code_tokens": ["public", "function", "getAbscissaByOrdinate", "(", "$", "y", ")", "{", "if", "(", "$", "this", "->", "isVertical", "(", ")", ")", "{", "return", "$", "this", "->", "getPointA", "(", ")", "->", "getAbscissa", "(", ")", ";", "}", "return", "(", "(", "$", "y", "-", "$", "this", "->", "getYIntercept", "(", ")", ")", "/", "$", "this", "->", "getSlope", "(", ")", ")", ";", "}"], "docstring": "Get the abscissa of a point of the line by its ordinate\n\n@param   float   $y\n@return  float", "docstring_tokens": ["Get", "the", "abscissa", "of", "a", "point", "of", "the", "line", "by", "its", "ordinate"], "sha": "8524c3e4ee12a239e876a373a835065f5ba56d3b", "url": "https://github.com/atelierspierrot/maths/blob/8524c3e4ee12a239e876a373a835065f5ba56d3b/src/Maths/Geometry/Line.php#L276-L282", "partition": "test"}
{"repo": "silvershop/silvershop-core", "path": "src/Cart/ShoppingCartController.php", "func_name": "ShoppingCartController.build_url", "original_string": "protected static function build_url($action, $buyable, $params = [])\n    {\n        if (!$action || !$buyable) {\n            return false;\n        }\n\n        if (SecurityToken::is_enabled() && !self::config()->disable_security_token) {\n            $params[SecurityToken::inst()->getName()] = SecurityToken::inst()->getValue();\n        }\n\n        $className = get_class($buyable);\n\n        $link = Controller::join_links(\n            [\n            self::config()->url_segment,\n            $action,\n            ShopTools::sanitiseClassName($className),\n            $buyable->ID\n            ]\n        );\n\n        return empty($params) ? $link : $link . '?' . http_build_query($params);\n    }", "language": "php", "code": "protected static function build_url($action, $buyable, $params = [])\n    {\n        if (!$action || !$buyable) {\n            return false;\n        }\n\n        if (SecurityToken::is_enabled() && !self::config()->disable_security_token) {\n            $params[SecurityToken::inst()->getName()] = SecurityToken::inst()->getValue();\n        }\n\n        $className = get_class($buyable);\n\n        $link = Controller::join_links(\n            [\n            self::config()->url_segment,\n            $action,\n            ShopTools::sanitiseClassName($className),\n            $buyable->ID\n            ]\n        );\n\n        return empty($params) ? $link : $link . '?' . http_build_query($params);\n    }", "code_tokens": ["protected", "static", "function", "build_url", "(", "$", "action", ",", "$", "buyable", ",", "$", "params", "=", "[", "]", ")", "{", "if", "(", "!", "$", "action", "||", "!", "$", "buyable", ")", "{", "return", "false", ";", "}", "if", "(", "SecurityToken", "::", "is_enabled", "(", ")", "&&", "!", "self", "::", "config", "(", ")", "->", "disable_security_token", ")", "{", "$", "params", "[", "SecurityToken", "::", "inst", "(", ")", "->", "getName", "(", ")", "]", "=", "SecurityToken", "::", "inst", "(", ")", "->", "getValue", "(", ")", ";", "}", "$", "className", "=", "get_class", "(", "$", "buyable", ")", ";", "$", "link", "=", "Controller", "::", "join_links", "(", "[", "self", "::", "config", "(", ")", "->", "url_segment", ",", "$", "action", ",", "ShopTools", "::", "sanitiseClassName", "(", "$", "className", ")", ",", "$", "buyable", "->", "ID", "]", ")", ";", "return", "empty", "(", "$", "params", ")", "?", "$", "link", ":", "$", "link", ".", "'?'", ".", "http_build_query", "(", "$", "params", ")", ";", "}"], "docstring": "Helper for creating a url", "docstring_tokens": ["Helper", "for", "creating", "a", "url"], "sha": "b090e970b06c0fb7e68107360760b6e2d6d184c4", "url": "https://github.com/silvershop/silvershop-core/blob/b090e970b06c0fb7e68107360760b6e2d6d184c4/src/Cart/ShoppingCartController.php#L95-L117", "partition": "test"}
{"repo": "tripal/TripalTestSuite", "path": "src/Console/Commands/MakeSeederCommand.php", "func_name": "MakeSeederCommand.makeSeeder", "original_string": "protected function makeSeeder()\n    {\n        $path = getcwd().'/tests/DatabaseSeeders';\n        $name = $this->getArgument('name');\n        $stub = __DIR__.'/../../../stubs/SeederStub.php';\n        $content = file_get_contents($stub);\n        $content = str_replace('$$CLASS_NAME$$', $name, $content);\n        $path = \"{$path}/{$name}.php\";\n\n        if (file_exists($path)) {\n            throw new \\Exception(\"File already exists at $path\");\n        }\n\n        $done = file_put_contents($path, $content);\n\n        if ($done === false) {\n            throw new \\Exception(\"Could not create file at $path\");\n        }\n\n        return $path;\n    }", "language": "php", "code": "protected function makeSeeder()\n    {\n        $path = getcwd().'/tests/DatabaseSeeders';\n        $name = $this->getArgument('name');\n        $stub = __DIR__.'/../../../stubs/SeederStub.php';\n        $content = file_get_contents($stub);\n        $content = str_replace('$$CLASS_NAME$$', $name, $content);\n        $path = \"{$path}/{$name}.php\";\n\n        if (file_exists($path)) {\n            throw new \\Exception(\"File already exists at $path\");\n        }\n\n        $done = file_put_contents($path, $content);\n\n        if ($done === false) {\n            throw new \\Exception(\"Could not create file at $path\");\n        }\n\n        return $path;\n    }", "code_tokens": ["protected", "function", "makeSeeder", "(", ")", "{", "$", "path", "=", "getcwd", "(", ")", ".", "'/tests/DatabaseSeeders'", ";", "$", "name", "=", "$", "this", "->", "getArgument", "(", "'name'", ")", ";", "$", "stub", "=", "__DIR__", ".", "'/../../../stubs/SeederStub.php'", ";", "$", "content", "=", "file_get_contents", "(", "$", "stub", ")", ";", "$", "content", "=", "str_replace", "(", "'$$CLASS_NAME$$'", ",", "$", "name", ",", "$", "content", ")", ";", "$", "path", "=", "\"{$path}/{$name}.php\"", ";", "if", "(", "file_exists", "(", "$", "path", ")", ")", "{", "throw", "new", "\\", "Exception", "(", "\"File already exists at $path\"", ")", ";", "}", "$", "done", "=", "file_put_contents", "(", "$", "path", ",", "$", "content", ")", ";", "if", "(", "$", "done", "===", "false", ")", "{", "throw", "new", "\\", "Exception", "(", "\"Could not create file at $path\"", ")", ";", "}", "return", "$", "path", ";", "}"], "docstring": "Make a database seeder.\n\n@throws \\Exception", "docstring_tokens": ["Make", "a", "database", "seeder", "."], "sha": "3e877af0204c59b9aa6b7ef0324ca4b985a7e3b4", "url": "https://github.com/tripal/TripalTestSuite/blob/3e877af0204c59b9aa6b7ef0324ca4b985a7e3b4/src/Console/Commands/MakeSeederCommand.php#L66-L86", "partition": "test"}
{"repo": "lifo101/php-ipc", "path": "src/Lifo/IPC/ProcessPool.php", "func_name": "ProcessPool.apply", "original_string": "public function apply($func = null)\n    {\n        // add new function to pending queue\n        if ($func !== null) {\n            if ($func instanceof \\Closure or $func instanceof ProcessInterface or is_callable($func)) {\n                $this->pending[] = func_get_args();\n            } else {\n                throw new \\UnexpectedValueException(\"Parameter 1 in ProcessPool#apply must be a Closure or callable\");\n            }\n        }\n\n        // start a new worker if our current worker queue is low\n        if (!empty($this->pending) and count($this->workers) < $this->max) {\n            call_user_func_array(array($this, 'create'), array_shift($this->pending));\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function apply($func = null)\n    {\n        // add new function to pending queue\n        if ($func !== null) {\n            if ($func instanceof \\Closure or $func instanceof ProcessInterface or is_callable($func)) {\n                $this->pending[] = func_get_args();\n            } else {\n                throw new \\UnexpectedValueException(\"Parameter 1 in ProcessPool#apply must be a Closure or callable\");\n            }\n        }\n\n        // start a new worker if our current worker queue is low\n        if (!empty($this->pending) and count($this->workers) < $this->max) {\n            call_user_func_array(array($this, 'create'), array_shift($this->pending));\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "apply", "(", "$", "func", "=", "null", ")", "{", "// add new function to pending queue", "if", "(", "$", "func", "!==", "null", ")", "{", "if", "(", "$", "func", "instanceof", "\\", "Closure", "or", "$", "func", "instanceof", "ProcessInterface", "or", "is_callable", "(", "$", "func", ")", ")", "{", "$", "this", "->", "pending", "[", "]", "=", "func_get_args", "(", ")", ";", "}", "else", "{", "throw", "new", "\\", "UnexpectedValueException", "(", "\"Parameter 1 in ProcessPool#apply must be a Closure or callable\"", ")", ";", "}", "}", "// start a new worker if our current worker queue is low", "if", "(", "!", "empty", "(", "$", "this", "->", "pending", ")", "and", "count", "(", "$", "this", "->", "workers", ")", "<", "$", "this", "->", "max", ")", "{", "call_user_func_array", "(", "array", "(", "$", "this", ",", "'create'", ")", ",", "array_shift", "(", "$", "this", "->", "pending", ")", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Apply a worker to the working or pending queue\n\n@param Callable $func Callback function to fork into.\n@return ProcessPool", "docstring_tokens": ["Apply", "a", "worker", "to", "the", "working", "or", "pending", "queue"], "sha": "6ae12fab44c19a6b150af559e76b7623a845c0fd", "url": "https://github.com/lifo101/php-ipc/blob/6ae12fab44c19a6b150af559e76b7623a845c0fd/src/Lifo/IPC/ProcessPool.php#L300-L317", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Config/Repository.php", "func_name": "Repository.offsetGet", "original_string": "public function offsetGet($key)\n    {\n        $value = Arr::get($this->data, $key);\n\n        if (\\is_array($value)) {\n            $value = $this->processParameters($value);\n        } else {\n            $value = $this->processParameter($value);\n        }\n\n        return $value;\n    }", "language": "php", "code": "public function offsetGet($key)\n    {\n        $value = Arr::get($this->data, $key);\n\n        if (\\is_array($value)) {\n            $value = $this->processParameters($value);\n        } else {\n            $value = $this->processParameter($value);\n        }\n\n        return $value;\n    }", "code_tokens": ["public", "function", "offsetGet", "(", "$", "key", ")", "{", "$", "value", "=", "Arr", "::", "get", "(", "$", "this", "->", "data", ",", "$", "key", ")", ";", "if", "(", "\\", "is_array", "(", "$", "value", ")", ")", "{", "$", "value", "=", "$", "this", "->", "processParameters", "(", "$", "value", ")", ";", "}", "else", "{", "$", "value", "=", "$", "this", "->", "processParameter", "(", "$", "value", ")", ";", "}", "return", "$", "value", ";", "}"], "docstring": "Get a value from a nested array based on a separated key.\n\n@param string $key\n\n@return mixed", "docstring_tokens": ["Get", "a", "value", "from", "a", "nested", "array", "based", "on", "a", "separated", "key", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Config/Repository.php#L165-L176", "partition": "test"}
{"repo": "kriswallsmith/Buzz", "path": "lib/Middleware/DigestAuthMiddleware.php", "func_name": "DigestAuthMiddleware.getHeader", "original_string": "private function getHeader(): ?string\n    {\n        if ('Digest' == $this->getAuthenticationMethod()) {\n            $username = $this->getUsername();\n            $realm = $this->getRealm();\n            $nonce = $this->getNonce();\n            $response = $this->getResponse();\n            if (($username) && ($realm) && ($nonce) && ($response)) {\n                $uri = $this->getUri();\n                $opaque = $this->getOpaque();\n                $qop = $this->getQOP();\n\n                $header = 'Digest';\n                $header .= ' username=\"'.$username.'\",';\n                $header .= ' realm=\"'.$realm.'\",';\n                $header .= ' nonce=\"'.$nonce.'\",';\n                $header .= ' response=\"'.$response.'\",';\n\n                if ($uri) {\n                    $header .= ' uri=\"'.$uri.'\",';\n                }\n                if ($opaque) {\n                    $header .= ' opaque=\"'.$opaque.'\",';\n                }\n\n                if ($qop) {\n                    $header .= ' qop='.$qop.',';\n\n                    $cnonce = $this->getClientNonce();\n                    $nc = $this->getNonceCount();\n\n                    if ($cnonce) {\n                        $header .= ' nc='.$nc.',';\n                    }\n                    if ($cnonce) {\n                        $header .= ' cnonce=\"'.$cnonce.'\",';\n                    }\n                }\n\n                // Remove the last comma from the header\n                $header = substr($header, 0, \\strlen($header) - 1);\n                // Discard the Client Nonce if OPTION_DISCARD_CLIENT_NONCE is set.\n                if ($this->options & self::OPTION_DISCARD_CLIENT_NONCE) {\n                    $this->discardClientNonce();\n                }\n\n                return $header;\n            }\n        }\n        if ('Basic' == $this->getAuthenticationMethod()) {\n            $username = $this->getUsername();\n            $password = $this->getPassword();\n            if (($username) && ($password)) {\n                $header = 'Basic '.base64_encode(\"{$username}:{$password}\");\n\n                return $header;\n            }\n        }\n\n        return null;\n    }", "language": "php", "code": "private function getHeader(): ?string\n    {\n        if ('Digest' == $this->getAuthenticationMethod()) {\n            $username = $this->getUsername();\n            $realm = $this->getRealm();\n            $nonce = $this->getNonce();\n            $response = $this->getResponse();\n            if (($username) && ($realm) && ($nonce) && ($response)) {\n                $uri = $this->getUri();\n                $opaque = $this->getOpaque();\n                $qop = $this->getQOP();\n\n                $header = 'Digest';\n                $header .= ' username=\"'.$username.'\",';\n                $header .= ' realm=\"'.$realm.'\",';\n                $header .= ' nonce=\"'.$nonce.'\",';\n                $header .= ' response=\"'.$response.'\",';\n\n                if ($uri) {\n                    $header .= ' uri=\"'.$uri.'\",';\n                }\n                if ($opaque) {\n                    $header .= ' opaque=\"'.$opaque.'\",';\n                }\n\n                if ($qop) {\n                    $header .= ' qop='.$qop.',';\n\n                    $cnonce = $this->getClientNonce();\n                    $nc = $this->getNonceCount();\n\n                    if ($cnonce) {\n                        $header .= ' nc='.$nc.',';\n                    }\n                    if ($cnonce) {\n                        $header .= ' cnonce=\"'.$cnonce.'\",';\n                    }\n                }\n\n                // Remove the last comma from the header\n                $header = substr($header, 0, \\strlen($header) - 1);\n                // Discard the Client Nonce if OPTION_DISCARD_CLIENT_NONCE is set.\n                if ($this->options & self::OPTION_DISCARD_CLIENT_NONCE) {\n                    $this->discardClientNonce();\n                }\n\n                return $header;\n            }\n        }\n        if ('Basic' == $this->getAuthenticationMethod()) {\n            $username = $this->getUsername();\n            $password = $this->getPassword();\n            if (($username) && ($password)) {\n                $header = 'Basic '.base64_encode(\"{$username}:{$password}\");\n\n                return $header;\n            }\n        }\n\n        return null;\n    }", "code_tokens": ["private", "function", "getHeader", "(", ")", ":", "?", "string", "{", "if", "(", "'Digest'", "==", "$", "this", "->", "getAuthenticationMethod", "(", ")", ")", "{", "$", "username", "=", "$", "this", "->", "getUsername", "(", ")", ";", "$", "realm", "=", "$", "this", "->", "getRealm", "(", ")", ";", "$", "nonce", "=", "$", "this", "->", "getNonce", "(", ")", ";", "$", "response", "=", "$", "this", "->", "getResponse", "(", ")", ";", "if", "(", "(", "$", "username", ")", "&&", "(", "$", "realm", ")", "&&", "(", "$", "nonce", ")", "&&", "(", "$", "response", ")", ")", "{", "$", "uri", "=", "$", "this", "->", "getUri", "(", ")", ";", "$", "opaque", "=", "$", "this", "->", "getOpaque", "(", ")", ";", "$", "qop", "=", "$", "this", "->", "getQOP", "(", ")", ";", "$", "header", "=", "'Digest'", ";", "$", "header", ".=", "' username=\"'", ".", "$", "username", ".", "'\",'", ";", "$", "header", ".=", "' realm=\"'", ".", "$", "realm", ".", "'\",'", ";", "$", "header", ".=", "' nonce=\"'", ".", "$", "nonce", ".", "'\",'", ";", "$", "header", ".=", "' response=\"'", ".", "$", "response", ".", "'\",'", ";", "if", "(", "$", "uri", ")", "{", "$", "header", ".=", "' uri=\"'", ".", "$", "uri", ".", "'\",'", ";", "}", "if", "(", "$", "opaque", ")", "{", "$", "header", ".=", "' opaque=\"'", ".", "$", "opaque", ".", "'\",'", ";", "}", "if", "(", "$", "qop", ")", "{", "$", "header", ".=", "' qop='", ".", "$", "qop", ".", "','", ";", "$", "cnonce", "=", "$", "this", "->", "getClientNonce", "(", ")", ";", "$", "nc", "=", "$", "this", "->", "getNonceCount", "(", ")", ";", "if", "(", "$", "cnonce", ")", "{", "$", "header", ".=", "' nc='", ".", "$", "nc", ".", "','", ";", "}", "if", "(", "$", "cnonce", ")", "{", "$", "header", ".=", "' cnonce=\"'", ".", "$", "cnonce", ".", "'\",'", ";", "}", "}", "// Remove the last comma from the header", "$", "header", "=", "substr", "(", "$", "header", ",", "0", ",", "\\", "strlen", "(", "$", "header", ")", "-", "1", ")", ";", "// Discard the Client Nonce if OPTION_DISCARD_CLIENT_NONCE is set.", "if", "(", "$", "this", "->", "options", "&", "self", "::", "OPTION_DISCARD_CLIENT_NONCE", ")", "{", "$", "this", "->", "discardClientNonce", "(", ")", ";", "}", "return", "$", "header", ";", "}", "}", "if", "(", "'Basic'", "==", "$", "this", "->", "getAuthenticationMethod", "(", ")", ")", "{", "$", "username", "=", "$", "this", "->", "getUsername", "(", ")", ";", "$", "password", "=", "$", "this", "->", "getPassword", "(", ")", ";", "if", "(", "(", "$", "username", ")", "&&", "(", "$", "password", ")", ")", "{", "$", "header", "=", "'Basic '", ".", "base64_encode", "(", "\"{$username}:{$password}\"", ")", ";", "return", "$", "header", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Returns the full Authentication header for use in authenticating the client with either Digest or Basic authentication.\n\n@return string the Authentication header to be sent to the server", "docstring_tokens": ["Returns", "the", "full", "Authentication", "header", "for", "use", "in", "authenticating", "the", "client", "with", "either", "Digest", "or", "Basic", "authentication", "."], "sha": "3d436434ab6019a309b8813839a3693997d03774", "url": "https://github.com/kriswallsmith/Buzz/blob/3d436434ab6019a309b8813839a3693997d03774/lib/Middleware/DigestAuthMiddleware.php#L311-L371", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Schema.php", "func_name": "Schema.validate", "original_string": "public function validate(array &$data, Validation &$validation = null) {\n        if (!$this->isValidInternal($data, $this->schema, $validation, '')) {\n            if ($validation === null) {\n                // Although this should never be null, scrutinizer complains that it might be.\n                $validation = new Validation();\n            }\n\n            throw new ValidationException($validation);\n        }\n        return $this;\n    }", "language": "php", "code": "public function validate(array &$data, Validation &$validation = null) {\n        if (!$this->isValidInternal($data, $this->schema, $validation, '')) {\n            if ($validation === null) {\n                // Although this should never be null, scrutinizer complains that it might be.\n                $validation = new Validation();\n            }\n\n            throw new ValidationException($validation);\n        }\n        return $this;\n    }", "code_tokens": ["public", "function", "validate", "(", "array", "&", "$", "data", ",", "Validation", "&", "$", "validation", "=", "null", ")", "{", "if", "(", "!", "$", "this", "->", "isValidInternal", "(", "$", "data", ",", "$", "this", "->", "schema", ",", "$", "validation", ",", "''", ")", ")", "{", "if", "(", "$", "validation", "===", "null", ")", "{", "// Although this should never be null, scrutinizer complains that it might be.", "$", "validation", "=", "new", "Validation", "(", ")", ";", "}", "throw", "new", "ValidationException", "(", "$", "validation", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Validate data against the schema.\n\n@param array &$data The data to validate.\n@param Validation &$validation This argument will be filled with the validation result.\n@return bool Returns true if the data is valid, false otherwise.\n@throws ValidationException Throws an exception when the data does not validate against the schema.", "docstring_tokens": ["Validate", "data", "against", "the", "schema", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Schema.php#L265-L275", "partition": "test"}
{"repo": "Calotype/SEO", "path": "src/Calotype/SEO/Generators/SitemapGenerator.php", "func_name": "SitemapGenerator.addRaw", "original_string": "public function addRaw(array $data)\n    {\n        $this->validateData($data);\n\n        $data = $this->prepareData($data);\n\n        $this->entries[] = $data;\n    }", "language": "php", "code": "public function addRaw(array $data)\n    {\n        $this->validateData($data);\n\n        $data = $this->prepareData($data);\n\n        $this->entries[] = $data;\n    }", "code_tokens": ["public", "function", "addRaw", "(", "array", "$", "data", ")", "{", "$", "this", "->", "validateData", "(", "$", "data", ")", ";", "$", "data", "=", "$", "this", "->", "prepareData", "(", "$", "data", ")", ";", "$", "this", "->", "entries", "[", "]", "=", "$", "data", ";", "}"], "docstring": "Add a raw entry to the sitemap.\n\n@param array $data", "docstring_tokens": ["Add", "a", "raw", "entry", "to", "the", "sitemap", "."], "sha": "1cbddfb7c0ddeb9bbddbb24fce41ce2f2574c4d4", "url": "https://github.com/Calotype/SEO/blob/1cbddfb7c0ddeb9bbddbb24fce41ce2f2574c4d4/src/Calotype/SEO/Generators/SitemapGenerator.php#L91-L98", "partition": "test"}
{"repo": "Labs64/NetLicensingClient-php", "path": "entity/traits/Properties.php", "func_name": "Properties.getProperty", "original_string": "public function getProperty($property, $default = null)\n    {\n        if (!$property) return $default;\n\n        $value = isset($this->properties[$property]) ? $this->properties[$property] : $default;\n\n        // If the attribute exists within the cast array, we will convert it to\n        // an appropriate native PHP type dependant upon the associated value\n        // given with the key in the pair. Dayle made this comment line up.\n        if ($this->hasCast($property)) {\n            return $this->castGetProperty($property, $value);\n        }\n\n        return $value;\n    }", "language": "php", "code": "public function getProperty($property, $default = null)\n    {\n        if (!$property) return $default;\n\n        $value = isset($this->properties[$property]) ? $this->properties[$property] : $default;\n\n        // If the attribute exists within the cast array, we will convert it to\n        // an appropriate native PHP type dependant upon the associated value\n        // given with the key in the pair. Dayle made this comment line up.\n        if ($this->hasCast($property)) {\n            return $this->castGetProperty($property, $value);\n        }\n\n        return $value;\n    }", "code_tokens": ["public", "function", "getProperty", "(", "$", "property", ",", "$", "default", "=", "null", ")", "{", "if", "(", "!", "$", "property", ")", "return", "$", "default", ";", "$", "value", "=", "isset", "(", "$", "this", "->", "properties", "[", "$", "property", "]", ")", "?", "$", "this", "->", "properties", "[", "$", "property", "]", ":", "$", "default", ";", "// If the attribute exists within the cast array, we will convert it to", "// an appropriate native PHP type dependant upon the associated value", "// given with the key in the pair. Dayle made this comment line up.", "if", "(", "$", "this", "->", "hasCast", "(", "$", "property", ")", ")", "{", "return", "$", "this", "->", "castGetProperty", "(", "$", "property", ",", "$", "value", ")", ";", "}", "return", "$", "value", ";", "}"], "docstring": "Get an property from the entity.\n\n@param  string $property\n@param  mixed $default\n@return mixed", "docstring_tokens": ["Get", "an", "property", "from", "the", "entity", "."], "sha": "658ab44f2c9a6ce8e8cd90d9889bc57ddbd38315", "url": "https://github.com/Labs64/NetLicensingClient-php/blob/658ab44f2c9a6ce8e8cd90d9889bc57ddbd38315/entity/traits/Properties.php#L44-L58", "partition": "test"}
{"repo": "cnvs/easel", "path": "src/Http/Controllers/Backend/ToolsController.php", "func_name": "ToolsController.disableMaintenanceMode", "original_string": "public function disableMaintenanceMode()\n    {\n        $exitCode = Artisan::call('up');\n        if ($exitCode === 0) {\n            Session::put('_disable-maintenance-mode', trans('canvas::messages.disable_maintenance_mode_success'));\n        } else {\n            Session::put('_disable-maintenance-mode', trans('canvas::messages.disable_maintenance_mode_error'));\n        }\n\n        return redirect()->route('canvas.admin.tools');\n    }", "language": "php", "code": "public function disableMaintenanceMode()\n    {\n        $exitCode = Artisan::call('up');\n        if ($exitCode === 0) {\n            Session::put('_disable-maintenance-mode', trans('canvas::messages.disable_maintenance_mode_success'));\n        } else {\n            Session::put('_disable-maintenance-mode', trans('canvas::messages.disable_maintenance_mode_error'));\n        }\n\n        return redirect()->route('canvas.admin.tools');\n    }", "code_tokens": ["public", "function", "disableMaintenanceMode", "(", ")", "{", "$", "exitCode", "=", "Artisan", "::", "call", "(", "'up'", ")", ";", "if", "(", "$", "exitCode", "===", "0", ")", "{", "Session", "::", "put", "(", "'_disable-maintenance-mode'", ",", "trans", "(", "'canvas::messages.disable_maintenance_mode_success'", ")", ")", ";", "}", "else", "{", "Session", "::", "put", "(", "'_disable-maintenance-mode'", ",", "trans", "(", "'canvas::messages.disable_maintenance_mode_error'", ")", ")", ";", "}", "return", "redirect", "(", ")", "->", "route", "(", "'canvas.admin.tools'", ")", ";", "}"], "docstring": "Disable Application Maintenance Mode.\n\n@return \\Illuminate\\View\\View", "docstring_tokens": ["Disable", "Application", "Maintenance", "Mode", "."], "sha": "bb2b564432155467944b4a2e719e474fd564b711", "url": "https://github.com/cnvs/easel/blob/bb2b564432155467944b4a2e719e474fd564b711/src/Http/Controllers/Backend/ToolsController.php#L231-L241", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/PostTypes/Events.php", "func_name": "Events.eventContent", "original_string": "public function eventContent($content)\n    {\n        if (!is_singular($this->slug)) {\n            return $content;\n        }\n\n        $custom_content = $this->getCustomContent();\n        if ($custom_content) {\n            $content = $custom_content;\n        }\n\n        return $content;\n    }", "language": "php", "code": "public function eventContent($content)\n    {\n        if (!is_singular($this->slug)) {\n            return $content;\n        }\n\n        $custom_content = $this->getCustomContent();\n        if ($custom_content) {\n            $content = $custom_content;\n        }\n\n        return $content;\n    }", "code_tokens": ["public", "function", "eventContent", "(", "$", "content", ")", "{", "if", "(", "!", "is_singular", "(", "$", "this", "->", "slug", ")", ")", "{", "return", "$", "content", ";", "}", "$", "custom_content", "=", "$", "this", "->", "getCustomContent", "(", ")", ";", "if", "(", "$", "custom_content", ")", "{", "$", "content", "=", "$", "custom_content", ";", "}", "return", "$", "content", ";", "}"], "docstring": "Replace content if occasion has custom content.\n@param  string $content Content of the current post.\n@return string", "docstring_tokens": ["Replace", "content", "if", "occasion", "has", "custom", "content", "."], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/PostTypes/Events.php#L228-L240", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Http/NativeResponse.php", "func_name": "NativeResponse.getMaxAge", "original_string": "public function getMaxAge(): int\n    {\n        if ($this->hasCacheControl('s-maxage')) {\n            return $this->getCacheControl('s-maxage');\n        }\n\n        if ($this->hasCacheControl('max-age')) {\n            return $this->getCacheControl('max-age');\n        }\n\n        if (null !== $this->getExpires()) {\n            return date('U', strtotime($this->getExpires())) - date(\n                    'U',\n                    strtotime(\n                        $this->getDateHeader()\n                    )\n                );\n        }\n\n        return 0;\n    }", "language": "php", "code": "public function getMaxAge(): int\n    {\n        if ($this->hasCacheControl('s-maxage')) {\n            return $this->getCacheControl('s-maxage');\n        }\n\n        if ($this->hasCacheControl('max-age')) {\n            return $this->getCacheControl('max-age');\n        }\n\n        if (null !== $this->getExpires()) {\n            return date('U', strtotime($this->getExpires())) - date(\n                    'U',\n                    strtotime(\n                        $this->getDateHeader()\n                    )\n                );\n        }\n\n        return 0;\n    }", "code_tokens": ["public", "function", "getMaxAge", "(", ")", ":", "int", "{", "if", "(", "$", "this", "->", "hasCacheControl", "(", "'s-maxage'", ")", ")", "{", "return", "$", "this", "->", "getCacheControl", "(", "'s-maxage'", ")", ";", "}", "if", "(", "$", "this", "->", "hasCacheControl", "(", "'max-age'", ")", ")", "{", "return", "$", "this", "->", "getCacheControl", "(", "'max-age'", ")", ";", "}", "if", "(", "null", "!==", "$", "this", "->", "getExpires", "(", ")", ")", "{", "return", "date", "(", "'U'", ",", "strtotime", "(", "$", "this", "->", "getExpires", "(", ")", ")", ")", "-", "date", "(", "'U'", ",", "strtotime", "(", "$", "this", "->", "getDateHeader", "(", ")", ")", ")", ";", "}", "return", "0", ";", "}"], "docstring": "Returns the number of seconds after the time specified in the response's\nDate header when the response should no longer be considered fresh.\n\nFirst, it checks for a s-maxage directive, then a max-age directive, and\nthen it falls back on an expires header. It returns null when no maximum\nage can be established.\n\n@throws \\RuntimeException\n\n@return int Number of seconds", "docstring_tokens": ["Returns", "the", "number", "of", "seconds", "after", "the", "time", "specified", "in", "the", "response", "s", "Date", "header", "when", "the", "response", "should", "no", "longer", "be", "considered", "fresh", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Http/NativeResponse.php#L720-L740", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Http/NativeResponse.php", "func_name": "NativeResponse.getCacheControl", "original_string": "public function getCacheControl(string $name): string\n    {\n        return $this->hasCacheControl($name)\n            ? $this->cacheControl[$name]\n            : false;\n    }", "language": "php", "code": "public function getCacheControl(string $name): string\n    {\n        return $this->hasCacheControl($name)\n            ? $this->cacheControl[$name]\n            : false;\n    }", "code_tokens": ["public", "function", "getCacheControl", "(", "string", "$", "name", ")", ":", "string", "{", "return", "$", "this", "->", "hasCacheControl", "(", "$", "name", ")", "?", "$", "this", "->", "cacheControl", "[", "$", "name", "]", ":", "false", ";", "}"], "docstring": "Get a response cache control.\n\n@param string $name Cache control name\n\n@return string", "docstring_tokens": ["Get", "a", "response", "cache", "control", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Http/NativeResponse.php#L487-L492", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Easy/Element/HTMLPreview.php", "func_name": "HTMLPreview.getText", "original_string": "protected function getText()\n    {\n        if ($this->text == null)\n            return null;   \n        $formObj = $this->getFormObj();\n        return Expression::evaluateExpression($this->text, $formObj);\n    }", "language": "php", "code": "protected function getText()\n    {\n        if ($this->text == null)\n            return null;   \n        $formObj = $this->getFormObj();\n        return Expression::evaluateExpression($this->text, $formObj);\n    }", "code_tokens": ["protected", "function", "getText", "(", ")", "{", "if", "(", "$", "this", "->", "text", "==", "null", ")", "return", "null", ";", "$", "formObj", "=", "$", "this", "->", "getFormObj", "(", ")", ";", "return", "Expression", "::", "evaluateExpression", "(", "$", "this", "->", "text", ",", "$", "formObj", ")", ";", "}"], "docstring": "Get text of label\n\n@return string", "docstring_tokens": ["Get", "text", "of", "label"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Easy/Element/HTMLPreview.php#L95-L101", "partition": "test"}
{"repo": "Solve/Database", "path": "Models/DBOperator.php", "func_name": "DBOperator.generateIndexSQL", "original_string": "private function generateIndexSQL($info) {\n        $keys = $info['columns'];\n        $sql = '';\n        if (!isset($info['type'])) $info['type'] = ($info['name'] == 'primary' ? 'primary' : 'simple');\n        switch ($info['type']) {\n            case 'primary':\n                $sql .= 'PRIMARY KEY (`'.(is_array($keys) ? implode('`, `', $keys) : $keys).'`)';\n                break;\n            case 'unique':\n            case 'simple':\n                $sql .= ($info['type'] == 'unique' ? 'UNIQUE ' : '').'KEY '.'`'.$info['name'].'` (`'.(is_array($keys) ? implode('`, `', $keys) : $keys).'`)';\n                break;\n        }\n        return $sql;\n    }", "language": "php", "code": "private function generateIndexSQL($info) {\n        $keys = $info['columns'];\n        $sql = '';\n        if (!isset($info['type'])) $info['type'] = ($info['name'] == 'primary' ? 'primary' : 'simple');\n        switch ($info['type']) {\n            case 'primary':\n                $sql .= 'PRIMARY KEY (`'.(is_array($keys) ? implode('`, `', $keys) : $keys).'`)';\n                break;\n            case 'unique':\n            case 'simple':\n                $sql .= ($info['type'] == 'unique' ? 'UNIQUE ' : '').'KEY '.'`'.$info['name'].'` (`'.(is_array($keys) ? implode('`, `', $keys) : $keys).'`)';\n                break;\n        }\n        return $sql;\n    }", "code_tokens": ["private", "function", "generateIndexSQL", "(", "$", "info", ")", "{", "$", "keys", "=", "$", "info", "[", "'columns'", "]", ";", "$", "sql", "=", "''", ";", "if", "(", "!", "isset", "(", "$", "info", "[", "'type'", "]", ")", ")", "$", "info", "[", "'type'", "]", "=", "(", "$", "info", "[", "'name'", "]", "==", "'primary'", "?", "'primary'", ":", "'simple'", ")", ";", "switch", "(", "$", "info", "[", "'type'", "]", ")", "{", "case", "'primary'", ":", "$", "sql", ".=", "'PRIMARY KEY (`'", ".", "(", "is_array", "(", "$", "keys", ")", "?", "implode", "(", "'`, `'", ",", "$", "keys", ")", ":", "$", "keys", ")", ".", "'`)'", ";", "break", ";", "case", "'unique'", ":", "case", "'simple'", ":", "$", "sql", ".=", "(", "$", "info", "[", "'type'", "]", "==", "'unique'", "?", "'UNIQUE '", ":", "''", ")", ".", "'KEY '", ".", "'`'", ".", "$", "info", "[", "'name'", "]", ".", "'` (`'", ".", "(", "is_array", "(", "$", "keys", ")", "?", "implode", "(", "'`, `'", ",", "$", "keys", ")", ":", "$", "keys", ")", ".", "'`)'", ";", "break", ";", "}", "return", "$", "sql", ";", "}"], "docstring": "Generate part of SQL definition for Indexes\n\n@access private\n@param array $info\n@return string", "docstring_tokens": ["Generate", "part", "of", "SQL", "definition", "for", "Indexes"], "sha": "4de9027cf6fa9c4c5a61c562a02b87a19dec524e", "url": "https://github.com/Solve/Database/blob/4de9027cf6fa9c4c5a61c562a02b87a19dec524e/Models/DBOperator.php#L534-L548", "partition": "test"}
{"repo": "stone-lab/Dynamicfield", "path": "Utility/Entity.php", "func_name": "Entity.getFieldPostData", "original_string": "private function getFieldPostData($data)\n    {\n        $arrData = array();\n\n        if (isset($data)) {\n            $arrData = @$data[$this->locale];\n        }\n\n        return $arrData;\n    }", "language": "php", "code": "private function getFieldPostData($data)\n    {\n        $arrData = array();\n\n        if (isset($data)) {\n            $arrData = @$data[$this->locale];\n        }\n\n        return $arrData;\n    }", "code_tokens": ["private", "function", "getFieldPostData", "(", "$", "data", ")", "{", "$", "arrData", "=", "array", "(", ")", ";", "if", "(", "isset", "(", "$", "data", ")", ")", "{", "$", "arrData", "=", "@", "$", "data", "[", "$", "this", "->", "locale", "]", ";", "}", "return", "$", "arrData", ";", "}"], "docstring": "Get field of data in browser.\n\n@param $data\n\n@return array", "docstring_tokens": ["Get", "field", "of", "data", "in", "browser", "."], "sha": "7d25050180000b482d5efe301f54b9ce78963181", "url": "https://github.com/stone-lab/Dynamicfield/blob/7d25050180000b482d5efe301f54b9ce78963181/Utility/Entity.php#L269-L278", "partition": "test"}
{"repo": "elnebuloso/flex-converter", "path": "src/elnebuloso/Flex/Converter/PathToNamespaceClassname.php", "func_name": "PathToNamespaceClassname.convert", "original_string": "public function convert($string)\n    {\n        $stringToCamelCase = new StringToCamelCase();\n        $parts = [];\n\n        foreach (explode('/', trim($string, '/')) as $part) {\n            $parts[] = ucfirst($stringToCamelCase->convert($part, '-'));\n        }\n\n        return implode('\\\\', $parts);\n    }", "language": "php", "code": "public function convert($string)\n    {\n        $stringToCamelCase = new StringToCamelCase();\n        $parts = [];\n\n        foreach (explode('/', trim($string, '/')) as $part) {\n            $parts[] = ucfirst($stringToCamelCase->convert($part, '-'));\n        }\n\n        return implode('\\\\', $parts);\n    }", "code_tokens": ["public", "function", "convert", "(", "$", "string", ")", "{", "$", "stringToCamelCase", "=", "new", "StringToCamelCase", "(", ")", ";", "$", "parts", "=", "[", "]", ";", "foreach", "(", "explode", "(", "'/'", ",", "trim", "(", "$", "string", ",", "'/'", ")", ")", "as", "$", "part", ")", "{", "$", "parts", "[", "]", "=", "ucfirst", "(", "$", "stringToCamelCase", "->", "convert", "(", "$", "part", ",", "'-'", ")", ")", ";", "}", "return", "implode", "(", "'\\\\'", ",", "$", "parts", ")", ";", "}"], "docstring": "convert path to namespaced classname\n\n@param string $string\n@return string", "docstring_tokens": ["convert", "path", "to", "namespaced", "classname"], "sha": "668e88caad7befc1bc5e503e5fdfff2c7b04a46a", "url": "https://github.com/elnebuloso/flex-converter/blob/668e88caad7befc1bc5e503e5fdfff2c7b04a46a/src/elnebuloso/Flex/Converter/PathToNamespaceClassname.php#L17-L27", "partition": "test"}
{"repo": "diatem-net/jin-utils", "path": "src/Utils/StringTools.php", "func_name": "StringTools.htmlEncode", "original_string": "public static function htmlEncode($string, $specialChars = true)\r\n  {\r\n    if ($specialChars) {\r\n      $string = htmlspecialchars($string);\r\n    }\r\n    return htmlentities($string);\r\n  }", "language": "php", "code": "public static function htmlEncode($string, $specialChars = true)\r\n  {\r\n    if ($specialChars) {\r\n      $string = htmlspecialchars($string);\r\n    }\r\n    return htmlentities($string);\r\n  }", "code_tokens": ["public", "static", "function", "htmlEncode", "(", "$", "string", ",", "$", "specialChars", "=", "true", ")", "{", "if", "(", "$", "specialChars", ")", "{", "$", "string", "=", "htmlspecialchars", "(", "$", "string", ")", ";", "}", "return", "htmlentities", "(", "$", "string", ")", ";", "}"], "docstring": "Encode au format HTML\n\n@param  string  $string        Cha\u00eene de caract\u00e8res\n@param  boolean $specialChars  (optional) Si TRUE, encode \u00e9galement les caract\u00e8res sp\u00e9ciaux &\"'<> (TRUE par d\u00e9faut)\n@return string                 Cha\u00eene encod\u00e9e", "docstring_tokens": ["Encode", "au", "format", "HTML"], "sha": "3989cc39f1999eb6c9fabc5ff97cb433ff257e4a", "url": "https://github.com/diatem-net/jin-utils/blob/3989cc39f1999eb6c9fabc5ff97cb433ff257e4a/src/Utils/StringTools.php#L410-L416", "partition": "test"}
{"repo": "magentix/SyliusPickupPlugin", "path": "src/Controller/PickupController.php", "func_name": "PickupController.listAction", "original_string": "public function listAction(Request $request, ?string $method): Response\n    {\n        $calculator = $this->getCalculator($method);\n\n        $params = $request->request->all();\n\n        $pickupTemplate  = $this->getDefaultTemplate();\n        $pickupCurrentId = null;\n        $pickupList      = [];\n        $currentAddress  = null;\n\n        /** @var PickupCalculatorInterface $calculator */\n        if ($calculator instanceof PickupCalculatorInterface) {\n            if (!empty($calculator->getPickupTemplate())) {\n                $pickupTemplate = $calculator->getPickupTemplate();\n            }\n\n            $cart = $this->getCurrentCart();\n            if (null !== $cart->getId()) {\n                $cart    = $this->getOrderRepository()->findCartForSummary($cart->getId());\n                $address = $cart->getShippingAddress();\n\n                $shipment = $cart->getShipments()->current();\n                $pickupCurrentId = $shipment->getPickupId();\n\n                foreach ($params as $field => $value) {\n                    $setter = 'set' . preg_replace('/_/', '', ucwords($field, '_'));\n                    if (method_exists($address, $setter)) {\n                        $address->$setter($value);\n                    }\n                }\n                $currentAddress = $address;\n\n                $pickupList = $calculator->getPickupList($address, $cart, $this->getMethod($method));\n            }\n        }\n\n        $pickup = [\n            'pickup' => [\n                'current_id' => $pickupCurrentId,\n                'list'       => $pickupList,\n            ],\n            'address'   => $currentAddress,\n            'countries' => $this->getAvailableCountries(),\n            'index'     => $request->get('index', 0),\n            'code'      => $method,\n        ];\n\n        return $this->render($pickupTemplate, ['method' => $pickup]);\n    }", "language": "php", "code": "public function listAction(Request $request, ?string $method): Response\n    {\n        $calculator = $this->getCalculator($method);\n\n        $params = $request->request->all();\n\n        $pickupTemplate  = $this->getDefaultTemplate();\n        $pickupCurrentId = null;\n        $pickupList      = [];\n        $currentAddress  = null;\n\n        /** @var PickupCalculatorInterface $calculator */\n        if ($calculator instanceof PickupCalculatorInterface) {\n            if (!empty($calculator->getPickupTemplate())) {\n                $pickupTemplate = $calculator->getPickupTemplate();\n            }\n\n            $cart = $this->getCurrentCart();\n            if (null !== $cart->getId()) {\n                $cart    = $this->getOrderRepository()->findCartForSummary($cart->getId());\n                $address = $cart->getShippingAddress();\n\n                $shipment = $cart->getShipments()->current();\n                $pickupCurrentId = $shipment->getPickupId();\n\n                foreach ($params as $field => $value) {\n                    $setter = 'set' . preg_replace('/_/', '', ucwords($field, '_'));\n                    if (method_exists($address, $setter)) {\n                        $address->$setter($value);\n                    }\n                }\n                $currentAddress = $address;\n\n                $pickupList = $calculator->getPickupList($address, $cart, $this->getMethod($method));\n            }\n        }\n\n        $pickup = [\n            'pickup' => [\n                'current_id' => $pickupCurrentId,\n                'list'       => $pickupList,\n            ],\n            'address'   => $currentAddress,\n            'countries' => $this->getAvailableCountries(),\n            'index'     => $request->get('index', 0),\n            'code'      => $method,\n        ];\n\n        return $this->render($pickupTemplate, ['method' => $pickup]);\n    }", "code_tokens": ["public", "function", "listAction", "(", "Request", "$", "request", ",", "?", "string", "$", "method", ")", ":", "Response", "{", "$", "calculator", "=", "$", "this", "->", "getCalculator", "(", "$", "method", ")", ";", "$", "params", "=", "$", "request", "->", "request", "->", "all", "(", ")", ";", "$", "pickupTemplate", "=", "$", "this", "->", "getDefaultTemplate", "(", ")", ";", "$", "pickupCurrentId", "=", "null", ";", "$", "pickupList", "=", "[", "]", ";", "$", "currentAddress", "=", "null", ";", "/** @var PickupCalculatorInterface $calculator */", "if", "(", "$", "calculator", "instanceof", "PickupCalculatorInterface", ")", "{", "if", "(", "!", "empty", "(", "$", "calculator", "->", "getPickupTemplate", "(", ")", ")", ")", "{", "$", "pickupTemplate", "=", "$", "calculator", "->", "getPickupTemplate", "(", ")", ";", "}", "$", "cart", "=", "$", "this", "->", "getCurrentCart", "(", ")", ";", "if", "(", "null", "!==", "$", "cart", "->", "getId", "(", ")", ")", "{", "$", "cart", "=", "$", "this", "->", "getOrderRepository", "(", ")", "->", "findCartForSummary", "(", "$", "cart", "->", "getId", "(", ")", ")", ";", "$", "address", "=", "$", "cart", "->", "getShippingAddress", "(", ")", ";", "$", "shipment", "=", "$", "cart", "->", "getShipments", "(", ")", "->", "current", "(", ")", ";", "$", "pickupCurrentId", "=", "$", "shipment", "->", "getPickupId", "(", ")", ";", "foreach", "(", "$", "params", "as", "$", "field", "=>", "$", "value", ")", "{", "$", "setter", "=", "'set'", ".", "preg_replace", "(", "'/_/'", ",", "''", ",", "ucwords", "(", "$", "field", ",", "'_'", ")", ")", ";", "if", "(", "method_exists", "(", "$", "address", ",", "$", "setter", ")", ")", "{", "$", "address", "->", "$", "setter", "(", "$", "value", ")", ";", "}", "}", "$", "currentAddress", "=", "$", "address", ";", "$", "pickupList", "=", "$", "calculator", "->", "getPickupList", "(", "$", "address", ",", "$", "cart", ",", "$", "this", "->", "getMethod", "(", "$", "method", ")", ")", ";", "}", "}", "$", "pickup", "=", "[", "'pickup'", "=>", "[", "'current_id'", "=>", "$", "pickupCurrentId", ",", "'list'", "=>", "$", "pickupList", ",", "]", ",", "'address'", "=>", "$", "currentAddress", ",", "'countries'", "=>", "$", "this", "->", "getAvailableCountries", "(", ")", ",", "'index'", "=>", "$", "request", "->", "get", "(", "'index'", ",", "0", ")", ",", "'code'", "=>", "$", "method", ",", "]", ";", "return", "$", "this", "->", "render", "(", "$", "pickupTemplate", ",", "[", "'method'", "=>", "$", "pickup", "]", ")", ";", "}"], "docstring": "Display Pickup List\n\n@param Request $request\n@param string $method\n@return Response|string", "docstring_tokens": ["Display", "Pickup", "List"], "sha": "c0be00759f20482253e17aaa60e0564842891546", "url": "https://github.com/magentix/SyliusPickupPlugin/blob/c0be00759f20482253e17aaa60e0564842891546/src/Controller/PickupController.php#L59-L108", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/BaseUtils.php", "func_name": "BaseUtils.getXMLFromResult", "original_string": "public function getXMLFromResult(ResultInterface $query, array $params = []): string\n\t{\n\t\t// Set our default values\n\t\tforeach (['root' => 'root', 'element' => 'element', 'newline' => \"\\n\", 'tab' => \"\\t\"] as $key => $val)\n\t\t{\n\t\t\tif (! isset($params[$key]))\n\t\t\t{\n\t\t\t\t$params[$key] = $val;\n\t\t\t}\n\t\t}\n\n\t\t// Create variables for convenience\n\t\textract($params);\n\n\t\t// Load the xml helper\n\t\thelper('xml');\n\t\t// Generate the result\n\t\t$xml = '<' . $root . '>' . $newline;\n\t\twhile ($row = $query->getUnbufferedRow())\n\t\t{\n\t\t\t$xml .= $tab . '<' . $element . '>' . $newline;\n\t\t\tforeach ($row as $key => $val)\n\t\t\t{\n\t\t\t\t$val = (!empty($val)) ? xml_convert($val) : '';\n\t\t\t\t$xml .= $tab . $tab . '<' . $key . '>' . $val . '</' . $key . '>' . $newline;\n\t\t\t}\n\t\t\t$xml .= $tab . '</' . $element . '>' . $newline;\n\t\t}\n\n\t\treturn $xml . '</' . $root . '>' . $newline;\n\t}", "language": "php", "code": "public function getXMLFromResult(ResultInterface $query, array $params = []): string\n\t{\n\t\t// Set our default values\n\t\tforeach (['root' => 'root', 'element' => 'element', 'newline' => \"\\n\", 'tab' => \"\\t\"] as $key => $val)\n\t\t{\n\t\t\tif (! isset($params[$key]))\n\t\t\t{\n\t\t\t\t$params[$key] = $val;\n\t\t\t}\n\t\t}\n\n\t\t// Create variables for convenience\n\t\textract($params);\n\n\t\t// Load the xml helper\n\t\thelper('xml');\n\t\t// Generate the result\n\t\t$xml = '<' . $root . '>' . $newline;\n\t\twhile ($row = $query->getUnbufferedRow())\n\t\t{\n\t\t\t$xml .= $tab . '<' . $element . '>' . $newline;\n\t\t\tforeach ($row as $key => $val)\n\t\t\t{\n\t\t\t\t$val = (!empty($val)) ? xml_convert($val) : '';\n\t\t\t\t$xml .= $tab . $tab . '<' . $key . '>' . $val . '</' . $key . '>' . $newline;\n\t\t\t}\n\t\t\t$xml .= $tab . '</' . $element . '>' . $newline;\n\t\t}\n\n\t\treturn $xml . '</' . $root . '>' . $newline;\n\t}", "code_tokens": ["public", "function", "getXMLFromResult", "(", "ResultInterface", "$", "query", ",", "array", "$", "params", "=", "[", "]", ")", ":", "string", "{", "// Set our default values", "foreach", "(", "[", "'root'", "=>", "'root'", ",", "'element'", "=>", "'element'", ",", "'newline'", "=>", "\"\\n\"", ",", "'tab'", "=>", "\"\\t\"", "]", "as", "$", "key", "=>", "$", "val", ")", "{", "if", "(", "!", "isset", "(", "$", "params", "[", "$", "key", "]", ")", ")", "{", "$", "params", "[", "$", "key", "]", "=", "$", "val", ";", "}", "}", "// Create variables for convenience", "extract", "(", "$", "params", ")", ";", "// Load the xml helper", "helper", "(", "'xml'", ")", ";", "// Generate the result", "$", "xml", "=", "'<'", ".", "$", "root", ".", "'>'", ".", "$", "newline", ";", "while", "(", "$", "row", "=", "$", "query", "->", "getUnbufferedRow", "(", ")", ")", "{", "$", "xml", ".=", "$", "tab", ".", "'<'", ".", "$", "element", ".", "'>'", ".", "$", "newline", ";", "foreach", "(", "$", "row", "as", "$", "key", "=>", "$", "val", ")", "{", "$", "val", "=", "(", "!", "empty", "(", "$", "val", ")", ")", "?", "xml_convert", "(", "$", "val", ")", ":", "''", ";", "$", "xml", ".=", "$", "tab", ".", "$", "tab", ".", "'<'", ".", "$", "key", ".", "'>'", ".", "$", "val", ".", "'</'", ".", "$", "key", ".", "'>'", ".", "$", "newline", ";", "}", "$", "xml", ".=", "$", "tab", ".", "'</'", ".", "$", "element", ".", "'>'", ".", "$", "newline", ";", "}", "return", "$", "xml", ".", "'</'", ".", "$", "root", ".", "'>'", ".", "$", "newline", ";", "}"], "docstring": "Generate XML data from a query result object\n\n@param ResultInterface $query  Query result object\n@param array           $params Any preferences\n\n@return string", "docstring_tokens": ["Generate", "XML", "data", "from", "a", "query", "result", "object"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/BaseUtils.php#L302-L332", "partition": "test"}
{"repo": "TypistTech/wp-better-settings", "path": "src/Builder.php", "func_name": "Builder.checkbox", "original_string": "public function checkbox(\n        string $id,\n        string $title,\n        array $additionalArguments = null\n    ): Field {\n        $formControl = $this->builder->checkbox($id)->value('true');\n        $this->optionStore->getBoolean($id) ? $formControl->check() : $formControl->uncheck();\n\n        $additionalArguments = array_merge(\n            [\n                'type' => 'boolean',\n                'sanitize_callback' => function ($value): bool {\n                    return 'true' === sanitize_text_field($value);\n                },\n            ],\n            (array) $additionalArguments\n        );\n\n        return new Field(\n            $id,\n            $title,\n            $formControl,\n            (array) $additionalArguments\n        );\n    }", "language": "php", "code": "public function checkbox(\n        string $id,\n        string $title,\n        array $additionalArguments = null\n    ): Field {\n        $formControl = $this->builder->checkbox($id)->value('true');\n        $this->optionStore->getBoolean($id) ? $formControl->check() : $formControl->uncheck();\n\n        $additionalArguments = array_merge(\n            [\n                'type' => 'boolean',\n                'sanitize_callback' => function ($value): bool {\n                    return 'true' === sanitize_text_field($value);\n                },\n            ],\n            (array) $additionalArguments\n        );\n\n        return new Field(\n            $id,\n            $title,\n            $formControl,\n            (array) $additionalArguments\n        );\n    }", "code_tokens": ["public", "function", "checkbox", "(", "string", "$", "id", ",", "string", "$", "title", ",", "array", "$", "additionalArguments", "=", "null", ")", ":", "Field", "{", "$", "formControl", "=", "$", "this", "->", "builder", "->", "checkbox", "(", "$", "id", ")", "->", "value", "(", "'true'", ")", ";", "$", "this", "->", "optionStore", "->", "getBoolean", "(", "$", "id", ")", "?", "$", "formControl", "->", "check", "(", ")", ":", "$", "formControl", "->", "uncheck", "(", ")", ";", "$", "additionalArguments", "=", "array_merge", "(", "[", "'type'", "=>", "'boolean'", ",", "'sanitize_callback'", "=>", "function", "(", "$", "value", ")", ":", "bool", "{", "return", "'true'", "===", "sanitize_text_field", "(", "$", "value", ")", ";", "}", ",", "]", ",", "(", "array", ")", "$", "additionalArguments", ")", ";", "return", "new", "Field", "(", "$", "id", ",", "$", "title", ",", "$", "formControl", ",", "(", "array", ")", "$", "additionalArguments", ")", ";", "}"], "docstring": "Build a checkbox field.\n\n@param string $id                  String for use in the 'id' attribute of tags.\n@param string $title               Title of the field.\n@param array  $additionalArguments Optional. Additional arguments that are passed to `register_setting` and\n`add_settings_field`.\n\n@return Field", "docstring_tokens": ["Build", "a", "checkbox", "field", "."], "sha": "30fd7f962f8ab029ae6d6d53f48f8d4826a87f20", "url": "https://github.com/TypistTech/wp-better-settings/blob/30fd7f962f8ab029ae6d6d53f48f8d4826a87f20/src/Builder.php#L62-L86", "partition": "test"}
{"repo": "AntonTerekhov/OrientDB-PHP", "path": "OrientDB/Commands/OrientDBCommandAbstract.php", "func_name": "OrientDBCommandAbstract.readRecord", "original_string": "protected function readRecord()\n    {\n\n        $this->debugCommand('record_marker');\n        $marker = $this->readShort();\n        /**\n         * @see enterprise/src/main/java/com/orientechnologies/orient/enterprise/channel/binary/OChannelBinaryProtocol.java\n         */\n\n        // -2=no record\n        if ($marker == -2) {\n            // no record\n            return false;\n        }\n\n        // -3=Only recordID\n        if ($marker == -3) {\n            // only recordID\n            $this->debugCommand('record_clusterID');\n            $clusterID = $this->readShort();\n            $this->debugCommand('record_position');\n            $recordPos = $this->readLong();\n            return new OrientDBTypeLink($clusterID, $recordPos);\n        }\n\n        $record = new OrientDBRecord();\n        $this->debugCommand('record_type');\n        $record->type = $this->readByte();\n        $this->debugCommand('record_clusterID');\n        $record->clusterID = $this->readShort();\n        $this->debugCommand('record_position');\n        $record->recordPos = $this->readLong();\n        $this->debugCommand('record_version');\n        $record->version = $this->readInt();\n        $this->debugCommand('record_content');\n        $record->content = $this->readBytes();\n\n        return $record;\n    }", "language": "php", "code": "protected function readRecord()\n    {\n\n        $this->debugCommand('record_marker');\n        $marker = $this->readShort();\n        /**\n         * @see enterprise/src/main/java/com/orientechnologies/orient/enterprise/channel/binary/OChannelBinaryProtocol.java\n         */\n\n        // -2=no record\n        if ($marker == -2) {\n            // no record\n            return false;\n        }\n\n        // -3=Only recordID\n        if ($marker == -3) {\n            // only recordID\n            $this->debugCommand('record_clusterID');\n            $clusterID = $this->readShort();\n            $this->debugCommand('record_position');\n            $recordPos = $this->readLong();\n            return new OrientDBTypeLink($clusterID, $recordPos);\n        }\n\n        $record = new OrientDBRecord();\n        $this->debugCommand('record_type');\n        $record->type = $this->readByte();\n        $this->debugCommand('record_clusterID');\n        $record->clusterID = $this->readShort();\n        $this->debugCommand('record_position');\n        $record->recordPos = $this->readLong();\n        $this->debugCommand('record_version');\n        $record->version = $this->readInt();\n        $this->debugCommand('record_content');\n        $record->content = $this->readBytes();\n\n        return $record;\n    }", "code_tokens": ["protected", "function", "readRecord", "(", ")", "{", "$", "this", "->", "debugCommand", "(", "'record_marker'", ")", ";", "$", "marker", "=", "$", "this", "->", "readShort", "(", ")", ";", "/**\n         * @see enterprise/src/main/java/com/orientechnologies/orient/enterprise/channel/binary/OChannelBinaryProtocol.java\n         */", "// -2=no record", "if", "(", "$", "marker", "==", "-", "2", ")", "{", "// no record", "return", "false", ";", "}", "// -3=Only recordID", "if", "(", "$", "marker", "==", "-", "3", ")", "{", "// only recordID", "$", "this", "->", "debugCommand", "(", "'record_clusterID'", ")", ";", "$", "clusterID", "=", "$", "this", "->", "readShort", "(", ")", ";", "$", "this", "->", "debugCommand", "(", "'record_position'", ")", ";", "$", "recordPos", "=", "$", "this", "->", "readLong", "(", ")", ";", "return", "new", "OrientDBTypeLink", "(", "$", "clusterID", ",", "$", "recordPos", ")", ";", "}", "$", "record", "=", "new", "OrientDBRecord", "(", ")", ";", "$", "this", "->", "debugCommand", "(", "'record_type'", ")", ";", "$", "record", "->", "type", "=", "$", "this", "->", "readByte", "(", ")", ";", "$", "this", "->", "debugCommand", "(", "'record_clusterID'", ")", ";", "$", "record", "->", "clusterID", "=", "$", "this", "->", "readShort", "(", ")", ";", "$", "this", "->", "debugCommand", "(", "'record_position'", ")", ";", "$", "record", "->", "recordPos", "=", "$", "this", "->", "readLong", "(", ")", ";", "$", "this", "->", "debugCommand", "(", "'record_version'", ")", ";", "$", "record", "->", "version", "=", "$", "this", "->", "readInt", "(", ")", ";", "$", "this", "->", "debugCommand", "(", "'record_content'", ")", ";", "$", "record", "->", "content", "=", "$", "this", "->", "readBytes", "(", ")", ";", "return", "$", "record", ";", "}"], "docstring": "Read entire record from socket\n@return boolean|OrientDBTypeLink|OrientDBRecord", "docstring_tokens": ["Read", "entire", "record", "from", "socket"], "sha": "c5196fe05bf249e2658a39be0866444997287cf0", "url": "https://github.com/AntonTerekhov/OrientDB-PHP/blob/c5196fe05bf249e2658a39be0866444997287cf0/OrientDB/Commands/OrientDBCommandAbstract.php#L329-L367", "partition": "test"}
{"repo": "Wedeto/Resolve", "path": "src/Route.php", "func_name": "Route.unserialize", "original_string": "public function unserialize($data)\n    {\n        $data = unserialize($data);\n        $this->route = $data['route'];\n        $this->depth = $data['depth'];\n        $this->apps = $data['apps'];\n        $this->children = $data['children'];\n    }", "language": "php", "code": "public function unserialize($data)\n    {\n        $data = unserialize($data);\n        $this->route = $data['route'];\n        $this->depth = $data['depth'];\n        $this->apps = $data['apps'];\n        $this->children = $data['children'];\n    }", "code_tokens": ["public", "function", "unserialize", "(", "$", "data", ")", "{", "$", "data", "=", "unserialize", "(", "$", "data", ")", ";", "$", "this", "->", "route", "=", "$", "data", "[", "'route'", "]", ";", "$", "this", "->", "depth", "=", "$", "data", "[", "'depth'", "]", ";", "$", "this", "->", "apps", "=", "$", "data", "[", "'apps'", "]", ";", "$", "this", "->", "children", "=", "$", "data", "[", "'children'", "]", ";", "}"], "docstring": "Unserialize the route from serialized PHP data\n@param string $data The PHP Serialized data", "docstring_tokens": ["Unserialize", "the", "route", "from", "serialized", "PHP", "data"], "sha": "328a27fa13df1a71f4eb46f16fa179b6283f7f03", "url": "https://github.com/Wedeto/Resolve/blob/328a27fa13df1a71f4eb46f16fa179b6283f7f03/src/Route.php#L175-L182", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Container/NativeContainer.php", "func_name": "NativeContainer.getSingleton", "original_string": "public function getSingleton(string $serviceId)\n    {\n        // If the service isn't a singleton but is provided\n        if (! $this->isSingleton($serviceId) && $this->isProvided($serviceId)) {\n            // Initialize the provided service\n            $this->initializeProvided($serviceId);\n        }\n\n        return self::$singletons[$serviceId];\n    }", "language": "php", "code": "public function getSingleton(string $serviceId)\n    {\n        // If the service isn't a singleton but is provided\n        if (! $this->isSingleton($serviceId) && $this->isProvided($serviceId)) {\n            // Initialize the provided service\n            $this->initializeProvided($serviceId);\n        }\n\n        return self::$singletons[$serviceId];\n    }", "code_tokens": ["public", "function", "getSingleton", "(", "string", "$", "serviceId", ")", "{", "// If the service isn't a singleton but is provided", "if", "(", "!", "$", "this", "->", "isSingleton", "(", "$", "serviceId", ")", "&&", "$", "this", "->", "isProvided", "(", "$", "serviceId", ")", ")", "{", "// Initialize the provided service", "$", "this", "->", "initializeProvided", "(", "$", "serviceId", ")", ";", "}", "return", "self", "::", "$", "singletons", "[", "$", "serviceId", "]", ";", "}"], "docstring": "Get a singleton from the container.\n\n@param string $serviceId The service\n\n@return mixed", "docstring_tokens": ["Get", "a", "singleton", "from", "the", "container", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Container/NativeContainer.php#L412-L421", "partition": "test"}
{"repo": "ekyna/CoreBundle", "path": "Uploader/Uploader.php", "func_name": "Uploader.reconnectDistantFs", "original_string": "private function reconnectDistantFs($key)\n    {\n        /** @noinspection PhpUnusedLocalVariableInspection */\n        list($prefix, $args) = $this->mountManager->filterPrefix([$key]);\n\n        /** @var \\League\\Flysystem\\FileSystem $fs */\n        $fs = $this->mountManager->getFilesystem($prefix);\n        $adapter = $fs->getAdapter();\n\n        // Try reconnection\n        if (!$adapter instanceof AbstractFtpAdapter) {\n            return false;\n        }\n\n        $adapter->disconnect();\n        sleep(1);\n        $adapter->connect();\n\n        return true;\n    }", "language": "php", "code": "private function reconnectDistantFs($key)\n    {\n        /** @noinspection PhpUnusedLocalVariableInspection */\n        list($prefix, $args) = $this->mountManager->filterPrefix([$key]);\n\n        /** @var \\League\\Flysystem\\FileSystem $fs */\n        $fs = $this->mountManager->getFilesystem($prefix);\n        $adapter = $fs->getAdapter();\n\n        // Try reconnection\n        if (!$adapter instanceof AbstractFtpAdapter) {\n            return false;\n        }\n\n        $adapter->disconnect();\n        sleep(1);\n        $adapter->connect();\n\n        return true;\n    }", "code_tokens": ["private", "function", "reconnectDistantFs", "(", "$", "key", ")", "{", "/** @noinspection PhpUnusedLocalVariableInspection */", "list", "(", "$", "prefix", ",", "$", "args", ")", "=", "$", "this", "->", "mountManager", "->", "filterPrefix", "(", "[", "$", "key", "]", ")", ";", "/** @var \\League\\Flysystem\\FileSystem $fs */", "$", "fs", "=", "$", "this", "->", "mountManager", "->", "getFilesystem", "(", "$", "prefix", ")", ";", "$", "adapter", "=", "$", "fs", "->", "getAdapter", "(", ")", ";", "// Try reconnection", "if", "(", "!", "$", "adapter", "instanceof", "AbstractFtpAdapter", ")", "{", "return", "false", ";", "}", "$", "adapter", "->", "disconnect", "(", ")", ";", "sleep", "(", "1", ")", ";", "$", "adapter", "->", "connect", "(", ")", ";", "return", "true", ";", "}"], "docstring": "Reconnects the file system adapter if possible.\n\n@param string $key\n@return bool", "docstring_tokens": ["Reconnects", "the", "file", "system", "adapter", "if", "possible", "."], "sha": "a471324311591489e7cebdb805921dd85ba104ec", "url": "https://github.com/ekyna/CoreBundle/blob/a471324311591489e7cebdb805921dd85ba104ec/Uploader/Uploader.php#L248-L267", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/XSD2PHP/lib/ZF/1.10.7/Zend/Soap/AutoDiscover.php", "func_name": "Zend_Soap_AutoDiscover.setClass", "original_string": "public function setClass($class, $namespace = '', $argv = null)\n    {\n        $uri = $this->getUri();\n\n        $wsdl = new Zend_Soap_Wsdl($class, $uri, $this->_strategy);\n\n        // The wsdl:types element must precede all other elements (WS-I Basic Profile 1.1 R2023)\n        $wsdl->addSchemaTypeSection();\n\n        $port = $wsdl->addPortType($class . 'Port');\n        $binding = $wsdl->addBinding($class . 'Binding', 'tns:' .$class. 'Port');\n\n        $wsdl->addSoapBinding($binding, $this->_bindingStyle['style'], $this->_bindingStyle['transport']);\n        $wsdl->addService($class . 'Service', $class . 'Port', 'tns:' . $class . 'Binding', $uri);\n        foreach ($this->_reflection->reflectClass($class)->getMethods() as $method) {\n            $this->_addFunctionToWsdl($method, $wsdl, $port, $binding);\n        }\n        $this->_wsdl = $wsdl;\n        return $this;\n    }", "language": "php", "code": "public function setClass($class, $namespace = '', $argv = null)\n    {\n        $uri = $this->getUri();\n\n        $wsdl = new Zend_Soap_Wsdl($class, $uri, $this->_strategy);\n\n        // The wsdl:types element must precede all other elements (WS-I Basic Profile 1.1 R2023)\n        $wsdl->addSchemaTypeSection();\n\n        $port = $wsdl->addPortType($class . 'Port');\n        $binding = $wsdl->addBinding($class . 'Binding', 'tns:' .$class. 'Port');\n\n        $wsdl->addSoapBinding($binding, $this->_bindingStyle['style'], $this->_bindingStyle['transport']);\n        $wsdl->addService($class . 'Service', $class . 'Port', 'tns:' . $class . 'Binding', $uri);\n        foreach ($this->_reflection->reflectClass($class)->getMethods() as $method) {\n            $this->_addFunctionToWsdl($method, $wsdl, $port, $binding);\n        }\n        $this->_wsdl = $wsdl;\n        return $this;\n    }", "code_tokens": ["public", "function", "setClass", "(", "$", "class", ",", "$", "namespace", "=", "''", ",", "$", "argv", "=", "null", ")", "{", "$", "uri", "=", "$", "this", "->", "getUri", "(", ")", ";", "$", "wsdl", "=", "new", "Zend_Soap_Wsdl", "(", "$", "class", ",", "$", "uri", ",", "$", "this", "->", "_strategy", ")", ";", "// The wsdl:types element must precede all other elements (WS-I Basic Profile 1.1 R2023)", "$", "wsdl", "->", "addSchemaTypeSection", "(", ")", ";", "$", "port", "=", "$", "wsdl", "->", "addPortType", "(", "$", "class", ".", "'Port'", ")", ";", "$", "binding", "=", "$", "wsdl", "->", "addBinding", "(", "$", "class", ".", "'Binding'", ",", "'tns:'", ".", "$", "class", ".", "'Port'", ")", ";", "$", "wsdl", "->", "addSoapBinding", "(", "$", "binding", ",", "$", "this", "->", "_bindingStyle", "[", "'style'", "]", ",", "$", "this", "->", "_bindingStyle", "[", "'transport'", "]", ")", ";", "$", "wsdl", "->", "addService", "(", "$", "class", ".", "'Service'", ",", "$", "class", ".", "'Port'", ",", "'tns:'", ".", "$", "class", ".", "'Binding'", ",", "$", "uri", ")", ";", "foreach", "(", "$", "this", "->", "_reflection", "->", "reflectClass", "(", "$", "class", ")", "->", "getMethods", "(", ")", "as", "$", "method", ")", "{", "$", "this", "->", "_addFunctionToWsdl", "(", "$", "method", ",", "$", "wsdl", ",", "$", "port", ",", "$", "binding", ")", ";", "}", "$", "this", "->", "_wsdl", "=", "$", "wsdl", ";", "return", "$", "this", ";", "}"], "docstring": "Set the Class the SOAP server will use\n\n@param string $class Class Name\n@param string $namespace Class Namspace - Not Used\n@param array $argv Arguments to instantiate the class - Not Used\n\n@return $this", "docstring_tokens": ["Set", "the", "Class", "the", "SOAP", "server", "will", "use"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/XSD2PHP/lib/ZF/1.10.7/Zend/Soap/AutoDiscover.php#L269-L288", "partition": "test"}
{"repo": "PackageFactory/atomic-fusion", "path": "Classes/PackageFactory/AtomicFusion/FusionObjects/ComponentImplementation.php", "func_name": "ComponentImplementation.renderComponent", "original_string": "public function renderComponent(array $props)\n    {\n        $context = $this->runtime->getCurrentContext();\n        $context['props'] = $props;\n        $this->runtime->pushContextArray($context);\n        $result = $this->runtime->render($this->path . '/renderer');\n        $this->runtime->popContext();\n\n        return $result;\n    }", "language": "php", "code": "public function renderComponent(array $props)\n    {\n        $context = $this->runtime->getCurrentContext();\n        $context['props'] = $props;\n        $this->runtime->pushContextArray($context);\n        $result = $this->runtime->render($this->path . '/renderer');\n        $this->runtime->popContext();\n\n        return $result;\n    }", "code_tokens": ["public", "function", "renderComponent", "(", "array", "$", "props", ")", "{", "$", "context", "=", "$", "this", "->", "runtime", "->", "getCurrentContext", "(", ")", ";", "$", "context", "[", "'props'", "]", "=", "$", "props", ";", "$", "this", "->", "runtime", "->", "pushContextArray", "(", "$", "context", ")", ";", "$", "result", "=", "$", "this", "->", "runtime", "->", "render", "(", "$", "this", "->", "path", ".", "'/renderer'", ")", ";", "$", "this", "->", "runtime", "->", "popContext", "(", ")", ";", "return", "$", "result", ";", "}"], "docstring": "Render the component with the given props\n\n@param array $props\n@return void|string", "docstring_tokens": ["Render", "the", "component", "with", "the", "given", "props"], "sha": "e7cf2f06ad40e2522f159214b5ced70fd8996edc", "url": "https://github.com/PackageFactory/atomic-fusion/blob/e7cf2f06ad40e2522f159214b5ced70fd8996edc/Classes/PackageFactory/AtomicFusion/FusionObjects/ComponentImplementation.php#L65-L74", "partition": "test"}
{"repo": "iNem0o/PicORM", "path": "src/PicORM/Model.php", "func_name": "Model.findQuery", "original_string": "public static function findQuery($query, $params)\n    {\n        $query = static::$_dataSource->prepare($query);\n        $query->execute($params);\n        $fetch = $query->fetchAll(\\PDO::FETCH_ASSOC);\n\n        $collection = array();\n        foreach ($fetch as $unRes) {\n            $object = new static();\n            $object->hydrate($unRes);\n            $collection[] = $object;\n        }\n\n        return $collection;\n    }", "language": "php", "code": "public static function findQuery($query, $params)\n    {\n        $query = static::$_dataSource->prepare($query);\n        $query->execute($params);\n        $fetch = $query->fetchAll(\\PDO::FETCH_ASSOC);\n\n        $collection = array();\n        foreach ($fetch as $unRes) {\n            $object = new static();\n            $object->hydrate($unRes);\n            $collection[] = $object;\n        }\n\n        return $collection;\n    }", "code_tokens": ["public", "static", "function", "findQuery", "(", "$", "query", ",", "$", "params", ")", "{", "$", "query", "=", "static", "::", "$", "_dataSource", "->", "prepare", "(", "$", "query", ")", ";", "$", "query", "->", "execute", "(", "$", "params", ")", ";", "$", "fetch", "=", "$", "query", "->", "fetchAll", "(", "\\", "PDO", "::", "FETCH_ASSOC", ")", ";", "$", "collection", "=", "array", "(", ")", ";", "foreach", "(", "$", "fetch", "as", "$", "unRes", ")", "{", "$", "object", "=", "new", "static", "(", ")", ";", "$", "object", "->", "hydrate", "(", "$", "unRes", ")", ";", "$", "collection", "[", "]", "=", "$", "object", ";", "}", "return", "$", "collection", ";", "}"], "docstring": "Return model array fetched from database with custom mysql query\n\n@param $query\n@param $params\n\n@return static[]\n@todo must return Collection", "docstring_tokens": ["Return", "model", "array", "fetched", "from", "database", "with", "custom", "mysql", "query"], "sha": "0bf6c5b359d5fcb098b43d3ea3bf99839bee8b9f", "url": "https://github.com/iNem0o/PicORM/blob/0bf6c5b359d5fcb098b43d3ea3bf99839bee8b9f/src/PicORM/Model.php#L776-L790", "partition": "test"}
{"repo": "FACT-Finder/FACT-Finder-PHP-Library", "path": "src/log4php/appenders/LoggerAppenderPDO.php", "func_name": "LoggerAppenderPDO.format", "original_string": "protected function format(LoggerLoggingEvent $event) {\r\n\t\t$params = array();\r\n\t\tforeach($this->converters as $converter) {\r\n\t\t\t$buffer = '';\r\n\t\t\twhile ($converter !== null) {\r\n\t\t\t\t$converter->format($buffer, $event);\r\n\t\t\t\t$converter = $converter->next;\r\n\t\t\t}\r\n\t\t\t$params[] = $buffer;\r\n\t\t}\r\n\t\treturn $params;\r\n\t}", "language": "php", "code": "protected function format(LoggerLoggingEvent $event) {\r\n\t\t$params = array();\r\n\t\tforeach($this->converters as $converter) {\r\n\t\t\t$buffer = '';\r\n\t\t\twhile ($converter !== null) {\r\n\t\t\t\t$converter->format($buffer, $event);\r\n\t\t\t\t$converter = $converter->next;\r\n\t\t\t}\r\n\t\t\t$params[] = $buffer;\r\n\t\t}\r\n\t\treturn $params;\r\n\t}", "code_tokens": ["protected", "function", "format", "(", "LoggerLoggingEvent", "$", "event", ")", "{", "$", "params", "=", "array", "(", ")", ";", "foreach", "(", "$", "this", "->", "converters", "as", "$", "converter", ")", "{", "$", "buffer", "=", "''", ";", "while", "(", "$", "converter", "!==", "null", ")", "{", "$", "converter", "->", "format", "(", "$", "buffer", ",", "$", "event", ")", ";", "$", "converter", "=", "$", "converter", "->", "next", ";", "}", "$", "params", "[", "]", "=", "$", "buffer", ";", "}", "return", "$", "params", ";", "}"], "docstring": "Converts the logging event to a series of database parameters by using\nthe converter chain which was set up on activation.", "docstring_tokens": ["Converts", "the", "logging", "event", "to", "a", "series", "of", "database", "parameters", "by", "using", "the", "converter", "chain", "which", "was", "set", "up", "on", "activation", "."], "sha": "5c795b94117fa7ac40f5e80d4edc93999a76fc90", "url": "https://github.com/FACT-Finder/FACT-Finder-PHP-Library/blob/5c795b94117fa7ac40f5e80d4edc93999a76fc90/src/log4php/appenders/LoggerAppenderPDO.php#L187-L198", "partition": "test"}
{"repo": "develpr/alexa-app", "path": "src/Provider/AlexaServiceProvider.php", "func_name": "AlexaServiceProvider.bindAlexaRequest", "original_string": "private function bindAlexaRequest(Request $request)\n    {\n        $this->app->singleton('alexa.request', function($app) use ($request) {\n            /** @var AlexaRequest $alexaRequest */\n            $alexaRequest = AlexaRequest::capture();\n\n            if (!$app['config']['alexa.prompt.enable'] || $alexaRequest->getIntent() !== $app['config']['alexa.prompt.response_intent'] || is_null($alexaRequest->getPromptResponseIntent())) {\n                return $alexaRequest;\n            } else{\n                $alexaRequest->setPromptResponse(true);\n\n                return $alexaRequest;\n            }\n        });\n    }", "language": "php", "code": "private function bindAlexaRequest(Request $request)\n    {\n        $this->app->singleton('alexa.request', function($app) use ($request) {\n            /** @var AlexaRequest $alexaRequest */\n            $alexaRequest = AlexaRequest::capture();\n\n            if (!$app['config']['alexa.prompt.enable'] || $alexaRequest->getIntent() !== $app['config']['alexa.prompt.response_intent'] || is_null($alexaRequest->getPromptResponseIntent())) {\n                return $alexaRequest;\n            } else{\n                $alexaRequest->setPromptResponse(true);\n\n                return $alexaRequest;\n            }\n        });\n    }", "code_tokens": ["private", "function", "bindAlexaRequest", "(", "Request", "$", "request", ")", "{", "$", "this", "->", "app", "->", "singleton", "(", "'alexa.request'", ",", "function", "(", "$", "app", ")", "use", "(", "$", "request", ")", "{", "/** @var AlexaRequest $alexaRequest */", "$", "alexaRequest", "=", "AlexaRequest", "::", "capture", "(", ")", ";", "if", "(", "!", "$", "app", "[", "'config'", "]", "[", "'alexa.prompt.enable'", "]", "||", "$", "alexaRequest", "->", "getIntent", "(", ")", "!==", "$", "app", "[", "'config'", "]", "[", "'alexa.prompt.response_intent'", "]", "||", "is_null", "(", "$", "alexaRequest", "->", "getPromptResponseIntent", "(", ")", ")", ")", "{", "return", "$", "alexaRequest", ";", "}", "else", "{", "$", "alexaRequest", "->", "setPromptResponse", "(", "true", ")", ";", "return", "$", "alexaRequest", ";", "}", "}", ")", ";", "}"], "docstring": "Bind the appropriate AlexaResponse type to the IoC container", "docstring_tokens": ["Bind", "the", "appropriate", "AlexaResponse", "type", "to", "the", "IoC", "container"], "sha": "4e14c2d2b6db4c58fb11c82867d1e712575f1ec3", "url": "https://github.com/develpr/alexa-app/blob/4e14c2d2b6db4c58fb11c82867d1e712575f1ec3/src/Provider/AlexaServiceProvider.php#L52-L66", "partition": "test"}
{"repo": "UWEnrollmentManagement/Group", "path": "src/Group.php", "func_name": "Group.getDirectMembership", "original_string": "protected function getDirectMembership()\n    {\n        if (isset($this->regid) === false) {\n            $this->getGroup();\n        }\n        if (is_null($this->regid) === true) {\n            throw new \\Exception('Group Id not specified');\n        }\n        $resp = static::getGroupConnection()->execGET(\n            \"$this->identifier/member\"\n        );\n\n        $this->directmembers = [];\n        $this->parseMembership($resp->getData());\n    }", "language": "php", "code": "protected function getDirectMembership()\n    {\n        if (isset($this->regid) === false) {\n            $this->getGroup();\n        }\n        if (is_null($this->regid) === true) {\n            throw new \\Exception('Group Id not specified');\n        }\n        $resp = static::getGroupConnection()->execGET(\n            \"$this->identifier/member\"\n        );\n\n        $this->directmembers = [];\n        $this->parseMembership($resp->getData());\n    }", "code_tokens": ["protected", "function", "getDirectMembership", "(", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "regid", ")", "===", "false", ")", "{", "$", "this", "->", "getGroup", "(", ")", ";", "}", "if", "(", "is_null", "(", "$", "this", "->", "regid", ")", "===", "true", ")", "{", "throw", "new", "\\", "Exception", "(", "'Group Id not specified'", ")", ";", "}", "$", "resp", "=", "static", "::", "getGroupConnection", "(", ")", "->", "execGET", "(", "\"$this->identifier/member\"", ")", ";", "$", "this", "->", "directmembers", "=", "[", "]", ";", "$", "this", "->", "parseMembership", "(", "$", "resp", "->", "getData", "(", ")", ")", ";", "}"], "docstring": "Queries GWS to for direct members of the group. Members are added to the object.\n@return void", "docstring_tokens": ["Queries", "GWS", "to", "for", "direct", "members", "of", "the", "group", ".", "Members", "are", "added", "to", "the", "object", "."], "sha": "a6274e46ef230a487c7a5810eb506b09c6c3baf1", "url": "https://github.com/UWEnrollmentManagement/Group/blob/a6274e46ef230a487c7a5810eb506b09c6c3baf1/src/Group.php#L596-L610", "partition": "test"}
{"repo": "dotkernel/dot-navigation", "path": "src/NavigationContainer.php", "func_name": "NavigationContainer.findOneByAttribute", "original_string": "public function findOneByAttribute(string $attribute, $value): ?Page\n    {\n        $iterator = new \\RecursiveIteratorIterator($this, \\RecursiveIteratorIterator::SELF_FIRST);\n        /** @var Page $page */\n        foreach ($iterator as $page) {\n            if ($page->getAttribute($attribute) === $value) {\n                return $page;\n            }\n        }\n        return null;\n    }", "language": "php", "code": "public function findOneByAttribute(string $attribute, $value): ?Page\n    {\n        $iterator = new \\RecursiveIteratorIterator($this, \\RecursiveIteratorIterator::SELF_FIRST);\n        /** @var Page $page */\n        foreach ($iterator as $page) {\n            if ($page->getAttribute($attribute) === $value) {\n                return $page;\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "function", "findOneByAttribute", "(", "string", "$", "attribute", ",", "$", "value", ")", ":", "?", "Page", "{", "$", "iterator", "=", "new", "\\", "RecursiveIteratorIterator", "(", "$", "this", ",", "\\", "RecursiveIteratorIterator", "::", "SELF_FIRST", ")", ";", "/** @var Page $page */", "foreach", "(", "$", "iterator", "as", "$", "page", ")", "{", "if", "(", "$", "page", "->", "getAttribute", "(", "$", "attribute", ")", "===", "$", "value", ")", "{", "return", "$", "page", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Find a single child by attribute\n\n@param string $attribute\n@param mixed $value\n@return Page|null", "docstring_tokens": ["Find", "a", "single", "child", "by", "attribute"], "sha": "32b555fcdbc0c47f1285d1bbdb202f667b1efa47", "url": "https://github.com/dotkernel/dot-navigation/blob/32b555fcdbc0c47f1285d1bbdb202f667b1efa47/src/NavigationContainer.php#L120-L130", "partition": "test"}
{"repo": "contao-community-alliance/dc-general-contao-frontend", "path": "src/View/EditMask.php", "func_name": "EditMask.translateLabel", "original_string": "private function translateLabel($transString, $parameters = [])\n    {\n        $translator = $this->translator;\n        if ($transString !== ($label =\n                $translator->translate($transString, $this->definition->getName(), $parameters))) {\n            return $label;\n        }\n\n        if ($transString !== ($label = $translator->translate('MSC.'.$transString, $parameters))\n        ) {\n            return $label;\n        }\n\n        // Fallback, just return the key as is it.\n        return $transString;\n    }", "language": "php", "code": "private function translateLabel($transString, $parameters = [])\n    {\n        $translator = $this->translator;\n        if ($transString !== ($label =\n                $translator->translate($transString, $this->definition->getName(), $parameters))) {\n            return $label;\n        }\n\n        if ($transString !== ($label = $translator->translate('MSC.'.$transString, $parameters))\n        ) {\n            return $label;\n        }\n\n        // Fallback, just return the key as is it.\n        return $transString;\n    }", "code_tokens": ["private", "function", "translateLabel", "(", "$", "transString", ",", "$", "parameters", "=", "[", "]", ")", "{", "$", "translator", "=", "$", "this", "->", "translator", ";", "if", "(", "$", "transString", "!==", "(", "$", "label", "=", "$", "translator", "->", "translate", "(", "$", "transString", ",", "$", "this", "->", "definition", "->", "getName", "(", ")", ",", "$", "parameters", ")", ")", ")", "{", "return", "$", "label", ";", "}", "if", "(", "$", "transString", "!==", "(", "$", "label", "=", "$", "translator", "->", "translate", "(", "'MSC.'", ".", "$", "transString", ",", "$", "parameters", ")", ")", ")", "{", "return", "$", "label", ";", "}", "// Fallback, just return the key as is it.", "return", "$", "transString", ";", "}"], "docstring": "Get a translated label from the translator.\n\nThe fallback is as follows:\n1. Try to translate via the data definition name as translation section.\n2. Try to translate with the prefix 'MSC.'.\n3. Return the input value as nothing worked out.\n\n@param string $transString The non translated label for the button.\n\n@param array  $parameters  The parameters to pass to the translator.\n\n@return string", "docstring_tokens": ["Get", "a", "translated", "label", "from", "the", "translator", "."], "sha": "0a5c293f90fae42732ce1795f2ccfa26a76effce", "url": "https://github.com/contao-community-alliance/dc-general-contao-frontend/blob/0a5c293f90fae42732ce1795f2ccfa26a76effce/src/View/EditMask.php#L294-L309", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Debug/ExceptionHandler.php", "func_name": "ExceptionHandler.getContent", "original_string": "public function getContent(Throwable $exception): string\n    {\n        $title = 'Whoops, looks like something went wrong.';\n\n        if (\n            $exception instanceof HttpException\n            && $exception->getStatusCode() === 404\n        ) {\n            $title = 'Sorry, the page you are looking for could not be found.';\n        }\n\n        $content = '';\n\n        if ($this->displayErrors) {\n            try {\n                $exceptions = [\n                    $exception,\n                ];\n                $e          = $exception;\n\n                while ($e = $e->getPrevious()) {\n                    $exceptions[] = $e;\n                }\n\n                $count = \\count($exceptions);\n                $total = $count;\n\n                /**\n                 * @var int\n                 * @var \\Throwable $e\n                 */\n                foreach ($exceptions as $position => $e) {\n                    $ind     = $count - $position;\n                    $class   = $this->formatClass(\\get_class($e));\n                    $message = nl2br($this->escapeHtml($e->getMessage()));\n                    $content .= sprintf(\n                        <<<'EOF'\n                                                <h2 class=\"block_exception clear_fix\">\n                            <span class=\"exception_counter\">%d/%d</span>\n                            <span class=\"exception_title\">%s%s:</span>\n                            <span class=\"exception_message\">%s</span>\n                        </h2>\n                        <div class=\"block\">\n                            <ol class=\"traces list_exception\">\n\nEOF\n                        ,\n                        $ind,\n                        $total,\n                        $class,\n                        $this->formatPath(\n                            $e->getTrace()[0]['file'] ?? 'Unknown file',\n                            $e->getTrace()[0]['line'] ?? 0\n                        ),\n                        $message\n                    );\n\n                    foreach ($e->getTrace() as $trace) {\n                        $traceClass    = $trace['class'] ?? '';\n                        $traceArgs     = $trace['args'] ?? [];\n                        $traceType     = $trace['type'] ?? '';\n                        $traceFunction = $trace['function'] ?? '';\n\n                        $content .= '       <li>';\n\n                        if ($trace['function']) {\n                            $content .= sprintf(\n                                'at %s%s%s(%s)',\n                                $this->formatClass($traceClass),\n                                $traceType,\n                                $traceFunction,\n                                $this->formatArgs($traceArgs)\n                            );\n                        }\n\n                        if (isset($trace['file'], $trace['line'])) {\n                            $content .= $this->formatPath(\n                                $trace['file'],\n                                $trace['line']\n                            );\n                        }\n\n                        $content .= \"</li>\\n\";\n                    }\n\n                    $content .= \"    </ol>\\n</div>\\n\";\n                }\n            } catch (Exception $e) {\n                // Something nasty happened and we cannot throw an exception anymore\n                $title = sprintf(\n                    'Exception thrown when handling an exception (%s: %s)',\n                    \\get_class($e),\n                    $this->escapeHtml($e->getMessage())\n                );\n            }\n        }\n\n        return <<<EOF\n            <div id=\"sf-resetcontent\" class=\"sf-reset\">\n                <h1>$title</h1>\n                $content\n            </div>\nEOF;\n    }", "language": "php", "code": "public function getContent(Throwable $exception): string\n    {\n        $title = 'Whoops, looks like something went wrong.';\n\n        if (\n            $exception instanceof HttpException\n            && $exception->getStatusCode() === 404\n        ) {\n            $title = 'Sorry, the page you are looking for could not be found.';\n        }\n\n        $content = '';\n\n        if ($this->displayErrors) {\n            try {\n                $exceptions = [\n                    $exception,\n                ];\n                $e          = $exception;\n\n                while ($e = $e->getPrevious()) {\n                    $exceptions[] = $e;\n                }\n\n                $count = \\count($exceptions);\n                $total = $count;\n\n                /**\n                 * @var int\n                 * @var \\Throwable $e\n                 */\n                foreach ($exceptions as $position => $e) {\n                    $ind     = $count - $position;\n                    $class   = $this->formatClass(\\get_class($e));\n                    $message = nl2br($this->escapeHtml($e->getMessage()));\n                    $content .= sprintf(\n                        <<<'EOF'\n                                                <h2 class=\"block_exception clear_fix\">\n                            <span class=\"exception_counter\">%d/%d</span>\n                            <span class=\"exception_title\">%s%s:</span>\n                            <span class=\"exception_message\">%s</span>\n                        </h2>\n                        <div class=\"block\">\n                            <ol class=\"traces list_exception\">\n\nEOF\n                        ,\n                        $ind,\n                        $total,\n                        $class,\n                        $this->formatPath(\n                            $e->getTrace()[0]['file'] ?? 'Unknown file',\n                            $e->getTrace()[0]['line'] ?? 0\n                        ),\n                        $message\n                    );\n\n                    foreach ($e->getTrace() as $trace) {\n                        $traceClass    = $trace['class'] ?? '';\n                        $traceArgs     = $trace['args'] ?? [];\n                        $traceType     = $trace['type'] ?? '';\n                        $traceFunction = $trace['function'] ?? '';\n\n                        $content .= '       <li>';\n\n                        if ($trace['function']) {\n                            $content .= sprintf(\n                                'at %s%s%s(%s)',\n                                $this->formatClass($traceClass),\n                                $traceType,\n                                $traceFunction,\n                                $this->formatArgs($traceArgs)\n                            );\n                        }\n\n                        if (isset($trace['file'], $trace['line'])) {\n                            $content .= $this->formatPath(\n                                $trace['file'],\n                                $trace['line']\n                            );\n                        }\n\n                        $content .= \"</li>\\n\";\n                    }\n\n                    $content .= \"    </ol>\\n</div>\\n\";\n                }\n            } catch (Exception $e) {\n                // Something nasty happened and we cannot throw an exception anymore\n                $title = sprintf(\n                    'Exception thrown when handling an exception (%s: %s)',\n                    \\get_class($e),\n                    $this->escapeHtml($e->getMessage())\n                );\n            }\n        }\n\n        return <<<EOF\n            <div id=\"sf-resetcontent\" class=\"sf-reset\">\n                <h1>$title</h1>\n                $content\n            </div>\nEOF;\n    }", "code_tokens": ["public", "function", "getContent", "(", "Throwable", "$", "exception", ")", ":", "string", "{", "$", "title", "=", "'Whoops, looks like something went wrong.'", ";", "if", "(", "$", "exception", "instanceof", "HttpException", "&&", "$", "exception", "->", "getStatusCode", "(", ")", "===", "404", ")", "{", "$", "title", "=", "'Sorry, the page you are looking for could not be found.'", ";", "}", "$", "content", "=", "''", ";", "if", "(", "$", "this", "->", "displayErrors", ")", "{", "try", "{", "$", "exceptions", "=", "[", "$", "exception", ",", "]", ";", "$", "e", "=", "$", "exception", ";", "while", "(", "$", "e", "=", "$", "e", "->", "getPrevious", "(", ")", ")", "{", "$", "exceptions", "[", "]", "=", "$", "e", ";", "}", "$", "count", "=", "\\", "count", "(", "$", "exceptions", ")", ";", "$", "total", "=", "$", "count", ";", "/**\n                 * @var int\n                 * @var \\Throwable $e\n                 */", "foreach", "(", "$", "exceptions", "as", "$", "position", "=>", "$", "e", ")", "{", "$", "ind", "=", "$", "count", "-", "$", "position", ";", "$", "class", "=", "$", "this", "->", "formatClass", "(", "\\", "get_class", "(", "$", "e", ")", ")", ";", "$", "message", "=", "nl2br", "(", "$", "this", "->", "escapeHtml", "(", "$", "e", "->", "getMessage", "(", ")", ")", ")", ";", "$", "content", ".=", "sprintf", "(", "\n                        <<<'EOF'\n                                                <h2 class=\"block_exception clear_fix\">\n                            <span class=\"exception_counter\">%d/%d</span>\n                            <span class=\"exception_title\">%s%s:</span>\n                            <span class=\"exception_message\">%s</span>\n                        </h2>\n                        <div class=\"block\">\n                            <ol class=\"traces list_exception\">\n\nEOF", ",", "$", "ind", ",", "$", "total", ",", "$", "class", ",", "$", "this", "->", "formatPath", "(", "$", "e", "->", "getTrace", "(", ")", "[", "0", "]", "[", "'file'", "]", "??", "'Unknown file'", ",", "$", "e", "->", "getTrace", "(", ")", "[", "0", "]", "[", "'line'", "]", "??", "0", ")", ",", "$", "message", ")", ";", "foreach", "(", "$", "e", "->", "getTrace", "(", ")", "as", "$", "trace", ")", "{", "$", "traceClass", "=", "$", "trace", "[", "'class'", "]", "??", "''", ";", "$", "traceArgs", "=", "$", "trace", "[", "'args'", "]", "??", "[", "]", ";", "$", "traceType", "=", "$", "trace", "[", "'type'", "]", "??", "''", ";", "$", "traceFunction", "=", "$", "trace", "[", "'function'", "]", "??", "''", ";", "$", "content", ".=", "'       <li>'", ";", "if", "(", "$", "trace", "[", "'function'", "]", ")", "{", "$", "content", ".=", "sprintf", "(", "'at %s%s%s(%s)'", ",", "$", "this", "->", "formatClass", "(", "$", "traceClass", ")", ",", "$", "traceType", ",", "$", "traceFunction", ",", "$", "this", "->", "formatArgs", "(", "$", "traceArgs", ")", ")", ";", "}", "if", "(", "isset", "(", "$", "trace", "[", "'file'", "]", ",", "$", "trace", "[", "'line'", "]", ")", ")", "{", "$", "content", ".=", "$", "this", "->", "formatPath", "(", "$", "trace", "[", "'file'", "]", ",", "$", "trace", "[", "'line'", "]", ")", ";", "}", "$", "content", ".=", "\"</li>\\n\"", ";", "}", "$", "content", ".=", "\"    </ol>\\n</div>\\n\"", ";", "}", "}", "catch", "(", "Exception", "$", "e", ")", "{", "// Something nasty happened and we cannot throw an exception anymore", "$", "title", "=", "sprintf", "(", "'Exception thrown when handling an exception (%s: %s)'", ",", "\\", "get_class", "(", "$", "e", ")", ",", "$", "this", "->", "escapeHtml", "(", "$", "e", "->", "getMessage", "(", ")", ")", ")", ";", "}", "}", "return", " <<<EOF\n            <div id=\"sf-resetcontent\" class=\"sf-reset\">\n                <h1>$title</h1>\n                $content\n            </div>\nEOF", ";", "}"], "docstring": "Gets the HTML content associated with the given exception.\n\n@param \\Throwable $exception A FlattenException instance\n\n@return string The content as a string", "docstring_tokens": ["Gets", "the", "HTML", "content", "associated", "with", "the", "given", "exception", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Debug/ExceptionHandler.php#L209-L312", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/Command.php", "func_name": "Command.setConnection", "original_string": "public function setConnection($connection = null)\n    {\n        if ($connection instanceof TransactionInterface) {\n            $connection = $connection->getConnection();\n        }\n        $this->connection = $connection;\n        if ($connection instanceof EventEmitterWildcardInterface) {\n            //Remove connection instance on close\n            $this->connection->once(ConnectionInterface::EVENT_CLOSE, function() use ($connection) {\n                if ($this->connection === $connection) {\n                    $this->connection = null;\n                }\n            });\n        }\n        return $this;\n    }", "language": "php", "code": "public function setConnection($connection = null)\n    {\n        if ($connection instanceof TransactionInterface) {\n            $connection = $connection->getConnection();\n        }\n        $this->connection = $connection;\n        if ($connection instanceof EventEmitterWildcardInterface) {\n            //Remove connection instance on close\n            $this->connection->once(ConnectionInterface::EVENT_CLOSE, function() use ($connection) {\n                if ($this->connection === $connection) {\n                    $this->connection = null;\n                }\n            });\n        }\n        return $this;\n    }", "code_tokens": ["public", "function", "setConnection", "(", "$", "connection", "=", "null", ")", "{", "if", "(", "$", "connection", "instanceof", "TransactionInterface", ")", "{", "$", "connection", "=", "$", "connection", "->", "getConnection", "(", ")", ";", "}", "$", "this", "->", "connection", "=", "$", "connection", ";", "if", "(", "$", "connection", "instanceof", "EventEmitterWildcardInterface", ")", "{", "//Remove connection instance on close", "$", "this", "->", "connection", "->", "once", "(", "ConnectionInterface", "::", "EVENT_CLOSE", ",", "function", "(", ")", "use", "(", "$", "connection", ")", "{", "if", "(", "$", "this", "->", "connection", "===", "$", "connection", ")", "{", "$", "this", "->", "connection", "=", "null", ";", "}", "}", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Set connection to use with\n@param ConnectionInterface|TransactionInterface|null $connection\n@return $this this command instance", "docstring_tokens": ["Set", "connection", "to", "use", "with"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/Command.php#L98-L113", "partition": "test"}
{"repo": "MichaelRShelton/middleman", "path": "src/Concerns/HasMiddleware.php", "func_name": "HasMiddleware.prependMiddleware", "original_string": "protected function prependMiddleware($middleware, string $key = \"\", string $group = null)\n    {\n        $middleware = $this->middlewareResolver()->resolveOrFail($middleware, $key);\n        $this->getMiddlewareGroup($group ?: $this->middlewareGroupId)->prepend($middleware, $key);\n        return $this;\n    }", "language": "php", "code": "protected function prependMiddleware($middleware, string $key = \"\", string $group = null)\n    {\n        $middleware = $this->middlewareResolver()->resolveOrFail($middleware, $key);\n        $this->getMiddlewareGroup($group ?: $this->middlewareGroupId)->prepend($middleware, $key);\n        return $this;\n    }", "code_tokens": ["protected", "function", "prependMiddleware", "(", "$", "middleware", ",", "string", "$", "key", "=", "\"\"", ",", "string", "$", "group", "=", "null", ")", "{", "$", "middleware", "=", "$", "this", "->", "middlewareResolver", "(", ")", "->", "resolveOrFail", "(", "$", "middleware", ",", "$", "key", ")", ";", "$", "this", "->", "getMiddlewareGroup", "(", "$", "group", "?", ":", "$", "this", "->", "middlewareGroupId", ")", "->", "prepend", "(", "$", "middleware", ",", "$", "key", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Add a new middleware to beginning of the stack if it does not already exist.\n\n@param mixed $middleware\n@param string $key\n@param string|null $group\n@return $this", "docstring_tokens": ["Add", "a", "new", "middleware", "to", "beginning", "of", "the", "stack", "if", "it", "does", "not", "already", "exist", "."], "sha": "b67140be2f39a32a27f5a0a9b2498ab3444835ba", "url": "https://github.com/MichaelRShelton/middleman/blob/b67140be2f39a32a27f5a0a9b2498ab3444835ba/src/Concerns/HasMiddleware.php#L446-L451", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-table/src/Table/TableRestProxy.php", "func_name": "TableRestProxy.deleteTableAsync", "original_string": "public function deleteTableAsync(\n        $table,\n        TableServiceOptions$options = null\n    ) {\n        Validate::canCastAsString($table, 'table');\n        Validate::notNullOrEmpty($table, 'table');\n\n        $method      = Resources::HTTP_DELETE;\n        $headers     = array();\n        $postParams  = array();\n        $queryParams = array();\n        $path        = \"Tables('$table')\";\n\n        if (is_null($options)) {\n            $options = new TableServiceOptions();\n        }\n\n        return $this->sendAsync(\n            $method,\n            $headers,\n            $queryParams,\n            $postParams,\n            $path,\n            Resources::STATUS_NO_CONTENT,\n            Resources::EMPTY_STRING,\n            $options\n        );\n    }", "language": "php", "code": "public function deleteTableAsync(\n        $table,\n        TableServiceOptions$options = null\n    ) {\n        Validate::canCastAsString($table, 'table');\n        Validate::notNullOrEmpty($table, 'table');\n\n        $method      = Resources::HTTP_DELETE;\n        $headers     = array();\n        $postParams  = array();\n        $queryParams = array();\n        $path        = \"Tables('$table')\";\n\n        if (is_null($options)) {\n            $options = new TableServiceOptions();\n        }\n\n        return $this->sendAsync(\n            $method,\n            $headers,\n            $queryParams,\n            $postParams,\n            $path,\n            Resources::STATUS_NO_CONTENT,\n            Resources::EMPTY_STRING,\n            $options\n        );\n    }", "code_tokens": ["public", "function", "deleteTableAsync", "(", "$", "table", ",", "TableServiceOptions", "$", "options", "=", "null", ")", "{", "Validate", "::", "canCastAsString", "(", "$", "table", ",", "'table'", ")", ";", "Validate", "::", "notNullOrEmpty", "(", "$", "table", ",", "'table'", ")", ";", "$", "method", "=", "Resources", "::", "HTTP_DELETE", ";", "$", "headers", "=", "array", "(", ")", ";", "$", "postParams", "=", "array", "(", ")", ";", "$", "queryParams", "=", "array", "(", ")", ";", "$", "path", "=", "\"Tables('$table')\"", ";", "if", "(", "is_null", "(", "$", "options", ")", ")", "{", "$", "options", "=", "new", "TableServiceOptions", "(", ")", ";", "}", "return", "$", "this", "->", "sendAsync", "(", "$", "method", ",", "$", "headers", ",", "$", "queryParams", ",", "$", "postParams", ",", "$", "path", ",", "Resources", "::", "STATUS_NO_CONTENT", ",", "Resources", "::", "EMPTY_STRING", ",", "$", "options", ")", ";", "}"], "docstring": "Creates promise to delete the specified table and any data it contains.\n\n@param string              $table   The name of the table.\n@param TableServiceOptions $options optional parameters\n\n@return \\GuzzleHttp\\Promise\\PromiseInterface\n\n@see http://msdn.microsoft.com/en-us/library/windowsazure/dd179387.aspx", "docstring_tokens": ["Creates", "promise", "to", "delete", "the", "specified", "table", "and", "any", "data", "it", "contains", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-table/src/Table/TableRestProxy.php#L1058-L1085", "partition": "test"}
{"repo": "contao-bootstrap/grid-editor", "path": "src/DataContainer/ColumnSet.php", "func_name": "ColumnSet.appendColumnsetIdToPalette", "original_string": "public function appendColumnsetIdToPalette($dataContainer)\n    {\n        if ($GLOBALS['TL_CONFIG']['subcolumns'] != 'bootstrap_customizable') {\n            return;\n        }\n\n        if ($dataContainer->table == 'tl_content') {\n            $model = \\ContentModel::findByPK($dataContainer->id);\n\n            if ($model->sc_type > 0) {\n                \\MetaPalettes::appendFields($dataContainer->table, 'colsetStart', 'colset', array('columnset_id'));\n            }\n        } else {\n            $model = \\ModuleModel::findByPk($dataContainer->id);\n\n            if ($model->sc_type > 0) {\n                if ($model->sc_type > 0) {\n                    $GLOBALS['TL_DCA']['tl_module']['palettes']['subcolumns'] = str_replace(\n                        'sc_type,',\n                        'sc_type,columnset_id,',\n                        $GLOBALS['TL_DCA']['tl_module']['palettes']['subcolumns']\n                    );\n                }\n            }\n        }\n    }", "language": "php", "code": "public function appendColumnsetIdToPalette($dataContainer)\n    {\n        if ($GLOBALS['TL_CONFIG']['subcolumns'] != 'bootstrap_customizable') {\n            return;\n        }\n\n        if ($dataContainer->table == 'tl_content') {\n            $model = \\ContentModel::findByPK($dataContainer->id);\n\n            if ($model->sc_type > 0) {\n                \\MetaPalettes::appendFields($dataContainer->table, 'colsetStart', 'colset', array('columnset_id'));\n            }\n        } else {\n            $model = \\ModuleModel::findByPk($dataContainer->id);\n\n            if ($model->sc_type > 0) {\n                if ($model->sc_type > 0) {\n                    $GLOBALS['TL_DCA']['tl_module']['palettes']['subcolumns'] = str_replace(\n                        'sc_type,',\n                        'sc_type,columnset_id,',\n                        $GLOBALS['TL_DCA']['tl_module']['palettes']['subcolumns']\n                    );\n                }\n            }\n        }\n    }", "code_tokens": ["public", "function", "appendColumnsetIdToPalette", "(", "$", "dataContainer", ")", "{", "if", "(", "$", "GLOBALS", "[", "'TL_CONFIG'", "]", "[", "'subcolumns'", "]", "!=", "'bootstrap_customizable'", ")", "{", "return", ";", "}", "if", "(", "$", "dataContainer", "->", "table", "==", "'tl_content'", ")", "{", "$", "model", "=", "\\", "ContentModel", "::", "findByPK", "(", "$", "dataContainer", "->", "id", ")", ";", "if", "(", "$", "model", "->", "sc_type", ">", "0", ")", "{", "\\", "MetaPalettes", "::", "appendFields", "(", "$", "dataContainer", "->", "table", ",", "'colsetStart'", ",", "'colset'", ",", "array", "(", "'columnset_id'", ")", ")", ";", "}", "}", "else", "{", "$", "model", "=", "\\", "ModuleModel", "::", "findByPk", "(", "$", "dataContainer", "->", "id", ")", ";", "if", "(", "$", "model", "->", "sc_type", ">", "0", ")", "{", "if", "(", "$", "model", "->", "sc_type", ">", "0", ")", "{", "$", "GLOBALS", "[", "'TL_DCA'", "]", "[", "'tl_module'", "]", "[", "'palettes'", "]", "[", "'subcolumns'", "]", "=", "str_replace", "(", "'sc_type,'", ",", "'sc_type,columnset_id,'", ",", "$", "GLOBALS", "[", "'TL_DCA'", "]", "[", "'tl_module'", "]", "[", "'palettes'", "]", "[", "'subcolumns'", "]", ")", ";", "}", "}", "}", "}"], "docstring": "Add column set field to the colsetStart content element.\n\nWe need to do it dynamically because subcolumns creates its palette dynamically.\n\n@param \\DataContainer $dataContainer The data container driver.\n\n@return void\n\n@SuppressWarnings(PHPMD.Superglobals)", "docstring_tokens": ["Add", "column", "set", "field", "to", "the", "colsetStart", "content", "element", "."], "sha": "e017332aeec861b64b5dc963156533af4a21dc71", "url": "https://github.com/contao-bootstrap/grid-editor/blob/e017332aeec861b64b5dc963156533af4a21dc71/src/DataContainer/ColumnSet.php#L33-L58", "partition": "test"}
{"repo": "VitexSoftware/EaseFramework", "path": "src/Ease/Locale.php", "func_name": "Locale.availble", "original_string": "public function availble()\n    {\n        $locales = [];\n        $d       = dir(self::$i18n);\n        while (false !== ($entry   = $d->read())) {\n            if (($entry[0] != '.') && file_exists(self::$i18n.'/'.$entry.'/LC_MESSAGES/'.self::$textDomain.'.mo')) {\n                $locales[$entry] = _(self::$alllngs[$entry]);\n            }\n        }\n        $d->close();\n        return $locales;\n    }", "language": "php", "code": "public function availble()\n    {\n        $locales = [];\n        $d       = dir(self::$i18n);\n        while (false !== ($entry   = $d->read())) {\n            if (($entry[0] != '.') && file_exists(self::$i18n.'/'.$entry.'/LC_MESSAGES/'.self::$textDomain.'.mo')) {\n                $locales[$entry] = _(self::$alllngs[$entry]);\n            }\n        }\n        $d->close();\n        return $locales;\n    }", "code_tokens": ["public", "function", "availble", "(", ")", "{", "$", "locales", "=", "[", "]", ";", "$", "d", "=", "dir", "(", "self", "::", "$", "i18n", ")", ";", "while", "(", "false", "!==", "(", "$", "entry", "=", "$", "d", "->", "read", "(", ")", ")", ")", "{", "if", "(", "(", "$", "entry", "[", "0", "]", "!=", "'.'", ")", "&&", "file_exists", "(", "self", "::", "$", "i18n", ".", "'/'", ".", "$", "entry", ".", "'/LC_MESSAGES/'", ".", "self", "::", "$", "textDomain", ".", "'.mo'", ")", ")", "{", "$", "locales", "[", "$", "entry", "]", "=", "_", "(", "self", "::", "$", "alllngs", "[", "$", "entry", "]", ")", ";", "}", "}", "$", "d", "->", "close", "(", ")", ";", "return", "$", "locales", ";", "}"], "docstring": "List of availble locales\n\n@return array locales availble", "docstring_tokens": ["List", "of", "availble", "locales"], "sha": "700693949ee6c858d40365c6d3c3825e8a742397", "url": "https://github.com/VitexSoftware/EaseFramework/blob/700693949ee6c858d40365c6d3c3825e8a742397/src/Ease/Locale.php#L572-L583", "partition": "test"}
{"repo": "bergie/dnode-php", "path": "examples/phpcr/simple/server.php", "func_name": "SimpleRemoteRepository.getNodes", "original_string": "public function getNodes($sessionName, $path, $cb)\n    {\n        if (!$this->validateSessionName($sessionName, $cb))\n            return false;\n\n        $exception = null;\n        $msg = null;\n        $names = array ();\n\n        try {\n            $parent = $this->sessions[$sessionName]->getNode($path);\n            $nodes = $parent->getNodes();\n            $names = array_keys ($nodes->getArrayCopy());\n        } catch (\\Exception $e) {\n            $exception = get_class($e);\n            $msg = $e->getMessage();\n        }\n\n        $cb($names, $exception, $msg);\n    }", "language": "php", "code": "public function getNodes($sessionName, $path, $cb)\n    {\n        if (!$this->validateSessionName($sessionName, $cb))\n            return false;\n\n        $exception = null;\n        $msg = null;\n        $names = array ();\n\n        try {\n            $parent = $this->sessions[$sessionName]->getNode($path);\n            $nodes = $parent->getNodes();\n            $names = array_keys ($nodes->getArrayCopy());\n        } catch (\\Exception $e) {\n            $exception = get_class($e);\n            $msg = $e->getMessage();\n        }\n\n        $cb($names, $exception, $msg);\n    }", "code_tokens": ["public", "function", "getNodes", "(", "$", "sessionName", ",", "$", "path", ",", "$", "cb", ")", "{", "if", "(", "!", "$", "this", "->", "validateSessionName", "(", "$", "sessionName", ",", "$", "cb", ")", ")", "return", "false", ";", "$", "exception", "=", "null", ";", "$", "msg", "=", "null", ";", "$", "names", "=", "array", "(", ")", ";", "try", "{", "$", "parent", "=", "$", "this", "->", "sessions", "[", "$", "sessionName", "]", "->", "getNode", "(", "$", "path", ")", ";", "$", "nodes", "=", "$", "parent", "->", "getNodes", "(", ")", ";", "$", "names", "=", "array_keys", "(", "$", "nodes", "->", "getArrayCopy", "(", ")", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "$", "exception", "=", "get_class", "(", "$", "e", ")", ";", "$", "msg", "=", "$", "e", "->", "getMessage", "(", ")", ";", "}", "$", "cb", "(", "$", "names", ",", "$", "exception", ",", "$", "msg", ")", ";", "}"], "docstring": "Get the names of children nodes\n\n@param $sessionName - name of the session\n@param $path - absolute path of the parent node\n@param $cb - callback function\n\n@return void", "docstring_tokens": ["Get", "the", "names", "of", "children", "nodes"], "sha": "048deef50afe95e21ef25c026bd79b2917920f3b", "url": "https://github.com/bergie/dnode-php/blob/048deef50afe95e21ef25c026bd79b2917920f3b/examples/phpcr/simple/server.php#L46-L65", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Request.php", "func_name": "Request.getUrl", "original_string": "public function getUrl() {\n        $query = $this->getQuery();\n        return\n            $this->getScheme().\n            '://'.\n            $this->getHostAndPort().\n            $this->getRoot().\n            $this->getPath().\n            (!empty($query) ? '?'.http_build_query($query) : '');\n    }", "language": "php", "code": "public function getUrl() {\n        $query = $this->getQuery();\n        return\n            $this->getScheme().\n            '://'.\n            $this->getHostAndPort().\n            $this->getRoot().\n            $this->getPath().\n            (!empty($query) ? '?'.http_build_query($query) : '');\n    }", "code_tokens": ["public", "function", "getUrl", "(", ")", "{", "$", "query", "=", "$", "this", "->", "getQuery", "(", ")", ";", "return", "$", "this", "->", "getScheme", "(", ")", ".", "'://'", ".", "$", "this", "->", "getHostAndPort", "(", ")", ".", "$", "this", "->", "getRoot", "(", ")", ".", "$", "this", "->", "getPath", "(", ")", ".", "(", "!", "empty", "(", "$", "query", ")", "?", "'?'", ".", "http_build_query", "(", "$", "query", ")", ":", "''", ")", ";", "}"], "docstring": "Get the full url of the request.\n\n@return string Returns the full url of the request.\n@see Request::setUrl()", "docstring_tokens": ["Get", "the", "full", "url", "of", "the", "request", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Request.php#L924-L933", "partition": "test"}
{"repo": "slickframework/http", "path": "src/Message/Server/Request.php", "func_name": "Request.withAttribute", "original_string": "public function withAttribute($name, $value)\n    {\n        $request = clone $this;\n        $request->attributes[$name] = $value;\n        return $request;\n    }", "language": "php", "code": "public function withAttribute($name, $value)\n    {\n        $request = clone $this;\n        $request->attributes[$name] = $value;\n        return $request;\n    }", "code_tokens": ["public", "function", "withAttribute", "(", "$", "name", ",", "$", "value", ")", "{", "$", "request", "=", "clone", "$", "this", ";", "$", "request", "->", "attributes", "[", "$", "name", "]", "=", "$", "value", ";", "return", "$", "request", ";", "}"], "docstring": "Return an instance with the specified derived request attribute.\n\nThis method allows setting a single derived request attribute as\ndescribed in getAttributes().\n\n@see getAttributes()\n@param string $name The attribute name.\n@param mixed $value The value of the attribute.\n\n@return Request", "docstring_tokens": ["Return", "an", "instance", "with", "the", "specified", "derived", "request", "attribute", "."], "sha": "9da14b618e0f75d3d565e0ce928a35d992755e75", "url": "https://github.com/slickframework/http/blob/9da14b618e0f75d3d565e0ce928a35d992755e75/src/Message/Server/Request.php#L332-L337", "partition": "test"}
{"repo": "danbelden/php-siren", "path": "src/Handler.php", "func_name": "Handler.getFieldsFromDataArray", "original_string": "protected function getFieldsFromDataArray(array $fieldsArray)\n    {\n        $fields = array();\n        foreach ($fieldsArray as $fieldArray) {\n            $field = new Field();\n\n            if (isset($fieldArray['name']) && is_string($fieldArray['name'])) {\n                $field->setName($fieldArray['name']);\n            }\n\n            if (isset($fieldArray['type']) && is_string($fieldArray['type'])) {\n                $field->setType($fieldArray['type']);\n            }\n\n            if (isset($fieldArray['value'])) {\n                $field->setValue($fieldArray['value']);\n            }\n\n            $fields[] = $field;\n        }\n\n        return $fields;\n    }", "language": "php", "code": "protected function getFieldsFromDataArray(array $fieldsArray)\n    {\n        $fields = array();\n        foreach ($fieldsArray as $fieldArray) {\n            $field = new Field();\n\n            if (isset($fieldArray['name']) && is_string($fieldArray['name'])) {\n                $field->setName($fieldArray['name']);\n            }\n\n            if (isset($fieldArray['type']) && is_string($fieldArray['type'])) {\n                $field->setType($fieldArray['type']);\n            }\n\n            if (isset($fieldArray['value'])) {\n                $field->setValue($fieldArray['value']);\n            }\n\n            $fields[] = $field;\n        }\n\n        return $fields;\n    }", "code_tokens": ["protected", "function", "getFieldsFromDataArray", "(", "array", "$", "fieldsArray", ")", "{", "$", "fields", "=", "array", "(", ")", ";", "foreach", "(", "$", "fieldsArray", "as", "$", "fieldArray", ")", "{", "$", "field", "=", "new", "Field", "(", ")", ";", "if", "(", "isset", "(", "$", "fieldArray", "[", "'name'", "]", ")", "&&", "is_string", "(", "$", "fieldArray", "[", "'name'", "]", ")", ")", "{", "$", "field", "->", "setName", "(", "$", "fieldArray", "[", "'name'", "]", ")", ";", "}", "if", "(", "isset", "(", "$", "fieldArray", "[", "'type'", "]", ")", "&&", "is_string", "(", "$", "fieldArray", "[", "'type'", "]", ")", ")", "{", "$", "field", "->", "setType", "(", "$", "fieldArray", "[", "'type'", "]", ")", ";", "}", "if", "(", "isset", "(", "$", "fieldArray", "[", "'value'", "]", ")", ")", "{", "$", "field", "->", "setValue", "(", "$", "fieldArray", "[", "'value'", "]", ")", ";", "}", "$", "fields", "[", "]", "=", "$", "field", ";", "}", "return", "$", "fields", ";", "}"], "docstring": "Helper method to convert a fields data array to an array of field objects\n\n@param array $fieldsArray\n@return Field[]", "docstring_tokens": ["Helper", "method", "to", "convert", "a", "fields", "data", "array", "to", "an", "array", "of", "field", "objects"], "sha": "284399cae4edea7191b98beed842cc33947f9ce6", "url": "https://github.com/danbelden/php-siren/blob/284399cae4edea7191b98beed842cc33947f9ce6/src/Handler.php#L152-L174", "partition": "test"}
{"repo": "simialbi/yii2-schema-org", "path": "src/models/Model.php", "func_name": "Model.toJsonLDArray", "original_string": "public function toJsonLDArray($fields = [], $expand = [], $recursive = true)\n    {\n        return array_merge([\n            '@context' => 'http://schema.org'\n        ], $this->toArray($fields, $expand, $recursive));\n    }", "language": "php", "code": "public function toJsonLDArray($fields = [], $expand = [], $recursive = true)\n    {\n        return array_merge([\n            '@context' => 'http://schema.org'\n        ], $this->toArray($fields, $expand, $recursive));\n    }", "code_tokens": ["public", "function", "toJsonLDArray", "(", "$", "fields", "=", "[", "]", ",", "$", "expand", "=", "[", "]", ",", "$", "recursive", "=", "true", ")", "{", "return", "array_merge", "(", "[", "'@context'", "=>", "'http://schema.org'", "]", ",", "$", "this", "->", "toArray", "(", "$", "fields", ",", "$", "expand", ",", "$", "recursive", ")", ")", ";", "}"], "docstring": "Converts the model into an array for usage in ld+json.\n\nThis method will first identify which fields to be included in the resulting array by calling [[resolveFields()]].\nIt will then turn the model into an array with these fields. If `$recursive` is true,\nany embedded objects will also be converted into arrays.\n\nIf the model implements the [[Linkable]] interface, the resulting array will also have a `_link` element\nwhich refers to a list of links as specified by the interface.\n\n@param array $fields the fields being requested. If empty, all fields as specified by [[fields()]] will be returned.\n@param array $expand the additional fields being requested for exporting. Only fields declared in [[extraFields()]]\nwill be considered.\n@param bool $recursive whether to recursively return array representation of embedded objects.\n\n@return array the array representation of the object", "docstring_tokens": ["Converts", "the", "model", "into", "an", "array", "for", "usage", "in", "ld", "+", "json", "."], "sha": "c9aa61e90548b01aaa647d047da76a39ca5801e1", "url": "https://github.com/simialbi/yii2-schema-org/blob/c9aa61e90548b01aaa647d047da76a39ca5801e1/src/models/Model.php#L41-L46", "partition": "test"}
{"repo": "tastyigniter/flame", "path": "src/Location/WorkingTime.php", "func_name": "WorkingTime.toDateTime", "original_string": "public function toDateTime(DateTime $date = null): DateTime\n    {\n        if (!$date) {\n            $date = new DateTime('1970-01-01 00:00:00');\n        }\n        elseif (!($date instanceof DateTimeImmutable)) {\n            $date = clone $date;\n        }\n\n        return $date->setTime($this->hours, $this->minutes);\n    }", "language": "php", "code": "public function toDateTime(DateTime $date = null): DateTime\n    {\n        if (!$date) {\n            $date = new DateTime('1970-01-01 00:00:00');\n        }\n        elseif (!($date instanceof DateTimeImmutable)) {\n            $date = clone $date;\n        }\n\n        return $date->setTime($this->hours, $this->minutes);\n    }", "code_tokens": ["public", "function", "toDateTime", "(", "DateTime", "$", "date", "=", "null", ")", ":", "DateTime", "{", "if", "(", "!", "$", "date", ")", "{", "$", "date", "=", "new", "DateTime", "(", "'1970-01-01 00:00:00'", ")", ";", "}", "elseif", "(", "!", "(", "$", "date", "instanceof", "DateTimeImmutable", ")", ")", "{", "$", "date", "=", "clone", "$", "date", ";", "}", "return", "$", "date", "->", "setTime", "(", "$", "this", "->", "hours", ",", "$", "this", "->", "minutes", ")", ";", "}"], "docstring": "Convert to DateTime object.\n\n@param \\DateTime|null $date\n@return \\DateTime", "docstring_tokens": ["Convert", "to", "DateTime", "object", "."], "sha": "3c922ba1c02b3c14ad4adf91c2f37498045fa92a", "url": "https://github.com/tastyigniter/flame/blob/3c922ba1c02b3c14ad4adf91c2f37498045fa92a/src/Location/WorkingTime.php#L90-L100", "partition": "test"}
{"repo": "fabulator/endomondo-workouts", "path": "lib/Fabulator/Endomondo/WorkoutType.php", "func_name": "WorkoutType.getName", "original_string": "static function getName($id)\n    {\n        try {\n            return self::TYPES_NAMES[$id];\n        } catch (\\Exception $e) {\n            throw new EndomondoWorkoutException('Unknown workout type', $e->getCode(), $e->getPrevious());\n        }\n    }", "language": "php", "code": "static function getName($id)\n    {\n        try {\n            return self::TYPES_NAMES[$id];\n        } catch (\\Exception $e) {\n            throw new EndomondoWorkoutException('Unknown workout type', $e->getCode(), $e->getPrevious());\n        }\n    }", "code_tokens": ["static", "function", "getName", "(", "$", "id", ")", "{", "try", "{", "return", "self", "::", "TYPES_NAMES", "[", "$", "id", "]", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "throw", "new", "EndomondoWorkoutException", "(", "'Unknown workout type'", ",", "$", "e", "->", "getCode", "(", ")", ",", "$", "e", "->", "getPrevious", "(", ")", ")", ";", "}", "}"], "docstring": "Get name of workot in human readable time.\n\n@param $id int Workout type id\n@return string Name of workout\n@throws EndomondoWorkoutException when workout type is not defined", "docstring_tokens": ["Get", "name", "of", "workot", "in", "human", "readable", "time", "."], "sha": "eb54d8e9f2a88644e6df234489a40e80315cdfa8", "url": "https://github.com/fabulator/endomondo-workouts/blob/eb54d8e9f2a88644e6df234489a40e80315cdfa8/lib/Fabulator/Endomondo/WorkoutType.php#L185-L192", "partition": "test"}
{"repo": "FACT-Finder/FACT-Finder-PHP-Library", "path": "src/log4php/LoggerAppenderPool.php", "func_name": "LoggerAppenderPool.get", "original_string": "public static function get($name) {\n\t\treturn isset(self::$appenders[$name]) ? self::$appenders[$name] : null;\n\t}", "language": "php", "code": "public static function get($name) {\n\t\treturn isset(self::$appenders[$name]) ? self::$appenders[$name] : null;\n\t}", "code_tokens": ["public", "static", "function", "get", "(", "$", "name", ")", "{", "return", "isset", "(", "self", "::", "$", "appenders", "[", "$", "name", "]", ")", "?", "self", "::", "$", "appenders", "[", "$", "name", "]", ":", "null", ";", "}"], "docstring": "Retrieves an appender from the pool by name.\n@param string $name Name of the appender to retrieve.\n@return LoggerAppender The named appender or NULL if no such appender\nexists in the pool.", "docstring_tokens": ["Retrieves", "an", "appender", "from", "the", "pool", "by", "name", "."], "sha": "5c795b94117fa7ac40f5e80d4edc93999a76fc90", "url": "https://github.com/FACT-Finder/FACT-Finder-PHP-Library/blob/5c795b94117fa7ac40f5e80d4edc93999a76fc90/src/log4php/LoggerAppenderPool.php#L63-L65", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/ThirdParty/ZendEscaper/Escaper.php", "func_name": "Escaper.fromUtf8", "original_string": "protected function fromUtf8($string)\n    {\n        if ($this->getEncoding() === 'utf-8') {\n            return $string;\n        }\n\n        return $this->convertEncoding($string, $this->getEncoding(), 'UTF-8');\n    }", "language": "php", "code": "protected function fromUtf8($string)\n    {\n        if ($this->getEncoding() === 'utf-8') {\n            return $string;\n        }\n\n        return $this->convertEncoding($string, $this->getEncoding(), 'UTF-8');\n    }", "code_tokens": ["protected", "function", "fromUtf8", "(", "$", "string", ")", "{", "if", "(", "$", "this", "->", "getEncoding", "(", ")", "===", "'utf-8'", ")", "{", "return", "$", "string", ";", "}", "return", "$", "this", "->", "convertEncoding", "(", "$", "string", ",", "$", "this", "->", "getEncoding", "(", ")", ",", "'UTF-8'", ")", ";", "}"], "docstring": "Converts a string from UTF-8 to the base encoding. The base encoding is set via this\nclass' constructor.\n@param string $string\n@return string", "docstring_tokens": ["Converts", "a", "string", "from", "UTF", "-", "8", "to", "the", "base", "encoding", ".", "The", "base", "encoding", "is", "set", "via", "this", "class", "constructor", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/ThirdParty/ZendEscaper/Escaper.php#L343-L350", "partition": "test"}
{"repo": "mremi/UrlShortener", "path": "src/Mremi/UrlShortener/Provider/Wechat/WechatProvider.php", "func_name": "WechatProvider.validate", "original_string": "private function validate($apiRawResponse)\n    {\n        $response = json_decode($apiRawResponse);\n\n        if (null === $response) {\n            throw new InvalidApiResponseException('Wechat response is probably mal-formed because cannot be json-decoded.');\n        }\n\n        if (!property_exists($response, 'errcode')) {\n            throw new InvalidApiResponseException('Property \"errcode\" does not exist within Wechat response.');\n        }\n\n        if (0 !== $response->errcode) {\n            throw new InvalidApiResponseException(sprintf('Wechat returned status code \"%s\" with message \"%s\"',\n                $response->errcode,\n                property_exists($response, 'errmsg') ? $response->errmsg : ''\n            ));\n        }\n\n        return $response;\n    }", "language": "php", "code": "private function validate($apiRawResponse)\n    {\n        $response = json_decode($apiRawResponse);\n\n        if (null === $response) {\n            throw new InvalidApiResponseException('Wechat response is probably mal-formed because cannot be json-decoded.');\n        }\n\n        if (!property_exists($response, 'errcode')) {\n            throw new InvalidApiResponseException('Property \"errcode\" does not exist within Wechat response.');\n        }\n\n        if (0 !== $response->errcode) {\n            throw new InvalidApiResponseException(sprintf('Wechat returned status code \"%s\" with message \"%s\"',\n                $response->errcode,\n                property_exists($response, 'errmsg') ? $response->errmsg : ''\n            ));\n        }\n\n        return $response;\n    }", "code_tokens": ["private", "function", "validate", "(", "$", "apiRawResponse", ")", "{", "$", "response", "=", "json_decode", "(", "$", "apiRawResponse", ")", ";", "if", "(", "null", "===", "$", "response", ")", "{", "throw", "new", "InvalidApiResponseException", "(", "'Wechat response is probably mal-formed because cannot be json-decoded.'", ")", ";", "}", "if", "(", "!", "property_exists", "(", "$", "response", ",", "'errcode'", ")", ")", "{", "throw", "new", "InvalidApiResponseException", "(", "'Property \"errcode\" does not exist within Wechat response.'", ")", ";", "}", "if", "(", "0", "!==", "$", "response", "->", "errcode", ")", "{", "throw", "new", "InvalidApiResponseException", "(", "sprintf", "(", "'Wechat returned status code \"%s\" with message \"%s\"'", ",", "$", "response", "->", "errcode", ",", "property_exists", "(", "$", "response", ",", "'errmsg'", ")", "?", "$", "response", "->", "errmsg", ":", "''", ")", ")", ";", "}", "return", "$", "response", ";", "}"], "docstring": "Validates the Wechat's response and returns it whether the status code is 200.\n\n@param string $apiRawResponse\n\n@return object\n\n@throws InvalidApiResponseException", "docstring_tokens": ["Validates", "the", "Wechat", "s", "response", "and", "returns", "it", "whether", "the", "status", "code", "is", "200", "."], "sha": "d814c07e27dedd359b865b27e8d01ed0f25b4a40", "url": "https://github.com/mremi/UrlShortener/blob/d814c07e27dedd359b865b27e8d01ed0f25b4a40/src/Mremi/UrlShortener/Provider/Wechat/WechatProvider.php#L122-L142", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/Command.php", "func_name": "Command.fetchResultsRow", "original_string": "public function fetchResultsRow($row = [], $fetchMethod = self::FETCH_ALL, $fetchMode = self::FETCH_MODE_ASSOC, $colIndex = 0) {\n        if (in_array($fetchMethod, [static::FETCH_ALL, static::FETCH_ROW])) {\n            $this->processResultRow($row);\n            return $fetchMode === static::FETCH_MODE_OBJECT ? (object)$row : $row;\n        } elseif (in_array($fetchMethod, [static::FETCH_COLUMN, static::FETCH_FIELD]) && $colIndex < count($row)) {\n            $rowIndexed = array_values($row);\n            $this->processResultRow($rowIndexed[$colIndex]);\n            return $rowIndexed[$colIndex];\n        }\n        return null;\n    }", "language": "php", "code": "public function fetchResultsRow($row = [], $fetchMethod = self::FETCH_ALL, $fetchMode = self::FETCH_MODE_ASSOC, $colIndex = 0) {\n        if (in_array($fetchMethod, [static::FETCH_ALL, static::FETCH_ROW])) {\n            $this->processResultRow($row);\n            return $fetchMode === static::FETCH_MODE_OBJECT ? (object)$row : $row;\n        } elseif (in_array($fetchMethod, [static::FETCH_COLUMN, static::FETCH_FIELD]) && $colIndex < count($row)) {\n            $rowIndexed = array_values($row);\n            $this->processResultRow($rowIndexed[$colIndex]);\n            return $rowIndexed[$colIndex];\n        }\n        return null;\n    }", "code_tokens": ["public", "function", "fetchResultsRow", "(", "$", "row", "=", "[", "]", ",", "$", "fetchMethod", "=", "self", "::", "FETCH_ALL", ",", "$", "fetchMode", "=", "self", "::", "FETCH_MODE_ASSOC", ",", "$", "colIndex", "=", "0", ")", "{", "if", "(", "in_array", "(", "$", "fetchMethod", ",", "[", "static", "::", "FETCH_ALL", ",", "static", "::", "FETCH_ROW", "]", ")", ")", "{", "$", "this", "->", "processResultRow", "(", "$", "row", ")", ";", "return", "$", "fetchMode", "===", "static", "::", "FETCH_MODE_OBJECT", "?", "(", "object", ")", "$", "row", ":", "$", "row", ";", "}", "elseif", "(", "in_array", "(", "$", "fetchMethod", ",", "[", "static", "::", "FETCH_COLUMN", ",", "static", "::", "FETCH_FIELD", "]", ")", "&&", "$", "colIndex", "<", "count", "(", "$", "row", ")", ")", "{", "$", "rowIndexed", "=", "array_values", "(", "$", "row", ")", ";", "$", "this", "->", "processResultRow", "(", "$", "rowIndexed", "[", "$", "colIndex", "]", ")", ";", "return", "$", "rowIndexed", "[", "$", "colIndex", "]", ";", "}", "return", "null", ";", "}"], "docstring": "Fetch results row\n@param array  $row\n@param string $fetchMethod\n@param string $fetchMode\n@param int    $colIndex\n@return array|null|object\n@internal", "docstring_tokens": ["Fetch", "results", "row"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/Command.php#L278-L288", "partition": "test"}
{"repo": "FACT-Finder/FACT-Finder-PHP-Library", "path": "src/log4php/LoggerLevel.php", "func_name": "LoggerLevel.getLevelError", "original_string": "public static function getLevelError() {\r\n\t\tif(!isset(self::$levelMap[LoggerLevel::ERROR])) {\r\n\t\t\tself::$levelMap[LoggerLevel::ERROR] = new LoggerLevel(LoggerLevel::ERROR, 'ERROR', LOG_ERR);\r\n\t\t}\r\n\t\treturn self::$levelMap[LoggerLevel::ERROR];\r\n\t}", "language": "php", "code": "public static function getLevelError() {\r\n\t\tif(!isset(self::$levelMap[LoggerLevel::ERROR])) {\r\n\t\t\tself::$levelMap[LoggerLevel::ERROR] = new LoggerLevel(LoggerLevel::ERROR, 'ERROR', LOG_ERR);\r\n\t\t}\r\n\t\treturn self::$levelMap[LoggerLevel::ERROR];\r\n\t}", "code_tokens": ["public", "static", "function", "getLevelError", "(", ")", "{", "if", "(", "!", "isset", "(", "self", "::", "$", "levelMap", "[", "LoggerLevel", "::", "ERROR", "]", ")", ")", "{", "self", "::", "$", "levelMap", "[", "LoggerLevel", "::", "ERROR", "]", "=", "new", "LoggerLevel", "(", "LoggerLevel", "::", "ERROR", ",", "'ERROR'", ",", "LOG_ERR", ")", ";", "}", "return", "self", "::", "$", "levelMap", "[", "LoggerLevel", "::", "ERROR", "]", ";", "}"], "docstring": "Returns an Error Level\n@return LoggerLevel", "docstring_tokens": ["Returns", "an", "Error", "Level"], "sha": "5c795b94117fa7ac40f5e80d4edc93999a76fc90", "url": "https://github.com/FACT-Finder/FACT-Finder-PHP-Library/blob/5c795b94117fa7ac40f5e80d4edc93999a76fc90/src/log4php/LoggerLevel.php#L115-L120", "partition": "test"}
{"repo": "waynestate/parse-menu", "path": "src/ParseMenu.php", "func_name": "ParseMenu.hasSubMenu", "original_string": "protected function hasSubMenu($menu_item_id)\n    {\n        // Submenu always available with a path > 1\n        if (count($this->meta['path']) > 1)\n            return true;\n\n        // Decide if the first level menu has any visible submenu items\n        foreach ($this->menu as $item) {\n            // Find the desired menu item in the first level\n            if ($item['menu_item_id'] == $menu_item_id) {\n                // Loop through each submenu item\n                foreach ($item['submenu'] as $sub_item) {\n                    // If there is at least one active item\n                    if ($sub_item['is_active'] == true) {\n                        // There is a submenu to display\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }", "language": "php", "code": "protected function hasSubMenu($menu_item_id)\n    {\n        // Submenu always available with a path > 1\n        if (count($this->meta['path']) > 1)\n            return true;\n\n        // Decide if the first level menu has any visible submenu items\n        foreach ($this->menu as $item) {\n            // Find the desired menu item in the first level\n            if ($item['menu_item_id'] == $menu_item_id) {\n                // Loop through each submenu item\n                foreach ($item['submenu'] as $sub_item) {\n                    // If there is at least one active item\n                    if ($sub_item['is_active'] == true) {\n                        // There is a submenu to display\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }", "code_tokens": ["protected", "function", "hasSubMenu", "(", "$", "menu_item_id", ")", "{", "// Submenu always available with a path > 1", "if", "(", "count", "(", "$", "this", "->", "meta", "[", "'path'", "]", ")", ">", "1", ")", "return", "true", ";", "// Decide if the first level menu has any visible submenu items", "foreach", "(", "$", "this", "->", "menu", "as", "$", "item", ")", "{", "// Find the desired menu item in the first level", "if", "(", "$", "item", "[", "'menu_item_id'", "]", "==", "$", "menu_item_id", ")", "{", "// Loop through each submenu item", "foreach", "(", "$", "item", "[", "'submenu'", "]", "as", "$", "sub_item", ")", "{", "// If there is at least one active item", "if", "(", "$", "sub_item", "[", "'is_active'", "]", "==", "true", ")", "{", "// There is a submenu to display", "return", "true", ";", "}", "}", "}", "}", "return", "false", ";", "}"], "docstring": "Determine if the top level of a selected path has a submenu to display\n\n@param $menu_item_id\n@return bool", "docstring_tokens": ["Determine", "if", "the", "top", "level", "of", "a", "selected", "path", "has", "a", "submenu", "to", "display"], "sha": "0cda645506008dbdaaf85b0b56ccd46c867decde", "url": "https://github.com/waynestate/parse-menu/blob/0cda645506008dbdaaf85b0b56ccd46c867decde/src/ParseMenu.php#L281-L303", "partition": "test"}
{"repo": "yawik/organizations", "path": "src/Repository/Filter/PaginationQuery.php", "func_name": "PaginationQuery.createQuery", "original_string": "public function createQuery($params, $queryBuilder)\n    {\n        if ($params instanceof Parameters) {\n            $value = $params->toArray();\n        } else {\n            $value = $params;\n        }\n\n        /*\n         * if user is recruiter or admin\n         * filter query based on permissions.view\n         */\n        $auth = $this->authService;\n        $user = $auth->getUser();\n        $ignored = [null,'guest',UserInterface::ROLE_USER];\n        if (!in_array($user->getRole(), $ignored)) {\n            $queryBuilder->field('permissions.view')->equals($user->getId());\n        }\n\n        if (isset($params['q']) && $params['q'] && $params['q'] != 'en/organizations/profile') {\n            $queryBuilder->text($params['q'])->language('none');\n        }\n\n        if (!isset($value['sort'])) {\n            $value['sort'] = '-date';\n        }\n\n        $queryBuilder->sort($this->filterSort($value['sort']));\n\n        if (isset($params['type']) && $params['type'] === 'profile') {\n            //@TODO: we should use aggregate query here\n            $queryBuilder->field('profileSetting')\n                ->in([Organization::PROFILE_ALWAYS_ENABLE,Organization::PROFILE_ACTIVE_JOBS])\n            ;\n\n            $filters = $this->getOrganizationProfileFilters($queryBuilder);\n            if (count($filters) > 0) {\n                $queryBuilder->field('id')->notIn($filters);\n            }\n        }\n\n        return $queryBuilder;\n    }", "language": "php", "code": "public function createQuery($params, $queryBuilder)\n    {\n        if ($params instanceof Parameters) {\n            $value = $params->toArray();\n        } else {\n            $value = $params;\n        }\n\n        /*\n         * if user is recruiter or admin\n         * filter query based on permissions.view\n         */\n        $auth = $this->authService;\n        $user = $auth->getUser();\n        $ignored = [null,'guest',UserInterface::ROLE_USER];\n        if (!in_array($user->getRole(), $ignored)) {\n            $queryBuilder->field('permissions.view')->equals($user->getId());\n        }\n\n        if (isset($params['q']) && $params['q'] && $params['q'] != 'en/organizations/profile') {\n            $queryBuilder->text($params['q'])->language('none');\n        }\n\n        if (!isset($value['sort'])) {\n            $value['sort'] = '-date';\n        }\n\n        $queryBuilder->sort($this->filterSort($value['sort']));\n\n        if (isset($params['type']) && $params['type'] === 'profile') {\n            //@TODO: we should use aggregate query here\n            $queryBuilder->field('profileSetting')\n                ->in([Organization::PROFILE_ALWAYS_ENABLE,Organization::PROFILE_ACTIVE_JOBS])\n            ;\n\n            $filters = $this->getOrganizationProfileFilters($queryBuilder);\n            if (count($filters) > 0) {\n                $queryBuilder->field('id')->notIn($filters);\n            }\n        }\n\n        return $queryBuilder;\n    }", "code_tokens": ["public", "function", "createQuery", "(", "$", "params", ",", "$", "queryBuilder", ")", "{", "if", "(", "$", "params", "instanceof", "Parameters", ")", "{", "$", "value", "=", "$", "params", "->", "toArray", "(", ")", ";", "}", "else", "{", "$", "value", "=", "$", "params", ";", "}", "/*\n         * if user is recruiter or admin\n         * filter query based on permissions.view\n         */", "$", "auth", "=", "$", "this", "->", "authService", ";", "$", "user", "=", "$", "auth", "->", "getUser", "(", ")", ";", "$", "ignored", "=", "[", "null", ",", "'guest'", ",", "UserInterface", "::", "ROLE_USER", "]", ";", "if", "(", "!", "in_array", "(", "$", "user", "->", "getRole", "(", ")", ",", "$", "ignored", ")", ")", "{", "$", "queryBuilder", "->", "field", "(", "'permissions.view'", ")", "->", "equals", "(", "$", "user", "->", "getId", "(", ")", ")", ";", "}", "if", "(", "isset", "(", "$", "params", "[", "'q'", "]", ")", "&&", "$", "params", "[", "'q'", "]", "&&", "$", "params", "[", "'q'", "]", "!=", "'en/organizations/profile'", ")", "{", "$", "queryBuilder", "->", "text", "(", "$", "params", "[", "'q'", "]", ")", "->", "language", "(", "'none'", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "value", "[", "'sort'", "]", ")", ")", "{", "$", "value", "[", "'sort'", "]", "=", "'-date'", ";", "}", "$", "queryBuilder", "->", "sort", "(", "$", "this", "->", "filterSort", "(", "$", "value", "[", "'sort'", "]", ")", ")", ";", "if", "(", "isset", "(", "$", "params", "[", "'type'", "]", ")", "&&", "$", "params", "[", "'type'", "]", "===", "'profile'", ")", "{", "//@TODO: we should use aggregate query here", "$", "queryBuilder", "->", "field", "(", "'profileSetting'", ")", "->", "in", "(", "[", "Organization", "::", "PROFILE_ALWAYS_ENABLE", ",", "Organization", "::", "PROFILE_ACTIVE_JOBS", "]", ")", ";", "$", "filters", "=", "$", "this", "->", "getOrganizationProfileFilters", "(", "$", "queryBuilder", ")", ";", "if", "(", "count", "(", "$", "filters", ")", ">", "0", ")", "{", "$", "queryBuilder", "->", "field", "(", "'id'", ")", "->", "notIn", "(", "$", "filters", ")", ";", "}", "}", "return", "$", "queryBuilder", ";", "}"], "docstring": "Creates a query for filtering organizations\n\n@see \\Core\\Repository\\Filter\\AbstractPaginationQuery::createQuery()\n@param $params\n@param \\Doctrine\\ODM\\MongoDB\\Query\\Builder $queryBuilder\n@return mixed", "docstring_tokens": ["Creates", "a", "query", "for", "filtering", "organizations"], "sha": "a5d982212be5f445c067656aeb0aa3ca7daf0251", "url": "https://github.com/yawik/organizations/blob/a5d982212be5f445c067656aeb0aa3ca7daf0251/src/Repository/Filter/PaginationQuery.php#L79-L121", "partition": "test"}
{"repo": "quantaphp/printable", "path": "src/Printable.php", "func_name": "Printable.withArrayLimit", "original_string": "public function withArrayLimit(int $arrlim): Printable\n    {\n        return new Printable($this->value, $this->callable, $this->strlim, $arrlim);\n    }", "language": "php", "code": "public function withArrayLimit(int $arrlim): Printable\n    {\n        return new Printable($this->value, $this->callable, $this->strlim, $arrlim);\n    }", "code_tokens": ["public", "function", "withArrayLimit", "(", "int", "$", "arrlim", ")", ":", "Printable", "{", "return", "new", "Printable", "(", "$", "this", "->", "value", ",", "$", "this", "->", "callable", ",", "$", "this", "->", "strlim", ",", "$", "arrlim", ")", ";", "}"], "docstring": "Return a new Printable with the given array limit.\n\n@param int $arrlim\n@return \\Quanta\\Printable", "docstring_tokens": ["Return", "a", "new", "Printable", "with", "the", "given", "array", "limit", "."], "sha": "4799d0c475468d90aa724b8ece057cc7ee0ff326", "url": "https://github.com/quantaphp/printable/blob/4799d0c475468d90aa724b8ece057cc7ee0ff326/src/Printable.php#L68-L71", "partition": "test"}
{"repo": "VitexSoftware/EaseFramework", "path": "src/Ease/TWB/Tabs.php", "func_name": "Tabs.&", "original_string": "public function &addAjaxTab($tabName, $tabUrl, $active = false)\n    {\n        $this->tabs[$tabName] = ['ajax' => $tabUrl];\n        if ($active) {\n            $this->activeTab = $tabName;\n        }\n        \\Ease\\Shared::webPage()->addJavaScript('\n$(\\'#'.$this->getTagID().' a\\').click(function (e) {\n\te.preventDefault();\n\n\tvar url = $(this).attr(\"data-url\");\n  \tvar href = this.hash;\n  \tvar pane = $(this);\n\n\t// ajax load from data-url\n\t$(href).load(url,function(result){\n\t    pane.tab(\\'show\\');\n\t});\n});\n            \n');\n        return $this->tabs[$tabName];\n    }", "language": "php", "code": "public function &addAjaxTab($tabName, $tabUrl, $active = false)\n    {\n        $this->tabs[$tabName] = ['ajax' => $tabUrl];\n        if ($active) {\n            $this->activeTab = $tabName;\n        }\n        \\Ease\\Shared::webPage()->addJavaScript('\n$(\\'#'.$this->getTagID().' a\\').click(function (e) {\n\te.preventDefault();\n\n\tvar url = $(this).attr(\"data-url\");\n  \tvar href = this.hash;\n  \tvar pane = $(this);\n\n\t// ajax load from data-url\n\t$(href).load(url,function(result){\n\t    pane.tab(\\'show\\');\n\t});\n});\n            \n');\n        return $this->tabs[$tabName];\n    }", "code_tokens": ["public", "function", "&", "addAjaxTab", "(", "$", "tabName", ",", "$", "tabUrl", ",", "$", "active", "=", "false", ")", "{", "$", "this", "->", "tabs", "[", "$", "tabName", "]", "=", "[", "'ajax'", "=>", "$", "tabUrl", "]", ";", "if", "(", "$", "active", ")", "{", "$", "this", "->", "activeTab", "=", "$", "tabName", ";", "}", "\\", "Ease", "\\", "Shared", "::", "webPage", "(", ")", "->", "addJavaScript", "(", "'\n$(\\'#'", ".", "$", "this", "->", "getTagID", "(", ")", ".", "' a\\').click(function (e) {\n\te.preventDefault();\n\n\tvar url = $(this).attr(\"data-url\");\n  \tvar href = this.hash;\n  \tvar pane = $(this);\n\n\t// ajax load from data-url\n\t$(href).load(url,function(result){\n\t    pane.tab(\\'show\\');\n\t});\n});\n            \n'", ")", ";", "return", "$", "this", "->", "tabs", "[", "$", "tabName", "]", ";", "}"], "docstring": "Create new Dynamic Tab\n\n@param string $tabName    jm\u00e9no a titulek tabu\n@param string $tabUrl     where to obtain tab content\n@param bool   $active     M\u00e1 b\u00fdt tento tab aktivn\u00ed ?\n\n@return \\Ease\\Html\\DivTag odkaz na vlo\u017een\u00fd obsah", "docstring_tokens": ["Create", "new", "Dynamic", "Tab"], "sha": "700693949ee6c858d40365c6d3c3825e8a742397", "url": "https://github.com/VitexSoftware/EaseFramework/blob/700693949ee6c858d40365c6d3c3825e8a742397/src/Ease/TWB/Tabs.php#L86-L108", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Http/NativeResponse.php", "func_name": "NativeResponse.setHeaders", "original_string": "public function setHeaders(array $headers = []): Response\n    {\n        // If the headers have no been set yet\n        if (null === $this->headers) {\n            // Set them to a new Headers collection\n            $this->headers = new Headers();\n        }\n\n        // Set all the headers with the array provided\n        $this->headers->setAll($headers);\n\n        // If there is no cache control header\n        if (! $this->headers->has('Cache-Control')) {\n            // Set it to an empty string\n            $this->headers->set('Cache-Control', '');\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function setHeaders(array $headers = []): Response\n    {\n        // If the headers have no been set yet\n        if (null === $this->headers) {\n            // Set them to a new Headers collection\n            $this->headers = new Headers();\n        }\n\n        // Set all the headers with the array provided\n        $this->headers->setAll($headers);\n\n        // If there is no cache control header\n        if (! $this->headers->has('Cache-Control')) {\n            // Set it to an empty string\n            $this->headers->set('Cache-Control', '');\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setHeaders", "(", "array", "$", "headers", "=", "[", "]", ")", ":", "Response", "{", "// If the headers have no been set yet", "if", "(", "null", "===", "$", "this", "->", "headers", ")", "{", "// Set them to a new Headers collection", "$", "this", "->", "headers", "=", "new", "Headers", "(", ")", ";", "}", "// Set all the headers with the array provided", "$", "this", "->", "headers", "->", "setAll", "(", "$", "headers", ")", ";", "// If there is no cache control header", "if", "(", "!", "$", "this", "->", "headers", "->", "has", "(", "'Cache-Control'", ")", ")", "{", "// Set it to an empty string", "$", "this", "->", "headers", "->", "set", "(", "'Cache-Control'", ",", "''", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Set response headers.\n\n@param array $headers [optional] The headers to set\n\n@return \\Valkyrja\\Http\\Response", "docstring_tokens": ["Set", "response", "headers", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Http/NativeResponse.php#L394-L412", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/Helper/SingleEventData.php", "func_name": "SingleEventData.getNextOccasionDate", "original_string": "public static function getNextOccasionDate($occasions, $dateFormat = 'YmdHis')\n    {\n        if (!is_array($occasions) || empty($occasions)) {\n            return false;\n        }\n\n        $startDates = array();\n        foreach ($occasions as $occasion) {\n            //Skip if event has ended\n            if (time() > strtotime($occasion->end_date) || !isset($occasion->start_date) || !isset($occasion->end_date)) {\n                continue;\n            }\n\n            $startDates[] = strtotime($occasion->start_date);\n        }\n\n        return date($dateFormat, self::getClosest(time(), $startDates));\n    }", "language": "php", "code": "public static function getNextOccasionDate($occasions, $dateFormat = 'YmdHis')\n    {\n        if (!is_array($occasions) || empty($occasions)) {\n            return false;\n        }\n\n        $startDates = array();\n        foreach ($occasions as $occasion) {\n            //Skip if event has ended\n            if (time() > strtotime($occasion->end_date) || !isset($occasion->start_date) || !isset($occasion->end_date)) {\n                continue;\n            }\n\n            $startDates[] = strtotime($occasion->start_date);\n        }\n\n        return date($dateFormat, self::getClosest(time(), $startDates));\n    }", "code_tokens": ["public", "static", "function", "getNextOccasionDate", "(", "$", "occasions", ",", "$", "dateFormat", "=", "'YmdHis'", ")", "{", "if", "(", "!", "is_array", "(", "$", "occasions", ")", "||", "empty", "(", "$", "occasions", ")", ")", "{", "return", "false", ";", "}", "$", "startDates", "=", "array", "(", ")", ";", "foreach", "(", "$", "occasions", "as", "$", "occasion", ")", "{", "//Skip if event has ended", "if", "(", "time", "(", ")", ">", "strtotime", "(", "$", "occasion", "->", "end_date", ")", "||", "!", "isset", "(", "$", "occasion", "->", "start_date", ")", "||", "!", "isset", "(", "$", "occasion", "->", "end_date", ")", ")", "{", "continue", ";", "}", "$", "startDates", "[", "]", "=", "strtotime", "(", "$", "occasion", "->", "start_date", ")", ";", "}", "return", "date", "(", "$", "dateFormat", ",", "self", "::", "getClosest", "(", "time", "(", ")", ",", "$", "startDates", ")", ")", ";", "}"], "docstring": "Get next event occasion date in time\n@param  array  $occasions  All occasions of an event\n@param  string $dateFormat event start date\n@return string/boolean", "docstring_tokens": ["Get", "next", "event", "occasion", "date", "in", "time"], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/Helper/SingleEventData.php#L49-L66", "partition": "test"}
{"repo": "marcelog/Ding", "path": "src/mg/Ding/Helpers/Pami/PamiHelper.php", "func_name": "PamiHelper.open", "original_string": "public function open()\n    {\n        if (!$this->_init) {\n            $this->_load();\n        }\n\t    $this->_ami->registerEventListener($this);\n\t    $this->_ami->open();\n    }", "language": "php", "code": "public function open()\n    {\n        if (!$this->_init) {\n            $this->_load();\n        }\n\t    $this->_ami->registerEventListener($this);\n\t    $this->_ami->open();\n    }", "code_tokens": ["public", "function", "open", "(", ")", "{", "if", "(", "!", "$", "this", "->", "_init", ")", "{", "$", "this", "->", "_load", "(", ")", ";", "}", "$", "this", "->", "_ami", "->", "registerEventListener", "(", "$", "this", ")", ";", "$", "this", "->", "_ami", "->", "open", "(", ")", ";", "}"], "docstring": "Opens the connection to ami. Also calls _load if it has to.\n\n@return void", "docstring_tokens": ["Opens", "the", "connection", "to", "ami", ".", "Also", "calls", "_load", "if", "it", "has", "to", "."], "sha": "aad50c28e99509f22c9cb1ba54acbeced3b30c50", "url": "https://github.com/marcelog/Ding/blob/aad50c28e99509f22c9cb1ba54acbeced3b30c50/src/mg/Ding/Helpers/Pami/PamiHelper.php#L224-L231", "partition": "test"}
{"repo": "orchestral/extension", "path": "src/Dispatcher.php", "func_name": "Dispatcher.getAutoloadFiles", "original_string": "protected function getAutoloadFiles(Collection $autoload): Collection\n    {\n        return $autoload->map(function ($path) {\n            return Str::contains($path, '::') ? $path : 'source-path::'.\\ltrim($path, '/');\n        })->merge(['source-path::src/orchestra.php', 'source-path::orchestra.php']);\n    }", "language": "php", "code": "protected function getAutoloadFiles(Collection $autoload): Collection\n    {\n        return $autoload->map(function ($path) {\n            return Str::contains($path, '::') ? $path : 'source-path::'.\\ltrim($path, '/');\n        })->merge(['source-path::src/orchestra.php', 'source-path::orchestra.php']);\n    }", "code_tokens": ["protected", "function", "getAutoloadFiles", "(", "Collection", "$", "autoload", ")", ":", "Collection", "{", "return", "$", "autoload", "->", "map", "(", "function", "(", "$", "path", ")", "{", "return", "Str", "::", "contains", "(", "$", "path", ",", "'::'", ")", "?", "$", "path", ":", "'source-path::'", ".", "\\", "ltrim", "(", "$", "path", ",", "'/'", ")", ";", "}", ")", "->", "merge", "(", "[", "'source-path::src/orchestra.php'", ",", "'source-path::orchestra.php'", "]", ")", ";", "}"], "docstring": "Get list of available paths for the extension.\n\n@param  array  $autoload\n\n@return \\Illuminate\\Support\\Collection", "docstring_tokens": ["Get", "list", "of", "available", "paths", "for", "the", "extension", "."], "sha": "d461c988ba6ec0200fc8f4e35b515e6710d3ef0a", "url": "https://github.com/orchestral/extension/blob/d461c988ba6ec0200fc8f4e35b515e6710d3ef0a/src/Dispatcher.php#L271-L276", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Services/Directions/Directions.php", "func_name": "Directions.buildDirectionsStep", "original_string": "protected function buildDirectionsStep(\\stdClass $directionsStep)\n    {\n        $distance = new Distance($directionsStep->distance->text, $directionsStep->distance->value);\n        $duration = new Duration($directionsStep->duration->text, $directionsStep->duration->value);\n        $endLocation = new Coordinate($directionsStep->end_location->lat, $directionsStep->end_location->lng);\n        $instructions = $directionsStep->html_instructions;\n        $encodedPolyline = new EncodedPolyline($directionsStep->polyline->points);\n        $startLocation = new Coordinate($directionsStep->start_location->lat, $directionsStep->start_location->lng);\n        $travelMode = $directionsStep->travel_mode;\n\n        return new DirectionsStep(\n            $distance,\n            $duration,\n            $endLocation,\n            $instructions,\n            $encodedPolyline,\n            $startLocation,\n            $travelMode\n        );\n    }", "language": "php", "code": "protected function buildDirectionsStep(\\stdClass $directionsStep)\n    {\n        $distance = new Distance($directionsStep->distance->text, $directionsStep->distance->value);\n        $duration = new Duration($directionsStep->duration->text, $directionsStep->duration->value);\n        $endLocation = new Coordinate($directionsStep->end_location->lat, $directionsStep->end_location->lng);\n        $instructions = $directionsStep->html_instructions;\n        $encodedPolyline = new EncodedPolyline($directionsStep->polyline->points);\n        $startLocation = new Coordinate($directionsStep->start_location->lat, $directionsStep->start_location->lng);\n        $travelMode = $directionsStep->travel_mode;\n\n        return new DirectionsStep(\n            $distance,\n            $duration,\n            $endLocation,\n            $instructions,\n            $encodedPolyline,\n            $startLocation,\n            $travelMode\n        );\n    }", "code_tokens": ["protected", "function", "buildDirectionsStep", "(", "\\", "stdClass", "$", "directionsStep", ")", "{", "$", "distance", "=", "new", "Distance", "(", "$", "directionsStep", "->", "distance", "->", "text", ",", "$", "directionsStep", "->", "distance", "->", "value", ")", ";", "$", "duration", "=", "new", "Duration", "(", "$", "directionsStep", "->", "duration", "->", "text", ",", "$", "directionsStep", "->", "duration", "->", "value", ")", ";", "$", "endLocation", "=", "new", "Coordinate", "(", "$", "directionsStep", "->", "end_location", "->", "lat", ",", "$", "directionsStep", "->", "end_location", "->", "lng", ")", ";", "$", "instructions", "=", "$", "directionsStep", "->", "html_instructions", ";", "$", "encodedPolyline", "=", "new", "EncodedPolyline", "(", "$", "directionsStep", "->", "polyline", "->", "points", ")", ";", "$", "startLocation", "=", "new", "Coordinate", "(", "$", "directionsStep", "->", "start_location", "->", "lat", ",", "$", "directionsStep", "->", "start_location", "->", "lng", ")", ";", "$", "travelMode", "=", "$", "directionsStep", "->", "travel_mode", ";", "return", "new", "DirectionsStep", "(", "$", "distance", ",", "$", "duration", ",", "$", "endLocation", ",", "$", "instructions", ",", "$", "encodedPolyline", ",", "$", "startLocation", ",", "$", "travelMode", ")", ";", "}"], "docstring": "Builds the directions step according to the normalized directions API step.\n\n@param \\stdClass $directionsStep The normalized directions step.\n\n@return \\Ivory\\GoogleMap\\Services\\Directions\\DirectionsStep The builded directions step.", "docstring_tokens": ["Builds", "the", "directions", "step", "according", "to", "the", "normalized", "directions", "API", "step", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Services/Directions/Directions.php#L380-L399", "partition": "test"}
{"repo": "tastyigniter/flame", "path": "src/Database/Attach/Media.php", "func_name": "Media.getDefaultThumbOptions", "original_string": "protected function getDefaultThumbOptions($override = [])\n    {\n        $defaultOptions = [\n            'fit' => 'contain',\n            'width' => 0,\n            'height' => 0,\n            'quality' => 90,\n            'sharpen' => 0,\n            'extension' => 'auto',\n        ];\n\n        if (!is_array($override))\n            $override = ['fit' => $override];\n\n        $options = array_merge($defaultOptions, $override);\n\n        if (strtolower($options['extension']) == 'auto')\n            $options['extension'] = strtolower($this->getExtension());\n\n        return $options;\n    }", "language": "php", "code": "protected function getDefaultThumbOptions($override = [])\n    {\n        $defaultOptions = [\n            'fit' => 'contain',\n            'width' => 0,\n            'height' => 0,\n            'quality' => 90,\n            'sharpen' => 0,\n            'extension' => 'auto',\n        ];\n\n        if (!is_array($override))\n            $override = ['fit' => $override];\n\n        $options = array_merge($defaultOptions, $override);\n\n        if (strtolower($options['extension']) == 'auto')\n            $options['extension'] = strtolower($this->getExtension());\n\n        return $options;\n    }", "code_tokens": ["protected", "function", "getDefaultThumbOptions", "(", "$", "override", "=", "[", "]", ")", "{", "$", "defaultOptions", "=", "[", "'fit'", "=>", "'contain'", ",", "'width'", "=>", "0", ",", "'height'", "=>", "0", ",", "'quality'", "=>", "90", ",", "'sharpen'", "=>", "0", ",", "'extension'", "=>", "'auto'", ",", "]", ";", "if", "(", "!", "is_array", "(", "$", "override", ")", ")", "$", "override", "=", "[", "'fit'", "=>", "$", "override", "]", ";", "$", "options", "=", "array_merge", "(", "$", "defaultOptions", ",", "$", "override", ")", ";", "if", "(", "strtolower", "(", "$", "options", "[", "'extension'", "]", ")", "==", "'auto'", ")", "$", "options", "[", "'extension'", "]", "=", "strtolower", "(", "$", "this", "->", "getExtension", "(", ")", ")", ";", "return", "$", "options", ";", "}"], "docstring": "Returns the default thumbnail options.\n@param array $override\n@return array", "docstring_tokens": ["Returns", "the", "default", "thumbnail", "options", "."], "sha": "3c922ba1c02b3c14ad4adf91c2f37498045fa92a", "url": "https://github.com/tastyigniter/flame/blob/3c922ba1c02b3c14ad4adf91c2f37498045fa92a/src/Database/Attach/Media.php#L529-L549", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Query/FluentQuery.php", "func_name": "FluentQuery.join", "original_string": "public function join( Table $table, $this_column, $other_column, $comparator = '=', $callback = null, $type = 'INNER' ) {\n\n\t\t$this->assert_comparator( $comparator );\n\n\t\t$other_alias = 't' . ( ++ $this->alias_count );\n\n\t\t$other_query              = new FluentQuery( $table, $this->wpdb );\n\t\t$other_query->alias       = $other_alias;\n\t\t$other_query->alias_count = $this->alias_count + 1;\n\n\t\t$other_query->joined_tables                 = $this->joined_tables;\n\t\t$other_query->joined_tables[ $this->alias ] = $this->table;\n\n\t\t$from = new From( $table->get_table_name( $this->wpdb ), $other_alias );\n\n\t\t$where = new Where_Raw(\n\t\t\t\"{$this->prepare_column( $this_column )} $comparator {$other_query->prepare_column( $other_column )}\"\n\t\t);\n\n\t\tif ( $callback ) {\n\t\t\t$callback( $other_query );\n\n\t\t\tif ( ! $other_query->where->is_empty() ) {\n\t\t\t\t$where->qAnd( $other_query->where );\n\t\t\t}\n\t\t}\n\n\t\t$this->joins[] = new Join( $from, $where, $type );\n\n\t\t$this->joined_tables[ $other_alias ] = $table;\n\n\t\treturn $this;\n\t}", "language": "php", "code": "public function join( Table $table, $this_column, $other_column, $comparator = '=', $callback = null, $type = 'INNER' ) {\n\n\t\t$this->assert_comparator( $comparator );\n\n\t\t$other_alias = 't' . ( ++ $this->alias_count );\n\n\t\t$other_query              = new FluentQuery( $table, $this->wpdb );\n\t\t$other_query->alias       = $other_alias;\n\t\t$other_query->alias_count = $this->alias_count + 1;\n\n\t\t$other_query->joined_tables                 = $this->joined_tables;\n\t\t$other_query->joined_tables[ $this->alias ] = $this->table;\n\n\t\t$from = new From( $table->get_table_name( $this->wpdb ), $other_alias );\n\n\t\t$where = new Where_Raw(\n\t\t\t\"{$this->prepare_column( $this_column )} $comparator {$other_query->prepare_column( $other_column )}\"\n\t\t);\n\n\t\tif ( $callback ) {\n\t\t\t$callback( $other_query );\n\n\t\t\tif ( ! $other_query->where->is_empty() ) {\n\t\t\t\t$where->qAnd( $other_query->where );\n\t\t\t}\n\t\t}\n\n\t\t$this->joins[] = new Join( $from, $where, $type );\n\n\t\t$this->joined_tables[ $other_alias ] = $table;\n\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "join", "(", "Table", "$", "table", ",", "$", "this_column", ",", "$", "other_column", ",", "$", "comparator", "=", "'='", ",", "$", "callback", "=", "null", ",", "$", "type", "=", "'INNER'", ")", "{", "$", "this", "->", "assert_comparator", "(", "$", "comparator", ")", ";", "$", "other_alias", "=", "'t'", ".", "(", "++", "$", "this", "->", "alias_count", ")", ";", "$", "other_query", "=", "new", "FluentQuery", "(", "$", "table", ",", "$", "this", "->", "wpdb", ")", ";", "$", "other_query", "->", "alias", "=", "$", "other_alias", ";", "$", "other_query", "->", "alias_count", "=", "$", "this", "->", "alias_count", "+", "1", ";", "$", "other_query", "->", "joined_tables", "=", "$", "this", "->", "joined_tables", ";", "$", "other_query", "->", "joined_tables", "[", "$", "this", "->", "alias", "]", "=", "$", "this", "->", "table", ";", "$", "from", "=", "new", "From", "(", "$", "table", "->", "get_table_name", "(", "$", "this", "->", "wpdb", ")", ",", "$", "other_alias", ")", ";", "$", "where", "=", "new", "Where_Raw", "(", "\"{$this->prepare_column( $this_column )} $comparator {$other_query->prepare_column( $other_column )}\"", ")", ";", "if", "(", "$", "callback", ")", "{", "$", "callback", "(", "$", "other_query", ")", ";", "if", "(", "!", "$", "other_query", "->", "where", "->", "is_empty", "(", ")", ")", "{", "$", "where", "->", "qAnd", "(", "$", "other_query", "->", "where", ")", ";", "}", "}", "$", "this", "->", "joins", "[", "]", "=", "new", "Join", "(", "$", "from", ",", "$", "where", ",", "$", "type", ")", ";", "$", "this", "->", "joined_tables", "[", "$", "other_alias", "]", "=", "$", "table", ";", "return", "$", "this", ";", "}"], "docstring": "Simple join statement.\n\n@since 2.0\n\n@param Table       $table\n@param string      $this_column\n@param string      $other_column\n@param bool|string $comparator\n@param callable    $callback Called with a FluentQuery object. Can be used to build additional where queries\nfor the Join clause.\n@param string      $type     Join type. Defaults to 'INNER'.\n\n@return $this\n@throws InvalidColumnException", "docstring_tokens": ["Simple", "join", "statement", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Query/FluentQuery.php#L690-L722", "partition": "test"}
{"repo": "zumba/swivel", "path": "src/Builder.php", "func_name": "Builder.setBehavior", "original_string": "protected function setBehavior(Behavior $behavior, array $args = [])\n    {\n        $slug = $behavior->getSlug();\n        $this->logger->debug('Swivel - Setting behavior.', compact('slug', 'args'));\n        $this->behavior = $behavior;\n        $this->args = $args;\n    }", "language": "php", "code": "protected function setBehavior(Behavior $behavior, array $args = [])\n    {\n        $slug = $behavior->getSlug();\n        $this->logger->debug('Swivel - Setting behavior.', compact('slug', 'args'));\n        $this->behavior = $behavior;\n        $this->args = $args;\n    }", "code_tokens": ["protected", "function", "setBehavior", "(", "Behavior", "$", "behavior", ",", "array", "$", "args", "=", "[", "]", ")", "{", "$", "slug", "=", "$", "behavior", "->", "getSlug", "(", ")", ";", "$", "this", "->", "logger", "->", "debug", "(", "'Swivel - Setting behavior.'", ",", "compact", "(", "'slug'", ",", "'args'", ")", ")", ";", "$", "this", "->", "behavior", "=", "$", "behavior", ";", "$", "this", "->", "args", "=", "$", "args", ";", "}"], "docstring": "Set the behavior and it's args.\n\n@param \\Zumba\\Swivel\\Behavior $behavior\n@param array                  $args", "docstring_tokens": ["Set", "the", "behavior", "and", "it", "s", "args", "."], "sha": "e9d0a2b345bf4fbaa4ceeca8b0b27b1dab6e6a21", "url": "https://github.com/zumba/swivel/blob/e9d0a2b345bf4fbaa4ceeca8b0b27b1dab6e6a21/src/Builder.php#L249-L255", "partition": "test"}
{"repo": "shumkov/rediska", "path": "library/Rediska/Zend/Queue/Adapter/Redis.php", "func_name": "Rediska_Zend_Queue_Adapter_Redis.deleteMessage", "original_string": "public function deleteMessage(Zend_Queue_Message $message)\n    {\n        $queueName = $this->_queue->getName();\n\n        if (!isset($this->_queueObjects[$queueName])) {\n            $this->_queueObjects[$queueName] = new Rediska_Key_List($this->_getKeyName(\"queue_$queueName\"), array('rediska' => $this->_rediska));\n        }\n\n        return (boolean)$this->_queueObjects[$queueName]->remove($message->body);\n    }", "language": "php", "code": "public function deleteMessage(Zend_Queue_Message $message)\n    {\n        $queueName = $this->_queue->getName();\n\n        if (!isset($this->_queueObjects[$queueName])) {\n            $this->_queueObjects[$queueName] = new Rediska_Key_List($this->_getKeyName(\"queue_$queueName\"), array('rediska' => $this->_rediska));\n        }\n\n        return (boolean)$this->_queueObjects[$queueName]->remove($message->body);\n    }", "code_tokens": ["public", "function", "deleteMessage", "(", "Zend_Queue_Message", "$", "message", ")", "{", "$", "queueName", "=", "$", "this", "->", "_queue", "->", "getName", "(", ")", ";", "if", "(", "!", "isset", "(", "$", "this", "->", "_queueObjects", "[", "$", "queueName", "]", ")", ")", "{", "$", "this", "->", "_queueObjects", "[", "$", "queueName", "]", "=", "new", "Rediska_Key_List", "(", "$", "this", "->", "_getKeyName", "(", "\"queue_$queueName\"", ")", ",", "array", "(", "'rediska'", "=>", "$", "this", "->", "_rediska", ")", ")", ";", "}", "return", "(", "boolean", ")", "$", "this", "->", "_queueObjects", "[", "$", "queueName", "]", "->", "remove", "(", "$", "message", "->", "body", ")", ";", "}"], "docstring": "Delete a message from the queue\n\nReturns true if the message is deleted, false if the deletion is\nunsuccessful.\n\n@param  Zend_Queue_Message $message\n@return boolean", "docstring_tokens": ["Delete", "a", "message", "from", "the", "queue"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/library/Rediska/Zend/Queue/Adapter/Redis.php#L273-L282", "partition": "test"}
{"repo": "findologic/libflexport", "path": "src/FINDOLOGIC/Export/Data/Item.php", "func_name": "Item.addDescription", "original_string": "public function addDescription(string $description, string $usergroup = ''): void\n    {\n        $this->description->setValue($description, $usergroup);\n    }", "language": "php", "code": "public function addDescription(string $description, string $usergroup = ''): void\n    {\n        $this->description->setValue($description, $usergroup);\n    }", "code_tokens": ["public", "function", "addDescription", "(", "string", "$", "description", ",", "string", "$", "usergroup", "=", "''", ")", ":", "void", "{", "$", "this", "->", "description", "->", "setValue", "(", "$", "description", ",", "$", "usergroup", ")", ";", "}"], "docstring": "Shortcut to easily add the description of the item.\n\n@param string $description The description of the item.\n@param string $usergroup The usergroup of the description.", "docstring_tokens": ["Shortcut", "to", "easily", "add", "the", "description", "of", "the", "item", "."], "sha": "3724b48d11223ae5721c55192a358d57c7e4269b", "url": "https://github.com/findologic/libflexport/blob/3724b48d11223ae5721c55192a358d57c7e4269b/src/FINDOLOGIC/Export/Data/Item.php#L166-L169", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/BaseConnection.php", "func_name": "BaseConnection.getForeignKeyData", "original_string": "public function getForeignKeyData(string $table)\n\t{\n\t\t$fields = $this->_foreignKeyData($this->protectIdentifiers($table, true, false, false));\n\n\t\treturn $fields ?? false;\n\t}", "language": "php", "code": "public function getForeignKeyData(string $table)\n\t{\n\t\t$fields = $this->_foreignKeyData($this->protectIdentifiers($table, true, false, false));\n\n\t\treturn $fields ?? false;\n\t}", "code_tokens": ["public", "function", "getForeignKeyData", "(", "string", "$", "table", ")", "{", "$", "fields", "=", "$", "this", "->", "_foreignKeyData", "(", "$", "this", "->", "protectIdentifiers", "(", "$", "table", ",", "true", ",", "false", ",", "false", ")", ")", ";", "return", "$", "fields", "??", "false", ";", "}"], "docstring": "Returns an object with foreign key data\n\n@param  string $table the table name\n@return array|false", "docstring_tokens": ["Returns", "an", "object", "with", "foreign", "key", "data"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/BaseConnection.php#L1691-L1696", "partition": "test"}
{"repo": "marklogic-community/mlphp", "path": "api/MarkLogic/MLPHP/XMLDocument.php", "func_name": "XMLDocument.isValidXML", "original_string": "public function isValidXML($xml)\n    {\n        $doc = new \\DOMDocument();\n        try {\n            return $doc->loadXML($xml) === true;\n        } catch(\\Exception $e) {\n            $this->logger->warning('XMLDocument::isValidXML() - ' . $e->getMessage());\n            return false;\n        }\n    }", "language": "php", "code": "public function isValidXML($xml)\n    {\n        $doc = new \\DOMDocument();\n        try {\n            return $doc->loadXML($xml) === true;\n        } catch(\\Exception $e) {\n            $this->logger->warning('XMLDocument::isValidXML() - ' . $e->getMessage());\n            return false;\n        }\n    }", "code_tokens": ["public", "function", "isValidXML", "(", "$", "xml", ")", "{", "$", "doc", "=", "new", "\\", "DOMDocument", "(", ")", ";", "try", "{", "return", "$", "doc", "->", "loadXML", "(", "$", "xml", ")", "===", "true", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "$", "this", "->", "logger", "->", "warning", "(", "'XMLDocument::isValidXML() - '", ".", "$", "e", "->", "getMessage", "(", ")", ")", ";", "return", "false", ";", "}", "}"], "docstring": "Check if XML content is valid.\n\n@return boolean true or false.", "docstring_tokens": ["Check", "if", "XML", "content", "is", "valid", "."], "sha": "c3aa3de82525cc5c3404e348e4d5069c0eee3277", "url": "https://github.com/marklogic-community/mlphp/blob/c3aa3de82525cc5c3404e348e4d5069c0eee3277/api/MarkLogic/MLPHP/XMLDocument.php#L79-L88", "partition": "test"}
{"repo": "didww/php-sdk", "path": "src/Didww/API2/PSTNNetwork.php", "func_name": "PSTNNetwork.updateAll", "original_string": "public static function updateAll($countries = array())\n    {\n        $networks = array();\n        foreach ($countries as $country) {\n            if ($country instanceof \\Didww\\API2\\Country) {\n                $networks = array_merge($networks, $country->getPSTNNetworks());\n            } else {\n                throw  new PSTNNetworkException(\"Country expected but type \" .\n                    \\Didww\\Utils\\Util::getType($country) .\n                    \" found\");\n            }\n        }\n        self::updateNetworks($networks);\n    }", "language": "php", "code": "public static function updateAll($countries = array())\n    {\n        $networks = array();\n        foreach ($countries as $country) {\n            if ($country instanceof \\Didww\\API2\\Country) {\n                $networks = array_merge($networks, $country->getPSTNNetworks());\n            } else {\n                throw  new PSTNNetworkException(\"Country expected but type \" .\n                    \\Didww\\Utils\\Util::getType($country) .\n                    \" found\");\n            }\n        }\n        self::updateNetworks($networks);\n    }", "code_tokens": ["public", "static", "function", "updateAll", "(", "$", "countries", "=", "array", "(", ")", ")", "{", "$", "networks", "=", "array", "(", ")", ";", "foreach", "(", "$", "countries", "as", "$", "country", ")", "{", "if", "(", "$", "country", "instanceof", "\\", "Didww", "\\", "API2", "\\", "Country", ")", "{", "$", "networks", "=", "array_merge", "(", "$", "networks", ",", "$", "country", "->", "getPSTNNetworks", "(", ")", ")", ";", "}", "else", "{", "throw", "new", "PSTNNetworkException", "(", "\"Country expected but type \"", ".", "\\", "Didww", "\\", "Utils", "\\", "Util", "::", "getType", "(", "$", "country", ")", ".", "\" found\"", ")", ";", "}", "}", "self", "::", "updateNetworks", "(", "$", "networks", ")", ";", "}"], "docstring": "update pstn rates from countries collection\n@link http://open.didww.com/index.php/3._Update_PSTN_Rates\n@param \\Didww\\API2\\Countries[] $countries", "docstring_tokens": ["update", "pstn", "rates", "from", "countries", "collection"], "sha": "ee406862bceeb67bc6796f52f2bd60e103cd8de3", "url": "https://github.com/didww/php-sdk/blob/ee406862bceeb67bc6796f52f2bd60e103cd8de3/src/Didww/API2/PSTNNetwork.php#L197-L210", "partition": "test"}
{"repo": "tripal/TripalTestSuite", "path": "src/Database/LoadsDatabaseSeeders.php", "func_name": "LoadsDatabaseSeeders.loadDatabaseSeeders", "original_string": "public function loadDatabaseSeeders()\n    {\n        $workingDir = getcwd();\n        if (file_exists(\"$workingDir/tests/DatabaseSeeders\")) {\n            foreach (glob(\"$workingDir/tests/DatabaseSeeders/*.php\") as $seeder) {\n                require_once $seeder;\n\n                // Extract the class name\n                /** @var \\StatonLab\\TripalTestSuite\\Database\\Seeder $className */\n                $className = $this->getClassName($seeder);\n\n                if (! class_exists($className)) {\n                    $error = \"Database seeder class $className not found. Make sure the filename and the class name match.\";\n                    throw new TripalTestBootstrapException($error);\n                }\n\n                $this->seeders[] = $className;\n            }\n        }\n\n        return $this->seeders;\n    }", "language": "php", "code": "public function loadDatabaseSeeders()\n    {\n        $workingDir = getcwd();\n        if (file_exists(\"$workingDir/tests/DatabaseSeeders\")) {\n            foreach (glob(\"$workingDir/tests/DatabaseSeeders/*.php\") as $seeder) {\n                require_once $seeder;\n\n                // Extract the class name\n                /** @var \\StatonLab\\TripalTestSuite\\Database\\Seeder $className */\n                $className = $this->getClassName($seeder);\n\n                if (! class_exists($className)) {\n                    $error = \"Database seeder class $className not found. Make sure the filename and the class name match.\";\n                    throw new TripalTestBootstrapException($error);\n                }\n\n                $this->seeders[] = $className;\n            }\n        }\n\n        return $this->seeders;\n    }", "code_tokens": ["public", "function", "loadDatabaseSeeders", "(", ")", "{", "$", "workingDir", "=", "getcwd", "(", ")", ";", "if", "(", "file_exists", "(", "\"$workingDir/tests/DatabaseSeeders\"", ")", ")", "{", "foreach", "(", "glob", "(", "\"$workingDir/tests/DatabaseSeeders/*.php\"", ")", "as", "$", "seeder", ")", "{", "require_once", "$", "seeder", ";", "// Extract the class name", "/** @var \\StatonLab\\TripalTestSuite\\Database\\Seeder $className */", "$", "className", "=", "$", "this", "->", "getClassName", "(", "$", "seeder", ")", ";", "if", "(", "!", "class_exists", "(", "$", "className", ")", ")", "{", "$", "error", "=", "\"Database seeder class $className not found. Make sure the filename and the class name match.\"", ";", "throw", "new", "TripalTestBootstrapException", "(", "$", "error", ")", ";", "}", "$", "this", "->", "seeders", "[", "]", "=", "$", "className", ";", "}", "}", "return", "$", "this", "->", "seeders", ";", "}"], "docstring": "Load the database seeders.\n\n@return mixed\n@throws TripalTestBootstrapException", "docstring_tokens": ["Load", "the", "database", "seeders", "."], "sha": "3e877af0204c59b9aa6b7ef0324ca4b985a7e3b4", "url": "https://github.com/tripal/TripalTestSuite/blob/3e877af0204c59b9aa6b7ef0324ca4b985a7e3b4/src/Database/LoadsDatabaseSeeders.php#L22-L43", "partition": "test"}
{"repo": "hugodias/cakegallery", "path": "Model/Album.php", "func_name": "Album.generateAlbumName", "original_string": "private function generateAlbumName($model = null, $model_id = null)\n    {\n        $name = 'Album - ' . rand(111, 999);\n\n        if ($model && $model_id) {\n            $name = Inflector::humanize('Album ' . $model . ' - ' . $model_id);\n        }\n\n        return $name;\n    }", "language": "php", "code": "private function generateAlbumName($model = null, $model_id = null)\n    {\n        $name = 'Album - ' . rand(111, 999);\n\n        if ($model && $model_id) {\n            $name = Inflector::humanize('Album ' . $model . ' - ' . $model_id);\n        }\n\n        return $name;\n    }", "code_tokens": ["private", "function", "generateAlbumName", "(", "$", "model", "=", "null", ",", "$", "model_id", "=", "null", ")", "{", "$", "name", "=", "'Album - '", ".", "rand", "(", "111", ",", "999", ")", ";", "if", "(", "$", "model", "&&", "$", "model_id", ")", "{", "$", "name", "=", "Inflector", "::", "humanize", "(", "'Album '", ".", "$", "model", ".", "' - '", ".", "$", "model_id", ")", ";", "}", "return", "$", "name", ";", "}"], "docstring": "Generate a random album name\n@param null $model\n@param null $model_id\n@return string", "docstring_tokens": ["Generate", "a", "random", "album", "name"], "sha": "5289c7babadaf0981cbbd71825f42f46cbbd7650", "url": "https://github.com/hugodias/cakegallery/blob/5289c7babadaf0981cbbd71825f42f46cbbd7650/Model/Album.php#L148-L157", "partition": "test"}
{"repo": "flugger/laravel-responder", "path": "src/Resources/ResourceKeyResolver.php", "func_name": "ResourceKeyResolver.bind", "original_string": "public function bind($transformable, string $resourceKey)\n    {\n        $this->bindings = array_merge($this->bindings, is_array($transformable) ? $transformable : [\n            $transformable => $resourceKey,\n        ]);\n    }", "language": "php", "code": "public function bind($transformable, string $resourceKey)\n    {\n        $this->bindings = array_merge($this->bindings, is_array($transformable) ? $transformable : [\n            $transformable => $resourceKey,\n        ]);\n    }", "code_tokens": ["public", "function", "bind", "(", "$", "transformable", ",", "string", "$", "resourceKey", ")", "{", "$", "this", "->", "bindings", "=", "array_merge", "(", "$", "this", "->", "bindings", ",", "is_array", "(", "$", "transformable", ")", "?", "$", "transformable", ":", "[", "$", "transformable", "=>", "$", "resourceKey", ",", "]", ")", ";", "}"], "docstring": "Register a transformable to resource key binding.\n\n@param  string|array $transformable\n@param  string       $resourceKey\n@return void", "docstring_tokens": ["Register", "a", "transformable", "to", "resource", "key", "binding", "."], "sha": "4baadabc9087d73927cf13b65a253f9e7ddef15c", "url": "https://github.com/flugger/laravel-responder/blob/4baadabc9087d73927cf13b65a253f9e7ddef15c/src/Resources/ResourceKeyResolver.php#L32-L37", "partition": "test"}
{"repo": "hugodias/cakegallery", "path": "View/Helper/GalleryHelper.php", "func_name": "GalleryHelper.showroom", "original_string": "public function showroom(\n        $model = null,\n        $model_id = null,\n        $album_id = null,\n        $style = 'medium',\n        $html_options = array('jquery' => true, 'swipebox' => true))\n    {\n\n        $album = $this->getAlbum($model, $model_id, $album_id);\n\n        if (!empty($album)) {\n            # Load scripts for the showroom (jquery, bootstrap, swipebox)\n            $this->_loadScripts($html_options);\n\n            # Render the showroom\n            $this->showroomTmpl($album, $style);\n        } else {\n            # Album doesn't exists\n            $this->_noPhotosMessageTmpl();\n        }\n\n        return;\n    }", "language": "php", "code": "public function showroom(\n        $model = null,\n        $model_id = null,\n        $album_id = null,\n        $style = 'medium',\n        $html_options = array('jquery' => true, 'swipebox' => true))\n    {\n\n        $album = $this->getAlbum($model, $model_id, $album_id);\n\n        if (!empty($album)) {\n            # Load scripts for the showroom (jquery, bootstrap, swipebox)\n            $this->_loadScripts($html_options);\n\n            # Render the showroom\n            $this->showroomTmpl($album, $style);\n        } else {\n            # Album doesn't exists\n            $this->_noPhotosMessageTmpl();\n        }\n\n        return;\n    }", "code_tokens": ["public", "function", "showroom", "(", "$", "model", "=", "null", ",", "$", "model_id", "=", "null", ",", "$", "album_id", "=", "null", ",", "$", "style", "=", "'medium'", ",", "$", "html_options", "=", "array", "(", "'jquery'", "=>", "true", ",", "'swipebox'", "=>", "true", ")", ")", "{", "$", "album", "=", "$", "this", "->", "getAlbum", "(", "$", "model", ",", "$", "model_id", ",", "$", "album_id", ")", ";", "if", "(", "!", "empty", "(", "$", "album", ")", ")", "{", "# Load scripts for the showroom (jquery, bootstrap, swipebox)", "$", "this", "->", "_loadScripts", "(", "$", "html_options", ")", ";", "# Render the showroom", "$", "this", "->", "showroomTmpl", "(", "$", "album", ",", "$", "style", ")", ";", "}", "else", "{", "# Album doesn't exists", "$", "this", "->", "_noPhotosMessageTmpl", "(", ")", ";", "}", "return", ";", "}"], "docstring": "Render a gallery with thumbnails\n\n@example\n<?php $this->Gallery->showroom('product', 10) ?>\n\n@param null $model\n@param null $model_id\n@param null $album_id\n@return string", "docstring_tokens": ["Render", "a", "gallery", "with", "thumbnails"], "sha": "5289c7babadaf0981cbbd71825f42f46cbbd7650", "url": "https://github.com/hugodias/cakegallery/blob/5289c7babadaf0981cbbd71825f42f46cbbd7650/View/Helper/GalleryHelper.php#L73-L95", "partition": "test"}
{"repo": "improved-php-library/iterable", "path": "src/IteratorPipeline/Traits/TypeHandlingTrait.php", "func_name": "TypeHandlingTrait.typeCast", "original_string": "public function typeCast(string $type, ?\\Throwable $throwable = null)\n    {\n        return $this->then(i\\iterable_type_cast, $type, $throwable);\n    }", "language": "php", "code": "public function typeCast(string $type, ?\\Throwable $throwable = null)\n    {\n        return $this->then(i\\iterable_type_cast, $type, $throwable);\n    }", "code_tokens": ["public", "function", "typeCast", "(", "string", "$", "type", ",", "?", "\\", "Throwable", "$", "throwable", "=", "null", ")", "{", "return", "$", "this", "->", "then", "(", "i", "\\", "iterable_type_cast", ",", "$", "type", ",", "$", "throwable", ")", ";", "}"], "docstring": "Cast a value to the specific type or throw an error.\n\n@param string          $type\n@param \\Throwable|null $throwable\n@return static", "docstring_tokens": ["Cast", "a", "value", "to", "the", "specific", "type", "or", "throw", "an", "error", "."], "sha": "cd157dd59596092b10fd350d40948e8b15240546", "url": "https://github.com/improved-php-library/iterable/blob/cd157dd59596092b10fd350d40948e8b15240546/src/IteratorPipeline/Traits/TypeHandlingTrait.php#L54-L57", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Http/Presenters/WorkOrder/WorkOrderPartPresenter.php", "func_name": "WorkOrderPartPresenter.tableInventory", "original_string": "public function tableInventory(WorkOrder $workOrder, Inventory $inventory)\n    {\n        $inventory = $inventory->noVariants();\n\n        return $this->table->of('work-orders.inventory', function (TableGrid $table) use ($inventory, $workOrder) {\n            $table->with($inventory)->paginate($this->perPage);\n\n            $table->pageName = 'page-inventory';\n\n            $table->column('ID', 'id');\n\n            $table->column('sku', function (Column $column) {\n                $column->label = 'SKU';\n\n                $column->value = function (Inventory $item) {\n                    return $item->getSku();\n                };\n            });\n\n            $table->column('name', function (Column $column) {\n                $column->value = function (Inventory $item) {\n                    return link_to_route('maintenance.inventory.show', $item->name, [$item->getKey()]);\n                };\n            });\n\n            $table->column('category', function (Column $column) {\n                $column->value = function (Inventory $item) {\n                    return $item->category->trail;\n                };\n            });\n\n            $table->column('current_stock', function (Column $column) {\n                $column->value = function (Inventory $item) {\n                    return $item->getTotalStock();\n                };\n            });\n\n            $table->column('select', function (Column $column) use ($workOrder) {\n                $column->value = function (Inventory $item) use ($workOrder) {\n                    $route = 'maintenance.work-orders.parts.stocks.index';\n\n                    $params = [$workOrder->getKey(), $item->getKey()];\n\n                    $attributes = [\n                        'class' => 'btn btn-default btn-sm',\n                    ];\n\n                    return link_to_route($route, 'Select', $params, $attributes);\n                };\n            });\n        });\n    }", "language": "php", "code": "public function tableInventory(WorkOrder $workOrder, Inventory $inventory)\n    {\n        $inventory = $inventory->noVariants();\n\n        return $this->table->of('work-orders.inventory', function (TableGrid $table) use ($inventory, $workOrder) {\n            $table->with($inventory)->paginate($this->perPage);\n\n            $table->pageName = 'page-inventory';\n\n            $table->column('ID', 'id');\n\n            $table->column('sku', function (Column $column) {\n                $column->label = 'SKU';\n\n                $column->value = function (Inventory $item) {\n                    return $item->getSku();\n                };\n            });\n\n            $table->column('name', function (Column $column) {\n                $column->value = function (Inventory $item) {\n                    return link_to_route('maintenance.inventory.show', $item->name, [$item->getKey()]);\n                };\n            });\n\n            $table->column('category', function (Column $column) {\n                $column->value = function (Inventory $item) {\n                    return $item->category->trail;\n                };\n            });\n\n            $table->column('current_stock', function (Column $column) {\n                $column->value = function (Inventory $item) {\n                    return $item->getTotalStock();\n                };\n            });\n\n            $table->column('select', function (Column $column) use ($workOrder) {\n                $column->value = function (Inventory $item) use ($workOrder) {\n                    $route = 'maintenance.work-orders.parts.stocks.index';\n\n                    $params = [$workOrder->getKey(), $item->getKey()];\n\n                    $attributes = [\n                        'class' => 'btn btn-default btn-sm',\n                    ];\n\n                    return link_to_route($route, 'Select', $params, $attributes);\n                };\n            });\n        });\n    }", "code_tokens": ["public", "function", "tableInventory", "(", "WorkOrder", "$", "workOrder", ",", "Inventory", "$", "inventory", ")", "{", "$", "inventory", "=", "$", "inventory", "->", "noVariants", "(", ")", ";", "return", "$", "this", "->", "table", "->", "of", "(", "'work-orders.inventory'", ",", "function", "(", "TableGrid", "$", "table", ")", "use", "(", "$", "inventory", ",", "$", "workOrder", ")", "{", "$", "table", "->", "with", "(", "$", "inventory", ")", "->", "paginate", "(", "$", "this", "->", "perPage", ")", ";", "$", "table", "->", "pageName", "=", "'page-inventory'", ";", "$", "table", "->", "column", "(", "'ID'", ",", "'id'", ")", ";", "$", "table", "->", "column", "(", "'sku'", ",", "function", "(", "Column", "$", "column", ")", "{", "$", "column", "->", "label", "=", "'SKU'", ";", "$", "column", "->", "value", "=", "function", "(", "Inventory", "$", "item", ")", "{", "return", "$", "item", "->", "getSku", "(", ")", ";", "}", ";", "}", ")", ";", "$", "table", "->", "column", "(", "'name'", ",", "function", "(", "Column", "$", "column", ")", "{", "$", "column", "->", "value", "=", "function", "(", "Inventory", "$", "item", ")", "{", "return", "link_to_route", "(", "'maintenance.inventory.show'", ",", "$", "item", "->", "name", ",", "[", "$", "item", "->", "getKey", "(", ")", "]", ")", ";", "}", ";", "}", ")", ";", "$", "table", "->", "column", "(", "'category'", ",", "function", "(", "Column", "$", "column", ")", "{", "$", "column", "->", "value", "=", "function", "(", "Inventory", "$", "item", ")", "{", "return", "$", "item", "->", "category", "->", "trail", ";", "}", ";", "}", ")", ";", "$", "table", "->", "column", "(", "'current_stock'", ",", "function", "(", "Column", "$", "column", ")", "{", "$", "column", "->", "value", "=", "function", "(", "Inventory", "$", "item", ")", "{", "return", "$", "item", "->", "getTotalStock", "(", ")", ";", "}", ";", "}", ")", ";", "$", "table", "->", "column", "(", "'select'", ",", "function", "(", "Column", "$", "column", ")", "use", "(", "$", "workOrder", ")", "{", "$", "column", "->", "value", "=", "function", "(", "Inventory", "$", "item", ")", "use", "(", "$", "workOrder", ")", "{", "$", "route", "=", "'maintenance.work-orders.parts.stocks.index'", ";", "$", "params", "=", "[", "$", "workOrder", "->", "getKey", "(", ")", ",", "$", "item", "->", "getKey", "(", ")", "]", ";", "$", "attributes", "=", "[", "'class'", "=>", "'btn btn-default btn-sm'", ",", "]", ";", "return", "link_to_route", "(", "$", "route", ",", "'Select'", ",", "$", "params", ",", "$", "attributes", ")", ";", "}", ";", "}", ")", ";", "}", ")", ";", "}"], "docstring": "Displays all inventory available for selection.\n\n@param WorkOrder $workOrder\n@param Inventory $inventory\n\n@return \\Orchestra\\Contracts\\Html\\Builder", "docstring_tokens": ["Displays", "all", "inventory", "available", "for", "selection", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Http/Presenters/WorkOrder/WorkOrderPartPresenter.php#L82-L133", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Base/AnnotationsReader.php", "func_name": "AnnotationsReader.getClassExact", "original_string": "public function getClassExact($class, $annotationClass, $refresh = false)\n    {\n        $annotations = $this->getClass($class, $refresh);\n        foreach ($annotations as $annotation) {\n            if ($annotation instanceof $annotationClass) {\n                return $annotation;\n            }\n        }\n        return null;\n    }", "language": "php", "code": "public function getClassExact($class, $annotationClass, $refresh = false)\n    {\n        $annotations = $this->getClass($class, $refresh);\n        foreach ($annotations as $annotation) {\n            if ($annotation instanceof $annotationClass) {\n                return $annotation;\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "function", "getClassExact", "(", "$", "class", ",", "$", "annotationClass", ",", "$", "refresh", "=", "false", ")", "{", "$", "annotations", "=", "$", "this", "->", "getClass", "(", "$", "class", ",", "$", "refresh", ")", ";", "foreach", "(", "$", "annotations", "as", "$", "annotation", ")", "{", "if", "(", "$", "annotation", "instanceof", "$", "annotationClass", ")", "{", "return", "$", "annotation", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Get class annotation by its class|interface name\n@param string|object $class\n@param string|object $annotationClass\n@param bool          $refresh\n@return object|null", "docstring_tokens": ["Get", "class", "annotation", "by", "its", "class|interface", "name"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Base/AnnotationsReader.php#L57-L66", "partition": "test"}
{"repo": "APY/APYDataGridBundle", "path": "Grid/Grid.php", "func_name": "Grid.setSource", "original_string": "public function setSource(Source $source)\n    {\n        if ($this->source !== null) {\n            throw new \\InvalidArgumentException(self::SOURCE_ALREADY_SETTED_EX_MSG);\n        }\n\n        $this->source = $source;\n\n        $this->source->initialise($this->container);\n\n        // Get columns from the source\n        $this->source->getColumns($this->columns);\n\n        return $this;\n    }", "language": "php", "code": "public function setSource(Source $source)\n    {\n        if ($this->source !== null) {\n            throw new \\InvalidArgumentException(self::SOURCE_ALREADY_SETTED_EX_MSG);\n        }\n\n        $this->source = $source;\n\n        $this->source->initialise($this->container);\n\n        // Get columns from the source\n        $this->source->getColumns($this->columns);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setSource", "(", "Source", "$", "source", ")", "{", "if", "(", "$", "this", "->", "source", "!==", "null", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "self", "::", "SOURCE_ALREADY_SETTED_EX_MSG", ")", ";", "}", "$", "this", "->", "source", "=", "$", "source", ";", "$", "this", "->", "source", "->", "initialise", "(", "$", "this", "->", "container", ")", ";", "// Get columns from the source", "$", "this", "->", "source", "->", "getColumns", "(", "$", "this", "->", "columns", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Sets Source to the Grid.\n\n@param $source\n\n@throws \\InvalidArgumentException\n\n@return self", "docstring_tokens": ["Sets", "Source", "to", "the", "Grid", "."], "sha": "03050b366a79553b014aa4297d31b585a84622a3", "url": "https://github.com/APY/APYDataGridBundle/blob/03050b366a79553b014aa4297d31b585a84622a3/Grid/Grid.php#L478-L492", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/HttpFoundation/Console/Command/DownCommand.php", "func_name": "DownCommand.getRetryTime", "original_string": "protected function getRetryTime(): ?int\n    {\n        $retry = $this->option('retry');\n\n        return \\is_numeric($retry) && $retry > 0 ? (int) $retry : null;\n    }", "language": "php", "code": "protected function getRetryTime(): ?int\n    {\n        $retry = $this->option('retry');\n\n        return \\is_numeric($retry) && $retry > 0 ? (int) $retry : null;\n    }", "code_tokens": ["protected", "function", "getRetryTime", "(", ")", ":", "?", "int", "{", "$", "retry", "=", "$", "this", "->", "option", "(", "'retry'", ")", ";", "return", "\\", "is_numeric", "(", "$", "retry", ")", "&&", "$", "retry", ">", "0", "?", "(", "int", ")", "$", "retry", ":", "null", ";", "}"], "docstring": "Get the number of seconds the client should wait before retrying their request.\n\n@return null|int", "docstring_tokens": ["Get", "the", "number", "of", "seconds", "the", "client", "should", "wait", "before", "retrying", "their", "request", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/HttpFoundation/Console/Command/DownCommand.php#L65-L70", "partition": "test"}
{"repo": "TopShelfCraft/Wordsmith", "path": "src/libs/APTitleCapitalizer.php", "func_name": "APTitleCapitalizer.processStringParts", "original_string": "protected function processStringParts(array $parts)\n\t{\n\t\tarray_walk($parts, function (&$part) {\n\t\t\t$part = $this->isWordLike($part) ? $this->processWord($part) : $part;\n\t\t});\n\t\treturn $parts;\n\t}", "language": "php", "code": "protected function processStringParts(array $parts)\n\t{\n\t\tarray_walk($parts, function (&$part) {\n\t\t\t$part = $this->isWordLike($part) ? $this->processWord($part) : $part;\n\t\t});\n\t\treturn $parts;\n\t}", "code_tokens": ["protected", "function", "processStringParts", "(", "array", "$", "parts", ")", "{", "array_walk", "(", "$", "parts", ",", "function", "(", "&", "$", "part", ")", "{", "$", "part", "=", "$", "this", "->", "isWordLike", "(", "$", "part", ")", "?", "$", "this", "->", "processWord", "(", "$", "part", ")", ":", "$", "part", ";", "}", ")", ";", "return", "$", "parts", ";", "}"], "docstring": "Processes the given array of string parts.\n\n@param array $parts\n\n@return array", "docstring_tokens": ["Processes", "the", "given", "array", "of", "string", "parts", "."], "sha": "efe40e9324d2449d431444070e0972fd60aaac37", "url": "https://github.com/TopShelfCraft/Wordsmith/blob/efe40e9324d2449d431444070e0972fd60aaac37/src/libs/APTitleCapitalizer.php#L125-L131", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Bridge/Twig/DataCollector/TwigDataCollector.php", "func_name": "TwigDataCollector.getComputedData", "original_string": "private function getComputedData(string $index)\n    {\n        if (\\count($this->computed) === 0) {\n            $this->computed = $this->generateComputeData($this->getProfile());\n        }\n\n        return $this->computed[$index];\n    }", "language": "php", "code": "private function getComputedData(string $index)\n    {\n        if (\\count($this->computed) === 0) {\n            $this->computed = $this->generateComputeData($this->getProfile());\n        }\n\n        return $this->computed[$index];\n    }", "code_tokens": ["private", "function", "getComputedData", "(", "string", "$", "index", ")", "{", "if", "(", "\\", "count", "(", "$", "this", "->", "computed", ")", "===", "0", ")", "{", "$", "this", "->", "computed", "=", "$", "this", "->", "generateComputeData", "(", "$", "this", "->", "getProfile", "(", ")", ")", ";", "}", "return", "$", "this", "->", "computed", "[", "$", "index", "]", ";", "}"], "docstring": "Get computed data.\n\n@param string $index\n\n@return mixed", "docstring_tokens": ["Get", "computed", "data", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Bridge/Twig/DataCollector/TwigDataCollector.php#L270-L277", "partition": "test"}
{"repo": "php-school/cli-menu", "path": "src/MenuStyle.php", "func_name": "MenuStyle.generateColoursSetCode", "original_string": "private function generateColoursSetCode() : void\n    {\n        if (!ctype_digit($this->fg)) {\n            $fgCode = self::$availableForegroundColors[$this->fg];\n        } else {\n            $fgCode = sprintf(\"38;5;%s\", $this->fg);\n        }\n\n        if (!ctype_digit($this->bg)) {\n            $bgCode = self::$availableBackgroundColors[$this->bg];\n        } else {\n            $bgCode = sprintf(\"48;5;%s\", $this->bg);\n        }\n\n        $this->coloursSetCode = sprintf(\"\\033[%s;%sm\", $fgCode, $bgCode);\n    }", "language": "php", "code": "private function generateColoursSetCode() : void\n    {\n        if (!ctype_digit($this->fg)) {\n            $fgCode = self::$availableForegroundColors[$this->fg];\n        } else {\n            $fgCode = sprintf(\"38;5;%s\", $this->fg);\n        }\n\n        if (!ctype_digit($this->bg)) {\n            $bgCode = self::$availableBackgroundColors[$this->bg];\n        } else {\n            $bgCode = sprintf(\"48;5;%s\", $this->bg);\n        }\n\n        $this->coloursSetCode = sprintf(\"\\033[%s;%sm\", $fgCode, $bgCode);\n    }", "code_tokens": ["private", "function", "generateColoursSetCode", "(", ")", ":", "void", "{", "if", "(", "!", "ctype_digit", "(", "$", "this", "->", "fg", ")", ")", "{", "$", "fgCode", "=", "self", "::", "$", "availableForegroundColors", "[", "$", "this", "->", "fg", "]", ";", "}", "else", "{", "$", "fgCode", "=", "sprintf", "(", "\"38;5;%s\"", ",", "$", "this", "->", "fg", ")", ";", "}", "if", "(", "!", "ctype_digit", "(", "$", "this", "->", "bg", ")", ")", "{", "$", "bgCode", "=", "self", "::", "$", "availableBackgroundColors", "[", "$", "this", "->", "bg", "]", ";", "}", "else", "{", "$", "bgCode", "=", "sprintf", "(", "\"48;5;%s\"", ",", "$", "this", "->", "bg", ")", ";", "}", "$", "this", "->", "coloursSetCode", "=", "sprintf", "(", "\"\\033[%s;%sm\"", ",", "$", "fgCode", ",", "$", "bgCode", ")", ";", "}"], "docstring": "Generates the ansi escape sequence to set the colours", "docstring_tokens": ["Generates", "the", "ansi", "escape", "sequence", "to", "set", "the", "colours"], "sha": "2b24d576338c5add84c9515a766c6d12337ff2b8", "url": "https://github.com/php-school/cli-menu/blob/2b24d576338c5add84c9515a766c6d12337ff2b8/src/MenuStyle.php#L280-L295", "partition": "test"}
{"repo": "ttmdear/labi", "path": "src/Labi/Database/Updater.php", "func_name": "Updater.update", "original_string": "public function update($params = array())\r\n    {\r\n        $this->adapter->execute($this->toSql(), array_merge($this->params(), $this->params(true), $params));\r\n\r\n        return true;\r\n    }", "language": "php", "code": "public function update($params = array())\r\n    {\r\n        $this->adapter->execute($this->toSql(), array_merge($this->params(), $this->params(true), $params));\r\n\r\n        return true;\r\n    }", "code_tokens": ["public", "function", "update", "(", "$", "params", "=", "array", "(", ")", ")", "{", "$", "this", "->", "adapter", "->", "execute", "(", "$", "this", "->", "toSql", "(", ")", ",", "array_merge", "(", "$", "this", "->", "params", "(", ")", ",", "$", "this", "->", "params", "(", "true", ")", ",", "$", "params", ")", ")", ";", "return", "true", ";", "}"], "docstring": "+ \\Labi\\Operators\\UpdaterInterface", "docstring_tokens": ["+", "\\", "Labi", "\\", "Operators", "\\", "UpdaterInterface"], "sha": "b3789fe49f886581056d873a73e9e57e09b9d8b3", "url": "https://github.com/ttmdear/labi/blob/b3789fe49f886581056d873a73e9e57e09b9d8b3/src/Labi/Database/Updater.php#L323-L328", "partition": "test"}
{"repo": "nikitakiselev/sendpulse-laravel", "path": "src/SendPulseApi.php", "func_name": "SendpulseApi.getToken", "original_string": "private function getToken() {\n        $data = array(\n            'grant_type'    => 'client_credentials',\n            'client_id'     => $this->userId,\n            'client_secret' => $this->secret,\n        );\n\n        $requestResult = $this->sendRequest( 'oauth/access_token', 'POST', $data, false );\n\n        if( $requestResult->http_code != 200 ) {\n            return false;\n        }\n\n        $this->refreshToken = 0;\n        $this->token = $requestResult->data->access_token;\n\n        $this->storage->set($this->token);\n\n        return true;\n    }", "language": "php", "code": "private function getToken() {\n        $data = array(\n            'grant_type'    => 'client_credentials',\n            'client_id'     => $this->userId,\n            'client_secret' => $this->secret,\n        );\n\n        $requestResult = $this->sendRequest( 'oauth/access_token', 'POST', $data, false );\n\n        if( $requestResult->http_code != 200 ) {\n            return false;\n        }\n\n        $this->refreshToken = 0;\n        $this->token = $requestResult->data->access_token;\n\n        $this->storage->set($this->token);\n\n        return true;\n    }", "code_tokens": ["private", "function", "getToken", "(", ")", "{", "$", "data", "=", "array", "(", "'grant_type'", "=>", "'client_credentials'", ",", "'client_id'", "=>", "$", "this", "->", "userId", ",", "'client_secret'", "=>", "$", "this", "->", "secret", ",", ")", ";", "$", "requestResult", "=", "$", "this", "->", "sendRequest", "(", "'oauth/access_token'", ",", "'POST'", ",", "$", "data", ",", "false", ")", ";", "if", "(", "$", "requestResult", "->", "http_code", "!=", "200", ")", "{", "return", "false", ";", "}", "$", "this", "->", "refreshToken", "=", "0", ";", "$", "this", "->", "token", "=", "$", "requestResult", "->", "data", "->", "access_token", ";", "$", "this", "->", "storage", "->", "set", "(", "$", "this", "->", "token", ")", ";", "return", "true", ";", "}"], "docstring": "Get token and store it\n\n@return bool", "docstring_tokens": ["Get", "token", "and", "store", "it"], "sha": "12febd0c93b48f507ff2c1a082e5d21cb33d787a", "url": "https://github.com/nikitakiselev/sendpulse-laravel/blob/12febd0c93b48f507ff2c1a082e5d21cb33d787a/src/SendPulseApi.php#L69-L88", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Session/NativeSession.php", "func_name": "NativeSession.validateCsrf", "original_string": "public function validateCsrf(string $id, string $token): bool\n    {\n        if (! $this->has($id)) {\n            return false;\n        }\n\n        $sessionToken = $this->get($id);\n\n        if (! \\is_string($sessionToken)) {\n            return false;\n        }\n\n        $this->remove($id);\n\n        return hash_equals($token, $sessionToken);\n    }", "language": "php", "code": "public function validateCsrf(string $id, string $token): bool\n    {\n        if (! $this->has($id)) {\n            return false;\n        }\n\n        $sessionToken = $this->get($id);\n\n        if (! \\is_string($sessionToken)) {\n            return false;\n        }\n\n        $this->remove($id);\n\n        return hash_equals($token, $sessionToken);\n    }", "code_tokens": ["public", "function", "validateCsrf", "(", "string", "$", "id", ",", "string", "$", "token", ")", ":", "bool", "{", "if", "(", "!", "$", "this", "->", "has", "(", "$", "id", ")", ")", "{", "return", "false", ";", "}", "$", "sessionToken", "=", "$", "this", "->", "get", "(", "$", "id", ")", ";", "if", "(", "!", "\\", "is_string", "(", "$", "sessionToken", ")", ")", "{", "return", "false", ";", "}", "$", "this", "->", "remove", "(", "$", "id", ")", ";", "return", "hash_equals", "(", "$", "token", ",", "$", "sessionToken", ")", ";", "}"], "docstring": "Validate a csrf token.\n\n@param string $id    The csrf unique token id\n@param string $token The token to validate\n\n@return bool", "docstring_tokens": ["Validate", "a", "csrf", "token", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Session/NativeSession.php#L252-L267", "partition": "test"}
{"repo": "RichardTMiles/CarbonPHP", "path": "error/ErrorCatcher.php", "func_name": "ErrorCatcher.start", "original_string": "public static function start(): void     // TODO - not this.\n    {\n        ini_set('display_errors', 1);\n        ini_set('track_errors', 1);\n        error_reporting(self::$level);\n\n        if (TEST) {\n            return;\n        }\n\n        /**\n         * if you return true from here it will continue script execution from the point of the error..\n         * this is not wanted. Die and Exit are equivalent in execution. I ran across a post once that\n         * explained how die should signify a complete error with no resolution, while exit has resolution\n         * returning 1 rather than 0 in both cases will signify an error occurred\n         * @param array $argv\n         * @internal param TYPE_NAME $closure\n         */\n        $closure = function (...$argv) {\n            static $count;\n\n            if (empty($count)) {\n                $count = 0;\n            }\n            $count++;\n\n            self::generateLog($argv);\n\n            if (!SOCKET && !APP_LOCAL && CarbonPHP::$setupComplete) {     // TODO - do we really want to reset?\n                if ($count > 1) {\n                    print 'A recursive error has occurred in (or at least affecting) your $app->defaultRoute();';\n                    die(1);\n                }\n                startApplication(true);\n                exit(1);\n            }\n\n            /** @noinspection ForgottenDebugOutputInspection\n             * TODO - fix this? */\n            print_r($argv);\n            print \"\\n\\nCarbonPHP Caught This Error.\\n\\n\";\n            die(1);\n\n        };\n        set_error_handler($closure);\n        set_exception_handler($closure);\n    }", "language": "php", "code": "public static function start(): void     // TODO - not this.\n    {\n        ini_set('display_errors', 1);\n        ini_set('track_errors', 1);\n        error_reporting(self::$level);\n\n        if (TEST) {\n            return;\n        }\n\n        /**\n         * if you return true from here it will continue script execution from the point of the error..\n         * this is not wanted. Die and Exit are equivalent in execution. I ran across a post once that\n         * explained how die should signify a complete error with no resolution, while exit has resolution\n         * returning 1 rather than 0 in both cases will signify an error occurred\n         * @param array $argv\n         * @internal param TYPE_NAME $closure\n         */\n        $closure = function (...$argv) {\n            static $count;\n\n            if (empty($count)) {\n                $count = 0;\n            }\n            $count++;\n\n            self::generateLog($argv);\n\n            if (!SOCKET && !APP_LOCAL && CarbonPHP::$setupComplete) {     // TODO - do we really want to reset?\n                if ($count > 1) {\n                    print 'A recursive error has occurred in (or at least affecting) your $app->defaultRoute();';\n                    die(1);\n                }\n                startApplication(true);\n                exit(1);\n            }\n\n            /** @noinspection ForgottenDebugOutputInspection\n             * TODO - fix this? */\n            print_r($argv);\n            print \"\\n\\nCarbonPHP Caught This Error.\\n\\n\";\n            die(1);\n\n        };\n        set_error_handler($closure);\n        set_exception_handler($closure);\n    }", "code_tokens": ["public", "static", "function", "start", "(", ")", ":", "void", "// TODO - not this.", "{", "ini_set", "(", "'display_errors'", ",", "1", ")", ";", "ini_set", "(", "'track_errors'", ",", "1", ")", ";", "error_reporting", "(", "self", "::", "$", "level", ")", ";", "if", "(", "TEST", ")", "{", "return", ";", "}", "/**\n         * if you return true from here it will continue script execution from the point of the error..\n         * this is not wanted. Die and Exit are equivalent in execution. I ran across a post once that\n         * explained how die should signify a complete error with no resolution, while exit has resolution\n         * returning 1 rather than 0 in both cases will signify an error occurred\n         * @param array $argv\n         * @internal param TYPE_NAME $closure\n         */", "$", "closure", "=", "function", "(", "...", "$", "argv", ")", "{", "static", "$", "count", ";", "if", "(", "empty", "(", "$", "count", ")", ")", "{", "$", "count", "=", "0", ";", "}", "$", "count", "++", ";", "self", "::", "generateLog", "(", "$", "argv", ")", ";", "if", "(", "!", "SOCKET", "&&", "!", "APP_LOCAL", "&&", "CarbonPHP", "::", "$", "setupComplete", ")", "{", "// TODO - do we really want to reset?", "if", "(", "$", "count", ">", "1", ")", "{", "print", "'A recursive error has occurred in (or at least affecting) your $app->defaultRoute();'", ";", "die", "(", "1", ")", ";", "}", "startApplication", "(", "true", ")", ";", "exit", "(", "1", ")", ";", "}", "/** @noinspection ForgottenDebugOutputInspection\n             * TODO - fix this? */", "print_r", "(", "$", "argv", ")", ";", "print", "\"\\n\\nCarbonPHP Caught This Error.\\n\\n\"", ";", "die", "(", "1", ")", ";", "}", ";", "set_error_handler", "(", "$", "closure", ")", ";", "set_exception_handler", "(", "$", "closure", ")", ";", "}"], "docstring": "ErrorCatcher constructor.", "docstring_tokens": ["ErrorCatcher", "constructor", "."], "sha": "22a403db161482f19a91771f62b930b8243a04c6", "url": "https://github.com/RichardTMiles/CarbonPHP/blob/22a403db161482f19a91771f62b930b8243a04c6/error/ErrorCatcher.php#L46-L92", "partition": "test"}
{"repo": "tomahawkphp/framework", "path": "src/Tomahawk/Bundle/WebProfilerBundle/Profiler.php", "func_name": "Profiler.addDoctrineQueries", "original_string": "public function addDoctrineQueries(DebugStack $debugStack)\n    {\n        foreach ($debugStack->queries as $query) {\n\n            if (!$query['params']) {\n                $query['params'] = array();\n            }\n\n            if (!$query['types']) {\n                $query['types'] = array();\n            }\n\n            // Because doctrine columns can be more advanced we need to convert them to string\n            // This is a quick a dirty way of doing it so could do with going elsewhere\n            $query['params'] = $this->convertDoctrineParameters($query['params'], $query['types']);\n\n            $queries = array(\n                array(\n                    'query'    => $query['sql'],\n                    'bindings' => $query['params'],\n                    'time'     => $query['executionMS'],\n                )\n            );\n\n            $this->addQueries($queries);\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function addDoctrineQueries(DebugStack $debugStack)\n    {\n        foreach ($debugStack->queries as $query) {\n\n            if (!$query['params']) {\n                $query['params'] = array();\n            }\n\n            if (!$query['types']) {\n                $query['types'] = array();\n            }\n\n            // Because doctrine columns can be more advanced we need to convert them to string\n            // This is a quick a dirty way of doing it so could do with going elsewhere\n            $query['params'] = $this->convertDoctrineParameters($query['params'], $query['types']);\n\n            $queries = array(\n                array(\n                    'query'    => $query['sql'],\n                    'bindings' => $query['params'],\n                    'time'     => $query['executionMS'],\n                )\n            );\n\n            $this->addQueries($queries);\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addDoctrineQueries", "(", "DebugStack", "$", "debugStack", ")", "{", "foreach", "(", "$", "debugStack", "->", "queries", "as", "$", "query", ")", "{", "if", "(", "!", "$", "query", "[", "'params'", "]", ")", "{", "$", "query", "[", "'params'", "]", "=", "array", "(", ")", ";", "}", "if", "(", "!", "$", "query", "[", "'types'", "]", ")", "{", "$", "query", "[", "'types'", "]", "=", "array", "(", ")", ";", "}", "// Because doctrine columns can be more advanced we need to convert them to string", "// This is a quick a dirty way of doing it so could do with going elsewhere", "$", "query", "[", "'params'", "]", "=", "$", "this", "->", "convertDoctrineParameters", "(", "$", "query", "[", "'params'", "]", ",", "$", "query", "[", "'types'", "]", ")", ";", "$", "queries", "=", "array", "(", "array", "(", "'query'", "=>", "$", "query", "[", "'sql'", "]", ",", "'bindings'", "=>", "$", "query", "[", "'params'", "]", ",", "'time'", "=>", "$", "query", "[", "'executionMS'", "]", ",", ")", ")", ";", "$", "this", "->", "addQueries", "(", "$", "queries", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Add queries for doctrine off the DebugStack logger\n\n@param DebugStack $debugStack\n@return $this", "docstring_tokens": ["Add", "queries", "for", "doctrine", "off", "the", "DebugStack", "logger"], "sha": "087ee2d362fe70a9020d32c00f7a48cb11b9c04f", "url": "https://github.com/tomahawkphp/framework/blob/087ee2d362fe70a9020d32c00f7a48cb11b9c04f/src/Tomahawk/Bundle/WebProfilerBundle/Profiler.php#L146-L174", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Exception/Http/Handler.php", "func_name": "Handler.getDisplayer", "original_string": "protected function getDisplayer(\n        ?ServerRequestInterface $request,\n        Throwable $original,\n        Throwable $transformed,\n        int $code\n    ): DisplayerContract {\n        $sortedDisplayers = [];\n\n        \\ksort($this->displayers);\n\n        \\array_walk_recursive($this->displayers, static function ($displayers, $key) use (&$sortedDisplayers): void {\n            $sortedDisplayers[$key] = $displayers;\n        });\n\n        if ($request !== null) {\n            $filtered = $this->getFiltered($sortedDisplayers, $request, $original, $transformed, $code);\n\n            if (\\count($filtered) !== 0) {\n                return $this->sortedFilter($filtered, $request);\n            }\n        }\n\n        return $sortedDisplayers[$this->resolvedOptions['http']['displayer']['default']];\n    }", "language": "php", "code": "protected function getDisplayer(\n        ?ServerRequestInterface $request,\n        Throwable $original,\n        Throwable $transformed,\n        int $code\n    ): DisplayerContract {\n        $sortedDisplayers = [];\n\n        \\ksort($this->displayers);\n\n        \\array_walk_recursive($this->displayers, static function ($displayers, $key) use (&$sortedDisplayers): void {\n            $sortedDisplayers[$key] = $displayers;\n        });\n\n        if ($request !== null) {\n            $filtered = $this->getFiltered($sortedDisplayers, $request, $original, $transformed, $code);\n\n            if (\\count($filtered) !== 0) {\n                return $this->sortedFilter($filtered, $request);\n            }\n        }\n\n        return $sortedDisplayers[$this->resolvedOptions['http']['displayer']['default']];\n    }", "code_tokens": ["protected", "function", "getDisplayer", "(", "?", "ServerRequestInterface", "$", "request", ",", "Throwable", "$", "original", ",", "Throwable", "$", "transformed", ",", "int", "$", "code", ")", ":", "DisplayerContract", "{", "$", "sortedDisplayers", "=", "[", "]", ";", "\\", "ksort", "(", "$", "this", "->", "displayers", ")", ";", "\\", "array_walk_recursive", "(", "$", "this", "->", "displayers", ",", "static", "function", "(", "$", "displayers", ",", "$", "key", ")", "use", "(", "&", "$", "sortedDisplayers", ")", ":", "void", "{", "$", "sortedDisplayers", "[", "$", "key", "]", "=", "$", "displayers", ";", "}", ")", ";", "if", "(", "$", "request", "!==", "null", ")", "{", "$", "filtered", "=", "$", "this", "->", "getFiltered", "(", "$", "sortedDisplayers", ",", "$", "request", ",", "$", "original", ",", "$", "transformed", ",", "$", "code", ")", ";", "if", "(", "\\", "count", "(", "$", "filtered", ")", "!==", "0", ")", "{", "return", "$", "this", "->", "sortedFilter", "(", "$", "filtered", ",", "$", "request", ")", ";", "}", "}", "return", "$", "sortedDisplayers", "[", "$", "this", "->", "resolvedOptions", "[", "'http'", "]", "[", "'displayer'", "]", "[", "'default'", "]", "]", ";", "}"], "docstring": "Get the displayer instance.\n\n@param null|\\Psr\\Http\\Message\\ServerRequestInterface $request\n@param \\Throwable                                    $original\n@param \\Throwable                                    $transformed\n@param int                                           $code\n\n@return \\Viserio\\Component\\Contract\\Exception\\Displayer", "docstring_tokens": ["Get", "the", "displayer", "instance", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Exception/Http/Handler.php#L218-L241", "partition": "test"}
{"repo": "perminder-klair/kato-core", "path": "modules/media/models/Media.php", "func_name": "Media.renderImage", "original_string": "public function renderImage($data = [])\n    {\n        ini_set('memory_limit', '512M');\n        $cacheFile = Yii::getAlias('@cachePath/' . $this->filename);\n        $baseSource = $this->baseSource;\n\n        if (!isset($data['width']) && !isset($data['height'])) {\n            if (!file_exists(Yii::getAlias('@root') . Yii::getAlias('@cacheDir/' . $this->filename))) {\n                //only cache if not available\n                try {\n                    $image = Image::getImagine();\n                    $newImage = $image->open($baseSource);\n                    $newImage->save($cacheFile);\n                } catch (\\Exception $e) {\n                    //seems like image is corrupt!\n                }\n            }\n\n            return Yii::getAlias('@cacheDir/' . $this->filename);\n        } else {\n            $path_parts = pathinfo($cacheFile);\n            $newFileName = $path_parts['filename'] . '-' . $data['width'] . '-' . $data['height'] . '.' . $path_parts['extension'];\n            //http://imagine.readthedocs.org/en/latest/\n            if (!file_exists(Yii::getAlias('@root') . Yii::getAlias('@cacheDir/' . $newFileName))) {\n                //only cache if not available\n                try {\n                    Image::thumbnail($baseSource, $data['width'], $data['height'])\n                        ->save(Yii::getAlias('@cachePath/' . $newFileName));\n                } catch (\\Exception $e) {\n                    //seems like image is corrupt!\n                }\n            }\n\n            if (isset($data['imgTag'])) {\n                return Html::img(Yii::getAlias('@cacheDir/' . $newFileName));\n            } else {\n                return Yii::getAlias('@cacheDir/' . $newFileName);\n            }\n        }\n    }", "language": "php", "code": "public function renderImage($data = [])\n    {\n        ini_set('memory_limit', '512M');\n        $cacheFile = Yii::getAlias('@cachePath/' . $this->filename);\n        $baseSource = $this->baseSource;\n\n        if (!isset($data['width']) && !isset($data['height'])) {\n            if (!file_exists(Yii::getAlias('@root') . Yii::getAlias('@cacheDir/' . $this->filename))) {\n                //only cache if not available\n                try {\n                    $image = Image::getImagine();\n                    $newImage = $image->open($baseSource);\n                    $newImage->save($cacheFile);\n                } catch (\\Exception $e) {\n                    //seems like image is corrupt!\n                }\n            }\n\n            return Yii::getAlias('@cacheDir/' . $this->filename);\n        } else {\n            $path_parts = pathinfo($cacheFile);\n            $newFileName = $path_parts['filename'] . '-' . $data['width'] . '-' . $data['height'] . '.' . $path_parts['extension'];\n            //http://imagine.readthedocs.org/en/latest/\n            if (!file_exists(Yii::getAlias('@root') . Yii::getAlias('@cacheDir/' . $newFileName))) {\n                //only cache if not available\n                try {\n                    Image::thumbnail($baseSource, $data['width'], $data['height'])\n                        ->save(Yii::getAlias('@cachePath/' . $newFileName));\n                } catch (\\Exception $e) {\n                    //seems like image is corrupt!\n                }\n            }\n\n            if (isset($data['imgTag'])) {\n                return Html::img(Yii::getAlias('@cacheDir/' . $newFileName));\n            } else {\n                return Yii::getAlias('@cacheDir/' . $newFileName);\n            }\n        }\n    }", "code_tokens": ["public", "function", "renderImage", "(", "$", "data", "=", "[", "]", ")", "{", "ini_set", "(", "'memory_limit'", ",", "'512M'", ")", ";", "$", "cacheFile", "=", "Yii", "::", "getAlias", "(", "'@cachePath/'", ".", "$", "this", "->", "filename", ")", ";", "$", "baseSource", "=", "$", "this", "->", "baseSource", ";", "if", "(", "!", "isset", "(", "$", "data", "[", "'width'", "]", ")", "&&", "!", "isset", "(", "$", "data", "[", "'height'", "]", ")", ")", "{", "if", "(", "!", "file_exists", "(", "Yii", "::", "getAlias", "(", "'@root'", ")", ".", "Yii", "::", "getAlias", "(", "'@cacheDir/'", ".", "$", "this", "->", "filename", ")", ")", ")", "{", "//only cache if not available", "try", "{", "$", "image", "=", "Image", "::", "getImagine", "(", ")", ";", "$", "newImage", "=", "$", "image", "->", "open", "(", "$", "baseSource", ")", ";", "$", "newImage", "->", "save", "(", "$", "cacheFile", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "//seems like image is corrupt!", "}", "}", "return", "Yii", "::", "getAlias", "(", "'@cacheDir/'", ".", "$", "this", "->", "filename", ")", ";", "}", "else", "{", "$", "path_parts", "=", "pathinfo", "(", "$", "cacheFile", ")", ";", "$", "newFileName", "=", "$", "path_parts", "[", "'filename'", "]", ".", "'-'", ".", "$", "data", "[", "'width'", "]", ".", "'-'", ".", "$", "data", "[", "'height'", "]", ".", "'.'", ".", "$", "path_parts", "[", "'extension'", "]", ";", "//http://imagine.readthedocs.org/en/latest/", "if", "(", "!", "file_exists", "(", "Yii", "::", "getAlias", "(", "'@root'", ")", ".", "Yii", "::", "getAlias", "(", "'@cacheDir/'", ".", "$", "newFileName", ")", ")", ")", "{", "//only cache if not available", "try", "{", "Image", "::", "thumbnail", "(", "$", "baseSource", ",", "$", "data", "[", "'width'", "]", ",", "$", "data", "[", "'height'", "]", ")", "->", "save", "(", "Yii", "::", "getAlias", "(", "'@cachePath/'", ".", "$", "newFileName", ")", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "//seems like image is corrupt!", "}", "}", "if", "(", "isset", "(", "$", "data", "[", "'imgTag'", "]", ")", ")", "{", "return", "Html", "::", "img", "(", "Yii", "::", "getAlias", "(", "'@cacheDir/'", ".", "$", "newFileName", ")", ")", ";", "}", "else", "{", "return", "Yii", "::", "getAlias", "(", "'@cacheDir/'", ".", "$", "newFileName", ")", ";", "}", "}", "}"], "docstring": "Renders all supported image files\n@param array $data\n@return bool|string", "docstring_tokens": ["Renders", "all", "supported", "image", "files"], "sha": "168227027b857c90e8c5f24a2d591796b49ac9e7", "url": "https://github.com/perminder-klair/kato-core/blob/168227027b857c90e8c5f24a2d591796b49ac9e7/modules/media/models/Media.php#L238-L277", "partition": "test"}
{"repo": "nattreid/utils", "path": "src/Strings.php", "func_name": "Strings.findEmails", "original_string": "public static function findEmails(string $text): array\n\t{\n\t\t$result = [];\n\t\tpreg_match_all('/[a-z\\d._%+-]+@[a-z\\d.-]+\\.[a-z]{2,4}\\b/i', $text, $result);\n\t\treturn isset($result[0]) ? $result[0] : [];\n\t}", "language": "php", "code": "public static function findEmails(string $text): array\n\t{\n\t\t$result = [];\n\t\tpreg_match_all('/[a-z\\d._%+-]+@[a-z\\d.-]+\\.[a-z]{2,4}\\b/i', $text, $result);\n\t\treturn isset($result[0]) ? $result[0] : [];\n\t}", "code_tokens": ["public", "static", "function", "findEmails", "(", "string", "$", "text", ")", ":", "array", "{", "$", "result", "=", "[", "]", ";", "preg_match_all", "(", "'/[a-z\\d._%+-]+@[a-z\\d.-]+\\.[a-z]{2,4}\\b/i'", ",", "$", "text", ",", "$", "result", ")", ";", "return", "isset", "(", "$", "result", "[", "0", "]", ")", "?", "$", "result", "[", "0", "]", ":", "[", "]", ";", "}"], "docstring": "Vrati email z textu\n@param string $text\n@return string[]", "docstring_tokens": ["Vrati", "email", "z", "textu"], "sha": "117d6d67f49de52091ae05cd38e142ef6e92ea01", "url": "https://github.com/nattreid/utils/blob/117d6d67f49de52091ae05cd38e142ef6e92ea01/src/Strings.php#L50-L55", "partition": "test"}
{"repo": "clean/data", "path": "src/Collection.php", "func_name": "Collection.search", "original_string": "public function search($field, $value, $strict = false)\n    {\n        $value = is_array($value) ? $value : array($value);\n        foreach ($this as $key => $entity) {\n            if (isset($entity->$field) && in_array($entity->$field, $value, $strict)) {\n                return $key;\n            }\n        }\n\n        return false;\n    }", "language": "php", "code": "public function search($field, $value, $strict = false)\n    {\n        $value = is_array($value) ? $value : array($value);\n        foreach ($this as $key => $entity) {\n            if (isset($entity->$field) && in_array($entity->$field, $value, $strict)) {\n                return $key;\n            }\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "search", "(", "$", "field", ",", "$", "value", ",", "$", "strict", "=", "false", ")", "{", "$", "value", "=", "is_array", "(", "$", "value", ")", "?", "$", "value", ":", "array", "(", "$", "value", ")", ";", "foreach", "(", "$", "this", "as", "$", "key", "=>", "$", "entity", ")", "{", "if", "(", "isset", "(", "$", "entity", "->", "$", "field", ")", "&&", "in_array", "(", "$", "entity", "->", "$", "field", ",", "$", "value", ",", "$", "strict", ")", ")", "{", "return", "$", "key", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Search for an element with given property and value\n\n@param string $field name of property\n@param mixed $value value to compare\n@param bool $strict compare value and type of property\n\n@return integer|string|false", "docstring_tokens": ["Search", "for", "an", "element", "with", "given", "property", "and", "value"], "sha": "3f5d50bc2bda6d596dc970587da8d3e7a7997d59", "url": "https://github.com/clean/data/blob/3f5d50bc2bda6d596dc970587da8d3e7a7997d59/src/Collection.php#L273-L283", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Session/Session.php", "func_name": "Session.markAsFlashdata", "original_string": "public function markAsFlashdata($key): bool\n\t{\n\t\tif (is_array($key))\n\t\t{\n\t\t\tfor ($i = 0, $c = count($key); $i < $c; $i ++)\n\t\t\t{\n\t\t\t\tif (! isset($_SESSION[$key[$i]]))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$new = array_fill_keys($key, 'new');\n\n\t\t\t$_SESSION['__ci_vars'] = isset($_SESSION['__ci_vars']) ? array_merge($_SESSION['__ci_vars'], $new) : $new;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (! isset($_SESSION[$key]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$_SESSION['__ci_vars'][$key] = 'new';\n\n\t\treturn true;\n\t}", "language": "php", "code": "public function markAsFlashdata($key): bool\n\t{\n\t\tif (is_array($key))\n\t\t{\n\t\t\tfor ($i = 0, $c = count($key); $i < $c; $i ++)\n\t\t\t{\n\t\t\t\tif (! isset($_SESSION[$key[$i]]))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$new = array_fill_keys($key, 'new');\n\n\t\t\t$_SESSION['__ci_vars'] = isset($_SESSION['__ci_vars']) ? array_merge($_SESSION['__ci_vars'], $new) : $new;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (! isset($_SESSION[$key]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$_SESSION['__ci_vars'][$key] = 'new';\n\n\t\treturn true;\n\t}", "code_tokens": ["public", "function", "markAsFlashdata", "(", "$", "key", ")", ":", "bool", "{", "if", "(", "is_array", "(", "$", "key", ")", ")", "{", "for", "(", "$", "i", "=", "0", ",", "$", "c", "=", "count", "(", "$", "key", ")", ";", "$", "i", "<", "$", "c", ";", "$", "i", "++", ")", "{", "if", "(", "!", "isset", "(", "$", "_SESSION", "[", "$", "key", "[", "$", "i", "]", "]", ")", ")", "{", "return", "false", ";", "}", "}", "$", "new", "=", "array_fill_keys", "(", "$", "key", ",", "'new'", ")", ";", "$", "_SESSION", "[", "'__ci_vars'", "]", "=", "isset", "(", "$", "_SESSION", "[", "'__ci_vars'", "]", ")", "?", "array_merge", "(", "$", "_SESSION", "[", "'__ci_vars'", "]", ",", "$", "new", ")", ":", "$", "new", ";", "return", "true", ";", "}", "if", "(", "!", "isset", "(", "$", "_SESSION", "[", "$", "key", "]", ")", ")", "{", "return", "false", ";", "}", "$", "_SESSION", "[", "'__ci_vars'", "]", "[", "$", "key", "]", "=", "'new'", ";", "return", "true", ";", "}"], "docstring": "Mark a session property or properties as flashdata.\n\n@param array|string $key Property identifier or array of them\n\n@return boolean False if any of the properties are not already set", "docstring_tokens": ["Mark", "a", "session", "property", "or", "properties", "as", "flashdata", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Session/Session.php#L702-L729", "partition": "test"}
{"repo": "checkdomain/Comodo", "path": "lib/Util.php", "func_name": "Util.sslChecker", "original_string": "public function sslChecker(array $params)\n    {\n        // Response is always new line encoded\n        $responseArray = $this\n            ->communicationAdapter\n            ->sendToApi(\n                self::COMODO_SSLCHECKER,\n                $params,\n                CommunicationAdapter::RESPONSE_URL_ENCODED\n            );\n\n        if ($responseArray['error_code'] == 0) {\n            $result = new SslCheckerResult();\n\n            $result\n                ->setServerUrl($responseArray['server_url'])\n                ->setServerDomainIsIDN($responseArray['server_domain_isIDN'])\n                ->setServerDomainUtf8($responseArray['server_domain_utf8'])\n                ->setServerDomainAce($responseArray['server_domain_ace'])\n                ->setServerIp($responseArray['server_ip'])\n                ->setServerPort($responseArray['server_port'])\n                ->setServerSoftware($responseArray['server_software'])\n                ->setCertNotBeforeFromUnixTimestamp($responseArray['cert_notBefore'])\n                ->setCertNotAfterFromUnixTimestamp($responseArray['cert_notAfter'])\n                ->setCertValidityNotBefore($responseArray['cert_validity_notBefore'])\n                ->setCertValidityNotAfter($responseArray['cert_validity_notAfter'])\n                ->setCertKeyAlgorithm($responseArray['cert_key_algorithm'])\n                ->setCertKeySize($responseArray['cert_key_size'])\n                ->setCertSubjectCN($responseArray['cert_subject_DN'])\n                ->setCertSubjectCN($responseArray['cert_subject_CN'])\n                ->setCertSubjectOU($responseArray['cert_subject_OU'])\n                ->setCertSubjectOrganization($responseArray['cert_subject_O'])\n                ->setCertSubjectStreetAddress1($responseArray['cert_subject_streetAddress_1'])\n                ->setCertSubjectStreetAddress2($responseArray['cert_subject_streetAddress_2'])\n                ->setCertSubjectStreetAddress3($responseArray['cert_subject_streetAddress_3'])\n                ->setCertSubjectLocality($responseArray['cert_subject_L'])\n                ->setCertSubjectState($responseArray['cert_subject_S'])\n                ->setCertSubjectPostalCode($responseArray['cert_subject_postalCode'])\n                ->setCertSubjectCountry($responseArray['cert_subject_C'])\n                ->setCertIsMultiDomain($responseArray['cert_isMultiDomain'])\n                ->setCertIsWildcard($responseArray['cert_isWildcard'])\n                ->setCertIssuerDN($responseArray['cert_issuer_DN'])\n                ->setCertIssuerCN($responseArray['cert_issuer_CN'])\n                ->setCertIssuerOrganization($responseArray['cert_issuer_O'])\n                ->setCertIssuerOrganization($responseArray['cert_issuer_C'])\n                ->setCertIssuerBrand($responseArray['cert_issuer_brand'])\n                ->setCertPolicyOID($responseArray['cert_policyOID'])\n                ->setCertValidation($responseArray['cert_validation']);\n\n            return $result;\n        } else {\n            throw $this->createException($responseArray);\n        }\n    }", "language": "php", "code": "public function sslChecker(array $params)\n    {\n        // Response is always new line encoded\n        $responseArray = $this\n            ->communicationAdapter\n            ->sendToApi(\n                self::COMODO_SSLCHECKER,\n                $params,\n                CommunicationAdapter::RESPONSE_URL_ENCODED\n            );\n\n        if ($responseArray['error_code'] == 0) {\n            $result = new SslCheckerResult();\n\n            $result\n                ->setServerUrl($responseArray['server_url'])\n                ->setServerDomainIsIDN($responseArray['server_domain_isIDN'])\n                ->setServerDomainUtf8($responseArray['server_domain_utf8'])\n                ->setServerDomainAce($responseArray['server_domain_ace'])\n                ->setServerIp($responseArray['server_ip'])\n                ->setServerPort($responseArray['server_port'])\n                ->setServerSoftware($responseArray['server_software'])\n                ->setCertNotBeforeFromUnixTimestamp($responseArray['cert_notBefore'])\n                ->setCertNotAfterFromUnixTimestamp($responseArray['cert_notAfter'])\n                ->setCertValidityNotBefore($responseArray['cert_validity_notBefore'])\n                ->setCertValidityNotAfter($responseArray['cert_validity_notAfter'])\n                ->setCertKeyAlgorithm($responseArray['cert_key_algorithm'])\n                ->setCertKeySize($responseArray['cert_key_size'])\n                ->setCertSubjectCN($responseArray['cert_subject_DN'])\n                ->setCertSubjectCN($responseArray['cert_subject_CN'])\n                ->setCertSubjectOU($responseArray['cert_subject_OU'])\n                ->setCertSubjectOrganization($responseArray['cert_subject_O'])\n                ->setCertSubjectStreetAddress1($responseArray['cert_subject_streetAddress_1'])\n                ->setCertSubjectStreetAddress2($responseArray['cert_subject_streetAddress_2'])\n                ->setCertSubjectStreetAddress3($responseArray['cert_subject_streetAddress_3'])\n                ->setCertSubjectLocality($responseArray['cert_subject_L'])\n                ->setCertSubjectState($responseArray['cert_subject_S'])\n                ->setCertSubjectPostalCode($responseArray['cert_subject_postalCode'])\n                ->setCertSubjectCountry($responseArray['cert_subject_C'])\n                ->setCertIsMultiDomain($responseArray['cert_isMultiDomain'])\n                ->setCertIsWildcard($responseArray['cert_isWildcard'])\n                ->setCertIssuerDN($responseArray['cert_issuer_DN'])\n                ->setCertIssuerCN($responseArray['cert_issuer_CN'])\n                ->setCertIssuerOrganization($responseArray['cert_issuer_O'])\n                ->setCertIssuerOrganization($responseArray['cert_issuer_C'])\n                ->setCertIssuerBrand($responseArray['cert_issuer_brand'])\n                ->setCertPolicyOID($responseArray['cert_policyOID'])\n                ->setCertValidation($responseArray['cert_validation']);\n\n            return $result;\n        } else {\n            throw $this->createException($responseArray);\n        }\n    }", "code_tokens": ["public", "function", "sslChecker", "(", "array", "$", "params", ")", "{", "// Response is always new line encoded", "$", "responseArray", "=", "$", "this", "->", "communicationAdapter", "->", "sendToApi", "(", "self", "::", "COMODO_SSLCHECKER", ",", "$", "params", ",", "CommunicationAdapter", "::", "RESPONSE_URL_ENCODED", ")", ";", "if", "(", "$", "responseArray", "[", "'error_code'", "]", "==", "0", ")", "{", "$", "result", "=", "new", "SslCheckerResult", "(", ")", ";", "$", "result", "->", "setServerUrl", "(", "$", "responseArray", "[", "'server_url'", "]", ")", "->", "setServerDomainIsIDN", "(", "$", "responseArray", "[", "'server_domain_isIDN'", "]", ")", "->", "setServerDomainUtf8", "(", "$", "responseArray", "[", "'server_domain_utf8'", "]", ")", "->", "setServerDomainAce", "(", "$", "responseArray", "[", "'server_domain_ace'", "]", ")", "->", "setServerIp", "(", "$", "responseArray", "[", "'server_ip'", "]", ")", "->", "setServerPort", "(", "$", "responseArray", "[", "'server_port'", "]", ")", "->", "setServerSoftware", "(", "$", "responseArray", "[", "'server_software'", "]", ")", "->", "setCertNotBeforeFromUnixTimestamp", "(", "$", "responseArray", "[", "'cert_notBefore'", "]", ")", "->", "setCertNotAfterFromUnixTimestamp", "(", "$", "responseArray", "[", "'cert_notAfter'", "]", ")", "->", "setCertValidityNotBefore", "(", "$", "responseArray", "[", "'cert_validity_notBefore'", "]", ")", "->", "setCertValidityNotAfter", "(", "$", "responseArray", "[", "'cert_validity_notAfter'", "]", ")", "->", "setCertKeyAlgorithm", "(", "$", "responseArray", "[", "'cert_key_algorithm'", "]", ")", "->", "setCertKeySize", "(", "$", "responseArray", "[", "'cert_key_size'", "]", ")", "->", "setCertSubjectCN", "(", "$", "responseArray", "[", "'cert_subject_DN'", "]", ")", "->", "setCertSubjectCN", "(", "$", "responseArray", "[", "'cert_subject_CN'", "]", ")", "->", "setCertSubjectOU", "(", "$", "responseArray", "[", "'cert_subject_OU'", "]", ")", "->", "setCertSubjectOrganization", "(", "$", "responseArray", "[", "'cert_subject_O'", "]", ")", "->", "setCertSubjectStreetAddress1", "(", "$", "responseArray", "[", "'cert_subject_streetAddress_1'", "]", ")", "->", "setCertSubjectStreetAddress2", "(", "$", "responseArray", "[", "'cert_subject_streetAddress_2'", "]", ")", "->", "setCertSubjectStreetAddress3", "(", "$", "responseArray", "[", "'cert_subject_streetAddress_3'", "]", ")", "->", "setCertSubjectLocality", "(", "$", "responseArray", "[", "'cert_subject_L'", "]", ")", "->", "setCertSubjectState", "(", "$", "responseArray", "[", "'cert_subject_S'", "]", ")", "->", "setCertSubjectPostalCode", "(", "$", "responseArray", "[", "'cert_subject_postalCode'", "]", ")", "->", "setCertSubjectCountry", "(", "$", "responseArray", "[", "'cert_subject_C'", "]", ")", "->", "setCertIsMultiDomain", "(", "$", "responseArray", "[", "'cert_isMultiDomain'", "]", ")", "->", "setCertIsWildcard", "(", "$", "responseArray", "[", "'cert_isWildcard'", "]", ")", "->", "setCertIssuerDN", "(", "$", "responseArray", "[", "'cert_issuer_DN'", "]", ")", "->", "setCertIssuerCN", "(", "$", "responseArray", "[", "'cert_issuer_CN'", "]", ")", "->", "setCertIssuerOrganization", "(", "$", "responseArray", "[", "'cert_issuer_O'", "]", ")", "->", "setCertIssuerOrganization", "(", "$", "responseArray", "[", "'cert_issuer_C'", "]", ")", "->", "setCertIssuerBrand", "(", "$", "responseArray", "[", "'cert_issuer_brand'", "]", ")", "->", "setCertPolicyOID", "(", "$", "responseArray", "[", "'cert_policyOID'", "]", ")", "->", "setCertValidation", "(", "$", "responseArray", "[", "'cert_validation'", "]", ")", ";", "return", "$", "result", ";", "}", "else", "{", "throw", "$", "this", "->", "createException", "(", "$", "responseArray", ")", ";", "}", "}"], "docstring": "Function to do a sslcheck\n\nhttps://secure.comodo.net/api/pdf/latest/SSLChecker.pdf\n\n@param array $params\n\n@return GetMDCDomainDetailsResult\n\n@throws Model\\Exception\\AccountException\n@throws Model\\Exception\\ArgumentException\n@throws Model\\Exception\\CSRException\n@throws Model\\Exception\\RequestException\n@throws Model\\Exception\\UnknownApiException\n@throws Model\\Exception\\UnknownException", "docstring_tokens": ["Function", "to", "do", "a", "sslcheck"], "sha": "e5d4a4d9b0c3bde619d0fe8581747e8b7c10d942", "url": "https://github.com/checkdomain/Comodo/blob/e5d4a4d9b0c3bde619d0fe8581747e8b7c10d942/lib/Util.php#L583-L636", "partition": "test"}
{"repo": "phpmetrics/PhpMetrics", "path": "src/Hal/Component/File/Finder.php", "func_name": "Finder.fetch", "original_string": "public function fetch(array $paths)\n    {\n        $files = array();\n        foreach ($paths as $path) {\n            if (is_dir($path)) {\n                $path = rtrim($path, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n                $directory = new RecursiveDirectoryIterator($path, $this->flags);\n                $iterator = new RecursiveIteratorIterator($directory);\n\n                $filterRegex = sprintf(\n                    '`^%s%s%s$`',\n                    preg_quote($path, '`'),\n                    !empty($this->excludedDirs) ? '((?!' . implode('|', array_map('preg_quote', $this->excludedDirs)) . ').)+' : '.+',\n                    '\\.(' . implode('|', $this->extensions) . ')'\n                );\n\n                $filteredIterator = new RegexIterator(\n                    $iterator,\n                    $filterRegex,\n                    \\RecursiveRegexIterator::GET_MATCH\n                );\n\n                foreach ($filteredIterator as $file) {\n                    $files[] = $file[0];\n                }\n            } elseif (is_file($path)) {\n                $files[] = $path;\n            }\n        }\n        return $files;\n    }", "language": "php", "code": "public function fetch(array $paths)\n    {\n        $files = array();\n        foreach ($paths as $path) {\n            if (is_dir($path)) {\n                $path = rtrim($path, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n                $directory = new RecursiveDirectoryIterator($path, $this->flags);\n                $iterator = new RecursiveIteratorIterator($directory);\n\n                $filterRegex = sprintf(\n                    '`^%s%s%s$`',\n                    preg_quote($path, '`'),\n                    !empty($this->excludedDirs) ? '((?!' . implode('|', array_map('preg_quote', $this->excludedDirs)) . ').)+' : '.+',\n                    '\\.(' . implode('|', $this->extensions) . ')'\n                );\n\n                $filteredIterator = new RegexIterator(\n                    $iterator,\n                    $filterRegex,\n                    \\RecursiveRegexIterator::GET_MATCH\n                );\n\n                foreach ($filteredIterator as $file) {\n                    $files[] = $file[0];\n                }\n            } elseif (is_file($path)) {\n                $files[] = $path;\n            }\n        }\n        return $files;\n    }", "code_tokens": ["public", "function", "fetch", "(", "array", "$", "paths", ")", "{", "$", "files", "=", "array", "(", ")", ";", "foreach", "(", "$", "paths", "as", "$", "path", ")", "{", "if", "(", "is_dir", "(", "$", "path", ")", ")", "{", "$", "path", "=", "rtrim", "(", "$", "path", ",", "DIRECTORY_SEPARATOR", ")", ".", "DIRECTORY_SEPARATOR", ";", "$", "directory", "=", "new", "RecursiveDirectoryIterator", "(", "$", "path", ",", "$", "this", "->", "flags", ")", ";", "$", "iterator", "=", "new", "RecursiveIteratorIterator", "(", "$", "directory", ")", ";", "$", "filterRegex", "=", "sprintf", "(", "'`^%s%s%s$`'", ",", "preg_quote", "(", "$", "path", ",", "'`'", ")", ",", "!", "empty", "(", "$", "this", "->", "excludedDirs", ")", "?", "'((?!'", ".", "implode", "(", "'|'", ",", "array_map", "(", "'preg_quote'", ",", "$", "this", "->", "excludedDirs", ")", ")", ".", "').)+'", ":", "'.+'", ",", "'\\.('", ".", "implode", "(", "'|'", ",", "$", "this", "->", "extensions", ")", ".", "')'", ")", ";", "$", "filteredIterator", "=", "new", "RegexIterator", "(", "$", "iterator", ",", "$", "filterRegex", ",", "\\", "RecursiveRegexIterator", "::", "GET_MATCH", ")", ";", "foreach", "(", "$", "filteredIterator", "as", "$", "file", ")", "{", "$", "files", "[", "]", "=", "$", "file", "[", "0", "]", ";", "}", "}", "elseif", "(", "is_file", "(", "$", "path", ")", ")", "{", "$", "files", "[", "]", "=", "$", "path", ";", "}", "}", "return", "$", "files", ";", "}"], "docstring": "Find files in path\n\n@param array $paths\n@return array\n@internal param string $path", "docstring_tokens": ["Find", "files", "in", "path"], "sha": "39095017413805cd6d9ada16cfaf8aaffcb2fec4", "url": "https://github.com/phpmetrics/PhpMetrics/blob/39095017413805cd6d9ada16cfaf8aaffcb2fec4/src/Hal/Component/File/Finder.php#L69-L99", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Profiler/DataCollector/AbstractDataCollector.php", "func_name": "AbstractDataCollector.getDumper", "original_string": "private static function getDumper(): HtmlDumper\n    {\n        if (self::$htmlDumper === null) {\n            self::$htmlDumperOutput = new HtmlDumperOutput();\n\n            // re-use the same var-dumper instance, so it won't re-render the global styles/scripts on each dump.\n            self::$htmlDumper = new HtmlDumper(self::$htmlDumperOutput);\n        }\n\n        return self::$htmlDumper;\n    }", "language": "php", "code": "private static function getDumper(): HtmlDumper\n    {\n        if (self::$htmlDumper === null) {\n            self::$htmlDumperOutput = new HtmlDumperOutput();\n\n            // re-use the same var-dumper instance, so it won't re-render the global styles/scripts on each dump.\n            self::$htmlDumper = new HtmlDumper(self::$htmlDumperOutput);\n        }\n\n        return self::$htmlDumper;\n    }", "code_tokens": ["private", "static", "function", "getDumper", "(", ")", ":", "HtmlDumper", "{", "if", "(", "self", "::", "$", "htmlDumper", "===", "null", ")", "{", "self", "::", "$", "htmlDumperOutput", "=", "new", "HtmlDumperOutput", "(", ")", ";", "// re-use the same var-dumper instance, so it won't re-render the global styles/scripts on each dump.", "self", "::", "$", "htmlDumper", "=", "new", "HtmlDumper", "(", "self", "::", "$", "htmlDumperOutput", ")", ";", "}", "return", "self", "::", "$", "htmlDumper", ";", "}"], "docstring": "Get a HtmlDumper instance.\n\n@return \\Viserio\\Component\\Support\\Debug\\HtmlDumper", "docstring_tokens": ["Get", "a", "HtmlDumper", "instance", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Profiler/DataCollector/AbstractDataCollector.php#L353-L363", "partition": "test"}
{"repo": "daFish/pondtunes", "path": "src/Pond/Tunes/Tunes.php", "func_name": "Tunes.setResultFormat", "original_string": "public function setResultFormat($format = self::RESULT_ARRAY)\n    {\n        if (in_array($format, $this->resultFormats)) {\n            $this->resultFormat = $format;\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function setResultFormat($format = self::RESULT_ARRAY)\n    {\n        if (in_array($format, $this->resultFormats)) {\n            $this->resultFormat = $format;\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setResultFormat", "(", "$", "format", "=", "self", "::", "RESULT_ARRAY", ")", "{", "if", "(", "in_array", "(", "$", "format", ",", "$", "this", "->", "resultFormats", ")", ")", "{", "$", "this", "->", "resultFormat", "=", "$", "format", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Set the result format\n\n@param string $format\n\n@return Tunes", "docstring_tokens": ["Set", "the", "result", "format"], "sha": "619a1c2ca06b853916c8620a28052a7aae2d8f54", "url": "https://github.com/daFish/pondtunes/blob/619a1c2ca06b853916c8620a28052a7aae2d8f54/src/Pond/Tunes/Tunes.php#L596-L603", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/HttpClient/Provider/StreamContext.php", "func_name": "StreamContext.buildHeaders", "original_string": "protected function buildHeaders()\n    {\n        $headers = $this->header->build();\n\n        return $this->setOption('header', implode(PHP_EOL, $headers));\n    }", "language": "php", "code": "protected function buildHeaders()\n    {\n        $headers = $this->header->build();\n\n        return $this->setOption('header', implode(PHP_EOL, $headers));\n    }", "code_tokens": ["protected", "function", "buildHeaders", "(", ")", "{", "$", "headers", "=", "$", "this", "->", "header", "->", "build", "(", ")", ";", "return", "$", "this", "->", "setOption", "(", "'header'", ",", "implode", "(", "PHP_EOL", ",", "$", "headers", ")", ")", ";", "}"], "docstring": "Construit les headers de la requete.\n\n@return $this", "docstring_tokens": ["Construit", "les", "headers", "de", "la", "requete", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/HttpClient/Provider/StreamContext.php#L185-L190", "partition": "test"}
{"repo": "VitexSoftware/EaseFramework", "path": "src/Ease/Shared.php", "func_name": "Shared.&", "original_string": "public static function &db($pdo = null)\n    {\n        $shared = self::instanced();\n        if (is_object($pdo)) {\n            $shared->dbLink = &$pdo;\n        }\n        if (!is_object($shared->dbLink)) {\n            $shared->dbLink = self::db(SQL\\PDO::singleton(is_array($pdo) ? $pdo : [\n                ]));\n        }\n\n        return $shared->dbLink;\n    }", "language": "php", "code": "public static function &db($pdo = null)\n    {\n        $shared = self::instanced();\n        if (is_object($pdo)) {\n            $shared->dbLink = &$pdo;\n        }\n        if (!is_object($shared->dbLink)) {\n            $shared->dbLink = self::db(SQL\\PDO::singleton(is_array($pdo) ? $pdo : [\n                ]));\n        }\n\n        return $shared->dbLink;\n    }", "code_tokens": ["public", "static", "function", "&", "db", "(", "$", "pdo", "=", "null", ")", "{", "$", "shared", "=", "self", "::", "instanced", "(", ")", ";", "if", "(", "is_object", "(", "$", "pdo", ")", ")", "{", "$", "shared", "->", "dbLink", "=", "&", "$", "pdo", ";", "}", "if", "(", "!", "is_object", "(", "$", "shared", "->", "dbLink", ")", ")", "{", "$", "shared", "->", "dbLink", "=", "self", "::", "db", "(", "SQL", "\\", "PDO", "::", "singleton", "(", "is_array", "(", "$", "pdo", ")", "?", "$", "pdo", ":", "[", "]", ")", ")", ";", "}", "return", "$", "shared", "->", "dbLink", ";", "}"], "docstring": "Returns database object instance.\n\n@return SQL\\PDO", "docstring_tokens": ["Returns", "database", "object", "instance", "."], "sha": "700693949ee6c858d40365c6d3c3825e8a742397", "url": "https://github.com/VitexSoftware/EaseFramework/blob/700693949ee6c858d40365c6d3c3825e8a742397/src/Ease/Shared.php#L209-L221", "partition": "test"}
{"repo": "php-carteblanche/core", "path": "src/CarteBlanche/Library/StorageEngine/Database.php", "func_name": "Database.where_in", "original_string": "public function where_in($arg = null, $val = null, $operator = 'OR')\n    {\n        $this->where .=\n            (strlen($this->where) ? \" {$operator} \" : '')\n            .$arg\n            .( !empty($val) && is_array($val) ? \" IN (\".self::escape( implode(',',$val) ).\")\" : '' );\n        return $this;\n    }", "language": "php", "code": "public function where_in($arg = null, $val = null, $operator = 'OR')\n    {\n        $this->where .=\n            (strlen($this->where) ? \" {$operator} \" : '')\n            .$arg\n            .( !empty($val) && is_array($val) ? \" IN (\".self::escape( implode(',',$val) ).\")\" : '' );\n        return $this;\n    }", "code_tokens": ["public", "function", "where_in", "(", "$", "arg", "=", "null", ",", "$", "val", "=", "null", ",", "$", "operator", "=", "'OR'", ")", "{", "$", "this", "->", "where", ".=", "(", "strlen", "(", "$", "this", "->", "where", ")", "?", "\" {$operator} \"", ":", "''", ")", ".", "$", "arg", ".", "(", "!", "empty", "(", "$", "val", ")", "&&", "is_array", "(", "$", "val", ")", "?", "\" IN (\"", ".", "self", "::", "escape", "(", "implode", "(", "','", ",", "$", "val", ")", ")", ".", "\")\"", ":", "''", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Alias for a WHERE statement with a IN sign\n\n@param string $arg The argument of the WHERE statement\n@param array $val The array of values to select\n@param string $operator An operator used if a WHERE statement was already set\n@return object The whole object itself for method chaining\n@see self::where()", "docstring_tokens": ["Alias", "for", "a", "WHERE", "statement", "with", "a", "IN", "sign"], "sha": "b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343", "url": "https://github.com/php-carteblanche/core/blob/b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343/src/CarteBlanche/Library/StorageEngine/Database.php#L601-L608", "partition": "test"}
{"repo": "antaresproject/acl", "path": "src/Http/Breadcrumb/Breadcrumb.php", "func_name": "Breadcrumb.onRoleCreateOrEdit", "original_string": "public function onRoleCreateOrEdit(Model $model = null)\n    {\n        $this->onList();\n        Breadcrumbs::register('edit-role', function($breadcrumbs) use($model) {\n            $breadcrumbs->parent('roles-list');\n            $exists = is_null($model) ? false : $model->exists;\n            $name   = ($exists) ? 'Edit Group ' . $model->full_name : 'Add Group';\n            $breadcrumbs->push($name, '#');\n        });\n        view()->share('breadcrumbs', Breadcrumbs::render('edit-role'));\n    }", "language": "php", "code": "public function onRoleCreateOrEdit(Model $model = null)\n    {\n        $this->onList();\n        Breadcrumbs::register('edit-role', function($breadcrumbs) use($model) {\n            $breadcrumbs->parent('roles-list');\n            $exists = is_null($model) ? false : $model->exists;\n            $name   = ($exists) ? 'Edit Group ' . $model->full_name : 'Add Group';\n            $breadcrumbs->push($name, '#');\n        });\n        view()->share('breadcrumbs', Breadcrumbs::render('edit-role'));\n    }", "code_tokens": ["public", "function", "onRoleCreateOrEdit", "(", "Model", "$", "model", "=", "null", ")", "{", "$", "this", "->", "onList", "(", ")", ";", "Breadcrumbs", "::", "register", "(", "'edit-role'", ",", "function", "(", "$", "breadcrumbs", ")", "use", "(", "$", "model", ")", "{", "$", "breadcrumbs", "->", "parent", "(", "'roles-list'", ")", ";", "$", "exists", "=", "is_null", "(", "$", "model", ")", "?", "false", ":", "$", "model", "->", "exists", ";", "$", "name", "=", "(", "$", "exists", ")", "?", "'Edit Group '", ".", "$", "model", "->", "full_name", ":", "'Add Group'", ";", "$", "breadcrumbs", "->", "push", "(", "$", "name", ",", "'#'", ")", ";", "}", ")", ";", "view", "(", ")", "->", "share", "(", "'breadcrumbs'", ",", "Breadcrumbs", "::", "render", "(", "'edit-role'", ")", ")", ";", "}"], "docstring": "on create or edit role\n\n@param Model $model", "docstring_tokens": ["on", "create", "or", "edit", "role"], "sha": "00b77857fd77990083fd0f177f9425f2e7915828", "url": "https://github.com/antaresproject/acl/blob/00b77857fd77990083fd0f177f9425f2e7915828/src/Http/Breadcrumb/Breadcrumb.php#L58-L68", "partition": "test"}
{"repo": "whatthejeff/php-drawille", "path": "src/Drawille/Canvas.php", "func_name": "Canvas.getDotFromMap", "original_string": "private function getDotFromMap($x, $y) {\n        $y = $y % 4;\n        $x = $x % 2;\n\n        return self::$pixel_map[$y < 0 ? 4 + $y : $y][$x < 0 ? 2 + $x : $x];\n    }", "language": "php", "code": "private function getDotFromMap($x, $y) {\n        $y = $y % 4;\n        $x = $x % 2;\n\n        return self::$pixel_map[$y < 0 ? 4 + $y : $y][$x < 0 ? 2 + $x : $x];\n    }", "code_tokens": ["private", "function", "getDotFromMap", "(", "$", "x", ",", "$", "y", ")", "{", "$", "y", "=", "$", "y", "%", "4", ";", "$", "x", "=", "$", "x", "%", "2", ";", "return", "self", "::", "$", "pixel_map", "[", "$", "y", "<", "0", "?", "4", "+", "$", "y", ":", "$", "y", "]", "[", "$", "x", "<", "0", "?", "2", "+", "$", "x", ":", "$", "x", "]", ";", "}"], "docstring": "Gets a dot from the pixel map.\n\n@param integer $x x position\n@param integer $y y position\n\n@return integer dot", "docstring_tokens": ["Gets", "a", "dot", "from", "the", "pixel", "map", "."], "sha": "541b2517a70b988d9f2a6249603f7331c1814957", "url": "https://github.com/whatthejeff/php-drawille/blob/541b2517a70b988d9f2a6249603f7331c1814957/src/Drawille/Canvas.php#L203-L208", "partition": "test"}
{"repo": "sminnee/phpcrawl", "path": "libs/ProcessCommunication/PHPCrawlerProcessCommunication.class.php", "func_name": "PHPCrawlerProcessCommunication.registerChildPID", "original_string": "public function registerChildPID($pid)\r\n  {\r\n    $sem_key = sem_get($this->crawler_uniqid);\r\n    sem_acquire($sem_key);\r\n    \r\n    file_put_contents($this->working_directory.\"pids\", $pid.\"\\n\", FILE_APPEND);\r\n    \r\n    sem_release($sem_key);\r\n  }", "language": "php", "code": "public function registerChildPID($pid)\r\n  {\r\n    $sem_key = sem_get($this->crawler_uniqid);\r\n    sem_acquire($sem_key);\r\n    \r\n    file_put_contents($this->working_directory.\"pids\", $pid.\"\\n\", FILE_APPEND);\r\n    \r\n    sem_release($sem_key);\r\n  }", "code_tokens": ["public", "function", "registerChildPID", "(", "$", "pid", ")", "{", "$", "sem_key", "=", "sem_get", "(", "$", "this", "->", "crawler_uniqid", ")", ";", "sem_acquire", "(", "$", "sem_key", ")", ";", "file_put_contents", "(", "$", "this", "->", "working_directory", ".", "\"pids\"", ",", "$", "pid", ".", "\"\\n\"", ",", "FILE_APPEND", ")", ";", "sem_release", "(", "$", "sem_key", ")", ";", "}"], "docstring": "Registers the PID of a child-process\n\n@param int The IPD", "docstring_tokens": ["Registers", "the", "PID", "of", "a", "child", "-", "process"], "sha": "025c2ce86e5056c09de5a0eb4d76e8cf775dae36", "url": "https://github.com/sminnee/phpcrawl/blob/025c2ce86e5056c09de5a0eb4d76e8cf775dae36/libs/ProcessCommunication/PHPCrawlerProcessCommunication.class.php#L135-L143", "partition": "test"}
{"repo": "maniaplanet/manialive-plugins", "path": "Standard/TeamSpeak/TeamSpeak3/Node/Host.php", "func_name": "Host.serverGetByUid", "original_string": "public function serverGetByUid($uid)\r\n  {\r\n    foreach($this->serverList() as $server)\r\n    {\r\n      if($server[\"virtualserver_unique_identifier\"] == $uid) return $server;\r\n    }\r\n\r\n    throw new \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Adapter\\ServerQuery\\Exception(\"invalid serverID\", 0x400);\r\n  }", "language": "php", "code": "public function serverGetByUid($uid)\r\n  {\r\n    foreach($this->serverList() as $server)\r\n    {\r\n      if($server[\"virtualserver_unique_identifier\"] == $uid) return $server;\r\n    }\r\n\r\n    throw new \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Adapter\\ServerQuery\\Exception(\"invalid serverID\", 0x400);\r\n  }", "code_tokens": ["public", "function", "serverGetByUid", "(", "$", "uid", ")", "{", "foreach", "(", "$", "this", "->", "serverList", "(", ")", "as", "$", "server", ")", "{", "if", "(", "$", "server", "[", "\"virtualserver_unique_identifier\"", "]", "==", "$", "uid", ")", "return", "$", "server", ";", "}", "throw", "new", "\\", "ManiaLivePlugins", "\\", "Standard", "\\", "TeamSpeak", "\\", "TeamSpeak3", "\\", "Adapter", "\\", "ServerQuery", "\\", "Exception", "(", "\"invalid serverID\"", ",", "0x400", ")", ";", "}"], "docstring": "Returns the first TeamSpeak3_Node_Server object matching the given unique identifier.\n\n@param  string $uid\n@throws \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Adapter\\ServerQuery\\Exception\n@return Server", "docstring_tokens": ["Returns", "the", "first", "TeamSpeak3_Node_Server", "object", "matching", "the", "given", "unique", "identifier", "."], "sha": "f3f37da6836fe3d06fed32e75880caa6e9c0496b", "url": "https://github.com/maniaplanet/manialive-plugins/blob/f3f37da6836fe3d06fed32e75880caa6e9c0496b/Standard/TeamSpeak/TeamSpeak3/Node/Host.php#L292-L300", "partition": "test"}
{"repo": "tekkla/core-toolbox", "path": "Core/Toolbox/IO/Classfile.php", "func_name": "Classfile.exists", "original_string": "public function exists(): bool\n    {\n        // convert namespace into path\n        $class = str_replace('\\\\', '/', $this->classname);\n\n        // append .php?\n        if (strpos($class, '.php') === false) {\n            $class .= '.php';\n        }\n\n        $class = $this->replaceDirectorySeperator($class);\n\n        if (!empty($this->basedir)) {\n            $class = $this->basedir .= DIRECTORY_SEPARATOR;\n        }\n\n        return file_exists($class);\n    }", "language": "php", "code": "public function exists(): bool\n    {\n        // convert namespace into path\n        $class = str_replace('\\\\', '/', $this->classname);\n\n        // append .php?\n        if (strpos($class, '.php') === false) {\n            $class .= '.php';\n        }\n\n        $class = $this->replaceDirectorySeperator($class);\n\n        if (!empty($this->basedir)) {\n            $class = $this->basedir .= DIRECTORY_SEPARATOR;\n        }\n\n        return file_exists($class);\n    }", "code_tokens": ["public", "function", "exists", "(", ")", ":", "bool", "{", "// convert namespace into path", "$", "class", "=", "str_replace", "(", "'\\\\'", ",", "'/'", ",", "$", "this", "->", "classname", ")", ";", "// append .php?", "if", "(", "strpos", "(", "$", "class", ",", "'.php'", ")", "===", "false", ")", "{", "$", "class", ".=", "'.php'", ";", "}", "$", "class", "=", "$", "this", "->", "replaceDirectorySeperator", "(", "$", "class", ")", ";", "if", "(", "!", "empty", "(", "$", "this", "->", "basedir", ")", ")", "{", "$", "class", "=", "$", "this", "->", "basedir", ".=", "DIRECTORY_SEPARATOR", ";", "}", "return", "file_exists", "(", "$", "class", ")", ";", "}"], "docstring": "Checks for existing class file of a given classname\n\nTakes care of namespaces.\n\n@return boolean", "docstring_tokens": ["Checks", "for", "existing", "class", "file", "of", "a", "given", "classname"], "sha": "c21ad38c54ff57e7ce57dc01dbfa72b4005889e4", "url": "https://github.com/tekkla/core-toolbox/blob/c21ad38c54ff57e7ce57dc01dbfa72b4005889e4/Core/Toolbox/IO/Classfile.php#L80-L97", "partition": "test"}
{"repo": "atelierspierrot/maths", "path": "src/Maths/Algebra/Matrix.php", "func_name": "Matrix.seekToOffset", "original_string": "public function seekToOffset($offset)\n    {\n        try {\n            if (($this->getArrayFlag() & self::ARRAY_INT) && !is_string($offset)) {\n                return $this->seekToOffsetInteger($offset);\n            } else {\n                return $this->seekToOffsetPositional($offset);\n            }\n        } catch (OutOfRangeException $e) {\n            throw $e;\n        }\n    }", "language": "php", "code": "public function seekToOffset($offset)\n    {\n        try {\n            if (($this->getArrayFlag() & self::ARRAY_INT) && !is_string($offset)) {\n                return $this->seekToOffsetInteger($offset);\n            } else {\n                return $this->seekToOffsetPositional($offset);\n            }\n        } catch (OutOfRangeException $e) {\n            throw $e;\n        }\n    }", "code_tokens": ["public", "function", "seekToOffset", "(", "$", "offset", ")", "{", "try", "{", "if", "(", "(", "$", "this", "->", "getArrayFlag", "(", ")", "&", "self", "::", "ARRAY_INT", ")", "&&", "!", "is_string", "(", "$", "offset", ")", ")", "{", "return", "$", "this", "->", "seekToOffsetInteger", "(", "$", "offset", ")", ";", "}", "else", "{", "return", "$", "this", "->", "seekToOffsetPositional", "(", "$", "offset", ")", ";", "}", "}", "catch", "(", "OutOfRangeException", "$", "e", ")", "{", "throw", "$", "e", ";", "}", "}"], "docstring": "Seek `x` and `y` to an offset\n\n@param   int/string   $offset\n@return  $this\n@throws  OutOfRangeException if the offset is out of range of matrix's indexes", "docstring_tokens": ["Seek", "x", "and", "y", "to", "an", "offset"], "sha": "8524c3e4ee12a239e876a373a835065f5ba56d3b", "url": "https://github.com/atelierspierrot/maths/blob/8524c3e4ee12a239e876a373a835065f5ba56d3b/src/Maths/Algebra/Matrix.php#L1160-L1171", "partition": "test"}
{"repo": "tomahawkphp/framework", "path": "src/Tomahawk/CommandBus/CommandBus.php", "func_name": "CommandBus.handle", "original_string": "public function handle(CommandInterface $command)\n    {\n        if (!$commandHandler = $this->handlerResolver->resolve($command)) {\n            throw new HandlerNotFoundException();\n        }\n\n        $commandHandler->handle($command);\n    }", "language": "php", "code": "public function handle(CommandInterface $command)\n    {\n        if (!$commandHandler = $this->handlerResolver->resolve($command)) {\n            throw new HandlerNotFoundException();\n        }\n\n        $commandHandler->handle($command);\n    }", "code_tokens": ["public", "function", "handle", "(", "CommandInterface", "$", "command", ")", "{", "if", "(", "!", "$", "commandHandler", "=", "$", "this", "->", "handlerResolver", "->", "resolve", "(", "$", "command", ")", ")", "{", "throw", "new", "HandlerNotFoundException", "(", ")", ";", "}", "$", "commandHandler", "->", "handle", "(", "$", "command", ")", ";", "}"], "docstring": "Handle the command\n\n@param CommandInterface $command\n@throws HandlerNotFoundException", "docstring_tokens": ["Handle", "the", "command"], "sha": "087ee2d362fe70a9020d32c00f7a48cb11b9c04f", "url": "https://github.com/tomahawkphp/framework/blob/087ee2d362fe70a9020d32c00f7a48cb11b9c04f/src/Tomahawk/CommandBus/CommandBus.php#L34-L41", "partition": "test"}
{"repo": "tz-lom/HSPHP", "path": "src/HSPHP/ReadHandler.php", "func_name": "ReadHandler.selectCallback", "original_string": "public function selectCallback($ret)\n    {\n        if ($ret instanceof ErrorMessage) {\n            return $ret;\n        }\n\n        $result = array();\n        foreach ($ret as $row) {\n            $result[] = array_combine($this->fields, $row);\n        }\n        return $result;\n    }", "language": "php", "code": "public function selectCallback($ret)\n    {\n        if ($ret instanceof ErrorMessage) {\n            return $ret;\n        }\n\n        $result = array();\n        foreach ($ret as $row) {\n            $result[] = array_combine($this->fields, $row);\n        }\n        return $result;\n    }", "code_tokens": ["public", "function", "selectCallback", "(", "$", "ret", ")", "{", "if", "(", "$", "ret", "instanceof", "ErrorMessage", ")", "{", "return", "$", "ret", ";", "}", "$", "result", "=", "array", "(", ")", ";", "foreach", "(", "$", "ret", "as", "$", "row", ")", "{", "$", "result", "[", "]", "=", "array_combine", "(", "$", "this", "->", "fields", ",", "$", "row", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "callback for select request\n@ignore", "docstring_tokens": ["callback", "for", "select", "request"], "sha": "074514455c579da4090255c4012bf1a61e06197f", "url": "https://github.com/tz-lom/HSPHP/blob/074514455c579da4090255c4012bf1a61e06197f/src/HSPHP/ReadHandler.php#L82-L93", "partition": "test"}
{"repo": "mamasu/mama-framework", "path": "src/Plugin/FileSystemPluginLocator.php", "func_name": "FileSystemPluginLocator.getInstalledPlugins", "original_string": "public function getInstalledPlugins($path) {\n        $searchPluginDirectories = $this->searchPluginDirectories($path);\n        $validPluginDirectories  = array();\n        $factoryPluginClasses    = array();\n        foreach ($searchPluginDirectories as $pluginDirectory) {\n            if (is_file($pluginDirectory. '/enable.php')) {\n                $validPluginClass = $this->searchPluginFactoryClass($pluginDirectory);\n                if ($validPluginClass) {\n                    $validPluginDirectories[] = $pluginDirectory;\n                    $factoryPluginClasses[] = $validPluginClass;\n                }\n            }\n        }\n        return array('pluginClasses'    => $factoryPluginClasses,\n                     'pluginDirectories'=> $validPluginDirectories,\n                     'pluginEnabled'    => true\n                     );\n    }", "language": "php", "code": "public function getInstalledPlugins($path) {\n        $searchPluginDirectories = $this->searchPluginDirectories($path);\n        $validPluginDirectories  = array();\n        $factoryPluginClasses    = array();\n        foreach ($searchPluginDirectories as $pluginDirectory) {\n            if (is_file($pluginDirectory. '/enable.php')) {\n                $validPluginClass = $this->searchPluginFactoryClass($pluginDirectory);\n                if ($validPluginClass) {\n                    $validPluginDirectories[] = $pluginDirectory;\n                    $factoryPluginClasses[] = $validPluginClass;\n                }\n            }\n        }\n        return array('pluginClasses'    => $factoryPluginClasses,\n                     'pluginDirectories'=> $validPluginDirectories,\n                     'pluginEnabled'    => true\n                     );\n    }", "code_tokens": ["public", "function", "getInstalledPlugins", "(", "$", "path", ")", "{", "$", "searchPluginDirectories", "=", "$", "this", "->", "searchPluginDirectories", "(", "$", "path", ")", ";", "$", "validPluginDirectories", "=", "array", "(", ")", ";", "$", "factoryPluginClasses", "=", "array", "(", ")", ";", "foreach", "(", "$", "searchPluginDirectories", "as", "$", "pluginDirectory", ")", "{", "if", "(", "is_file", "(", "$", "pluginDirectory", ".", "'/enable.php'", ")", ")", "{", "$", "validPluginClass", "=", "$", "this", "->", "searchPluginFactoryClass", "(", "$", "pluginDirectory", ")", ";", "if", "(", "$", "validPluginClass", ")", "{", "$", "validPluginDirectories", "[", "]", "=", "$", "pluginDirectory", ";", "$", "factoryPluginClasses", "[", "]", "=", "$", "validPluginClass", ";", "}", "}", "}", "return", "array", "(", "'pluginClasses'", "=>", "$", "factoryPluginClasses", ",", "'pluginDirectories'", "=>", "$", "validPluginDirectories", ",", "'pluginEnabled'", "=>", "true", ")", ";", "}"], "docstring": "Return all the plugin installed classes found in the concrete path.\n\n@param string $path\n@return array('pluginClasses'=>$factoryPluginClasses,'pluginDirectories'=>$validPluginDirectories)", "docstring_tokens": ["Return", "all", "the", "plugin", "installed", "classes", "found", "in", "the", "concrete", "path", "."], "sha": "105a4980b56f1fdaad095a32189ee47d39203a7a", "url": "https://github.com/mamasu/mama-framework/blob/105a4980b56f1fdaad095a32189ee47d39203a7a/src/Plugin/FileSystemPluginLocator.php#L39-L56", "partition": "test"}
{"repo": "WordPress-Coding-Standards/WordPress-Coding-Standards", "path": "WordPress/Sniff.php", "func_name": "Sniff.is_class_property", "original_string": "public function is_class_property( $stackPtr ) {\n\t\tif ( ! isset( $this->tokens[ $stackPtr ] ) || \\T_VARIABLE !== $this->tokens[ $stackPtr ]['code'] ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Note: interfaces can not declare properties.\n\t\t$valid_scopes = array(\n\t\t\t'T_CLASS'      => true,\n\t\t\t'T_ANON_CLASS' => true,\n\t\t\t'T_TRAIT'      => true,\n\t\t);\n\n\t\t$scopePtr = $this->valid_direct_scope( $stackPtr, $valid_scopes );\n\t\tif ( false !== $scopePtr ) {\n\t\t\t// Make sure it's not a method parameter.\n\t\t\tif ( empty( $this->tokens[ $stackPtr ]['nested_parenthesis'] ) ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$parenthesis  = array_keys( $this->tokens[ $stackPtr ]['nested_parenthesis'] );\n\t\t\t\t$deepest_open = array_pop( $parenthesis );\n\t\t\t\tif ( $deepest_open < $scopePtr\n\t\t\t\t\t|| isset( $this->tokens[ $deepest_open ]['parenthesis_owner'] ) === false\n\t\t\t\t\t|| \\T_FUNCTION !== $this->tokens[ $this->tokens[ $deepest_open ]['parenthesis_owner'] ]['code']\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "language": "php", "code": "public function is_class_property( $stackPtr ) {\n\t\tif ( ! isset( $this->tokens[ $stackPtr ] ) || \\T_VARIABLE !== $this->tokens[ $stackPtr ]['code'] ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Note: interfaces can not declare properties.\n\t\t$valid_scopes = array(\n\t\t\t'T_CLASS'      => true,\n\t\t\t'T_ANON_CLASS' => true,\n\t\t\t'T_TRAIT'      => true,\n\t\t);\n\n\t\t$scopePtr = $this->valid_direct_scope( $stackPtr, $valid_scopes );\n\t\tif ( false !== $scopePtr ) {\n\t\t\t// Make sure it's not a method parameter.\n\t\t\tif ( empty( $this->tokens[ $stackPtr ]['nested_parenthesis'] ) ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$parenthesis  = array_keys( $this->tokens[ $stackPtr ]['nested_parenthesis'] );\n\t\t\t\t$deepest_open = array_pop( $parenthesis );\n\t\t\t\tif ( $deepest_open < $scopePtr\n\t\t\t\t\t|| isset( $this->tokens[ $deepest_open ]['parenthesis_owner'] ) === false\n\t\t\t\t\t|| \\T_FUNCTION !== $this->tokens[ $this->tokens[ $deepest_open ]['parenthesis_owner'] ]['code']\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "code_tokens": ["public", "function", "is_class_property", "(", "$", "stackPtr", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", ")", "||", "\\", "T_VARIABLE", "!==", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'code'", "]", ")", "{", "return", "false", ";", "}", "// Note: interfaces can not declare properties.", "$", "valid_scopes", "=", "array", "(", "'T_CLASS'", "=>", "true", ",", "'T_ANON_CLASS'", "=>", "true", ",", "'T_TRAIT'", "=>", "true", ",", ")", ";", "$", "scopePtr", "=", "$", "this", "->", "valid_direct_scope", "(", "$", "stackPtr", ",", "$", "valid_scopes", ")", ";", "if", "(", "false", "!==", "$", "scopePtr", ")", "{", "// Make sure it's not a method parameter.", "if", "(", "empty", "(", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'nested_parenthesis'", "]", ")", ")", "{", "return", "true", ";", "}", "else", "{", "$", "parenthesis", "=", "array_keys", "(", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'nested_parenthesis'", "]", ")", ";", "$", "deepest_open", "=", "array_pop", "(", "$", "parenthesis", ")", ";", "if", "(", "$", "deepest_open", "<", "$", "scopePtr", "||", "isset", "(", "$", "this", "->", "tokens", "[", "$", "deepest_open", "]", "[", "'parenthesis_owner'", "]", ")", "===", "false", "||", "\\", "T_FUNCTION", "!==", "$", "this", "->", "tokens", "[", "$", "this", "->", "tokens", "[", "$", "deepest_open", "]", "[", "'parenthesis_owner'", "]", "]", "[", "'code'", "]", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "docstring": "Check whether a T_VARIABLE token is a class property declaration.\n\n@since 0.14.0\n\n@param int $stackPtr  The position in the stack of the T_VARIABLE token to verify.\n\n@return bool", "docstring_tokens": ["Check", "whether", "a", "T_VARIABLE", "token", "is", "a", "class", "property", "declaration", "."], "sha": "04bfa1284ca652e8e9befe82134f440cc31f655d", "url": "https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/blob/04bfa1284ca652e8e9befe82134f440cc31f655d/WordPress/Sniff.php#L2899-L2929", "partition": "test"}
{"repo": "FriendsOfSymfony/FOSElasticaBundle", "path": "src/Doctrine/RepositoryManager.php", "func_name": "RepositoryManager.getRepository", "original_string": "public function getRepository($entityName)\n    {\n        $realEntityName = $entityName;\n        if (false !== strpos($entityName, ':')) {\n            list($namespaceAlias, $simpleClassName) = explode(':', $entityName);\n            $realEntityName = $this->managerRegistry->getAliasNamespace($namespaceAlias).'\\\\'.$simpleClassName;\n        }\n\n        if (isset($this->entities[$realEntityName])) {\n            $realEntityName = $this->entities[$realEntityName];\n        }\n\n        return $this->repositoryManager->getRepository($realEntityName);\n    }", "language": "php", "code": "public function getRepository($entityName)\n    {\n        $realEntityName = $entityName;\n        if (false !== strpos($entityName, ':')) {\n            list($namespaceAlias, $simpleClassName) = explode(':', $entityName);\n            $realEntityName = $this->managerRegistry->getAliasNamespace($namespaceAlias).'\\\\'.$simpleClassName;\n        }\n\n        if (isset($this->entities[$realEntityName])) {\n            $realEntityName = $this->entities[$realEntityName];\n        }\n\n        return $this->repositoryManager->getRepository($realEntityName);\n    }", "code_tokens": ["public", "function", "getRepository", "(", "$", "entityName", ")", "{", "$", "realEntityName", "=", "$", "entityName", ";", "if", "(", "false", "!==", "strpos", "(", "$", "entityName", ",", "':'", ")", ")", "{", "list", "(", "$", "namespaceAlias", ",", "$", "simpleClassName", ")", "=", "explode", "(", "':'", ",", "$", "entityName", ")", ";", "$", "realEntityName", "=", "$", "this", "->", "managerRegistry", "->", "getAliasNamespace", "(", "$", "namespaceAlias", ")", ".", "'\\\\'", ".", "$", "simpleClassName", ";", "}", "if", "(", "isset", "(", "$", "this", "->", "entities", "[", "$", "realEntityName", "]", ")", ")", "{", "$", "realEntityName", "=", "$", "this", "->", "entities", "[", "$", "realEntityName", "]", ";", "}", "return", "$", "this", "->", "repositoryManager", "->", "getRepository", "(", "$", "realEntityName", ")", ";", "}"], "docstring": "Returns custom repository if one specified otherwise returns a basic repository.\n\n{@inheritdoc}", "docstring_tokens": ["Returns", "custom", "repository", "if", "one", "specified", "otherwise", "returns", "a", "basic", "repository", "."], "sha": "3f2707d1d606a59527f74e88808b820a170d3f42", "url": "https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/3f2707d1d606a59527f74e88808b820a170d3f42/src/Doctrine/RepositoryManager.php#L68-L81", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/Sort.php", "func_name": "Sort.byKey", "original_string": "public function byKey(array $array, int $flags = SORT_REGULAR): array\n    {\n        ksort($array, $flags);\n\n        foreach ($array as $_key => &$_value) {\n            if (is_array($_value)) {\n                $_value = $this->byKey($_value, $flags);\n            }\n        } // unset($_key, $_value); // Housekeeping.\n\n        return $array;\n    }", "language": "php", "code": "public function byKey(array $array, int $flags = SORT_REGULAR): array\n    {\n        ksort($array, $flags);\n\n        foreach ($array as $_key => &$_value) {\n            if (is_array($_value)) {\n                $_value = $this->byKey($_value, $flags);\n            }\n        } // unset($_key, $_value); // Housekeeping.\n\n        return $array;\n    }", "code_tokens": ["public", "function", "byKey", "(", "array", "$", "array", ",", "int", "$", "flags", "=", "SORT_REGULAR", ")", ":", "array", "{", "ksort", "(", "$", "array", ",", "$", "flags", ")", ";", "foreach", "(", "$", "array", "as", "$", "_key", "=>", "&", "$", "_value", ")", "{", "if", "(", "is_array", "(", "$", "_value", ")", ")", "{", "$", "_value", "=", "$", "this", "->", "byKey", "(", "$", "_value", ",", "$", "flags", ")", ";", "}", "}", "// unset($_key, $_value); // Housekeeping.", "return", "$", "array", ";", "}"], "docstring": "Sorts by key.\n\n@since 150424 Array utils.\n\n@param array $array Input array.\n@param int   $flags Defaults to `SORT_REGULAR`.\n\n@return array Output array.", "docstring_tokens": ["Sorts", "by", "key", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/Sort.php#L38-L49", "partition": "test"}
{"repo": "bradcornford/Bootstrapper", "path": "src/Cornford/Bootstrapper/Bootstrap.php", "func_name": "Bootstrap.linkRoute", "original_string": "public function linkRoute($name, $title = null, array $parameters = array(), array $attributes = array())\n\t{\n\t\treturn $this->hyperlink('linkRoute', $name, $title, $parameters, $attributes, null);\n\t}", "language": "php", "code": "public function linkRoute($name, $title = null, array $parameters = array(), array $attributes = array())\n\t{\n\t\treturn $this->hyperlink('linkRoute', $name, $title, $parameters, $attributes, null);\n\t}", "code_tokens": ["public", "function", "linkRoute", "(", "$", "name", ",", "$", "title", "=", "null", ",", "array", "$", "parameters", "=", "array", "(", ")", ",", "array", "$", "attributes", "=", "array", "(", ")", ")", "{", "return", "$", "this", "->", "hyperlink", "(", "'linkRoute'", ",", "$", "name", ",", "$", "title", ",", "$", "parameters", ",", "$", "attributes", ",", "null", ")", ";", "}"], "docstring": "Create a button link to route.\n\n@param string $name\n@param string $title\n@param array  $parameters\n@param array  $attributes\n\n@return string", "docstring_tokens": ["Create", "a", "button", "link", "to", "route", "."], "sha": "93045a96c0d431aaad177d61ecec9e718c13ce82", "url": "https://github.com/bradcornford/Bootstrapper/blob/93045a96c0d431aaad177d61ecec9e718c13ce82/src/Cornford/Bootstrapper/Bootstrap.php#L401-L404", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Cookie/CookieJar.php", "func_name": "CookieJar.setDefaultPathAndDomain", "original_string": "public function setDefaultPathAndDomain(string $path, string $domain, bool $secure = false): self\n    {\n        [$this->path, $this->domain, $this->secure] = [$path, $domain, $secure];\n\n        return $this;\n    }", "language": "php", "code": "public function setDefaultPathAndDomain(string $path, string $domain, bool $secure = false): self\n    {\n        [$this->path, $this->domain, $this->secure] = [$path, $domain, $secure];\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setDefaultPathAndDomain", "(", "string", "$", "path", ",", "string", "$", "domain", ",", "bool", "$", "secure", "=", "false", ")", ":", "self", "{", "[", "$", "this", "->", "path", ",", "$", "this", "->", "domain", ",", "$", "this", "->", "secure", "]", "=", "[", "$", "path", ",", "$", "domain", ",", "$", "secure", "]", ";", "return", "$", "this", ";", "}"], "docstring": "Set the default path and domain for the jar.\n\n@param string $path\n@param string $domain\n@param bool   $secure\n\n@return $this", "docstring_tokens": ["Set", "the", "default", "path", "and", "domain", "for", "the", "jar", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Cookie/CookieJar.php#L126-L131", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Debug/Reflexion.php", "func_name": "Reflexion.set", "original_string": "public static function set($object, $property, $value)\n    {\n        $property = self::getReflectionProperty($object, $property);\n\n        if (is_string($object) || $property->isStatic()) {\n            if (($declaringClass = $property->getDeclaringClass()->getName()) !== self::toClassName($object)) {\n                self::getReflectionProperty($declaringClass, $property->getName())->setValue(null, $value);\n                return;\n            }\n\n            $property->setValue(null, $value);\n            return;\n        }\n\n        $property->setValue($object, $value);\n    }", "language": "php", "code": "public static function set($object, $property, $value)\n    {\n        $property = self::getReflectionProperty($object, $property);\n\n        if (is_string($object) || $property->isStatic()) {\n            if (($declaringClass = $property->getDeclaringClass()->getName()) !== self::toClassName($object)) {\n                self::getReflectionProperty($declaringClass, $property->getName())->setValue(null, $value);\n                return;\n            }\n\n            $property->setValue(null, $value);\n            return;\n        }\n\n        $property->setValue($object, $value);\n    }", "code_tokens": ["public", "static", "function", "set", "(", "$", "object", ",", "$", "property", ",", "$", "value", ")", "{", "$", "property", "=", "self", "::", "getReflectionProperty", "(", "$", "object", ",", "$", "property", ")", ";", "if", "(", "is_string", "(", "$", "object", ")", "||", "$", "property", "->", "isStatic", "(", ")", ")", "{", "if", "(", "(", "$", "declaringClass", "=", "$", "property", "->", "getDeclaringClass", "(", ")", "->", "getName", "(", ")", ")", "!==", "self", "::", "toClassName", "(", "$", "object", ")", ")", "{", "self", "::", "getReflectionProperty", "(", "$", "declaringClass", ",", "$", "property", "->", "getName", "(", ")", ")", "->", "setValue", "(", "null", ",", "$", "value", ")", ";", "return", ";", "}", "$", "property", "->", "setValue", "(", "null", ",", "$", "value", ")", ";", "return", ";", "}", "$", "property", "->", "setValue", "(", "$", "object", ",", "$", "value", ")", ";", "}"], "docstring": "Set the value of a property of an object or a class\n\n@param string|object $object\n@param string $property\n@param mixed  $value", "docstring_tokens": ["Set", "the", "value", "of", "a", "property", "of", "an", "object", "or", "a", "class"], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Debug/Reflexion.php#L148-L163", "partition": "test"}
{"repo": "colorium/http", "path": "src/Colorium/Http/Uri.php", "func_name": "Uri.param", "original_string": "public function param($key)\n    {\n        return isset($this->params[$key])\n            ? $this->params[$key]\n            : null;\n    }", "language": "php", "code": "public function param($key)\n    {\n        return isset($this->params[$key])\n            ? $this->params[$key]\n            : null;\n    }", "code_tokens": ["public", "function", "param", "(", "$", "key", ")", "{", "return", "isset", "(", "$", "this", "->", "params", "[", "$", "key", "]", ")", "?", "$", "this", "->", "params", "[", "$", "key", "]", ":", "null", ";", "}"], "docstring": "Get uri param\n\n@param string $key\n@return string", "docstring_tokens": ["Get", "uri", "param"], "sha": "070877dcd5a283bb3c8cec86fd1f312fb9a1d3a8", "url": "https://github.com/colorium/http/blob/070877dcd5a283bb3c8cec86fd1f312fb9a1d3a8/src/Colorium/Http/Uri.php#L119-L124", "partition": "test"}
{"repo": "phug-php/phug", "path": "src/Phug/Phug.php", "func_name": "Phug.addFilter", "original_string": "public static function addFilter($name, $filter)\n    {\n        $key = self::normalizeFilterName($name);\n\n        if (isset(self::$filters[$key])) {\n            throw new PhugException(\n                'Filter '.$name.' is already set.'\n            );\n        }\n\n        self::setFilter($name, $filter);\n    }", "language": "php", "code": "public static function addFilter($name, $filter)\n    {\n        $key = self::normalizeFilterName($name);\n\n        if (isset(self::$filters[$key])) {\n            throw new PhugException(\n                'Filter '.$name.' is already set.'\n            );\n        }\n\n        self::setFilter($name, $filter);\n    }", "code_tokens": ["public", "static", "function", "addFilter", "(", "$", "name", ",", "$", "filter", ")", "{", "$", "key", "=", "self", "::", "normalizeFilterName", "(", "$", "name", ")", ";", "if", "(", "isset", "(", "self", "::", "$", "filters", "[", "$", "key", "]", ")", ")", "{", "throw", "new", "PhugException", "(", "'Filter '", ".", "$", "name", ".", "' is already set.'", ")", ";", "}", "self", "::", "setFilter", "(", "$", "name", ",", "$", "filter", ")", ";", "}"], "docstring": "Add a filter. Throws an exception if the name is already taken.\n\n@param string          $name\n@param callable|string $filter\n\n@throws PhugException", "docstring_tokens": ["Add", "a", "filter", ".", "Throws", "an", "exception", "if", "the", "name", "is", "already", "taken", "."], "sha": "85a2c87864a80b0536755acc9ba65b9a78fdfbc1", "url": "https://github.com/phug-php/phug/blob/85a2c87864a80b0536755acc9ba65b9a78fdfbc1/src/Phug/Phug.php#L272-L283", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/Net/URL2.php", "func_name": "Net_URL2.setQueryVariables", "original_string": "public function setQueryVariables(array $array)\n    {\n        if (!$array) {\n            $this->_query = false;\n        } else {\n            $this->_query = $this->buildQuery(\n                $array,\n                $this->getOption(self::OPTION_SEPARATOR_OUTPUT)\n            );\n        }\n        return $this;\n    }", "language": "php", "code": "public function setQueryVariables(array $array)\n    {\n        if (!$array) {\n            $this->_query = false;\n        } else {\n            $this->_query = $this->buildQuery(\n                $array,\n                $this->getOption(self::OPTION_SEPARATOR_OUTPUT)\n            );\n        }\n        return $this;\n    }", "code_tokens": ["public", "function", "setQueryVariables", "(", "array", "$", "array", ")", "{", "if", "(", "!", "$", "array", ")", "{", "$", "this", "->", "_query", "=", "false", ";", "}", "else", "{", "$", "this", "->", "_query", "=", "$", "this", "->", "buildQuery", "(", "$", "array", ",", "$", "this", "->", "getOption", "(", "self", "::", "OPTION_SEPARATOR_OUTPUT", ")", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Sets the query string to the specified variable in the query string.\n\n@param array $array (name => value) array\n\n@return $this", "docstring_tokens": ["Sets", "the", "query", "string", "to", "the", "specified", "variable", "in", "the", "query", "string", "."], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/Net/URL2.php#L633-L644", "partition": "test"}
{"repo": "lifo101/php-ipc", "path": "src/Lifo/IPC/ProcessPool.php", "func_name": "ProcessPool.init", "original_string": "private function init($force = false)\n    {\n        if (!function_exists('pcntl_signal') || ($this->initialized && !$force)) {\n            return;\n        }\n        $this->initialized = true;\n        pcntl_signal(SIGCHLD, array($this, 'signalHandler'));\n    }", "language": "php", "code": "private function init($force = false)\n    {\n        if (!function_exists('pcntl_signal') || ($this->initialized && !$force)) {\n            return;\n        }\n        $this->initialized = true;\n        pcntl_signal(SIGCHLD, array($this, 'signalHandler'));\n    }", "code_tokens": ["private", "function", "init", "(", "$", "force", "=", "false", ")", "{", "if", "(", "!", "function_exists", "(", "'pcntl_signal'", ")", "||", "(", "$", "this", "->", "initialized", "&&", "!", "$", "force", ")", ")", "{", "return", ";", "}", "$", "this", "->", "initialized", "=", "true", ";", "pcntl_signal", "(", "SIGCHLD", ",", "array", "(", "$", "this", ",", "'signalHandler'", ")", ")", ";", "}"], "docstring": "Initialize the signal handler.\n\nNote: This will replace any current handler for SIGCHLD.\n\n@param boolean $force Force initialization even if already initialized", "docstring_tokens": ["Initialize", "the", "signal", "handler", "."], "sha": "6ae12fab44c19a6b150af559e76b7623a845c0fd", "url": "https://github.com/lifo101/php-ipc/blob/6ae12fab44c19a6b150af559e76b7623a845c0fd/src/Lifo/IPC/ProcessPool.php#L112-L119", "partition": "test"}
{"repo": "juliangut/doctrine-base-repositories", "path": "src/EventsTrait.php", "func_name": "EventsTrait.disableEventSubscriber", "original_string": "public function disableEventSubscriber($subscriberClass)\n    {\n        $subscriberClass = $this->getSubscriberClassName($subscriberClass);\n        $eventManager = $this->getEventManager();\n\n        /* @var EventSubscriber[] $subscribers */\n        foreach ($this->getEventListeners() as $subscribers) {\n            while ($subscriber = \\array_shift($subscribers)) {\n                if ($subscriber instanceof $subscriberClass) {\n                    $this->disabledSubscribers[] = $subscriber;\n\n                    $eventManager->removeEventSubscriber($subscriber);\n\n                    return;\n                }\n            }\n        }\n    }", "language": "php", "code": "public function disableEventSubscriber($subscriberClass)\n    {\n        $subscriberClass = $this->getSubscriberClassName($subscriberClass);\n        $eventManager = $this->getEventManager();\n\n        /* @var EventSubscriber[] $subscribers */\n        foreach ($this->getEventListeners() as $subscribers) {\n            while ($subscriber = \\array_shift($subscribers)) {\n                if ($subscriber instanceof $subscriberClass) {\n                    $this->disabledSubscribers[] = $subscriber;\n\n                    $eventManager->removeEventSubscriber($subscriber);\n\n                    return;\n                }\n            }\n        }\n    }", "code_tokens": ["public", "function", "disableEventSubscriber", "(", "$", "subscriberClass", ")", "{", "$", "subscriberClass", "=", "$", "this", "->", "getSubscriberClassName", "(", "$", "subscriberClass", ")", ";", "$", "eventManager", "=", "$", "this", "->", "getEventManager", "(", ")", ";", "/* @var EventSubscriber[] $subscribers */", "foreach", "(", "$", "this", "->", "getEventListeners", "(", ")", "as", "$", "subscribers", ")", "{", "while", "(", "$", "subscriber", "=", "\\", "array_shift", "(", "$", "subscribers", ")", ")", "{", "if", "(", "$", "subscriber", "instanceof", "$", "subscriberClass", ")", "{", "$", "this", "->", "disabledSubscribers", "[", "]", "=", "$", "subscriber", ";", "$", "eventManager", "->", "removeEventSubscriber", "(", "$", "subscriber", ")", ";", "return", ";", "}", "}", "}", "}"], "docstring": "Disable event subscriber.\n\n@param \\Doctrine\\Common\\EventSubscriber|string $subscriberClass", "docstring_tokens": ["Disable", "event", "subscriber", "."], "sha": "3eb661fa8f1296512c2cbb683de7995724509cb7", "url": "https://github.com/juliangut/doctrine-base-repositories/blob/3eb661fa8f1296512c2cbb683de7995724509cb7/src/EventsTrait.php#L43-L60", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/Console/Getopt.php", "func_name": "Console_Getopt.getopt2", "original_string": "function getopt2($args, $short_options, $long_options = null, $skip_unknown = false)\n    {\n        return Console_Getopt::doGetopt(2, $args, $short_options, $long_options, $skip_unknown);\n    }", "language": "php", "code": "function getopt2($args, $short_options, $long_options = null, $skip_unknown = false)\n    {\n        return Console_Getopt::doGetopt(2, $args, $short_options, $long_options, $skip_unknown);\n    }", "code_tokens": ["function", "getopt2", "(", "$", "args", ",", "$", "short_options", ",", "$", "long_options", "=", "null", ",", "$", "skip_unknown", "=", "false", ")", "{", "return", "Console_Getopt", "::", "doGetopt", "(", "2", ",", "$", "args", ",", "$", "short_options", ",", "$", "long_options", ",", "$", "skip_unknown", ")", ";", "}"], "docstring": "Parses the command-line options.\n\nThe first parameter to this function should be the list of command-line\narguments without the leading reference to the running program.\n\nThe second parameter is a string of allowed short options. Each of the\noption letters can be followed by a colon ':' to specify that the option\nrequires an argument, or a double colon '::' to specify that the option\ntakes an optional argument.\n\nThe third argument is an optional array of allowed long options. The\nleading '--' should not be included in the option name. Options that\nrequire an argument should be followed by '=', and options that take an\noption argument should be followed by '=='.\n\nThe return value is an array of two elements: the list of parsed\noptions and the list of non-option command-line arguments. Each entry in\nthe list of parsed options is a pair of elements - the first one\nspecifies the option, and the second one specifies the option argument,\nif there was one.\n\nLong and short options can be mixed.\n\nMost of the semantics of this function are based on GNU getopt_long().\n\n@param array  $args          an array of command-line arguments\n@param string $short_options specifies the list of allowed short options\n@param array  $long_options  specifies the list of allowed long options\n@param boolean $skip_unknown suppresses Console_Getopt: unrecognized option\n\n@return array two-element array containing the list of parsed options and\nthe non-option arguments\n@access public", "docstring_tokens": ["Parses", "the", "command", "-", "line", "options", "."], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/Console/Getopt.php#L73-L76", "partition": "test"}
{"repo": "pear/Crypt_GPG", "path": "Crypt/GPG.php", "func_name": "Crypt_GPG.addDecryptKey", "original_string": "public function addDecryptKey($key, $passphrase = null)\n    {\n        $this->_addKey($this->decryptKeys, false, false, $key, $passphrase);\n        return $this;\n    }", "language": "php", "code": "public function addDecryptKey($key, $passphrase = null)\n    {\n        $this->_addKey($this->decryptKeys, false, false, $key, $passphrase);\n        return $this;\n    }", "code_tokens": ["public", "function", "addDecryptKey", "(", "$", "key", ",", "$", "passphrase", "=", "null", ")", "{", "$", "this", "->", "_addKey", "(", "$", "this", "->", "decryptKeys", ",", "false", ",", "false", ",", "$", "key", ",", "$", "passphrase", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Adds a key to use for decryption\n\n@param mixed  $key        the key to use. This may be a key identifier,\nuser id, fingerprint, {@link Crypt_GPG_Key} or\n{@link Crypt_GPG_SubKey}. The key must be able\nto encrypt.\n@param string $passphrase optional. The passphrase of the key required\nfor decryption.\n\n@return Crypt_GPG the current object, for fluent interface.\n\n@see Crypt_GPG::decrypt()\n@see Crypt_GPG::decryptFile()\n@see Crypt_GPG::clearDecryptKeys()\n@see Crypt_GPG::_addKey()\n\n@sensitive $passphrase", "docstring_tokens": ["Adds", "a", "key", "to", "use", "for", "decryption"], "sha": "bf07ab51207446ed33ea0075083df9bbc2358617", "url": "https://github.com/pear/Crypt_GPG/blob/bf07ab51207446ed33ea0075083df9bbc2358617/Crypt/GPG.php#L1197-L1201", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Relations/Relation.php", "func_name": "Relation.load_collection_from_cache", "original_string": "protected function load_collection_from_cache( array $cached, Model $for ) {\n\n\t\t$models  = array();\n\t\t$removed = array();\n\n\t\tforeach ( $cached as $id ) {\n\t\t\t$model = $this->saver->get_model( $id );\n\n\t\t\tif ( $model ) {\n\t\t\t\t$models[ $id ] = $model;\n\t\t\t} else {\n\t\t\t\t$removed[] = $id;\n\t\t\t}\n\t\t}\n\n\t\t$diff = array_diff( $cached, $removed );\n\t\twp_cache_set( $for->get_pk(), $diff, $this->get_cache_group() );\n\n\t\treturn new Collection( $models, false, $this->saver );\n\t}", "language": "php", "code": "protected function load_collection_from_cache( array $cached, Model $for ) {\n\n\t\t$models  = array();\n\t\t$removed = array();\n\n\t\tforeach ( $cached as $id ) {\n\t\t\t$model = $this->saver->get_model( $id );\n\n\t\t\tif ( $model ) {\n\t\t\t\t$models[ $id ] = $model;\n\t\t\t} else {\n\t\t\t\t$removed[] = $id;\n\t\t\t}\n\t\t}\n\n\t\t$diff = array_diff( $cached, $removed );\n\t\twp_cache_set( $for->get_pk(), $diff, $this->get_cache_group() );\n\n\t\treturn new Collection( $models, false, $this->saver );\n\t}", "code_tokens": ["protected", "function", "load_collection_from_cache", "(", "array", "$", "cached", ",", "Model", "$", "for", ")", "{", "$", "models", "=", "array", "(", ")", ";", "$", "removed", "=", "array", "(", ")", ";", "foreach", "(", "$", "cached", "as", "$", "id", ")", "{", "$", "model", "=", "$", "this", "->", "saver", "->", "get_model", "(", "$", "id", ")", ";", "if", "(", "$", "model", ")", "{", "$", "models", "[", "$", "id", "]", "=", "$", "model", ";", "}", "else", "{", "$", "removed", "[", "]", "=", "$", "id", ";", "}", "}", "$", "diff", "=", "array_diff", "(", "$", "cached", ",", "$", "removed", ")", ";", "wp_cache_set", "(", "$", "for", "->", "get_pk", "(", ")", ",", "$", "diff", ",", "$", "this", "->", "get_cache_group", "(", ")", ")", ";", "return", "new", "Collection", "(", "$", "models", ",", "false", ",", "$", "this", "->", "saver", ")", ";", "}"], "docstring": "Load a collection of models from the cache.\n\n@since 2.0\n\n@param int[]|string[] $cached\n@param Model          $for\n\n@return Collection", "docstring_tokens": ["Load", "a", "collection", "of", "models", "from", "the", "cache", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Relations/Relation.php#L180-L199", "partition": "test"}
{"repo": "BenjaminMedia/wp-cxense", "path": "src/Services/WidgetDocumentQuery.php", "func_name": "WidgetDocumentQuery.validateWidgetId", "original_string": "private function validateWidgetId(?string $widgetId)\n    {\n        if (!isset($widgetId) && current_user_can('administrator')) {\n            throw new WidgetMissingId('Missing request \"widgetId\" key!');\n        }\n        $this->arrPayload['widgetId'] = $widgetId;\n    }", "language": "php", "code": "private function validateWidgetId(?string $widgetId)\n    {\n        if (!isset($widgetId) && current_user_can('administrator')) {\n            throw new WidgetMissingId('Missing request \"widgetId\" key!');\n        }\n        $this->arrPayload['widgetId'] = $widgetId;\n    }", "code_tokens": ["private", "function", "validateWidgetId", "(", "?", "string", "$", "widgetId", ")", "{", "if", "(", "!", "isset", "(", "$", "widgetId", ")", "&&", "current_user_can", "(", "'administrator'", ")", ")", "{", "throw", "new", "WidgetMissingId", "(", "'Missing request \"widgetId\" key!'", ")", ";", "}", "$", "this", "->", "arrPayload", "[", "'widgetId'", "]", "=", "$", "widgetId", ";", "}"], "docstring": "Check for widget id presence\n@param string $widgetId\n@return null\n@throws WidgetMissingId", "docstring_tokens": ["Check", "for", "widget", "id", "presence"], "sha": "eb9b7afee06b17be226c442677bbfee67c904fe2", "url": "https://github.com/BenjaminMedia/wp-cxense/blob/eb9b7afee06b17be226c442677bbfee67c904fe2/src/Services/WidgetDocumentQuery.php#L71-L77", "partition": "test"}
{"repo": "belgattitude/solublecomponents", "path": "src/Soluble/Normalist/Synthetic/Table.php", "func_name": "Table.insert", "original_string": "public function insert($data, $validate_datatypes = false)\n    {\n        $prefixed_table = $this->prefixed_table;\n\n        if ($data instanceof \\ArrayObject) {\n            $d = (array) $data;\n        } elseif (is_array($data)) {\n            $d = $data;\n        } else {\n            $type = gettype($data);\n            throw new Exception\\InvalidArgumentException(__METHOD__ . \": expects data to be array or ArrayObject. Type receive '$type'\");\n        }\n\n        $this->checkDataColumns($d);\n\n        if ($validate_datatypes) {\n            $this->validateDatatypes($d);\n        }\n\n        $insert = $this->sql->insert($prefixed_table);\n        $insert->values($d);\n\n        $this->executeStatement($insert);\n\n        $pks = $this->getPrimaryKeys();\n\n        // Should never happen, as getPrimaryKeys throws Exception when no pk exists\n        //@codeCoverageIgnoreStart\n        if (!is_array($pks)) {\n            $msg = __METHOD__ . \" Error getting primary keys of table \" . $this->table . \", require array, returned type is: \" . gettype($pks) ;\n            throw new Exception\\UnexpectedValueException($msg);\n        }\n        //@codeCoverageIgnoreEnd\n\n        $nb_pks = count($pks);\n        if ($nb_pks > 1) {\n            // In multiple keys there should not be autoincrement value\n            $id = [];\n            foreach ($pks as $pk) {\n                $id[$pk] = $d[$pk];\n            }\n        } elseif (array_key_exists($pks[0], $d) && $d[$pks[0]] !== null) {\n            // not using autogenerated value\n            //$id = $d[$this->getPrimaryKey()];\n            $id = $d[$pks[0]];\n        } else {\n            $id = $this->tableManager->getDbAdapter()->getDriver()->getLastGeneratedValue();\n        }\n\n        return $this->findOrFail($id);\n    }", "language": "php", "code": "public function insert($data, $validate_datatypes = false)\n    {\n        $prefixed_table = $this->prefixed_table;\n\n        if ($data instanceof \\ArrayObject) {\n            $d = (array) $data;\n        } elseif (is_array($data)) {\n            $d = $data;\n        } else {\n            $type = gettype($data);\n            throw new Exception\\InvalidArgumentException(__METHOD__ . \": expects data to be array or ArrayObject. Type receive '$type'\");\n        }\n\n        $this->checkDataColumns($d);\n\n        if ($validate_datatypes) {\n            $this->validateDatatypes($d);\n        }\n\n        $insert = $this->sql->insert($prefixed_table);\n        $insert->values($d);\n\n        $this->executeStatement($insert);\n\n        $pks = $this->getPrimaryKeys();\n\n        // Should never happen, as getPrimaryKeys throws Exception when no pk exists\n        //@codeCoverageIgnoreStart\n        if (!is_array($pks)) {\n            $msg = __METHOD__ . \" Error getting primary keys of table \" . $this->table . \", require array, returned type is: \" . gettype($pks) ;\n            throw new Exception\\UnexpectedValueException($msg);\n        }\n        //@codeCoverageIgnoreEnd\n\n        $nb_pks = count($pks);\n        if ($nb_pks > 1) {\n            // In multiple keys there should not be autoincrement value\n            $id = [];\n            foreach ($pks as $pk) {\n                $id[$pk] = $d[$pk];\n            }\n        } elseif (array_key_exists($pks[0], $d) && $d[$pks[0]] !== null) {\n            // not using autogenerated value\n            //$id = $d[$this->getPrimaryKey()];\n            $id = $d[$pks[0]];\n        } else {\n            $id = $this->tableManager->getDbAdapter()->getDriver()->getLastGeneratedValue();\n        }\n\n        return $this->findOrFail($id);\n    }", "code_tokens": ["public", "function", "insert", "(", "$", "data", ",", "$", "validate_datatypes", "=", "false", ")", "{", "$", "prefixed_table", "=", "$", "this", "->", "prefixed_table", ";", "if", "(", "$", "data", "instanceof", "\\", "ArrayObject", ")", "{", "$", "d", "=", "(", "array", ")", "$", "data", ";", "}", "elseif", "(", "is_array", "(", "$", "data", ")", ")", "{", "$", "d", "=", "$", "data", ";", "}", "else", "{", "$", "type", "=", "gettype", "(", "$", "data", ")", ";", "throw", "new", "Exception", "\\", "InvalidArgumentException", "(", "__METHOD__", ".", "\": expects data to be array or ArrayObject. Type receive '$type'\"", ")", ";", "}", "$", "this", "->", "checkDataColumns", "(", "$", "d", ")", ";", "if", "(", "$", "validate_datatypes", ")", "{", "$", "this", "->", "validateDatatypes", "(", "$", "d", ")", ";", "}", "$", "insert", "=", "$", "this", "->", "sql", "->", "insert", "(", "$", "prefixed_table", ")", ";", "$", "insert", "->", "values", "(", "$", "d", ")", ";", "$", "this", "->", "executeStatement", "(", "$", "insert", ")", ";", "$", "pks", "=", "$", "this", "->", "getPrimaryKeys", "(", ")", ";", "// Should never happen, as getPrimaryKeys throws Exception when no pk exists", "//@codeCoverageIgnoreStart", "if", "(", "!", "is_array", "(", "$", "pks", ")", ")", "{", "$", "msg", "=", "__METHOD__", ".", "\" Error getting primary keys of table \"", ".", "$", "this", "->", "table", ".", "\", require array, returned type is: \"", ".", "gettype", "(", "$", "pks", ")", ";", "throw", "new", "Exception", "\\", "UnexpectedValueException", "(", "$", "msg", ")", ";", "}", "//@codeCoverageIgnoreEnd", "$", "nb_pks", "=", "count", "(", "$", "pks", ")", ";", "if", "(", "$", "nb_pks", ">", "1", ")", "{", "// In multiple keys there should not be autoincrement value", "$", "id", "=", "[", "]", ";", "foreach", "(", "$", "pks", "as", "$", "pk", ")", "{", "$", "id", "[", "$", "pk", "]", "=", "$", "d", "[", "$", "pk", "]", ";", "}", "}", "elseif", "(", "array_key_exists", "(", "$", "pks", "[", "0", "]", ",", "$", "d", ")", "&&", "$", "d", "[", "$", "pks", "[", "0", "]", "]", "!==", "null", ")", "{", "// not using autogenerated value", "//$id = $d[$this->getPrimaryKey()];", "$", "id", "=", "$", "d", "[", "$", "pks", "[", "0", "]", "]", ";", "}", "else", "{", "$", "id", "=", "$", "this", "->", "tableManager", "->", "getDbAdapter", "(", ")", "->", "getDriver", "(", ")", "->", "getLastGeneratedValue", "(", ")", ";", "}", "return", "$", "this", "->", "findOrFail", "(", "$", "id", ")", ";", "}"], "docstring": "Insert data into table\n\n@param array|ArrayObject $data\n@param boolean $validate_datatypes ensure data are compatible with database columns datatypes\n\n@throws Exception\\InvalidArgumentException when data is not an array or an ArrayObject\n@throws Exception\\ColumnNotFoundException when $data contains columns that does not exists in table\n@throws Exception\\ForeignKeyException when insertion failed because of an invalid foreign key\n@throws Exception\\DuplicateEntryException when insertion failed because of an invalid foreign key\n@throws Exception\\NotNullException when insertion failed because a column cannot be null\n@throws Exception\\RuntimeException when insertion failed for another reason\n\n@return Record", "docstring_tokens": ["Insert", "data", "into", "table"], "sha": "f045b3967e42d352d8e70fb2c1f8a427df62599f", "url": "https://github.com/belgattitude/solublecomponents/blob/f045b3967e42d352d8e70fb2c1f8a427df62599f/src/Soluble/Normalist/Synthetic/Table.php#L448-L498", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/PEAR/ErrorStack.php", "func_name": "PEAR_ErrorStack.hasErrors", "original_string": "function hasErrors($level = false)\n    {\n        if ($level) {\n            return isset($this->_errorsByLevel[$level]);\n        }\n        return count($this->_errors);\n    }", "language": "php", "code": "function hasErrors($level = false)\n    {\n        if ($level) {\n            return isset($this->_errorsByLevel[$level]);\n        }\n        return count($this->_errors);\n    }", "code_tokens": ["function", "hasErrors", "(", "$", "level", "=", "false", ")", "{", "if", "(", "$", "level", ")", "{", "return", "isset", "(", "$", "this", "->", "_errorsByLevel", "[", "$", "level", "]", ")", ";", "}", "return", "count", "(", "$", "this", "->", "_errors", ")", ";", "}"], "docstring": "Determine whether there are any errors on the stack\n@param string|array Level name.  Use to determine if any errors\nof level (string), or levels (array) have been pushed\n@return boolean", "docstring_tokens": ["Determine", "whether", "there", "are", "any", "errors", "on", "the", "stack"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/PEAR/ErrorStack.php#L700-L706", "partition": "test"}
{"repo": "Intervention/gif", "path": "src/Intervention/Gif/Frame.php", "func_name": "Frame.getSize", "original_string": "public function getSize()\n    {\n        $size = new \\StdClass;\n        $size->width = $this->decodeWidth();\n        $size->height = $this->decodeHeight();\n\n        return $size;\n    }", "language": "php", "code": "public function getSize()\n    {\n        $size = new \\StdClass;\n        $size->width = $this->decodeWidth();\n        $size->height = $this->decodeHeight();\n\n        return $size;\n    }", "code_tokens": ["public", "function", "getSize", "(", ")", "{", "$", "size", "=", "new", "\\", "StdClass", ";", "$", "size", "->", "width", "=", "$", "this", "->", "decodeWidth", "(", ")", ";", "$", "size", "->", "height", "=", "$", "this", "->", "decodeHeight", "(", ")", ";", "return", "$", "size", ";", "}"], "docstring": "Decodes width and height of frame to size object\n\n@return StdClass", "docstring_tokens": ["Decodes", "width", "and", "height", "of", "frame", "to", "size", "object"], "sha": "7f7e747f26b8362f18384f67a9765290523f607a", "url": "https://github.com/Intervention/gif/blob/7f7e747f26b8362f18384f67a9765290523f607a/src/Intervention/Gif/Frame.php#L274-L281", "partition": "test"}
{"repo": "swoft-cloud/swoft-redis", "path": "src/Operator/Processor/PrefixProcessor.php", "func_name": "PrefixProcessor.all", "original_string": "public static function all(CommandInterface $command, $prefix)\n    {\n        if ($arguments = $command->getArguments()) {\n            foreach ($arguments as &$key) {\n                $key = \"$prefix$key\";\n            }\n            $arguments = [$arguments];\n\n            $command->setRawArguments($arguments);\n        }\n    }", "language": "php", "code": "public static function all(CommandInterface $command, $prefix)\n    {\n        if ($arguments = $command->getArguments()) {\n            foreach ($arguments as &$key) {\n                $key = \"$prefix$key\";\n            }\n            $arguments = [$arguments];\n\n            $command->setRawArguments($arguments);\n        }\n    }", "code_tokens": ["public", "static", "function", "all", "(", "CommandInterface", "$", "command", ",", "$", "prefix", ")", "{", "if", "(", "$", "arguments", "=", "$", "command", "->", "getArguments", "(", ")", ")", "{", "foreach", "(", "$", "arguments", "as", "&", "$", "key", ")", "{", "$", "key", "=", "\"$prefix$key\"", ";", "}", "$", "arguments", "=", "[", "$", "arguments", "]", ";", "$", "command", "->", "setRawArguments", "(", "$", "arguments", ")", ";", "}", "}"], "docstring": "Applies the specified prefix to all the arguments.\n\n@param CommandInterface $command Command instance.\n@param string           $prefix  Prefix string.", "docstring_tokens": ["Applies", "the", "specified", "prefix", "to", "all", "the", "arguments", "."], "sha": "4a603aac0719a45c8464dc95b09d4c9d3e36e3f0", "url": "https://github.com/swoft-cloud/swoft-redis/blob/4a603aac0719a45c8464dc95b09d4c9d3e36e3f0/src/Operator/Processor/PrefixProcessor.php#L249-L259", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/Image.php", "func_name": "Image.identipattern", "original_string": "public function identipattern(array $args): bool\n    {\n        if (!class_exists('Imagick')) {\n            return false;\n        }\n        $default_args = [\n            'string' => '',\n            'for'    => '',\n\n            'color'      => '',\n            'base_color' => '',\n\n            'output_file'   => '',\n            'output_format' => '',\n        ];\n        $args += $default_args; // Defaults.\n        $args = $this->parseFormatArgs($args);\n\n        if (!$args['output_file'] || !$args['output_format']) {\n            return false; // Required arguments.\n        }\n        $args['string'] = (string) $args['string'];\n        $args['string'] = $args['string'] ?: (string) $args['for'];\n\n        $args['color']      = (string) $args['color'];\n        $args['base_color'] = (string) $args['base_color'];\n\n        $output_file_existed_prior = is_file($args['output_file']);\n\n        try { // Catch exceptions.\n            $svg = (new Identipattern([\n                'string'    => $args['string'] ?: null,\n                'baseColor' => $args['base_color'] ?: null,\n                'color'     => $args['color'] ?: null,\n            ]))->toSVG(); // SVG format initially.\n\n            if (file_put_contents($args['output_file'], $svg) === false) {\n                throw $this->c::issue('Storage failure.');\n            }\n            if ($args['output_format'] !== 'svg') {\n                if (!$this->convert([\n                        'format' => 'svg',\n                        'file'   => $args['output_file'],\n\n                        'output_file'   => $args['output_file'],\n                        'output_format' => $args['output_format'],\n                    ])) {\n                    throw $this->c::issue('Conversion failure.');\n                }\n            }\n            return true; // Success.\n            //\n        } catch (\\Throwable $Exception) {\n            if (!$output_file_existed_prior && is_file($args['output_file'])) {\n                unlink($args['output_file']);\n            }\n            return false;\n        }\n    }", "language": "php", "code": "public function identipattern(array $args): bool\n    {\n        if (!class_exists('Imagick')) {\n            return false;\n        }\n        $default_args = [\n            'string' => '',\n            'for'    => '',\n\n            'color'      => '',\n            'base_color' => '',\n\n            'output_file'   => '',\n            'output_format' => '',\n        ];\n        $args += $default_args; // Defaults.\n        $args = $this->parseFormatArgs($args);\n\n        if (!$args['output_file'] || !$args['output_format']) {\n            return false; // Required arguments.\n        }\n        $args['string'] = (string) $args['string'];\n        $args['string'] = $args['string'] ?: (string) $args['for'];\n\n        $args['color']      = (string) $args['color'];\n        $args['base_color'] = (string) $args['base_color'];\n\n        $output_file_existed_prior = is_file($args['output_file']);\n\n        try { // Catch exceptions.\n            $svg = (new Identipattern([\n                'string'    => $args['string'] ?: null,\n                'baseColor' => $args['base_color'] ?: null,\n                'color'     => $args['color'] ?: null,\n            ]))->toSVG(); // SVG format initially.\n\n            if (file_put_contents($args['output_file'], $svg) === false) {\n                throw $this->c::issue('Storage failure.');\n            }\n            if ($args['output_format'] !== 'svg') {\n                if (!$this->convert([\n                        'format' => 'svg',\n                        'file'   => $args['output_file'],\n\n                        'output_file'   => $args['output_file'],\n                        'output_format' => $args['output_format'],\n                    ])) {\n                    throw $this->c::issue('Conversion failure.');\n                }\n            }\n            return true; // Success.\n            //\n        } catch (\\Throwable $Exception) {\n            if (!$output_file_existed_prior && is_file($args['output_file'])) {\n                unlink($args['output_file']);\n            }\n            return false;\n        }\n    }", "code_tokens": ["public", "function", "identipattern", "(", "array", "$", "args", ")", ":", "bool", "{", "if", "(", "!", "class_exists", "(", "'Imagick'", ")", ")", "{", "return", "false", ";", "}", "$", "default_args", "=", "[", "'string'", "=>", "''", ",", "'for'", "=>", "''", ",", "'color'", "=>", "''", ",", "'base_color'", "=>", "''", ",", "'output_file'", "=>", "''", ",", "'output_format'", "=>", "''", ",", "]", ";", "$", "args", "+=", "$", "default_args", ";", "// Defaults.", "$", "args", "=", "$", "this", "->", "parseFormatArgs", "(", "$", "args", ")", ";", "if", "(", "!", "$", "args", "[", "'output_file'", "]", "||", "!", "$", "args", "[", "'output_format'", "]", ")", "{", "return", "false", ";", "// Required arguments.", "}", "$", "args", "[", "'string'", "]", "=", "(", "string", ")", "$", "args", "[", "'string'", "]", ";", "$", "args", "[", "'string'", "]", "=", "$", "args", "[", "'string'", "]", "?", ":", "(", "string", ")", "$", "args", "[", "'for'", "]", ";", "$", "args", "[", "'color'", "]", "=", "(", "string", ")", "$", "args", "[", "'color'", "]", ";", "$", "args", "[", "'base_color'", "]", "=", "(", "string", ")", "$", "args", "[", "'base_color'", "]", ";", "$", "output_file_existed_prior", "=", "is_file", "(", "$", "args", "[", "'output_file'", "]", ")", ";", "try", "{", "// Catch exceptions.", "$", "svg", "=", "(", "new", "Identipattern", "(", "[", "'string'", "=>", "$", "args", "[", "'string'", "]", "?", ":", "null", ",", "'baseColor'", "=>", "$", "args", "[", "'base_color'", "]", "?", ":", "null", ",", "'color'", "=>", "$", "args", "[", "'color'", "]", "?", ":", "null", ",", "]", ")", ")", "->", "toSVG", "(", ")", ";", "// SVG format initially.", "if", "(", "file_put_contents", "(", "$", "args", "[", "'output_file'", "]", ",", "$", "svg", ")", "===", "false", ")", "{", "throw", "$", "this", "->", "c", "::", "issue", "(", "'Storage failure.'", ")", ";", "}", "if", "(", "$", "args", "[", "'output_format'", "]", "!==", "'svg'", ")", "{", "if", "(", "!", "$", "this", "->", "convert", "(", "[", "'format'", "=>", "'svg'", ",", "'file'", "=>", "$", "args", "[", "'output_file'", "]", ",", "'output_file'", "=>", "$", "args", "[", "'output_file'", "]", ",", "'output_format'", "=>", "$", "args", "[", "'output_format'", "]", ",", "]", ")", ")", "{", "throw", "$", "this", "->", "c", "::", "issue", "(", "'Conversion failure.'", ")", ";", "}", "}", "return", "true", ";", "// Success.", "//", "}", "catch", "(", "\\", "Throwable", "$", "Exception", ")", "{", "if", "(", "!", "$", "output_file_existed_prior", "&&", "is_file", "(", "$", "args", "[", "'output_file'", "]", ")", ")", "{", "unlink", "(", "$", "args", "[", "'output_file'", "]", ")", ";", "}", "return", "false", ";", "}", "}"], "docstring": "Identipattern generator.\n\n@since 17xxxx Identipatterns.\n\n@param array $args Named arguments.\n\n@return bool True on success.", "docstring_tokens": ["Identipattern", "generator", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/Image.php#L39-L97", "partition": "test"}
{"repo": "php-school/cli-menu", "path": "src/MenuItem/SplitItem.php", "func_name": "SplitItem.setDefaultSelectedItem", "original_string": "private function setDefaultSelectedItem() : void\n    {\n        foreach ($this->items as $index => $item) {\n            if ($item->canSelect()) {\n                $this->canBeSelected = true;\n                $this->selectedItemIndex = $index;\n                return;\n            }\n        }\n\n        $this->canBeSelected = false;\n        $this->selectedItemIndex = null;\n    }", "language": "php", "code": "private function setDefaultSelectedItem() : void\n    {\n        foreach ($this->items as $index => $item) {\n            if ($item->canSelect()) {\n                $this->canBeSelected = true;\n                $this->selectedItemIndex = $index;\n                return;\n            }\n        }\n\n        $this->canBeSelected = false;\n        $this->selectedItemIndex = null;\n    }", "code_tokens": ["private", "function", "setDefaultSelectedItem", "(", ")", ":", "void", "{", "foreach", "(", "$", "this", "->", "items", "as", "$", "index", "=>", "$", "item", ")", "{", "if", "(", "$", "item", "->", "canSelect", "(", ")", ")", "{", "$", "this", "->", "canBeSelected", "=", "true", ";", "$", "this", "->", "selectedItemIndex", "=", "$", "index", ";", "return", ";", "}", "}", "$", "this", "->", "canBeSelected", "=", "false", ";", "$", "this", "->", "selectedItemIndex", "=", "null", ";", "}"], "docstring": "Select default item", "docstring_tokens": ["Select", "default", "item"], "sha": "2b24d576338c5add84c9515a766c6d12337ff2b8", "url": "https://github.com/php-school/cli-menu/blob/2b24d576338c5add84c9515a766c6d12337ff2b8/src/MenuItem/SplitItem.php#L86-L98", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/BaseConnection.php", "func_name": "BaseConnection.escapeIdentifiers", "original_string": "public function escapeIdentifiers($item)\n\t{\n\t\tif ($this->escapeChar === '' || empty($item) || in_array($item, $this->reservedIdentifiers))\n\t\t{\n\t\t\treturn $item;\n\t\t}\n\t\telseif (is_array($item))\n\t\t{\n\t\t\tforeach ($item as $key => $value)\n\t\t\t{\n\t\t\t\t$item[$key] = $this->escapeIdentifiers($value);\n\t\t\t}\n\n\t\t\treturn $item;\n\t\t}\n\t\t// Avoid breaking functions and literal values inside queries\n\t\telseif (ctype_digit($item) || $item[0] === \"'\" || ( $this->escapeChar !== '\"' && $item[0] === '\"') ||\n\t\t\t\tstrpos($item, '(') !== false\n\t\t)\n\t\t{\n\t\t\treturn $item;\n\t\t}\n\n\t\tstatic $preg_ec = [];\n\n\t\tif (empty($preg_ec))\n\t\t{\n\t\t\tif (is_array($this->escapeChar))\n\t\t\t{\n\t\t\t\t$preg_ec = [\n\t\t\t\t\tpreg_quote($this->escapeChar[0], '/'),\n\t\t\t\t\tpreg_quote($this->escapeChar[1], '/'),\n\t\t\t\t\t$this->escapeChar[0],\n\t\t\t\t\t$this->escapeChar[1],\n\t\t\t\t];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$preg_ec[0] = $preg_ec[1] = preg_quote($this->escapeChar, '/');\n\t\t\t\t$preg_ec[2] = $preg_ec[3] = $this->escapeChar;\n\t\t\t}\n\t\t}\n\n\t\tforeach ($this->reservedIdentifiers as $id)\n\t\t{\n\t\t\tif (strpos($item, '.' . $id) !== false)\n\t\t\t{\n\t\t\t\treturn preg_replace('/' . $preg_ec[0] . '?([^' . $preg_ec[1] . '\\.]+)' . $preg_ec[1] . '?\\./i', $preg_ec[2] . '$1' . $preg_ec[3] . '.', $item);\n\t\t\t}\n\t\t}\n\n\t\treturn preg_replace('/' . $preg_ec[0] . '?([^' . $preg_ec[1] . '\\.]+)' . $preg_ec[1] . '?(\\.)?/i', $preg_ec[2] . '$1' . $preg_ec[3] . '$2', $item);\n\t}", "language": "php", "code": "public function escapeIdentifiers($item)\n\t{\n\t\tif ($this->escapeChar === '' || empty($item) || in_array($item, $this->reservedIdentifiers))\n\t\t{\n\t\t\treturn $item;\n\t\t}\n\t\telseif (is_array($item))\n\t\t{\n\t\t\tforeach ($item as $key => $value)\n\t\t\t{\n\t\t\t\t$item[$key] = $this->escapeIdentifiers($value);\n\t\t\t}\n\n\t\t\treturn $item;\n\t\t}\n\t\t// Avoid breaking functions and literal values inside queries\n\t\telseif (ctype_digit($item) || $item[0] === \"'\" || ( $this->escapeChar !== '\"' && $item[0] === '\"') ||\n\t\t\t\tstrpos($item, '(') !== false\n\t\t)\n\t\t{\n\t\t\treturn $item;\n\t\t}\n\n\t\tstatic $preg_ec = [];\n\n\t\tif (empty($preg_ec))\n\t\t{\n\t\t\tif (is_array($this->escapeChar))\n\t\t\t{\n\t\t\t\t$preg_ec = [\n\t\t\t\t\tpreg_quote($this->escapeChar[0], '/'),\n\t\t\t\t\tpreg_quote($this->escapeChar[1], '/'),\n\t\t\t\t\t$this->escapeChar[0],\n\t\t\t\t\t$this->escapeChar[1],\n\t\t\t\t];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$preg_ec[0] = $preg_ec[1] = preg_quote($this->escapeChar, '/');\n\t\t\t\t$preg_ec[2] = $preg_ec[3] = $this->escapeChar;\n\t\t\t}\n\t\t}\n\n\t\tforeach ($this->reservedIdentifiers as $id)\n\t\t{\n\t\t\tif (strpos($item, '.' . $id) !== false)\n\t\t\t{\n\t\t\t\treturn preg_replace('/' . $preg_ec[0] . '?([^' . $preg_ec[1] . '\\.]+)' . $preg_ec[1] . '?\\./i', $preg_ec[2] . '$1' . $preg_ec[3] . '.', $item);\n\t\t\t}\n\t\t}\n\n\t\treturn preg_replace('/' . $preg_ec[0] . '?([^' . $preg_ec[1] . '\\.]+)' . $preg_ec[1] . '?(\\.)?/i', $preg_ec[2] . '$1' . $preg_ec[3] . '$2', $item);\n\t}", "code_tokens": ["public", "function", "escapeIdentifiers", "(", "$", "item", ")", "{", "if", "(", "$", "this", "->", "escapeChar", "===", "''", "||", "empty", "(", "$", "item", ")", "||", "in_array", "(", "$", "item", ",", "$", "this", "->", "reservedIdentifiers", ")", ")", "{", "return", "$", "item", ";", "}", "elseif", "(", "is_array", "(", "$", "item", ")", ")", "{", "foreach", "(", "$", "item", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "item", "[", "$", "key", "]", "=", "$", "this", "->", "escapeIdentifiers", "(", "$", "value", ")", ";", "}", "return", "$", "item", ";", "}", "// Avoid breaking functions and literal values inside queries", "elseif", "(", "ctype_digit", "(", "$", "item", ")", "||", "$", "item", "[", "0", "]", "===", "\"'\"", "||", "(", "$", "this", "->", "escapeChar", "!==", "'\"'", "&&", "$", "item", "[", "0", "]", "===", "'\"'", ")", "||", "strpos", "(", "$", "item", ",", "'('", ")", "!==", "false", ")", "{", "return", "$", "item", ";", "}", "static", "$", "preg_ec", "=", "[", "]", ";", "if", "(", "empty", "(", "$", "preg_ec", ")", ")", "{", "if", "(", "is_array", "(", "$", "this", "->", "escapeChar", ")", ")", "{", "$", "preg_ec", "=", "[", "preg_quote", "(", "$", "this", "->", "escapeChar", "[", "0", "]", ",", "'/'", ")", ",", "preg_quote", "(", "$", "this", "->", "escapeChar", "[", "1", "]", ",", "'/'", ")", ",", "$", "this", "->", "escapeChar", "[", "0", "]", ",", "$", "this", "->", "escapeChar", "[", "1", "]", ",", "]", ";", "}", "else", "{", "$", "preg_ec", "[", "0", "]", "=", "$", "preg_ec", "[", "1", "]", "=", "preg_quote", "(", "$", "this", "->", "escapeChar", ",", "'/'", ")", ";", "$", "preg_ec", "[", "2", "]", "=", "$", "preg_ec", "[", "3", "]", "=", "$", "this", "->", "escapeChar", ";", "}", "}", "foreach", "(", "$", "this", "->", "reservedIdentifiers", "as", "$", "id", ")", "{", "if", "(", "strpos", "(", "$", "item", ",", "'.'", ".", "$", "id", ")", "!==", "false", ")", "{", "return", "preg_replace", "(", "'/'", ".", "$", "preg_ec", "[", "0", "]", ".", "'?([^'", ".", "$", "preg_ec", "[", "1", "]", ".", "'\\.]+)'", ".", "$", "preg_ec", "[", "1", "]", ".", "'?\\./i'", ",", "$", "preg_ec", "[", "2", "]", ".", "'$1'", ".", "$", "preg_ec", "[", "3", "]", ".", "'.'", ",", "$", "item", ")", ";", "}", "}", "return", "preg_replace", "(", "'/'", ".", "$", "preg_ec", "[", "0", "]", ".", "'?([^'", ".", "$", "preg_ec", "[", "1", "]", ".", "'\\.]+)'", ".", "$", "preg_ec", "[", "1", "]", ".", "'?(\\.)?/i'", ",", "$", "preg_ec", "[", "2", "]", ".", "'$1'", ".", "$", "preg_ec", "[", "3", "]", ".", "'$2'", ",", "$", "item", ")", ";", "}"], "docstring": "Escape the SQL Identifiers\n\nThis function escapes column and table names\n\n@param mixed $item\n\n@return mixed", "docstring_tokens": ["Escape", "the", "SQL", "Identifiers"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/BaseConnection.php#L1254-L1306", "partition": "test"}
{"repo": "develpr/alexa-app", "path": "src/Http/Routing/AlexaRoute.php", "func_name": "AlexaRoute.compileRoute", "original_string": "protected function compileRoute()\n    {\n        if (version_compare(\\Illuminate\\Foundation\\Application::VERSION, '5.5.0') < 0) {\n            if ( is_callable( \"parent::extractOptionalParameters\" ) ) {\n                return parent::compileRoute();\n            }\n        }\n\n        if (! $this->compiled) {\n\n            //todo: this is a bit ugly - we should go deeper and solve the real problem\n            //This is ugly - before 5.4, we didn't use \"uri()\" method in the RouteCompiler (there was no\n            //route compiler!), and instead we used the private uri instance variable. Which meant that\n            //`uri()` and `uri` were different.\n            $tempRouterIntent = $this->routeIntent;\n            $this->routeIntent = \"\";\n            $this->compiled = (new RouteCompiler($this))->compile();\n            $this->routeIntent = $tempRouterIntent;\n        }\n\n        return $this->compiled;\n    }", "language": "php", "code": "protected function compileRoute()\n    {\n        if (version_compare(\\Illuminate\\Foundation\\Application::VERSION, '5.5.0') < 0) {\n            if ( is_callable( \"parent::extractOptionalParameters\" ) ) {\n                return parent::compileRoute();\n            }\n        }\n\n        if (! $this->compiled) {\n\n            //todo: this is a bit ugly - we should go deeper and solve the real problem\n            //This is ugly - before 5.4, we didn't use \"uri()\" method in the RouteCompiler (there was no\n            //route compiler!), and instead we used the private uri instance variable. Which meant that\n            //`uri()` and `uri` were different.\n            $tempRouterIntent = $this->routeIntent;\n            $this->routeIntent = \"\";\n            $this->compiled = (new RouteCompiler($this))->compile();\n            $this->routeIntent = $tempRouterIntent;\n        }\n\n        return $this->compiled;\n    }", "code_tokens": ["protected", "function", "compileRoute", "(", ")", "{", "if", "(", "version_compare", "(", "\\", "Illuminate", "\\", "Foundation", "\\", "Application", "::", "VERSION", ",", "'5.5.0'", ")", "<", "0", ")", "{", "if", "(", "is_callable", "(", "\"parent::extractOptionalParameters\"", ")", ")", "{", "return", "parent", "::", "compileRoute", "(", ")", ";", "}", "}", "if", "(", "!", "$", "this", "->", "compiled", ")", "{", "//todo: this is a bit ugly - we should go deeper and solve the real problem", "//This is ugly - before 5.4, we didn't use \"uri()\" method in the RouteCompiler (there was no", "//route compiler!), and instead we used the private uri instance variable. Which meant that", "//`uri()` and `uri` were different.", "$", "tempRouterIntent", "=", "$", "this", "->", "routeIntent", ";", "$", "this", "->", "routeIntent", "=", "\"\"", ";", "$", "this", "->", "compiled", "=", "(", "new", "RouteCompiler", "(", "$", "this", ")", ")", "->", "compile", "(", ")", ";", "$", "this", "->", "routeIntent", "=", "$", "tempRouterIntent", ";", "}", "return", "$", "this", "->", "compiled", ";", "}"], "docstring": "Compile the route into a Symfony CompiledRoute instance.\n\n@return void", "docstring_tokens": ["Compile", "the", "route", "into", "a", "Symfony", "CompiledRoute", "instance", "."], "sha": "4e14c2d2b6db4c58fb11c82867d1e712575f1ec3", "url": "https://github.com/develpr/alexa-app/blob/4e14c2d2b6db4c58fb11c82867d1e712575f1ec3/src/Http/Routing/AlexaRoute.php#L98-L119", "partition": "test"}
{"repo": "mamasu/mama-framework", "path": "src/Controller/FrontController.php", "func_name": "FrontController.executeACL", "original_string": "protected function executeACL() {\n        //Create the ACL\n        $this->acl = $this->getLibraryInstance('acl', 'aclClass', $this->auth, $this->connection, $this->language);\n        $isAllowed = $this->acl->isAllowed($this->routingRule);\n\n        //Check if is allow to create the controller and call the action\n        if (!$isAllowed) {\n            throw new ControllerException('User not allow to access', 1500);\n        }\n    }", "language": "php", "code": "protected function executeACL() {\n        //Create the ACL\n        $this->acl = $this->getLibraryInstance('acl', 'aclClass', $this->auth, $this->connection, $this->language);\n        $isAllowed = $this->acl->isAllowed($this->routingRule);\n\n        //Check if is allow to create the controller and call the action\n        if (!$isAllowed) {\n            throw new ControllerException('User not allow to access', 1500);\n        }\n    }", "code_tokens": ["protected", "function", "executeACL", "(", ")", "{", "//Create the ACL", "$", "this", "->", "acl", "=", "$", "this", "->", "getLibraryInstance", "(", "'acl'", ",", "'aclClass'", ",", "$", "this", "->", "auth", ",", "$", "this", "->", "connection", ",", "$", "this", "->", "language", ")", ";", "$", "isAllowed", "=", "$", "this", "->", "acl", "->", "isAllowed", "(", "$", "this", "->", "routingRule", ")", ";", "//Check if is allow to create the controller and call the action", "if", "(", "!", "$", "isAllowed", ")", "{", "throw", "new", "ControllerException", "(", "'User not allow to access'", ",", "1500", ")", ";", "}", "}"], "docstring": "Execute the Access Control List, throws and ControllerException if is not allowed.\n\n@throws ControllerException", "docstring_tokens": ["Execute", "the", "Access", "Control", "List", "throws", "and", "ControllerException", "if", "is", "not", "allowed", "."], "sha": "105a4980b56f1fdaad095a32189ee47d39203a7a", "url": "https://github.com/mamasu/mama-framework/blob/105a4980b56f1fdaad095a32189ee47d39203a7a/src/Controller/FrontController.php#L270-L279", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Model.php", "func_name": "Model.finish_save", "original_string": "protected function finish_save() {\n\n\t\t$this->fire_model_event( 'saved' );\n\n\t\tforeach ( $this->_relations as $attribute => $relation ) {\n\t\t\tif ( $relation instanceof Collection ) {\n\t\t\t\t$relation->clear_memory();\n\t\t\t}\n\t\t}\n\n\t\t$this->sync_original();\n\t}", "language": "php", "code": "protected function finish_save() {\n\n\t\t$this->fire_model_event( 'saved' );\n\n\t\tforeach ( $this->_relations as $attribute => $relation ) {\n\t\t\tif ( $relation instanceof Collection ) {\n\t\t\t\t$relation->clear_memory();\n\t\t\t}\n\t\t}\n\n\t\t$this->sync_original();\n\t}", "code_tokens": ["protected", "function", "finish_save", "(", ")", "{", "$", "this", "->", "fire_model_event", "(", "'saved'", ")", ";", "foreach", "(", "$", "this", "->", "_relations", "as", "$", "attribute", "=>", "$", "relation", ")", "{", "if", "(", "$", "relation", "instanceof", "Collection", ")", "{", "$", "relation", "->", "clear_memory", "(", ")", ";", "}", "}", "$", "this", "->", "sync_original", "(", ")", ";", "}"], "docstring": "Perform cleanup after a save has occurred.\n\n@since 2.0", "docstring_tokens": ["Perform", "cleanup", "after", "a", "save", "has", "occurred", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Model.php#L1241-L1252", "partition": "test"}
{"repo": "oito/php-micro", "path": "src/Oito/Micro/Application.php", "func_name": "Application.html", "original_string": "public function html($content = null, $status = 200) {\n        $r = new Response($content, $status);\n        $r->headers->set('Content-Type', 'text/html; charset=utf-8');\n        $r->setCharset('UTF-8');\n        return $r;\n    }", "language": "php", "code": "public function html($content = null, $status = 200) {\n        $r = new Response($content, $status);\n        $r->headers->set('Content-Type', 'text/html; charset=utf-8');\n        $r->setCharset('UTF-8');\n        return $r;\n    }", "code_tokens": ["public", "function", "html", "(", "$", "content", "=", "null", ",", "$", "status", "=", "200", ")", "{", "$", "r", "=", "new", "Response", "(", "$", "content", ",", "$", "status", ")", ";", "$", "r", "->", "headers", "->", "set", "(", "'Content-Type'", ",", "'text/html; charset=utf-8'", ")", ";", "$", "r", "->", "setCharset", "(", "'UTF-8'", ")", ";", "return", "$", "r", ";", "}"], "docstring": "Create a HTML response\n@param mixed $content Content to be sent\n@param int $status HTTP response code\n@return \\Symfony\\Component\\HttpFoundation\\Response", "docstring_tokens": ["Create", "a", "HTML", "response"], "sha": "14fea142263324ab7b8f31fe369947765c4d9e62", "url": "https://github.com/oito/php-micro/blob/14fea142263324ab7b8f31fe369947765c4d9e62/src/Oito/Micro/Application.php#L288-L293", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Filters/Filters.php", "func_name": "Filters.enableFilter", "original_string": "public function enableFilter(string $name, string $when = 'before')\n\t{\n\t\t// Get parameters and clean name\n\t\tif (strpos($name, ':') !== false)\n\t\t{\n\t\t\tlist($name, $params) = explode(':', $name);\n\n\t\t\t$params = explode(',', $params);\n\t\t\tarray_walk($params, function (&$item) {\n\t\t\t\t$item = trim($item);\n\t\t\t});\n\n\t\t\t$this->arguments[$name] = $params;\n\t\t}\n\n\t\tif (! array_key_exists($name, $this->config->aliases))\n\t\t{\n\t\t\tthrow FilterException::forNoAlias($name);\n\t\t}\n\n\t\tif (! isset($this->filters[$when][$name]))\n\t\t{\n\t\t\t$this->filters[$when][] = $name;\n\t\t}\n\n\t\treturn $this;\n\t}", "language": "php", "code": "public function enableFilter(string $name, string $when = 'before')\n\t{\n\t\t// Get parameters and clean name\n\t\tif (strpos($name, ':') !== false)\n\t\t{\n\t\t\tlist($name, $params) = explode(':', $name);\n\n\t\t\t$params = explode(',', $params);\n\t\t\tarray_walk($params, function (&$item) {\n\t\t\t\t$item = trim($item);\n\t\t\t});\n\n\t\t\t$this->arguments[$name] = $params;\n\t\t}\n\n\t\tif (! array_key_exists($name, $this->config->aliases))\n\t\t{\n\t\t\tthrow FilterException::forNoAlias($name);\n\t\t}\n\n\t\tif (! isset($this->filters[$when][$name]))\n\t\t{\n\t\t\t$this->filters[$when][] = $name;\n\t\t}\n\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "enableFilter", "(", "string", "$", "name", ",", "string", "$", "when", "=", "'before'", ")", "{", "// Get parameters and clean name", "if", "(", "strpos", "(", "$", "name", ",", "':'", ")", "!==", "false", ")", "{", "list", "(", "$", "name", ",", "$", "params", ")", "=", "explode", "(", "':'", ",", "$", "name", ")", ";", "$", "params", "=", "explode", "(", "','", ",", "$", "params", ")", ";", "array_walk", "(", "$", "params", ",", "function", "(", "&", "$", "item", ")", "{", "$", "item", "=", "trim", "(", "$", "item", ")", ";", "}", ")", ";", "$", "this", "->", "arguments", "[", "$", "name", "]", "=", "$", "params", ";", "}", "if", "(", "!", "array_key_exists", "(", "$", "name", ",", "$", "this", "->", "config", "->", "aliases", ")", ")", "{", "throw", "FilterException", "::", "forNoAlias", "(", "$", "name", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "this", "->", "filters", "[", "$", "when", "]", "[", "$", "name", "]", ")", ")", "{", "$", "this", "->", "filters", "[", "$", "when", "]", "[", "]", "=", "$", "name", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Ensures that a specific filter is on and enabled for the current request.\n\nFilters can have \"arguments\". This is done by placing a colon immediately\nafter the filter name, followed by a comma-separated list of arguments that\nare passed to the filter when executed.\n\n@param string $name\n@param string $when\n\n@return \\CodeIgniter\\Filters\\Filters", "docstring_tokens": ["Ensures", "that", "a", "specific", "filter", "is", "on", "and", "enabled", "for", "the", "current", "request", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Filters/Filters.php#L283-L309", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Map.php", "func_name": "Map.setCenter", "original_string": "public function setCenter()\n    {\n        $args = func_get_args();\n\n        if (isset($args[0]) && ($args[0] instanceof Coordinate)) {\n            $this->center = $args[0];\n        } elseif ((isset($args[0]) && is_numeric($args[0])) && (isset($args[1]) && is_numeric($args[1]))) {\n            $this->center->setLatitude($args[0]);\n            $this->center->setLongitude($args[1]);\n\n            if (isset($args[2]) && is_bool($args[2])) {\n                $this->center->setNoWrap($args[2]);\n            }\n        } else {\n            throw MapException::invalidCenter();\n        }\n    }", "language": "php", "code": "public function setCenter()\n    {\n        $args = func_get_args();\n\n        if (isset($args[0]) && ($args[0] instanceof Coordinate)) {\n            $this->center = $args[0];\n        } elseif ((isset($args[0]) && is_numeric($args[0])) && (isset($args[1]) && is_numeric($args[1]))) {\n            $this->center->setLatitude($args[0]);\n            $this->center->setLongitude($args[1]);\n\n            if (isset($args[2]) && is_bool($args[2])) {\n                $this->center->setNoWrap($args[2]);\n            }\n        } else {\n            throw MapException::invalidCenter();\n        }\n    }", "code_tokens": ["public", "function", "setCenter", "(", ")", "{", "$", "args", "=", "func_get_args", "(", ")", ";", "if", "(", "isset", "(", "$", "args", "[", "0", "]", ")", "&&", "(", "$", "args", "[", "0", "]", "instanceof", "Coordinate", ")", ")", "{", "$", "this", "->", "center", "=", "$", "args", "[", "0", "]", ";", "}", "elseif", "(", "(", "isset", "(", "$", "args", "[", "0", "]", ")", "&&", "is_numeric", "(", "$", "args", "[", "0", "]", ")", ")", "&&", "(", "isset", "(", "$", "args", "[", "1", "]", ")", "&&", "is_numeric", "(", "$", "args", "[", "1", "]", ")", ")", ")", "{", "$", "this", "->", "center", "->", "setLatitude", "(", "$", "args", "[", "0", "]", ")", ";", "$", "this", "->", "center", "->", "setLongitude", "(", "$", "args", "[", "1", "]", ")", ";", "if", "(", "isset", "(", "$", "args", "[", "2", "]", ")", "&&", "is_bool", "(", "$", "args", "[", "2", "]", ")", ")", "{", "$", "this", "->", "center", "->", "setNoWrap", "(", "$", "args", "[", "2", "]", ")", ";", "}", "}", "else", "{", "throw", "MapException", "::", "invalidCenter", "(", ")", ";", "}", "}"], "docstring": "Sets the map center.\n\nAvailable prototypes:\n- function setCenter(Ivory\\GoogleMap\\Base\\Coordinate $center)\n- function setCenter(double $latitude, double $longitude, boolean $noWrap = true)\n\n@throws \\Ivory\\GoogleMap\\Exception\\MapException If the center is not valid (prototypes).", "docstring_tokens": ["Sets", "the", "map", "center", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Map.php#L264-L280", "partition": "test"}
{"repo": "koraktor/steam-condenser-php", "path": "lib/SteamCondenser/Socket.php", "func_name": "Socket.select", "original_string": "public function select($timeout = 0) {\n        $read = [$this->socket];\n        $write = null;\n        $except = null;\n\n        $sec = floor($timeout / 1000);\n        $usec = $timeout % 1000;\n        if($this->socketsEnabled) {\n            $select = socket_select($read, $write, $except, $sec, $usec);\n        } else {\n            $select = stream_select($read, $write, $except, $sec, $usec);\n        }\n\n        return $select > 0;\n    }", "language": "php", "code": "public function select($timeout = 0) {\n        $read = [$this->socket];\n        $write = null;\n        $except = null;\n\n        $sec = floor($timeout / 1000);\n        $usec = $timeout % 1000;\n        if($this->socketsEnabled) {\n            $select = socket_select($read, $write, $except, $sec, $usec);\n        } else {\n            $select = stream_select($read, $write, $except, $sec, $usec);\n        }\n\n        return $select > 0;\n    }", "code_tokens": ["public", "function", "select", "(", "$", "timeout", "=", "0", ")", "{", "$", "read", "=", "[", "$", "this", "->", "socket", "]", ";", "$", "write", "=", "null", ";", "$", "except", "=", "null", ";", "$", "sec", "=", "floor", "(", "$", "timeout", "/", "1000", ")", ";", "$", "usec", "=", "$", "timeout", "%", "1000", ";", "if", "(", "$", "this", "->", "socketsEnabled", ")", "{", "$", "select", "=", "socket_select", "(", "$", "read", ",", "$", "write", ",", "$", "except", ",", "$", "sec", ",", "$", "usec", ")", ";", "}", "else", "{", "$", "select", "=", "stream_select", "(", "$", "read", ",", "$", "write", ",", "$", "except", ",", "$", "sec", ",", "$", "usec", ")", ";", "}", "return", "$", "select", ">", "0", ";", "}"], "docstring": "Waits for data to be read from this socket before the specified timeout\noccurs\n\n@param int $timeout The number of milliseconds to wait for data arriving\non this socket before timing out\n@return bool whether data arrived on this socket before the timeout", "docstring_tokens": ["Waits", "for", "data", "to", "be", "read", "from", "this", "socket", "before", "the", "specified", "timeout", "occurs"], "sha": "92dde9e3b462e93cc498fe795a712c61eec7051e", "url": "https://github.com/koraktor/steam-condenser-php/blob/92dde9e3b462e93cc498fe795a712c61eec7051e/lib/SteamCondenser/Socket.php#L148-L162", "partition": "test"}
{"repo": "marcelog/Ding", "path": "src/mg/Ding/Helpers/Tcp/TcpClientHelper.php", "func_name": "TcpClientHelper.close", "original_string": "public function close()\n    {\n        $this->_connected = false;\n        $this->_handler->disconnect();\n        socket_close($this->_socket);\n        $this->_socket = false;\n    }", "language": "php", "code": "public function close()\n    {\n        $this->_connected = false;\n        $this->_handler->disconnect();\n        socket_close($this->_socket);\n        $this->_socket = false;\n    }", "code_tokens": ["public", "function", "close", "(", ")", "{", "$", "this", "->", "_connected", "=", "false", ";", "$", "this", "->", "_handler", "->", "disconnect", "(", ")", ";", "socket_close", "(", "$", "this", "->", "_socket", ")", ";", "$", "this", "->", "_socket", "=", "false", ";", "}"], "docstring": "Call this to close the connection.\n\n@return void", "docstring_tokens": ["Call", "this", "to", "close", "the", "connection", "."], "sha": "aad50c28e99509f22c9cb1ba54acbeced3b30c50", "url": "https://github.com/marcelog/Ding/blob/aad50c28e99509f22c9cb1ba54acbeced3b30c50/src/mg/Ding/Helpers/Tcp/TcpClientHelper.php#L114-L120", "partition": "test"}
{"repo": "tomahawkphp/framework", "path": "src/Tomahawk/Routing/Controller/RedirectController.php", "func_name": "RedirectController.urlRedirectAction", "original_string": "public function urlRedirectAction(Request $request, $path, $permanent = false, $scheme = null, $httpPort = null, $httpsPort = null)\n    {\n        /** @var ConfigInterface $config */\n        $config = $this->container->get('config');\n\n        if ('' == $path) {\n            throw new HttpException($permanent ? 410 : 404);\n        }\n\n        $statusCode = $permanent ? 301 : 302;\n        // redirect if the path is a full URL\n\n        if (parse_url($path, PHP_URL_SCHEME)) {\n            return new RedirectResponse($path, $statusCode);\n        }\n\n        if (null === $scheme) {\n            $scheme = $request->getScheme();\n        }\n\n        $qs = $request->getQueryString();\n\n        if ($qs) {\n\n            if (strpos($path, '?') === false) {\n                $qs = '?'.$qs;\n            }\n            else {\n                $qs = '&'.$qs;\n            }\n        }\n        $port = '';\n\n        if ('http' === $scheme) {\n\n            if (null === $httpPort) {\n\n                if ('http' === $request->getScheme()) {\n                    $httpPort = $request->getPort();\n                }\n                elseif ($config->has('request.http_port')) {\n                    $httpPort = $config->get('request.http_port');\n                }\n            }\n\n            if (null !== $httpPort && 80 != $httpPort) {\n                $port = \":$httpPort\";\n            }\n        }\n        elseif ('https' === $scheme) {\n\n            if (null === $httpsPort) {\n\n                if ('https' === $request->getScheme()) {\n                    $httpsPort = $request->getPort();\n                }\n                elseif ($config->has('request.https_port')) {\n                    $httpsPort = $config->get('request.https_port');\n                }\n            }\n\n            if (null !== $httpsPort && 443 != $httpsPort) {\n                $port = \":$httpsPort\";\n            }\n        }\n\n        $url = $scheme.'://'.$request->getHost().$port.$request->getBaseUrl().$path.$qs;\n\n        return new RedirectResponse($url, $statusCode);\n    }", "language": "php", "code": "public function urlRedirectAction(Request $request, $path, $permanent = false, $scheme = null, $httpPort = null, $httpsPort = null)\n    {\n        /** @var ConfigInterface $config */\n        $config = $this->container->get('config');\n\n        if ('' == $path) {\n            throw new HttpException($permanent ? 410 : 404);\n        }\n\n        $statusCode = $permanent ? 301 : 302;\n        // redirect if the path is a full URL\n\n        if (parse_url($path, PHP_URL_SCHEME)) {\n            return new RedirectResponse($path, $statusCode);\n        }\n\n        if (null === $scheme) {\n            $scheme = $request->getScheme();\n        }\n\n        $qs = $request->getQueryString();\n\n        if ($qs) {\n\n            if (strpos($path, '?') === false) {\n                $qs = '?'.$qs;\n            }\n            else {\n                $qs = '&'.$qs;\n            }\n        }\n        $port = '';\n\n        if ('http' === $scheme) {\n\n            if (null === $httpPort) {\n\n                if ('http' === $request->getScheme()) {\n                    $httpPort = $request->getPort();\n                }\n                elseif ($config->has('request.http_port')) {\n                    $httpPort = $config->get('request.http_port');\n                }\n            }\n\n            if (null !== $httpPort && 80 != $httpPort) {\n                $port = \":$httpPort\";\n            }\n        }\n        elseif ('https' === $scheme) {\n\n            if (null === $httpsPort) {\n\n                if ('https' === $request->getScheme()) {\n                    $httpsPort = $request->getPort();\n                }\n                elseif ($config->has('request.https_port')) {\n                    $httpsPort = $config->get('request.https_port');\n                }\n            }\n\n            if (null !== $httpsPort && 443 != $httpsPort) {\n                $port = \":$httpsPort\";\n            }\n        }\n\n        $url = $scheme.'://'.$request->getHost().$port.$request->getBaseUrl().$path.$qs;\n\n        return new RedirectResponse($url, $statusCode);\n    }", "code_tokens": ["public", "function", "urlRedirectAction", "(", "Request", "$", "request", ",", "$", "path", ",", "$", "permanent", "=", "false", ",", "$", "scheme", "=", "null", ",", "$", "httpPort", "=", "null", ",", "$", "httpsPort", "=", "null", ")", "{", "/** @var ConfigInterface $config */", "$", "config", "=", "$", "this", "->", "container", "->", "get", "(", "'config'", ")", ";", "if", "(", "''", "==", "$", "path", ")", "{", "throw", "new", "HttpException", "(", "$", "permanent", "?", "410", ":", "404", ")", ";", "}", "$", "statusCode", "=", "$", "permanent", "?", "301", ":", "302", ";", "// redirect if the path is a full URL", "if", "(", "parse_url", "(", "$", "path", ",", "PHP_URL_SCHEME", ")", ")", "{", "return", "new", "RedirectResponse", "(", "$", "path", ",", "$", "statusCode", ")", ";", "}", "if", "(", "null", "===", "$", "scheme", ")", "{", "$", "scheme", "=", "$", "request", "->", "getScheme", "(", ")", ";", "}", "$", "qs", "=", "$", "request", "->", "getQueryString", "(", ")", ";", "if", "(", "$", "qs", ")", "{", "if", "(", "strpos", "(", "$", "path", ",", "'?'", ")", "===", "false", ")", "{", "$", "qs", "=", "'?'", ".", "$", "qs", ";", "}", "else", "{", "$", "qs", "=", "'&'", ".", "$", "qs", ";", "}", "}", "$", "port", "=", "''", ";", "if", "(", "'http'", "===", "$", "scheme", ")", "{", "if", "(", "null", "===", "$", "httpPort", ")", "{", "if", "(", "'http'", "===", "$", "request", "->", "getScheme", "(", ")", ")", "{", "$", "httpPort", "=", "$", "request", "->", "getPort", "(", ")", ";", "}", "elseif", "(", "$", "config", "->", "has", "(", "'request.http_port'", ")", ")", "{", "$", "httpPort", "=", "$", "config", "->", "get", "(", "'request.http_port'", ")", ";", "}", "}", "if", "(", "null", "!==", "$", "httpPort", "&&", "80", "!=", "$", "httpPort", ")", "{", "$", "port", "=", "\":$httpPort\"", ";", "}", "}", "elseif", "(", "'https'", "===", "$", "scheme", ")", "{", "if", "(", "null", "===", "$", "httpsPort", ")", "{", "if", "(", "'https'", "===", "$", "request", "->", "getScheme", "(", ")", ")", "{", "$", "httpsPort", "=", "$", "request", "->", "getPort", "(", ")", ";", "}", "elseif", "(", "$", "config", "->", "has", "(", "'request.https_port'", ")", ")", "{", "$", "httpsPort", "=", "$", "config", "->", "get", "(", "'request.https_port'", ")", ";", "}", "}", "if", "(", "null", "!==", "$", "httpsPort", "&&", "443", "!=", "$", "httpsPort", ")", "{", "$", "port", "=", "\":$httpsPort\"", ";", "}", "}", "$", "url", "=", "$", "scheme", ".", "'://'", ".", "$", "request", "->", "getHost", "(", ")", ".", "$", "port", ".", "$", "request", "->", "getBaseUrl", "(", ")", ".", "$", "path", ".", "$", "qs", ";", "return", "new", "RedirectResponse", "(", "$", "url", ",", "$", "statusCode", ")", ";", "}"], "docstring": "Redirects to a URL.\n\nThe response status code is 302 if the permanent parameter is false (default),\nand 301 if the redirection is permanent.\n\nIn case the path is empty, the status code will be 404 when permanent is false\nand 410 otherwise.\n\n@param Request $request\n@param $path\n@param bool|false $permanent\n@param null $scheme\n@param null $httpPort\n@param null $httpsPort\n@return RedirectResponse\n@throws HttpException", "docstring_tokens": ["Redirects", "to", "a", "URL", "."], "sha": "087ee2d362fe70a9020d32c00f7a48cb11b9c04f", "url": "https://github.com/tomahawkphp/framework/blob/087ee2d362fe70a9020d32c00f7a48cb11b9c04f/src/Tomahawk/Routing/Controller/RedirectController.php#L57-L126", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-queue/src/Queue/Models/UpdateMessageResult.php", "func_name": "UpdateMessageResult.create", "original_string": "public static function create(array $headers)\n    {\n        $result = new UpdateMessageResult();\n        $result->setPopReceipt(Utilities::tryGetValueInsensitive(\n            Resources::X_MS_POPRECEIPT,\n            $headers\n        ));\n        $timeNextVisible = Utilities::tryGetValueInsensitive(\n            Resources::X_MS_TIME_NEXT_VISIBLE,\n            $headers\n        );\n        $date   = Utilities::rfc1123ToDateTime($timeNextVisible);\n        $result->setTimeNextVisible($date);\n\n        return $result;\n    }", "language": "php", "code": "public static function create(array $headers)\n    {\n        $result = new UpdateMessageResult();\n        $result->setPopReceipt(Utilities::tryGetValueInsensitive(\n            Resources::X_MS_POPRECEIPT,\n            $headers\n        ));\n        $timeNextVisible = Utilities::tryGetValueInsensitive(\n            Resources::X_MS_TIME_NEXT_VISIBLE,\n            $headers\n        );\n        $date   = Utilities::rfc1123ToDateTime($timeNextVisible);\n        $result->setTimeNextVisible($date);\n\n        return $result;\n    }", "code_tokens": ["public", "static", "function", "create", "(", "array", "$", "headers", ")", "{", "$", "result", "=", "new", "UpdateMessageResult", "(", ")", ";", "$", "result", "->", "setPopReceipt", "(", "Utilities", "::", "tryGetValueInsensitive", "(", "Resources", "::", "X_MS_POPRECEIPT", ",", "$", "headers", ")", ")", ";", "$", "timeNextVisible", "=", "Utilities", "::", "tryGetValueInsensitive", "(", "Resources", "::", "X_MS_TIME_NEXT_VISIBLE", ",", "$", "headers", ")", ";", "$", "date", "=", "Utilities", "::", "rfc1123ToDateTime", "(", "$", "timeNextVisible", ")", ";", "$", "result", "->", "setTimeNextVisible", "(", "$", "date", ")", ";", "return", "$", "result", ";", "}"], "docstring": "Creates an instance with the given response headers.\n\n@param  array  $headers The response headers used to create the instance.\n\n@internal\n\n@return UpdateMessageResult", "docstring_tokens": ["Creates", "an", "instance", "with", "the", "given", "response", "headers", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-queue/src/Queue/Models/UpdateMessageResult.php#L55-L70", "partition": "test"}
{"repo": "pietercolpaert/hardf", "path": "src/Util.php", "func_name": "Util.getLiteralType", "original_string": "public static function getLiteralType ($literal)\n    {\n        preg_match('/^\".*\"(?:\\^\\^([^\"]+)|(@)[^@\"]+)?$/s',$literal,$match);//TODO: somehow the copied regex did not work. To be checked. Contained [^] instead of the .\n        if (empty($match))\n            throw new \\Exception($literal . ' is not a literal');\n        if (!empty($match[1])) {\n            return $match[1];\n        } else {\n            return !empty($match[2]) ? self::RDFLANGSTRING : self::XSDSTRING;\n        }\n    }", "language": "php", "code": "public static function getLiteralType ($literal)\n    {\n        preg_match('/^\".*\"(?:\\^\\^([^\"]+)|(@)[^@\"]+)?$/s',$literal,$match);//TODO: somehow the copied regex did not work. To be checked. Contained [^] instead of the .\n        if (empty($match))\n            throw new \\Exception($literal . ' is not a literal');\n        if (!empty($match[1])) {\n            return $match[1];\n        } else {\n            return !empty($match[2]) ? self::RDFLANGSTRING : self::XSDSTRING;\n        }\n    }", "code_tokens": ["public", "static", "function", "getLiteralType", "(", "$", "literal", ")", "{", "preg_match", "(", "'/^\".*\"(?:\\^\\^([^\"]+)|(@)[^@\"]+)?$/s'", ",", "$", "literal", ",", "$", "match", ")", ";", "//TODO: somehow the copied regex did not work. To be checked. Contained [^] instead of the .", "if", "(", "empty", "(", "$", "match", ")", ")", "throw", "new", "\\", "Exception", "(", "$", "literal", ".", "' is not a literal'", ")", ";", "if", "(", "!", "empty", "(", "$", "match", "[", "1", "]", ")", ")", "{", "return", "$", "match", "[", "1", "]", ";", "}", "else", "{", "return", "!", "empty", "(", "$", "match", "[", "2", "]", ")", "?", "self", "::", "RDFLANGSTRING", ":", "self", "::", "XSDSTRING", ";", "}", "}"], "docstring": "Gets the type of a literal in the N3 library", "docstring_tokens": ["Gets", "the", "type", "of", "a", "literal", "in", "the", "N3", "library"], "sha": "39dd566889175a81202565d4e5c4071a6b866b3b", "url": "https://github.com/pietercolpaert/hardf/blob/39dd566889175a81202565d4e5c4071a6b866b3b/src/Util.php#L57-L67", "partition": "test"}
{"repo": "googleapis/common-protos-php", "path": "src/Iam/Admin/V1/ListServiceAccountsResponse.php", "func_name": "ListServiceAccountsResponse.setAccounts", "original_string": "public function setAccounts($var)\n    {\n        $arr = GPBUtil::checkRepeatedField($var, \\Google\\Protobuf\\Internal\\GPBType::MESSAGE, \\Google\\Iam\\Admin\\V1\\ServiceAccount::class);\n        $this->accounts = $arr;\n\n        return $this;\n    }", "language": "php", "code": "public function setAccounts($var)\n    {\n        $arr = GPBUtil::checkRepeatedField($var, \\Google\\Protobuf\\Internal\\GPBType::MESSAGE, \\Google\\Iam\\Admin\\V1\\ServiceAccount::class);\n        $this->accounts = $arr;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setAccounts", "(", "$", "var", ")", "{", "$", "arr", "=", "GPBUtil", "::", "checkRepeatedField", "(", "$", "var", ",", "\\", "Google", "\\", "Protobuf", "\\", "Internal", "\\", "GPBType", "::", "MESSAGE", ",", "\\", "Google", "\\", "Iam", "\\", "Admin", "\\", "V1", "\\", "ServiceAccount", "::", "class", ")", ";", "$", "this", "->", "accounts", "=", "$", "arr", ";", "return", "$", "this", ";", "}"], "docstring": "The list of matching service accounts.\n\nGenerated from protobuf field <code>repeated .google.iam.admin.v1.ServiceAccount accounts = 1;</code>\n@param \\Google\\Iam\\Admin\\V1\\ServiceAccount[]|\\Google\\Protobuf\\Internal\\RepeatedField $var\n@return $this", "docstring_tokens": ["The", "list", "of", "matching", "service", "accounts", "."], "sha": "d4763ce7c8046ec84534bd3aa61ab606f4b27373", "url": "https://github.com/googleapis/common-protos-php/blob/d4763ce7c8046ec84534bd3aa61ab606f4b27373/src/Iam/Admin/V1/ListServiceAccountsResponse.php#L70-L76", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Template.php", "func_name": "Template.hasParent", "original_string": "protected function hasParent(string $file = null): bool\n    {\n        if (isset($file)) {\n            return in_array($file, $this->parents, true);\n        }\n        return !empty($this->parents);\n    }", "language": "php", "code": "protected function hasParent(string $file = null): bool\n    {\n        if (isset($file)) {\n            return in_array($file, $this->parents, true);\n        }\n        return !empty($this->parents);\n    }", "code_tokens": ["protected", "function", "hasParent", "(", "string", "$", "file", "=", "null", ")", ":", "bool", "{", "if", "(", "isset", "(", "$", "file", ")", ")", "{", "return", "in_array", "(", "$", "file", ",", "$", "this", "->", "parents", ",", "true", ")", ";", "}", "return", "!", "empty", "(", "$", "this", "->", "parents", ")", ";", "}"], "docstring": "Has a parent?\n\n@since 150424 Initial release.\n\n@param string|null $file Template file.\n\n@return bool True if child has a parent.", "docstring_tokens": ["Has", "a", "parent?"], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Template.php#L203-L209", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/SOAP/Server.php", "func_name": "QuickBooks_SOAP_Server._requestFactory", "original_string": "protected function _requestFactory($request)\n\t{\n\t\t$class = 'QuickBooks_WebConnector_Request_' . ucfirst(strtolower($request));\n\t\t$file = '/QuickBooks/WebConnector/Request/' . ucfirst(strtolower($request)) . '.php';\n\t\t\n\t\t// Make sure that class gets loaded\n\t\tQuickBooks_Loader::load($file, false);\n\t\t\n\t\tif (class_exists($class))\n\t\t{\n\t\t\treturn new $class();\n\t\t}\n\t\t\n\t\treturn false;\n\t}", "language": "php", "code": "protected function _requestFactory($request)\n\t{\n\t\t$class = 'QuickBooks_WebConnector_Request_' . ucfirst(strtolower($request));\n\t\t$file = '/QuickBooks/WebConnector/Request/' . ucfirst(strtolower($request)) . '.php';\n\t\t\n\t\t// Make sure that class gets loaded\n\t\tQuickBooks_Loader::load($file, false);\n\t\t\n\t\tif (class_exists($class))\n\t\t{\n\t\t\treturn new $class();\n\t\t}\n\t\t\n\t\treturn false;\n\t}", "code_tokens": ["protected", "function", "_requestFactory", "(", "$", "request", ")", "{", "$", "class", "=", "'QuickBooks_WebConnector_Request_'", ".", "ucfirst", "(", "strtolower", "(", "$", "request", ")", ")", ";", "$", "file", "=", "'/QuickBooks/WebConnector/Request/'", ".", "ucfirst", "(", "strtolower", "(", "$", "request", ")", ")", ".", "'.php'", ";", "// Make sure that class gets loaded", "QuickBooks_Loader", "::", "load", "(", "$", "file", ",", "false", ")", ";", "if", "(", "class_exists", "(", "$", "class", ")", ")", "{", "return", "new", "$", "class", "(", ")", ";", "}", "return", "false", ";", "}"], "docstring": "Create an instance of a request type object\n\n@param string $request\n@return QuickBooks_Request", "docstring_tokens": ["Create", "an", "instance", "of", "a", "request", "type", "object"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/SOAP/Server.php#L54-L68", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Helpers/Request/FileHelper.php", "func_name": "FileHelper.localize", "original_string": "public function localize($file, $language = null, $sourceLanguage = null)\n    {\n        return $this->proxyWithLanguage(__FUNCTION__, [$file, $language, $sourceLanguage], -2);\n    }", "language": "php", "code": "public function localize($file, $language = null, $sourceLanguage = null)\n    {\n        return $this->proxyWithLanguage(__FUNCTION__, [$file, $language, $sourceLanguage], -2);\n    }", "code_tokens": ["public", "function", "localize", "(", "$", "file", ",", "$", "language", "=", "null", ",", "$", "sourceLanguage", "=", "null", ")", "{", "return", "$", "this", "->", "proxyWithLanguage", "(", "__FUNCTION__", ",", "[", "$", "file", ",", "$", "language", ",", "$", "sourceLanguage", "]", ",", "-", "2", ")", ";", "}"], "docstring": "Returns the localized version of a specified file.\n\nThe searching is based on the specified language code. In particular,\na file with the same name will be looked for under the subdirectory\nwhose name is the same as the language code. For example, given the file \"path/to/view.php\"\nand language code \"zh-CN\", the localized file will be looked for as\n\"path/to/zh-CN/view.php\". If the file is not found, it will try a fallback with just a language code that is\n\"zh\" i.e. \"path/to/zh/view.php\". If it is not found as well the original file will be returned.\n\nIf the target and the source language codes are the same,\nthe original file will be returned.\n\n@param string $file the original file\n@param string $language the target language that the file should be localized to.\nIf not set, the value of [[\\yii\\base\\Application::language]] will be used.\n@param string $sourceLanguage the language that the original file is in.\nIf not set, the value of [[\\yii\\base\\Application::sourceLanguage]] will be used.\n@return string the matching localized file, or the original file if the localized version is not found.\nIf the target and the source language codes are the same, the original file will be returned.\n@see \\Reaction\\Helpers\\FileHelper::localize()", "docstring_tokens": ["Returns", "the", "localized", "version", "of", "a", "specified", "file", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Helpers/Request/FileHelper.php#L57-L60", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/Entity/PostManager.php", "func_name": "PostManager.save", "original_string": "public function save()\n    {\n        $this->beforeSave();\n\n        // Arrays for holding save data\n        $post = array();\n        $meta = array();\n        $post['post_status'] = $this->post_status;\n\n        // Get the default class variables and set it's keys to forbiddenKeys\n        $defaultData = get_class_vars(get_class($this));\n        $forbiddenKeys = array_keys($defaultData);\n\n        $data = array_filter(get_object_vars($this), function ($item) use ($forbiddenKeys) {\n            return !in_array($item, $forbiddenKeys);\n        }, ARRAY_FILTER_USE_KEY);\n\n        // If data key is allowed post field add to $post else add to $meta\n        foreach ($data as $key => $value) {\n            if (in_array($key, $this->allowedPostFields)) {\n                $post[$key] = $value;\n                continue;\n            }\n\n            $meta[$key] = $value;\n        }\n\n        // Save empty meta to array\n        $empty_meta_values = array_filter($meta, array($this, 'getEmptyValues'));\n\n        // Do not include null values in meta\n        $meta = array_filter($meta, array($this, 'removeEmpty'));\n\n        $post['post_type'] = $this->post_type;\n        $post['meta_input'] = $meta;\n\n        // Check if duplicate by matching \"_event_manager_id\" meta value\n        if (isset($meta['_event_manager_id'])) {\n            $duplicate = self::get(\n                1,\n                array(\n                    'relation' => 'AND',\n                    array(\n                        'key' => '_event_manager_id',\n                        'value' => $meta['_event_manager_id'],\n                        'compare' => '='\n                    )\n                ),\n                $this->post_type\n            );\n        }\n\n        // Update if duplicate\n        if (isset($duplicate->ID)) {\n            //Check if event needs to be updated\n            if (get_post_meta($duplicate->ID, 'last_update', true) != $meta['last_update']) {\n                $post['ID'] = $duplicate->ID;\n                $this->ID = wp_update_post($post);\n                $isDuplicate = true;\n            } else {\n                return false;\n            }\n        } else {\n            // Create if not duplicate\n            $this->ID = wp_insert_post($post, true);\n        }\n\n        // Remove empty meta values from db\n        $this->removeEmptyMeta($empty_meta_values, $this->ID);\n\n        return $this->afterSave();\n    }", "language": "php", "code": "public function save()\n    {\n        $this->beforeSave();\n\n        // Arrays for holding save data\n        $post = array();\n        $meta = array();\n        $post['post_status'] = $this->post_status;\n\n        // Get the default class variables and set it's keys to forbiddenKeys\n        $defaultData = get_class_vars(get_class($this));\n        $forbiddenKeys = array_keys($defaultData);\n\n        $data = array_filter(get_object_vars($this), function ($item) use ($forbiddenKeys) {\n            return !in_array($item, $forbiddenKeys);\n        }, ARRAY_FILTER_USE_KEY);\n\n        // If data key is allowed post field add to $post else add to $meta\n        foreach ($data as $key => $value) {\n            if (in_array($key, $this->allowedPostFields)) {\n                $post[$key] = $value;\n                continue;\n            }\n\n            $meta[$key] = $value;\n        }\n\n        // Save empty meta to array\n        $empty_meta_values = array_filter($meta, array($this, 'getEmptyValues'));\n\n        // Do not include null values in meta\n        $meta = array_filter($meta, array($this, 'removeEmpty'));\n\n        $post['post_type'] = $this->post_type;\n        $post['meta_input'] = $meta;\n\n        // Check if duplicate by matching \"_event_manager_id\" meta value\n        if (isset($meta['_event_manager_id'])) {\n            $duplicate = self::get(\n                1,\n                array(\n                    'relation' => 'AND',\n                    array(\n                        'key' => '_event_manager_id',\n                        'value' => $meta['_event_manager_id'],\n                        'compare' => '='\n                    )\n                ),\n                $this->post_type\n            );\n        }\n\n        // Update if duplicate\n        if (isset($duplicate->ID)) {\n            //Check if event needs to be updated\n            if (get_post_meta($duplicate->ID, 'last_update', true) != $meta['last_update']) {\n                $post['ID'] = $duplicate->ID;\n                $this->ID = wp_update_post($post);\n                $isDuplicate = true;\n            } else {\n                return false;\n            }\n        } else {\n            // Create if not duplicate\n            $this->ID = wp_insert_post($post, true);\n        }\n\n        // Remove empty meta values from db\n        $this->removeEmptyMeta($empty_meta_values, $this->ID);\n\n        return $this->afterSave();\n    }", "code_tokens": ["public", "function", "save", "(", ")", "{", "$", "this", "->", "beforeSave", "(", ")", ";", "// Arrays for holding save data", "$", "post", "=", "array", "(", ")", ";", "$", "meta", "=", "array", "(", ")", ";", "$", "post", "[", "'post_status'", "]", "=", "$", "this", "->", "post_status", ";", "// Get the default class variables and set it's keys to forbiddenKeys", "$", "defaultData", "=", "get_class_vars", "(", "get_class", "(", "$", "this", ")", ")", ";", "$", "forbiddenKeys", "=", "array_keys", "(", "$", "defaultData", ")", ";", "$", "data", "=", "array_filter", "(", "get_object_vars", "(", "$", "this", ")", ",", "function", "(", "$", "item", ")", "use", "(", "$", "forbiddenKeys", ")", "{", "return", "!", "in_array", "(", "$", "item", ",", "$", "forbiddenKeys", ")", ";", "}", ",", "ARRAY_FILTER_USE_KEY", ")", ";", "// If data key is allowed post field add to $post else add to $meta", "foreach", "(", "$", "data", "as", "$", "key", "=>", "$", "value", ")", "{", "if", "(", "in_array", "(", "$", "key", ",", "$", "this", "->", "allowedPostFields", ")", ")", "{", "$", "post", "[", "$", "key", "]", "=", "$", "value", ";", "continue", ";", "}", "$", "meta", "[", "$", "key", "]", "=", "$", "value", ";", "}", "// Save empty meta to array", "$", "empty_meta_values", "=", "array_filter", "(", "$", "meta", ",", "array", "(", "$", "this", ",", "'getEmptyValues'", ")", ")", ";", "// Do not include null values in meta", "$", "meta", "=", "array_filter", "(", "$", "meta", ",", "array", "(", "$", "this", ",", "'removeEmpty'", ")", ")", ";", "$", "post", "[", "'post_type'", "]", "=", "$", "this", "->", "post_type", ";", "$", "post", "[", "'meta_input'", "]", "=", "$", "meta", ";", "// Check if duplicate by matching \"_event_manager_id\" meta value", "if", "(", "isset", "(", "$", "meta", "[", "'_event_manager_id'", "]", ")", ")", "{", "$", "duplicate", "=", "self", "::", "get", "(", "1", ",", "array", "(", "'relation'", "=>", "'AND'", ",", "array", "(", "'key'", "=>", "'_event_manager_id'", ",", "'value'", "=>", "$", "meta", "[", "'_event_manager_id'", "]", ",", "'compare'", "=>", "'='", ")", ")", ",", "$", "this", "->", "post_type", ")", ";", "}", "// Update if duplicate", "if", "(", "isset", "(", "$", "duplicate", "->", "ID", ")", ")", "{", "//Check if event needs to be updated", "if", "(", "get_post_meta", "(", "$", "duplicate", "->", "ID", ",", "'last_update'", ",", "true", ")", "!=", "$", "meta", "[", "'last_update'", "]", ")", "{", "$", "post", "[", "'ID'", "]", "=", "$", "duplicate", "->", "ID", ";", "$", "this", "->", "ID", "=", "wp_update_post", "(", "$", "post", ")", ";", "$", "isDuplicate", "=", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}", "else", "{", "// Create if not duplicate", "$", "this", "->", "ID", "=", "wp_insert_post", "(", "$", "post", ",", "true", ")", ";", "}", "// Remove empty meta values from db", "$", "this", "->", "removeEmptyMeta", "(", "$", "empty_meta_values", ",", "$", "this", "->", "ID", ")", ";", "return", "$", "this", "->", "afterSave", "(", ")", ";", "}"], "docstring": "Saves the event and it's data\n@return integer The inserted/updated post id", "docstring_tokens": ["Saves", "the", "event", "and", "it", "s", "data"], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/Entity/PostManager.php#L152-L223", "partition": "test"}
{"repo": "Blobfolio/blob-mimes", "path": "wp/lib/blobfolio/wp/bm/svg/svg_base.php", "func_name": "svg_base.strip_comments", "original_string": "protected static function strip_comments($svg = '') {\n\t\tif (!is_string($svg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove XML, PHP, ASP, etc.\n\t\t$svg = preg_replace('/<\\?(.*)\\?>/Us', '', $svg);\n\t\t$svg = preg_replace('/<\\%(.*)\\%>/Us', '', $svg);\n\n\t\tif (\n\t\t\tfalse !== mb::strpos($svg, '<?') ||\n\t\t\tfalse !== mb::strpos($svg, '<%')\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove comments.\n\t\t$svg = preg_replace('/<!--(.*)-->/Us', '', $svg);\n\t\t$svg = preg_replace('/\\/\\*(.*)\\*\\//Us', '', $svg);\n\n\t\tif (\n\t\t\tfalse !== mb::strpos($svg, '<!--') ||\n\t\t\tfalse !== mb::strpos($svg, '/*')\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $svg;\n\t}", "language": "php", "code": "protected static function strip_comments($svg = '') {\n\t\tif (!is_string($svg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove XML, PHP, ASP, etc.\n\t\t$svg = preg_replace('/<\\?(.*)\\?>/Us', '', $svg);\n\t\t$svg = preg_replace('/<\\%(.*)\\%>/Us', '', $svg);\n\n\t\tif (\n\t\t\tfalse !== mb::strpos($svg, '<?') ||\n\t\t\tfalse !== mb::strpos($svg, '<%')\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove comments.\n\t\t$svg = preg_replace('/<!--(.*)-->/Us', '', $svg);\n\t\t$svg = preg_replace('/\\/\\*(.*)\\*\\//Us', '', $svg);\n\n\t\tif (\n\t\t\tfalse !== mb::strpos($svg, '<!--') ||\n\t\t\tfalse !== mb::strpos($svg, '/*')\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $svg;\n\t}", "code_tokens": ["protected", "static", "function", "strip_comments", "(", "$", "svg", "=", "''", ")", "{", "if", "(", "!", "is_string", "(", "$", "svg", ")", ")", "{", "return", "false", ";", "}", "// Remove XML, PHP, ASP, etc.", "$", "svg", "=", "preg_replace", "(", "'/<\\?(.*)\\?>/Us'", ",", "''", ",", "$", "svg", ")", ";", "$", "svg", "=", "preg_replace", "(", "'/<\\%(.*)\\%>/Us'", ",", "''", ",", "$", "svg", ")", ";", "if", "(", "false", "!==", "mb", "::", "strpos", "(", "$", "svg", ",", "'<?'", ")", "||", "false", "!==", "mb", "::", "strpos", "(", "$", "svg", ",", "'<%'", ")", ")", "{", "return", "false", ";", "}", "// Remove comments.", "$", "svg", "=", "preg_replace", "(", "'/<!--(.*)-->/Us'", ",", "''", ",", "$", "svg", ")", ";", "$", "svg", "=", "preg_replace", "(", "'/\\/\\*(.*)\\*\\//Us'", ",", "''", ",", "$", "svg", ")", ";", "if", "(", "false", "!==", "mb", "::", "strpos", "(", "$", "svg", ",", "'<!--'", ")", "||", "false", "!==", "mb", "::", "strpos", "(", "$", "svg", ",", "'/*'", ")", ")", "{", "return", "false", ";", "}", "return", "$", "svg", ";", "}"], "docstring": "Remove comments and interpreter tags from an SVG file\n\n@param string $svg SVG code or path.\n@return string|bool SVG code. False on failure.", "docstring_tokens": ["Remove", "comments", "and", "interpreter", "tags", "from", "an", "SVG", "file"], "sha": "a1356f70de0f5079f4f6c2b7a18765abdbdeff6c", "url": "https://github.com/Blobfolio/blob-mimes/blob/a1356f70de0f5079f4f6c2b7a18765abdbdeff6c/wp/lib/blobfolio/wp/bm/svg/svg_base.php#L726-L754", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/PEAR/Common.php", "func_name": "PEAR_Common.infoFromString", "original_string": "function infoFromString($data)\n    {\n        $packagefile = &new PEAR_PackageFile($this->config);\n        $pf = &$packagefile->fromXmlString($data, PEAR_VALIDATE_NORMAL, false);\n        return $this->_postProcessChecks($pf);\n    }", "language": "php", "code": "function infoFromString($data)\n    {\n        $packagefile = &new PEAR_PackageFile($this->config);\n        $pf = &$packagefile->fromXmlString($data, PEAR_VALIDATE_NORMAL, false);\n        return $this->_postProcessChecks($pf);\n    }", "code_tokens": ["function", "infoFromString", "(", "$", "data", ")", "{", "$", "packagefile", "=", "&", "new", "PEAR_PackageFile", "(", "$", "this", "->", "config", ")", ";", "$", "pf", "=", "&", "$", "packagefile", "->", "fromXmlString", "(", "$", "data", ",", "PEAR_VALIDATE_NORMAL", ",", "false", ")", ";", "return", "$", "this", "->", "_postProcessChecks", "(", "$", "pf", ")", ";", "}"], "docstring": "Returns information about a package file.  Expects the contents\nof a package xml file as input.\n\n@param string  $data  contents of package.xml file\n\n@return array   array with package information\n\n@access public\n@deprecated use PEAR_PackageFile->fromXmlstring() instead", "docstring_tokens": ["Returns", "information", "about", "a", "package", "file", ".", "Expects", "the", "contents", "of", "a", "package", "xml", "file", "as", "input", "."], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/PEAR/Common.php#L528-L533", "partition": "test"}
{"repo": "techdivision/import", "path": "src/Adapter/LeagueFilesystemAdapterFactory.php", "func_name": "LeagueFilesystemAdapterFactory.createFilesystemAdapter", "original_string": "public function createFilesystemAdapter(SubjectConfigurationInterface $subjectConfiguration)\n    {\n\n        // the filesystem adapter configuration\n        $filesystemAdapterConfiguration = $subjectConfiguration->getFilesystemAdapter();\n\n        // load the filesystem adapter's adapter configuration (FS specific)\n        $adapterConfiguration = $filesystemAdapterConfiguration->getAdapter();\n\n        // load the adapter parameters\n        $adapterParams = $adapterConfiguration->getParams();\n\n        // initialize the root directory, if not specified in the adapter parameters\n        if (!isset($adapterParams[ConfigurationKeys::ROOT])) {\n            $adapterParams[ConfigurationKeys::ROOT] = getcwd();\n        }\n\n        // load the adapter to use\n        $reflectionClass = new \\ReflectionClass($adapterConfiguration->getType());\n        $adapter =  $reflectionClass->newInstanceArgs(ConfigurationUtil::prepareConstructorArgs($reflectionClass, $adapterParams));\n\n        // create a new filesystem instance\n        return new LeagueFilesystemAdapter(new Filesystem($adapter));\n    }", "language": "php", "code": "public function createFilesystemAdapter(SubjectConfigurationInterface $subjectConfiguration)\n    {\n\n        // the filesystem adapter configuration\n        $filesystemAdapterConfiguration = $subjectConfiguration->getFilesystemAdapter();\n\n        // load the filesystem adapter's adapter configuration (FS specific)\n        $adapterConfiguration = $filesystemAdapterConfiguration->getAdapter();\n\n        // load the adapter parameters\n        $adapterParams = $adapterConfiguration->getParams();\n\n        // initialize the root directory, if not specified in the adapter parameters\n        if (!isset($adapterParams[ConfigurationKeys::ROOT])) {\n            $adapterParams[ConfigurationKeys::ROOT] = getcwd();\n        }\n\n        // load the adapter to use\n        $reflectionClass = new \\ReflectionClass($adapterConfiguration->getType());\n        $adapter =  $reflectionClass->newInstanceArgs(ConfigurationUtil::prepareConstructorArgs($reflectionClass, $adapterParams));\n\n        // create a new filesystem instance\n        return new LeagueFilesystemAdapter(new Filesystem($adapter));\n    }", "code_tokens": ["public", "function", "createFilesystemAdapter", "(", "SubjectConfigurationInterface", "$", "subjectConfiguration", ")", "{", "// the filesystem adapter configuration", "$", "filesystemAdapterConfiguration", "=", "$", "subjectConfiguration", "->", "getFilesystemAdapter", "(", ")", ";", "// load the filesystem adapter's adapter configuration (FS specific)", "$", "adapterConfiguration", "=", "$", "filesystemAdapterConfiguration", "->", "getAdapter", "(", ")", ";", "// load the adapter parameters", "$", "adapterParams", "=", "$", "adapterConfiguration", "->", "getParams", "(", ")", ";", "// initialize the root directory, if not specified in the adapter parameters", "if", "(", "!", "isset", "(", "$", "adapterParams", "[", "ConfigurationKeys", "::", "ROOT", "]", ")", ")", "{", "$", "adapterParams", "[", "ConfigurationKeys", "::", "ROOT", "]", "=", "getcwd", "(", ")", ";", "}", "// load the adapter to use", "$", "reflectionClass", "=", "new", "\\", "ReflectionClass", "(", "$", "adapterConfiguration", "->", "getType", "(", ")", ")", ";", "$", "adapter", "=", "$", "reflectionClass", "->", "newInstanceArgs", "(", "ConfigurationUtil", "::", "prepareConstructorArgs", "(", "$", "reflectionClass", ",", "$", "adapterParams", ")", ")", ";", "// create a new filesystem instance", "return", "new", "LeagueFilesystemAdapter", "(", "new", "Filesystem", "(", "$", "adapter", ")", ")", ";", "}"], "docstring": "Factory method to create new filesystem adapter instance.\n\n@param \\TechDivision\\Import\\Configuration\\SubjectConfigurationInterface $subjectConfiguration The subject configuration\n\n@return \\TechDivision\\Import\\Adapter\\FilesystemAdapterInterface The filesystem adapter instance", "docstring_tokens": ["Factory", "method", "to", "create", "new", "filesystem", "adapter", "instance", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/Adapter/LeagueFilesystemAdapterFactory.php#L47-L70", "partition": "test"}
{"repo": "imkrimerman/primitive", "path": "src/Primitive/Container/Container.php", "func_name": "Container.joinByKey", "original_string": "public function joinByKey($key, $glue = null)\n    {\n        return string(implode($glue, $this->lists($this->getKey($key))->all()));\n    }", "language": "php", "code": "public function joinByKey($key, $glue = null)\n    {\n        return string(implode($glue, $this->lists($this->getKey($key))->all()));\n    }", "code_tokens": ["public", "function", "joinByKey", "(", "$", "key", ",", "$", "glue", "=", "null", ")", "{", "return", "string", "(", "implode", "(", "$", "glue", ",", "$", "this", "->", "lists", "(", "$", "this", "->", "getKey", "(", "$", "key", ")", ")", "->", "all", "(", ")", ")", ")", ";", "}"], "docstring": "Concatenate values of a given key as a string.\n\n@param mixed $key\n@param null|mixed $glue\n@return \\im\\Primitive\\String\\String", "docstring_tokens": ["Concatenate", "values", "of", "a", "given", "key", "as", "a", "string", "."], "sha": "bdb45bb5109ca07f116cce571b76804e47ac5d56", "url": "https://github.com/imkrimerman/primitive/blob/bdb45bb5109ca07f116cce571b76804e47ac5d56/src/Primitive/Container/Container.php#L494-L497", "partition": "test"}
{"repo": "cloudcreativity/json-api-testing", "path": "src/Concerns/HasHttpAssertions.php", "func_name": "HasHttpAssertions.assertMeta", "original_string": "public function assertMeta(array $expected, bool $strict = true): self\n    {\n        $this->getDocument()->assertMeta($expected, $strict);\n\n        return $this;\n    }", "language": "php", "code": "public function assertMeta(array $expected, bool $strict = true): self\n    {\n        $this->getDocument()->assertMeta($expected, $strict);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "assertMeta", "(", "array", "$", "expected", ",", "bool", "$", "strict", "=", "true", ")", ":", "self", "{", "$", "this", "->", "getDocument", "(", ")", "->", "assertMeta", "(", "$", "expected", ",", "$", "strict", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Assert that the top-level meta matches the expected values.\n\n@param array $expected\n@param bool $strict\n@return $this", "docstring_tokens": ["Assert", "that", "the", "top", "-", "level", "meta", "matches", "the", "expected", "values", "."], "sha": "0243fa0a9b6ac0955beeb82af43b8eb5cc5f1917", "url": "https://github.com/cloudcreativity/json-api-testing/blob/0243fa0a9b6ac0955beeb82af43b8eb5cc5f1917/src/Concerns/HasHttpAssertions.php#L560-L565", "partition": "test"}
{"repo": "Islandora-CLAW/jsonld", "path": "src/ContextGenerator/JsonldContextGenerator.php", "func_name": "JsonldContextGenerator.getTermContextFromField", "original_string": "protected function getTermContextFromField($field_type) {\n    // Be aware that drupal field definitions can be complex.\n    // e.g text_with_summary has a text, a summary, a number of lines, etc\n    // we are only dealing with the resulting ->value() of all this separate\n    // pieces and mapping only that as a whole.\n    // Default mapping to return in case no $field_type matches\n    // field_mappings array keys.\n    $default_mapping = [\n      \"@type\" => \"xsd:string\",\n    ];\n\n    // Only load mappings from hooks if we haven't done it\n    // yet for this instance.\n    if (empty($this->fieldMappings)) {\n      // Cribbed from rdf module's rdf_get_namespaces.\n      foreach (\\Drupal::moduleHandler()->getImplementations(self::FIELD_MAPPPINGS_HOOK) as $module) {\n        $function = $module . '_' . self::FIELD_MAPPPINGS_HOOK;\n        foreach ($function() as $field => $mapping) {\n          if (array_key_exists($field, $this->fieldMappings)) {\n            $this->logger->warning(\n              t('Tried to map @field_type to @new_type, but @field_type is already mapped to @orig_type.', [\n                '@field_type' => $field,\n                '@new_type' => $mapping['@type'],\n                '@orig_type' => $this->fieldMappings[$field]['@type'],\n              ])\n            );\n          }\n          else {\n            $this->fieldMappings[$field] = $mapping;\n          }\n        }\n      }\n    }\n    return array_key_exists($field_type, $this->fieldMappings) ? $this->fieldMappings[$field_type] : $default_mapping;\n  }", "language": "php", "code": "protected function getTermContextFromField($field_type) {\n    // Be aware that drupal field definitions can be complex.\n    // e.g text_with_summary has a text, a summary, a number of lines, etc\n    // we are only dealing with the resulting ->value() of all this separate\n    // pieces and mapping only that as a whole.\n    // Default mapping to return in case no $field_type matches\n    // field_mappings array keys.\n    $default_mapping = [\n      \"@type\" => \"xsd:string\",\n    ];\n\n    // Only load mappings from hooks if we haven't done it\n    // yet for this instance.\n    if (empty($this->fieldMappings)) {\n      // Cribbed from rdf module's rdf_get_namespaces.\n      foreach (\\Drupal::moduleHandler()->getImplementations(self::FIELD_MAPPPINGS_HOOK) as $module) {\n        $function = $module . '_' . self::FIELD_MAPPPINGS_HOOK;\n        foreach ($function() as $field => $mapping) {\n          if (array_key_exists($field, $this->fieldMappings)) {\n            $this->logger->warning(\n              t('Tried to map @field_type to @new_type, but @field_type is already mapped to @orig_type.', [\n                '@field_type' => $field,\n                '@new_type' => $mapping['@type'],\n                '@orig_type' => $this->fieldMappings[$field]['@type'],\n              ])\n            );\n          }\n          else {\n            $this->fieldMappings[$field] = $mapping;\n          }\n        }\n      }\n    }\n    return array_key_exists($field_type, $this->fieldMappings) ? $this->fieldMappings[$field_type] : $default_mapping;\n  }", "code_tokens": ["protected", "function", "getTermContextFromField", "(", "$", "field_type", ")", "{", "// Be aware that drupal field definitions can be complex.", "// e.g text_with_summary has a text, a summary, a number of lines, etc", "// we are only dealing with the resulting ->value() of all this separate", "// pieces and mapping only that as a whole.", "// Default mapping to return in case no $field_type matches", "// field_mappings array keys.", "$", "default_mapping", "=", "[", "\"@type\"", "=>", "\"xsd:string\"", ",", "]", ";", "// Only load mappings from hooks if we haven't done it", "// yet for this instance.", "if", "(", "empty", "(", "$", "this", "->", "fieldMappings", ")", ")", "{", "// Cribbed from rdf module's rdf_get_namespaces.", "foreach", "(", "\\", "Drupal", "::", "moduleHandler", "(", ")", "->", "getImplementations", "(", "self", "::", "FIELD_MAPPPINGS_HOOK", ")", "as", "$", "module", ")", "{", "$", "function", "=", "$", "module", ".", "'_'", ".", "self", "::", "FIELD_MAPPPINGS_HOOK", ";", "foreach", "(", "$", "function", "(", ")", "as", "$", "field", "=>", "$", "mapping", ")", "{", "if", "(", "array_key_exists", "(", "$", "field", ",", "$", "this", "->", "fieldMappings", ")", ")", "{", "$", "this", "->", "logger", "->", "warning", "(", "t", "(", "'Tried to map @field_type to @new_type, but @field_type is already mapped to @orig_type.'", ",", "[", "'@field_type'", "=>", "$", "field", ",", "'@new_type'", "=>", "$", "mapping", "[", "'@type'", "]", ",", "'@orig_type'", "=>", "$", "this", "->", "fieldMappings", "[", "$", "field", "]", "[", "'@type'", "]", ",", "]", ")", ")", ";", "}", "else", "{", "$", "this", "->", "fieldMappings", "[", "$", "field", "]", "=", "$", "mapping", ";", "}", "}", "}", "}", "return", "array_key_exists", "(", "$", "field_type", ",", "$", "this", "->", "fieldMappings", ")", "?", "$", "this", "->", "fieldMappings", "[", "$", "field_type", "]", ":", "$", "default_mapping", ";", "}"], "docstring": "Naive approach on Drupal field to JSON-LD type mapping.\n\nTODO: Would be fine to have this definitions in an\nconfigEntity way in the future.\n\n@param string $field_type\nAs provided by \\Drupal\\Core\\Field\\FieldDefinitionInterface::getType().\n\n@return array\nA json-ld term definition if there is a match\nor array(\"@type\" => \"xsd:string\") in case of no match.", "docstring_tokens": ["Naive", "approach", "on", "Drupal", "field", "to", "JSON", "-", "LD", "type", "mapping", "."], "sha": "89910a2971468b5da5c0c32f85c73d2071856d0e", "url": "https://github.com/Islandora-CLAW/jsonld/blob/89910a2971468b5da5c0c32f85c73d2071856d0e/src/ContextGenerator/JsonldContextGenerator.php#L321-L355", "partition": "test"}
{"repo": "encorephp/wxwidgets", "path": "src/Collection.php", "func_name": "Collection.remove", "original_string": "public function remove($element)\n    {\n        $trueId = $this->getTrueId($element);\n\n        $this->objects[$trueId]->destroy();\n\n        unset($this->objects[$trueId]);\n        unset($this->ids[$trueId]);\n    }", "language": "php", "code": "public function remove($element)\n    {\n        $trueId = $this->getTrueId($element);\n\n        $this->objects[$trueId]->destroy();\n\n        unset($this->objects[$trueId]);\n        unset($this->ids[$trueId]);\n    }", "code_tokens": ["public", "function", "remove", "(", "$", "element", ")", "{", "$", "trueId", "=", "$", "this", "->", "getTrueId", "(", "$", "element", ")", ";", "$", "this", "->", "objects", "[", "$", "trueId", "]", "->", "destroy", "(", ")", ";", "unset", "(", "$", "this", "->", "objects", "[", "$", "trueId", "]", ")", ";", "unset", "(", "$", "this", "->", "ids", "[", "$", "trueId", "]", ")", ";", "}"], "docstring": "Remove the element from the collection\n\n@return void", "docstring_tokens": ["Remove", "the", "element", "from", "the", "collection"], "sha": "01038c897b0ab3c95924f524a7c1093f5951d8f7", "url": "https://github.com/encorephp/wxwidgets/blob/01038c897b0ab3c95924f524a7c1093f5951d8f7/src/Collection.php#L68-L76", "partition": "test"}
{"repo": "shokohsc/TwitchApiBundle", "path": "Util/JsonTransformer.php", "func_name": "JsonTransformer.transform", "original_string": "public function transform($json)\n    {\n        if (!is_string($json)) {\n            throw new \\InvalidArgumentException('$json variable is not a string.');\n        }\n        $assocArrayJson = json_decode($json, true);\n\n        return $this->checkDecodedJson($assocArrayJson);\n    }", "language": "php", "code": "public function transform($json)\n    {\n        if (!is_string($json)) {\n            throw new \\InvalidArgumentException('$json variable is not a string.');\n        }\n        $assocArrayJson = json_decode($json, true);\n\n        return $this->checkDecodedJson($assocArrayJson);\n    }", "code_tokens": ["public", "function", "transform", "(", "$", "json", ")", "{", "if", "(", "!", "is_string", "(", "$", "json", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'$json variable is not a string.'", ")", ";", "}", "$", "assocArrayJson", "=", "json_decode", "(", "$", "json", ",", "true", ")", ";", "return", "$", "this", "->", "checkDecodedJson", "(", "$", "assocArrayJson", ")", ";", "}"], "docstring": "Transform Json to Associative Array.\n\n@param string $json\n\n@return array", "docstring_tokens": ["Transform", "Json", "to", "Associative", "Array", "."], "sha": "9ee6d2e1609d5dee4c083188a8ef5d916965eb64", "url": "https://github.com/shokohsc/TwitchApiBundle/blob/9ee6d2e1609d5dee4c083188a8ef5d916965eb64/Util/JsonTransformer.php#L19-L27", "partition": "test"}
{"repo": "R3VoLuT1OneR/twig-themes", "path": "lib/Twig/Loader/Themes.php", "func_name": "Twig_Loader_Themes.findFile", "original_string": "public function findFile($name, $relative = true)\n    {\n        if ($this->refFindTemplate === null) {\n            $this->refFindTemplate = new ReflectionMethod('Twig_Loader_Filesystem', 'findTemplate');\n            $this->refFindTemplate->setAccessible(true);\n        }\n\n        $name = $this->prepareName($name);\n        $path = $this->refFindTemplate->invoke($this->fsloader, $name);\n        return $relative ? ltrim(str_replace($this->basePath, '', $path), DIRECTORY_SEPARATOR) : $path;\n    }", "language": "php", "code": "public function findFile($name, $relative = true)\n    {\n        if ($this->refFindTemplate === null) {\n            $this->refFindTemplate = new ReflectionMethod('Twig_Loader_Filesystem', 'findTemplate');\n            $this->refFindTemplate->setAccessible(true);\n        }\n\n        $name = $this->prepareName($name);\n        $path = $this->refFindTemplate->invoke($this->fsloader, $name);\n        return $relative ? ltrim(str_replace($this->basePath, '', $path), DIRECTORY_SEPARATOR) : $path;\n    }", "code_tokens": ["public", "function", "findFile", "(", "$", "name", ",", "$", "relative", "=", "true", ")", "{", "if", "(", "$", "this", "->", "refFindTemplate", "===", "null", ")", "{", "$", "this", "->", "refFindTemplate", "=", "new", "ReflectionMethod", "(", "'Twig_Loader_Filesystem'", ",", "'findTemplate'", ")", ";", "$", "this", "->", "refFindTemplate", "->", "setAccessible", "(", "true", ")", ";", "}", "$", "name", "=", "$", "this", "->", "prepareName", "(", "$", "name", ")", ";", "$", "path", "=", "$", "this", "->", "refFindTemplate", "->", "invoke", "(", "$", "this", "->", "fsloader", ",", "$", "name", ")", ";", "return", "$", "relative", "?", "ltrim", "(", "str_replace", "(", "$", "this", "->", "basePath", ",", "''", ",", "$", "path", ")", ",", "DIRECTORY_SEPARATOR", ")", ":", "$", "path", ";", "}"], "docstring": "Find resource file path.\n\n@param string $name\n@param bool   $relative\n\n@return string", "docstring_tokens": ["Find", "resource", "file", "path", "."], "sha": "ab9e0644551ac134dd1e3b61b07d53ae9306a7f1", "url": "https://github.com/R3VoLuT1OneR/twig-themes/blob/ab9e0644551ac134dd1e3b61b07d53ae9306a7f1/lib/Twig/Loader/Themes.php#L158-L168", "partition": "test"}
{"repo": "graste/environaut", "path": "src/Environaut/Report/Results/Result.php", "func_name": "Result.addSettings", "original_string": "public function addSettings(array $settings, $cachable = true)\n    {\n        foreach ($settings as $setting) {\n            if ($setting instanceof ISetting) {\n                $this->addSetting($setting);\n            }\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function addSettings(array $settings, $cachable = true)\n    {\n        foreach ($settings as $setting) {\n            if ($setting instanceof ISetting) {\n                $this->addSetting($setting);\n            }\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addSettings", "(", "array", "$", "settings", ",", "$", "cachable", "=", "true", ")", "{", "foreach", "(", "$", "settings", "as", "$", "setting", ")", "{", "if", "(", "$", "setting", "instanceof", "ISetting", ")", "{", "$", "this", "->", "addSetting", "(", "$", "setting", ")", ";", "}", "}", "return", "$", "this", ";", "}"], "docstring": "Adds the given setting to the internal list of settings.\n\n@param array $settings array with ISetting implementing instances to add\n@param bool $cachable whether or not the setting may be put into a cache for reuse on re-execution of the check\n\n@return Result this instance for fluent API support", "docstring_tokens": ["Adds", "the", "given", "setting", "to", "the", "internal", "list", "of", "settings", "."], "sha": "e40b498c31214fdbdd529f334f6ce5e6138bb5fb", "url": "https://github.com/graste/environaut/blob/e40b498c31214fdbdd529f334f6ce5e6138bb5fb/src/Environaut/Report/Results/Result.php#L102-L111", "partition": "test"}
{"repo": "tz-lom/HSPHP", "path": "src/HSPHP/ReadSocket.php", "func_name": "ReadSocket.readResponse", "original_string": "public function readResponse()\n    {\n        $response = $this->recvStr();\n        $vals = explode(self::SEP, $response);\n        if ($vals[0] != 0) {\n            //error occured\n            return new ErrorMessage(isset($vals[2]) ? $vals[2] : '', $vals[0]);\n        } else {\n            array_shift($vals); // skip error code\n            $numCols = intval(array_shift($vals));\n            $vals = array_map(array($this, 'decodeString'), $vals);\n            $result = array_chunk($vals, $numCols);\n\n            return $result;\n        }\n    }", "language": "php", "code": "public function readResponse()\n    {\n        $response = $this->recvStr();\n        $vals = explode(self::SEP, $response);\n        if ($vals[0] != 0) {\n            //error occured\n            return new ErrorMessage(isset($vals[2]) ? $vals[2] : '', $vals[0]);\n        } else {\n            array_shift($vals); // skip error code\n            $numCols = intval(array_shift($vals));\n            $vals = array_map(array($this, 'decodeString'), $vals);\n            $result = array_chunk($vals, $numCols);\n\n            return $result;\n        }\n    }", "code_tokens": ["public", "function", "readResponse", "(", ")", "{", "$", "response", "=", "$", "this", "->", "recvStr", "(", ")", ";", "$", "vals", "=", "explode", "(", "self", "::", "SEP", ",", "$", "response", ")", ";", "if", "(", "$", "vals", "[", "0", "]", "!=", "0", ")", "{", "//error occured", "return", "new", "ErrorMessage", "(", "isset", "(", "$", "vals", "[", "2", "]", ")", "?", "$", "vals", "[", "2", "]", ":", "''", ",", "$", "vals", "[", "0", "]", ")", ";", "}", "else", "{", "array_shift", "(", "$", "vals", ")", ";", "// skip error code", "$", "numCols", "=", "intval", "(", "array_shift", "(", "$", "vals", ")", ")", ";", "$", "vals", "=", "array_map", "(", "array", "(", "$", "this", ",", "'decodeString'", ")", ",", "$", "vals", ")", ";", "$", "result", "=", "array_chunk", "(", "$", "vals", ",", "$", "numCols", ")", ";", "return", "$", "result", ";", "}", "}"], "docstring": "Read response from server\n\n@return ErrorMessage | array", "docstring_tokens": ["Read", "response", "from", "server"], "sha": "074514455c579da4090255c4012bf1a61e06197f", "url": "https://github.com/tz-lom/HSPHP/blob/074514455c579da4090255c4012bf1a61e06197f/src/HSPHP/ReadSocket.php#L204-L219", "partition": "test"}
{"repo": "koraktor/steam-condenser-php", "path": "lib/SteamCondenser/Community/Portal2/Portal2Item.php", "func_name": "Portal2Item.getBotsEquipped", "original_string": "public function getBotsEquipped() {\n        $botsEquipped = [];\n        foreach($this->equipped as $botId => $equipped) {\n            if($equipped) {\n                $botsEquipped[] = $botId;\n            }\n        }\n\n        return $botsEquipped;\n    }", "language": "php", "code": "public function getBotsEquipped() {\n        $botsEquipped = [];\n        foreach($this->equipped as $botId => $equipped) {\n            if($equipped) {\n                $botsEquipped[] = $botId;\n            }\n        }\n\n        return $botsEquipped;\n    }", "code_tokens": ["public", "function", "getBotsEquipped", "(", ")", "{", "$", "botsEquipped", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "equipped", "as", "$", "botId", "=>", "$", "equipped", ")", "{", "if", "(", "$", "equipped", ")", "{", "$", "botsEquipped", "[", "]", "=", "$", "botId", ";", "}", "}", "return", "$", "botsEquipped", ";", "}"], "docstring": "Returns the name for each bot this player has equipped this item\n\n@return array The names of the bots this player has equipped this item", "docstring_tokens": ["Returns", "the", "name", "for", "each", "bot", "this", "player", "has", "equipped", "this", "item"], "sha": "92dde9e3b462e93cc498fe795a712c61eec7051e", "url": "https://github.com/koraktor/steam-condenser-php/blob/92dde9e3b462e93cc498fe795a712c61eec7051e/lib/SteamCondenser/Community/Portal2/Portal2Item.php#L56-L65", "partition": "test"}
{"repo": "techdivision/import", "path": "src/Subjects/AbstractEavSubject.php", "func_name": "AbstractEavSubject.castValueByBackendType", "original_string": "public function castValueByBackendType($backendType, $value)\n    {\n\n        // cast the value to a valid timestamp\n        if ($backendType === BackendTypeKeys::BACKEND_TYPE_DATETIME) {\n            return \\DateTime::createFromFormat($this->getConfiguration()->getDateConverter()->getSourceDateFormat(), $value)->format('Y-m-d H:i:s');\n        }\n\n        // cast the value to a float value\n        if ($backendType === BackendTypeKeys::BACKEND_TYPE_FLOAT) {\n            return (float) $value;\n        }\n\n        // cast the value to an integer\n        if ($backendType === BackendTypeKeys::BACKEND_TYPE_INT) {\n            return (int) $value;\n        }\n\n        // we don't need to cast strings\n        return $value;\n    }", "language": "php", "code": "public function castValueByBackendType($backendType, $value)\n    {\n\n        // cast the value to a valid timestamp\n        if ($backendType === BackendTypeKeys::BACKEND_TYPE_DATETIME) {\n            return \\DateTime::createFromFormat($this->getConfiguration()->getDateConverter()->getSourceDateFormat(), $value)->format('Y-m-d H:i:s');\n        }\n\n        // cast the value to a float value\n        if ($backendType === BackendTypeKeys::BACKEND_TYPE_FLOAT) {\n            return (float) $value;\n        }\n\n        // cast the value to an integer\n        if ($backendType === BackendTypeKeys::BACKEND_TYPE_INT) {\n            return (int) $value;\n        }\n\n        // we don't need to cast strings\n        return $value;\n    }", "code_tokens": ["public", "function", "castValueByBackendType", "(", "$", "backendType", ",", "$", "value", ")", "{", "// cast the value to a valid timestamp", "if", "(", "$", "backendType", "===", "BackendTypeKeys", "::", "BACKEND_TYPE_DATETIME", ")", "{", "return", "\\", "DateTime", "::", "createFromFormat", "(", "$", "this", "->", "getConfiguration", "(", ")", "->", "getDateConverter", "(", ")", "->", "getSourceDateFormat", "(", ")", ",", "$", "value", ")", "->", "format", "(", "'Y-m-d H:i:s'", ")", ";", "}", "// cast the value to a float value", "if", "(", "$", "backendType", "===", "BackendTypeKeys", "::", "BACKEND_TYPE_FLOAT", ")", "{", "return", "(", "float", ")", "$", "value", ";", "}", "// cast the value to an integer", "if", "(", "$", "backendType", "===", "BackendTypeKeys", "::", "BACKEND_TYPE_INT", ")", "{", "return", "(", "int", ")", "$", "value", ";", "}", "// we don't need to cast strings", "return", "$", "value", ";", "}"], "docstring": "Cast's the passed value based on the backend type information.\n\n@param string $backendType The backend type to cast to\n@param mixed  $value       The value to be casted\n\n@return mixed The casted value", "docstring_tokens": ["Cast", "s", "the", "passed", "value", "based", "on", "the", "backend", "type", "information", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/Subjects/AbstractEavSubject.php#L209-L229", "partition": "test"}
{"repo": "RichardTMiles/CarbonPHP", "path": "error/PublicAlert.php", "func_name": "PublicAlert.alert", "original_string": "private static function alert(string $message, string $code) {\n        global $json;\n        if ($code !== 'success' && $code !== 'info') {\n            $message .= ' Contact us if problem persists.';\n        }\n        $json['alert'][$code][] = $message;\n    }", "language": "php", "code": "private static function alert(string $message, string $code) {\n        global $json;\n        if ($code !== 'success' && $code !== 'info') {\n            $message .= ' Contact us if problem persists.';\n        }\n        $json['alert'][$code][] = $message;\n    }", "code_tokens": ["private", "static", "function", "alert", "(", "string", "$", "message", ",", "string", "$", "code", ")", "{", "global", "$", "json", ";", "if", "(", "$", "code", "!==", "'success'", "&&", "$", "code", "!==", "'info'", ")", "{", "$", "message", ".=", "' Contact us if problem persists.'", ";", "}", "$", "json", "[", "'alert'", "]", "[", "$", "code", "]", "[", "]", "=", "$", "message", ";", "}"], "docstring": "Add an alert to the array. If the view is not executed, CarbonPHP will not\nhandle the global alert.\n@param string $message the message to be stored in the alert variable\n@param string $code you may choose between success, info, danger, or warning", "docstring_tokens": ["Add", "an", "alert", "to", "the", "array", ".", "If", "the", "view", "is", "not", "executed", "CarbonPHP", "will", "not", "handle", "the", "global", "alert", "."], "sha": "22a403db161482f19a91771f62b930b8243a04c6", "url": "https://github.com/RichardTMiles/CarbonPHP/blob/22a403db161482f19a91771f62b930b8243a04c6/error/PublicAlert.php#L70-L76", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/ORM/Repositories/PDORepository.php", "func_name": "PDORepository.setArrayCriterionInQuery", "original_string": "protected function setArrayCriterionInQuery(QueryBuilder $query, string $column, array $criterion): void\n    {\n        $criterionConcat = '';\n        $lastIndex       = \\count($criterion) - 1;\n\n        // Iterate through the criterion and set each item individually to be bound later\n        foreach ($criterion as $index => $criterionItem) {\n            $criterionConcat .= $this->columnParam($column . $index);\n\n            // If this is not the last index, add a comma\n            if ($index < $lastIndex) {\n                $criterionConcat .= ',';\n            }\n        }\n\n        // Set the where statement as an in\n        $query->where($column . ' IN (' . $criterionConcat . ')');\n    }", "language": "php", "code": "protected function setArrayCriterionInQuery(QueryBuilder $query, string $column, array $criterion): void\n    {\n        $criterionConcat = '';\n        $lastIndex       = \\count($criterion) - 1;\n\n        // Iterate through the criterion and set each item individually to be bound later\n        foreach ($criterion as $index => $criterionItem) {\n            $criterionConcat .= $this->columnParam($column . $index);\n\n            // If this is not the last index, add a comma\n            if ($index < $lastIndex) {\n                $criterionConcat .= ',';\n            }\n        }\n\n        // Set the where statement as an in\n        $query->where($column . ' IN (' . $criterionConcat . ')');\n    }", "code_tokens": ["protected", "function", "setArrayCriterionInQuery", "(", "QueryBuilder", "$", "query", ",", "string", "$", "column", ",", "array", "$", "criterion", ")", ":", "void", "{", "$", "criterionConcat", "=", "''", ";", "$", "lastIndex", "=", "\\", "count", "(", "$", "criterion", ")", "-", "1", ";", "// Iterate through the criterion and set each item individually to be bound later", "foreach", "(", "$", "criterion", "as", "$", "index", "=>", "$", "criterionItem", ")", "{", "$", "criterionConcat", ".=", "$", "this", "->", "columnParam", "(", "$", "column", ".", "$", "index", ")", ";", "// If this is not the last index, add a comma", "if", "(", "$", "index", "<", "$", "lastIndex", ")", "{", "$", "criterionConcat", ".=", "','", ";", "}", "}", "// Set the where statement as an in", "$", "query", "->", "where", "(", "$", "column", ".", "' IN ('", ".", "$", "criterionConcat", ".", "')'", ")", ";", "}"], "docstring": "Set an array criterion in the query builder.\n\n@param QueryBuilder $query\n@param string       $column\n@param array        $criterion\n\n@return void", "docstring_tokens": ["Set", "an", "array", "criterion", "in", "the", "query", "builder", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/ORM/Repositories/PDORepository.php#L558-L575", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/XSD2PHP/lib/ZF/1.10.7/Zend/Soap/Server.php", "func_name": "Zend_Soap_Server.fault", "original_string": "public function fault($fault = null, $code = \"Receiver\")\n    {\n        if ($fault instanceof Exception) {\n            $class = get_class($fault);\n            if (in_array($class, $this->_faultExceptions)) {\n                $message = $fault->getMessage();\n                $eCode   = $fault->getCode();\n                $code    = empty($eCode) ? $code : $eCode;\n            } else {\n                $message = 'Unknown error';\n            }\n        } elseif (is_string($fault)) {\n            $message = $fault;\n        } else {\n            $message = 'Unknown error';\n        }\n\n        $allowedFaultModes = array(\n            'VersionMismatch', 'MustUnderstand', 'DataEncodingUnknown',\n            'Sender', 'Receiver', 'Server'\n        );\n        if (!in_array($code, $allowedFaultModes)) {\n            $code = \"Receiver\";\n        }\n\n        return new SoapFault($code, $message);\n    }", "language": "php", "code": "public function fault($fault = null, $code = \"Receiver\")\n    {\n        if ($fault instanceof Exception) {\n            $class = get_class($fault);\n            if (in_array($class, $this->_faultExceptions)) {\n                $message = $fault->getMessage();\n                $eCode   = $fault->getCode();\n                $code    = empty($eCode) ? $code : $eCode;\n            } else {\n                $message = 'Unknown error';\n            }\n        } elseif (is_string($fault)) {\n            $message = $fault;\n        } else {\n            $message = 'Unknown error';\n        }\n\n        $allowedFaultModes = array(\n            'VersionMismatch', 'MustUnderstand', 'DataEncodingUnknown',\n            'Sender', 'Receiver', 'Server'\n        );\n        if (!in_array($code, $allowedFaultModes)) {\n            $code = \"Receiver\";\n        }\n\n        return new SoapFault($code, $message);\n    }", "code_tokens": ["public", "function", "fault", "(", "$", "fault", "=", "null", ",", "$", "code", "=", "\"Receiver\"", ")", "{", "if", "(", "$", "fault", "instanceof", "Exception", ")", "{", "$", "class", "=", "get_class", "(", "$", "fault", ")", ";", "if", "(", "in_array", "(", "$", "class", ",", "$", "this", "->", "_faultExceptions", ")", ")", "{", "$", "message", "=", "$", "fault", "->", "getMessage", "(", ")", ";", "$", "eCode", "=", "$", "fault", "->", "getCode", "(", ")", ";", "$", "code", "=", "empty", "(", "$", "eCode", ")", "?", "$", "code", ":", "$", "eCode", ";", "}", "else", "{", "$", "message", "=", "'Unknown error'", ";", "}", "}", "elseif", "(", "is_string", "(", "$", "fault", ")", ")", "{", "$", "message", "=", "$", "fault", ";", "}", "else", "{", "$", "message", "=", "'Unknown error'", ";", "}", "$", "allowedFaultModes", "=", "array", "(", "'VersionMismatch'", ",", "'MustUnderstand'", ",", "'DataEncodingUnknown'", ",", "'Sender'", ",", "'Receiver'", ",", "'Server'", ")", ";", "if", "(", "!", "in_array", "(", "$", "code", ",", "$", "allowedFaultModes", ")", ")", "{", "$", "code", "=", "\"Receiver\"", ";", "}", "return", "new", "SoapFault", "(", "$", "code", ",", "$", "message", ")", ";", "}"], "docstring": "Generate a server fault\n\nNote that the arguments are reverse to those of SoapFault.\n\nIf an exception is passed as the first argument, its message and code\nwill be used to create the fault object if it has been registered via\n{@Link registerFaultException()}.\n\n@link   http://www.w3.org/TR/soap12-part1/#faultcodes\n@param  string|Exception $fault\n@param  string $code SOAP Fault Codes\n@return SoapFault", "docstring_tokens": ["Generate", "a", "server", "fault"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/XSD2PHP/lib/ZF/1.10.7/Zend/Soap/Server.php#L916-L942", "partition": "test"}
{"repo": "imkrimerman/primitive", "path": "src/Primitive/Container/Container.php", "func_name": "Container.increase", "original_string": "public function increase($increaseSize = 1, $value = null)\n    {\n        $this->items = array_pad($this->items, $this->length() + $this->getIntegerable($increaseSize), $value);\n\n        return $this;\n    }", "language": "php", "code": "public function increase($increaseSize = 1, $value = null)\n    {\n        $this->items = array_pad($this->items, $this->length() + $this->getIntegerable($increaseSize), $value);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "increase", "(", "$", "increaseSize", "=", "1", ",", "$", "value", "=", "null", ")", "{", "$", "this", "->", "items", "=", "array_pad", "(", "$", "this", "->", "items", ",", "$", "this", "->", "length", "(", ")", "+", "$", "this", "->", "getIntegerable", "(", "$", "increaseSize", ")", ",", "$", "value", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Increase Container to the specified length with a value.\n\n@param int|IntegerContract $increaseSize\n@param null|mixed $value\n@return $this", "docstring_tokens": ["Increase", "Container", "to", "the", "specified", "length", "with", "a", "value", "."], "sha": "bdb45bb5109ca07f116cce571b76804e47ac5d56", "url": "https://github.com/imkrimerman/primitive/blob/bdb45bb5109ca07f116cce571b76804e47ac5d56/src/Primitive/Container/Container.php#L705-L710", "partition": "test"}
{"repo": "rougin/describe", "path": "src/Driver/MySQLDriver.php", "func_name": "MySQLDriver.strip", "original_string": "protected function strip($table)\n    {\n        $exists = strpos($table, '.') !== false;\n\n        $updated = substr($table, strpos($table, '.') + 1);\n\n        return $exists ? $updated : $table;\n    }", "language": "php", "code": "protected function strip($table)\n    {\n        $exists = strpos($table, '.') !== false;\n\n        $updated = substr($table, strpos($table, '.') + 1);\n\n        return $exists ? $updated : $table;\n    }", "code_tokens": ["protected", "function", "strip", "(", "$", "table", ")", "{", "$", "exists", "=", "strpos", "(", "$", "table", ",", "'.'", ")", "!==", "false", ";", "$", "updated", "=", "substr", "(", "$", "table", ",", "strpos", "(", "$", "table", ",", "'.'", ")", "+", "1", ")", ";", "return", "$", "exists", "?", "$", "updated", ":", "$", "table", ";", "}"], "docstring": "Strips the table schema from the table name.\n\n@param  string $table\n@return string", "docstring_tokens": ["Strips", "the", "table", "schema", "from", "the", "table", "name", "."], "sha": "dc75ea87ca007e0d56d014699a98c85500adbfb1", "url": "https://github.com/rougin/describe/blob/dc75ea87ca007e0d56d014699a98c85500adbfb1/src/Driver/MySQLDriver.php#L292-L299", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/XML/Util.php", "func_name": "XML_Util.createStartElement", "original_string": "function createStartElement($qname, $attributes = array(), $namespaceUri = null,\n        $multiline = false, $indent = '_auto', $linebreak = \"\\n\", \n        $sortAttributes = true)\n    {\n        // if no attributes hav been set, use empty attributes\n        if (!isset($attributes) || !is_array($attributes)) {\n            $attributes = array();\n        }\n\n        if ($namespaceUri != null) {\n            $parts = XML_Util::splitQualifiedName($qname);\n        }\n\n        // check for multiline attributes\n        if ($multiline === true) {\n            if ($indent === '_auto') {\n                $indent = str_repeat(' ', (strlen($qname)+2));\n            }\n        }\n\n        if ($namespaceUri != null) {\n            // is a namespace given\n            if (isset($parts['namespace']) && !empty($parts['namespace'])) {\n                $attributes['xmlns:' . $parts['namespace']] = $namespaceUri;\n            } else {\n                // define this Uri as the default namespace\n                $attributes['xmlns'] = $namespaceUri;\n            }\n        }\n\n        // create attribute list\n        $attList = XML_Util::attributesToString($attributes, $sortAttributes, \n            $multiline, $indent, $linebreak);\n        $element = sprintf('<%s%s>', $qname, $attList);\n        return  $element;\n    }", "language": "php", "code": "function createStartElement($qname, $attributes = array(), $namespaceUri = null,\n        $multiline = false, $indent = '_auto', $linebreak = \"\\n\", \n        $sortAttributes = true)\n    {\n        // if no attributes hav been set, use empty attributes\n        if (!isset($attributes) || !is_array($attributes)) {\n            $attributes = array();\n        }\n\n        if ($namespaceUri != null) {\n            $parts = XML_Util::splitQualifiedName($qname);\n        }\n\n        // check for multiline attributes\n        if ($multiline === true) {\n            if ($indent === '_auto') {\n                $indent = str_repeat(' ', (strlen($qname)+2));\n            }\n        }\n\n        if ($namespaceUri != null) {\n            // is a namespace given\n            if (isset($parts['namespace']) && !empty($parts['namespace'])) {\n                $attributes['xmlns:' . $parts['namespace']] = $namespaceUri;\n            } else {\n                // define this Uri as the default namespace\n                $attributes['xmlns'] = $namespaceUri;\n            }\n        }\n\n        // create attribute list\n        $attList = XML_Util::attributesToString($attributes, $sortAttributes, \n            $multiline, $indent, $linebreak);\n        $element = sprintf('<%s%s>', $qname, $attList);\n        return  $element;\n    }", "code_tokens": ["function", "createStartElement", "(", "$", "qname", ",", "$", "attributes", "=", "array", "(", ")", ",", "$", "namespaceUri", "=", "null", ",", "$", "multiline", "=", "false", ",", "$", "indent", "=", "'_auto'", ",", "$", "linebreak", "=", "\"\\n\"", ",", "$", "sortAttributes", "=", "true", ")", "{", "// if no attributes hav been set, use empty attributes", "if", "(", "!", "isset", "(", "$", "attributes", ")", "||", "!", "is_array", "(", "$", "attributes", ")", ")", "{", "$", "attributes", "=", "array", "(", ")", ";", "}", "if", "(", "$", "namespaceUri", "!=", "null", ")", "{", "$", "parts", "=", "XML_Util", "::", "splitQualifiedName", "(", "$", "qname", ")", ";", "}", "// check for multiline attributes", "if", "(", "$", "multiline", "===", "true", ")", "{", "if", "(", "$", "indent", "===", "'_auto'", ")", "{", "$", "indent", "=", "str_repeat", "(", "' '", ",", "(", "strlen", "(", "$", "qname", ")", "+", "2", ")", ")", ";", "}", "}", "if", "(", "$", "namespaceUri", "!=", "null", ")", "{", "// is a namespace given", "if", "(", "isset", "(", "$", "parts", "[", "'namespace'", "]", ")", "&&", "!", "empty", "(", "$", "parts", "[", "'namespace'", "]", ")", ")", "{", "$", "attributes", "[", "'xmlns:'", ".", "$", "parts", "[", "'namespace'", "]", "]", "=", "$", "namespaceUri", ";", "}", "else", "{", "// define this Uri as the default namespace", "$", "attributes", "[", "'xmlns'", "]", "=", "$", "namespaceUri", ";", "}", "}", "// create attribute list", "$", "attList", "=", "XML_Util", "::", "attributesToString", "(", "$", "attributes", ",", "$", "sortAttributes", ",", "$", "multiline", ",", "$", "indent", ",", "$", "linebreak", ")", ";", "$", "element", "=", "sprintf", "(", "'<%s%s>'", ",", "$", "qname", ",", "$", "attList", ")", ";", "return", "$", "element", ";", "}"], "docstring": "create a start element\n\n<code>\nrequire_once 'XML/Util.php';\n\n// create an XML start element:\n$tag = XML_Util::createStartElement('myNs:myTag',\narray('foo' => 'bar') ,'http://www.w3c.org/myNs#');\n</code>\n\n@param string $qname          qualified tagname (including namespace)\n@param array  $attributes     array containg attributes\n@param string $namespaceUri   URI of the namespace\n@param bool   $multiline      whether to create a multiline tag where each\nattribute gets written to a single line\n@param string $indent         string used to indent attributes (_auto indents\nattributes so they start at the same column)\n@param string $linebreak      string used for linebreaks\n@param bool   $sortAttributes Whether to sort the attributes or not\n\n@return string XML start element\n@access public\n@static\n@see createEndElement(), createTag()", "docstring_tokens": ["create", "a", "start", "element"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/XML/Util.php#L700-L735", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Parser/Dumper/TomlDumper.php", "func_name": "TomlDumper.processArrayOfArrays", "original_string": "private function processArrayOfArrays(array $values, string $parent, TomlBuilder $builder): TomlBuilder\n    {\n        $array = [];\n\n        foreach ($values as $value) {\n            if ($this->hasStringKeys($value)) {\n                $builder->addArrayOfTable($parent);\n\n                foreach ($value as $key => $val) {\n                    if (\\is_array($val)) {\n                        $builder = $this->processArrayOfArrays($val, \"${parent}.${key}\", $builder);\n                    } else {\n                        $builder->addValue($key, $val);\n                    }\n                }\n            } else {\n                $array[] = $value;\n            }\n        }\n\n        if (\\count($array) !== 0) {\n            $builder->addValue($parent, $array);\n        }\n\n        return $builder;\n    }", "language": "php", "code": "private function processArrayOfArrays(array $values, string $parent, TomlBuilder $builder): TomlBuilder\n    {\n        $array = [];\n\n        foreach ($values as $value) {\n            if ($this->hasStringKeys($value)) {\n                $builder->addArrayOfTable($parent);\n\n                foreach ($value as $key => $val) {\n                    if (\\is_array($val)) {\n                        $builder = $this->processArrayOfArrays($val, \"${parent}.${key}\", $builder);\n                    } else {\n                        $builder->addValue($key, $val);\n                    }\n                }\n            } else {\n                $array[] = $value;\n            }\n        }\n\n        if (\\count($array) !== 0) {\n            $builder->addValue($parent, $array);\n        }\n\n        return $builder;\n    }", "code_tokens": ["private", "function", "processArrayOfArrays", "(", "array", "$", "values", ",", "string", "$", "parent", ",", "TomlBuilder", "$", "builder", ")", ":", "TomlBuilder", "{", "$", "array", "=", "[", "]", ";", "foreach", "(", "$", "values", "as", "$", "value", ")", "{", "if", "(", "$", "this", "->", "hasStringKeys", "(", "$", "value", ")", ")", "{", "$", "builder", "->", "addArrayOfTable", "(", "$", "parent", ")", ";", "foreach", "(", "$", "value", "as", "$", "key", "=>", "$", "val", ")", "{", "if", "(", "\\", "is_array", "(", "$", "val", ")", ")", "{", "$", "builder", "=", "$", "this", "->", "processArrayOfArrays", "(", "$", "val", ",", "\"${parent}.${key}\"", ",", "$", "builder", ")", ";", "}", "else", "{", "$", "builder", "->", "addValue", "(", "$", "key", ",", "$", "val", ")", ";", "}", "}", "}", "else", "{", "$", "array", "[", "]", "=", "$", "value", ";", "}", "}", "if", "(", "\\", "count", "(", "$", "array", ")", "!==", "0", ")", "{", "$", "builder", "->", "addValue", "(", "$", "parent", ",", "$", "array", ")", ";", "}", "return", "$", "builder", ";", "}"], "docstring": "Run through all arrays.\n\n@param array                       $values\n@param string                      $parent\n@param \\Yosymfony\\Toml\\TomlBuilder $builder\n\n@return \\Yosymfony\\Toml\\TomlBuilder", "docstring_tokens": ["Run", "through", "all", "arrays", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Parser/Dumper/TomlDumper.php#L86-L111", "partition": "test"}
{"repo": "aphiria/router", "path": "src/Matchers/Trees/TrieNode.php", "func_name": "TrieNode.addVariableChildNode", "original_string": "private function addVariableChildNode(VariableTrieNode $childNode): void\n    {\n        // Try to find a variable child whose parts match the input child's parts\n        // If we find one, then we merge its routes and add all its children\n        $matchingChildNode = null;\n\n        foreach ($this->variableChildren as $variableChildNode) {\n            // Purposely doing a loose check here because we don't care about reference equality\n            if ($variableChildNode->parts == $childNode->parts) {\n                $matchingChildNode = $variableChildNode;\n                $variableChildNode->routes = \\array_merge($variableChildNode->routes, $childNode->routes);\n                break;\n            }\n        }\n\n        if ($matchingChildNode === null) {\n            $this->variableChildren[] = $childNode;\n        } else {\n            foreach ($childNode->getAllChildren() as $grandChildNode) {\n                $matchingChildNode->addChild($grandChildNode);\n            }\n        }\n    }", "language": "php", "code": "private function addVariableChildNode(VariableTrieNode $childNode): void\n    {\n        // Try to find a variable child whose parts match the input child's parts\n        // If we find one, then we merge its routes and add all its children\n        $matchingChildNode = null;\n\n        foreach ($this->variableChildren as $variableChildNode) {\n            // Purposely doing a loose check here because we don't care about reference equality\n            if ($variableChildNode->parts == $childNode->parts) {\n                $matchingChildNode = $variableChildNode;\n                $variableChildNode->routes = \\array_merge($variableChildNode->routes, $childNode->routes);\n                break;\n            }\n        }\n\n        if ($matchingChildNode === null) {\n            $this->variableChildren[] = $childNode;\n        } else {\n            foreach ($childNode->getAllChildren() as $grandChildNode) {\n                $matchingChildNode->addChild($grandChildNode);\n            }\n        }\n    }", "code_tokens": ["private", "function", "addVariableChildNode", "(", "VariableTrieNode", "$", "childNode", ")", ":", "void", "{", "// Try to find a variable child whose parts match the input child's parts", "// If we find one, then we merge its routes and add all its children", "$", "matchingChildNode", "=", "null", ";", "foreach", "(", "$", "this", "->", "variableChildren", "as", "$", "variableChildNode", ")", "{", "// Purposely doing a loose check here because we don't care about reference equality", "if", "(", "$", "variableChildNode", "->", "parts", "==", "$", "childNode", "->", "parts", ")", "{", "$", "matchingChildNode", "=", "$", "variableChildNode", ";", "$", "variableChildNode", "->", "routes", "=", "\\", "array_merge", "(", "$", "variableChildNode", "->", "routes", ",", "$", "childNode", "->", "routes", ")", ";", "break", ";", "}", "}", "if", "(", "$", "matchingChildNode", "===", "null", ")", "{", "$", "this", "->", "variableChildren", "[", "]", "=", "$", "childNode", ";", "}", "else", "{", "foreach", "(", "$", "childNode", "->", "getAllChildren", "(", ")", "as", "$", "grandChildNode", ")", "{", "$", "matchingChildNode", "->", "addChild", "(", "$", "grandChildNode", ")", ";", "}", "}", "}"], "docstring": "Adds a variable child node\n\n@param VariableTrieNode $childNode The child node to add", "docstring_tokens": ["Adds", "a", "variable", "child", "node"], "sha": "d9fa90d5f17dddbd52f311c2ec5cfec5865fd66b", "url": "https://github.com/aphiria/router/blob/d9fa90d5f17dddbd52f311c2ec5cfec5865fd66b/src/Matchers/Trees/TrieNode.php#L126-L148", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Exception/Http/Handler.php", "func_name": "Handler.sortedFilter", "original_string": "private function sortedFilter(array $filtered, ServerRequestInterface $request): DisplayerContract\n    {\n        $accepts = self::getHeaderValuesFromString($request->getHeaderLine('Accept'));\n\n        foreach ($accepts as $accept) {\n            foreach ($filtered as $filter) {\n                if ($filter->getContentType() === $accept) {\n                    return $filter;\n                }\n            }\n        }\n\n        return $filtered[0];\n    }", "language": "php", "code": "private function sortedFilter(array $filtered, ServerRequestInterface $request): DisplayerContract\n    {\n        $accepts = self::getHeaderValuesFromString($request->getHeaderLine('Accept'));\n\n        foreach ($accepts as $accept) {\n            foreach ($filtered as $filter) {\n                if ($filter->getContentType() === $accept) {\n                    return $filter;\n                }\n            }\n        }\n\n        return $filtered[0];\n    }", "code_tokens": ["private", "function", "sortedFilter", "(", "array", "$", "filtered", ",", "ServerRequestInterface", "$", "request", ")", ":", "DisplayerContract", "{", "$", "accepts", "=", "self", "::", "getHeaderValuesFromString", "(", "$", "request", "->", "getHeaderLine", "(", "'Accept'", ")", ")", ";", "foreach", "(", "$", "accepts", "as", "$", "accept", ")", "{", "foreach", "(", "$", "filtered", "as", "$", "filter", ")", "{", "if", "(", "$", "filter", "->", "getContentType", "(", ")", "===", "$", "accept", ")", "{", "return", "$", "filter", ";", "}", "}", "}", "return", "$", "filtered", "[", "0", "]", ";", "}"], "docstring": "Sort displayer after the first found accept header.\n\n@param array                                    $filtered\n@param \\Psr\\Http\\Message\\ServerRequestInterface $request\n\n@return \\Viserio\\Component\\Contract\\Exception\\Displayer", "docstring_tokens": ["Sort", "displayer", "after", "the", "first", "found", "accept", "header", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Exception/Http/Handler.php#L285-L298", "partition": "test"}
{"repo": "findsomething/framework", "path": "src/Dao/QueryBuilder.php", "func_name": "QueryBuilder.having", "original_string": "public function having($having)\n    {\n        if (!(func_num_args() == 1 && $having instanceof CompositeExpression)) {\n            $having = new CompositeExpression(CompositeExpression::TYPE_AND, func_get_args());\n        }\n\n        return $this->add('having', $having);\n    }", "language": "php", "code": "public function having($having)\n    {\n        if (!(func_num_args() == 1 && $having instanceof CompositeExpression)) {\n            $having = new CompositeExpression(CompositeExpression::TYPE_AND, func_get_args());\n        }\n\n        return $this->add('having', $having);\n    }", "code_tokens": ["public", "function", "having", "(", "$", "having", ")", "{", "if", "(", "!", "(", "func_num_args", "(", ")", "==", "1", "&&", "$", "having", "instanceof", "CompositeExpression", ")", ")", "{", "$", "having", "=", "new", "CompositeExpression", "(", "CompositeExpression", "::", "TYPE_AND", ",", "func_get_args", "(", ")", ")", ";", "}", "return", "$", "this", "->", "add", "(", "'having'", ",", "$", "having", ")", ";", "}"], "docstring": "Specifies a restriction over the groups of the query.\nReplaces any previous having restrictions, if any.\n\n@param mixed $having The restriction over the groups.\n\n@return \\Doctrine\\DBAL\\Query\\QueryBuilder This QueryBuilder instance.", "docstring_tokens": ["Specifies", "a", "restriction", "over", "the", "groups", "of", "the", "query", ".", "Replaces", "any", "previous", "having", "restrictions", "if", "any", "."], "sha": "6c3f24dff912d75e304eb28c4e74b64bde7f358a", "url": "https://github.com/findsomething/framework/blob/6c3f24dff912d75e304eb28c4e74b64bde7f358a/src/Dao/QueryBuilder.php#L962-L969", "partition": "test"}
{"repo": "locomotivemtl/charcoal-object", "path": "src/Charcoal/Object/PublishableTrait.php", "func_name": "PublishableTrait.setExpiryDate", "original_string": "public function setExpiryDate($time)\n    {\n        if ($time === null || $time === '') {\n            $this->expiryDate = null;\n            return $this;\n        }\n\n        if (is_string($time)) {\n            try {\n                $time = new DateTime($time);\n            } catch (Exception $e) {\n                throw new UnexpectedValueException(sprintf(\n                    'Invalid Expiration Date: %s',\n                    $e->getMessage()\n                ), $e->getCode(), $e);\n            }\n        }\n\n        if (!$time instanceof DateTimeInterface) {\n            throw new InvalidArgumentException(\n                'Expiration Date must be a date/time string or an instance of DateTimeInterface'\n            );\n        }\n\n        $this->expiryDate = $time;\n\n        return $this;\n    }", "language": "php", "code": "public function setExpiryDate($time)\n    {\n        if ($time === null || $time === '') {\n            $this->expiryDate = null;\n            return $this;\n        }\n\n        if (is_string($time)) {\n            try {\n                $time = new DateTime($time);\n            } catch (Exception $e) {\n                throw new UnexpectedValueException(sprintf(\n                    'Invalid Expiration Date: %s',\n                    $e->getMessage()\n                ), $e->getCode(), $e);\n            }\n        }\n\n        if (!$time instanceof DateTimeInterface) {\n            throw new InvalidArgumentException(\n                'Expiration Date must be a date/time string or an instance of DateTimeInterface'\n            );\n        }\n\n        $this->expiryDate = $time;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setExpiryDate", "(", "$", "time", ")", "{", "if", "(", "$", "time", "===", "null", "||", "$", "time", "===", "''", ")", "{", "$", "this", "->", "expiryDate", "=", "null", ";", "return", "$", "this", ";", "}", "if", "(", "is_string", "(", "$", "time", ")", ")", "{", "try", "{", "$", "time", "=", "new", "DateTime", "(", "$", "time", ")", ";", "}", "catch", "(", "Exception", "$", "e", ")", "{", "throw", "new", "UnexpectedValueException", "(", "sprintf", "(", "'Invalid Expiration Date: %s'", ",", "$", "e", "->", "getMessage", "(", ")", ")", ",", "$", "e", "->", "getCode", "(", ")", ",", "$", "e", ")", ";", "}", "}", "if", "(", "!", "$", "time", "instanceof", "DateTimeInterface", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Expiration Date must be a date/time string or an instance of DateTimeInterface'", ")", ";", "}", "$", "this", "->", "expiryDate", "=", "$", "time", ";", "return", "$", "this", ";", "}"], "docstring": "Set the object's expiration date.\n\n@param  string|DateTimeInterface|null $time The date/time value.\n@throws UnexpectedValueException If the date/time value is invalid.\n@throws InvalidArgumentException If the value is not a date/time instance.\n@return PublishableInterface Chainable", "docstring_tokens": ["Set", "the", "object", "s", "expiration", "date", "."], "sha": "11c459d0e1519de215ca1c18301ee8f5e8d1e09b", "url": "https://github.com/locomotivemtl/charcoal-object/blob/11c459d0e1519de215ca1c18301ee8f5e8d1e09b/src/Charcoal/Object/PublishableTrait.php#L94-L121", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/XSD2PHP/lib/ZF/1.10.7/Zend/Console/Getopt.php", "func_name": "Zend_Console_Getopt.setOptions", "original_string": "public function setOptions($getoptConfig)\n    {\n        if (isset($getoptConfig)) {\n            foreach ($getoptConfig as $key => $value) {\n                $this->setOption($key, $value);\n            }\n        }\n        return $this;\n    }", "language": "php", "code": "public function setOptions($getoptConfig)\n    {\n        if (isset($getoptConfig)) {\n            foreach ($getoptConfig as $key => $value) {\n                $this->setOption($key, $value);\n            }\n        }\n        return $this;\n    }", "code_tokens": ["public", "function", "setOptions", "(", "$", "getoptConfig", ")", "{", "if", "(", "isset", "(", "$", "getoptConfig", ")", ")", "{", "foreach", "(", "$", "getoptConfig", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "this", "->", "setOption", "(", "$", "key", ",", "$", "value", ")", ";", "}", "}", "return", "$", "this", ";", "}"], "docstring": "Define multiple configuration options from an associative array.\nThese are not program options, but properties to configure\nthe behavior of Zend_Console_Getopt.\n\n@param  array $getoptConfig\n@return Zend_Console_Getopt Provides a fluent interface", "docstring_tokens": ["Define", "multiple", "configuration", "options", "from", "an", "associative", "array", ".", "These", "are", "not", "program", "options", "but", "properties", "to", "configure", "the", "behavior", "of", "Zend_Console_Getopt", "."], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/XSD2PHP/lib/ZF/1.10.7/Zend/Console/Getopt.php#L390-L398", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Http/Controllers/Asset/Meter/Controller.php", "func_name": "Controller.update", "original_string": "public function update(MeterRequest $request, $id, $meterId)\n    {\n        $meter = $this->meter->update($request, $id, $meterId);\n\n        if ($meter) {\n            $message = 'Successfully updated meter.';\n\n            return redirect()->route('maintenance.assets.meters.show', [$id, $meter->id])->withSuccess($message);\n        } else {\n            $message = 'There was an issue updating this meter. Please try again.';\n\n            return redirect()->route('maintenance.assets.meters.edit', [$id, $meterId])->withErrors($message);\n        }\n    }", "language": "php", "code": "public function update(MeterRequest $request, $id, $meterId)\n    {\n        $meter = $this->meter->update($request, $id, $meterId);\n\n        if ($meter) {\n            $message = 'Successfully updated meter.';\n\n            return redirect()->route('maintenance.assets.meters.show', [$id, $meter->id])->withSuccess($message);\n        } else {\n            $message = 'There was an issue updating this meter. Please try again.';\n\n            return redirect()->route('maintenance.assets.meters.edit', [$id, $meterId])->withErrors($message);\n        }\n    }", "code_tokens": ["public", "function", "update", "(", "MeterRequest", "$", "request", ",", "$", "id", ",", "$", "meterId", ")", "{", "$", "meter", "=", "$", "this", "->", "meter", "->", "update", "(", "$", "request", ",", "$", "id", ",", "$", "meterId", ")", ";", "if", "(", "$", "meter", ")", "{", "$", "message", "=", "'Successfully updated meter.'", ";", "return", "redirect", "(", ")", "->", "route", "(", "'maintenance.assets.meters.show'", ",", "[", "$", "id", ",", "$", "meter", "->", "id", "]", ")", "->", "withSuccess", "(", "$", "message", ")", ";", "}", "else", "{", "$", "message", "=", "'There was an issue updating this meter. Please try again.'", ";", "return", "redirect", "(", ")", "->", "route", "(", "'maintenance.assets.meters.edit'", ",", "[", "$", "id", ",", "$", "meterId", "]", ")", "->", "withErrors", "(", "$", "message", ")", ";", "}", "}"], "docstring": "Updates the specified meter attached to the specified asset.\n\n@param MeterRequest $request\n@param int|string   $id\n@param int|string   $meterId\n\n@return \\Illuminate\\Http\\RedirectResponse", "docstring_tokens": ["Updates", "the", "specified", "meter", "attached", "to", "the", "specified", "asset", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Http/Controllers/Asset/Meter/Controller.php#L131-L144", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/Orm/BaseActiveRecord.php", "func_name": "BaseActiveRecord.beforeSave", "original_string": "public function beforeSave($insert)\n    {\n        $eventName = $insert ? self::EVENT_BEFORE_INSERT : self::EVENT_BEFORE_UPDATE;\n        $isValid = true;\n        $this->emit($eventName, [&$this, &$isValid]);\n\n        return $isValid;\n    }", "language": "php", "code": "public function beforeSave($insert)\n    {\n        $eventName = $insert ? self::EVENT_BEFORE_INSERT : self::EVENT_BEFORE_UPDATE;\n        $isValid = true;\n        $this->emit($eventName, [&$this, &$isValid]);\n\n        return $isValid;\n    }", "code_tokens": ["public", "function", "beforeSave", "(", "$", "insert", ")", "{", "$", "eventName", "=", "$", "insert", "?", "self", "::", "EVENT_BEFORE_INSERT", ":", "self", "::", "EVENT_BEFORE_UPDATE", ";", "$", "isValid", "=", "true", ";", "$", "this", "->", "emit", "(", "$", "eventName", ",", "[", "&", "$", "this", ",", "&", "$", "isValid", "]", ")", ";", "return", "$", "isValid", ";", "}"], "docstring": "This method is called at the beginning of inserting or updating a record.\n\nThe default implementation will trigger an [[EVENT_BEFORE_INSERT]] event when `$insert` is `true`,\nor an [[EVENT_BEFORE_UPDATE]] event if `$insert` is `false`.\nWhen overriding this method, make sure you call the parent implementation like the following:\n\n```php\npublic function beforeSave($insert)\n{\nif (!parent::beforeSave($insert)) {\nreturn false;\n}\n\n// ...custom code here...\nreturn true;\n}\n```\n\n@param bool $insert whether this method called while inserting a record.\nIf `false`, it means the method is called while updating a record.\n@return bool whether the insertion or updating should continue.\nIf `false`, the insertion or updating will be cancelled.", "docstring_tokens": ["This", "method", "is", "called", "at", "the", "beginning", "of", "inserting", "or", "updating", "a", "record", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/Orm/BaseActiveRecord.php#L981-L988", "partition": "test"}
{"repo": "anlutro/php-bulk-sms", "path": "src/Message.php", "func_name": "Message.setMessage", "original_string": "protected function setMessage($message)\n    {\n        $this->message = $this->encodeMessage($message);\n\n        if (strlen($this->message) > $this->concatLimit) {\n            $this->concat = true;\n        }\n\n        return $this;\n    }", "language": "php", "code": "protected function setMessage($message)\n    {\n        $this->message = $this->encodeMessage($message);\n\n        if (strlen($this->message) > $this->concatLimit) {\n            $this->concat = true;\n        }\n\n        return $this;\n    }", "code_tokens": ["protected", "function", "setMessage", "(", "$", "message", ")", "{", "$", "this", "->", "message", "=", "$", "this", "->", "encodeMessage", "(", "$", "message", ")", ";", "if", "(", "strlen", "(", "$", "this", "->", "message", ")", ">", "$", "this", "->", "concatLimit", ")", "{", "$", "this", "->", "concat", "=", "true", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Set the message.\n\n@param  string $message\n\n@return $this", "docstring_tokens": ["Set", "the", "message", "."], "sha": "0e81484eeb55c5730c1c6651b039733bb34ab2ad", "url": "https://github.com/anlutro/php-bulk-sms/blob/0e81484eeb55c5730c1c6651b039733bb34ab2ad/src/Message.php#L96-L105", "partition": "test"}
{"repo": "phmLabs/Smoke", "path": "src/Cli/Application.php", "func_name": "Application.registerCommands", "original_string": "private function registerCommands()\n    {\n        $this->add(new ScanCommand());\n        $this->add(new ExplainCommand());\n        $this->add(new WarmUpCommand());\n        $this->add(new CustomCommand());\n    }", "language": "php", "code": "private function registerCommands()\n    {\n        $this->add(new ScanCommand());\n        $this->add(new ExplainCommand());\n        $this->add(new WarmUpCommand());\n        $this->add(new CustomCommand());\n    }", "code_tokens": ["private", "function", "registerCommands", "(", ")", "{", "$", "this", "->", "add", "(", "new", "ScanCommand", "(", ")", ")", ";", "$", "this", "->", "add", "(", "new", "ExplainCommand", "(", ")", ")", ";", "$", "this", "->", "add", "(", "new", "WarmUpCommand", "(", ")", ")", ";", "$", "this", "->", "add", "(", "new", "CustomCommand", "(", ")", ")", ";", "}"], "docstring": "Initializes all the commands.", "docstring_tokens": ["Initializes", "all", "the", "commands", "."], "sha": "563d086168f845986071fce1ce58a701916b74a8", "url": "https://github.com/phmLabs/Smoke/blob/563d086168f845986071fce1ce58a701916b74a8/src/Cli/Application.php#L50-L56", "partition": "test"}
{"repo": "thephpleague/omnipay-common", "path": "src/Common/Message/AbstractRequest.php", "func_name": "AbstractRequest.setCard", "original_string": "public function setCard($value)\n    {\n        if ($value && !$value instanceof CreditCard) {\n            $value = new CreditCard($value);\n        }\n\n        return $this->setParameter('card', $value);\n    }", "language": "php", "code": "public function setCard($value)\n    {\n        if ($value && !$value instanceof CreditCard) {\n            $value = new CreditCard($value);\n        }\n\n        return $this->setParameter('card', $value);\n    }", "code_tokens": ["public", "function", "setCard", "(", "$", "value", ")", "{", "if", "(", "$", "value", "&&", "!", "$", "value", "instanceof", "CreditCard", ")", "{", "$", "value", "=", "new", "CreditCard", "(", "$", "value", ")", ";", "}", "return", "$", "this", "->", "setParameter", "(", "'card'", ",", "$", "value", ")", ";", "}"], "docstring": "Sets the card.\n\n@param CreditCard $value\n@return $this", "docstring_tokens": ["Sets", "the", "card", "."], "sha": "c4567f786d283851be12319214ac7be7a0a0ee69", "url": "https://github.com/thephpleague/omnipay-common/blob/c4567f786d283851be12319214ac7be7a0a0ee69/src/Common/Message/AbstractRequest.php#L198-L205", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/QBXML/Object/Invoice.php", "func_name": "QuickBooks_QBXML_Object_Invoice.getBillAddress", "original_string": "public function getBillAddress($part = null, $defaults = array())\n\t{\n\t\tif (!is_null($part))\n\t\t{\n\t\t\treturn $this->get('BillAddress ' . $part);\n\t\t}\n\t\t\n\t\treturn $this->getArray('BillAddress *', $defaults);\n\t}", "language": "php", "code": "public function getBillAddress($part = null, $defaults = array())\n\t{\n\t\tif (!is_null($part))\n\t\t{\n\t\t\treturn $this->get('BillAddress ' . $part);\n\t\t}\n\t\t\n\t\treturn $this->getArray('BillAddress *', $defaults);\n\t}", "code_tokens": ["public", "function", "getBillAddress", "(", "$", "part", "=", "null", ",", "$", "defaults", "=", "array", "(", ")", ")", "{", "if", "(", "!", "is_null", "(", "$", "part", ")", ")", "{", "return", "$", "this", "->", "get", "(", "'BillAddress '", ".", "$", "part", ")", ";", "}", "return", "$", "this", "->", "getArray", "(", "'BillAddress *'", ",", "$", "defaults", ")", ";", "}"], "docstring": "Get the billing address\n\n@param string $part\t\t\tA specific portion of the address to get (i.e. \"Addr1\" or \"State\")\n@param array $defaults\t\tDefault values if a value isn't filled in\n@return array\t\t\t\tThe address", "docstring_tokens": ["Get", "the", "billing", "address"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/QBXML/Object/Invoice.php#L418-L426", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Processors/WorkOrder/WorkOrderAttachmentProcessor.php", "func_name": "WorkOrderAttachmentProcessor.edit", "original_string": "public function edit($workOrderId, $attachmentId)\n    {\n        $workOrder = $this->workOrder->findOrFail($workOrderId);\n\n        $attachment = $workOrder->attachments()->findOrFail($attachmentId);\n\n        $form = $this->presenter->form($workOrder, $attachment);\n\n        return view('work-orders.attachments.edit', compact('form'));\n    }", "language": "php", "code": "public function edit($workOrderId, $attachmentId)\n    {\n        $workOrder = $this->workOrder->findOrFail($workOrderId);\n\n        $attachment = $workOrder->attachments()->findOrFail($attachmentId);\n\n        $form = $this->presenter->form($workOrder, $attachment);\n\n        return view('work-orders.attachments.edit', compact('form'));\n    }", "code_tokens": ["public", "function", "edit", "(", "$", "workOrderId", ",", "$", "attachmentId", ")", "{", "$", "workOrder", "=", "$", "this", "->", "workOrder", "->", "findOrFail", "(", "$", "workOrderId", ")", ";", "$", "attachment", "=", "$", "workOrder", "->", "attachments", "(", ")", "->", "findOrFail", "(", "$", "attachmentId", ")", ";", "$", "form", "=", "$", "this", "->", "presenter", "->", "form", "(", "$", "workOrder", ",", "$", "attachment", ")", ";", "return", "view", "(", "'work-orders.attachments.edit'", ",", "compact", "(", "'form'", ")", ")", ";", "}"], "docstring": "Displays the form for editing the specified work order attachment.\n\n@param int|string $workOrderId\n@param int|string $attachmentId\n\n@return \\Illuminate\\View\\View", "docstring_tokens": ["Displays", "the", "form", "for", "editing", "the", "specified", "work", "order", "attachment", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Processors/WorkOrder/WorkOrderAttachmentProcessor.php#L112-L121", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-file/src/File/FileRestProxy.php", "func_name": "FileRestProxy.deleteShare", "original_string": "public function deleteShare(\n        $share,\n        FileServiceOptions $options = null\n    ) {\n        $this->deleteShareAsync($share, $options)->wait();\n    }", "language": "php", "code": "public function deleteShare(\n        $share,\n        FileServiceOptions $options = null\n    ) {\n        $this->deleteShareAsync($share, $options)->wait();\n    }", "code_tokens": ["public", "function", "deleteShare", "(", "$", "share", ",", "FileServiceOptions", "$", "options", "=", "null", ")", "{", "$", "this", "->", "deleteShareAsync", "(", "$", "share", ",", "$", "options", ")", "->", "wait", "(", ")", ";", "}"], "docstring": "Deletes a share in the given storage account.\n\n@param string                  $share   name of the share\n@param FileServiceOptions|null $options optional parameters\n\n@return void\n\n@see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share", "docstring_tokens": ["Deletes", "a", "share", "in", "the", "given", "storage", "account", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-file/src/File/FileRestProxy.php#L608-L613", "partition": "test"}
{"repo": "m1/Vars", "path": "src/Resource/ResourceProvider.php", "func_name": "ResourceProvider.addContent", "original_string": "private function addContent($content)\n    {\n        if ($this->relative) {\n            $this->content = $this->mergeContents($this->content, $content);\n        } else {\n            $this->parent_content = $this->mergeContents($this->parent_content, $content);\n        }\n    }", "language": "php", "code": "private function addContent($content)\n    {\n        if ($this->relative) {\n            $this->content = $this->mergeContents($this->content, $content);\n        } else {\n            $this->parent_content = $this->mergeContents($this->parent_content, $content);\n        }\n    }", "code_tokens": ["private", "function", "addContent", "(", "$", "content", ")", "{", "if", "(", "$", "this", "->", "relative", ")", "{", "$", "this", "->", "content", "=", "$", "this", "->", "mergeContents", "(", "$", "this", "->", "content", ",", "$", "content", ")", ";", "}", "else", "{", "$", "this", "->", "parent_content", "=", "$", "this", "->", "mergeContents", "(", "$", "this", "->", "parent_content", ",", "$", "content", ")", ";", "}", "}"], "docstring": "Adds content to the parent contents\n\n@param array $content The content from the resource", "docstring_tokens": ["Adds", "content", "to", "the", "parent", "contents"], "sha": "e64beb6d67ad30c0c86ec1e77022d6803ac11eda", "url": "https://github.com/m1/Vars/blob/e64beb6d67ad30c0c86ec1e77022d6803ac11eda/src/Resource/ResourceProvider.php#L198-L205", "partition": "test"}
{"repo": "PHPExif/php-exif", "path": "lib/PHPExif/Exif.php", "func_name": "Exif.getHeadline", "original_string": "public function getHeadline()\n    {\n        if (!isset($this->data[self::HEADLINE])) {\n            return false;\n        }\n\n        return $this->data[self::HEADLINE];\n    }", "language": "php", "code": "public function getHeadline()\n    {\n        if (!isset($this->data[self::HEADLINE])) {\n            return false;\n        }\n\n        return $this->data[self::HEADLINE];\n    }", "code_tokens": ["public", "function", "getHeadline", "(", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "data", "[", "self", "::", "HEADLINE", "]", ")", ")", "{", "return", "false", ";", "}", "return", "$", "this", "->", "data", "[", "self", "::", "HEADLINE", "]", ";", "}"], "docstring": "Returns the Headline\n\n@return string|boolean", "docstring_tokens": ["Returns", "the", "Headline"], "sha": "41f23db39d7b48e4af0e134c2e80e577c1782ac9", "url": "https://github.com/PHPExif/php-exif/blob/41f23db39d7b48e4af0e134c2e80e577c1782ac9/lib/PHPExif/Exif.php#L181-L188", "partition": "test"}
{"repo": "Takeatea/texting", "path": "Manager/AbstractTextingManager.php", "func_name": "AbstractTextingManager.registerProvider", "original_string": "public function registerProvider(TextingProviderInterface $provider)\n    {\n        if (!$this->defaultProvider) {\n            $this->defaultProvider = &$provider;\n        }\n\n        $this->providers[$provider->getName()] = $provider;\n    }", "language": "php", "code": "public function registerProvider(TextingProviderInterface $provider)\n    {\n        if (!$this->defaultProvider) {\n            $this->defaultProvider = &$provider;\n        }\n\n        $this->providers[$provider->getName()] = $provider;\n    }", "code_tokens": ["public", "function", "registerProvider", "(", "TextingProviderInterface", "$", "provider", ")", "{", "if", "(", "!", "$", "this", "->", "defaultProvider", ")", "{", "$", "this", "->", "defaultProvider", "=", "&", "$", "provider", ";", "}", "$", "this", "->", "providers", "[", "$", "provider", "->", "getName", "(", ")", "]", "=", "$", "provider", ";", "}"], "docstring": "Will register the provider to be used later on.\n\n@param TextingProviderInterface $provider", "docstring_tokens": ["Will", "register", "the", "provider", "to", "be", "used", "later", "on", "."], "sha": "0019bc1271fc5e88ff625baaeffb1ca5b66093bc", "url": "https://github.com/Takeatea/texting/blob/0019bc1271fc5e88ff625baaeffb1ca5b66093bc/Manager/AbstractTextingManager.php#L25-L32", "partition": "test"}
{"repo": "inetprocess/libinventoryclient", "path": "src/Agent.php", "func_name": "Agent.sendEntity", "original_string": "private function sendEntity($entity_name, array $data, $key_id)\n    {\n        $client = $this->getClient();\n        $this->getLogger()->info('Sending new ' . $entity_name . '.');\n        try {\n            $this->getLogger()->info('Try to PUT data to existing ' . $entity_name . ' record.');\n            $data[$key_id . '_uri'] = $data[$key_id];\n            $client->getCommand('put' . $entity_name, $data)\n                ->execute();\n        } catch (ClientErrorResponseException $e) {\n            if ($e->getResponse()->getStatusCode() === 404) {\n                // The server doesn't exist yet. We need to POST it.\n                $this->getLogger()->info($entity_name . ' was not found on PUT request. Doing POST to create it.');\n                $client->getCommand('post' . $entity_name, $data)\n                    ->execute();\n            } else {\n                // This is not a 404 error, throw the exception.\n                throw $e;\n            }\n        }\n        $this->getLogger()->info('The ' . $entity_name . ' information has been successfully sent.');\n    }", "language": "php", "code": "private function sendEntity($entity_name, array $data, $key_id)\n    {\n        $client = $this->getClient();\n        $this->getLogger()->info('Sending new ' . $entity_name . '.');\n        try {\n            $this->getLogger()->info('Try to PUT data to existing ' . $entity_name . ' record.');\n            $data[$key_id . '_uri'] = $data[$key_id];\n            $client->getCommand('put' . $entity_name, $data)\n                ->execute();\n        } catch (ClientErrorResponseException $e) {\n            if ($e->getResponse()->getStatusCode() === 404) {\n                // The server doesn't exist yet. We need to POST it.\n                $this->getLogger()->info($entity_name . ' was not found on PUT request. Doing POST to create it.');\n                $client->getCommand('post' . $entity_name, $data)\n                    ->execute();\n            } else {\n                // This is not a 404 error, throw the exception.\n                throw $e;\n            }\n        }\n        $this->getLogger()->info('The ' . $entity_name . ' information has been successfully sent.');\n    }", "code_tokens": ["private", "function", "sendEntity", "(", "$", "entity_name", ",", "array", "$", "data", ",", "$", "key_id", ")", "{", "$", "client", "=", "$", "this", "->", "getClient", "(", ")", ";", "$", "this", "->", "getLogger", "(", ")", "->", "info", "(", "'Sending new '", ".", "$", "entity_name", ".", "'.'", ")", ";", "try", "{", "$", "this", "->", "getLogger", "(", ")", "->", "info", "(", "'Try to PUT data to existing '", ".", "$", "entity_name", ".", "' record.'", ")", ";", "$", "data", "[", "$", "key_id", ".", "'_uri'", "]", "=", "$", "data", "[", "$", "key_id", "]", ";", "$", "client", "->", "getCommand", "(", "'put'", ".", "$", "entity_name", ",", "$", "data", ")", "->", "execute", "(", ")", ";", "}", "catch", "(", "ClientErrorResponseException", "$", "e", ")", "{", "if", "(", "$", "e", "->", "getResponse", "(", ")", "->", "getStatusCode", "(", ")", "===", "404", ")", "{", "// The server doesn't exist yet. We need to POST it.", "$", "this", "->", "getLogger", "(", ")", "->", "info", "(", "$", "entity_name", ".", "' was not found on PUT request. Doing POST to create it.'", ")", ";", "$", "client", "->", "getCommand", "(", "'post'", ".", "$", "entity_name", ",", "$", "data", ")", "->", "execute", "(", ")", ";", "}", "else", "{", "// This is not a 404 error, throw the exception.", "throw", "$", "e", ";", "}", "}", "$", "this", "->", "getLogger", "(", ")", "->", "info", "(", "'The '", ".", "$", "entity_name", ".", "' information has been successfully sent.'", ")", ";", "}"], "docstring": "Send an entity.\nTry put first if 404 create it with POST.\n\n@param string $entity_name Entity name in CamelCase\n@param array  $data        Entity data to send.\n@param string $key_id      Key of data to use as an id for the request.", "docstring_tokens": ["Send", "an", "entity", ".", "Try", "put", "first", "if", "404", "create", "it", "with", "POST", "."], "sha": "73664b695c386eac152b13e78beb0beed1d8c708", "url": "https://github.com/inetprocess/libinventoryclient/blob/73664b695c386eac152b13e78beb0beed1d8c708/src/Agent.php#L161-L182", "partition": "test"}
{"repo": "MrJuliuss/syntara", "path": "src/controllers/PermissionController.php", "func_name": "PermissionController.delete", "original_string": "public function delete($permissionId)\n    {\n        try {\n            $permission = PermissionProvider::findById($permissionId);\n            $permission->delete();\n        } catch (\\MrJuliuss\\Syntara\\Models\\Permissions\\PermissionNotFoundException $e) {\n            return Response::json(array('deletePermission' => false, 'message' => trans('syntara::permissions.messages.not-found'), 'messageType' => 'danger'));\n        }\n\n        return Response::json(array('deletePermission' => true, 'message' => trans('syntara::permissions.messages.remove-success'), 'messageType' => 'success'));\n    }", "language": "php", "code": "public function delete($permissionId)\n    {\n        try {\n            $permission = PermissionProvider::findById($permissionId);\n            $permission->delete();\n        } catch (\\MrJuliuss\\Syntara\\Models\\Permissions\\PermissionNotFoundException $e) {\n            return Response::json(array('deletePermission' => false, 'message' => trans('syntara::permissions.messages.not-found'), 'messageType' => 'danger'));\n        }\n\n        return Response::json(array('deletePermission' => true, 'message' => trans('syntara::permissions.messages.remove-success'), 'messageType' => 'success'));\n    }", "code_tokens": ["public", "function", "delete", "(", "$", "permissionId", ")", "{", "try", "{", "$", "permission", "=", "PermissionProvider", "::", "findById", "(", "$", "permissionId", ")", ";", "$", "permission", "->", "delete", "(", ")", ";", "}", "catch", "(", "\\", "MrJuliuss", "\\", "Syntara", "\\", "Models", "\\", "Permissions", "\\", "PermissionNotFoundException", "$", "e", ")", "{", "return", "Response", "::", "json", "(", "array", "(", "'deletePermission'", "=>", "false", ",", "'message'", "=>", "trans", "(", "'syntara::permissions.messages.not-found'", ")", ",", "'messageType'", "=>", "'danger'", ")", ")", ";", "}", "return", "Response", "::", "json", "(", "array", "(", "'deletePermission'", "=>", "true", ",", "'message'", "=>", "trans", "(", "'syntara::permissions.messages.remove-success'", ")", ",", "'messageType'", "=>", "'success'", ")", ")", ";", "}"], "docstring": "Delete a permission", "docstring_tokens": ["Delete", "a", "permission"], "sha": "4d8c33aea1908ac404e0e00e09d5d1e2119e9039", "url": "https://github.com/MrJuliuss/syntara/blob/4d8c33aea1908ac404e0e00e09d5d1e2119e9039/src/controllers/PermissionController.php#L139-L149", "partition": "test"}
{"repo": "quantaphp/printable", "path": "src/Printable.php", "func_name": "Printable.withStringLimit", "original_string": "public function withStringLimit(int $strlim): Printable\n    {\n        return new Printable($this->value, $this->callable, $strlim, $this->arrlim);\n    }", "language": "php", "code": "public function withStringLimit(int $strlim): Printable\n    {\n        return new Printable($this->value, $this->callable, $strlim, $this->arrlim);\n    }", "code_tokens": ["public", "function", "withStringLimit", "(", "int", "$", "strlim", ")", ":", "Printable", "{", "return", "new", "Printable", "(", "$", "this", "->", "value", ",", "$", "this", "->", "callable", ",", "$", "strlim", ",", "$", "this", "->", "arrlim", ")", ";", "}"], "docstring": "Return a new Printable with the given string limit.\n\n@param int $strlim\n@return \\Quanta\\Printable", "docstring_tokens": ["Return", "a", "new", "Printable", "with", "the", "given", "string", "limit", "."], "sha": "4799d0c475468d90aa724b8ece057cc7ee0ff326", "url": "https://github.com/quantaphp/printable/blob/4799d0c475468d90aa724b8ece057cc7ee0ff326/src/Printable.php#L57-L60", "partition": "test"}
{"repo": "activecollab/databaseobject", "path": "src/Validator.php", "func_name": "Validator.compareValues", "original_string": "protected function compareValues($field_name, $reference_value, $allow_null, callable $compare_with, $validation_failed_message)\n    {\n        if (empty($field_name)) {\n            throw new InvalidArgumentException(\"Value '$field_name' is not a valid field name\");\n        }\n\n        if (array_key_exists($field_name, $this->field_values)) {\n            if ($this->field_values[$field_name] === null) {\n                if ($allow_null) {\n                    return true;\n                } else {\n                    return $this->failPresenceValidation($field_name);\n                }\n            }\n\n            if (call_user_func($compare_with, $this->field_values[$field_name], $reference_value)) {\n                return true;\n            } else {\n                $this->addFieldError($field_name, $validation_failed_message);\n\n                return false;\n            }\n        } else {\n            return $this->failPresenceValidation($field_name);\n        }\n    }", "language": "php", "code": "protected function compareValues($field_name, $reference_value, $allow_null, callable $compare_with, $validation_failed_message)\n    {\n        if (empty($field_name)) {\n            throw new InvalidArgumentException(\"Value '$field_name' is not a valid field name\");\n        }\n\n        if (array_key_exists($field_name, $this->field_values)) {\n            if ($this->field_values[$field_name] === null) {\n                if ($allow_null) {\n                    return true;\n                } else {\n                    return $this->failPresenceValidation($field_name);\n                }\n            }\n\n            if (call_user_func($compare_with, $this->field_values[$field_name], $reference_value)) {\n                return true;\n            } else {\n                $this->addFieldError($field_name, $validation_failed_message);\n\n                return false;\n            }\n        } else {\n            return $this->failPresenceValidation($field_name);\n        }\n    }", "code_tokens": ["protected", "function", "compareValues", "(", "$", "field_name", ",", "$", "reference_value", ",", "$", "allow_null", ",", "callable", "$", "compare_with", ",", "$", "validation_failed_message", ")", "{", "if", "(", "empty", "(", "$", "field_name", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "\"Value '$field_name' is not a valid field name\"", ")", ";", "}", "if", "(", "array_key_exists", "(", "$", "field_name", ",", "$", "this", "->", "field_values", ")", ")", "{", "if", "(", "$", "this", "->", "field_values", "[", "$", "field_name", "]", "===", "null", ")", "{", "if", "(", "$", "allow_null", ")", "{", "return", "true", ";", "}", "else", "{", "return", "$", "this", "->", "failPresenceValidation", "(", "$", "field_name", ")", ";", "}", "}", "if", "(", "call_user_func", "(", "$", "compare_with", ",", "$", "this", "->", "field_values", "[", "$", "field_name", "]", ",", "$", "reference_value", ")", ")", "{", "return", "true", ";", "}", "else", "{", "$", "this", "->", "addFieldError", "(", "$", "field_name", ",", "$", "validation_failed_message", ")", ";", "return", "false", ";", "}", "}", "else", "{", "return", "$", "this", "->", "failPresenceValidation", "(", "$", "field_name", ")", ";", "}", "}"], "docstring": "Validate field value by comparing it to a reference value using a closure.\n\n@param  string   $field_name\n@param  mixed    $reference_value\n@param  bool     $allow_null\n@param  callable $compare_with\n@param  string   $validation_failed_message\n@return bool", "docstring_tokens": ["Validate", "field", "value", "by", "comparing", "it", "to", "a", "reference", "value", "using", "a", "closure", "."], "sha": "93ebbc26fdcd82e8effa15fea46432dafbfa5e83", "url": "https://github.com/activecollab/databaseobject/blob/93ebbc26fdcd82e8effa15fea46432dafbfa5e83/src/Validator.php#L163-L188", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Parser/Parser/PoParser.php", "func_name": "PoParser.convertString", "original_string": "private static function convertString(string $value): string\n    {\n        if ($value === '') {\n            return '';\n        }\n\n        if ($value[0] === '\"') {\n            $value = \\mb_substr($value, 1, -1);\n        }\n\n        return \\strtr(\n            $value,\n            [\n                '\\\\\\\\' => '\\\\',\n                '\\\\a'  => \"\\x07\",\n                '\\\\b'  => \"\\x08\",\n                '\\\\t'  => \"\\t\",\n                '\\\\n'  => \"\\n\",\n                '\\\\v'  => \"\\x0b\",\n                '\\\\f'  => \"\\x0c\",\n                '\\\\r'  => \"\\r\",\n                '\\\\\"'  => '\"',\n            ]\n        );\n    }", "language": "php", "code": "private static function convertString(string $value): string\n    {\n        if ($value === '') {\n            return '';\n        }\n\n        if ($value[0] === '\"') {\n            $value = \\mb_substr($value, 1, -1);\n        }\n\n        return \\strtr(\n            $value,\n            [\n                '\\\\\\\\' => '\\\\',\n                '\\\\a'  => \"\\x07\",\n                '\\\\b'  => \"\\x08\",\n                '\\\\t'  => \"\\t\",\n                '\\\\n'  => \"\\n\",\n                '\\\\v'  => \"\\x0b\",\n                '\\\\f'  => \"\\x0c\",\n                '\\\\r'  => \"\\r\",\n                '\\\\\"'  => '\"',\n            ]\n        );\n    }", "code_tokens": ["private", "static", "function", "convertString", "(", "string", "$", "value", ")", ":", "string", "{", "if", "(", "$", "value", "===", "''", ")", "{", "return", "''", ";", "}", "if", "(", "$", "value", "[", "0", "]", "===", "'\"'", ")", "{", "$", "value", "=", "\\", "mb_substr", "(", "$", "value", ",", "1", ",", "-", "1", ")", ";", "}", "return", "\\", "strtr", "(", "$", "value", ",", "[", "'\\\\\\\\'", "=>", "'\\\\'", ",", "'\\\\a'", "=>", "\"\\x07\"", ",", "'\\\\b'", "=>", "\"\\x08\"", ",", "'\\\\t'", "=>", "\"\\t\"", ",", "'\\\\n'", "=>", "\"\\n\"", ",", "'\\\\v'", "=>", "\"\\x0b\"", ",", "'\\\\f'", "=>", "\"\\x0c\"", ",", "'\\\\r'", "=>", "\"\\r\"", ",", "'\\\\\"'", "=>", "'\"'", ",", "]", ")", ";", "}"], "docstring": "Convert a string from its PO representation.\n\n@param string $value\n\n@return string", "docstring_tokens": ["Convert", "a", "string", "from", "its", "PO", "representation", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Parser/Parser/PoParser.php#L197-L221", "partition": "test"}
{"repo": "evispa/object-migration", "path": "src/Evispa/ObjectMigration/VersionReader.php", "func_name": "VersionReader.getClassVersion", "original_string": "public function getClassVersion($className)\r\n    {\r\n        if (isset($this->classVersions[$className])) {\r\n            return $this->classVersions[$className];\r\n        }\r\n\r\n        $class = $this->getReflectionClass($className);\r\n\r\n        $versionAnnotation = $this->reader->getClassAnnotation(\r\n            $class,\r\n            'Evispa\\ObjectMigration\\Annotations\\Version'\r\n        );\r\n\r\n        if (null === $versionAnnotation) {\r\n            throw new Exception\\NotVersionedException($className);\r\n        }\r\n\r\n        $version = $versionAnnotation->version;\r\n\r\n        $this->classVersions[$className] = $version;\r\n\r\n        return $version;\r\n    }", "language": "php", "code": "public function getClassVersion($className)\r\n    {\r\n        if (isset($this->classVersions[$className])) {\r\n            return $this->classVersions[$className];\r\n        }\r\n\r\n        $class = $this->getReflectionClass($className);\r\n\r\n        $versionAnnotation = $this->reader->getClassAnnotation(\r\n            $class,\r\n            'Evispa\\ObjectMigration\\Annotations\\Version'\r\n        );\r\n\r\n        if (null === $versionAnnotation) {\r\n            throw new Exception\\NotVersionedException($className);\r\n        }\r\n\r\n        $version = $versionAnnotation->version;\r\n\r\n        $this->classVersions[$className] = $version;\r\n\r\n        return $version;\r\n    }", "code_tokens": ["public", "function", "getClassVersion", "(", "$", "className", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "classVersions", "[", "$", "className", "]", ")", ")", "{", "return", "$", "this", "->", "classVersions", "[", "$", "className", "]", ";", "}", "$", "class", "=", "$", "this", "->", "getReflectionClass", "(", "$", "className", ")", ";", "$", "versionAnnotation", "=", "$", "this", "->", "reader", "->", "getClassAnnotation", "(", "$", "class", ",", "'Evispa\\ObjectMigration\\Annotations\\Version'", ")", ";", "if", "(", "null", "===", "$", "versionAnnotation", ")", "{", "throw", "new", "Exception", "\\", "NotVersionedException", "(", "$", "className", ")", ";", "}", "$", "version", "=", "$", "versionAnnotation", "->", "version", ";", "$", "this", "->", "classVersions", "[", "$", "className", "]", "=", "$", "version", ";", "return", "$", "version", ";", "}"], "docstring": "Get class version annotation for a class name.\n\n@param string $className Full class name.\n\n@return string\n\n@throws Exception\\NotVersionedException If object is not versioned.", "docstring_tokens": ["Get", "class", "version", "annotation", "for", "a", "class", "name", "."], "sha": "6fd2f50d24dbfc329464b52debea7b41470047b9", "url": "https://github.com/evispa/object-migration/blob/6fd2f50d24dbfc329464b52debea7b41470047b9/src/Evispa/ObjectMigration/VersionReader.php#L80-L102", "partition": "test"}
{"repo": "didww/php-sdk", "path": "src/Didww/API2/Order.php", "func_name": "Order.toArray", "original_string": "public function toArray($options = array())\n    {\n\n        $includeNumber = true;\n        if (isset($options['includeNumber'])) {\n            $includeNumber = (bool)$options['includeNumber'];\n            unset($options['includeNumber']);\n        }\n\n        return array_merge(parent::toArray($options), $includeNumber ? $this->_ensureNumber()->toArray() : array());\n    }", "language": "php", "code": "public function toArray($options = array())\n    {\n\n        $includeNumber = true;\n        if (isset($options['includeNumber'])) {\n            $includeNumber = (bool)$options['includeNumber'];\n            unset($options['includeNumber']);\n        }\n\n        return array_merge(parent::toArray($options), $includeNumber ? $this->_ensureNumber()->toArray() : array());\n    }", "code_tokens": ["public", "function", "toArray", "(", "$", "options", "=", "array", "(", ")", ")", "{", "$", "includeNumber", "=", "true", ";", "if", "(", "isset", "(", "$", "options", "[", "'includeNumber'", "]", ")", ")", "{", "$", "includeNumber", "=", "(", "bool", ")", "$", "options", "[", "'includeNumber'", "]", ";", "unset", "(", "$", "options", "[", "'includeNumber'", "]", ")", ";", "}", "return", "array_merge", "(", "parent", "::", "toArray", "(", "$", "options", ")", ",", "$", "includeNumber", "?", "$", "this", "->", "_ensureNumber", "(", ")", "->", "toArray", "(", ")", ":", "array", "(", ")", ")", ";", "}"], "docstring": "get object state as array\n@see parent::toArray()\n@param array $options\n@return array", "docstring_tokens": ["get", "object", "state", "as", "array"], "sha": "ee406862bceeb67bc6796f52f2bd60e103cd8de3", "url": "https://github.com/didww/php-sdk/blob/ee406862bceeb67bc6796f52f2bd60e103cd8de3/src/Didww/API2/Order.php#L309-L319", "partition": "test"}
{"repo": "shumkov/rediska", "path": "examples/retwitter/application/controllers/PostController.php", "func_name": "PostController.newAction", "original_string": "public function newAction()\n    {\n        $currentUser = Zend_Auth::getInstance()->getStorage()->read();\n        \n        $form = new Form_Post;\n        \n        if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {\n            \n            $postData = $form->getValues();\n            $postData['id'] = Post::fetchNextId();\n            $postData['userId'] = $currentUser['id'];\n            \n            // save post\n            $post = new Post($postData['id']);\n            $post->setValue($postData);\n            \n            $userPosts = new UserPosts($currentUser['id']);\n            $userPosts->add($postData['id']);\n            \n            // save post in the follower feeds\n            $followers = new Followers($currentUser['id']);\n            foreach ($followers as $followerId) {\n                $feed = new Feed($followerId);\n                $feed->prepend($postData['id']);\n            }\n            \n            $this->_redirect('/post/my');\n        }\n        \n        $this->view->form = $form;\n    }", "language": "php", "code": "public function newAction()\n    {\n        $currentUser = Zend_Auth::getInstance()->getStorage()->read();\n        \n        $form = new Form_Post;\n        \n        if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {\n            \n            $postData = $form->getValues();\n            $postData['id'] = Post::fetchNextId();\n            $postData['userId'] = $currentUser['id'];\n            \n            // save post\n            $post = new Post($postData['id']);\n            $post->setValue($postData);\n            \n            $userPosts = new UserPosts($currentUser['id']);\n            $userPosts->add($postData['id']);\n            \n            // save post in the follower feeds\n            $followers = new Followers($currentUser['id']);\n            foreach ($followers as $followerId) {\n                $feed = new Feed($followerId);\n                $feed->prepend($postData['id']);\n            }\n            \n            $this->_redirect('/post/my');\n        }\n        \n        $this->view->form = $form;\n    }", "code_tokens": ["public", "function", "newAction", "(", ")", "{", "$", "currentUser", "=", "Zend_Auth", "::", "getInstance", "(", ")", "->", "getStorage", "(", ")", "->", "read", "(", ")", ";", "$", "form", "=", "new", "Form_Post", ";", "if", "(", "$", "this", "->", "getRequest", "(", ")", "->", "isPost", "(", ")", "&&", "$", "form", "->", "isValid", "(", "$", "this", "->", "getRequest", "(", ")", "->", "getPost", "(", ")", ")", ")", "{", "$", "postData", "=", "$", "form", "->", "getValues", "(", ")", ";", "$", "postData", "[", "'id'", "]", "=", "Post", "::", "fetchNextId", "(", ")", ";", "$", "postData", "[", "'userId'", "]", "=", "$", "currentUser", "[", "'id'", "]", ";", "// save post", "$", "post", "=", "new", "Post", "(", "$", "postData", "[", "'id'", "]", ")", ";", "$", "post", "->", "setValue", "(", "$", "postData", ")", ";", "$", "userPosts", "=", "new", "UserPosts", "(", "$", "currentUser", "[", "'id'", "]", ")", ";", "$", "userPosts", "->", "add", "(", "$", "postData", "[", "'id'", "]", ")", ";", "// save post in the follower feeds", "$", "followers", "=", "new", "Followers", "(", "$", "currentUser", "[", "'id'", "]", ")", ";", "foreach", "(", "$", "followers", "as", "$", "followerId", ")", "{", "$", "feed", "=", "new", "Feed", "(", "$", "followerId", ")", ";", "$", "feed", "->", "prepend", "(", "$", "postData", "[", "'id'", "]", ")", ";", "}", "$", "this", "->", "_redirect", "(", "'/post/my'", ")", ";", "}", "$", "this", "->", "view", "->", "form", "=", "$", "form", ";", "}"], "docstring": "Create new post", "docstring_tokens": ["Create", "new", "post"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/examples/retwitter/application/controllers/PostController.php#L18-L48", "partition": "test"}
{"repo": "diatem-net/jin-utils", "path": "src/Utils/ColorTools.php", "func_name": "ColorTools.toHex", "original_string": "public static function toHex($color)\r\n  {\r\n    // Check it it's a RGB color\r\n    if (is_array($color)) {\r\n      if ((count($color) == 3 && array_keys($color) === range(0, 2))\r\n       || (count($color) == 4 && array_keys($color) === range(0, 3))) {\r\n        $red = $color[0];\r\n        $green = $color[1];\r\n        $blue = $color[2];\r\n      } else {\r\n        $red = isset($color['red']) ?: (isset($color['r']) ?: 0);\r\n        $red = isset($color['red'])\r\n          ? $color['red']\r\n          : (isset($color['r']) ? $color['r'] : 0);\r\n        $green = isset($color['green'])\r\n          ? $color['green']\r\n          : (isset($color['g']) ? $color['g'] : 0);\r\n        $blue = isset($color['blue'])\r\n          ? $color['blue']\r\n          : (isset($color['b']) ? $color['b'] : 0);\r\n      }\r\n      return '#'\r\n        .substr('00' . dechex($red), -2)\r\n        .substr('00' . dechex($green), -2)\r\n        .substr('00' . dechex($blue), -2);\r\n    }\r\n    if (is_string($color)) {\r\n      $color = strtolower($color);\r\n      // Check if it's a X11 color\r\n      if (array_key_exists($color, self::$x11) !== false) {\r\n        return static::toHex(self::$x11[$color]);\r\n      }\r\n      // Check if it's an 3-hexadecimal color\r\n      if (preg_match('/^#[\\da-f]{3}$/i', $color)) {\r\n        $color = preg_replace('/([\\da-f])/i', '$1$1', $color);\r\n      }\r\n      if (preg_match('/^#[\\da-f]{6}$/i', $color)) {\r\n        return $color;\r\n      }\r\n    }\r\n    return '#000000';\r\n  }", "language": "php", "code": "public static function toHex($color)\r\n  {\r\n    // Check it it's a RGB color\r\n    if (is_array($color)) {\r\n      if ((count($color) == 3 && array_keys($color) === range(0, 2))\r\n       || (count($color) == 4 && array_keys($color) === range(0, 3))) {\r\n        $red = $color[0];\r\n        $green = $color[1];\r\n        $blue = $color[2];\r\n      } else {\r\n        $red = isset($color['red']) ?: (isset($color['r']) ?: 0);\r\n        $red = isset($color['red'])\r\n          ? $color['red']\r\n          : (isset($color['r']) ? $color['r'] : 0);\r\n        $green = isset($color['green'])\r\n          ? $color['green']\r\n          : (isset($color['g']) ? $color['g'] : 0);\r\n        $blue = isset($color['blue'])\r\n          ? $color['blue']\r\n          : (isset($color['b']) ? $color['b'] : 0);\r\n      }\r\n      return '#'\r\n        .substr('00' . dechex($red), -2)\r\n        .substr('00' . dechex($green), -2)\r\n        .substr('00' . dechex($blue), -2);\r\n    }\r\n    if (is_string($color)) {\r\n      $color = strtolower($color);\r\n      // Check if it's a X11 color\r\n      if (array_key_exists($color, self::$x11) !== false) {\r\n        return static::toHex(self::$x11[$color]);\r\n      }\r\n      // Check if it's an 3-hexadecimal color\r\n      if (preg_match('/^#[\\da-f]{3}$/i', $color)) {\r\n        $color = preg_replace('/([\\da-f])/i', '$1$1', $color);\r\n      }\r\n      if (preg_match('/^#[\\da-f]{6}$/i', $color)) {\r\n        return $color;\r\n      }\r\n    }\r\n    return '#000000';\r\n  }", "code_tokens": ["public", "static", "function", "toHex", "(", "$", "color", ")", "{", "// Check it it's a RGB color\r", "if", "(", "is_array", "(", "$", "color", ")", ")", "{", "if", "(", "(", "count", "(", "$", "color", ")", "==", "3", "&&", "array_keys", "(", "$", "color", ")", "===", "range", "(", "0", ",", "2", ")", ")", "||", "(", "count", "(", "$", "color", ")", "==", "4", "&&", "array_keys", "(", "$", "color", ")", "===", "range", "(", "0", ",", "3", ")", ")", ")", "{", "$", "red", "=", "$", "color", "[", "0", "]", ";", "$", "green", "=", "$", "color", "[", "1", "]", ";", "$", "blue", "=", "$", "color", "[", "2", "]", ";", "}", "else", "{", "$", "red", "=", "isset", "(", "$", "color", "[", "'red'", "]", ")", "?", ":", "(", "isset", "(", "$", "color", "[", "'r'", "]", ")", "?", ":", "0", ")", ";", "$", "red", "=", "isset", "(", "$", "color", "[", "'red'", "]", ")", "?", "$", "color", "[", "'red'", "]", ":", "(", "isset", "(", "$", "color", "[", "'r'", "]", ")", "?", "$", "color", "[", "'r'", "]", ":", "0", ")", ";", "$", "green", "=", "isset", "(", "$", "color", "[", "'green'", "]", ")", "?", "$", "color", "[", "'green'", "]", ":", "(", "isset", "(", "$", "color", "[", "'g'", "]", ")", "?", "$", "color", "[", "'g'", "]", ":", "0", ")", ";", "$", "blue", "=", "isset", "(", "$", "color", "[", "'blue'", "]", ")", "?", "$", "color", "[", "'blue'", "]", ":", "(", "isset", "(", "$", "color", "[", "'b'", "]", ")", "?", "$", "color", "[", "'b'", "]", ":", "0", ")", ";", "}", "return", "'#'", ".", "substr", "(", "'00'", ".", "dechex", "(", "$", "red", ")", ",", "-", "2", ")", ".", "substr", "(", "'00'", ".", "dechex", "(", "$", "green", ")", ",", "-", "2", ")", ".", "substr", "(", "'00'", ".", "dechex", "(", "$", "blue", ")", ",", "-", "2", ")", ";", "}", "if", "(", "is_string", "(", "$", "color", ")", ")", "{", "$", "color", "=", "strtolower", "(", "$", "color", ")", ";", "// Check if it's a X11 color\r", "if", "(", "array_key_exists", "(", "$", "color", ",", "self", "::", "$", "x11", ")", "!==", "false", ")", "{", "return", "static", "::", "toHex", "(", "self", "::", "$", "x11", "[", "$", "color", "]", ")", ";", "}", "// Check if it's an 3-hexadecimal color\r", "if", "(", "preg_match", "(", "'/^#[\\da-f]{3}$/i'", ",", "$", "color", ")", ")", "{", "$", "color", "=", "preg_replace", "(", "'/([\\da-f])/i'", ",", "'$1$1'", ",", "$", "color", ")", ";", "}", "if", "(", "preg_match", "(", "'/^#[\\da-f]{6}$/i'", ",", "$", "color", ")", ")", "{", "return", "$", "color", ";", "}", "}", "return", "'#000000'", ";", "}"], "docstring": "Change a color format to hexadecimal\n\n@param  mixed $color Color\n@return array        An 6-hexadecimal color prefixed by an hash", "docstring_tokens": ["Change", "a", "color", "format", "to", "hexadecimal"], "sha": "3989cc39f1999eb6c9fabc5ff97cb433ff257e4a", "url": "https://github.com/diatem-net/jin-utils/blob/3989cc39f1999eb6c9fabc5ff97cb433ff257e4a/src/Utils/ColorTools.php#L169-L210", "partition": "test"}
{"repo": "wp-cli/i18n-command", "path": "src/JsFunctionsScanner.php", "func_name": "JsFunctionsScanner.resolveExpressionCallee", "original_string": "private function resolveExpressionCallee( Node\\CallExpression $node ) {\n\t\t$callee = $node->getCallee();\n\n\t\t// If the callee is a simple identifier it can simply be returned.\n\t\t// For example: __( \"translation\" ).\n\t\tif ( 'Identifier' === $callee->getType() ) {\n\t\t\treturn [\n\t\t\t\t'name'     => $callee->getName(),\n\t\t\t\t'comments' => $callee->getLeadingComments(),\n\t\t\t];\n\t\t}\n\n\t\t// If the callee is a member expression resolve it to the property.\n\t\t// For example: wp.i18n.__( \"translation\" ) or u.__( \"translation\" ).\n\t\tif (\n\t\t\t'MemberExpression' === $callee->getType() &&\n\t\t\t'Identifier' === $callee->getProperty()->getType()\n\t\t) {\n\t\t\t// Make sure to unpack wp.i18n which is a nested MemberExpression.\n\t\t\t$comments = 'MemberExpression' === $callee->getObject()->getType()\n\t\t\t\t? $callee->getObject()->getObject()->getLeadingComments()\n\t\t\t\t: $callee->getObject()->getLeadingComments();\n\n\t\t\treturn [\n\t\t\t\t'name'     => $callee->getProperty()->getName(),\n\t\t\t\t'comments' => $comments,\n\t\t\t];\n\t\t}\n\n\t\t// If the callee is a call expression as created by Webpack resolve it.\n\t\t// For example: Object(u.__)( \"translation\" ).\n\t\tif (\n\t\t\t'CallExpression' === $callee->getType() &&\n\t\t\t'Identifier' === $callee->getCallee()->getType() &&\n\t\t\t'Object' === $callee->getCallee()->getName() &&\n\t\t\t[] !== $callee->getArguments() &&\n\t\t\t'MemberExpression' === $callee->getArguments()[0]->getType()\n\t\t) {\n\t\t\t$property = $callee->getArguments()[0]->getProperty();\n\n\t\t\t// Matches minified webpack statements: Object(u.__)( \"translation\" ).\n\t\t\tif ( 'Identifier' === $property->getType() ) {\n\t\t\t\treturn [\n\t\t\t\t\t'name'     => $property->getName(),\n\t\t\t\t\t'comments' => $callee->getCallee()->getLeadingComments(),\n\t\t\t\t];\n\t\t\t}\n\n\t\t\t// Matches unminified webpack statements:\n\t\t\t// Object(_wordpress_i18n__WEBPACK_IMPORTED_MODULE_7__[\"__\"])( \"translation\" );\n\t\t\tif ( 'Literal' === $property->getType() ) {\n\t\t\t\treturn [\n\t\t\t\t\t'name'     => $property->getValue(),\n\t\t\t\t\t'comments' => $callee->getCallee()->getLeadingComments(),\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\t// Unknown format.\n\t\treturn false;\n\t}", "language": "php", "code": "private function resolveExpressionCallee( Node\\CallExpression $node ) {\n\t\t$callee = $node->getCallee();\n\n\t\t// If the callee is a simple identifier it can simply be returned.\n\t\t// For example: __( \"translation\" ).\n\t\tif ( 'Identifier' === $callee->getType() ) {\n\t\t\treturn [\n\t\t\t\t'name'     => $callee->getName(),\n\t\t\t\t'comments' => $callee->getLeadingComments(),\n\t\t\t];\n\t\t}\n\n\t\t// If the callee is a member expression resolve it to the property.\n\t\t// For example: wp.i18n.__( \"translation\" ) or u.__( \"translation\" ).\n\t\tif (\n\t\t\t'MemberExpression' === $callee->getType() &&\n\t\t\t'Identifier' === $callee->getProperty()->getType()\n\t\t) {\n\t\t\t// Make sure to unpack wp.i18n which is a nested MemberExpression.\n\t\t\t$comments = 'MemberExpression' === $callee->getObject()->getType()\n\t\t\t\t? $callee->getObject()->getObject()->getLeadingComments()\n\t\t\t\t: $callee->getObject()->getLeadingComments();\n\n\t\t\treturn [\n\t\t\t\t'name'     => $callee->getProperty()->getName(),\n\t\t\t\t'comments' => $comments,\n\t\t\t];\n\t\t}\n\n\t\t// If the callee is a call expression as created by Webpack resolve it.\n\t\t// For example: Object(u.__)( \"translation\" ).\n\t\tif (\n\t\t\t'CallExpression' === $callee->getType() &&\n\t\t\t'Identifier' === $callee->getCallee()->getType() &&\n\t\t\t'Object' === $callee->getCallee()->getName() &&\n\t\t\t[] !== $callee->getArguments() &&\n\t\t\t'MemberExpression' === $callee->getArguments()[0]->getType()\n\t\t) {\n\t\t\t$property = $callee->getArguments()[0]->getProperty();\n\n\t\t\t// Matches minified webpack statements: Object(u.__)( \"translation\" ).\n\t\t\tif ( 'Identifier' === $property->getType() ) {\n\t\t\t\treturn [\n\t\t\t\t\t'name'     => $property->getName(),\n\t\t\t\t\t'comments' => $callee->getCallee()->getLeadingComments(),\n\t\t\t\t];\n\t\t\t}\n\n\t\t\t// Matches unminified webpack statements:\n\t\t\t// Object(_wordpress_i18n__WEBPACK_IMPORTED_MODULE_7__[\"__\"])( \"translation\" );\n\t\t\tif ( 'Literal' === $property->getType() ) {\n\t\t\t\treturn [\n\t\t\t\t\t'name'     => $property->getValue(),\n\t\t\t\t\t'comments' => $callee->getCallee()->getLeadingComments(),\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\t// Unknown format.\n\t\treturn false;\n\t}", "code_tokens": ["private", "function", "resolveExpressionCallee", "(", "Node", "\\", "CallExpression", "$", "node", ")", "{", "$", "callee", "=", "$", "node", "->", "getCallee", "(", ")", ";", "// If the callee is a simple identifier it can simply be returned.", "// For example: __( \"translation\" ).", "if", "(", "'Identifier'", "===", "$", "callee", "->", "getType", "(", ")", ")", "{", "return", "[", "'name'", "=>", "$", "callee", "->", "getName", "(", ")", ",", "'comments'", "=>", "$", "callee", "->", "getLeadingComments", "(", ")", ",", "]", ";", "}", "// If the callee is a member expression resolve it to the property.", "// For example: wp.i18n.__( \"translation\" ) or u.__( \"translation\" ).", "if", "(", "'MemberExpression'", "===", "$", "callee", "->", "getType", "(", ")", "&&", "'Identifier'", "===", "$", "callee", "->", "getProperty", "(", ")", "->", "getType", "(", ")", ")", "{", "// Make sure to unpack wp.i18n which is a nested MemberExpression.", "$", "comments", "=", "'MemberExpression'", "===", "$", "callee", "->", "getObject", "(", ")", "->", "getType", "(", ")", "?", "$", "callee", "->", "getObject", "(", ")", "->", "getObject", "(", ")", "->", "getLeadingComments", "(", ")", ":", "$", "callee", "->", "getObject", "(", ")", "->", "getLeadingComments", "(", ")", ";", "return", "[", "'name'", "=>", "$", "callee", "->", "getProperty", "(", ")", "->", "getName", "(", ")", ",", "'comments'", "=>", "$", "comments", ",", "]", ";", "}", "// If the callee is a call expression as created by Webpack resolve it.", "// For example: Object(u.__)( \"translation\" ).", "if", "(", "'CallExpression'", "===", "$", "callee", "->", "getType", "(", ")", "&&", "'Identifier'", "===", "$", "callee", "->", "getCallee", "(", ")", "->", "getType", "(", ")", "&&", "'Object'", "===", "$", "callee", "->", "getCallee", "(", ")", "->", "getName", "(", ")", "&&", "[", "]", "!==", "$", "callee", "->", "getArguments", "(", ")", "&&", "'MemberExpression'", "===", "$", "callee", "->", "getArguments", "(", ")", "[", "0", "]", "->", "getType", "(", ")", ")", "{", "$", "property", "=", "$", "callee", "->", "getArguments", "(", ")", "[", "0", "]", "->", "getProperty", "(", ")", ";", "// Matches minified webpack statements: Object(u.__)( \"translation\" ).", "if", "(", "'Identifier'", "===", "$", "property", "->", "getType", "(", ")", ")", "{", "return", "[", "'name'", "=>", "$", "property", "->", "getName", "(", ")", ",", "'comments'", "=>", "$", "callee", "->", "getCallee", "(", ")", "->", "getLeadingComments", "(", ")", ",", "]", ";", "}", "// Matches unminified webpack statements:", "// Object(_wordpress_i18n__WEBPACK_IMPORTED_MODULE_7__[\"__\"])( \"translation\" );", "if", "(", "'Literal'", "===", "$", "property", "->", "getType", "(", ")", ")", "{", "return", "[", "'name'", "=>", "$", "property", "->", "getValue", "(", ")", ",", "'comments'", "=>", "$", "callee", "->", "getCallee", "(", ")", "->", "getLeadingComments", "(", ")", ",", "]", ";", "}", "}", "// Unknown format.", "return", "false", ";", "}"], "docstring": "Resolve the callee of a call expression using known formats.\n\n@param Node\\CallExpression $node The call expression whose callee to resolve.\n\n@return array|bool Array containing the name and comments of the identifier if resolved. False if not.", "docstring_tokens": ["Resolve", "the", "callee", "of", "a", "call", "expression", "using", "known", "formats", "."], "sha": "e52a9a602772339a0f844bd5e9a9ac8cc8b490ea", "url": "https://github.com/wp-cli/i18n-command/blob/e52a9a602772339a0f844bd5e9a9ac8cc8b490ea/src/JsFunctionsScanner.php#L167-L227", "partition": "test"}
{"repo": "TYPO3-Console/TYPO3-Console", "path": "Classes/Console/Mvc/Cli/ConsoleOutput.php", "func_name": "ConsoleOutput.askConfirmation", "original_string": "public function askConfirmation($question, $default = true)\n    {\n        $question = new ConfirmationQuestion($question, $default);\n\n        return $this->getQuestionHelper()->ask($this->getInput(), $this->output, $question);\n    }", "language": "php", "code": "public function askConfirmation($question, $default = true)\n    {\n        $question = new ConfirmationQuestion($question, $default);\n\n        return $this->getQuestionHelper()->ask($this->getInput(), $this->output, $question);\n    }", "code_tokens": ["public", "function", "askConfirmation", "(", "$", "question", ",", "$", "default", "=", "true", ")", "{", "$", "question", "=", "new", "ConfirmationQuestion", "(", "$", "question", ",", "$", "default", ")", ";", "return", "$", "this", "->", "getQuestionHelper", "(", ")", "->", "ask", "(", "$", "this", "->", "getInput", "(", ")", ",", "$", "this", "->", "output", ",", "$", "question", ")", ";", "}"], "docstring": "Asks a confirmation to the user.\n\nThe question will be asked until the user answers by nothing, yes, or no.\n\n@param string|array $question The question to ask. If an array each array item is turned into one line of a multi-line question\n@param bool $default The default answer if the user enters nothing\n@return bool true if the user has confirmed, false otherwise", "docstring_tokens": ["Asks", "a", "confirmation", "to", "the", "user", "."], "sha": "a8983d65aa5e2b7495082059cd72b6403b14abfd", "url": "https://github.com/TYPO3-Console/TYPO3-Console/blob/a8983d65aa5e2b7495082059cd72b6403b14abfd/Classes/Console/Mvc/Cli/ConsoleOutput.php#L239-L244", "partition": "test"}
{"repo": "lifo101/php-ipc", "path": "src/Lifo/IPC/ProcessPool.php", "func_name": "ProcessPool.socket_fetch", "original_string": "public static function socket_fetch($socket)\n    {\n        // read 4 byte length first\n        $hdr = '';\n        do {\n            $read = socket_read($socket, 4 - strlen($hdr));\n            if ($read === false or $read === '') {\n                return null;\n            }\n            $hdr .= $read;\n        } while (strlen($hdr) < 4);\n\n        list($len) = array_values(unpack(\"N\", $hdr));\n\n        // read the full buffer\n        $buffer = '';\n        do {\n            $read = socket_read($socket, $len - strlen($buffer));\n            if ($read === false or $read == '') {\n                return null;\n            }\n            $buffer .= $read;\n        } while (strlen($buffer) < $len);\n\n        $data = unserialize($buffer);\n        return $data;\n    }", "language": "php", "code": "public static function socket_fetch($socket)\n    {\n        // read 4 byte length first\n        $hdr = '';\n        do {\n            $read = socket_read($socket, 4 - strlen($hdr));\n            if ($read === false or $read === '') {\n                return null;\n            }\n            $hdr .= $read;\n        } while (strlen($hdr) < 4);\n\n        list($len) = array_values(unpack(\"N\", $hdr));\n\n        // read the full buffer\n        $buffer = '';\n        do {\n            $read = socket_read($socket, $len - strlen($buffer));\n            if ($read === false or $read == '') {\n                return null;\n            }\n            $buffer .= $read;\n        } while (strlen($buffer) < $len);\n\n        $data = unserialize($buffer);\n        return $data;\n    }", "code_tokens": ["public", "static", "function", "socket_fetch", "(", "$", "socket", ")", "{", "// read 4 byte length first", "$", "hdr", "=", "''", ";", "do", "{", "$", "read", "=", "socket_read", "(", "$", "socket", ",", "4", "-", "strlen", "(", "$", "hdr", ")", ")", ";", "if", "(", "$", "read", "===", "false", "or", "$", "read", "===", "''", ")", "{", "return", "null", ";", "}", "$", "hdr", ".=", "$", "read", ";", "}", "while", "(", "strlen", "(", "$", "hdr", ")", "<", "4", ")", ";", "list", "(", "$", "len", ")", "=", "array_values", "(", "unpack", "(", "\"N\"", ",", "$", "hdr", ")", ")", ";", "// read the full buffer", "$", "buffer", "=", "''", ";", "do", "{", "$", "read", "=", "socket_read", "(", "$", "socket", ",", "$", "len", "-", "strlen", "(", "$", "buffer", ")", ")", ";", "if", "(", "$", "read", "===", "false", "or", "$", "read", "==", "''", ")", "{", "return", "null", ";", "}", "$", "buffer", ".=", "$", "read", ";", "}", "while", "(", "strlen", "(", "$", "buffer", ")", "<", "$", "len", ")", ";", "$", "data", "=", "unserialize", "(", "$", "buffer", ")", ";", "return", "$", "data", ";", "}"], "docstring": "Read a data packet from the socket in a predetermined format.\n\nBlocking.", "docstring_tokens": ["Read", "a", "data", "packet", "from", "the", "socket", "in", "a", "predetermined", "format", "."], "sha": "6ae12fab44c19a6b150af559e76b7623a845c0fd", "url": "https://github.com/lifo101/php-ipc/blob/6ae12fab44c19a6b150af559e76b7623a845c0fd/src/Lifo/IPC/ProcessPool.php#L545-L571", "partition": "test"}
{"repo": "ingpsp/ing-php", "path": "src/Client.php", "func_name": "Client.createOrder", "original_string": "public function createOrder(\n        $amount,\n        $currency,\n        $paymentMethod,\n        array $paymentMethodDetails = [],\n        $description = null,\n        $merchantOrderId = null,\n        $returnUrl = null,\n        $expirationPeriod = null,\n        $customer = null,\n        $extra = null,\n        $webhookUrl = null\n    ) {\n        return $this->postOrder(\n            Order::create(\n                $amount,\n                $currency,\n                $paymentMethod,\n                $paymentMethodDetails,\n                $description,\n                $merchantOrderId,\n                $returnUrl,\n                $expirationPeriod,\n                $customer,\n                $extra,\n                $webhookUrl\n            )\n        );\n    }", "language": "php", "code": "public function createOrder(\n        $amount,\n        $currency,\n        $paymentMethod,\n        array $paymentMethodDetails = [],\n        $description = null,\n        $merchantOrderId = null,\n        $returnUrl = null,\n        $expirationPeriod = null,\n        $customer = null,\n        $extra = null,\n        $webhookUrl = null\n    ) {\n        return $this->postOrder(\n            Order::create(\n                $amount,\n                $currency,\n                $paymentMethod,\n                $paymentMethodDetails,\n                $description,\n                $merchantOrderId,\n                $returnUrl,\n                $expirationPeriod,\n                $customer,\n                $extra,\n                $webhookUrl\n            )\n        );\n    }", "code_tokens": ["public", "function", "createOrder", "(", "$", "amount", ",", "$", "currency", ",", "$", "paymentMethod", ",", "array", "$", "paymentMethodDetails", "=", "[", "]", ",", "$", "description", "=", "null", ",", "$", "merchantOrderId", "=", "null", ",", "$", "returnUrl", "=", "null", ",", "$", "expirationPeriod", "=", "null", ",", "$", "customer", "=", "null", ",", "$", "extra", "=", "null", ",", "$", "webhookUrl", "=", "null", ")", "{", "return", "$", "this", "->", "postOrder", "(", "Order", "::", "create", "(", "$", "amount", ",", "$", "currency", ",", "$", "paymentMethod", ",", "$", "paymentMethodDetails", ",", "$", "description", ",", "$", "merchantOrderId", ",", "$", "returnUrl", ",", "$", "expirationPeriod", ",", "$", "customer", ",", "$", "extra", ",", "$", "webhookUrl", ")", ")", ";", "}"], "docstring": "Create a new order.\n\n@param integer $amount Amount in cents.\n@param string $currency A valid currency code.\n@param string $paymentMethod The payment method to use.\n@param array $paymentMethodDetails An array of extra payment method details.\n@param string $description A description of the order.\n@param string $merchantOrderId A merchant-defined order identifier.\n@param string $returnUrl The return URL.\n@param string $expirationPeriod The expiration period as an ISO 8601 duration\n@param array $customer Customer information.\n@param array $extra Extra information.\n@param string $webhookUrl The webhook URL.\n\n@return Order The newly created order.", "docstring_tokens": ["Create", "a", "new", "order", "."], "sha": "813f8c3573a530734b21ad0b7213cdf9273b58dc", "url": "https://github.com/ingpsp/ing-php/blob/813f8c3573a530734b21ad0b7213cdf9273b58dc/src/Client.php#L675-L703", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Session/Session.php", "func_name": "Session.setFlashdata", "original_string": "public function setFlashdata($data, $value = null)\n\t{\n\t\t$this->set($data, $value);\n\t\t$this->markAsFlashdata(is_array($data) ? array_keys($data) : $data);\n\t}", "language": "php", "code": "public function setFlashdata($data, $value = null)\n\t{\n\t\t$this->set($data, $value);\n\t\t$this->markAsFlashdata(is_array($data) ? array_keys($data) : $data);\n\t}", "code_tokens": ["public", "function", "setFlashdata", "(", "$", "data", ",", "$", "value", "=", "null", ")", "{", "$", "this", "->", "set", "(", "$", "data", ",", "$", "value", ")", ";", "$", "this", "->", "markAsFlashdata", "(", "is_array", "(", "$", "data", ")", "?", "array_keys", "(", "$", "data", ")", ":", "$", "data", ")", ";", "}"], "docstring": "Sets data into the session that will only last for a single request.\nPerfect for use with single-use status update messages.\n\nIf $data is an array, it is interpreted as an associative array of\nkey/value pairs for flashdata properties.\nOtherwise, it is interpreted as the identifier of a specific\nflashdata property, with $value containing the property value.\n\n@param array|string $data  Property identifier or associative array of properties\n@param string|array $value Property value if $data is a scalar", "docstring_tokens": ["Sets", "data", "into", "the", "session", "that", "will", "only", "last", "for", "a", "single", "request", ".", "Perfect", "for", "use", "with", "single", "-", "use", "status", "update", "messages", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Session/Session.php#L644-L648", "partition": "test"}
{"repo": "tekkla/core-toolbox", "path": "Core/Toolbox/Strings/IsSerialized.php", "func_name": "IsSerialized.isSerialized", "original_string": "function isSerialized(): bool\n    {\n        // Empty strings cannot get unserialized\n        if (strlen($this->string) <= 1) {\n            return false;\n        }\n\n        // Serialized false, return true. unserialize() returns false on an\n        // invalid string or it could return false if the string is serialized\n        // false, eliminate that possibility.\n        if ($this->string === 'b:0;') {\n            $result = false;\n            return true;\n        }\n\n        $length = strlen($this->string);\n        $end = '';\n\n        switch ($this->string[0]) {\n            case 's':\n                if ($this->string[$length - 2] !== '\"') {\n                    return false;\n                }\n            case 'b':\n            case 'i':\n            case 'd':\n                $end .= ';';\n            case 'a':\n            case 'O':\n                $end .= '}';\n\n                if ($this->string[1] !== ':') {\n                    return false;\n                }\n\n                switch ($this->string[2]) {\n                    case 0:\n                    case 1:\n                    case 2:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 9:\n                        break;\n\n                    default:\n                        return false;\n                }\n            case 'N':\n                $end .= ';';\n\n                if ($this->string[$length - 1] !== $end[0]) {\n                    return false;\n                }\n\n                break;\n\n            default:\n                return false;\n        }\n\n        if (($this->result = @unserialize($this->string)) === false) {\n            $this->result = null;\n            return false;\n        }\n\n        return true;\n    }", "language": "php", "code": "function isSerialized(): bool\n    {\n        // Empty strings cannot get unserialized\n        if (strlen($this->string) <= 1) {\n            return false;\n        }\n\n        // Serialized false, return true. unserialize() returns false on an\n        // invalid string or it could return false if the string is serialized\n        // false, eliminate that possibility.\n        if ($this->string === 'b:0;') {\n            $result = false;\n            return true;\n        }\n\n        $length = strlen($this->string);\n        $end = '';\n\n        switch ($this->string[0]) {\n            case 's':\n                if ($this->string[$length - 2] !== '\"') {\n                    return false;\n                }\n            case 'b':\n            case 'i':\n            case 'd':\n                $end .= ';';\n            case 'a':\n            case 'O':\n                $end .= '}';\n\n                if ($this->string[1] !== ':') {\n                    return false;\n                }\n\n                switch ($this->string[2]) {\n                    case 0:\n                    case 1:\n                    case 2:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 9:\n                        break;\n\n                    default:\n                        return false;\n                }\n            case 'N':\n                $end .= ';';\n\n                if ($this->string[$length - 1] !== $end[0]) {\n                    return false;\n                }\n\n                break;\n\n            default:\n                return false;\n        }\n\n        if (($this->result = @unserialize($this->string)) === false) {\n            $this->result = null;\n            return false;\n        }\n\n        return true;\n    }", "code_tokens": ["function", "isSerialized", "(", ")", ":", "bool", "{", "// Empty strings cannot get unserialized", "if", "(", "strlen", "(", "$", "this", "->", "string", ")", "<=", "1", ")", "{", "return", "false", ";", "}", "// Serialized false, return true. unserialize() returns false on an", "// invalid string or it could return false if the string is serialized", "// false, eliminate that possibility.", "if", "(", "$", "this", "->", "string", "===", "'b:0;'", ")", "{", "$", "result", "=", "false", ";", "return", "true", ";", "}", "$", "length", "=", "strlen", "(", "$", "this", "->", "string", ")", ";", "$", "end", "=", "''", ";", "switch", "(", "$", "this", "->", "string", "[", "0", "]", ")", "{", "case", "'s'", ":", "if", "(", "$", "this", "->", "string", "[", "$", "length", "-", "2", "]", "!==", "'\"'", ")", "{", "return", "false", ";", "}", "case", "'b'", ":", "case", "'i'", ":", "case", "'d'", ":", "$", "end", ".=", "';'", ";", "case", "'a'", ":", "case", "'O'", ":", "$", "end", ".=", "'}'", ";", "if", "(", "$", "this", "->", "string", "[", "1", "]", "!==", "':'", ")", "{", "return", "false", ";", "}", "switch", "(", "$", "this", "->", "string", "[", "2", "]", ")", "{", "case", "0", ":", "case", "1", ":", "case", "2", ":", "case", "3", ":", "case", "4", ":", "case", "5", ":", "case", "6", ":", "case", "7", ":", "case", "8", ":", "case", "9", ":", "break", ";", "default", ":", "return", "false", ";", "}", "case", "'N'", ":", "$", "end", ".=", "';'", ";", "if", "(", "$", "this", "->", "string", "[", "$", "length", "-", "1", "]", "!==", "$", "end", "[", "0", "]", ")", "{", "return", "false", ";", "}", "break", ";", "default", ":", "return", "false", ";", "}", "if", "(", "(", "$", "this", "->", "result", "=", "@", "unserialize", "(", "$", "this", "->", "string", ")", ")", "===", "false", ")", "{", "$", "this", "->", "result", "=", "null", ";", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "Tests if an input is valid PHP serialized string\n\nChecks if a string is serialized using quick string manipulation\nto throw out obviously incorrect strings. Unserialize is then run\non the string to perform the final verification.\n\nValid serialized forms are the following:\n<ul>\n<li>boolean: <code>b:1;</code></li>\n<li>integer: <code>i:1;</code></li>\n<li>double: <code>d:0.2;</code></li>\n<li>string: <code>s:4:\"test\";</code></li>\n<li>array: <code>a:3:{i:0;i:1;i:1;i:2;i:2;i:3;}</code></li>\n<li>object: <code>O:8:\"stdClass\":0:{}</code></li>\n<li>null: <code>N;</code></li>\n</ul>\n\n@return boolean if $value is serialized data, otherwise false", "docstring_tokens": ["Tests", "if", "an", "input", "is", "valid", "PHP", "serialized", "string"], "sha": "c21ad38c54ff57e7ce57dc01dbfa72b4005889e4", "url": "https://github.com/tekkla/core-toolbox/blob/c21ad38c54ff57e7ce57dc01dbfa72b4005889e4/Core/Toolbox/Strings/IsSerialized.php#L47-L117", "partition": "test"}
{"repo": "bradcornford/Bootstrapper", "path": "src/Cornford/Bootstrapper/BootstrapBase.php", "func_name": "BootstrapBase.alert", "original_string": "protected function alert($type = 'message', $content = null, $emphasis = null, $dismissible = false, array $attributes = array())\n\t{\n\t\t$attributes = array_merge(array('class' => 'alert' . ($dismissible ? ' alert-dismissable' : '') . ' alert-' . ($type != 'message' ? $type : 'default')), $attributes);\n\t\t$return = '<div ' . $this->html->attributes($attributes) . '>';\n\n\t\tif ($dismissible !== false) {\n\t\t\t$return .= '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>';\n\t\t}\n\n\t\t$return .= ($emphasis !== null && is_string($emphasis) ? '<strong>' . $emphasis . '</strong> ' : '') . $content . '</div>';\n\n\t\treturn $return;\n\t}", "language": "php", "code": "protected function alert($type = 'message', $content = null, $emphasis = null, $dismissible = false, array $attributes = array())\n\t{\n\t\t$attributes = array_merge(array('class' => 'alert' . ($dismissible ? ' alert-dismissable' : '') . ' alert-' . ($type != 'message' ? $type : 'default')), $attributes);\n\t\t$return = '<div ' . $this->html->attributes($attributes) . '>';\n\n\t\tif ($dismissible !== false) {\n\t\t\t$return .= '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>';\n\t\t}\n\n\t\t$return .= ($emphasis !== null && is_string($emphasis) ? '<strong>' . $emphasis . '</strong> ' : '') . $content . '</div>';\n\n\t\treturn $return;\n\t}", "code_tokens": ["protected", "function", "alert", "(", "$", "type", "=", "'message'", ",", "$", "content", "=", "null", ",", "$", "emphasis", "=", "null", ",", "$", "dismissible", "=", "false", ",", "array", "$", "attributes", "=", "array", "(", ")", ")", "{", "$", "attributes", "=", "array_merge", "(", "array", "(", "'class'", "=>", "'alert'", ".", "(", "$", "dismissible", "?", "' alert-dismissable'", ":", "''", ")", ".", "' alert-'", ".", "(", "$", "type", "!=", "'message'", "?", "$", "type", ":", "'default'", ")", ")", ",", "$", "attributes", ")", ";", "$", "return", "=", "'<div '", ".", "$", "this", "->", "html", "->", "attributes", "(", "$", "attributes", ")", ".", "'>'", ";", "if", "(", "$", "dismissible", "!==", "false", ")", "{", "$", "return", ".=", "'<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>'", ";", "}", "$", "return", ".=", "(", "$", "emphasis", "!==", "null", "&&", "is_string", "(", "$", "emphasis", ")", "?", "'<strong>'", ".", "$", "emphasis", ".", "'</strong> '", ":", "''", ")", ".", "$", "content", ".", "'</div>'", ";", "return", "$", "return", ";", "}"], "docstring": "Create an alert item with optional emphasis.\n\n@param string  $type\n@param string  $content\n@param string  $emphasis\n@param boolean $dismissible\n@param array   $attributes\n\n@return string", "docstring_tokens": ["Create", "an", "alert", "item", "with", "optional", "emphasis", "."], "sha": "93045a96c0d431aaad177d61ecec9e718c13ce82", "url": "https://github.com/bradcornford/Bootstrapper/blob/93045a96c0d431aaad177d61ecec9e718c13ce82/src/Cornford/Bootstrapper/BootstrapBase.php#L504-L516", "partition": "test"}
{"repo": "heiglandreas/Org_Heigl_Hyphenator", "path": "src/Tokenizer/TokenizerRegistry.php", "func_name": "TokenizerRegistry.tokenize", "original_string": "public function tokenize($string)\n    {\n        if (! $string instanceof TokenRegistry) {\n            $wt = new WordToken($string);\n            $string = new TokenRegistry();\n            $string->add($wt);\n        }\n        foreach ($this as $tokenizer) {\n            $string = $tokenizer->run($string);\n        }\n\n        return $string;\n    }", "language": "php", "code": "public function tokenize($string)\n    {\n        if (! $string instanceof TokenRegistry) {\n            $wt = new WordToken($string);\n            $string = new TokenRegistry();\n            $string->add($wt);\n        }\n        foreach ($this as $tokenizer) {\n            $string = $tokenizer->run($string);\n        }\n\n        return $string;\n    }", "code_tokens": ["public", "function", "tokenize", "(", "$", "string", ")", "{", "if", "(", "!", "$", "string", "instanceof", "TokenRegistry", ")", "{", "$", "wt", "=", "new", "WordToken", "(", "$", "string", ")", ";", "$", "string", "=", "new", "TokenRegistry", "(", ")", ";", "$", "string", "->", "add", "(", "$", "wt", ")", ";", "}", "foreach", "(", "$", "this", "as", "$", "tokenizer", ")", "{", "$", "string", "=", "$", "tokenizer", "->", "run", "(", "$", "string", ")", ";", "}", "return", "$", "string", ";", "}"], "docstring": "Pass the given string through the given tokenizers\n\n@param string $string The String to be tokenized\n\n@return \\Org\\Heigl\\Hyphenator\\TokenRegistry", "docstring_tokens": ["Pass", "the", "given", "string", "through", "the", "given", "tokenizers"], "sha": "24f49328d3f89c6ac803c83f1217c8cf8548118b", "url": "https://github.com/heiglandreas/Org_Heigl_Hyphenator/blob/24f49328d3f89c6ac803c83f1217c8cf8548118b/src/Tokenizer/TokenizerRegistry.php#L110-L122", "partition": "test"}
{"repo": "bradcornford/Bootstrapper", "path": "src/Cornford/Bootstrapper/BootstrapBase.php", "func_name": "BootstrapBase.group", "original_string": "protected function group($name, $errors = null, $class = 'form-group', array $options = array())\n\t{\n\t\t$options = array_merge(array('class' => $class), $options);\n\t\t$options['class'] .= ($errors && $errors->has($name) ? ' has-error' : '');\n\t\t$return = '<div' . $this->html->attributes($options) . '>' . \"\\n\";\n\n\t\treturn $return;\n\t}", "language": "php", "code": "protected function group($name, $errors = null, $class = 'form-group', array $options = array())\n\t{\n\t\t$options = array_merge(array('class' => $class), $options);\n\t\t$options['class'] .= ($errors && $errors->has($name) ? ' has-error' : '');\n\t\t$return = '<div' . $this->html->attributes($options) . '>' . \"\\n\";\n\n\t\treturn $return;\n\t}", "code_tokens": ["protected", "function", "group", "(", "$", "name", ",", "$", "errors", "=", "null", ",", "$", "class", "=", "'form-group'", ",", "array", "$", "options", "=", "array", "(", ")", ")", "{", "$", "options", "=", "array_merge", "(", "array", "(", "'class'", "=>", "$", "class", ")", ",", "$", "options", ")", ";", "$", "options", "[", "'class'", "]", ".=", "(", "$", "errors", "&&", "$", "errors", "->", "has", "(", "$", "name", ")", "?", "' has-error'", ":", "''", ")", ";", "$", "return", "=", "'<div'", ".", "$", "this", "->", "html", "->", "attributes", "(", "$", "options", ")", ".", "'>'", ".", "\"\\n\"", ";", "return", "$", "return", ";", "}"], "docstring": "Create a form group element.\n\n@param string                         $name\n@param \\Illuminate\\Support\\MessageBag $errors\n@param string                         $class\n@param array                          $options\n\n@return string", "docstring_tokens": ["Create", "a", "form", "group", "element", "."], "sha": "93045a96c0d431aaad177d61ecec9e718c13ce82", "url": "https://github.com/bradcornford/Bootstrapper/blob/93045a96c0d431aaad177d61ecec9e718c13ce82/src/Cornford/Bootstrapper/BootstrapBase.php#L208-L215", "partition": "test"}
{"repo": "Hzhihua/yii2-dump", "path": "src/models/Schema.php", "func_name": "Schema.other", "original_string": "public static function other(ColumnSchema $column)\n    {\n        $definition = '';\n\n        // unsigned\n        if ($column->unsigned) {\n            $definition .= '->unsigned()';\n        }\n\n        // null\n        if ($column->allowNull) {\n            $definition .= '->null()';\n        } else {\n            $definition .= '->notNull()';\n        }\n\n        // default value\n        if ($column->defaultValue instanceof Expression) {\n            $definition .= \"->defaultExpression('$column->defaultValue')\";\n\n        } elseif (is_int($column->defaultValue)) {\n            $definition .= \"->defaultValue($column->defaultValue)\";\n\n        } elseif (is_bool($column->defaultValue)) {\n            $definition .= '->defaultValue('.var_export($column->defaultValue, true).')';\n\n        } elseif (is_string($column->defaultValue)) {\n            $definition .= \"->defaultValue('\".addslashes($column->defaultValue).\"')\";\n        }\n\n        // comment\n        if (null !== $column->comment && '' !== $column->comment) {\n            $definition .= \"->comment('\".addslashes($column->comment).\"')\";\n        }\n\n        // append\n\n        return $definition;\n    }", "language": "php", "code": "public static function other(ColumnSchema $column)\n    {\n        $definition = '';\n\n        // unsigned\n        if ($column->unsigned) {\n            $definition .= '->unsigned()';\n        }\n\n        // null\n        if ($column->allowNull) {\n            $definition .= '->null()';\n        } else {\n            $definition .= '->notNull()';\n        }\n\n        // default value\n        if ($column->defaultValue instanceof Expression) {\n            $definition .= \"->defaultExpression('$column->defaultValue')\";\n\n        } elseif (is_int($column->defaultValue)) {\n            $definition .= \"->defaultValue($column->defaultValue)\";\n\n        } elseif (is_bool($column->defaultValue)) {\n            $definition .= '->defaultValue('.var_export($column->defaultValue, true).')';\n\n        } elseif (is_string($column->defaultValue)) {\n            $definition .= \"->defaultValue('\".addslashes($column->defaultValue).\"')\";\n        }\n\n        // comment\n        if (null !== $column->comment && '' !== $column->comment) {\n            $definition .= \"->comment('\".addslashes($column->comment).\"')\";\n        }\n\n        // append\n\n        return $definition;\n    }", "code_tokens": ["public", "static", "function", "other", "(", "ColumnSchema", "$", "column", ")", "{", "$", "definition", "=", "''", ";", "// unsigned", "if", "(", "$", "column", "->", "unsigned", ")", "{", "$", "definition", ".=", "'->unsigned()'", ";", "}", "// null", "if", "(", "$", "column", "->", "allowNull", ")", "{", "$", "definition", ".=", "'->null()'", ";", "}", "else", "{", "$", "definition", ".=", "'->notNull()'", ";", "}", "// default value", "if", "(", "$", "column", "->", "defaultValue", "instanceof", "Expression", ")", "{", "$", "definition", ".=", "\"->defaultExpression('$column->defaultValue')\"", ";", "}", "elseif", "(", "is_int", "(", "$", "column", "->", "defaultValue", ")", ")", "{", "$", "definition", ".=", "\"->defaultValue($column->defaultValue)\"", ";", "}", "elseif", "(", "is_bool", "(", "$", "column", "->", "defaultValue", ")", ")", "{", "$", "definition", ".=", "'->defaultValue('", ".", "var_export", "(", "$", "column", "->", "defaultValue", ",", "true", ")", ".", "')'", ";", "}", "elseif", "(", "is_string", "(", "$", "column", "->", "defaultValue", ")", ")", "{", "$", "definition", ".=", "\"->defaultValue('\"", ".", "addslashes", "(", "$", "column", "->", "defaultValue", ")", ".", "\"')\"", ";", "}", "// comment", "if", "(", "null", "!==", "$", "column", "->", "comment", "&&", "''", "!==", "$", "column", "->", "comment", ")", "{", "$", "definition", ".=", "\"->comment('\"", ".", "addslashes", "(", "$", "column", "->", "comment", ")", ".", "\"')\"", ";", "}", "// append", "return", "$", "definition", ";", "}"], "docstring": "Returns the other definition.\n@param ColumnSchema $column\n@return string the other definition", "docstring_tokens": ["Returns", "the", "other", "definition", "."], "sha": "6865c2064d72b8361e0d7adfa6f11aa58608ef93", "url": "https://github.com/Hzhihua/yii2-dump/blob/6865c2064d72b8361e0d7adfa6f11aa58608ef93/src/models/Schema.php#L684-L722", "partition": "test"}
{"repo": "groovel/newsletter-mailchimp", "path": "src/services/MailChimpClient.php", "func_name": "MailChimpClient.deleteUser", "original_string": "public static function deleteUser($listid,$email)\n    {\n     \t$email=md5($email);\n    \t$action = self::$api_version.'/lists/'.$listid.'/members/'. $email;\n    \treturn self::send($action, 'DELETE', []);\n    }", "language": "php", "code": "public static function deleteUser($listid,$email)\n    {\n     \t$email=md5($email);\n    \t$action = self::$api_version.'/lists/'.$listid.'/members/'. $email;\n    \treturn self::send($action, 'DELETE', []);\n    }", "code_tokens": ["public", "static", "function", "deleteUser", "(", "$", "listid", ",", "$", "email", ")", "{", "$", "email", "=", "md5", "(", "$", "email", ")", ";", "$", "action", "=", "self", "::", "$", "api_version", ".", "'/lists/'", ".", "$", "listid", ".", "'/members/'", ".", "$", "email", ";", "return", "self", "::", "send", "(", "$", "action", ",", "'DELETE'", ",", "[", "]", ")", ";", "}"], "docstring": "delete a user to a given listid to a given email\n@param $email\n@param $listid\n@return mixed", "docstring_tokens": ["delete", "a", "user", "to", "a", "given", "listid", "to", "a", "given", "email"], "sha": "bc21a7df65f1001a1126f4962917eb2604f898c2", "url": "https://github.com/groovel/newsletter-mailchimp/blob/bc21a7df65f1001a1126f4962917eb2604f898c2/src/services/MailChimpClient.php#L248-L253", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Events/ListenerPattern.php", "func_name": "ListenerPattern.unbind", "original_string": "public function unbind(EventManagerContract $dispatcher): void\n    {\n        foreach ($this->events as $eventName => $value) {\n            $dispatcher->detach($eventName, $this->getListener());\n        }\n\n        $this->events = [];\n    }", "language": "php", "code": "public function unbind(EventManagerContract $dispatcher): void\n    {\n        foreach ($this->events as $eventName => $value) {\n            $dispatcher->detach($eventName, $this->getListener());\n        }\n\n        $this->events = [];\n    }", "code_tokens": ["public", "function", "unbind", "(", "EventManagerContract", "$", "dispatcher", ")", ":", "void", "{", "foreach", "(", "$", "this", "->", "events", "as", "$", "eventName", "=>", "$", "value", ")", "{", "$", "dispatcher", "->", "detach", "(", "$", "eventName", ",", "$", "this", "->", "getListener", "(", ")", ")", ";", "}", "$", "this", "->", "events", "=", "[", "]", ";", "}"], "docstring": "Removes this pattern's listener from all events to which it was\npreviously added.\n\n@param \\Viserio\\Component\\Contract\\Events\\EventManager $dispatcher\n\n@return void", "docstring_tokens": ["Removes", "this", "pattern", "s", "listener", "from", "all", "events", "to", "which", "it", "was", "previously", "added", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Events/ListenerPattern.php#L147-L154", "partition": "test"}
{"repo": "nails/module-admin", "path": "admin/controllers/Logs.php", "func_name": "Logs.site", "original_string": "public function site()\n    {\n        if (!userHasPermission('admin:admin:logs:site:browse')) {\n            unauthorised();\n        }\n\n        // --------------------------------------------------------------------------\n\n        Factory::helper('string');\n        $oUri    = Factory::service('Uri');\n        $sMethod = $oUri->segment(5) ? $oUri->segment(5) : 'index';\n        $sMethod = 'site' . underscoreToCamelcase(strtolower($sMethod), false);\n\n        if (method_exists($this, $sMethod)) {\n            $this->{$sMethod}();\n        } else {\n            show404('', true);\n        }\n    }", "language": "php", "code": "public function site()\n    {\n        if (!userHasPermission('admin:admin:logs:site:browse')) {\n            unauthorised();\n        }\n\n        // --------------------------------------------------------------------------\n\n        Factory::helper('string');\n        $oUri    = Factory::service('Uri');\n        $sMethod = $oUri->segment(5) ? $oUri->segment(5) : 'index';\n        $sMethod = 'site' . underscoreToCamelcase(strtolower($sMethod), false);\n\n        if (method_exists($this, $sMethod)) {\n            $this->{$sMethod}();\n        } else {\n            show404('', true);\n        }\n    }", "code_tokens": ["public", "function", "site", "(", ")", "{", "if", "(", "!", "userHasPermission", "(", "'admin:admin:logs:site:browse'", ")", ")", "{", "unauthorised", "(", ")", ";", "}", "// --------------------------------------------------------------------------", "Factory", "::", "helper", "(", "'string'", ")", ";", "$", "oUri", "=", "Factory", "::", "service", "(", "'Uri'", ")", ";", "$", "sMethod", "=", "$", "oUri", "->", "segment", "(", "5", ")", "?", "$", "oUri", "->", "segment", "(", "5", ")", ":", "'index'", ";", "$", "sMethod", "=", "'site'", ".", "underscoreToCamelcase", "(", "strtolower", "(", "$", "sMethod", ")", ",", "false", ")", ";", "if", "(", "method_exists", "(", "$", "this", ",", "$", "sMethod", ")", ")", "{", "$", "this", "->", "{", "$", "sMethod", "}", "(", ")", ";", "}", "else", "{", "show404", "(", "''", ",", "true", ")", ";", "}", "}"], "docstring": "Route site log pages\n@throws \\Nails\\Common\\Exception\\FactoryException", "docstring_tokens": ["Route", "site", "log", "pages"], "sha": "2ed8a91b5f05c86fcde21feb621cfafe391ee0c3", "url": "https://github.com/nails/module-admin/blob/2ed8a91b5f05c86fcde21feb621cfafe391ee0c3/admin/controllers/Logs.php#L71-L89", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/StaticalProxy/Resolver.php", "func_name": "Resolver.resolve", "original_string": "public function resolve(string $alias): ?string\n    {\n        // Check wether the alias matches the pattern\n        if (\\preg_match($this->regex, $alias, $matches) !== 1) {\n            return null;\n        }\n\n        // Get the translation\n        $translation = $this->translation;\n\n        if (\\mb_strpos($translation, '$') === false) {\n            $class = $translation;\n        } else {\n            // Make sure namespace seperators are escaped\n            $translation = \\str_replace('\\\\', '\\\\\\\\', $translation);\n            // Resolve the replacement\n            $class = \\preg_replace($this->regex, $translation, $alias);\n        }\n\n        // Check wether the class exists\n        if ($class && $this->exists($class, true)) {\n            return $class;\n        }\n\n        return null;\n    }", "language": "php", "code": "public function resolve(string $alias): ?string\n    {\n        // Check wether the alias matches the pattern\n        if (\\preg_match($this->regex, $alias, $matches) !== 1) {\n            return null;\n        }\n\n        // Get the translation\n        $translation = $this->translation;\n\n        if (\\mb_strpos($translation, '$') === false) {\n            $class = $translation;\n        } else {\n            // Make sure namespace seperators are escaped\n            $translation = \\str_replace('\\\\', '\\\\\\\\', $translation);\n            // Resolve the replacement\n            $class = \\preg_replace($this->regex, $translation, $alias);\n        }\n\n        // Check wether the class exists\n        if ($class && $this->exists($class, true)) {\n            return $class;\n        }\n\n        return null;\n    }", "code_tokens": ["public", "function", "resolve", "(", "string", "$", "alias", ")", ":", "?", "string", "{", "// Check wether the alias matches the pattern", "if", "(", "\\", "preg_match", "(", "$", "this", "->", "regex", ",", "$", "alias", ",", "$", "matches", ")", "!==", "1", ")", "{", "return", "null", ";", "}", "// Get the translation", "$", "translation", "=", "$", "this", "->", "translation", ";", "if", "(", "\\", "mb_strpos", "(", "$", "translation", ",", "'$'", ")", "===", "false", ")", "{", "$", "class", "=", "$", "translation", ";", "}", "else", "{", "// Make sure namespace seperators are escaped", "$", "translation", "=", "\\", "str_replace", "(", "'\\\\'", ",", "'\\\\\\\\'", ",", "$", "translation", ")", ";", "// Resolve the replacement", "$", "class", "=", "\\", "preg_replace", "(", "$", "this", "->", "regex", ",", "$", "translation", ",", "$", "alias", ")", ";", "}", "// Check wether the class exists", "if", "(", "$", "class", "&&", "$", "this", "->", "exists", "(", "$", "class", ",", "true", ")", ")", "{", "return", "$", "class", ";", "}", "return", "null", ";", "}"], "docstring": "Resolves an alias.\n\n@param string $alias\n\n@return null|string", "docstring_tokens": ["Resolves", "an", "alias", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/StaticalProxy/Resolver.php#L52-L77", "partition": "test"}
{"repo": "ifcanduela/db", "path": "src/SelectQuery.php", "func_name": "SelectQuery.leftOuterJoin", "original_string": "public function leftOuterJoin(string $table, array $on)\n    {\n        $this->changed = true;\n        $this->joins[] = ['LEFT OUTER JOIN', $table, $on];\n\n        return $this;\n    }", "language": "php", "code": "public function leftOuterJoin(string $table, array $on)\n    {\n        $this->changed = true;\n        $this->joins[] = ['LEFT OUTER JOIN', $table, $on];\n\n        return $this;\n    }", "code_tokens": ["public", "function", "leftOuterJoin", "(", "string", "$", "table", ",", "array", "$", "on", ")", "{", "$", "this", "->", "changed", "=", "true", ";", "$", "this", "->", "joins", "[", "]", "=", "[", "'LEFT OUTER JOIN'", ",", "$", "table", ",", "$", "on", "]", ";", "return", "$", "this", ";", "}"], "docstring": "Setup a LEFT OUTER JOIN table.\n\n@param string $table\n@param array $on\n@return self", "docstring_tokens": ["Setup", "a", "LEFT", "OUTER", "JOIN", "table", "."], "sha": "ff6e78ee52fa72188c432e5d3309117c8c8a8317", "url": "https://github.com/ifcanduela/db/blob/ff6e78ee52fa72188c432e5d3309117c8c8a8317/src/SelectQuery.php#L141-L147", "partition": "test"}
{"repo": "php-school/cli-menu", "path": "src/CliMenu.php", "func_name": "CliMenu.executeCurrentItem", "original_string": "protected function executeCurrentItem() : void\n    {\n        $item = $this->getSelectedItem();\n\n        if ($item->canSelect()) {\n            $callable = $item->getSelectAction();\n            if ($callable) {\n                $callable($this);\n            }\n        }\n    }", "language": "php", "code": "protected function executeCurrentItem() : void\n    {\n        $item = $this->getSelectedItem();\n\n        if ($item->canSelect()) {\n            $callable = $item->getSelectAction();\n            if ($callable) {\n                $callable($this);\n            }\n        }\n    }", "code_tokens": ["protected", "function", "executeCurrentItem", "(", ")", ":", "void", "{", "$", "item", "=", "$", "this", "->", "getSelectedItem", "(", ")", ";", "if", "(", "$", "item", "->", "canSelect", "(", ")", ")", "{", "$", "callable", "=", "$", "item", "->", "getSelectAction", "(", ")", ";", "if", "(", "$", "callable", ")", "{", "$", "callable", "(", "$", "this", ")", ";", "}", "}", "}"], "docstring": "Execute the current item", "docstring_tokens": ["Execute", "the", "current", "item"], "sha": "2b24d576338c5add84c9515a766c6d12337ff2b8", "url": "https://github.com/php-school/cli-menu/blob/2b24d576338c5add84c9515a766c6d12337ff2b8/src/CliMenu.php#L404-L414", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-table/src/Table/Models/EdmType.php", "func_name": "EdmType.serializeValue", "original_string": "public static function serializeValue($type, $value)\n    {\n        switch ($type) {\n        case null:\n            return $value;\n\n        case EdmType::INT32:\n            return intval($value);\n\n        case EdmType::INT64:\n        case EdmType::GUID:\n        case EdmType::STRING:\n            return strval($value);\n\n        case EdmType::DOUBLE:\n            return strval($value);\n\n        case EdmType::BINARY:\n            return base64_encode($value);\n\n        case EdmType::DATETIME:\n            return Utilities::convertToEdmDateTime($value);\n\n        case EdmType::BOOLEAN:\n            return (is_null($value) ? '' : ($value == true ? true : false));\n\n        default:\n            throw new \\InvalidArgumentException();\n        }\n    }", "language": "php", "code": "public static function serializeValue($type, $value)\n    {\n        switch ($type) {\n        case null:\n            return $value;\n\n        case EdmType::INT32:\n            return intval($value);\n\n        case EdmType::INT64:\n        case EdmType::GUID:\n        case EdmType::STRING:\n            return strval($value);\n\n        case EdmType::DOUBLE:\n            return strval($value);\n\n        case EdmType::BINARY:\n            return base64_encode($value);\n\n        case EdmType::DATETIME:\n            return Utilities::convertToEdmDateTime($value);\n\n        case EdmType::BOOLEAN:\n            return (is_null($value) ? '' : ($value == true ? true : false));\n\n        default:\n            throw new \\InvalidArgumentException();\n        }\n    }", "code_tokens": ["public", "static", "function", "serializeValue", "(", "$", "type", ",", "$", "value", ")", "{", "switch", "(", "$", "type", ")", "{", "case", "null", ":", "return", "$", "value", ";", "case", "EdmType", "::", "INT32", ":", "return", "intval", "(", "$", "value", ")", ";", "case", "EdmType", "::", "INT64", ":", "case", "EdmType", "::", "GUID", ":", "case", "EdmType", "::", "STRING", ":", "return", "strval", "(", "$", "value", ")", ";", "case", "EdmType", "::", "DOUBLE", ":", "return", "strval", "(", "$", "value", ")", ";", "case", "EdmType", "::", "BINARY", ":", "return", "base64_encode", "(", "$", "value", ")", ";", "case", "EdmType", "::", "DATETIME", ":", "return", "Utilities", "::", "convertToEdmDateTime", "(", "$", "value", ")", ";", "case", "EdmType", "::", "BOOLEAN", ":", "return", "(", "is_null", "(", "$", "value", ")", "?", "''", ":", "(", "$", "value", "==", "true", "?", "true", ":", "false", ")", ")", ";", "default", ":", "throw", "new", "\\", "InvalidArgumentException", "(", ")", ";", "}", "}"], "docstring": "Serializes EDM value into proper value for sending it to Windows Azure.\n\n@param string $type  The EDM type.\n@param mixed  $value The EDM value.\n\n@internal\n\n@return string\n\n@throws \\InvalidArgumentException", "docstring_tokens": ["Serializes", "EDM", "value", "into", "proper", "value", "for", "sending", "it", "to", "Windows", "Azure", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-table/src/Table/Models/EdmType.php#L170-L199", "partition": "test"}
{"repo": "fpoirotte/XRL", "path": "src/Decoder.php", "func_name": "Decoder.expectEndTag", "original_string": "protected function expectEndTag($reader, $expectedTag)\n    {\n        $node = $this->readNode($reader);\n\n        $type = $node->nodeType;\n        if ($type !== \\XMLReader::END_ELEMENT) {\n            $type = isset(self::$types[$type]) ? self::$types[$type] : \"#$type\";\n            throw new \\InvalidArgumentException(\n                \"Expected a closing $expectedTag tag \".\n                \"but got a node of type $type instead\"\n            );\n        }\n\n        $readTag = $node->name;\n        if ($readTag !== $expectedTag) {\n            throw new \\InvalidArgumentException(\n                \"Got closing tag for $readTag instead of $expectedTag\"\n            );\n        }\n\n        $this->prepareNextNode();\n    }", "language": "php", "code": "protected function expectEndTag($reader, $expectedTag)\n    {\n        $node = $this->readNode($reader);\n\n        $type = $node->nodeType;\n        if ($type !== \\XMLReader::END_ELEMENT) {\n            $type = isset(self::$types[$type]) ? self::$types[$type] : \"#$type\";\n            throw new \\InvalidArgumentException(\n                \"Expected a closing $expectedTag tag \".\n                \"but got a node of type $type instead\"\n            );\n        }\n\n        $readTag = $node->name;\n        if ($readTag !== $expectedTag) {\n            throw new \\InvalidArgumentException(\n                \"Got closing tag for $readTag instead of $expectedTag\"\n            );\n        }\n\n        $this->prepareNextNode();\n    }", "code_tokens": ["protected", "function", "expectEndTag", "(", "$", "reader", ",", "$", "expectedTag", ")", "{", "$", "node", "=", "$", "this", "->", "readNode", "(", "$", "reader", ")", ";", "$", "type", "=", "$", "node", "->", "nodeType", ";", "if", "(", "$", "type", "!==", "\\", "XMLReader", "::", "END_ELEMENT", ")", "{", "$", "type", "=", "isset", "(", "self", "::", "$", "types", "[", "$", "type", "]", ")", "?", "self", "::", "$", "types", "[", "$", "type", "]", ":", "\"#$type\"", ";", "throw", "new", "\\", "InvalidArgumentException", "(", "\"Expected a closing $expectedTag tag \"", ".", "\"but got a node of type $type instead\"", ")", ";", "}", "$", "readTag", "=", "$", "node", "->", "name", ";", "if", "(", "$", "readTag", "!==", "$", "expectedTag", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"Got closing tag for $readTag instead of $expectedTag\"", ")", ";", "}", "$", "this", "->", "prepareNextNode", "(", ")", ";", "}"], "docstring": "Read a node from the document and throw\nan exception if it is not a closing tag\nwith the given name.\n\n\\param XMLReader $reader\nReader object the node will be read from.\n\n\\param string $expectedTag\nName of the tag we're expecting.\n\n\\throw InvalidArgumentException\nThrown whenever one of the following\nconditions is met:\n- We reached the end of the document.\n- The next node was not a closing tag.\n- The next node was a closing tag, but\nits name was not the one we expected.", "docstring_tokens": ["Read", "a", "node", "from", "the", "document", "and", "throw", "an", "exception", "if", "it", "is", "not", "a", "closing", "tag", "with", "the", "given", "name", "."], "sha": "4c5ef93ca73b7a010c2a3793cca0b9be218fcebf", "url": "https://github.com/fpoirotte/XRL/blob/4c5ef93ca73b7a010c2a3793cca0b9be218fcebf/src/Decoder.php#L230-L251", "partition": "test"}
{"repo": "EasyCorp/EasyAdminBundle", "path": "src/Twig/EasyAdminTwigExtension.php", "func_name": "EasyAdminTwigExtension.transchoice", "original_string": "public function transchoice($message, $count, array $arguments = [], $domain = null, $locale = null)\n    {\n        if (null === $this->translator) {\n            return strtr($message, $arguments);\n        }\n\n        return $this->translator->trans($message, array_merge(['%count%' => $count], $arguments), $domain, $locale);\n    }", "language": "php", "code": "public function transchoice($message, $count, array $arguments = [], $domain = null, $locale = null)\n    {\n        if (null === $this->translator) {\n            return strtr($message, $arguments);\n        }\n\n        return $this->translator->trans($message, array_merge(['%count%' => $count], $arguments), $domain, $locale);\n    }", "code_tokens": ["public", "function", "transchoice", "(", "$", "message", ",", "$", "count", ",", "array", "$", "arguments", "=", "[", "]", ",", "$", "domain", "=", "null", ",", "$", "locale", "=", "null", ")", "{", "if", "(", "null", "===", "$", "this", "->", "translator", ")", "{", "return", "strtr", "(", "$", "message", ",", "$", "arguments", ")", ";", "}", "return", "$", "this", "->", "translator", "->", "trans", "(", "$", "message", ",", "array_merge", "(", "[", "'%count%'", "=>", "$", "count", "]", ",", "$", "arguments", ")", ",", "$", "domain", ",", "$", "locale", ")", ";", "}"], "docstring": "Remove this filter when the Symfony's requirement is equal or greater than 4.2\nand use the built-in trans filter instead with a %count% parameter.", "docstring_tokens": ["Remove", "this", "filter", "when", "the", "Symfony", "s", "requirement", "is", "equal", "or", "greater", "than", "4", ".", "2", "and", "use", "the", "built", "-", "in", "trans", "filter", "instead", "with", "a", "%count%", "parameter", "."], "sha": "2e241936000d347a9e1230d08ccfe5bb27dd357f", "url": "https://github.com/EasyCorp/EasyAdminBundle/blob/2e241936000d347a9e1230d08ccfe5bb27dd357f/src/Twig/EasyAdminTwigExtension.php#L391-L398", "partition": "test"}
{"repo": "tastyigniter/flame", "path": "src/Database/Attach/Media.php", "func_name": "Media.afterDelete", "original_string": "public function afterDelete()\n    {\n        try {\n            $this->deleteThumbs();\n            $this->deleteFile();\n        }\n        catch (Exception $ex) {\n            Log::error($ex);\n        }\n    }", "language": "php", "code": "public function afterDelete()\n    {\n        try {\n            $this->deleteThumbs();\n            $this->deleteFile();\n        }\n        catch (Exception $ex) {\n            Log::error($ex);\n        }\n    }", "code_tokens": ["public", "function", "afterDelete", "(", ")", "{", "try", "{", "$", "this", "->", "deleteThumbs", "(", ")", ";", "$", "this", "->", "deleteFile", "(", ")", ";", "}", "catch", "(", "Exception", "$", "ex", ")", "{", "Log", "::", "error", "(", "$", "ex", ")", ";", "}", "}"], "docstring": "After model is deleted\n- clean up it's thumbnails", "docstring_tokens": ["After", "model", "is", "deleted", "-", "clean", "up", "it", "s", "thumbnails"], "sha": "3c922ba1c02b3c14ad4adf91c2f37498045fa92a", "url": "https://github.com/tastyigniter/flame/blob/3c922ba1c02b3c14ad4adf91c2f37498045fa92a/src/Database/Attach/Media.php#L173-L182", "partition": "test"}
{"repo": "nails/module-admin", "path": "src/Helper.php", "func_name": "Helper.loadDateTimeCell", "original_string": "public static function loadDateTimeCell($sDateTime, $sNoData = '&mdash;')\n    {\n        $aData = [\n            'dateTime' => $sDateTime,\n            'noData'   => $sNoData,\n        ];\n\n        $oView = Factory::service('View');\n        return $oView->load('admin/_components/table-cell-datetime', $aData, true);\n    }", "language": "php", "code": "public static function loadDateTimeCell($sDateTime, $sNoData = '&mdash;')\n    {\n        $aData = [\n            'dateTime' => $sDateTime,\n            'noData'   => $sNoData,\n        ];\n\n        $oView = Factory::service('View');\n        return $oView->load('admin/_components/table-cell-datetime', $aData, true);\n    }", "code_tokens": ["public", "static", "function", "loadDateTimeCell", "(", "$", "sDateTime", ",", "$", "sNoData", "=", "'&mdash;'", ")", "{", "$", "aData", "=", "[", "'dateTime'", "=>", "$", "sDateTime", ",", "'noData'", "=>", "$", "sNoData", ",", "]", ";", "$", "oView", "=", "Factory", "::", "service", "(", "'View'", ")", ";", "return", "$", "oView", "->", "load", "(", "'admin/_components/table-cell-datetime'", ",", "$", "aData", ",", "true", ")", ";", "}"], "docstring": "Load the admin \"dateTime\" table cell component\n\n@param  string $sDateTime The dateTime to render\n@param  string $sNoData   What to render if the datetime is invalid or empty\n\n@return string\n@throws \\Nails\\Common\\Exception\\FactoryException", "docstring_tokens": ["Load", "the", "admin", "dateTime", "table", "cell", "component"], "sha": "2ed8a91b5f05c86fcde21feb621cfafe391ee0c3", "url": "https://github.com/nails/module-admin/blob/2ed8a91b5f05c86fcde21feb621cfafe391ee0c3/src/Helper.php#L503-L512", "partition": "test"}
{"repo": "loadsys/CakePHP-Serializers-Errors", "path": "Lib/Error/SerializerExceptionRenderer.php", "func_name": "SerializerExceptionRenderer.defaultValidationSerializerRender", "original_string": "protected function defaultValidationSerializerRender(ValidationBaseSerializerException $error) {\n\t\t$this->addHttpCodes();\n\t\t$this->controller->response->statusCode($error->status());\n\n\t\t// set the errors object to match JsonApi's expectations\n\t\t$this->controller->set('title', $error->title());\n\t\t$this->controller->set('validationErrors', $error->validationErrors());\n\t\t$this->controller->set('status', $error->status());\n\t\t$this->controller->set('error', $error);\n\n\t\t$this->controller->set('url', $this->controller->request->here());\n\n\t\tif (empty($template)) {\n\t\t\t$template = \"SerializersErrors./Errors/validation_serializer_exception\";\n\t\t}\n\n\t\t$this->controller->render($template);\n\t\t$this->controller->afterFilter();\n\t\treturn $this->controller->response->send();\n\t}", "language": "php", "code": "protected function defaultValidationSerializerRender(ValidationBaseSerializerException $error) {\n\t\t$this->addHttpCodes();\n\t\t$this->controller->response->statusCode($error->status());\n\n\t\t// set the errors object to match JsonApi's expectations\n\t\t$this->controller->set('title', $error->title());\n\t\t$this->controller->set('validationErrors', $error->validationErrors());\n\t\t$this->controller->set('status', $error->status());\n\t\t$this->controller->set('error', $error);\n\n\t\t$this->controller->set('url', $this->controller->request->here());\n\n\t\tif (empty($template)) {\n\t\t\t$template = \"SerializersErrors./Errors/validation_serializer_exception\";\n\t\t}\n\n\t\t$this->controller->render($template);\n\t\t$this->controller->afterFilter();\n\t\treturn $this->controller->response->send();\n\t}", "code_tokens": ["protected", "function", "defaultValidationSerializerRender", "(", "ValidationBaseSerializerException", "$", "error", ")", "{", "$", "this", "->", "addHttpCodes", "(", ")", ";", "$", "this", "->", "controller", "->", "response", "->", "statusCode", "(", "$", "error", "->", "status", "(", ")", ")", ";", "// set the errors object to match JsonApi's expectations", "$", "this", "->", "controller", "->", "set", "(", "'title'", ",", "$", "error", "->", "title", "(", ")", ")", ";", "$", "this", "->", "controller", "->", "set", "(", "'validationErrors'", ",", "$", "error", "->", "validationErrors", "(", ")", ")", ";", "$", "this", "->", "controller", "->", "set", "(", "'status'", ",", "$", "error", "->", "status", "(", ")", ")", ";", "$", "this", "->", "controller", "->", "set", "(", "'error'", ",", "$", "error", ")", ";", "$", "this", "->", "controller", "->", "set", "(", "'url'", ",", "$", "this", "->", "controller", "->", "request", "->", "here", "(", ")", ")", ";", "if", "(", "empty", "(", "$", "template", ")", ")", "{", "$", "template", "=", "\"SerializersErrors./Errors/validation_serializer_exception\"", ";", "}", "$", "this", "->", "controller", "->", "render", "(", "$", "template", ")", ";", "$", "this", "->", "controller", "->", "afterFilter", "(", ")", ";", "return", "$", "this", "->", "controller", "->", "response", "->", "send", "(", ")", ";", "}"], "docstring": "render the ValidationBaseSerializerException in the general case\n\n@param ValidationBaseSerializerException $error an instance of ValidationBaseSerializerException\n@return void", "docstring_tokens": ["render", "the", "ValidationBaseSerializerException", "in", "the", "general", "case"], "sha": "6215a3422c299829d411668ed13893a23914bd66", "url": "https://github.com/loadsys/CakePHP-Serializers-Errors/blob/6215a3422c299829d411668ed13893a23914bd66/Lib/Error/SerializerExceptionRenderer.php#L390-L409", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Route.php", "func_name": "Route.mappings", "original_string": "public function mappings($mappings = null) {\n        if ($this->mappings === null) {\n            $this->mappings = [];\n        }\n\n        if (is_array($mappings)) {\n            $mappings = array_change_key_case($mappings);\n\n            $this->mappings = array_replace(\n                $this->mappings,\n                $mappings\n            );\n            return $this;\n        }\n\n        return $this->mappings;\n    }", "language": "php", "code": "public function mappings($mappings = null) {\n        if ($this->mappings === null) {\n            $this->mappings = [];\n        }\n\n        if (is_array($mappings)) {\n            $mappings = array_change_key_case($mappings);\n\n            $this->mappings = array_replace(\n                $this->mappings,\n                $mappings\n            );\n            return $this;\n        }\n\n        return $this->mappings;\n    }", "code_tokens": ["public", "function", "mappings", "(", "$", "mappings", "=", "null", ")", "{", "if", "(", "$", "this", "->", "mappings", "===", "null", ")", "{", "$", "this", "->", "mappings", "=", "[", "]", ";", "}", "if", "(", "is_array", "(", "$", "mappings", ")", ")", "{", "$", "mappings", "=", "array_change_key_case", "(", "$", "mappings", ")", ";", "$", "this", "->", "mappings", "=", "array_replace", "(", "$", "this", "->", "mappings", ",", "$", "mappings", ")", ";", "return", "$", "this", ";", "}", "return", "$", "this", "->", "mappings", ";", "}"], "docstring": "Gets or sets the mappings array that maps parameter names to mappings.\n\n@param array|null $mappings An array of mappings to set.\n@return Route|array Returns the current mappings or `$this` for fluent calls.", "docstring_tokens": ["Gets", "or", "sets", "the", "mappings", "array", "that", "maps", "parameter", "names", "to", "mappings", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Route.php#L144-L160", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-table/src/Table/TableRestProxy.php", "func_name": "TableRestProxy.deleteEntity", "original_string": "public function deleteEntity(\n        $table,\n        $partitionKey,\n        $rowKey,\n        DeleteEntityOptions $options = null\n    ) {\n        $this->deleteEntityAsync($table, $partitionKey, $rowKey, $options)->wait();\n    }", "language": "php", "code": "public function deleteEntity(\n        $table,\n        $partitionKey,\n        $rowKey,\n        DeleteEntityOptions $options = null\n    ) {\n        $this->deleteEntityAsync($table, $partitionKey, $rowKey, $options)->wait();\n    }", "code_tokens": ["public", "function", "deleteEntity", "(", "$", "table", ",", "$", "partitionKey", ",", "$", "rowKey", ",", "DeleteEntityOptions", "$", "options", "=", "null", ")", "{", "$", "this", "->", "deleteEntityAsync", "(", "$", "table", ",", "$", "partitionKey", ",", "$", "rowKey", ",", "$", "options", ")", "->", "wait", "(", ")", ";", "}"], "docstring": "Deletes an existing entity in a table.\n\n@param string              $table        The name of the table.\n@param string              $partitionKey The entity partition key.\n@param string              $rowKey       The entity row key.\n@param DeleteEntityOptions $options      The optional parameters.\n\n@return void\n\n@see http://msdn.microsoft.com/en-us/library/windowsazure/dd135727.aspx", "docstring_tokens": ["Deletes", "an", "existing", "entity", "in", "a", "table", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-table/src/Table/TableRestProxy.php#L1455-L1462", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Cli/Router.php", "func_name": "Router.addTask", "original_string": "public function addTask($command, $class, $action = null, array $params = [])\n    {\n        $params['task'] = $class;\n\n        $params['action'] = $action;\n\n        preg_match_all('/\\{([\\w_]+)\\}/', $command, $matches);\n\n        foreach ($matches[0] as $k => $match) {\n            $command = str_replace($match, '([[:word:]]+)', $command);\n\n            $params[substr($match, 1, -1)] = $k + 1;\n        }\n\n        return $this->add($command, $params);\n    }", "language": "php", "code": "public function addTask($command, $class, $action = null, array $params = [])\n    {\n        $params['task'] = $class;\n\n        $params['action'] = $action;\n\n        preg_match_all('/\\{([\\w_]+)\\}/', $command, $matches);\n\n        foreach ($matches[0] as $k => $match) {\n            $command = str_replace($match, '([[:word:]]+)', $command);\n\n            $params[substr($match, 1, -1)] = $k + 1;\n        }\n\n        return $this->add($command, $params);\n    }", "code_tokens": ["public", "function", "addTask", "(", "$", "command", ",", "$", "class", ",", "$", "action", "=", "null", ",", "array", "$", "params", "=", "[", "]", ")", "{", "$", "params", "[", "'task'", "]", "=", "$", "class", ";", "$", "params", "[", "'action'", "]", "=", "$", "action", ";", "preg_match_all", "(", "'/\\{([\\w_]+)\\}/'", ",", "$", "command", ",", "$", "matches", ")", ";", "foreach", "(", "$", "matches", "[", "0", "]", "as", "$", "k", "=>", "$", "match", ")", "{", "$", "command", "=", "str_replace", "(", "$", "match", ",", "'([[:word:]]+)'", ",", "$", "command", ")", ";", "$", "params", "[", "substr", "(", "$", "match", ",", "1", ",", "-", "1", ")", "]", "=", "$", "k", "+", "1", ";", "}", "return", "$", "this", "->", "add", "(", "$", "command", ",", "$", "params", ")", ";", "}"], "docstring": "Adds a route to the router, with task as class.\n\nex : $router->addTask('some', SomeTask::class);\n\n@param string      $command\n@param string      $class\n@param string|null $action\n@param array       $params\n\n@return \\Phalcon\\Cli\\Router\\Route|\\Phalcon\\Cli\\Router\\RouteInterface", "docstring_tokens": ["Adds", "a", "route", "to", "the", "router", "with", "task", "as", "class", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Cli/Router.php#L24-L39", "partition": "test"}
{"repo": "m1/Vars", "path": "src/Resource/FileResource.php", "func_name": "FileResource.getBooleanValue", "original_string": "private function getBooleanValue($value)\n    {\n        $value = strtolower($value);\n\n        if (!$value || $value === \"false\" || $value === \"no\") {\n            return false;\n        }\n\n        return true;\n    }", "language": "php", "code": "private function getBooleanValue($value)\n    {\n        $value = strtolower($value);\n\n        if (!$value || $value === \"false\" || $value === \"no\") {\n            return false;\n        }\n\n        return true;\n    }", "code_tokens": ["private", "function", "getBooleanValue", "(", "$", "value", ")", "{", "$", "value", "=", "strtolower", "(", "$", "value", ")", ";", "if", "(", "!", "$", "value", "||", "$", "value", "===", "\"false\"", "||", "$", "value", "===", "\"no\"", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "Gets the boolean value from the string\n\n@param string $value  The value to check\n\n@return bool Returns the value of the boolean", "docstring_tokens": ["Gets", "the", "boolean", "value", "from", "the", "string"], "sha": "e64beb6d67ad30c0c86ec1e77022d6803ac11eda", "url": "https://github.com/m1/Vars/blob/e64beb6d67ad30c0c86ec1e77022d6803ac11eda/src/Resource/FileResource.php#L366-L375", "partition": "test"}
{"repo": "zeageorge/database", "path": "src/Database/Database.php", "func_name": "Database.public__insertMultiple", "original_string": "protected function public__insertMultiple($table_name, array $data_to_insert)\r\n    {\r\n        $pdo = $this->getPDOInstance();\r\n        $fieldNames = \\implode('`, `', \\array_values($data_to_insert['field_names']));\r\n        $sqlQuery = \"INSERT INTO \" . $this->quoteTableName($this->getPrefixedTableName($table_name)) . \" (`$fieldNames`) VALUES \";\r\n\r\n        $i = 0;\r\n        $fieldValues = '';\r\n        foreach ($data_to_insert['values'] as $rec_value)\r\n        {\r\n            $fieldValues .= '(';\r\n            foreach ($rec_value as $value)\r\n            {\r\n                $fieldValues .= \":v$i,\";\r\n                $i++;\r\n            }\r\n            $fieldValues .= \\rtrim($fieldValues, ',') . '),';\r\n        }\r\n        $sqlQuery .= \\rtrim($fieldValues, ',') . \";\";\r\n        $sth = $pdo->prepare($sqlQuery);\r\n\r\n        $i = 0;\r\n        foreach ($data_to_insert['values'] as $rec_value)\r\n        {\r\n            foreach ($rec_value as $value)\r\n            {\r\n                $sth->bindValue(':v' . $i++, $value, $this->getPdoType(\\gettype($value)));\r\n            }\r\n        }\r\n\r\n        try\r\n        {\r\n            $pdo->beginTransaction();\r\n            $sth->execute();\r\n            $pdo->commit();\r\n        }\r\n        catch (Exception $exc)\r\n        {\r\n            $pdo->rollback();\r\n            return FALSE;\r\n        }\r\n\r\n        return TRUE;\r\n    }", "language": "php", "code": "protected function public__insertMultiple($table_name, array $data_to_insert)\r\n    {\r\n        $pdo = $this->getPDOInstance();\r\n        $fieldNames = \\implode('`, `', \\array_values($data_to_insert['field_names']));\r\n        $sqlQuery = \"INSERT INTO \" . $this->quoteTableName($this->getPrefixedTableName($table_name)) . \" (`$fieldNames`) VALUES \";\r\n\r\n        $i = 0;\r\n        $fieldValues = '';\r\n        foreach ($data_to_insert['values'] as $rec_value)\r\n        {\r\n            $fieldValues .= '(';\r\n            foreach ($rec_value as $value)\r\n            {\r\n                $fieldValues .= \":v$i,\";\r\n                $i++;\r\n            }\r\n            $fieldValues .= \\rtrim($fieldValues, ',') . '),';\r\n        }\r\n        $sqlQuery .= \\rtrim($fieldValues, ',') . \";\";\r\n        $sth = $pdo->prepare($sqlQuery);\r\n\r\n        $i = 0;\r\n        foreach ($data_to_insert['values'] as $rec_value)\r\n        {\r\n            foreach ($rec_value as $value)\r\n            {\r\n                $sth->bindValue(':v' . $i++, $value, $this->getPdoType(\\gettype($value)));\r\n            }\r\n        }\r\n\r\n        try\r\n        {\r\n            $pdo->beginTransaction();\r\n            $sth->execute();\r\n            $pdo->commit();\r\n        }\r\n        catch (Exception $exc)\r\n        {\r\n            $pdo->rollback();\r\n            return FALSE;\r\n        }\r\n\r\n        return TRUE;\r\n    }", "code_tokens": ["protected", "function", "public__insertMultiple", "(", "$", "table_name", ",", "array", "$", "data_to_insert", ")", "{", "$", "pdo", "=", "$", "this", "->", "getPDOInstance", "(", ")", ";", "$", "fieldNames", "=", "\\", "implode", "(", "'`, `'", ",", "\\", "array_values", "(", "$", "data_to_insert", "[", "'field_names'", "]", ")", ")", ";", "$", "sqlQuery", "=", "\"INSERT INTO \"", ".", "$", "this", "->", "quoteTableName", "(", "$", "this", "->", "getPrefixedTableName", "(", "$", "table_name", ")", ")", ".", "\" (`$fieldNames`) VALUES \"", ";", "$", "i", "=", "0", ";", "$", "fieldValues", "=", "''", ";", "foreach", "(", "$", "data_to_insert", "[", "'values'", "]", "as", "$", "rec_value", ")", "{", "$", "fieldValues", ".=", "'('", ";", "foreach", "(", "$", "rec_value", "as", "$", "value", ")", "{", "$", "fieldValues", ".=", "\":v$i,\"", ";", "$", "i", "++", ";", "}", "$", "fieldValues", ".=", "\\", "rtrim", "(", "$", "fieldValues", ",", "','", ")", ".", "'),'", ";", "}", "$", "sqlQuery", ".=", "\\", "rtrim", "(", "$", "fieldValues", ",", "','", ")", ".", "\";\"", ";", "$", "sth", "=", "$", "pdo", "->", "prepare", "(", "$", "sqlQuery", ")", ";", "$", "i", "=", "0", ";", "foreach", "(", "$", "data_to_insert", "[", "'values'", "]", "as", "$", "rec_value", ")", "{", "foreach", "(", "$", "rec_value", "as", "$", "value", ")", "{", "$", "sth", "->", "bindValue", "(", "':v'", ".", "$", "i", "++", ",", "$", "value", ",", "$", "this", "->", "getPdoType", "(", "\\", "gettype", "(", "$", "value", ")", ")", ")", ";", "}", "}", "try", "{", "$", "pdo", "->", "beginTransaction", "(", ")", ";", "$", "sth", "->", "execute", "(", ")", ";", "$", "pdo", "->", "commit", "(", ")", ";", "}", "catch", "(", "Exception", "$", "exc", ")", "{", "$", "pdo", "->", "rollback", "(", ")", ";", "return", "FALSE", ";", "}", "return", "TRUE", ";", "}"], "docstring": "insert multiple records into a table\n\n@param string $table_name A name of table to insert into\n@param array $data_to_insert An associative array:\n[\n'field_names' => ['', '', '', '', '', ],\n'values' => [\n['', '', '', '', '', ],\n['', '', '', '', '', ],\n['', '', '', '', '', ],\n['', '', '', '', '', ],\n],\n]\n@return boolean Returns TRUE on success or FALSE on failure\n@see http://stackoverflow.com/questions/1176352/pdo-prepared-inserts-multiple-rows-in-single-query\n@see http://stackoverflow.com/questions/19680494/insert-multiple-rows-with-pdo-prepared-statements\n@see http://stackoverflow.com/questions/10060721/pdo-mysql-insert-multiple-rows-in-one-query\n@see http://dev.mysql.com/doc/refman/5.7/en/load-data.html", "docstring_tokens": ["insert", "multiple", "records", "into", "a", "table"], "sha": "6fcad7792f4878d943940055e73b97e1b0b7bfcc", "url": "https://github.com/zeageorge/database/blob/6fcad7792f4878d943940055e73b97e1b0b7bfcc/src/Database/Database.php#L695-L738", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Console/NativeKernel.php", "func_name": "NativeKernel.handle", "original_string": "public function handle(Input $input, Output $output): int\n    {\n        $exitCode = 1;\n\n        try {\n            $exitCode = $this->console->dispatch($input, $output);\n        } catch (Throwable $exception) {\n            // Show the exception\n            // TODO: Implement\n            dd($exception);\n        }\n\n        $this->app->events()->trigger(\n            ConsoleKernelHandled::class,\n            [new ConsoleKernelHandled($input, $exitCode)]\n        );\n\n        return $exitCode;\n    }", "language": "php", "code": "public function handle(Input $input, Output $output): int\n    {\n        $exitCode = 1;\n\n        try {\n            $exitCode = $this->console->dispatch($input, $output);\n        } catch (Throwable $exception) {\n            // Show the exception\n            // TODO: Implement\n            dd($exception);\n        }\n\n        $this->app->events()->trigger(\n            ConsoleKernelHandled::class,\n            [new ConsoleKernelHandled($input, $exitCode)]\n        );\n\n        return $exitCode;\n    }", "code_tokens": ["public", "function", "handle", "(", "Input", "$", "input", ",", "Output", "$", "output", ")", ":", "int", "{", "$", "exitCode", "=", "1", ";", "try", "{", "$", "exitCode", "=", "$", "this", "->", "console", "->", "dispatch", "(", "$", "input", ",", "$", "output", ")", ";", "}", "catch", "(", "Throwable", "$", "exception", ")", "{", "// Show the exception", "// TODO: Implement", "dd", "(", "$", "exception", ")", ";", "}", "$", "this", "->", "app", "->", "events", "(", ")", "->", "trigger", "(", "ConsoleKernelHandled", "::", "class", ",", "[", "new", "ConsoleKernelHandled", "(", "$", "input", ",", "$", "exitCode", ")", "]", ")", ";", "return", "$", "exitCode", ";", "}"], "docstring": "Handle a console input.\n\n@param Input  $input  The input\n@param Output $output The output\n\n@throws \\Valkyrja\\Http\\Exceptions\\HttpException\n\n@return int", "docstring_tokens": ["Handle", "a", "console", "input", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Console/NativeKernel.php#L67-L85", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Helper/MapHelper.php", "func_name": "MapHelper.renderJsBefore", "original_string": "public function renderJsBefore(Map $map)\n    {\n        $output = array();\n\n        foreach ($this->getExtensionHelpers() as $extension) {\n            $output[] = $extension->renderBefore($map);\n        }\n\n        return implode('', $output);\n    }", "language": "php", "code": "public function renderJsBefore(Map $map)\n    {\n        $output = array();\n\n        foreach ($this->getExtensionHelpers() as $extension) {\n            $output[] = $extension->renderBefore($map);\n        }\n\n        return implode('', $output);\n    }", "code_tokens": ["public", "function", "renderJsBefore", "(", "Map", "$", "map", ")", "{", "$", "output", "=", "array", "(", ")", ";", "foreach", "(", "$", "this", "->", "getExtensionHelpers", "(", ")", "as", "$", "extension", ")", "{", "$", "output", "[", "]", "=", "$", "extension", "->", "renderBefore", "(", "$", "map", ")", ";", "}", "return", "implode", "(", "''", ",", "$", "output", ")", ";", "}"], "docstring": "Renders JS code just before the generated one.\n\n@param \\Ivory\\GoogleMap\\Map $map The map.\n\n@return string The JS output.", "docstring_tokens": ["Renders", "JS", "code", "just", "before", "the", "generated", "one", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Helper/MapHelper.php#L999-L1008", "partition": "test"}
{"repo": "cundd/noshi", "path": "Classes/Cundd/Noshi/Domain/Model/Page.php", "func_name": "Page.getContent", "original_string": "public function getContent()\n    {\n        if (!$this->parsedContent) {\n            $this->parsedContent = MarkdownFactory::getMarkdownRenderer()->transform($this->getRawContent());\n        }\n\n        return $this->parsedContent;\n    }", "language": "php", "code": "public function getContent()\n    {\n        if (!$this->parsedContent) {\n            $this->parsedContent = MarkdownFactory::getMarkdownRenderer()->transform($this->getRawContent());\n        }\n\n        return $this->parsedContent;\n    }", "code_tokens": ["public", "function", "getContent", "(", ")", "{", "if", "(", "!", "$", "this", "->", "parsedContent", ")", "{", "$", "this", "->", "parsedContent", "=", "MarkdownFactory", "::", "getMarkdownRenderer", "(", ")", "->", "transform", "(", "$", "this", "->", "getRawContent", "(", ")", ")", ";", "}", "return", "$", "this", "->", "parsedContent", ";", "}"], "docstring": "Returns the parsed content\n\n@return string", "docstring_tokens": ["Returns", "the", "parsed", "content"], "sha": "4c236ccd08532d81ab1f54fc0634ea0445c43388", "url": "https://github.com/cundd/noshi/blob/4c236ccd08532d81ab1f54fc0634ea0445c43388/Classes/Cundd/Noshi/Domain/Model/Page.php#L151-L158", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Services/Directions/DirectionsWaypoint.php", "func_name": "DirectionsWaypoint.setLocation", "original_string": "public function setLocation()\n    {\n        $args = func_get_args();\n\n        if (isset($args[0]) && is_string($args[0])) {\n            $this->location = $args[0];\n        } elseif (isset($args[0]) && ($args[0] instanceof Coordinate)) {\n            $this->location = $args[0];\n        } elseif ((isset($args[0]) && is_numeric($args[0])) && (isset($args[1]) && is_numeric($args[1]))) {\n            if ($this->location === null) {\n                $this->location = new Coordinate();\n            }\n\n            $this->location->setLatitude($args[0]);\n            $this->location->setLongitude($args[1]);\n\n            if (isset($args[2]) && is_bool($args[2])) {\n                $this->location->setNoWrap($args[2]);\n            }\n        } else {\n            throw DirectionsException::invalidDirectionsWaypointLocation();\n        }\n    }", "language": "php", "code": "public function setLocation()\n    {\n        $args = func_get_args();\n\n        if (isset($args[0]) && is_string($args[0])) {\n            $this->location = $args[0];\n        } elseif (isset($args[0]) && ($args[0] instanceof Coordinate)) {\n            $this->location = $args[0];\n        } elseif ((isset($args[0]) && is_numeric($args[0])) && (isset($args[1]) && is_numeric($args[1]))) {\n            if ($this->location === null) {\n                $this->location = new Coordinate();\n            }\n\n            $this->location->setLatitude($args[0]);\n            $this->location->setLongitude($args[1]);\n\n            if (isset($args[2]) && is_bool($args[2])) {\n                $this->location->setNoWrap($args[2]);\n            }\n        } else {\n            throw DirectionsException::invalidDirectionsWaypointLocation();\n        }\n    }", "code_tokens": ["public", "function", "setLocation", "(", ")", "{", "$", "args", "=", "func_get_args", "(", ")", ";", "if", "(", "isset", "(", "$", "args", "[", "0", "]", ")", "&&", "is_string", "(", "$", "args", "[", "0", "]", ")", ")", "{", "$", "this", "->", "location", "=", "$", "args", "[", "0", "]", ";", "}", "elseif", "(", "isset", "(", "$", "args", "[", "0", "]", ")", "&&", "(", "$", "args", "[", "0", "]", "instanceof", "Coordinate", ")", ")", "{", "$", "this", "->", "location", "=", "$", "args", "[", "0", "]", ";", "}", "elseif", "(", "(", "isset", "(", "$", "args", "[", "0", "]", ")", "&&", "is_numeric", "(", "$", "args", "[", "0", "]", ")", ")", "&&", "(", "isset", "(", "$", "args", "[", "1", "]", ")", "&&", "is_numeric", "(", "$", "args", "[", "1", "]", ")", ")", ")", "{", "if", "(", "$", "this", "->", "location", "===", "null", ")", "{", "$", "this", "->", "location", "=", "new", "Coordinate", "(", ")", ";", "}", "$", "this", "->", "location", "->", "setLatitude", "(", "$", "args", "[", "0", "]", ")", ";", "$", "this", "->", "location", "->", "setLongitude", "(", "$", "args", "[", "1", "]", ")", ";", "if", "(", "isset", "(", "$", "args", "[", "2", "]", ")", "&&", "is_bool", "(", "$", "args", "[", "2", "]", ")", ")", "{", "$", "this", "->", "location", "->", "setNoWrap", "(", "$", "args", "[", "2", "]", ")", ";", "}", "}", "else", "{", "throw", "DirectionsException", "::", "invalidDirectionsWaypointLocation", "(", ")", ";", "}", "}"], "docstring": "Sets the directions waypoint location.\n\nAvailable prototypes:\n- function setLocation(string $destination)\n- function setLocation(Ivory\\GoogleMap\\Base\\Coordinate $destination)\n- function setLocation(double $latitude, double $longitude, boolean $noWrap)\n\n@throws \\Ivory\\GoogleMap\\Exception\\DirectionsException If the location is not valid (prototypes).", "docstring_tokens": ["Sets", "the", "directions", "waypoint", "location", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Services/Directions/DirectionsWaypoint.php#L61-L83", "partition": "test"}
{"repo": "jcalderonzumba/gastonjs", "path": "src/Exception/JavascriptError.php", "func_name": "JavascriptError.message", "original_string": "public function message() {\n    $error = \"One or more errors were raised in the Javascript code on the page.\n            If you don't care about these errors, you can ignore them by\n            setting js_errors: false in your Poltergeist configuration (see documentation for details).\";\n    //TODO: add javascript errors\n    $jsErrors = $this->javascriptErrors();\n    foreach($jsErrors as $jsError){\n      $error = \"$error\\n$jsError\";\n    }\n    return $error;\n  }", "language": "php", "code": "public function message() {\n    $error = \"One or more errors were raised in the Javascript code on the page.\n            If you don't care about these errors, you can ignore them by\n            setting js_errors: false in your Poltergeist configuration (see documentation for details).\";\n    //TODO: add javascript errors\n    $jsErrors = $this->javascriptErrors();\n    foreach($jsErrors as $jsError){\n      $error = \"$error\\n$jsError\";\n    }\n    return $error;\n  }", "code_tokens": ["public", "function", "message", "(", ")", "{", "$", "error", "=", "\"One or more errors were raised in the Javascript code on the page.\n            If you don't care about these errors, you can ignore them by\n            setting js_errors: false in your Poltergeist configuration (see documentation for details).\"", ";", "//TODO: add javascript errors", "$", "jsErrors", "=", "$", "this", "->", "javascriptErrors", "(", ")", ";", "foreach", "(", "$", "jsErrors", "as", "$", "jsError", ")", "{", "$", "error", "=", "\"$error\\n$jsError\"", ";", "}", "return", "$", "error", ";", "}"], "docstring": "Returns the javascript errors found\n@return string", "docstring_tokens": ["Returns", "the", "javascript", "errors", "found"], "sha": "fe5f2506264343ce74db4a7ab1c0bb3f9b8bc35a", "url": "https://github.com/jcalderonzumba/gastonjs/blob/fe5f2506264343ce74db4a7ab1c0bb3f9b8bc35a/src/Exception/JavascriptError.php#L37-L47", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Assets/AbstractJavascriptVariableAsset.php", "func_name": "AbstractJavascriptVariableAsset.setPrefixJavascriptVariable", "original_string": "public function setPrefixJavascriptVariable($prefixJavascriptVariable)\n    {\n        if (!is_string($prefixJavascriptVariable)) {\n            throw AssetException::invalidPrefixJavascriptVariable();\n        }\n\n        $this->javascriptVariable = $this->generateJavascriptVariable($prefixJavascriptVariable);\n    }", "language": "php", "code": "public function setPrefixJavascriptVariable($prefixJavascriptVariable)\n    {\n        if (!is_string($prefixJavascriptVariable)) {\n            throw AssetException::invalidPrefixJavascriptVariable();\n        }\n\n        $this->javascriptVariable = $this->generateJavascriptVariable($prefixJavascriptVariable);\n    }", "code_tokens": ["public", "function", "setPrefixJavascriptVariable", "(", "$", "prefixJavascriptVariable", ")", "{", "if", "(", "!", "is_string", "(", "$", "prefixJavascriptVariable", ")", ")", "{", "throw", "AssetException", "::", "invalidPrefixJavascriptVariable", "(", ")", ";", "}", "$", "this", "->", "javascriptVariable", "=", "$", "this", "->", "generateJavascriptVariable", "(", "$", "prefixJavascriptVariable", ")", ";", "}"], "docstring": "Sets the prefix of the javascript variable.\n\n@param string $prefixJavascriptVariable The prefix of the javascript variable.\n\n@throws \\Ivory\\GoogleMap\\Exception\\AssetException If the prefix javascript variable is not valid.", "docstring_tokens": ["Sets", "the", "prefix", "of", "the", "javascript", "variable", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Assets/AbstractJavascriptVariableAsset.php#L45-L52", "partition": "test"}
{"repo": "Solve/Database", "path": "Models/ModelOperator.php", "func_name": "ModelOperator.loadStructureFiles", "original_string": "public function loadStructureFiles($path = null) {\n        if (empty($path)) $path = $this->_structuresPath;\n\n        $files = FSService::getInstance()->in($path, true)->find('*.yml', FSService::TYPE_FILE, FSService::HYDRATE_NAMES_PATH);\n        $data  = array();\n        //if (isset($files['structure.yml'])) {\n        //    $data = Yaml::parse(file_get_contents($files['structure.yml']));\n        //    if (is_null($data)) $data = array();\n        //    unset($files['structure.yml']);\n        //}\n        foreach ($files as $file) {\n            $modelData      = Yaml::parse(file_get_contents($file));\n            $modelName      = !empty($modelData['model']) ? $modelData['model'] : substr($file, strrpos($file, '/') + 1, -4);\n            $modelNamespace = \"Entities\";\n            $data           = array_merge($data, array($modelNamespace . \"\\\\\" . ucfirst($modelName) => $modelData));\n        }\n\n        $data              = self::fixYamlStructures($data);\n        $this->_structures = $data;\n        return $this;\n    }", "language": "php", "code": "public function loadStructureFiles($path = null) {\n        if (empty($path)) $path = $this->_structuresPath;\n\n        $files = FSService::getInstance()->in($path, true)->find('*.yml', FSService::TYPE_FILE, FSService::HYDRATE_NAMES_PATH);\n        $data  = array();\n        //if (isset($files['structure.yml'])) {\n        //    $data = Yaml::parse(file_get_contents($files['structure.yml']));\n        //    if (is_null($data)) $data = array();\n        //    unset($files['structure.yml']);\n        //}\n        foreach ($files as $file) {\n            $modelData      = Yaml::parse(file_get_contents($file));\n            $modelName      = !empty($modelData['model']) ? $modelData['model'] : substr($file, strrpos($file, '/') + 1, -4);\n            $modelNamespace = \"Entities\";\n            $data           = array_merge($data, array($modelNamespace . \"\\\\\" . ucfirst($modelName) => $modelData));\n        }\n\n        $data              = self::fixYamlStructures($data);\n        $this->_structures = $data;\n        return $this;\n    }", "code_tokens": ["public", "function", "loadStructureFiles", "(", "$", "path", "=", "null", ")", "{", "if", "(", "empty", "(", "$", "path", ")", ")", "$", "path", "=", "$", "this", "->", "_structuresPath", ";", "$", "files", "=", "FSService", "::", "getInstance", "(", ")", "->", "in", "(", "$", "path", ",", "true", ")", "->", "find", "(", "'*.yml'", ",", "FSService", "::", "TYPE_FILE", ",", "FSService", "::", "HYDRATE_NAMES_PATH", ")", ";", "$", "data", "=", "array", "(", ")", ";", "//if (isset($files['structure.yml'])) {", "//    $data = Yaml::parse(file_get_contents($files['structure.yml']));", "//    if (is_null($data)) $data = array();", "//    unset($files['structure.yml']);", "//}", "foreach", "(", "$", "files", "as", "$", "file", ")", "{", "$", "modelData", "=", "Yaml", "::", "parse", "(", "file_get_contents", "(", "$", "file", ")", ")", ";", "$", "modelName", "=", "!", "empty", "(", "$", "modelData", "[", "'model'", "]", ")", "?", "$", "modelData", "[", "'model'", "]", ":", "substr", "(", "$", "file", ",", "strrpos", "(", "$", "file", ",", "'/'", ")", "+", "1", ",", "-", "4", ")", ";", "$", "modelNamespace", "=", "\"Entities\"", ";", "$", "data", "=", "array_merge", "(", "$", "data", ",", "array", "(", "$", "modelNamespace", ".", "\"\\\\\"", ".", "ucfirst", "(", "$", "modelName", ")", "=>", "$", "modelData", ")", ")", ";", "}", "$", "data", "=", "self", "::", "fixYamlStructures", "(", "$", "data", ")", ";", "$", "this", "->", "_structures", "=", "$", "data", ";", "return", "$", "this", ";", "}"], "docstring": "Loading structure from YAML files\nFirst loading \"structure.yml\" if it exists\n\n@param mixed $path Path where yaml are stored\n@return $this", "docstring_tokens": ["Loading", "structure", "from", "YAML", "files", "First", "loading", "structure", ".", "yml", "if", "it", "exists"], "sha": "4de9027cf6fa9c4c5a61c562a02b87a19dec524e", "url": "https://github.com/Solve/Database/blob/4de9027cf6fa9c4c5a61c562a02b87a19dec524e/Models/ModelOperator.php#L150-L170", "partition": "test"}
{"repo": "stechstudio/laravel-ssh-tunnel", "path": "src/Jobs/CreateTunnel.php", "func_name": "CreateTunnel.verifyTunnel", "original_string": "protected function verifyTunnel()\n    {\n        if (config('tunneler.verify_process') == 'bash') {\n            return $this->runCommand($this->bashCommand);\n        }\n\n        return $this->runCommand($this->ncCommand);\n    }", "language": "php", "code": "protected function verifyTunnel()\n    {\n        if (config('tunneler.verify_process') == 'bash') {\n            return $this->runCommand($this->bashCommand);\n        }\n\n        return $this->runCommand($this->ncCommand);\n    }", "code_tokens": ["protected", "function", "verifyTunnel", "(", ")", "{", "if", "(", "config", "(", "'tunneler.verify_process'", ")", "==", "'bash'", ")", "{", "return", "$", "this", "->", "runCommand", "(", "$", "this", "->", "bashCommand", ")", ";", "}", "return", "$", "this", "->", "runCommand", "(", "$", "this", "->", "ncCommand", ")", ";", "}"], "docstring": "Verifies whether the tunnel is active or not.\n@return bool", "docstring_tokens": ["Verifies", "whether", "the", "tunnel", "is", "active", "or", "not", "."], "sha": "c041dddcc8ad5eb92a40610d6e16812fe5141c29", "url": "https://github.com/stechstudio/laravel-ssh-tunnel/blob/c041dddcc8ad5eb92a40610d6e16812fe5141c29/src/Jobs/CreateTunnel.php#L95-L102", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/XSD2PHP/src/com/mikebevz/xsd2php/Wsdl.php", "func_name": "Wsdl.addPortOperations", "original_string": "private function addPortOperations()\n    {\n        $methods = $this->getClassMethods();\n\n        foreach ($methods as $method) {\n            $data = $this->getMethodIO($method->name);\n\n            $input         = false;\n            $output        = false;\n            $bindingInput  = false;\n            $bindingOutput = false;\n\n            if (array_key_exists(\"params\", $data)) {\n                $input = $this->targetNsPrefix.\":\".$method->name.$this->requestSuffix;\n            }\n\n            if (array_key_exists(\"return\", $data)) {\n                $output = $this->targetNsPrefix.\":\".$method->name.$this->responseSuffix;\n            }\n\n            $this->wsdl->addPortOperation($this->portType,\n                                          $method->name,\n                                          $input,\n                                          $output);\n        }\n    }", "language": "php", "code": "private function addPortOperations()\n    {\n        $methods = $this->getClassMethods();\n\n        foreach ($methods as $method) {\n            $data = $this->getMethodIO($method->name);\n\n            $input         = false;\n            $output        = false;\n            $bindingInput  = false;\n            $bindingOutput = false;\n\n            if (array_key_exists(\"params\", $data)) {\n                $input = $this->targetNsPrefix.\":\".$method->name.$this->requestSuffix;\n            }\n\n            if (array_key_exists(\"return\", $data)) {\n                $output = $this->targetNsPrefix.\":\".$method->name.$this->responseSuffix;\n            }\n\n            $this->wsdl->addPortOperation($this->portType,\n                                          $method->name,\n                                          $input,\n                                          $output);\n        }\n    }", "code_tokens": ["private", "function", "addPortOperations", "(", ")", "{", "$", "methods", "=", "$", "this", "->", "getClassMethods", "(", ")", ";", "foreach", "(", "$", "methods", "as", "$", "method", ")", "{", "$", "data", "=", "$", "this", "->", "getMethodIO", "(", "$", "method", "->", "name", ")", ";", "$", "input", "=", "false", ";", "$", "output", "=", "false", ";", "$", "bindingInput", "=", "false", ";", "$", "bindingOutput", "=", "false", ";", "if", "(", "array_key_exists", "(", "\"params\"", ",", "$", "data", ")", ")", "{", "$", "input", "=", "$", "this", "->", "targetNsPrefix", ".", "\":\"", ".", "$", "method", "->", "name", ".", "$", "this", "->", "requestSuffix", ";", "}", "if", "(", "array_key_exists", "(", "\"return\"", ",", "$", "data", ")", ")", "{", "$", "output", "=", "$", "this", "->", "targetNsPrefix", ".", "\":\"", ".", "$", "method", "->", "name", ".", "$", "this", "->", "responseSuffix", ";", "}", "$", "this", "->", "wsdl", "->", "addPortOperation", "(", "$", "this", "->", "portType", ",", "$", "method", "->", "name", ",", "$", "input", ",", "$", "output", ")", ";", "}", "}"], "docstring": "Add Port operations\n\n@return void", "docstring_tokens": ["Add", "Port", "operations"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/XSD2PHP/src/com/mikebevz/xsd2php/Wsdl.php#L317-L342", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Helpers/Html.php", "func_name": "Html.button", "original_string": "public static function button($content = 'Button', $options = [], $encoding = null)\n    {\n        if (!isset($options['type'])) {\n            $options['type'] = 'button';\n        }\n\n        return static::tag('button', $content, $options, $encoding);\n    }", "language": "php", "code": "public static function button($content = 'Button', $options = [], $encoding = null)\n    {\n        if (!isset($options['type'])) {\n            $options['type'] = 'button';\n        }\n\n        return static::tag('button', $content, $options, $encoding);\n    }", "code_tokens": ["public", "static", "function", "button", "(", "$", "content", "=", "'Button'", ",", "$", "options", "=", "[", "]", ",", "$", "encoding", "=", "null", ")", "{", "if", "(", "!", "isset", "(", "$", "options", "[", "'type'", "]", ")", ")", "{", "$", "options", "[", "'type'", "]", "=", "'button'", ";", "}", "return", "static", "::", "tag", "(", "'button'", ",", "$", "content", ",", "$", "options", ",", "$", "encoding", ")", ";", "}"], "docstring": "Generates a button tag.\n@param string $content the content enclosed within the button tag. It will NOT be HTML-encoded.\nTherefore you can pass in HTML code such as an image tag. If this is is coming from end users,\nyou should consider [[encode()]] it to prevent XSS attacks.\n@param array  $options the tag options in terms of name-value pairs. These will be rendered as\nthe attributes of the resulting tag. The values will be HTML-encoded using [[encode()]].\nIf a value is null, the corresponding attribute will not be rendered.\nSee [[renderTagAttributes()]] for details on how attributes are being rendered.\n@param string $encoding\n@return string the generated button tag", "docstring_tokens": ["Generates", "a", "button", "tag", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Helpers/Html.php#L517-L524", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/View/InputForm.php", "func_name": "InputForm.validateForm", "original_string": "protected function validateForm($cleanError = true)\n    {\n        if($cleanError == true)\n        {\n            $this->validateErrors = array();\n        }\n        $this->dataPanel->rewind();\n        while($this->dataPanel->valid())\n        {\n            /* @var $element Element */\n            $element = $this->dataPanel->current();\n            if($element->label)\n            {\n                $elementName = $element->label;\n            }\n            else\n            {\n                $elementName = $element->text;\n            }\n            if ($element->checkRequired() === true &&\n                    ($element->value==null || $element->value == \"\"))\n            {\n                $errorMessage = $this->getMessage(\"FORM_ELEMENT_REQUIRED\",array($elementName));\n                $this->validateErrors[$element->objectName] = $errorMessage;\n                //return false;\n            }\n            elseif ($element->value!==null && $element->Validate() == false)\n            {\n                $validateService = Openbizx::getService(VALIDATE_SERVICE);\n                $errorMessage = $this->getMessage(\"FORM_ELEMENT_INVALID_INPUT\",array($elementName,$value,$element->validator));                \n                if ($errorMessage == false)\n                { //Couldn't get a clear error message so let's try this\n                    $errorMessage = $validateService->getErrorMessage($element->validator, $elementName);\n                }\n                $this->validateErrors[$element->objectName] = $errorMessage;\n                //return false;\n            }\n            $this->dataPanel->next() ;\n        }\n        if (count($this->validateErrors) > 0)\n        {\n            throw new Openbizx\\Validation\\Exception($this->validateErrors);\n            return false;\n        }\n        return true;\n    }", "language": "php", "code": "protected function validateForm($cleanError = true)\n    {\n        if($cleanError == true)\n        {\n            $this->validateErrors = array();\n        }\n        $this->dataPanel->rewind();\n        while($this->dataPanel->valid())\n        {\n            /* @var $element Element */\n            $element = $this->dataPanel->current();\n            if($element->label)\n            {\n                $elementName = $element->label;\n            }\n            else\n            {\n                $elementName = $element->text;\n            }\n            if ($element->checkRequired() === true &&\n                    ($element->value==null || $element->value == \"\"))\n            {\n                $errorMessage = $this->getMessage(\"FORM_ELEMENT_REQUIRED\",array($elementName));\n                $this->validateErrors[$element->objectName] = $errorMessage;\n                //return false;\n            }\n            elseif ($element->value!==null && $element->Validate() == false)\n            {\n                $validateService = Openbizx::getService(VALIDATE_SERVICE);\n                $errorMessage = $this->getMessage(\"FORM_ELEMENT_INVALID_INPUT\",array($elementName,$value,$element->validator));                \n                if ($errorMessage == false)\n                { //Couldn't get a clear error message so let's try this\n                    $errorMessage = $validateService->getErrorMessage($element->validator, $elementName);\n                }\n                $this->validateErrors[$element->objectName] = $errorMessage;\n                //return false;\n            }\n            $this->dataPanel->next() ;\n        }\n        if (count($this->validateErrors) > 0)\n        {\n            throw new Openbizx\\Validation\\Exception($this->validateErrors);\n            return false;\n        }\n        return true;\n    }", "code_tokens": ["protected", "function", "validateForm", "(", "$", "cleanError", "=", "true", ")", "{", "if", "(", "$", "cleanError", "==", "true", ")", "{", "$", "this", "->", "validateErrors", "=", "array", "(", ")", ";", "}", "$", "this", "->", "dataPanel", "->", "rewind", "(", ")", ";", "while", "(", "$", "this", "->", "dataPanel", "->", "valid", "(", ")", ")", "{", "/* @var $element Element */", "$", "element", "=", "$", "this", "->", "dataPanel", "->", "current", "(", ")", ";", "if", "(", "$", "element", "->", "label", ")", "{", "$", "elementName", "=", "$", "element", "->", "label", ";", "}", "else", "{", "$", "elementName", "=", "$", "element", "->", "text", ";", "}", "if", "(", "$", "element", "->", "checkRequired", "(", ")", "===", "true", "&&", "(", "$", "element", "->", "value", "==", "null", "||", "$", "element", "->", "value", "==", "\"\"", ")", ")", "{", "$", "errorMessage", "=", "$", "this", "->", "getMessage", "(", "\"FORM_ELEMENT_REQUIRED\"", ",", "array", "(", "$", "elementName", ")", ")", ";", "$", "this", "->", "validateErrors", "[", "$", "element", "->", "objectName", "]", "=", "$", "errorMessage", ";", "//return false;", "}", "elseif", "(", "$", "element", "->", "value", "!==", "null", "&&", "$", "element", "->", "Validate", "(", ")", "==", "false", ")", "{", "$", "validateService", "=", "Openbizx", "::", "getService", "(", "VALIDATE_SERVICE", ")", ";", "$", "errorMessage", "=", "$", "this", "->", "getMessage", "(", "\"FORM_ELEMENT_INVALID_INPUT\"", ",", "array", "(", "$", "elementName", ",", "$", "value", ",", "$", "element", "->", "validator", ")", ")", ";", "if", "(", "$", "errorMessage", "==", "false", ")", "{", "//Couldn't get a clear error message so let's try this", "$", "errorMessage", "=", "$", "validateService", "->", "getErrorMessage", "(", "$", "element", "->", "validator", ",", "$", "elementName", ")", ";", "}", "$", "this", "->", "validateErrors", "[", "$", "element", "->", "objectName", "]", "=", "$", "errorMessage", ";", "//return false;", "}", "$", "this", "->", "dataPanel", "->", "next", "(", ")", ";", "}", "if", "(", "count", "(", "$", "this", "->", "validateErrors", ")", ">", "0", ")", "{", "throw", "new", "Openbizx", "\\", "Validation", "\\", "Exception", "(", "$", "this", "->", "validateErrors", ")", ";", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "Validate input on EasyForm level\ndefault form validation do nothing.\ndevelopers need to override this method to implement their logic\n\n@return boolean", "docstring_tokens": ["Validate", "input", "on", "EasyForm", "level", "default", "form", "validation", "do", "nothing", ".", "developers", "need", "to", "override", "this", "method", "to", "implement", "their", "logic"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/View/InputForm.php#L86-L131", "partition": "test"}
{"repo": "cundd/noshi", "path": "Classes/Cundd/Noshi/Command/AbstractCommandController.php", "func_name": "AbstractCommandController.helpCommand", "original_string": "public function helpCommand()\n    {\n        $availableCommands = $this->getAvailableCommands();\n        $longestCommandNameLength = max(\n            array_map(\n                function ($item) {\n                    return strlen($item);\n                },\n                array_keys($availableCommands)\n            )\n        );\n\n        $longestCommandNameLength += 4;\n        foreach ($availableCommands as $command => $help) {\n            $line = ''\n                . self::ESCAPE . self::GREEN\n                . str_pad($command, $longestCommandNameLength)\n                . self::ESCAPE . self::NORMAL\n                . $help;\n            $this->outputLine($line);\n        }\n    }", "language": "php", "code": "public function helpCommand()\n    {\n        $availableCommands = $this->getAvailableCommands();\n        $longestCommandNameLength = max(\n            array_map(\n                function ($item) {\n                    return strlen($item);\n                },\n                array_keys($availableCommands)\n            )\n        );\n\n        $longestCommandNameLength += 4;\n        foreach ($availableCommands as $command => $help) {\n            $line = ''\n                . self::ESCAPE . self::GREEN\n                . str_pad($command, $longestCommandNameLength)\n                . self::ESCAPE . self::NORMAL\n                . $help;\n            $this->outputLine($line);\n        }\n    }", "code_tokens": ["public", "function", "helpCommand", "(", ")", "{", "$", "availableCommands", "=", "$", "this", "->", "getAvailableCommands", "(", ")", ";", "$", "longestCommandNameLength", "=", "max", "(", "array_map", "(", "function", "(", "$", "item", ")", "{", "return", "strlen", "(", "$", "item", ")", ";", "}", ",", "array_keys", "(", "$", "availableCommands", ")", ")", ")", ";", "$", "longestCommandNameLength", "+=", "4", ";", "foreach", "(", "$", "availableCommands", "as", "$", "command", "=>", "$", "help", ")", "{", "$", "line", "=", "''", ".", "self", "::", "ESCAPE", ".", "self", "::", "GREEN", ".", "str_pad", "(", "$", "command", ",", "$", "longestCommandNameLength", ")", ".", "self", "::", "ESCAPE", ".", "self", "::", "NORMAL", ".", "$", "help", ";", "$", "this", "->", "outputLine", "(", "$", "line", ")", ";", "}", "}"], "docstring": "Displays this message", "docstring_tokens": ["Displays", "this", "message"], "sha": "4c236ccd08532d81ab1f54fc0634ea0445c43388", "url": "https://github.com/cundd/noshi/blob/4c236ccd08532d81ab1f54fc0634ea0445c43388/Classes/Cundd/Noshi/Command/AbstractCommandController.php#L245-L266", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Mail/TransportFactory.php", "func_name": "TransportFactory.createSparkPostTransport", "original_string": "protected function createSparkPostTransport(array $config): SparkPostTransport\n    {\n        return new SparkPostTransport(\n            $this->getHttpClient($config),\n            $config['secret'],\n            $config['options'] ?? [],\n            $config['endpoint'] ?? null\n        );\n    }", "language": "php", "code": "protected function createSparkPostTransport(array $config): SparkPostTransport\n    {\n        return new SparkPostTransport(\n            $this->getHttpClient($config),\n            $config['secret'],\n            $config['options'] ?? [],\n            $config['endpoint'] ?? null\n        );\n    }", "code_tokens": ["protected", "function", "createSparkPostTransport", "(", "array", "$", "config", ")", ":", "SparkPostTransport", "{", "return", "new", "SparkPostTransport", "(", "$", "this", "->", "getHttpClient", "(", "$", "config", ")", ",", "$", "config", "[", "'secret'", "]", ",", "$", "config", "[", "'options'", "]", "??", "[", "]", ",", "$", "config", "[", "'endpoint'", "]", "??", "null", ")", ";", "}"], "docstring": "Create an instance of the SparkPost Swift Transport driver.\n\n@param array $config\n\n@return \\Viserio\\Component\\Mail\\Transport\\SparkPostTransport", "docstring_tokens": ["Create", "an", "instance", "of", "the", "SparkPost", "Swift", "Transport", "driver", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Mail/TransportFactory.php#L255-L263", "partition": "test"}
{"repo": "aphiria/router", "path": "src/Builders/RouteBuilderRegistry.php", "func_name": "RouteBuilderRegistry.applyGroupRouteTemplates", "original_string": "private function applyGroupRouteTemplates(\n        string &$pathTemplate,\n        string &$hostTemplate = null,\n        bool &$isHttpsOnly = false\n    ): void {\n        $groupPathTemplate = '';\n        $groupHostTemplate = '';\n        $groupIsHttpsOnly = false;\n\n        foreach ($this->groupOptionsStack as $groupOptions) {\n            $groupPathTemplate .= $groupOptions->pathTemplate;\n            $groupHostTemplate = $groupOptions->hostTemplate . $groupHostTemplate;\n            $groupIsHttpsOnly = $groupIsHttpsOnly || $groupOptions->isHttpsOnly;\n        }\n\n        $pathTemplate = $groupPathTemplate . $pathTemplate;\n        $hostTemplate = ($hostTemplate ?? '') . $groupHostTemplate;\n        $isHttpsOnly = $isHttpsOnly || $groupIsHttpsOnly;\n    }", "language": "php", "code": "private function applyGroupRouteTemplates(\n        string &$pathTemplate,\n        string &$hostTemplate = null,\n        bool &$isHttpsOnly = false\n    ): void {\n        $groupPathTemplate = '';\n        $groupHostTemplate = '';\n        $groupIsHttpsOnly = false;\n\n        foreach ($this->groupOptionsStack as $groupOptions) {\n            $groupPathTemplate .= $groupOptions->pathTemplate;\n            $groupHostTemplate = $groupOptions->hostTemplate . $groupHostTemplate;\n            $groupIsHttpsOnly = $groupIsHttpsOnly || $groupOptions->isHttpsOnly;\n        }\n\n        $pathTemplate = $groupPathTemplate . $pathTemplate;\n        $hostTemplate = ($hostTemplate ?? '') . $groupHostTemplate;\n        $isHttpsOnly = $isHttpsOnly || $groupIsHttpsOnly;\n    }", "code_tokens": ["private", "function", "applyGroupRouteTemplates", "(", "string", "&", "$", "pathTemplate", ",", "string", "&", "$", "hostTemplate", "=", "null", ",", "bool", "&", "$", "isHttpsOnly", "=", "false", ")", ":", "void", "{", "$", "groupPathTemplate", "=", "''", ";", "$", "groupHostTemplate", "=", "''", ";", "$", "groupIsHttpsOnly", "=", "false", ";", "foreach", "(", "$", "this", "->", "groupOptionsStack", "as", "$", "groupOptions", ")", "{", "$", "groupPathTemplate", ".=", "$", "groupOptions", "->", "pathTemplate", ";", "$", "groupHostTemplate", "=", "$", "groupOptions", "->", "hostTemplate", ".", "$", "groupHostTemplate", ";", "$", "groupIsHttpsOnly", "=", "$", "groupIsHttpsOnly", "||", "$", "groupOptions", "->", "isHttpsOnly", ";", "}", "$", "pathTemplate", "=", "$", "groupPathTemplate", ".", "$", "pathTemplate", ";", "$", "hostTemplate", "=", "(", "$", "hostTemplate", "??", "''", ")", ".", "$", "groupHostTemplate", ";", "$", "isHttpsOnly", "=", "$", "isHttpsOnly", "||", "$", "groupIsHttpsOnly", ";", "}"], "docstring": "Applies all the group options to a route\n\n@param string $pathTemplate The path template to apply settings to\n@param string|null $hostTemplate The host template to apply settings to\n@param bool $isHttpsOnly Whether or not the group is HTTPS-only", "docstring_tokens": ["Applies", "all", "the", "group", "options", "to", "a", "route"], "sha": "d9fa90d5f17dddbd52f311c2ec5cfec5865fd66b", "url": "https://github.com/aphiria/router/blob/d9fa90d5f17dddbd52f311c2ec5cfec5865fd66b/src/Builders/RouteBuilderRegistry.php#L141-L159", "partition": "test"}
{"repo": "ClanCats/Container", "path": "src/ContainerParser/ContainerParser.php", "func_name": "ContainerParser.getRemainingTokens", "original_string": "protected function getRemainingTokens(bool $skip = false) : array\n    {\n        $tokens = array();\n\n        while (!$this->parserIsDone()) \n        {\n            $tokens[] = $this->currentToken(); $this->skipToken();\n        }\n\n        if (!$skip)\n        {\n            $this->index -= count($tokens);\n        }\n\n        return $tokens;\n    }", "language": "php", "code": "protected function getRemainingTokens(bool $skip = false) : array\n    {\n        $tokens = array();\n\n        while (!$this->parserIsDone()) \n        {\n            $tokens[] = $this->currentToken(); $this->skipToken();\n        }\n\n        if (!$skip)\n        {\n            $this->index -= count($tokens);\n        }\n\n        return $tokens;\n    }", "code_tokens": ["protected", "function", "getRemainingTokens", "(", "bool", "$", "skip", "=", "false", ")", ":", "array", "{", "$", "tokens", "=", "array", "(", ")", ";", "while", "(", "!", "$", "this", "->", "parserIsDone", "(", ")", ")", "{", "$", "tokens", "[", "]", "=", "$", "this", "->", "currentToken", "(", ")", ";", "$", "this", "->", "skipToken", "(", ")", ";", "}", "if", "(", "!", "$", "skip", ")", "{", "$", "this", "->", "index", "-=", "count", "(", "$", "tokens", ")", ";", "}", "return", "$", "tokens", ";", "}"], "docstring": "Return all remaining tokens\n\n@param string                    $skip\n@return array[T]", "docstring_tokens": ["Return", "all", "remaining", "tokens"], "sha": "95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12", "url": "https://github.com/ClanCats/Container/blob/95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12/src/ContainerParser/ContainerParser.php#L199-L214", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Widgets/Bootstrap/Progress.php", "func_name": "Progress.renderBar", "original_string": "protected function renderBar($config = [], $label, $options = []) {\n        $percent = ArrayHelper::getValue($config, 'percent', 0);\n        $animated = ArrayHelper::getValue($config, 'animated', false);\n        $striped = ArrayHelper::getValue($config, 'striped', false) || $animated;\n        $percentFixed = number_format($percent, 2, '.', '');\n        $defaultOptions = [\n            'role' => 'progressbar',\n            'aria-valuenow' => $percent,\n            'aria-valuemin' => 0,\n            'aria-valuemax' => 100,\n            'style' => \"width:{$percentFixed}%\",\n        ];\n        $options = array_merge($defaultOptions, $options);\n        Html::addCssClass($options, ['widget' => 'progress-bar']);\n        if ($animated) {\n            Html::addCssClass($options, ['animated' => 'progress-bar-animated']);\n        }\n        if ($striped) {\n            Html::addCssClass($options, ['striped' => 'progress-bar-striped']);\n        }\n\n        $out = $this->htmlHlp->beginTag('div', $options);\n        $out .= $label;\n        $out .= $this->htmlHlp->tag('span', \\Reaction::t('rct', '{percent}% Complete', ['percent' => $percent]), [\n            'class' => 'sr-only'\n        ]);\n        $out .= Html::endTag('div');\n\n        return $out;\n    }", "language": "php", "code": "protected function renderBar($config = [], $label, $options = []) {\n        $percent = ArrayHelper::getValue($config, 'percent', 0);\n        $animated = ArrayHelper::getValue($config, 'animated', false);\n        $striped = ArrayHelper::getValue($config, 'striped', false) || $animated;\n        $percentFixed = number_format($percent, 2, '.', '');\n        $defaultOptions = [\n            'role' => 'progressbar',\n            'aria-valuenow' => $percent,\n            'aria-valuemin' => 0,\n            'aria-valuemax' => 100,\n            'style' => \"width:{$percentFixed}%\",\n        ];\n        $options = array_merge($defaultOptions, $options);\n        Html::addCssClass($options, ['widget' => 'progress-bar']);\n        if ($animated) {\n            Html::addCssClass($options, ['animated' => 'progress-bar-animated']);\n        }\n        if ($striped) {\n            Html::addCssClass($options, ['striped' => 'progress-bar-striped']);\n        }\n\n        $out = $this->htmlHlp->beginTag('div', $options);\n        $out .= $label;\n        $out .= $this->htmlHlp->tag('span', \\Reaction::t('rct', '{percent}% Complete', ['percent' => $percent]), [\n            'class' => 'sr-only'\n        ]);\n        $out .= Html::endTag('div');\n\n        return $out;\n    }", "code_tokens": ["protected", "function", "renderBar", "(", "$", "config", "=", "[", "]", ",", "$", "label", ",", "$", "options", "=", "[", "]", ")", "{", "$", "percent", "=", "ArrayHelper", "::", "getValue", "(", "$", "config", ",", "'percent'", ",", "0", ")", ";", "$", "animated", "=", "ArrayHelper", "::", "getValue", "(", "$", "config", ",", "'animated'", ",", "false", ")", ";", "$", "striped", "=", "ArrayHelper", "::", "getValue", "(", "$", "config", ",", "'striped'", ",", "false", ")", "||", "$", "animated", ";", "$", "percentFixed", "=", "number_format", "(", "$", "percent", ",", "2", ",", "'.'", ",", "''", ")", ";", "$", "defaultOptions", "=", "[", "'role'", "=>", "'progressbar'", ",", "'aria-valuenow'", "=>", "$", "percent", ",", "'aria-valuemin'", "=>", "0", ",", "'aria-valuemax'", "=>", "100", ",", "'style'", "=>", "\"width:{$percentFixed}%\"", ",", "]", ";", "$", "options", "=", "array_merge", "(", "$", "defaultOptions", ",", "$", "options", ")", ";", "Html", "::", "addCssClass", "(", "$", "options", ",", "[", "'widget'", "=>", "'progress-bar'", "]", ")", ";", "if", "(", "$", "animated", ")", "{", "Html", "::", "addCssClass", "(", "$", "options", ",", "[", "'animated'", "=>", "'progress-bar-animated'", "]", ")", ";", "}", "if", "(", "$", "striped", ")", "{", "Html", "::", "addCssClass", "(", "$", "options", ",", "[", "'striped'", "=>", "'progress-bar-striped'", "]", ")", ";", "}", "$", "out", "=", "$", "this", "->", "htmlHlp", "->", "beginTag", "(", "'div'", ",", "$", "options", ")", ";", "$", "out", ".=", "$", "label", ";", "$", "out", ".=", "$", "this", "->", "htmlHlp", "->", "tag", "(", "'span'", ",", "\\", "Reaction", "::", "t", "(", "'rct'", ",", "'{percent}% Complete'", ",", "[", "'percent'", "=>", "$", "percent", "]", ")", ",", "[", "'class'", "=>", "'sr-only'", "]", ")", ";", "$", "out", ".=", "Html", "::", "endTag", "(", "'div'", ")", ";", "return", "$", "out", ";", "}"], "docstring": "Generates a bar\n@param array $config the bar config (percentage, striped, animated)\n@param string $label, optional, the label to display at the bar\n@param array $options the HTML attributes of the bar\n@return string the rendering result.", "docstring_tokens": ["Generates", "a", "bar"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Widgets/Bootstrap/Progress.php#L153-L182", "partition": "test"}
{"repo": "Spea/fixture-dumper", "path": "src/Sp/FixtureDumper/Generator/Alice/ArrayFixtureGenerator.php", "func_name": "ArrayFixtureGenerator.convertValue", "original_string": "protected function convertValue($value)\n    {\n        if (!is_array($value)) {\n            return $value;\n        }\n\n        $result = 'array(';\n        $values = array();\n        foreach ($value as $key => $val) {\n            $values[] .= sprintf(\"'%s' => %s\", $key, $this->convertValue($val));\n        }\n\n        $result .= implode(\",\", $values);\n        $result .= ')';\n\n        return $result;\n    }", "language": "php", "code": "protected function convertValue($value)\n    {\n        if (!is_array($value)) {\n            return $value;\n        }\n\n        $result = 'array(';\n        $values = array();\n        foreach ($value as $key => $val) {\n            $values[] .= sprintf(\"'%s' => %s\", $key, $this->convertValue($val));\n        }\n\n        $result .= implode(\",\", $values);\n        $result .= ')';\n\n        return $result;\n    }", "code_tokens": ["protected", "function", "convertValue", "(", "$", "value", ")", "{", "if", "(", "!", "is_array", "(", "$", "value", ")", ")", "{", "return", "$", "value", ";", "}", "$", "result", "=", "'array('", ";", "$", "values", "=", "array", "(", ")", ";", "foreach", "(", "$", "value", "as", "$", "key", "=>", "$", "val", ")", "{", "$", "values", "[", "]", ".=", "sprintf", "(", "\"'%s' => %s\"", ",", "$", "key", ",", "$", "this", "->", "convertValue", "(", "$", "val", ")", ")", ";", "}", "$", "result", ".=", "implode", "(", "\",\"", ",", "$", "values", ")", ";", "$", "result", ".=", "')'", ";", "return", "$", "result", ";", "}"], "docstring": "Converts a value to its php representation.\n\n@param mixed $value\n\n@return object|integer|double|string|null|boolean", "docstring_tokens": ["Converts", "a", "value", "to", "its", "php", "representation", "."], "sha": "6c17842eb8fe09b6a9c168d5453435f1de714a01", "url": "https://github.com/Spea/fixture-dumper/blob/6c17842eb8fe09b6a9c168d5453435f1de714a01/src/Sp/FixtureDumper/Generator/Alice/ArrayFixtureGenerator.php#L100-L116", "partition": "test"}
{"repo": "MichaelRShelton/middleman", "path": "src/Concerns/HasAttrWithMiddleware.php", "func_name": "HasAttrWithMiddleware.setMiddlewareOrFallback", "original_string": "public function setMiddlewareOrFallback(string $name, $value, $middleMan, $result = null)\n    {\n        // asserts instead of type-hints because this is a trait and another trait uses it.\n        assert($middleMan instanceof MiddlewareDispatcher);\n\n        if (! $middleMan->groupIsEmpty('setters')) {\n            $result = $middleMan->callSetters($name, $value, $result);\n        } elseif (is_object($result)) {\n            $result = $result->$name = $value;\n        } else {\n            $result = $this->setVisibleAttribute($name, $value);\n        }\n        return $result;\n    }", "language": "php", "code": "public function setMiddlewareOrFallback(string $name, $value, $middleMan, $result = null)\n    {\n        // asserts instead of type-hints because this is a trait and another trait uses it.\n        assert($middleMan instanceof MiddlewareDispatcher);\n\n        if (! $middleMan->groupIsEmpty('setters')) {\n            $result = $middleMan->callSetters($name, $value, $result);\n        } elseif (is_object($result)) {\n            $result = $result->$name = $value;\n        } else {\n            $result = $this->setVisibleAttribute($name, $value);\n        }\n        return $result;\n    }", "code_tokens": ["public", "function", "setMiddlewareOrFallback", "(", "string", "$", "name", ",", "$", "value", ",", "$", "middleMan", ",", "$", "result", "=", "null", ")", "{", "// asserts instead of type-hints because this is a trait and another trait uses it.", "assert", "(", "$", "middleMan", "instanceof", "MiddlewareDispatcher", ")", ";", "if", "(", "!", "$", "middleMan", "->", "groupIsEmpty", "(", "'setters'", ")", ")", "{", "$", "result", "=", "$", "middleMan", "->", "callSetters", "(", "$", "name", ",", "$", "value", ",", "$", "result", ")", ";", "}", "elseif", "(", "is_object", "(", "$", "result", ")", ")", "{", "$", "result", "=", "$", "result", "->", "$", "name", "=", "$", "value", ";", "}", "else", "{", "$", "result", "=", "$", "this", "->", "setVisibleAttribute", "(", "$", "name", ",", "$", "value", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Sets the value of the given attribute through middleware or locally as a fallback.\n\n@param string $name\n@param mixed $value\n@param $middleMan\n@param mixed $result\n@return mixed", "docstring_tokens": ["Sets", "the", "value", "of", "the", "given", "attribute", "through", "middleware", "or", "locally", "as", "a", "fallback", "."], "sha": "b67140be2f39a32a27f5a0a9b2498ab3444835ba", "url": "https://github.com/MichaelRShelton/middleman/blob/b67140be2f39a32a27f5a0a9b2498ab3444835ba/src/Concerns/HasAttrWithMiddleware.php#L50-L63", "partition": "test"}
{"repo": "wp-cli/widget-command", "path": "src/Widget_Command.php", "func_name": "Widget_Command.get_widget_data", "original_string": "private function get_widget_data( $widget_id ) {\n\n\t\t$parts        = explode( '-', $widget_id );\n\t\t$option_index = array_pop( $parts );\n\t\t$name         = implode( '-', $parts );\n\n\t\t$sidebar_id    = false;\n\t\t$sidebar_index = false;\n\t\t$all_widgets   = $this->wp_get_sidebars_widgets();\n\t\tforeach ( $all_widgets as $s_id => &$widgets ) {\n\n\t\t\t$key = array_search( $widget_id, $widgets, true );\n\t\t\tif ( false !== $key ) {\n\t\t\t\t$sidebar_id    = $s_id;\n\t\t\t\t$sidebar_index = $key;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn array( $name, $option_index, $sidebar_id, $sidebar_index );\n\t}", "language": "php", "code": "private function get_widget_data( $widget_id ) {\n\n\t\t$parts        = explode( '-', $widget_id );\n\t\t$option_index = array_pop( $parts );\n\t\t$name         = implode( '-', $parts );\n\n\t\t$sidebar_id    = false;\n\t\t$sidebar_index = false;\n\t\t$all_widgets   = $this->wp_get_sidebars_widgets();\n\t\tforeach ( $all_widgets as $s_id => &$widgets ) {\n\n\t\t\t$key = array_search( $widget_id, $widgets, true );\n\t\t\tif ( false !== $key ) {\n\t\t\t\t$sidebar_id    = $s_id;\n\t\t\t\t$sidebar_index = $key;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn array( $name, $option_index, $sidebar_id, $sidebar_index );\n\t}", "code_tokens": ["private", "function", "get_widget_data", "(", "$", "widget_id", ")", "{", "$", "parts", "=", "explode", "(", "'-'", ",", "$", "widget_id", ")", ";", "$", "option_index", "=", "array_pop", "(", "$", "parts", ")", ";", "$", "name", "=", "implode", "(", "'-'", ",", "$", "parts", ")", ";", "$", "sidebar_id", "=", "false", ";", "$", "sidebar_index", "=", "false", ";", "$", "all_widgets", "=", "$", "this", "->", "wp_get_sidebars_widgets", "(", ")", ";", "foreach", "(", "$", "all_widgets", "as", "$", "s_id", "=>", "&", "$", "widgets", ")", "{", "$", "key", "=", "array_search", "(", "$", "widget_id", ",", "$", "widgets", ",", "true", ")", ";", "if", "(", "false", "!==", "$", "key", ")", "{", "$", "sidebar_id", "=", "$", "s_id", ";", "$", "sidebar_index", "=", "$", "key", ";", "break", ";", "}", "}", "return", "array", "(", "$", "name", ",", "$", "option_index", ",", "$", "sidebar_id", ",", "$", "sidebar_index", ")", ";", "}"], "docstring": "Gets the widget's name, option index, sidebar, and sidebar index from its ID\n\n@param string $widget_id\n@return array", "docstring_tokens": ["Gets", "the", "widget", "s", "name", "option", "index", "sidebar", "and", "sidebar", "index", "from", "its", "ID"], "sha": "58a1b2d2221cee852eb8a589535aaadb1217bb74", "url": "https://github.com/wp-cli/widget-command/blob/58a1b2d2221cee852eb8a589535aaadb1217bb74/src/Widget_Command.php#L530-L550", "partition": "test"}
{"repo": "alt3/tokens", "path": "src/Token.php", "func_name": "Token.setExpires", "original_string": "protected function setExpires()\n    {\n        $created = $this->created;\n\n        if ($this->lifetime === null) {\n            $this->lifetime = self::DEFAULT_LIFETIME;\n        }\n\n        $this->expires = $created->modify($this->lifetime);\n    }", "language": "php", "code": "protected function setExpires()\n    {\n        $created = $this->created;\n\n        if ($this->lifetime === null) {\n            $this->lifetime = self::DEFAULT_LIFETIME;\n        }\n\n        $this->expires = $created->modify($this->lifetime);\n    }", "code_tokens": ["protected", "function", "setExpires", "(", ")", "{", "$", "created", "=", "$", "this", "->", "created", ";", "if", "(", "$", "this", "->", "lifetime", "===", "null", ")", "{", "$", "this", "->", "lifetime", "=", "self", "::", "DEFAULT_LIFETIME", ";", "}", "$", "this", "->", "expires", "=", "$", "created", "->", "modify", "(", "$", "this", "->", "lifetime", ")", ";", "}"], "docstring": "Set the 'expires' property by adding lifetime to the 'created'  property.\n\n@return void", "docstring_tokens": ["Set", "the", "expires", "property", "by", "adding", "lifetime", "to", "the", "created", "property", "."], "sha": "4870c7931578c6042156b1e48c17c3b3b51b99fd", "url": "https://github.com/alt3/tokens/blob/4870c7931578c6042156b1e48c17c3b3b51b99fd/src/Token.php#L220-L229", "partition": "test"}
{"repo": "ntavelis/auth-email", "path": "src/Commands/Actions/CreateFiles.php", "func_name": "CreateFiles.run", "original_string": "public function run()\n    {\n        //Create controller files\n        foreach ($this->getControllers() as $fileName => $filePath) {\n            $this->makeDirectory($filePath);\n            $this->filesystem->put($filePath, $this->compileStub($fileName));\n        }\n\n        //Create blades\n        foreach ($this->getBlades() as $fileName => $filePath) {\n            $this->makeDirectory($filePath);\n            $this->filesystem->put($filePath, $this->compileStub($fileName));\n        }\n\n        //Create migration files\n        foreach ($this->getMigrations() as $fileName => $filePath) {\n            $this->filesystem->put($filePath, $this->compileStub($fileName));\n        }\n\n        //Create activation mail, if the --queue flag is passed, then it implements the ShouldQueue interface.\n        foreach ($this->getEmails() as $fileName => $filePath) {\n            $this->makeDirectory($filePath);\n            $stub = $this->filesystem->get(__DIR__ . '/../../stubs/' . $fileName . '.stub');\n\n            $this->filesystem->put($filePath, $this->replaceShouldQueue($stub));\n        }\n\n        //Create language files\n        foreach ($this->getLanguages() as $fileName => $filePath) {\n            $this->filesystem->put($filePath, $this->compileStub($fileName));\n        }\n    }", "language": "php", "code": "public function run()\n    {\n        //Create controller files\n        foreach ($this->getControllers() as $fileName => $filePath) {\n            $this->makeDirectory($filePath);\n            $this->filesystem->put($filePath, $this->compileStub($fileName));\n        }\n\n        //Create blades\n        foreach ($this->getBlades() as $fileName => $filePath) {\n            $this->makeDirectory($filePath);\n            $this->filesystem->put($filePath, $this->compileStub($fileName));\n        }\n\n        //Create migration files\n        foreach ($this->getMigrations() as $fileName => $filePath) {\n            $this->filesystem->put($filePath, $this->compileStub($fileName));\n        }\n\n        //Create activation mail, if the --queue flag is passed, then it implements the ShouldQueue interface.\n        foreach ($this->getEmails() as $fileName => $filePath) {\n            $this->makeDirectory($filePath);\n            $stub = $this->filesystem->get(__DIR__ . '/../../stubs/' . $fileName . '.stub');\n\n            $this->filesystem->put($filePath, $this->replaceShouldQueue($stub));\n        }\n\n        //Create language files\n        foreach ($this->getLanguages() as $fileName => $filePath) {\n            $this->filesystem->put($filePath, $this->compileStub($fileName));\n        }\n    }", "code_tokens": ["public", "function", "run", "(", ")", "{", "//Create controller files", "foreach", "(", "$", "this", "->", "getControllers", "(", ")", "as", "$", "fileName", "=>", "$", "filePath", ")", "{", "$", "this", "->", "makeDirectory", "(", "$", "filePath", ")", ";", "$", "this", "->", "filesystem", "->", "put", "(", "$", "filePath", ",", "$", "this", "->", "compileStub", "(", "$", "fileName", ")", ")", ";", "}", "//Create blades", "foreach", "(", "$", "this", "->", "getBlades", "(", ")", "as", "$", "fileName", "=>", "$", "filePath", ")", "{", "$", "this", "->", "makeDirectory", "(", "$", "filePath", ")", ";", "$", "this", "->", "filesystem", "->", "put", "(", "$", "filePath", ",", "$", "this", "->", "compileStub", "(", "$", "fileName", ")", ")", ";", "}", "//Create migration files", "foreach", "(", "$", "this", "->", "getMigrations", "(", ")", "as", "$", "fileName", "=>", "$", "filePath", ")", "{", "$", "this", "->", "filesystem", "->", "put", "(", "$", "filePath", ",", "$", "this", "->", "compileStub", "(", "$", "fileName", ")", ")", ";", "}", "//Create activation mail, if the --queue flag is passed, then it implements the ShouldQueue interface.", "foreach", "(", "$", "this", "->", "getEmails", "(", ")", "as", "$", "fileName", "=>", "$", "filePath", ")", "{", "$", "this", "->", "makeDirectory", "(", "$", "filePath", ")", ";", "$", "stub", "=", "$", "this", "->", "filesystem", "->", "get", "(", "__DIR__", ".", "'/../../stubs/'", ".", "$", "fileName", ".", "'.stub'", ")", ";", "$", "this", "->", "filesystem", "->", "put", "(", "$", "filePath", ",", "$", "this", "->", "replaceShouldQueue", "(", "$", "stub", ")", ")", ";", "}", "//Create language files", "foreach", "(", "$", "this", "->", "getLanguages", "(", ")", "as", "$", "fileName", "=>", "$", "filePath", ")", "{", "$", "this", "->", "filesystem", "->", "put", "(", "$", "filePath", ",", "$", "this", "->", "compileStub", "(", "$", "fileName", ")", ")", ";", "}", "}"], "docstring": "Generate our own files.", "docstring_tokens": ["Generate", "our", "own", "files", "."], "sha": "978e631f364ebb8dae1c6d2acf7b3cb21c28979c", "url": "https://github.com/ntavelis/auth-email/blob/978e631f364ebb8dae1c6d2acf7b3cb21c28979c/src/Commands/Actions/CreateFiles.php#L10-L41", "partition": "test"}
{"repo": "dreamfactorysoftware/df-database", "path": "src/Components/Schema.php", "func_name": "Schema.compareTableNames", "original_string": "public function compareTableNames($name1, $name2)\n    {\n        $name1 = str_replace(['\"', '`', \"'\"], '', $name1);\n        $name2 = str_replace(['\"', '`', \"'\"], '', $name2);\n        if (($pos = strrpos($name1, '.')) !== false) {\n            $name1 = substr($name1, $pos + 1);\n        }\n        if (($pos = strrpos($name2, '.')) !== false) {\n            $name2 = substr($name2, $pos + 1);\n        }\n        if ($this->connection->getTablePrefix() !== null) {\n            if (strpos($name1, '{') !== false) {\n                $name1 = $this->connection->getTablePrefix() . str_replace(['{', '}'], '', $name1);\n            }\n            if (strpos($name2, '{') !== false) {\n                $name2 = $this->connection->getTablePrefix() . str_replace(['{', '}'], '', $name2);\n            }\n        }\n\n        return $name1 === $name2;\n    }", "language": "php", "code": "public function compareTableNames($name1, $name2)\n    {\n        $name1 = str_replace(['\"', '`', \"'\"], '', $name1);\n        $name2 = str_replace(['\"', '`', \"'\"], '', $name2);\n        if (($pos = strrpos($name1, '.')) !== false) {\n            $name1 = substr($name1, $pos + 1);\n        }\n        if (($pos = strrpos($name2, '.')) !== false) {\n            $name2 = substr($name2, $pos + 1);\n        }\n        if ($this->connection->getTablePrefix() !== null) {\n            if (strpos($name1, '{') !== false) {\n                $name1 = $this->connection->getTablePrefix() . str_replace(['{', '}'], '', $name1);\n            }\n            if (strpos($name2, '{') !== false) {\n                $name2 = $this->connection->getTablePrefix() . str_replace(['{', '}'], '', $name2);\n            }\n        }\n\n        return $name1 === $name2;\n    }", "code_tokens": ["public", "function", "compareTableNames", "(", "$", "name1", ",", "$", "name2", ")", "{", "$", "name1", "=", "str_replace", "(", "[", "'\"'", ",", "'`'", ",", "\"'\"", "]", ",", "''", ",", "$", "name1", ")", ";", "$", "name2", "=", "str_replace", "(", "[", "'\"'", ",", "'`'", ",", "\"'\"", "]", ",", "''", ",", "$", "name2", ")", ";", "if", "(", "(", "$", "pos", "=", "strrpos", "(", "$", "name1", ",", "'.'", ")", ")", "!==", "false", ")", "{", "$", "name1", "=", "substr", "(", "$", "name1", ",", "$", "pos", "+", "1", ")", ";", "}", "if", "(", "(", "$", "pos", "=", "strrpos", "(", "$", "name2", ",", "'.'", ")", ")", "!==", "false", ")", "{", "$", "name2", "=", "substr", "(", "$", "name2", ",", "$", "pos", "+", "1", ")", ";", "}", "if", "(", "$", "this", "->", "connection", "->", "getTablePrefix", "(", ")", "!==", "null", ")", "{", "if", "(", "strpos", "(", "$", "name1", ",", "'{'", ")", "!==", "false", ")", "{", "$", "name1", "=", "$", "this", "->", "connection", "->", "getTablePrefix", "(", ")", ".", "str_replace", "(", "[", "'{'", ",", "'}'", "]", ",", "''", ",", "$", "name1", ")", ";", "}", "if", "(", "strpos", "(", "$", "name2", ",", "'{'", ")", "!==", "false", ")", "{", "$", "name2", "=", "$", "this", "->", "connection", "->", "getTablePrefix", "(", ")", ".", "str_replace", "(", "[", "'{'", ",", "'}'", "]", ",", "''", ",", "$", "name2", ")", ";", "}", "}", "return", "$", "name1", "===", "$", "name2", ";", "}"], "docstring": "Compares two table names.\nThe table names can be either quoted or unquoted. This method\nwill consider both cases.\n\n@param string $name1 table name 1\n@param string $name2 table name 2\n\n@return boolean whether the two table names refer to the same table.", "docstring_tokens": ["Compares", "two", "table", "names", ".", "The", "table", "names", "can", "be", "either", "quoted", "or", "unquoted", ".", "This", "method", "will", "consider", "both", "cases", "."], "sha": "ab6d2f0643ab292d1bcce2bc25002db9b0731139", "url": "https://github.com/dreamfactorysoftware/df-database/blob/ab6d2f0643ab292d1bcce2bc25002db9b0731139/src/Components/Schema.php#L561-L581", "partition": "test"}
{"repo": "develpr/alexa-app", "path": "src/Http/Middleware/Certificate.php", "func_name": "Certificate.getCertificate", "original_string": "private function getCertificate(IlluminateRequest $request)\n    {\n        $signatureChainUri = $request->header(self::CERTIFICATE_URL_HEADER);\n\n        $this->validateKeychainUri($signatureChainUri);\n\n        $certificate = $this->certificateProvider->getCertificateFromUri($signatureChainUri);\n\n        return $certificate;\n    }", "language": "php", "code": "private function getCertificate(IlluminateRequest $request)\n    {\n        $signatureChainUri = $request->header(self::CERTIFICATE_URL_HEADER);\n\n        $this->validateKeychainUri($signatureChainUri);\n\n        $certificate = $this->certificateProvider->getCertificateFromUri($signatureChainUri);\n\n        return $certificate;\n    }", "code_tokens": ["private", "function", "getCertificate", "(", "IlluminateRequest", "$", "request", ")", "{", "$", "signatureChainUri", "=", "$", "request", "->", "header", "(", "self", "::", "CERTIFICATE_URL_HEADER", ")", ";", "$", "this", "->", "validateKeychainUri", "(", "$", "signatureChainUri", ")", ";", "$", "certificate", "=", "$", "this", "->", "certificateProvider", "->", "getCertificateFromUri", "(", "$", "signatureChainUri", ")", ";", "return", "$", "certificate", ";", "}"], "docstring": "Get the certificate from the certificate provider\n\n@param IlluminateRequest $request\n\n@return mixed", "docstring_tokens": ["Get", "the", "certificate", "from", "the", "certificate", "provider"], "sha": "4e14c2d2b6db4c58fb11c82867d1e712575f1ec3", "url": "https://github.com/develpr/alexa-app/blob/4e14c2d2b6db4c58fb11c82867d1e712575f1ec3/src/Http/Middleware/Certificate.php#L86-L95", "partition": "test"}
{"repo": "Qeti/Karika", "path": "src/Karika/CoreBundle/Controller/Api/ApiController.php", "func_name": "ApiController.cgetAction", "original_string": "public function cgetAction(ParamFetcherInterface $paramFetcher)\n    {\n        try {\n            $offset = $paramFetcher->get('offset');\n            $limit = $paramFetcher->get('limit');\n            $order_by = $paramFetcher->get('order_by');\n            $filters = !is_null($paramFetcher->get('filters')) ? $paramFetcher->get('filters') : array();\n\n            $em = $this->getDoctrine()->getManager();\n            $entities = $em->getRepository($this->entityClassName())\n                ->findBy($filters, $order_by, $limit, $offset);\n\n            if ($entities) {\n                return $entities;\n            }\n\n            return FOSView::create('Not Found', Response::HTTP_NO_CONTENT);\n        } catch (\\Exception $e) {\n            return FOSView::create($e->getMessage(), Response::HTTP_INTERNAL_SERVER_ERROR);\n        }\n    }", "language": "php", "code": "public function cgetAction(ParamFetcherInterface $paramFetcher)\n    {\n        try {\n            $offset = $paramFetcher->get('offset');\n            $limit = $paramFetcher->get('limit');\n            $order_by = $paramFetcher->get('order_by');\n            $filters = !is_null($paramFetcher->get('filters')) ? $paramFetcher->get('filters') : array();\n\n            $em = $this->getDoctrine()->getManager();\n            $entities = $em->getRepository($this->entityClassName())\n                ->findBy($filters, $order_by, $limit, $offset);\n\n            if ($entities) {\n                return $entities;\n            }\n\n            return FOSView::create('Not Found', Response::HTTP_NO_CONTENT);\n        } catch (\\Exception $e) {\n            return FOSView::create($e->getMessage(), Response::HTTP_INTERNAL_SERVER_ERROR);\n        }\n    }", "code_tokens": ["public", "function", "cgetAction", "(", "ParamFetcherInterface", "$", "paramFetcher", ")", "{", "try", "{", "$", "offset", "=", "$", "paramFetcher", "->", "get", "(", "'offset'", ")", ";", "$", "limit", "=", "$", "paramFetcher", "->", "get", "(", "'limit'", ")", ";", "$", "order_by", "=", "$", "paramFetcher", "->", "get", "(", "'order_by'", ")", ";", "$", "filters", "=", "!", "is_null", "(", "$", "paramFetcher", "->", "get", "(", "'filters'", ")", ")", "?", "$", "paramFetcher", "->", "get", "(", "'filters'", ")", ":", "array", "(", ")", ";", "$", "em", "=", "$", "this", "->", "getDoctrine", "(", ")", "->", "getManager", "(", ")", ";", "$", "entities", "=", "$", "em", "->", "getRepository", "(", "$", "this", "->", "entityClassName", "(", ")", ")", "->", "findBy", "(", "$", "filters", ",", "$", "order_by", ",", "$", "limit", ",", "$", "offset", ")", ";", "if", "(", "$", "entities", ")", "{", "return", "$", "entities", ";", "}", "return", "FOSView", "::", "create", "(", "'Not Found'", ",", "Response", "::", "HTTP_NO_CONTENT", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "return", "FOSView", "::", "create", "(", "$", "e", "->", "getMessage", "(", ")", ",", "Response", "::", "HTTP_INTERNAL_SERVER_ERROR", ")", ";", "}", "}"], "docstring": "Get all Product entities.\n\n@ApiDoc\n\n@View(serializerEnableMaxDepthChecks=true)\n\n@param ParamFetcherInterface $paramFetcher\n\n@return array|FOSView\n\n@QueryParam(name=\"offset\", requirements=\"\\d+\", nullable=true, description=\"Offset from which to start listing notes.\")\n@QueryParam(name=\"limit\", requirements=\"\\d+\", default=\"20\", description=\"How many notes to return.\")\n@QueryParam(name=\"order_by\", nullable=true, map=true, description=\"Order by fields. Must be an array ie. &order_by[name]=ASC&order_by[description]=DESC\")\n@QueryParam(name=\"filters\", nullable=true, map=true, description=\"Filter by fields. Must be an array ie. &filters[id]=3\")", "docstring_tokens": ["Get", "all", "Product", "entities", "."], "sha": "74f47fd68fb91759c74c5c50cb9ab5ec3704a43e", "url": "https://github.com/Qeti/Karika/blob/74f47fd68fb91759c74c5c50cb9ab5ec3704a43e/src/Karika/CoreBundle/Controller/Api/ApiController.php#L101-L121", "partition": "test"}
{"repo": "story75/Bonefish-Injection", "path": "src/Container/Container.php", "func_name": "Container.add", "original_string": "public function add($object)\n    {\n        $className = '\\\\' . get_class($object);\n\n        if ($this->injectSelf($className)) {\n            throw new InvalidArgumentException('Tried to add a container instance');\n        }\n\n        $parameterKey = $this->getParameterStoreKey([]);\n\n        if (isset($this->services[$className][$parameterKey])) {\n            throw new InvalidArgumentException('Tried to add a service instance which already exists');\n        }\n\n        $this->services[$className][$parameterKey] = $object;\n    }", "language": "php", "code": "public function add($object)\n    {\n        $className = '\\\\' . get_class($object);\n\n        if ($this->injectSelf($className)) {\n            throw new InvalidArgumentException('Tried to add a container instance');\n        }\n\n        $parameterKey = $this->getParameterStoreKey([]);\n\n        if (isset($this->services[$className][$parameterKey])) {\n            throw new InvalidArgumentException('Tried to add a service instance which already exists');\n        }\n\n        $this->services[$className][$parameterKey] = $object;\n    }", "code_tokens": ["public", "function", "add", "(", "$", "object", ")", "{", "$", "className", "=", "'\\\\'", ".", "get_class", "(", "$", "object", ")", ";", "if", "(", "$", "this", "->", "injectSelf", "(", "$", "className", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Tried to add a container instance'", ")", ";", "}", "$", "parameterKey", "=", "$", "this", "->", "getParameterStoreKey", "(", "[", "]", ")", ";", "if", "(", "isset", "(", "$", "this", "->", "services", "[", "$", "className", "]", "[", "$", "parameterKey", "]", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Tried to add a service instance which already exists'", ")", ";", "}", "$", "this", "->", "services", "[", "$", "className", "]", "[", "$", "parameterKey", "]", "=", "$", "object", ";", "}"], "docstring": "Add an already created service to the container.\n\n@param $object\n@throws InvalidArgumentException", "docstring_tokens": ["Add", "an", "already", "created", "service", "to", "the", "container", "."], "sha": "447e5d7ae6a7c11376a27495ba029238f0b969cd", "url": "https://github.com/story75/Bonefish-Injection/blob/447e5d7ae6a7c11376a27495ba029238f0b969cd/src/Container/Container.php#L159-L174", "partition": "test"}
{"repo": "cleverage/process-bundle", "path": "Task/File/Csv/InputCsvReaderTask.php", "func_name": "InputCsvReaderTask.getFilePath", "original_string": "protected function getFilePath(array $options, string $input)\n    {\n        $basePath = $options['base_path'];\n        if (\\strlen($basePath) > 0) {\n            $basePath = rtrim($options['base_path'], '/').'/';\n        }\n\n        return $basePath.$input;\n    }", "language": "php", "code": "protected function getFilePath(array $options, string $input)\n    {\n        $basePath = $options['base_path'];\n        if (\\strlen($basePath) > 0) {\n            $basePath = rtrim($options['base_path'], '/').'/';\n        }\n\n        return $basePath.$input;\n    }", "code_tokens": ["protected", "function", "getFilePath", "(", "array", "$", "options", ",", "string", "$", "input", ")", "{", "$", "basePath", "=", "$", "options", "[", "'base_path'", "]", ";", "if", "(", "\\", "strlen", "(", "$", "basePath", ")", ">", "0", ")", "{", "$", "basePath", "=", "rtrim", "(", "$", "options", "[", "'base_path'", "]", ",", "'/'", ")", ".", "'/'", ";", "}", "return", "$", "basePath", ".", "$", "input", ";", "}"], "docstring": "If there is no base_path, then the given path from input should be absolute\n\n@param array  $options\n@param string $input\n\n@return string", "docstring_tokens": ["If", "there", "is", "no", "base_path", "then", "the", "given", "path", "from", "input", "should", "be", "absolute"], "sha": "d03bfe390a9d94d4d51752e463abd0b6323bf4f7", "url": "https://github.com/cleverage/process-bundle/blob/d03bfe390a9d94d4d51752e463abd0b6323bf4f7/Task/File/Csv/InputCsvReaderTask.php#L64-L72", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Cache/CacheStrategy.php", "func_name": "CacheStrategy.save", "original_string": "public function save($keyName = null, $content = null, $lifetime = null, $stopBuffer = true)\n    {\n        return $this->uses()->save($keyName, $content, $lifetime, $stopBuffer);\n    }", "language": "php", "code": "public function save($keyName = null, $content = null, $lifetime = null, $stopBuffer = true)\n    {\n        return $this->uses()->save($keyName, $content, $lifetime, $stopBuffer);\n    }", "code_tokens": ["public", "function", "save", "(", "$", "keyName", "=", "null", ",", "$", "content", "=", "null", ",", "$", "lifetime", "=", "null", ",", "$", "stopBuffer", "=", "true", ")", "{", "return", "$", "this", "->", "uses", "(", ")", "->", "save", "(", "$", "keyName", ",", "$", "content", ",", "$", "lifetime", ",", "$", "stopBuffer", ")", ";", "}"], "docstring": "Stores cached content into the file backend and stops the frontend\n\n@param int|string $keyName\n@param string     $content\n@param int        $lifetime\n@param boolean    $stopBuffer\n\n@return bool", "docstring_tokens": ["Stores", "cached", "content", "into", "the", "file", "backend", "and", "stops", "the", "frontend"], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Cache/CacheStrategy.php#L146-L149", "partition": "test"}
{"repo": "tz-lom/HSPHP", "path": "src/HSPHP/ReadSocket.php", "func_name": "ReadSocket.sendStr", "original_string": "protected function sendStr($string)\n    {\n        if (!$this->isConnected()) {\n            throw new IOException('No active connection');\n        }\n\n        $string = (string)$string;\n        while ($string) {\n            $bytes = @fwrite($this->socket, $string);\n            if ($bytes === false) {\n                $this->disconnect();\n                throw new IOException('Cannot write to socket');\n            }\n\n            if ($bytes === 0) {\n                return;\n            }\n            $string = substr($string, $bytes);\n        }\n    }", "language": "php", "code": "protected function sendStr($string)\n    {\n        if (!$this->isConnected()) {\n            throw new IOException('No active connection');\n        }\n\n        $string = (string)$string;\n        while ($string) {\n            $bytes = @fwrite($this->socket, $string);\n            if ($bytes === false) {\n                $this->disconnect();\n                throw new IOException('Cannot write to socket');\n            }\n\n            if ($bytes === 0) {\n                return;\n            }\n            $string = substr($string, $bytes);\n        }\n    }", "code_tokens": ["protected", "function", "sendStr", "(", "$", "string", ")", "{", "if", "(", "!", "$", "this", "->", "isConnected", "(", ")", ")", "{", "throw", "new", "IOException", "(", "'No active connection'", ")", ";", "}", "$", "string", "=", "(", "string", ")", "$", "string", ";", "while", "(", "$", "string", ")", "{", "$", "bytes", "=", "@", "fwrite", "(", "$", "this", "->", "socket", ",", "$", "string", ")", ";", "if", "(", "$", "bytes", "===", "false", ")", "{", "$", "this", "->", "disconnect", "(", ")", ";", "throw", "new", "IOException", "(", "'Cannot write to socket'", ")", ";", "}", "if", "(", "$", "bytes", "===", "0", ")", "{", "return", ";", "}", "$", "string", "=", "substr", "(", "$", "string", ",", "$", "bytes", ")", ";", "}", "}"], "docstring": "Send command to server\n\n@param string $string\n\n@throws IOException", "docstring_tokens": ["Send", "command", "to", "server"], "sha": "074514455c579da4090255c4012bf1a61e06197f", "url": "https://github.com/tz-lom/HSPHP/blob/074514455c579da4090255c4012bf1a61e06197f/src/HSPHP/ReadSocket.php#L147-L166", "partition": "test"}
{"repo": "silvershop/silvershop-core", "path": "src/Model/Variation/OrderItem.php", "func_name": "OrderItem.ProductVariation", "original_string": "public function ProductVariation($forcecurrent = false)\n    {\n        if ($this->ProductVariationID && $this->ProductVariationVersion && !$forcecurrent) {\n            return Versioned::get_version(\n                Variation::class,\n                $this->ProductVariationID,\n                $this->ProductVariationVersion\n            );\n        } elseif ($this->ProductVariationID\n            && $product = Variation::get()->byID($this->ProductVariationID)\n        ) {\n            return $product;\n        }\n        return null;\n    }", "language": "php", "code": "public function ProductVariation($forcecurrent = false)\n    {\n        if ($this->ProductVariationID && $this->ProductVariationVersion && !$forcecurrent) {\n            return Versioned::get_version(\n                Variation::class,\n                $this->ProductVariationID,\n                $this->ProductVariationVersion\n            );\n        } elseif ($this->ProductVariationID\n            && $product = Variation::get()->byID($this->ProductVariationID)\n        ) {\n            return $product;\n        }\n        return null;\n    }", "code_tokens": ["public", "function", "ProductVariation", "(", "$", "forcecurrent", "=", "false", ")", "{", "if", "(", "$", "this", "->", "ProductVariationID", "&&", "$", "this", "->", "ProductVariationVersion", "&&", "!", "$", "forcecurrent", ")", "{", "return", "Versioned", "::", "get_version", "(", "Variation", "::", "class", ",", "$", "this", "->", "ProductVariationID", ",", "$", "this", "->", "ProductVariationVersion", ")", ";", "}", "elseif", "(", "$", "this", "->", "ProductVariationID", "&&", "$", "product", "=", "Variation", "::", "get", "(", ")", "->", "byID", "(", "$", "this", "->", "ProductVariationID", ")", ")", "{", "return", "$", "product", ";", "}", "return", "null", ";", "}"], "docstring": "Overloaded relationship, for getting versioned variations\n\n@param  boolean $current\n@return Variation", "docstring_tokens": ["Overloaded", "relationship", "for", "getting", "versioned", "variations"], "sha": "b090e970b06c0fb7e68107360760b6e2d6d184c4", "url": "https://github.com/silvershop/silvershop-core/blob/b090e970b06c0fb7e68107360760b6e2d6d184c4/src/Model/Variation/OrderItem.php#L34-L48", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Map.php", "func_name": "Map.addInfoWindow", "original_string": "public function addInfoWindow(InfoWindow $infoWindow)\n    {\n        $this->infoWindows[] = $infoWindow;\n\n        if ($this->autoZoom) {\n            $this->bound->extend($infoWindow);\n        }\n    }", "language": "php", "code": "public function addInfoWindow(InfoWindow $infoWindow)\n    {\n        $this->infoWindows[] = $infoWindow;\n\n        if ($this->autoZoom) {\n            $this->bound->extend($infoWindow);\n        }\n    }", "code_tokens": ["public", "function", "addInfoWindow", "(", "InfoWindow", "$", "infoWindow", ")", "{", "$", "this", "->", "infoWindows", "[", "]", "=", "$", "infoWindow", ";", "if", "(", "$", "this", "->", "autoZoom", ")", "{", "$", "this", "->", "bound", "->", "extend", "(", "$", "infoWindow", ")", ";", "}", "}"], "docstring": "Add a map info window.\n\n@param \\Ivory\\GoogleMap\\Overlays\\InfoWindow $infoWindow The info window to add.", "docstring_tokens": ["Add", "a", "map", "info", "window", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Map.php#L992-L999", "partition": "test"}
{"repo": "stone-lab/Dynamicfield", "path": "Utility/Fields/Repeater.php", "func_name": "Repeater.save", "original_string": "public function save()\n    {\n        $bResult = false;\n        try {\n            if (!empty($this->deleteItems)) {\n                $items = explode(',', $this->deleteItems);\n                RepeaterTranslation::destroy($items);\n            }\n            if (count($this->groupFields)) {\n                foreach ($this->groupFields as $groupId => $group) {\n                    $fields = $group['fields'];\n                    $order = $this->defaultOrder[$groupId];\n\n                    $translate_id = 0;\n                    foreach ($fields as $field) {\n                        if ($translate_id) {\n                            $field->setTranslateId($translate_id);\n                        }\n                        $field->save();\n                        $translate_id = $field->getTranslateId();\n                    }\n                     // update order\n                     $translate = RepeaterTranslation::find($translate_id);\n                    $translate->order = $order;\n                    $translate->save();\n                }\n            }\n            $bResult = true;\n        } catch (\\Exception $e) {\n            //exception handling\n        }\n\n        return $bResult;\n    }", "language": "php", "code": "public function save()\n    {\n        $bResult = false;\n        try {\n            if (!empty($this->deleteItems)) {\n                $items = explode(',', $this->deleteItems);\n                RepeaterTranslation::destroy($items);\n            }\n            if (count($this->groupFields)) {\n                foreach ($this->groupFields as $groupId => $group) {\n                    $fields = $group['fields'];\n                    $order = $this->defaultOrder[$groupId];\n\n                    $translate_id = 0;\n                    foreach ($fields as $field) {\n                        if ($translate_id) {\n                            $field->setTranslateId($translate_id);\n                        }\n                        $field->save();\n                        $translate_id = $field->getTranslateId();\n                    }\n                     // update order\n                     $translate = RepeaterTranslation::find($translate_id);\n                    $translate->order = $order;\n                    $translate->save();\n                }\n            }\n            $bResult = true;\n        } catch (\\Exception $e) {\n            //exception handling\n        }\n\n        return $bResult;\n    }", "code_tokens": ["public", "function", "save", "(", ")", "{", "$", "bResult", "=", "false", ";", "try", "{", "if", "(", "!", "empty", "(", "$", "this", "->", "deleteItems", ")", ")", "{", "$", "items", "=", "explode", "(", "','", ",", "$", "this", "->", "deleteItems", ")", ";", "RepeaterTranslation", "::", "destroy", "(", "$", "items", ")", ";", "}", "if", "(", "count", "(", "$", "this", "->", "groupFields", ")", ")", "{", "foreach", "(", "$", "this", "->", "groupFields", "as", "$", "groupId", "=>", "$", "group", ")", "{", "$", "fields", "=", "$", "group", "[", "'fields'", "]", ";", "$", "order", "=", "$", "this", "->", "defaultOrder", "[", "$", "groupId", "]", ";", "$", "translate_id", "=", "0", ";", "foreach", "(", "$", "fields", "as", "$", "field", ")", "{", "if", "(", "$", "translate_id", ")", "{", "$", "field", "->", "setTranslateId", "(", "$", "translate_id", ")", ";", "}", "$", "field", "->", "save", "(", ")", ";", "$", "translate_id", "=", "$", "field", "->", "getTranslateId", "(", ")", ";", "}", "// update order", "$", "translate", "=", "RepeaterTranslation", "::", "find", "(", "$", "translate_id", ")", ";", "$", "translate", "->", "order", "=", "$", "order", ";", "$", "translate", "->", "save", "(", ")", ";", "}", "}", "$", "bResult", "=", "true", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "//exception handling", "}", "return", "$", "bResult", ";", "}"], "docstring": "Save field data to database.\n\n@return bool", "docstring_tokens": ["Save", "field", "data", "to", "database", "."], "sha": "7d25050180000b482d5efe301f54b9ce78963181", "url": "https://github.com/stone-lab/Dynamicfield/blob/7d25050180000b482d5efe301f54b9ce78963181/Utility/Fields/Repeater.php#L309-L342", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/Slug.php", "func_name": "Slug.toVar", "original_string": "public function toVar(string $slug, bool $strict = true): string\n    {\n        $var = $slug; // Initialize.\n        $var = mb_strtolower($this->c::forceAscii($var));\n        $var = preg_replace('/[^a-z0-9]+/u', '_', $var);\n        $var = $this->c::mbTrim($var, '', '_');\n\n        if ($strict && $var && !preg_match('/^[a-z]/u', $var)) {\n            $var = 'x'.$var; // Force `^[a-z]`.\n        }\n        return $var;\n    }", "language": "php", "code": "public function toVar(string $slug, bool $strict = true): string\n    {\n        $var = $slug; // Initialize.\n        $var = mb_strtolower($this->c::forceAscii($var));\n        $var = preg_replace('/[^a-z0-9]+/u', '_', $var);\n        $var = $this->c::mbTrim($var, '', '_');\n\n        if ($strict && $var && !preg_match('/^[a-z]/u', $var)) {\n            $var = 'x'.$var; // Force `^[a-z]`.\n        }\n        return $var;\n    }", "code_tokens": ["public", "function", "toVar", "(", "string", "$", "slug", ",", "bool", "$", "strict", "=", "true", ")", ":", "string", "{", "$", "var", "=", "$", "slug", ";", "// Initialize.", "$", "var", "=", "mb_strtolower", "(", "$", "this", "->", "c", "::", "forceAscii", "(", "$", "var", ")", ")", ";", "$", "var", "=", "preg_replace", "(", "'/[^a-z0-9]+/u'", ",", "'_'", ",", "$", "var", ")", ";", "$", "var", "=", "$", "this", "->", "c", "::", "mbTrim", "(", "$", "var", ",", "''", ",", "'_'", ")", ";", "if", "(", "$", "strict", "&&", "$", "var", "&&", "!", "preg_match", "(", "'/^[a-z]/u'", ",", "$", "var", ")", ")", "{", "$", "var", "=", "'x'", ".", "$", "var", ";", "// Force `^[a-z]`.", "}", "return", "$", "var", ";", "}"], "docstring": "Convert slug to var.\n\n@since 160220 Initial release.\n\n@param string $slug   Slug.\n@param bool   $strict Strict?\n\n@return string Var; based on slug.", "docstring_tokens": ["Convert", "slug", "to", "var", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/Slug.php#L118-L129", "partition": "test"}
{"repo": "vainproject/vain-menu", "path": "src/Menu/Traits/MenuItemTrait.php", "func_name": "MenuItemTrait.getUrlAttribute", "original_string": "public function getUrlAttribute($value)\n    {\n        if ($this->hasChildren()) {\n            return MenuItemContract::URL_EMPTY;\n        }\n\n        switch ($this->type) {\n            case MenuItemContract::TYPE_ROUTE:\n                return $this->routeGracefulOnError($this->target, $this->parameters);\n\n            case MenuItemContract::TYPE_URL:\n                return $this->target;\n\n            default:\n                return;\n        }\n    }", "language": "php", "code": "public function getUrlAttribute($value)\n    {\n        if ($this->hasChildren()) {\n            return MenuItemContract::URL_EMPTY;\n        }\n\n        switch ($this->type) {\n            case MenuItemContract::TYPE_ROUTE:\n                return $this->routeGracefulOnError($this->target, $this->parameters);\n\n            case MenuItemContract::TYPE_URL:\n                return $this->target;\n\n            default:\n                return;\n        }\n    }", "code_tokens": ["public", "function", "getUrlAttribute", "(", "$", "value", ")", "{", "if", "(", "$", "this", "->", "hasChildren", "(", ")", ")", "{", "return", "MenuItemContract", "::", "URL_EMPTY", ";", "}", "switch", "(", "$", "this", "->", "type", ")", "{", "case", "MenuItemContract", "::", "TYPE_ROUTE", ":", "return", "$", "this", "->", "routeGracefulOnError", "(", "$", "this", "->", "target", ",", "$", "this", "->", "parameters", ")", ";", "case", "MenuItemContract", "::", "TYPE_URL", ":", "return", "$", "this", "->", "target", ";", "default", ":", "return", ";", "}", "}"], "docstring": "Builds the targeting url based upon the given\ntype if the current item.\n\n@param $value\n\n@return string", "docstring_tokens": ["Builds", "the", "targeting", "url", "based", "upon", "the", "given", "type", "if", "the", "current", "item", "."], "sha": "ab7622faf76ef5660cbd3feced8c0894fface9bd", "url": "https://github.com/vainproject/vain-menu/blob/ab7622faf76ef5660cbd3feced8c0894fface9bd/src/Menu/Traits/MenuItemTrait.php#L81-L97", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Filesystem/Cache/CachedFactory.php", "func_name": "CachedFactory.createConnector", "original_string": "protected function createConnector(array $config): CacheInterface\n    {\n        $cacheConfig = $config['cache'];\n\n        if (($cache = $this->cacheManager) !== null) {\n            if ($cache->hasDriver($cacheConfig['driver'])) {\n                return new Psr6Cache(\n                    $cache->getDriver($cacheConfig['driver']),\n                    $cacheConfig['key'],\n                    $cacheConfig['expire']\n                );\n            }\n        }\n\n        if ($this->manager->hasConnection($cacheConfig['driver'])) {\n            return new Adapter(\n                $this->manager->createConnection($config),\n                $cacheConfig['key'],\n                $cacheConfig['expire']\n            );\n        }\n\n        throw new InvalidArgumentException(\\sprintf('Unsupported driver [%s].', $cacheConfig['driver']));\n    }", "language": "php", "code": "protected function createConnector(array $config): CacheInterface\n    {\n        $cacheConfig = $config['cache'];\n\n        if (($cache = $this->cacheManager) !== null) {\n            if ($cache->hasDriver($cacheConfig['driver'])) {\n                return new Psr6Cache(\n                    $cache->getDriver($cacheConfig['driver']),\n                    $cacheConfig['key'],\n                    $cacheConfig['expire']\n                );\n            }\n        }\n\n        if ($this->manager->hasConnection($cacheConfig['driver'])) {\n            return new Adapter(\n                $this->manager->createConnection($config),\n                $cacheConfig['key'],\n                $cacheConfig['expire']\n            );\n        }\n\n        throw new InvalidArgumentException(\\sprintf('Unsupported driver [%s].', $cacheConfig['driver']));\n    }", "code_tokens": ["protected", "function", "createConnector", "(", "array", "$", "config", ")", ":", "CacheInterface", "{", "$", "cacheConfig", "=", "$", "config", "[", "'cache'", "]", ";", "if", "(", "(", "$", "cache", "=", "$", "this", "->", "cacheManager", ")", "!==", "null", ")", "{", "if", "(", "$", "cache", "->", "hasDriver", "(", "$", "cacheConfig", "[", "'driver'", "]", ")", ")", "{", "return", "new", "Psr6Cache", "(", "$", "cache", "->", "getDriver", "(", "$", "cacheConfig", "[", "'driver'", "]", ")", ",", "$", "cacheConfig", "[", "'key'", "]", ",", "$", "cacheConfig", "[", "'expire'", "]", ")", ";", "}", "}", "if", "(", "$", "this", "->", "manager", "->", "hasConnection", "(", "$", "cacheConfig", "[", "'driver'", "]", ")", ")", "{", "return", "new", "Adapter", "(", "$", "this", "->", "manager", "->", "createConnection", "(", "$", "config", ")", ",", "$", "cacheConfig", "[", "'key'", "]", ",", "$", "cacheConfig", "[", "'expire'", "]", ")", ";", "}", "throw", "new", "InvalidArgumentException", "(", "\\", "sprintf", "(", "'Unsupported driver [%s].'", ",", "$", "cacheConfig", "[", "'driver'", "]", ")", ")", ";", "}"], "docstring": "Create a connector instance based on the configuration.\n\n@param array $config\n\n@throws \\InvalidArgumentException\n\n@return \\League\\Flysystem\\Cached\\CacheInterface", "docstring_tokens": ["Create", "a", "connector", "instance", "based", "on", "the", "configuration", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Filesystem/Cache/CachedFactory.php#L67-L90", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Core/TypeManager.php", "func_name": "TypeManager.convertDatetimeFormat", "original_string": "public function convertDatetimeFormat($oldFormattedValue, $oldFormat, $newFormat)\n    {\n        if ($oldFormat == $newFormat) {\n            return $oldFormattedValue;\n        }\n        $timeStamp = $this->_parseDate($oldFormat, $oldFormattedValue);\n        return strftime($newFormat, $timeStamp);\n    }", "language": "php", "code": "public function convertDatetimeFormat($oldFormattedValue, $oldFormat, $newFormat)\n    {\n        if ($oldFormat == $newFormat) {\n            return $oldFormattedValue;\n        }\n        $timeStamp = $this->_parseDate($oldFormat, $oldFormattedValue);\n        return strftime($newFormat, $timeStamp);\n    }", "code_tokens": ["public", "function", "convertDatetimeFormat", "(", "$", "oldFormattedValue", ",", "$", "oldFormat", ",", "$", "newFormat", ")", "{", "if", "(", "$", "oldFormat", "==", "$", "newFormat", ")", "{", "return", "$", "oldFormattedValue", ";", "}", "$", "timeStamp", "=", "$", "this", "->", "_parseDate", "(", "$", "oldFormat", ",", "$", "oldFormattedValue", ")", ";", "return", "strftime", "(", "$", "newFormat", ",", "$", "timeStamp", ")", ";", "}"], "docstring": "Convert a formatted datetime to another format\n\n@param $oldFormattedValue - old formated value\n@param $oldFormat - old format of value\n@param $newFormat - new format of value\n@return string new formatted datetime value", "docstring_tokens": ["Convert", "a", "formatted", "datetime", "to", "another", "format"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Core/TypeManager.php#L349-L356", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/Driver/Sql.php", "func_name": "QuickBooks_Driver_Sql._ticketResolve", "original_string": "protected function _ticketResolve($ticket)\n\t{\n\t\tstatic $cache = array();\n\n\t\tif (!$ticket)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\t$errnum = 0;\n\t\t$errmsg = '';\n\n\t\tif (isset($cache[$ticket]))\n\t\t{\n\t\t\treturn $cache[$ticket];\n\t\t}\n\t\telse if ($arr = $this->_fetch($this->_query(\"\n\t\t\tSELECT\n\t\t\t\tquickbooks_ticket_id\n\t\t\tFROM\n\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . \"\n\t\t\tWHERE\n\t\t\t\tticket = '\" . $this->_escape($ticket) . \"' \", $errnum, $errmsg, 0, 1)))\n\t\t{\n\t\t\t$cache[$ticket] = $arr['quickbooks_ticket_id'];\n\n\t\t\treturn $arr['quickbooks_ticket_id'];\n\t\t}\n\n\t\treturn 0;\n\t}", "language": "php", "code": "protected function _ticketResolve($ticket)\n\t{\n\t\tstatic $cache = array();\n\n\t\tif (!$ticket)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\t$errnum = 0;\n\t\t$errmsg = '';\n\n\t\tif (isset($cache[$ticket]))\n\t\t{\n\t\t\treturn $cache[$ticket];\n\t\t}\n\t\telse if ($arr = $this->_fetch($this->_query(\"\n\t\t\tSELECT\n\t\t\t\tquickbooks_ticket_id\n\t\t\tFROM\n\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . \"\n\t\t\tWHERE\n\t\t\t\tticket = '\" . $this->_escape($ticket) . \"' \", $errnum, $errmsg, 0, 1)))\n\t\t{\n\t\t\t$cache[$ticket] = $arr['quickbooks_ticket_id'];\n\n\t\t\treturn $arr['quickbooks_ticket_id'];\n\t\t}\n\n\t\treturn 0;\n\t}", "code_tokens": ["protected", "function", "_ticketResolve", "(", "$", "ticket", ")", "{", "static", "$", "cache", "=", "array", "(", ")", ";", "if", "(", "!", "$", "ticket", ")", "{", "return", "0", ";", "}", "$", "errnum", "=", "0", ";", "$", "errmsg", "=", "''", ";", "if", "(", "isset", "(", "$", "cache", "[", "$", "ticket", "]", ")", ")", "{", "return", "$", "cache", "[", "$", "ticket", "]", ";", "}", "else", "if", "(", "$", "arr", "=", "$", "this", "->", "_fetch", "(", "$", "this", "->", "_query", "(", "\"\n\t\t\tSELECT\n\t\t\t\tquickbooks_ticket_id\n\t\t\tFROM\n\t\t\t\t\"", ".", "$", "this", "->", "_mapTableName", "(", "QUICKBOOKS_DRIVER_SQL_TICKETTABLE", ")", ".", "\"\n\t\t\tWHERE\n\t\t\t\tticket = '\"", ".", "$", "this", "->", "_escape", "(", "$", "ticket", ")", ".", "\"' \"", ",", "$", "errnum", ",", "$", "errmsg", ",", "0", ",", "1", ")", ")", ")", "{", "$", "cache", "[", "$", "ticket", "]", "=", "$", "arr", "[", "'quickbooks_ticket_id'", "]", ";", "return", "$", "arr", "[", "'quickbooks_ticket_id'", "]", ";", "}", "return", "0", ";", "}"], "docstring": "Resolve a ticket string back to a ticket ID number\n\n@param string $ticket\n@return integer", "docstring_tokens": ["Resolve", "a", "ticket", "string", "back", "to", "a", "ticket", "ID", "number"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/Driver/Sql.php#L433-L463", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Routing/Annotations/NativeRouteAnnotations.php", "func_name": "NativeRouteAnnotations.getRouteFromAnnotation", "original_string": "protected function getRouteFromAnnotation(Route $route): RouterRoute\n    {\n        $routerRoute = new RouterRoute();\n\n        $routerRoute\n            ->setPath($route->getPath())\n            ->setRegex($route->getRegex())\n            ->setParams($route->getParams())\n            ->setSegments($route->getSegments())\n            ->setRequestMethods($route->getRequestMethods())\n            ->setSecure($route->isSecure())\n            ->setDynamic($route->isDynamic())\n            ->setId($route->getId())\n            ->setName($route->getName())\n            ->setClass($route->getClass())\n            ->setProperty($route->getProperty())\n            ->setMethod($route->getMethod())\n            ->setStatic($route->isStatic())\n            ->setFunction($route->getFunction())\n            ->setMatches($route->getMatches())\n            ->setDependencies($route->getDependencies())\n            ->setMiddleware($route->getMiddleware())\n            ->setArguments($route->getArguments());\n\n        return $routerRoute;\n    }", "language": "php", "code": "protected function getRouteFromAnnotation(Route $route): RouterRoute\n    {\n        $routerRoute = new RouterRoute();\n\n        $routerRoute\n            ->setPath($route->getPath())\n            ->setRegex($route->getRegex())\n            ->setParams($route->getParams())\n            ->setSegments($route->getSegments())\n            ->setRequestMethods($route->getRequestMethods())\n            ->setSecure($route->isSecure())\n            ->setDynamic($route->isDynamic())\n            ->setId($route->getId())\n            ->setName($route->getName())\n            ->setClass($route->getClass())\n            ->setProperty($route->getProperty())\n            ->setMethod($route->getMethod())\n            ->setStatic($route->isStatic())\n            ->setFunction($route->getFunction())\n            ->setMatches($route->getMatches())\n            ->setDependencies($route->getDependencies())\n            ->setMiddleware($route->getMiddleware())\n            ->setArguments($route->getArguments());\n\n        return $routerRoute;\n    }", "code_tokens": ["protected", "function", "getRouteFromAnnotation", "(", "Route", "$", "route", ")", ":", "RouterRoute", "{", "$", "routerRoute", "=", "new", "RouterRoute", "(", ")", ";", "$", "routerRoute", "->", "setPath", "(", "$", "route", "->", "getPath", "(", ")", ")", "->", "setRegex", "(", "$", "route", "->", "getRegex", "(", ")", ")", "->", "setParams", "(", "$", "route", "->", "getParams", "(", ")", ")", "->", "setSegments", "(", "$", "route", "->", "getSegments", "(", ")", ")", "->", "setRequestMethods", "(", "$", "route", "->", "getRequestMethods", "(", ")", ")", "->", "setSecure", "(", "$", "route", "->", "isSecure", "(", ")", ")", "->", "setDynamic", "(", "$", "route", "->", "isDynamic", "(", ")", ")", "->", "setId", "(", "$", "route", "->", "getId", "(", ")", ")", "->", "setName", "(", "$", "route", "->", "getName", "(", ")", ")", "->", "setClass", "(", "$", "route", "->", "getClass", "(", ")", ")", "->", "setProperty", "(", "$", "route", "->", "getProperty", "(", ")", ")", "->", "setMethod", "(", "$", "route", "->", "getMethod", "(", ")", ")", "->", "setStatic", "(", "$", "route", "->", "isStatic", "(", ")", ")", "->", "setFunction", "(", "$", "route", "->", "getFunction", "(", ")", ")", "->", "setMatches", "(", "$", "route", "->", "getMatches", "(", ")", ")", "->", "setDependencies", "(", "$", "route", "->", "getDependencies", "(", ")", ")", "->", "setMiddleware", "(", "$", "route", "->", "getMiddleware", "(", ")", ")", "->", "setArguments", "(", "$", "route", "->", "getArguments", "(", ")", ")", ";", "return", "$", "routerRoute", ";", "}"], "docstring": "Get a route from a route annotation.\n\n@param Route $route The route annotation\n\n@throws \\InvalidArgumentException\n\n@return \\Valkyrja\\Routing\\Route", "docstring_tokens": ["Get", "a", "route", "from", "a", "route", "annotation", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Routing/Annotations/NativeRouteAnnotations.php#L248-L273", "partition": "test"}
{"repo": "FACT-Finder/FACT-Finder-PHP-Library", "path": "src/log4php/LoggerConfigurable.php", "func_name": "LoggerConfigurable.setLevel", "original_string": "protected function setLevel($property, $value) {\r\n\t\ttry {\r\n\t\t\t$this->$property = LoggerOptionConverter::toLevelEx($value);\r\n\t\t} catch (Exception $ex) {\r\n\t\t\t$value = var_export($value, true);\r\n\t\t\t$this->warn(\"Invalid value given for '$property' property: [$value]. Expected a level value. Property not changed.\");\r\n\t\t}\r\n\t}", "language": "php", "code": "protected function setLevel($property, $value) {\r\n\t\ttry {\r\n\t\t\t$this->$property = LoggerOptionConverter::toLevelEx($value);\r\n\t\t} catch (Exception $ex) {\r\n\t\t\t$value = var_export($value, true);\r\n\t\t\t$this->warn(\"Invalid value given for '$property' property: [$value]. Expected a level value. Property not changed.\");\r\n\t\t}\r\n\t}", "code_tokens": ["protected", "function", "setLevel", "(", "$", "property", ",", "$", "value", ")", "{", "try", "{", "$", "this", "->", "$", "property", "=", "LoggerOptionConverter", "::", "toLevelEx", "(", "$", "value", ")", ";", "}", "catch", "(", "Exception", "$", "ex", ")", "{", "$", "value", "=", "var_export", "(", "$", "value", ",", "true", ")", ";", "$", "this", "->", "warn", "(", "\"Invalid value given for '$property' property: [$value]. Expected a level value. Property not changed.\"", ")", ";", "}", "}"], "docstring": "Setter function for LoggerLevel values.", "docstring_tokens": ["Setter", "function", "for", "LoggerLevel", "values", "."], "sha": "5c795b94117fa7ac40f5e80d4edc93999a76fc90", "url": "https://github.com/FACT-Finder/FACT-Finder-PHP-Library/blob/5c795b94117fa7ac40f5e80d4edc93999a76fc90/src/log4php/LoggerConfigurable.php#L53-L60", "partition": "test"}
{"repo": "mikecao/flight", "path": "flight/core/Loader.php", "func_name": "Loader.addDirectory", "original_string": "public static function addDirectory($dir) {\n        if (is_array($dir) || is_object($dir)) {\n            foreach ($dir as $value) {\n                self::addDirectory($value);\n            }\n        }\n        else if (is_string($dir)) {\n            if (!in_array($dir, self::$dirs)) self::$dirs[] = $dir;\n        }\n    }", "language": "php", "code": "public static function addDirectory($dir) {\n        if (is_array($dir) || is_object($dir)) {\n            foreach ($dir as $value) {\n                self::addDirectory($value);\n            }\n        }\n        else if (is_string($dir)) {\n            if (!in_array($dir, self::$dirs)) self::$dirs[] = $dir;\n        }\n    }", "code_tokens": ["public", "static", "function", "addDirectory", "(", "$", "dir", ")", "{", "if", "(", "is_array", "(", "$", "dir", ")", "||", "is_object", "(", "$", "dir", ")", ")", "{", "foreach", "(", "$", "dir", "as", "$", "value", ")", "{", "self", "::", "addDirectory", "(", "$", "value", ")", ";", "}", "}", "else", "if", "(", "is_string", "(", "$", "dir", ")", ")", "{", "if", "(", "!", "in_array", "(", "$", "dir", ",", "self", "::", "$", "dirs", ")", ")", "self", "::", "$", "dirs", "[", "]", "=", "$", "dir", ";", "}", "}"], "docstring": "Adds a directory for autoloading classes.\n\n@param mixed $dir Directory path", "docstring_tokens": ["Adds", "a", "directory", "for", "autoloading", "classes", "."], "sha": "c57ee8cb8d8a4479ce7da28df9538eb8265f67be", "url": "https://github.com/mikecao/flight/blob/c57ee8cb8d8a4479ce7da28df9538eb8265f67be/flight/core/Loader.php#L205-L214", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/ORM/Repositories/PDORepository.php", "func_name": "PDORepository.save", "original_string": "public function save(Entity $entity): bool\n    {\n        $this->validateEntity($entity);\n\n        return $this->saveCreateDelete('update', $entity);\n    }", "language": "php", "code": "public function save(Entity $entity): bool\n    {\n        $this->validateEntity($entity);\n\n        return $this->saveCreateDelete('update', $entity);\n    }", "code_tokens": ["public", "function", "save", "(", "Entity", "$", "entity", ")", ":", "bool", "{", "$", "this", "->", "validateEntity", "(", "$", "entity", ")", ";", "return", "$", "this", "->", "saveCreateDelete", "(", "'update'", ",", "$", "entity", ")", ";", "}"], "docstring": "Save an existing model given criteria to find. If no criteria specified uses all model properties.\n\n<code>\n$this->save(Entity::class)\n</code>\n\n@param \\Valkyrja\\ORM\\Entity $entity\n\n@throws ExecuteException\n@throws InvalidArgumentException\n@throws InvalidEntityException\n\n@return bool", "docstring_tokens": ["Save", "an", "existing", "model", "given", "criteria", "to", "find", ".", "If", "no", "criteria", "specified", "uses", "all", "model", "properties", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/ORM/Repositories/PDORepository.php#L243-L248", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/HTTP/Request2/CookieJar.php", "func_name": "HTTP_Request2_CookieJar.serialize", "original_string": "public function serialize()\r\n    {\r\n        $cookies = $this->getAll();\r\n        if (!$this->serializeSession) {\r\n            for ($i = count($cookies) - 1; $i >= 0; $i--) {\r\n                if (empty($cookies[$i]['expires'])) {\r\n                    unset($cookies[$i]);\r\n                }\r\n            }\r\n        }\r\n        return serialize(array(\r\n            'cookies'          => $cookies,\r\n            'serializeSession' => $this->serializeSession,\r\n            'useList'          => $this->useList\r\n        ));\r\n    }", "language": "php", "code": "public function serialize()\r\n    {\r\n        $cookies = $this->getAll();\r\n        if (!$this->serializeSession) {\r\n            for ($i = count($cookies) - 1; $i >= 0; $i--) {\r\n                if (empty($cookies[$i]['expires'])) {\r\n                    unset($cookies[$i]);\r\n                }\r\n            }\r\n        }\r\n        return serialize(array(\r\n            'cookies'          => $cookies,\r\n            'serializeSession' => $this->serializeSession,\r\n            'useList'          => $this->useList\r\n        ));\r\n    }", "code_tokens": ["public", "function", "serialize", "(", ")", "{", "$", "cookies", "=", "$", "this", "->", "getAll", "(", ")", ";", "if", "(", "!", "$", "this", "->", "serializeSession", ")", "{", "for", "(", "$", "i", "=", "count", "(", "$", "cookies", ")", "-", "1", ";", "$", "i", ">=", "0", ";", "$", "i", "--", ")", "{", "if", "(", "empty", "(", "$", "cookies", "[", "$", "i", "]", "[", "'expires'", "]", ")", ")", "{", "unset", "(", "$", "cookies", "[", "$", "i", "]", ")", ";", "}", "}", "}", "return", "serialize", "(", "array", "(", "'cookies'", "=>", "$", "cookies", ",", "'serializeSession'", "=>", "$", "this", "->", "serializeSession", ",", "'useList'", "=>", "$", "this", "->", "useList", ")", ")", ";", "}"], "docstring": "Returns string representation of object\n\n@return string\n\n@see    Serializable::serialize()", "docstring_tokens": ["Returns", "string", "representation", "of", "object"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/HTTP/Request2/CookieJar.php#L342-L357", "partition": "test"}
{"repo": "laravie/html", "path": "src/HtmlServiceProvider.php", "func_name": "HtmlServiceProvider.registerHtmlBuilder", "original_string": "protected function registerHtmlBuilder(): void\n    {\n        $this->app->singleton('html', function ($app) {\n            return new HtmlBuilder(\n                $app->make('url'), $app->make('view')\n            );\n        });\n    }", "language": "php", "code": "protected function registerHtmlBuilder(): void\n    {\n        $this->app->singleton('html', function ($app) {\n            return new HtmlBuilder(\n                $app->make('url'), $app->make('view')\n            );\n        });\n    }", "code_tokens": ["protected", "function", "registerHtmlBuilder", "(", ")", ":", "void", "{", "$", "this", "->", "app", "->", "singleton", "(", "'html'", ",", "function", "(", "$", "app", ")", "{", "return", "new", "HtmlBuilder", "(", "$", "app", "->", "make", "(", "'url'", ")", ",", "$", "app", "->", "make", "(", "'view'", ")", ")", ";", "}", ")", ";", "}"], "docstring": "Register the HTML builder instance.\n\n@return void", "docstring_tokens": ["Register", "the", "HTML", "builder", "instance", "."], "sha": "b5428277451b00d54abc6d31307a45c8999e197b", "url": "https://github.com/laravie/html/blob/b5428277451b00d54abc6d31307a45c8999e197b/src/HtmlServiceProvider.php#L30-L37", "partition": "test"}
{"repo": "shumkov/rediska", "path": "library/Rediska/Connection/Exec.php", "func_name": "Rediska_Connection_Exec.write", "original_string": "public function write()\n    {\n        $result = $this->getConnection()->write($this->getCommand());\n        $this->_isWritten = true;\n\n        return $result;\n    }", "language": "php", "code": "public function write()\n    {\n        $result = $this->getConnection()->write($this->getCommand());\n        $this->_isWritten = true;\n\n        return $result;\n    }", "code_tokens": ["public", "function", "write", "(", ")", "{", "$", "result", "=", "$", "this", "->", "getConnection", "(", ")", "->", "write", "(", "$", "this", "->", "getCommand", "(", ")", ")", ";", "$", "this", "->", "_isWritten", "=", "true", ";", "return", "$", "result", ";", "}"], "docstring": "Write command to connection\n\n@return boolean", "docstring_tokens": ["Write", "command", "to", "connection"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/library/Rediska/Connection/Exec.php#L84-L90", "partition": "test"}
{"repo": "dmetri333/wiggum-services", "path": "src/db/Grammar.class.php", "func_name": "Grammar.compileInsert", "original_string": "public function compileInsert(Builder $query) {\n\t\t$table = $this->wrap($query->from[0]);\n\t\n\t\t$columns = $this->columnize(array_keys(reset($query->inserts)));\n\t\t\n\t\t// We need to build a list of parameter place-holders of values that are bound\n\t\t// to the query. Each insert should have the exact same amount of parameter\n\t\t// bindings so we can just go off the first list of values in this array.\n\t\t$parameters = $this->parameterize(reset($query->inserts));\n\t\t\n\t\t$value = array_fill(0, count($query->inserts), \"($parameters)\");\n\t\n\t\t$parameters = implode(', ', $value);\n\t\n\t\treturn \"insert into $table ($columns) values $parameters\";\n\t}", "language": "php", "code": "public function compileInsert(Builder $query) {\n\t\t$table = $this->wrap($query->from[0]);\n\t\n\t\t$columns = $this->columnize(array_keys(reset($query->inserts)));\n\t\t\n\t\t// We need to build a list of parameter place-holders of values that are bound\n\t\t// to the query. Each insert should have the exact same amount of parameter\n\t\t// bindings so we can just go off the first list of values in this array.\n\t\t$parameters = $this->parameterize(reset($query->inserts));\n\t\t\n\t\t$value = array_fill(0, count($query->inserts), \"($parameters)\");\n\t\n\t\t$parameters = implode(', ', $value);\n\t\n\t\treturn \"insert into $table ($columns) values $parameters\";\n\t}", "code_tokens": ["public", "function", "compileInsert", "(", "Builder", "$", "query", ")", "{", "$", "table", "=", "$", "this", "->", "wrap", "(", "$", "query", "->", "from", "[", "0", "]", ")", ";", "$", "columns", "=", "$", "this", "->", "columnize", "(", "array_keys", "(", "reset", "(", "$", "query", "->", "inserts", ")", ")", ")", ";", "// We need to build a list of parameter place-holders of values that are bound", "// to the query. Each insert should have the exact same amount of parameter", "// bindings so we can just go off the first list of values in this array.", "$", "parameters", "=", "$", "this", "->", "parameterize", "(", "reset", "(", "$", "query", "->", "inserts", ")", ")", ";", "$", "value", "=", "array_fill", "(", "0", ",", "count", "(", "$", "query", "->", "inserts", ")", ",", "\"($parameters)\"", ")", ";", "$", "parameters", "=", "implode", "(", "', '", ",", "$", "value", ")", ";", "return", "\"insert into $table ($columns) values $parameters\"", ";", "}"], "docstring": "Compile an insert statement into SQL.\n\n@param  Builder $query\n@param  array  $values\n@return string", "docstring_tokens": ["Compile", "an", "insert", "statement", "into", "SQL", "."], "sha": "be29764c9e825d6243df2561bee25e1a62a0c8eb", "url": "https://github.com/dmetri333/wiggum-services/blob/be29764c9e825d6243df2561bee25e1a62a0c8eb/src/db/Grammar.class.php#L331-L346", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Routing/TreeGenerator/RouteTreeBuilder.php", "func_name": "RouteTreeBuilder.addRouteToNode", "original_string": "private function addRouteToNode(\n        RouteTreeNode $node,\n        RouteContract $route,\n        array $segments,\n        int $segmentDepth,\n        array $parameterIndexNameMap\n    ): void {\n        if (\\count($segments) === 0) {\n            $node->getContents()->addRoute($route, $parameterIndexNameMap);\n\n            return;\n        }\n\n        $childSegmentMatcher = $this->getMatcher(\\array_shift($segments), $parameterIndexNameMap);\n\n        if ($node->getContents()->hasChildFor($childSegmentMatcher)) {\n            $child = $node->getContents()->getChild($childSegmentMatcher);\n        } else {\n            $child = new RouteTreeNode(\n                [$segmentDepth => $childSegmentMatcher],\n                \\count($segments) === 0 ? new MatchedRouteDataMap() : new ChildrenNodeCollection()\n            );\n            $node->getContents()->addChild($child);\n        }\n\n        $this->addRouteToNode($child, $route, $segments, $segmentDepth + 1, $parameterIndexNameMap);\n    }", "language": "php", "code": "private function addRouteToNode(\n        RouteTreeNode $node,\n        RouteContract $route,\n        array $segments,\n        int $segmentDepth,\n        array $parameterIndexNameMap\n    ): void {\n        if (\\count($segments) === 0) {\n            $node->getContents()->addRoute($route, $parameterIndexNameMap);\n\n            return;\n        }\n\n        $childSegmentMatcher = $this->getMatcher(\\array_shift($segments), $parameterIndexNameMap);\n\n        if ($node->getContents()->hasChildFor($childSegmentMatcher)) {\n            $child = $node->getContents()->getChild($childSegmentMatcher);\n        } else {\n            $child = new RouteTreeNode(\n                [$segmentDepth => $childSegmentMatcher],\n                \\count($segments) === 0 ? new MatchedRouteDataMap() : new ChildrenNodeCollection()\n            );\n            $node->getContents()->addChild($child);\n        }\n\n        $this->addRouteToNode($child, $route, $segments, $segmentDepth + 1, $parameterIndexNameMap);\n    }", "code_tokens": ["private", "function", "addRouteToNode", "(", "RouteTreeNode", "$", "node", ",", "RouteContract", "$", "route", ",", "array", "$", "segments", ",", "int", "$", "segmentDepth", ",", "array", "$", "parameterIndexNameMap", ")", ":", "void", "{", "if", "(", "\\", "count", "(", "$", "segments", ")", "===", "0", ")", "{", "$", "node", "->", "getContents", "(", ")", "->", "addRoute", "(", "$", "route", ",", "$", "parameterIndexNameMap", ")", ";", "return", ";", "}", "$", "childSegmentMatcher", "=", "$", "this", "->", "getMatcher", "(", "\\", "array_shift", "(", "$", "segments", ")", ",", "$", "parameterIndexNameMap", ")", ";", "if", "(", "$", "node", "->", "getContents", "(", ")", "->", "hasChildFor", "(", "$", "childSegmentMatcher", ")", ")", "{", "$", "child", "=", "$", "node", "->", "getContents", "(", ")", "->", "getChild", "(", "$", "childSegmentMatcher", ")", ";", "}", "else", "{", "$", "child", "=", "new", "RouteTreeNode", "(", "[", "$", "segmentDepth", "=>", "$", "childSegmentMatcher", "]", ",", "\\", "count", "(", "$", "segments", ")", "===", "0", "?", "new", "MatchedRouteDataMap", "(", ")", ":", "new", "ChildrenNodeCollection", "(", ")", ")", ";", "$", "node", "->", "getContents", "(", ")", "->", "addChild", "(", "$", "child", ")", ";", "}", "$", "this", "->", "addRouteToNode", "(", "$", "child", ",", "$", "route", ",", "$", "segments", ",", "$", "segmentDepth", "+", "1", ",", "$", "parameterIndexNameMap", ")", ";", "}"], "docstring": "Adds a route to the node tree.\n\n@param \\Viserio\\Component\\Routing\\TreeGenerator\\RouteTreeNode $node\n@param \\Viserio\\Component\\Contract\\Routing\\Route              $route\n@param array                                                  $segments\n@param int                                                    $segmentDepth\n@param array                                                  $parameterIndexNameMap\n\n@throws \\Viserio\\Component\\Contract\\Routing\\Exception\\RuntimeException\n\n@return void", "docstring_tokens": ["Adds", "a", "route", "to", "the", "node", "tree", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Routing/TreeGenerator/RouteTreeBuilder.php#L73-L99", "partition": "test"}
{"repo": "shumkov/rediska", "path": "examples/retwitter/application/controllers/PostController.php", "func_name": "PostController.indexAction", "original_string": "public function indexAction()\n    {\n        $currentUser = Zend_Auth::getInstance()->getStorage()->read();\n        \n        $feed = new Feed($currentUser['id']);\n        \n        $this->view->posts = array();\n        \n        // just for example, better use multiget\n        foreach ($feed as $postId) {\n            $post = new Post($postId);\n            $postData = $post->getValue();\n            \n            $user = new User($postData['userId']);\n            $userData = $user->getValue();\n            \n            $this->view->posts[] = array('post' => $postData, 'user' => $userData);\n        }\n    }", "language": "php", "code": "public function indexAction()\n    {\n        $currentUser = Zend_Auth::getInstance()->getStorage()->read();\n        \n        $feed = new Feed($currentUser['id']);\n        \n        $this->view->posts = array();\n        \n        // just for example, better use multiget\n        foreach ($feed as $postId) {\n            $post = new Post($postId);\n            $postData = $post->getValue();\n            \n            $user = new User($postData['userId']);\n            $userData = $user->getValue();\n            \n            $this->view->posts[] = array('post' => $postData, 'user' => $userData);\n        }\n    }", "code_tokens": ["public", "function", "indexAction", "(", ")", "{", "$", "currentUser", "=", "Zend_Auth", "::", "getInstance", "(", ")", "->", "getStorage", "(", ")", "->", "read", "(", ")", ";", "$", "feed", "=", "new", "Feed", "(", "$", "currentUser", "[", "'id'", "]", ")", ";", "$", "this", "->", "view", "->", "posts", "=", "array", "(", ")", ";", "// just for example, better use multiget", "foreach", "(", "$", "feed", "as", "$", "postId", ")", "{", "$", "post", "=", "new", "Post", "(", "$", "postId", ")", ";", "$", "postData", "=", "$", "post", "->", "getValue", "(", ")", ";", "$", "user", "=", "new", "User", "(", "$", "postData", "[", "'userId'", "]", ")", ";", "$", "userData", "=", "$", "user", "->", "getValue", "(", ")", ";", "$", "this", "->", "view", "->", "posts", "[", "]", "=", "array", "(", "'post'", "=>", "$", "postData", ",", "'user'", "=>", "$", "userData", ")", ";", "}", "}"], "docstring": "Read your posts", "docstring_tokens": ["Read", "your", "posts"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/examples/retwitter/application/controllers/PostController.php#L53-L71", "partition": "test"}
{"repo": "contao-bootstrap/core", "path": "src/Listener/ConfigSubscriber.php", "func_name": "ConfigSubscriber.enterThemeContext", "original_string": "public function enterThemeContext(InitializeLayout $event): void\n    {\n        $event->getEnvironment()->enterContext(ThemeContext::forTheme((int) $event->getLayoutModel()->pid));\n    }", "language": "php", "code": "public function enterThemeContext(InitializeLayout $event): void\n    {\n        $event->getEnvironment()->enterContext(ThemeContext::forTheme((int) $event->getLayoutModel()->pid));\n    }", "code_tokens": ["public", "function", "enterThemeContext", "(", "InitializeLayout", "$", "event", ")", ":", "void", "{", "$", "event", "->", "getEnvironment", "(", ")", "->", "enterContext", "(", "ThemeContext", "::", "forTheme", "(", "(", "int", ")", "$", "event", "->", "getLayoutModel", "(", ")", "->", "pid", ")", ")", ";", "}"], "docstring": "Enter the heme context.\n\n@param InitializeLayout $event The subscribed event.\n\n@return void", "docstring_tokens": ["Enter", "the", "heme", "context", "."], "sha": "5f9b12b921847e7c2b8d9fb332f157a2b6bea6b4", "url": "https://github.com/contao-bootstrap/core/blob/5f9b12b921847e7c2b8d9fb332f157a2b6bea6b4/src/Listener/ConfigSubscriber.php#L91-L94", "partition": "test"}
{"repo": "mastashake08/laravel-spark-archive", "path": "app/Teams/CanJoinTeams.php", "func_name": "CanJoinTeams.teamRole", "original_string": "public function teamRole($team)\n    {\n        $team = $this->teams->find($team->id);\n\n        if ($team) {\n            return $team->pivot->role;\n        }\n    }", "language": "php", "code": "public function teamRole($team)\n    {\n        $team = $this->teams->find($team->id);\n\n        if ($team) {\n            return $team->pivot->role;\n        }\n    }", "code_tokens": ["public", "function", "teamRole", "(", "$", "team", ")", "{", "$", "team", "=", "$", "this", "->", "teams", "->", "find", "(", "$", "team", "->", "id", ")", ";", "if", "(", "$", "team", ")", "{", "return", "$", "team", "->", "pivot", "->", "role", ";", "}", "}"], "docstring": "Get the user's role on a given team.\n\n@param  \\Laravel\\Spark\\Teams\\Team  $team\n@return string", "docstring_tokens": ["Get", "the", "user", "s", "role", "on", "a", "given", "team", "."], "sha": "5c833e498eefed6fea79823e0a760f53a323207a", "url": "https://github.com/mastashake08/laravel-spark-archive/blob/5c833e498eefed6fea79823e0a760f53a323207a/app/Teams/CanJoinTeams.php#L118-L125", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/ORM/QueryBuilder/NativeQueryBuilder.php", "func_name": "NativeQueryBuilder.getDeleteQuery", "original_string": "protected function getDeleteQuery(): string\n    {\n        return $this->type\n            . ' ' . Statement::FROM\n            . ' ' . $this->table\n            . ' ' . $this->getWhereQuery()\n            . ' ' . $this->getOrderByQuery()\n            . ' ' . $this->getLimitQuery();\n    }", "language": "php", "code": "protected function getDeleteQuery(): string\n    {\n        return $this->type\n            . ' ' . Statement::FROM\n            . ' ' . $this->table\n            . ' ' . $this->getWhereQuery()\n            . ' ' . $this->getOrderByQuery()\n            . ' ' . $this->getLimitQuery();\n    }", "code_tokens": ["protected", "function", "getDeleteQuery", "(", ")", ":", "string", "{", "return", "$", "this", "->", "type", ".", "' '", ".", "Statement", "::", "FROM", ".", "' '", ".", "$", "this", "->", "table", ".", "' '", ".", "$", "this", "->", "getWhereQuery", "(", ")", ".", "' '", ".", "$", "this", "->", "getOrderByQuery", "(", ")", ".", "' '", ".", "$", "this", "->", "getLimitQuery", "(", ")", ";", "}"], "docstring": "Get an DELETE query.\n\n@return string", "docstring_tokens": ["Get", "an", "DELETE", "query", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/ORM/QueryBuilder/NativeQueryBuilder.php#L537-L545", "partition": "test"}
{"repo": "CDV-Yami/sheet-fight", "path": "src/Yami/SheetFight/Model/MoveBuilder.php", "func_name": "MoveBuilder.advantageOnGuard", "original_string": "public function advantageOnGuard($frames)\n    {\n        if (null !== $this->guardAdvantage) {\n            throw new LogicException('Guard advantage already defined');\n        }\n        $this->guardAdvantage = $frames;\n\n        return $this;\n    }", "language": "php", "code": "public function advantageOnGuard($frames)\n    {\n        if (null !== $this->guardAdvantage) {\n            throw new LogicException('Guard advantage already defined');\n        }\n        $this->guardAdvantage = $frames;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "advantageOnGuard", "(", "$", "frames", ")", "{", "if", "(", "null", "!==", "$", "this", "->", "guardAdvantage", ")", "{", "throw", "new", "LogicException", "(", "'Guard advantage already defined'", ")", ";", "}", "$", "this", "->", "guardAdvantage", "=", "$", "frames", ";", "return", "$", "this", ";", "}"], "docstring": "Define the difference of frame with the target on guard to get back to the neutral state.\n\n@param int $frames\n\n@return static", "docstring_tokens": ["Define", "the", "difference", "of", "frame", "with", "the", "target", "on", "guard", "to", "get", "back", "to", "the", "neutral", "state", "."], "sha": "d991329f367c1320cd5c38511e52fbd9ff60cb12", "url": "https://github.com/CDV-Yami/sheet-fight/blob/d991329f367c1320cd5c38511e52fbd9ff60cb12/src/Yami/SheetFight/Model/MoveBuilder.php#L262-L270", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/BaseConnection.php", "func_name": "BaseConnection.simpleQuery", "original_string": "public function simpleQuery(string $sql)\n\t{\n\t\tif (empty($this->connID))\n\t\t{\n\t\t\t$this->initialize();\n\t\t}\n\n\t\treturn $this->execute($sql);\n\t}", "language": "php", "code": "public function simpleQuery(string $sql)\n\t{\n\t\tif (empty($this->connID))\n\t\t{\n\t\t\t$this->initialize();\n\t\t}\n\n\t\treturn $this->execute($sql);\n\t}", "code_tokens": ["public", "function", "simpleQuery", "(", "string", "$", "sql", ")", "{", "if", "(", "empty", "(", "$", "this", "->", "connID", ")", ")", "{", "$", "this", "->", "initialize", "(", ")", ";", "}", "return", "$", "this", "->", "execute", "(", "$", "sql", ")", ";", "}"], "docstring": "Performs a basic query against the database. No binding or caching\nis performed, nor are transactions handled. Simply takes a raw\nquery string and returns the database-specific result id.\n\n@param string $sql\n\n@return mixed", "docstring_tokens": ["Performs", "a", "basic", "query", "against", "the", "database", ".", "No", "binding", "or", "caching", "is", "performed", "nor", "are", "transactions", "handled", ".", "Simply", "takes", "a", "raw", "query", "string", "and", "returns", "the", "database", "-", "specific", "result", "id", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/BaseConnection.php#L702-L710", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Web/Formatters/JsonResponseFormatter.php", "func_name": "JsonResponseFormatter.formatJson", "original_string": "protected function formatJson($response)\n    {\n        $bodyRaw = $response->getRawBody();\n        if ($bodyRaw !== null) {\n            $options = $this->encodeOptions;\n            if ($this->prettyPrint) {\n                $options |= JSON_PRETTY_PRINT;\n            }\n            return $response->app instanceof Reaction\\RequestApplicationInterface\n                ? $response->app->helpers->json->encode($bodyRaw, $options)\n                : Json::encode($bodyRaw, $options);\n        }\n        return '';\n    }", "language": "php", "code": "protected function formatJson($response)\n    {\n        $bodyRaw = $response->getRawBody();\n        if ($bodyRaw !== null) {\n            $options = $this->encodeOptions;\n            if ($this->prettyPrint) {\n                $options |= JSON_PRETTY_PRINT;\n            }\n            return $response->app instanceof Reaction\\RequestApplicationInterface\n                ? $response->app->helpers->json->encode($bodyRaw, $options)\n                : Json::encode($bodyRaw, $options);\n        }\n        return '';\n    }", "code_tokens": ["protected", "function", "formatJson", "(", "$", "response", ")", "{", "$", "bodyRaw", "=", "$", "response", "->", "getRawBody", "(", ")", ";", "if", "(", "$", "bodyRaw", "!==", "null", ")", "{", "$", "options", "=", "$", "this", "->", "encodeOptions", ";", "if", "(", "$", "this", "->", "prettyPrint", ")", "{", "$", "options", "|=", "JSON_PRETTY_PRINT", ";", "}", "return", "$", "response", "->", "app", "instanceof", "Reaction", "\\", "RequestApplicationInterface", "?", "$", "response", "->", "app", "->", "helpers", "->", "json", "->", "encode", "(", "$", "bodyRaw", ",", "$", "options", ")", ":", "Json", "::", "encode", "(", "$", "bodyRaw", ",", "$", "options", ")", ";", "}", "return", "''", ";", "}"], "docstring": "Formats response data in JSON format.\n@param ResponseBuilderInterface $response\n@return string", "docstring_tokens": ["Formats", "response", "data", "in", "JSON", "format", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Web/Formatters/JsonResponseFormatter.php#L103-L116", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Models/Observers/InventoryStockObserver.php", "func_name": "InventoryStockObserver.deleted", "original_string": "public function deleted(InventoryStock $stock)\n    {\n        $movements = $stock->movements()->get();\n\n        if (count($movements) > 0) {\n            foreach ($movements as $movement) {\n                $movement->delete();\n            }\n        }\n    }", "language": "php", "code": "public function deleted(InventoryStock $stock)\n    {\n        $movements = $stock->movements()->get();\n\n        if (count($movements) > 0) {\n            foreach ($movements as $movement) {\n                $movement->delete();\n            }\n        }\n    }", "code_tokens": ["public", "function", "deleted", "(", "InventoryStock", "$", "stock", ")", "{", "$", "movements", "=", "$", "stock", "->", "movements", "(", ")", "->", "get", "(", ")", ";", "if", "(", "count", "(", "$", "movements", ")", ">", "0", ")", "{", "foreach", "(", "$", "movements", "as", "$", "movement", ")", "{", "$", "movement", "->", "delete", "(", ")", ";", "}", "}", "}"], "docstring": "Captures the Inventory Stock models deleted event\nand cascades the delete to all of it's movements.\n\n@param InventoryStock $stock", "docstring_tokens": ["Captures", "the", "Inventory", "Stock", "models", "deleted", "event", "and", "cascades", "the", "delete", "to", "all", "of", "it", "s", "movements", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Models/Observers/InventoryStockObserver.php#L15-L24", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/SecureString.php", "func_name": "SecureString.twiddle", "original_string": "public function twiddle($string, $index, $value, $encode = false) {\n        $parts = explode(static::SEP, $string);\n\n        if ($encode) {\n            $value = static::base64urlEncode($value);\n        }\n        $parts[$index] = $value;\n\n        return implode(static::SEP, $parts);\n    }", "language": "php", "code": "public function twiddle($string, $index, $value, $encode = false) {\n        $parts = explode(static::SEP, $string);\n\n        if ($encode) {\n            $value = static::base64urlEncode($value);\n        }\n        $parts[$index] = $value;\n\n        return implode(static::SEP, $parts);\n    }", "code_tokens": ["public", "function", "twiddle", "(", "$", "string", ",", "$", "index", ",", "$", "value", ",", "$", "encode", "=", "false", ")", "{", "$", "parts", "=", "explode", "(", "static", "::", "SEP", ",", "$", "string", ")", ";", "if", "(", "$", "encode", ")", "{", "$", "value", "=", "static", "::", "base64urlEncode", "(", "$", "value", ")", ";", "}", "$", "parts", "[", "$", "index", "]", "=", "$", "value", ";", "return", "implode", "(", "static", "::", "SEP", ",", "$", "parts", ")", ";", "}"], "docstring": "Twiddle a value in an encoded secure string to another value.\n\nThis method is mainly for testing so that an invalid string can be created.\n\n@param string $string A valid cookie to twiddle.\n@param int $index The index of the new value.\n@param string $value The new value. This will be base64url encoded.\n@param bool $encode Whether or not to base64 url encode the value.\n@return string Returns the new encoded cookie.", "docstring_tokens": ["Twiddle", "a", "value", "in", "an", "encoded", "secure", "string", "to", "another", "value", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/SecureString.php#L429-L438", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Routing/TreeGenerator/PHPCodeCollection.php", "func_name": "PHPCodeCollection.appendLine", "original_string": "public function appendLine(string $code = ''): void\n    {\n        $this->append($code);\n        $this->code .= \\PHP_EOL;\n    }", "language": "php", "code": "public function appendLine(string $code = ''): void\n    {\n        $this->append($code);\n        $this->code .= \\PHP_EOL;\n    }", "code_tokens": ["public", "function", "appendLine", "(", "string", "$", "code", "=", "''", ")", ":", "void", "{", "$", "this", "->", "append", "(", "$", "code", ")", ";", "$", "this", "->", "code", ".=", "\\", "PHP_EOL", ";", "}"], "docstring": "Appends the supplied code and a new line to the builder.\n\n@param string $code", "docstring_tokens": ["Appends", "the", "supplied", "code", "and", "a", "new", "line", "to", "the", "builder", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Routing/TreeGenerator/PHPCodeCollection.php#L38-L42", "partition": "test"}
{"repo": "jasny/dotkey", "path": "src/DotKey.php", "func_name": "DotKey.set", "original_string": "public function set($key, $value)\n    {\n        $index = explode('.', $key);\n        self::setValue($this->item, $index, $value, false, $err);\n        \n        if ($err) {\n            $invalidPath = join('.', array_slice($index, 0, -1 * $err->incomplete));\n            $reason = isset($err->var) ? \"'$invalidPath' is a {$err->var}\" : \"'$invalidPath' doesn't exist\";\n            trigger_error(\"Unable to set '$key': $reason\", E_USER_WARNING);\n        } // @codeCoverageIgnore\n        \n        return $this->item;\n    }", "language": "php", "code": "public function set($key, $value)\n    {\n        $index = explode('.', $key);\n        self::setValue($this->item, $index, $value, false, $err);\n        \n        if ($err) {\n            $invalidPath = join('.', array_slice($index, 0, -1 * $err->incomplete));\n            $reason = isset($err->var) ? \"'$invalidPath' is a {$err->var}\" : \"'$invalidPath' doesn't exist\";\n            trigger_error(\"Unable to set '$key': $reason\", E_USER_WARNING);\n        } // @codeCoverageIgnore\n        \n        return $this->item;\n    }", "code_tokens": ["public", "function", "set", "(", "$", "key", ",", "$", "value", ")", "{", "$", "index", "=", "explode", "(", "'.'", ",", "$", "key", ")", ";", "self", "::", "setValue", "(", "$", "this", "->", "item", ",", "$", "index", ",", "$", "value", ",", "false", ",", "$", "err", ")", ";", "if", "(", "$", "err", ")", "{", "$", "invalidPath", "=", "join", "(", "'.'", ",", "array_slice", "(", "$", "index", ",", "0", ",", "-", "1", "*", "$", "err", "->", "incomplete", ")", ")", ";", "$", "reason", "=", "isset", "(", "$", "err", "->", "var", ")", "?", "\"'$invalidPath' is a {$err->var}\"", ":", "\"'$invalidPath' doesn't exist\"", ";", "trigger_error", "(", "\"Unable to set '$key': $reason\"", ",", "E_USER_WARNING", ")", ";", "}", "// @codeCoverageIgnore", "return", "$", "this", "->", "item", ";", "}"], "docstring": "Set a value\n\n@param string $key    The index to fetch in dot notation\n@param mixed  $value\n@return object|array", "docstring_tokens": ["Set", "a", "value"], "sha": "2ad4ff1bb784460ff601f5d25e992b630768b17f", "url": "https://github.com/jasny/dotkey/blob/2ad4ff1bb784460ff601f5d25e992b630768b17f/src/DotKey.php#L107-L119", "partition": "test"}
{"repo": "evervasquez/waygenerator-modificado", "path": "src/Way/Generators/Commands/ResourceGeneratorCommand.php", "func_name": "ResourceGeneratorCommand.callRepository", "original_string": "protected function callRepository($resource)\n    {\n        $repositoryName = $this->getRepositoryName($resource);\n\n        if ($this->confirm(\"Do you want me to create a $repositoryName Repository? [yes|no]\"))\n        {\n            $this->call('generate:repository', compact('repositoryName'));\n        }\n    }", "language": "php", "code": "protected function callRepository($resource)\n    {\n        $repositoryName = $this->getRepositoryName($resource);\n\n        if ($this->confirm(\"Do you want me to create a $repositoryName Repository? [yes|no]\"))\n        {\n            $this->call('generate:repository', compact('repositoryName'));\n        }\n    }", "code_tokens": ["protected", "function", "callRepository", "(", "$", "resource", ")", "{", "$", "repositoryName", "=", "$", "this", "->", "getRepositoryName", "(", "$", "resource", ")", ";", "if", "(", "$", "this", "->", "confirm", "(", "\"Do you want me to create a $repositoryName Repository? [yes|no]\"", ")", ")", "{", "$", "this", "->", "call", "(", "'generate:repository'", ",", "compact", "(", "'repositoryName'", ")", ")", ";", "}", "}"], "docstring": "Call Repository generator if user confirms\n\n@param $resource", "docstring_tokens": ["Call", "Repository", "generator", "if", "user", "confirms"], "sha": "106325112bf12e69ae7612d97f0175b4f2787a34", "url": "https://github.com/evervasquez/waygenerator-modificado/blob/106325112bf12e69ae7612d97f0175b4f2787a34/src/Way/Generators/Commands/ResourceGeneratorCommand.php#L124-L132", "partition": "test"}
{"repo": "polyfractal/sherlock", "path": "src/Sherlock/Sherlock.php", "func_name": "Sherlock.addNode", "original_string": "public function addNode($host, $port = 9200)\n    {\n        $this->settings['cluster']->addNode($host, $port, $this->settings['cluster.autodetect']);\n\n        return $this;\n    }", "language": "php", "code": "public function addNode($host, $port = 9200)\n    {\n        $this->settings['cluster']->addNode($host, $port, $this->settings['cluster.autodetect']);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addNode", "(", "$", "host", ",", "$", "port", "=", "9200", ")", "{", "$", "this", "->", "settings", "[", "'cluster'", "]", "->", "addNode", "(", "$", "host", ",", "$", "port", ",", "$", "this", "->", "settings", "[", "'cluster.autodetect'", "]", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Add a new node to the ES cluster\n\n@param  string                                     $host server host address (either IP or domain)\n@param  int                                        $port ElasticSearch port (defaults to 9200)\n\n@return \\Sherlock\\Sherlock\n@throws common\\exceptions\\BadMethodCallException\n@throws common\\exceptions\\InvalidArgumentException", "docstring_tokens": ["Add", "a", "new", "node", "to", "the", "ES", "cluster"], "sha": "24ca42c9a60fdc93552f52ea39cb121ec13e9b4e", "url": "https://github.com/polyfractal/sherlock/blob/24ca42c9a60fdc93552f52ea39cb121ec13e9b4e/src/Sherlock/Sherlock.php#L254-L259", "partition": "test"}
{"repo": "tripal/TripalTestSuite", "path": "src/Services/SilentResponse.php", "func_name": "SilentResponse.runString", "original_string": "protected function runString($callable, array $arguments)\n    {\n        if (! function_exists($callable)) {\n            throw new FunctionNotFoundException(\"Function $callable not found\");\n        }\n\n        $this->startBuffer();\n\n        $this->return = call_user_func_array($callable, $arguments);\n\n        $this->endBuffer();\n\n        return $this;\n    }", "language": "php", "code": "protected function runString($callable, array $arguments)\n    {\n        if (! function_exists($callable)) {\n            throw new FunctionNotFoundException(\"Function $callable not found\");\n        }\n\n        $this->startBuffer();\n\n        $this->return = call_user_func_array($callable, $arguments);\n\n        $this->endBuffer();\n\n        return $this;\n    }", "code_tokens": ["protected", "function", "runString", "(", "$", "callable", ",", "array", "$", "arguments", ")", "{", "if", "(", "!", "function_exists", "(", "$", "callable", ")", ")", "{", "throw", "new", "FunctionNotFoundException", "(", "\"Function $callable not found\"", ")", ";", "}", "$", "this", "->", "startBuffer", "(", ")", ";", "$", "this", "->", "return", "=", "call_user_func_array", "(", "$", "callable", ",", "$", "arguments", ")", ";", "$", "this", "->", "endBuffer", "(", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Runs a user function.\n\n@param string $callable Function name.\n@param array $arguments Arguments to pass to the user function.\n@return $this\n@throws \\StatonLab\\TripalTestSuite\\Exceptions\\FunctionNotFoundException", "docstring_tokens": ["Runs", "a", "user", "function", "."], "sha": "3e877af0204c59b9aa6b7ef0324ca4b985a7e3b4", "url": "https://github.com/tripal/TripalTestSuite/blob/3e877af0204c59b9aa6b7ef0324ca4b985a7e3b4/src/Services/SilentResponse.php#L48-L61", "partition": "test"}
{"repo": "stone-lab/Dynamicfield", "path": "Listener/UpdateProcess.php", "func_name": "UpdateProcess.saveDynamicData", "original_string": "private function saveDynamicData($entity, $data)\n    {\n        $fields = new DynamicFields($entity);\n        $fields->init($data);\n        $fields->save();\n    }", "language": "php", "code": "private function saveDynamicData($entity, $data)\n    {\n        $fields = new DynamicFields($entity);\n        $fields->init($data);\n        $fields->save();\n    }", "code_tokens": ["private", "function", "saveDynamicData", "(", "$", "entity", ",", "$", "data", ")", "{", "$", "fields", "=", "new", "DynamicFields", "(", "$", "entity", ")", ";", "$", "fields", "->", "init", "(", "$", "data", ")", ";", "$", "fields", "->", "save", "(", ")", ";", "}"], "docstring": "save data to dynamic database ;", "docstring_tokens": ["save", "data", "to", "dynamic", "database", ";"], "sha": "7d25050180000b482d5efe301f54b9ce78963181", "url": "https://github.com/stone-lab/Dynamicfield/blob/7d25050180000b482d5efe301f54b9ce78963181/Listener/UpdateProcess.php#L55-L60", "partition": "test"}
{"repo": "xloit/xloit-bridge-doctrine-orm", "path": "src/EntityQueryBuilder.php", "func_name": "EntityQueryBuilder.limit", "original_string": "public function limit($maxResults, $offset = null)\n    {\n        if (!is_int($maxResults)) {\n            throw new Exception\\InvalidArgumentException('Incorrect argument $maxResults. Only number allowed.');\n        }\n\n        if ($maxResults < 1) {\n            throw new Exception\\InvalidArgumentException(\n                sprintf('Incorrect maximum results: %d. Only positive number allowed.', $maxResults)\n            );\n        }\n\n        $this->setMaxResults($maxResults);\n\n        if ($offset !== null) {\n            if (!is_int($offset)) {\n                throw new Exception\\InvalidArgumentException('Incorrect argument $offset. Only number allowed.');\n            }\n\n            if ($offset < 0) {\n                throw new Exception\\InvalidArgumentException(\n                    sprintf('Incorrect offset: %d. Only positive number allowed.', $offset)\n                );\n            }\n\n            $this->setFirstResult($offset);\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function limit($maxResults, $offset = null)\n    {\n        if (!is_int($maxResults)) {\n            throw new Exception\\InvalidArgumentException('Incorrect argument $maxResults. Only number allowed.');\n        }\n\n        if ($maxResults < 1) {\n            throw new Exception\\InvalidArgumentException(\n                sprintf('Incorrect maximum results: %d. Only positive number allowed.', $maxResults)\n            );\n        }\n\n        $this->setMaxResults($maxResults);\n\n        if ($offset !== null) {\n            if (!is_int($offset)) {\n                throw new Exception\\InvalidArgumentException('Incorrect argument $offset. Only number allowed.');\n            }\n\n            if ($offset < 0) {\n                throw new Exception\\InvalidArgumentException(\n                    sprintf('Incorrect offset: %d. Only positive number allowed.', $offset)\n                );\n            }\n\n            $this->setFirstResult($offset);\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "limit", "(", "$", "maxResults", ",", "$", "offset", "=", "null", ")", "{", "if", "(", "!", "is_int", "(", "$", "maxResults", ")", ")", "{", "throw", "new", "Exception", "\\", "InvalidArgumentException", "(", "'Incorrect argument $maxResults. Only number allowed.'", ")", ";", "}", "if", "(", "$", "maxResults", "<", "1", ")", "{", "throw", "new", "Exception", "\\", "InvalidArgumentException", "(", "sprintf", "(", "'Incorrect maximum results: %d. Only positive number allowed.'", ",", "$", "maxResults", ")", ")", ";", "}", "$", "this", "->", "setMaxResults", "(", "$", "maxResults", ")", ";", "if", "(", "$", "offset", "!==", "null", ")", "{", "if", "(", "!", "is_int", "(", "$", "offset", ")", ")", "{", "throw", "new", "Exception", "\\", "InvalidArgumentException", "(", "'Incorrect argument $offset. Only number allowed.'", ")", ";", "}", "if", "(", "$", "offset", "<", "0", ")", "{", "throw", "new", "Exception", "\\", "InvalidArgumentException", "(", "sprintf", "(", "'Incorrect offset: %d. Only positive number allowed.'", ",", "$", "offset", ")", ")", ";", "}", "$", "this", "->", "setFirstResult", "(", "$", "offset", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Limit max number of results\n\n@param int $maxResults\n@param int $offset\n\n@return $this This QueryBuilder instance.\n@throws Exception\\InvalidArgumentException", "docstring_tokens": ["Limit", "max", "number", "of", "results"], "sha": "7bcb35b2c0728e43f626ff62a573861315b0ed3f", "url": "https://github.com/xloit/xloit-bridge-doctrine-orm/blob/7bcb35b2c0728e43f626ff62a573861315b0ed3f/src/EntityQueryBuilder.php#L439-L468", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/Core/Configuration/ContentWriterSettings.php", "func_name": "ContentWriterSettings.verifyConfiguration", "original_string": "public function verifyConfiguration()\n    {\n        if (($this->strategy === CoreConstants::EXPORT_STRATEGY) && !empty($this->strategy)) {\n            if (is_null($this->exportDir)) {\n                throw new SdkException(\"Invalid value for exportDirectory property. It can not be null with 'export' strategy. \");\n            }\n          //clear file cache\n          clearstatcache();\n            if (!file_exists($this->exportDir)) {\n                throw new SdkException(\"Directory ({$this->exportDir}) doesn't exist.\");\n            }\n\n            if (!is_dir($this->exportDir)) {\n                throw new SdkException(\"Path ({$this->exportDir}) isn't a valid directory\");\n            }\n\n            if (!is_writable($this->exportDir)) {\n                throw new SdkException(\"Directory ({$this->exportDir}) isn't writable\");\n            }\n        }\n    }", "language": "php", "code": "public function verifyConfiguration()\n    {\n        if (($this->strategy === CoreConstants::EXPORT_STRATEGY) && !empty($this->strategy)) {\n            if (is_null($this->exportDir)) {\n                throw new SdkException(\"Invalid value for exportDirectory property. It can not be null with 'export' strategy. \");\n            }\n          //clear file cache\n          clearstatcache();\n            if (!file_exists($this->exportDir)) {\n                throw new SdkException(\"Directory ({$this->exportDir}) doesn't exist.\");\n            }\n\n            if (!is_dir($this->exportDir)) {\n                throw new SdkException(\"Path ({$this->exportDir}) isn't a valid directory\");\n            }\n\n            if (!is_writable($this->exportDir)) {\n                throw new SdkException(\"Directory ({$this->exportDir}) isn't writable\");\n            }\n        }\n    }", "code_tokens": ["public", "function", "verifyConfiguration", "(", ")", "{", "if", "(", "(", "$", "this", "->", "strategy", "===", "CoreConstants", "::", "EXPORT_STRATEGY", ")", "&&", "!", "empty", "(", "$", "this", "->", "strategy", ")", ")", "{", "if", "(", "is_null", "(", "$", "this", "->", "exportDir", ")", ")", "{", "throw", "new", "SdkException", "(", "\"Invalid value for exportDirectory property. It can not be null with 'export' strategy. \"", ")", ";", "}", "//clear file cache", "clearstatcache", "(", ")", ";", "if", "(", "!", "file_exists", "(", "$", "this", "->", "exportDir", ")", ")", "{", "throw", "new", "SdkException", "(", "\"Directory ({$this->exportDir}) doesn't exist.\"", ")", ";", "}", "if", "(", "!", "is_dir", "(", "$", "this", "->", "exportDir", ")", ")", "{", "throw", "new", "SdkException", "(", "\"Path ({$this->exportDir}) isn't a valid directory\"", ")", ";", "}", "if", "(", "!", "is_writable", "(", "$", "this", "->", "exportDir", ")", ")", "{", "throw", "new", "SdkException", "(", "\"Directory ({$this->exportDir}) isn't writable\"", ")", ";", "}", "}", "}"], "docstring": "Verifies current settigns\n@throws SdkException", "docstring_tokens": ["Verifies", "current", "settigns"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/Core/Configuration/ContentWriterSettings.php#L35-L55", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Cookie/Middleware/EncryptedCookiesMiddleware.php", "func_name": "EncryptedCookiesMiddleware.encrypt", "original_string": "protected function encrypt(ResponseInterface $response): ResponseInterface\n    {\n        $cookies = ResponseCookies::fromResponse($response);\n\n        /** @var SetCookie $cookie */\n        foreach ($cookies->getAll() as $cookie) {\n            $name = $cookie->getName();\n\n            if ($this->isDisabled($name)) {\n                continue;\n            }\n\n            $cookies        = $cookies->forget($name);\n            $encryptedValue = Crypto::encrypt(\n                new HiddenString($cookie->getValue()),\n                $this->key\n            );\n\n            $cookies = $cookies->add(\n                $this->duplicate(\n                    $cookie,\n                    $encryptedValue\n                )\n            );\n        }\n\n        return $cookies->renderIntoSetCookieHeader($response);\n    }", "language": "php", "code": "protected function encrypt(ResponseInterface $response): ResponseInterface\n    {\n        $cookies = ResponseCookies::fromResponse($response);\n\n        /** @var SetCookie $cookie */\n        foreach ($cookies->getAll() as $cookie) {\n            $name = $cookie->getName();\n\n            if ($this->isDisabled($name)) {\n                continue;\n            }\n\n            $cookies        = $cookies->forget($name);\n            $encryptedValue = Crypto::encrypt(\n                new HiddenString($cookie->getValue()),\n                $this->key\n            );\n\n            $cookies = $cookies->add(\n                $this->duplicate(\n                    $cookie,\n                    $encryptedValue\n                )\n            );\n        }\n\n        return $cookies->renderIntoSetCookieHeader($response);\n    }", "code_tokens": ["protected", "function", "encrypt", "(", "ResponseInterface", "$", "response", ")", ":", "ResponseInterface", "{", "$", "cookies", "=", "ResponseCookies", "::", "fromResponse", "(", "$", "response", ")", ";", "/** @var SetCookie $cookie */", "foreach", "(", "$", "cookies", "->", "getAll", "(", ")", "as", "$", "cookie", ")", "{", "$", "name", "=", "$", "cookie", "->", "getName", "(", ")", ";", "if", "(", "$", "this", "->", "isDisabled", "(", "$", "name", ")", ")", "{", "continue", ";", "}", "$", "cookies", "=", "$", "cookies", "->", "forget", "(", "$", "name", ")", ";", "$", "encryptedValue", "=", "Crypto", "::", "encrypt", "(", "new", "HiddenString", "(", "$", "cookie", "->", "getValue", "(", ")", ")", ",", "$", "this", "->", "key", ")", ";", "$", "cookies", "=", "$", "cookies", "->", "add", "(", "$", "this", "->", "duplicate", "(", "$", "cookie", ",", "$", "encryptedValue", ")", ")", ";", "}", "return", "$", "cookies", "->", "renderIntoSetCookieHeader", "(", "$", "response", ")", ";", "}"], "docstring": "Encrypt the cookies on an outgoing response.\n\n@param \\Psr\\Http\\Message\\ResponseInterface $response\n\n@return \\Psr\\Http\\Message\\ResponseInterface", "docstring_tokens": ["Encrypt", "the", "cookies", "on", "an", "outgoing", "response", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Cookie/Middleware/EncryptedCookiesMiddleware.php#L109-L136", "partition": "test"}
{"repo": "TypistTech/wp-better-settings", "path": "src/Registrar.php", "func_name": "Registrar.registerSettings", "original_string": "private function registerSettings(SectionInterface $section)\n    {\n        array_map(\n            function (FieldInterface $field) {\n                register_setting(\n                    $this->pageSlug,\n                    $field->getId(),\n                    $field->getAdditionalArguments()\n                );\n            },\n            $section->getFields()\n        );\n    }", "language": "php", "code": "private function registerSettings(SectionInterface $section)\n    {\n        array_map(\n            function (FieldInterface $field) {\n                register_setting(\n                    $this->pageSlug,\n                    $field->getId(),\n                    $field->getAdditionalArguments()\n                );\n            },\n            $section->getFields()\n        );\n    }", "code_tokens": ["private", "function", "registerSettings", "(", "SectionInterface", "$", "section", ")", "{", "array_map", "(", "function", "(", "FieldInterface", "$", "field", ")", "{", "register_setting", "(", "$", "this", "->", "pageSlug", ",", "$", "field", "->", "getId", "(", ")", ",", "$", "field", "->", "getAdditionalArguments", "(", ")", ")", ";", "}", ",", "$", "section", "->", "getFields", "(", ")", ")", ";", "}"], "docstring": "Register a setting and its data with WordPress.\n\n@param SectionInterface $section Section which holds a list of its fields.\n\n@return void", "docstring_tokens": ["Register", "a", "setting", "and", "its", "data", "with", "WordPress", "."], "sha": "30fd7f962f8ab029ae6d6d53f48f8d4826a87f20", "url": "https://github.com/TypistTech/wp-better-settings/blob/30fd7f962f8ab029ae6d6d53f48f8d4826a87f20/src/Registrar.php#L112-L124", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-file/src/File/FileRestProxy.php", "func_name": "FileRestProxy.createPath", "original_string": "private function createPath($share, $directory = '')\n    {\n        if (empty($directory) && ($directory != '0')) {\n            return empty($share) ? '/' : $share;\n        }\n        $encodedFile = urlencode($directory);\n        // Unencode the forward slashes to match what the server expects.\n        $encodedFile = str_replace('%2F', '/', $encodedFile);\n        // Unencode the backward slashes to match what the server expects.\n        $encodedFile = str_replace('%5C', '/', $encodedFile);\n        // Re-encode the spaces (encoded as space) to the % encoding.\n        $encodedFile = str_replace('+', '%20', $encodedFile);\n        // Empty share means accessing default share\n        if (empty($share)) {\n            return $encodedFile;\n        }\n        return '/' . $share . '/' . $encodedFile;\n    }", "language": "php", "code": "private function createPath($share, $directory = '')\n    {\n        if (empty($directory) && ($directory != '0')) {\n            return empty($share) ? '/' : $share;\n        }\n        $encodedFile = urlencode($directory);\n        // Unencode the forward slashes to match what the server expects.\n        $encodedFile = str_replace('%2F', '/', $encodedFile);\n        // Unencode the backward slashes to match what the server expects.\n        $encodedFile = str_replace('%5C', '/', $encodedFile);\n        // Re-encode the spaces (encoded as space) to the % encoding.\n        $encodedFile = str_replace('+', '%20', $encodedFile);\n        // Empty share means accessing default share\n        if (empty($share)) {\n            return $encodedFile;\n        }\n        return '/' . $share . '/' . $encodedFile;\n    }", "code_tokens": ["private", "function", "createPath", "(", "$", "share", ",", "$", "directory", "=", "''", ")", "{", "if", "(", "empty", "(", "$", "directory", ")", "&&", "(", "$", "directory", "!=", "'0'", ")", ")", "{", "return", "empty", "(", "$", "share", ")", "?", "'/'", ":", "$", "share", ";", "}", "$", "encodedFile", "=", "urlencode", "(", "$", "directory", ")", ";", "// Unencode the forward slashes to match what the server expects.", "$", "encodedFile", "=", "str_replace", "(", "'%2F'", ",", "'/'", ",", "$", "encodedFile", ")", ";", "// Unencode the backward slashes to match what the server expects.", "$", "encodedFile", "=", "str_replace", "(", "'%5C'", ",", "'/'", ",", "$", "encodedFile", ")", ";", "// Re-encode the spaces (encoded as space) to the % encoding.", "$", "encodedFile", "=", "str_replace", "(", "'+'", ",", "'%20'", ",", "$", "encodedFile", ")", ";", "// Empty share means accessing default share", "if", "(", "empty", "(", "$", "share", ")", ")", "{", "return", "$", "encodedFile", ";", "}", "return", "'/'", ".", "$", "share", ".", "'/'", ".", "$", "encodedFile", ";", "}"], "docstring": "Creates URI path for file or share.\n\n@param string $share      The share name.\n@param string $directory  The directory name.\n\n@return string", "docstring_tokens": ["Creates", "URI", "path", "for", "file", "or", "share", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-file/src/File/FileRestProxy.php#L154-L171", "partition": "test"}
{"repo": "slickframework/http", "path": "src/Session.php", "func_name": "Session.create", "original_string": "public static function create($driverClass = self::DRIVER_SERVER, array $options = [])\n    {\n        $session = new Session($driverClass, $options);\n        return $session->initialize();\n    }", "language": "php", "code": "public static function create($driverClass = self::DRIVER_SERVER, array $options = [])\n    {\n        $session = new Session($driverClass, $options);\n        return $session->initialize();\n    }", "code_tokens": ["public", "static", "function", "create", "(", "$", "driverClass", "=", "self", "::", "DRIVER_SERVER", ",", "array", "$", "options", "=", "[", "]", ")", "{", "$", "session", "=", "new", "Session", "(", "$", "driverClass", ",", "$", "options", ")", ";", "return", "$", "session", "->", "initialize", "(", ")", ";", "}"], "docstring": "Creates the session driver with provided options\n\n@param string $driverClass\n@param array  $options\n\n@return SessionDriverInterface\n\n@throws ClassNotFoundException if class does not exists\n@throws InvalidDriverClassException if class does not implement the SessionDriverInterface", "docstring_tokens": ["Creates", "the", "session", "driver", "with", "provided", "options"], "sha": "9da14b618e0f75d3d565e0ce928a35d992755e75", "url": "https://github.com/slickframework/http/blob/9da14b618e0f75d3d565e0ce928a35d992755e75/src/Session.php#L62-L66", "partition": "test"}
{"repo": "jasongrimes/silex-simpleuser", "path": "src/SimpleUser/UserManager.php", "func_name": "UserManager.setUserPassword", "original_string": "public function setUserPassword(User $user, $password)\n    {\n        $user->setPassword($this->encodeUserPassword($user, $password));\n    }", "language": "php", "code": "public function setUserPassword(User $user, $password)\n    {\n        $user->setPassword($this->encodeUserPassword($user, $password));\n    }", "code_tokens": ["public", "function", "setUserPassword", "(", "User", "$", "user", ",", "$", "password", ")", "{", "$", "user", "->", "setPassword", "(", "$", "this", "->", "encodeUserPassword", "(", "$", "user", ",", "$", "password", ")", ")", ";", "}"], "docstring": "Encode a plain text password and set it on the given User object.\n\n@param User $user\n@param string $password A plain text password.", "docstring_tokens": ["Encode", "a", "plain", "text", "password", "and", "set", "it", "on", "the", "given", "User", "object", "."], "sha": "adad656f482f781f9d63a099f4db6b9618ddae47", "url": "https://github.com/jasongrimes/silex-simpleuser/blob/adad656f482f781f9d63a099f4db6b9618ddae47/src/SimpleUser/UserManager.php#L248-L251", "partition": "test"}
{"repo": "wazsmwazsm/WorkerF", "path": "src/WorkerF/Error.php", "func_name": "Error.errorHtml", "original_string": "public static function errorHtml($e, $header, $debug = TRUE)\n    {\n        $pattern = [\n            '/\\{\\{title\\}\\}/',\n            '/\\{\\{header\\}\\}/',\n            '/\\{\\{exception\\}\\}/',\n        ];\n\n        $title = $header;\n        $exception = $debug ? $e : 'something error...';\n        $replacement = [$title, $header, $exception];\n\n        return preg_replace($pattern, $replacement, self::$_html_blade);\n    }", "language": "php", "code": "public static function errorHtml($e, $header, $debug = TRUE)\n    {\n        $pattern = [\n            '/\\{\\{title\\}\\}/',\n            '/\\{\\{header\\}\\}/',\n            '/\\{\\{exception\\}\\}/',\n        ];\n\n        $title = $header;\n        $exception = $debug ? $e : 'something error...';\n        $replacement = [$title, $header, $exception];\n\n        return preg_replace($pattern, $replacement, self::$_html_blade);\n    }", "code_tokens": ["public", "static", "function", "errorHtml", "(", "$", "e", ",", "$", "header", ",", "$", "debug", "=", "TRUE", ")", "{", "$", "pattern", "=", "[", "'/\\{\\{title\\}\\}/'", ",", "'/\\{\\{header\\}\\}/'", ",", "'/\\{\\{exception\\}\\}/'", ",", "]", ";", "$", "title", "=", "$", "header", ";", "$", "exception", "=", "$", "debug", "?", "$", "e", ":", "'something error...'", ";", "$", "replacement", "=", "[", "$", "title", ",", "$", "header", ",", "$", "exception", "]", ";", "return", "preg_replace", "(", "$", "pattern", ",", "$", "replacement", ",", "self", "::", "$", "_html_blade", ")", ";", "}"], "docstring": "return error html.\n\n@param  mixed $e\n@param  int $header\n@param  boolean $debug\n@return string", "docstring_tokens": ["return", "error", "html", "."], "sha": "5982934d6beb59b3e3e4071be9bbbd4e16247dba", "url": "https://github.com/wazsmwazsm/WorkerF/blob/5982934d6beb59b3e3e4071be9bbbd4e16247dba/src/WorkerF/Error.php#L53-L66", "partition": "test"}
{"repo": "php-carteblanche/core", "path": "src/CarteBlanche/App/FrontController.php", "func_name": "FrontController.distribute", "original_string": "public function distribute()\n    {\n        $this\n            ->_processSessionValues()\n            ->_processQueryArguments()\n            ;\n\n        // if kernerl has booting errors, treat them first\n        if (CarteBlanche::getContainer()->get('kernel')->hasBootErrors()) {\n            $routing = array(CarteBlanche::getContainer()->get('kernel')->getBootErrors());\n            if (CarteBlanche::getContainer()->get('request')->isCli()) {\n                $routing['controller'] = CarteBlanche::getConfig('routing.cli.default_controller');\n                $routing['action'] = CarteBlanche::getConfig('routing.cli.booterrors_action');\n            } elseif (CarteBlanche::getContainer()->get('request')->isAjax()) {\n                $routing['controller'] = CarteBlanche::getConfig('routing.ajax.default_controller');\n                $routing['action'] = CarteBlanche::getConfig('routing.ajax.booterrors_action');\n            } else {\n                $routing['controller'] = CarteBlanche::getConfig('routing.mvc.default_controller');\n                $routing['action'] = CarteBlanche::getConfig('routing.mvc.booterrors_action');\n            }\n        } else {\n            $routing = CarteBlanche::getContainer()->get('router')\n                ->distribute()\n                ->getRouteParsed();\n\n            // controller\n            if (empty($routing['controller'])) {\n                if (CarteBlanche::getContainer()->get('request')->isCli()) {\n                    $routing['controller'] = CarteBlanche::getConfig('routing.cli.default_controller');\n                } elseif (CarteBlanche::getContainer()->get('request')->isAjax()) {\n                    $routing['controller'] = CarteBlanche::getConfig('routing.ajax.default_controller');\n                } else {\n                    $routing['controller'] = CarteBlanche::getConfig('routing.mvc.default_controller');\n                }\n            }\n\n            // action\n            if (empty($routing['action'])) {\n                if (CarteBlanche::getContainer()->get('request')->isCli()) {\n                    $routing['action'] = CarteBlanche::getConfig('routing.cli.default_action');\n                } elseif (CarteBlanche::getContainer()->get('request')->isAjax()) {\n                    $routing['action'] = CarteBlanche::getConfig('routing.ajax.default_action');\n                } else {\n                    $routing['action'] = CarteBlanche::getConfig('routing.mvc.default_action');\n                }\n            }\n        }\n\n        // arguments\n        $primary_args = $routing;\n        unset($primary_args['all']);\n        $args = isset($routing['all']) ? array_merge($primary_args, $routing['all']) : $primary_args;\n\n        // dispatch\n        return $this->dispatch(\n            $routing['controller'], $routing['action'], $args\n        );\n    }", "language": "php", "code": "public function distribute()\n    {\n        $this\n            ->_processSessionValues()\n            ->_processQueryArguments()\n            ;\n\n        // if kernerl has booting errors, treat them first\n        if (CarteBlanche::getContainer()->get('kernel')->hasBootErrors()) {\n            $routing = array(CarteBlanche::getContainer()->get('kernel')->getBootErrors());\n            if (CarteBlanche::getContainer()->get('request')->isCli()) {\n                $routing['controller'] = CarteBlanche::getConfig('routing.cli.default_controller');\n                $routing['action'] = CarteBlanche::getConfig('routing.cli.booterrors_action');\n            } elseif (CarteBlanche::getContainer()->get('request')->isAjax()) {\n                $routing['controller'] = CarteBlanche::getConfig('routing.ajax.default_controller');\n                $routing['action'] = CarteBlanche::getConfig('routing.ajax.booterrors_action');\n            } else {\n                $routing['controller'] = CarteBlanche::getConfig('routing.mvc.default_controller');\n                $routing['action'] = CarteBlanche::getConfig('routing.mvc.booterrors_action');\n            }\n        } else {\n            $routing = CarteBlanche::getContainer()->get('router')\n                ->distribute()\n                ->getRouteParsed();\n\n            // controller\n            if (empty($routing['controller'])) {\n                if (CarteBlanche::getContainer()->get('request')->isCli()) {\n                    $routing['controller'] = CarteBlanche::getConfig('routing.cli.default_controller');\n                } elseif (CarteBlanche::getContainer()->get('request')->isAjax()) {\n                    $routing['controller'] = CarteBlanche::getConfig('routing.ajax.default_controller');\n                } else {\n                    $routing['controller'] = CarteBlanche::getConfig('routing.mvc.default_controller');\n                }\n            }\n\n            // action\n            if (empty($routing['action'])) {\n                if (CarteBlanche::getContainer()->get('request')->isCli()) {\n                    $routing['action'] = CarteBlanche::getConfig('routing.cli.default_action');\n                } elseif (CarteBlanche::getContainer()->get('request')->isAjax()) {\n                    $routing['action'] = CarteBlanche::getConfig('routing.ajax.default_action');\n                } else {\n                    $routing['action'] = CarteBlanche::getConfig('routing.mvc.default_action');\n                }\n            }\n        }\n\n        // arguments\n        $primary_args = $routing;\n        unset($primary_args['all']);\n        $args = isset($routing['all']) ? array_merge($primary_args, $routing['all']) : $primary_args;\n\n        // dispatch\n        return $this->dispatch(\n            $routing['controller'], $routing['action'], $args\n        );\n    }", "code_tokens": ["public", "function", "distribute", "(", ")", "{", "$", "this", "->", "_processSessionValues", "(", ")", "->", "_processQueryArguments", "(", ")", ";", "// if kernerl has booting errors, treat them first", "if", "(", "CarteBlanche", "::", "getContainer", "(", ")", "->", "get", "(", "'kernel'", ")", "->", "hasBootErrors", "(", ")", ")", "{", "$", "routing", "=", "array", "(", "CarteBlanche", "::", "getContainer", "(", ")", "->", "get", "(", "'kernel'", ")", "->", "getBootErrors", "(", ")", ")", ";", "if", "(", "CarteBlanche", "::", "getContainer", "(", ")", "->", "get", "(", "'request'", ")", "->", "isCli", "(", ")", ")", "{", "$", "routing", "[", "'controller'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.cli.default_controller'", ")", ";", "$", "routing", "[", "'action'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.cli.booterrors_action'", ")", ";", "}", "elseif", "(", "CarteBlanche", "::", "getContainer", "(", ")", "->", "get", "(", "'request'", ")", "->", "isAjax", "(", ")", ")", "{", "$", "routing", "[", "'controller'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.ajax.default_controller'", ")", ";", "$", "routing", "[", "'action'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.ajax.booterrors_action'", ")", ";", "}", "else", "{", "$", "routing", "[", "'controller'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.mvc.default_controller'", ")", ";", "$", "routing", "[", "'action'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.mvc.booterrors_action'", ")", ";", "}", "}", "else", "{", "$", "routing", "=", "CarteBlanche", "::", "getContainer", "(", ")", "->", "get", "(", "'router'", ")", "->", "distribute", "(", ")", "->", "getRouteParsed", "(", ")", ";", "// controller", "if", "(", "empty", "(", "$", "routing", "[", "'controller'", "]", ")", ")", "{", "if", "(", "CarteBlanche", "::", "getContainer", "(", ")", "->", "get", "(", "'request'", ")", "->", "isCli", "(", ")", ")", "{", "$", "routing", "[", "'controller'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.cli.default_controller'", ")", ";", "}", "elseif", "(", "CarteBlanche", "::", "getContainer", "(", ")", "->", "get", "(", "'request'", ")", "->", "isAjax", "(", ")", ")", "{", "$", "routing", "[", "'controller'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.ajax.default_controller'", ")", ";", "}", "else", "{", "$", "routing", "[", "'controller'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.mvc.default_controller'", ")", ";", "}", "}", "// action", "if", "(", "empty", "(", "$", "routing", "[", "'action'", "]", ")", ")", "{", "if", "(", "CarteBlanche", "::", "getContainer", "(", ")", "->", "get", "(", "'request'", ")", "->", "isCli", "(", ")", ")", "{", "$", "routing", "[", "'action'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.cli.default_action'", ")", ";", "}", "elseif", "(", "CarteBlanche", "::", "getContainer", "(", ")", "->", "get", "(", "'request'", ")", "->", "isAjax", "(", ")", ")", "{", "$", "routing", "[", "'action'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.ajax.default_action'", ")", ";", "}", "else", "{", "$", "routing", "[", "'action'", "]", "=", "CarteBlanche", "::", "getConfig", "(", "'routing.mvc.default_action'", ")", ";", "}", "}", "}", "// arguments", "$", "primary_args", "=", "$", "routing", ";", "unset", "(", "$", "primary_args", "[", "'all'", "]", ")", ";", "$", "args", "=", "isset", "(", "$", "routing", "[", "'all'", "]", ")", "?", "array_merge", "(", "$", "primary_args", ",", "$", "routing", "[", "'all'", "]", ")", ":", "$", "primary_args", ";", "// dispatch", "return", "$", "this", "->", "dispatch", "(", "$", "routing", "[", "'controller'", "]", ",", "$", "routing", "[", "'action'", "]", ",", "$", "args", ")", ";", "}"], "docstring": "Distribute the current request route\n\n@return void", "docstring_tokens": ["Distribute", "the", "current", "request", "route"], "sha": "b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343", "url": "https://github.com/php-carteblanche/core/blob/b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343/src/CarteBlanche/App/FrontController.php#L150-L207", "partition": "test"}
{"repo": "praxigento/mobi_mod_accounting", "path": "Service/Account/Balance/Calc/A/Z/CollectTransactions.php", "func_name": "CollectTransactions.exec", "original_string": "public function exec($balances, $trans)\n    {\n        $result = [];\n        foreach ($trans as $one) {\n            $accDebit = $one->getDebitAccId();\n            $accCredit = $one->getCreditAccId();\n            $timestamp = $one->getDateApplied();\n            $value = $one->getValue();\n            /* date_applied is in UTC format */\n            $date = $this->hlpPeriod->getPeriodCurrent($timestamp);\n            /**\n             * Process debit account:\n             */\n            /** @var EBalance $entry Get balance on the transaction date (calculated or new) */\n            $entry = $this->getBalanceEntry($balances, $result, $accDebit, $date);\n            /* change total debit for the entry */\n            $totalDebit = $entry->getTotalDebit() + $value;\n            $entry->setTotalDebit($totalDebit);\n            /* change close balance for the entry */\n            $balanceClose = $entry->getBalanceClose() - $value;\n            $entry->setBalanceClose($balanceClose);\n            /* update calculated entries for result balances */\n            $result[$accDebit][$date] = $entry;\n            /* update current balances in the working var */\n            if (isset($balances[$accDebit])) {\n                $balances[$accDebit] -= $value;\n            } else {\n                $balances[$accDebit] = -$value;\n            }\n            /**\n             * Process credit account:\n             */\n            /* get balance on the transaction date (calculated or new) */\n            $entry = $this->getBalanceEntry($balances, $result, $accCredit, $date);\n            /* change total credit for the entry */\n            $totalCredit = $entry->getTotalCredit() + $value;\n            $entry->setTotalCredit($totalCredit);\n            /* change close balance for the entry */\n            $balanceClose = $entry->getBalanceClose() + $value;\n            $entry->setBalanceClose($balanceClose);\n            /* update calculated entries for result balances */\n            $result[$accCredit][$date] = $entry;\n            /* update current balances in the working var */\n            if (isset($balances[$accCredit])) {\n                $balances[$accCredit] += $value;\n            } else {\n                $balances[$accCredit] = $value;\n            }\n        }\n        return $result;\n    }", "language": "php", "code": "public function exec($balances, $trans)\n    {\n        $result = [];\n        foreach ($trans as $one) {\n            $accDebit = $one->getDebitAccId();\n            $accCredit = $one->getCreditAccId();\n            $timestamp = $one->getDateApplied();\n            $value = $one->getValue();\n            /* date_applied is in UTC format */\n            $date = $this->hlpPeriod->getPeriodCurrent($timestamp);\n            /**\n             * Process debit account:\n             */\n            /** @var EBalance $entry Get balance on the transaction date (calculated or new) */\n            $entry = $this->getBalanceEntry($balances, $result, $accDebit, $date);\n            /* change total debit for the entry */\n            $totalDebit = $entry->getTotalDebit() + $value;\n            $entry->setTotalDebit($totalDebit);\n            /* change close balance for the entry */\n            $balanceClose = $entry->getBalanceClose() - $value;\n            $entry->setBalanceClose($balanceClose);\n            /* update calculated entries for result balances */\n            $result[$accDebit][$date] = $entry;\n            /* update current balances in the working var */\n            if (isset($balances[$accDebit])) {\n                $balances[$accDebit] -= $value;\n            } else {\n                $balances[$accDebit] = -$value;\n            }\n            /**\n             * Process credit account:\n             */\n            /* get balance on the transaction date (calculated or new) */\n            $entry = $this->getBalanceEntry($balances, $result, $accCredit, $date);\n            /* change total credit for the entry */\n            $totalCredit = $entry->getTotalCredit() + $value;\n            $entry->setTotalCredit($totalCredit);\n            /* change close balance for the entry */\n            $balanceClose = $entry->getBalanceClose() + $value;\n            $entry->setBalanceClose($balanceClose);\n            /* update calculated entries for result balances */\n            $result[$accCredit][$date] = $entry;\n            /* update current balances in the working var */\n            if (isset($balances[$accCredit])) {\n                $balances[$accCredit] += $value;\n            } else {\n                $balances[$accCredit] = $value;\n            }\n        }\n        return $result;\n    }", "code_tokens": ["public", "function", "exec", "(", "$", "balances", ",", "$", "trans", ")", "{", "$", "result", "=", "[", "]", ";", "foreach", "(", "$", "trans", "as", "$", "one", ")", "{", "$", "accDebit", "=", "$", "one", "->", "getDebitAccId", "(", ")", ";", "$", "accCredit", "=", "$", "one", "->", "getCreditAccId", "(", ")", ";", "$", "timestamp", "=", "$", "one", "->", "getDateApplied", "(", ")", ";", "$", "value", "=", "$", "one", "->", "getValue", "(", ")", ";", "/* date_applied is in UTC format */", "$", "date", "=", "$", "this", "->", "hlpPeriod", "->", "getPeriodCurrent", "(", "$", "timestamp", ")", ";", "/**\n             * Process debit account:\n             */", "/** @var EBalance $entry Get balance on the transaction date (calculated or new) */", "$", "entry", "=", "$", "this", "->", "getBalanceEntry", "(", "$", "balances", ",", "$", "result", ",", "$", "accDebit", ",", "$", "date", ")", ";", "/* change total debit for the entry */", "$", "totalDebit", "=", "$", "entry", "->", "getTotalDebit", "(", ")", "+", "$", "value", ";", "$", "entry", "->", "setTotalDebit", "(", "$", "totalDebit", ")", ";", "/* change close balance for the entry */", "$", "balanceClose", "=", "$", "entry", "->", "getBalanceClose", "(", ")", "-", "$", "value", ";", "$", "entry", "->", "setBalanceClose", "(", "$", "balanceClose", ")", ";", "/* update calculated entries for result balances */", "$", "result", "[", "$", "accDebit", "]", "[", "$", "date", "]", "=", "$", "entry", ";", "/* update current balances in the working var */", "if", "(", "isset", "(", "$", "balances", "[", "$", "accDebit", "]", ")", ")", "{", "$", "balances", "[", "$", "accDebit", "]", "-=", "$", "value", ";", "}", "else", "{", "$", "balances", "[", "$", "accDebit", "]", "=", "-", "$", "value", ";", "}", "/**\n             * Process credit account:\n             */", "/* get balance on the transaction date (calculated or new) */", "$", "entry", "=", "$", "this", "->", "getBalanceEntry", "(", "$", "balances", ",", "$", "result", ",", "$", "accCredit", ",", "$", "date", ")", ";", "/* change total credit for the entry */", "$", "totalCredit", "=", "$", "entry", "->", "getTotalCredit", "(", ")", "+", "$", "value", ";", "$", "entry", "->", "setTotalCredit", "(", "$", "totalCredit", ")", ";", "/* change close balance for the entry */", "$", "balanceClose", "=", "$", "entry", "->", "getBalanceClose", "(", ")", "+", "$", "value", ";", "$", "entry", "->", "setBalanceClose", "(", "$", "balanceClose", ")", ";", "/* update calculated entries for result balances */", "$", "result", "[", "$", "accCredit", "]", "[", "$", "date", "]", "=", "$", "entry", ";", "/* update current balances in the working var */", "if", "(", "isset", "(", "$", "balances", "[", "$", "accCredit", "]", ")", ")", "{", "$", "balances", "[", "$", "accCredit", "]", "+=", "$", "value", ";", "}", "else", "{", "$", "balances", "[", "$", "accCredit", "]", "=", "$", "value", ";", "}", "}", "return", "$", "result", ";", "}"], "docstring": "Collect transactions and compose daily balances updates.\n\n@param array $balances [accId => balance]\n@param ETrans[] $trans\n@return array [accId => EBalance[]]\n@throws \\Exception", "docstring_tokens": ["Collect", "transactions", "and", "compose", "daily", "balances", "updates", "."], "sha": "87ebe278cb3f89387ee6c88a1ee902b4dd7fe68f", "url": "https://github.com/praxigento/mobi_mod_accounting/blob/87ebe278cb3f89387ee6c88a1ee902b4dd7fe68f/Service/Account/Balance/Calc/A/Z/CollectTransactions.php#L36-L86", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Support/Traits/InvokerAwareTrait.php", "func_name": "InvokerAwareTrait.getInvoker", "original_string": "protected function getInvoker(): Invoker\n    {\n        if ($this->invoker === null) {\n            $this->invoker = new Invoker();\n\n            if ($this->container !== null) {\n                $this->invoker->setContainer($this->container)\n                    ->injectByTypeHint(true)\n                    ->injectByParameterName(true);\n            }\n        }\n\n        return $this->invoker;\n    }", "language": "php", "code": "protected function getInvoker(): Invoker\n    {\n        if ($this->invoker === null) {\n            $this->invoker = new Invoker();\n\n            if ($this->container !== null) {\n                $this->invoker->setContainer($this->container)\n                    ->injectByTypeHint(true)\n                    ->injectByParameterName(true);\n            }\n        }\n\n        return $this->invoker;\n    }", "code_tokens": ["protected", "function", "getInvoker", "(", ")", ":", "Invoker", "{", "if", "(", "$", "this", "->", "invoker", "===", "null", ")", "{", "$", "this", "->", "invoker", "=", "new", "Invoker", "(", ")", ";", "if", "(", "$", "this", "->", "container", "!==", "null", ")", "{", "$", "this", "->", "invoker", "->", "setContainer", "(", "$", "this", "->", "container", ")", "->", "injectByTypeHint", "(", "true", ")", "->", "injectByParameterName", "(", "true", ")", ";", "}", "}", "return", "$", "this", "->", "invoker", ";", "}"], "docstring": "Get configured invoker.\n\n@return \\Viserio\\Component\\Support\\Invoker", "docstring_tokens": ["Get", "configured", "invoker", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Support/Traits/InvokerAwareTrait.php#L21-L34", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Services/Geocoding/Result/GeocoderGeometry.php", "func_name": "GeocoderGeometry.setLocationType", "original_string": "public function setLocationType($locationType)\n    {\n        if (!in_array($locationType, GeocoderLocationType::getGeocoderLocationTypes())) {\n            throw GeocodingException::invalidGeocoderLocationType();\n        }\n\n        $this->locationType = $locationType;\n    }", "language": "php", "code": "public function setLocationType($locationType)\n    {\n        if (!in_array($locationType, GeocoderLocationType::getGeocoderLocationTypes())) {\n            throw GeocodingException::invalidGeocoderLocationType();\n        }\n\n        $this->locationType = $locationType;\n    }", "code_tokens": ["public", "function", "setLocationType", "(", "$", "locationType", ")", "{", "if", "(", "!", "in_array", "(", "$", "locationType", ",", "GeocoderLocationType", "::", "getGeocoderLocationTypes", "(", ")", ")", ")", "{", "throw", "GeocodingException", "::", "invalidGeocoderLocationType", "(", ")", ";", "}", "$", "this", "->", "locationType", "=", "$", "locationType", ";", "}"], "docstring": "Sets the geometry location type.\n\n@param string $locationType The geometry location type.\n\n@throws \\Ivory\\GoogleMap\\Exception\\GeocodingException If the location type is not valid.", "docstring_tokens": ["Sets", "the", "geometry", "location", "type", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Services/Geocoding/Result/GeocoderGeometry.php#L91-L98", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/Transaction.php", "func_name": "Transaction.setIsolationLevel", "original_string": "public function setIsolationLevel($level)\n    {\n        if (!$this->getIsActive()) {\n            throw new Exception('Failed to set isolation level: transaction was inactive.');\n        }\n        Reaction::debug('Setting transaction isolation level to ' . $level);\n        return $this->getConnection()->setTransactionIsolationLevel($level);\n    }", "language": "php", "code": "public function setIsolationLevel($level)\n    {\n        if (!$this->getIsActive()) {\n            throw new Exception('Failed to set isolation level: transaction was inactive.');\n        }\n        Reaction::debug('Setting transaction isolation level to ' . $level);\n        return $this->getConnection()->setTransactionIsolationLevel($level);\n    }", "code_tokens": ["public", "function", "setIsolationLevel", "(", "$", "level", ")", "{", "if", "(", "!", "$", "this", "->", "getIsActive", "(", ")", ")", "{", "throw", "new", "Exception", "(", "'Failed to set isolation level: transaction was inactive.'", ")", ";", "}", "Reaction", "::", "debug", "(", "'Setting transaction isolation level to '", ".", "$", "level", ")", ";", "return", "$", "this", "->", "getConnection", "(", ")", "->", "setTransactionIsolationLevel", "(", "$", "level", ")", ";", "}"], "docstring": "Sets the transaction isolation level for this transaction.\n\nThis method can be used to set the isolation level while the transaction is already active.\nHowever this is not supported by all DBMS so you might rather specify the isolation level directly\nwhen calling [[begin()]].\n@param string $level The transaction isolation level to use for this transaction.\nThis can be one of [[READ_UNCOMMITTED]], [[READ_COMMITTED]], [[REPEATABLE_READ]] and [[SERIALIZABLE]] but\nalso a string containing DBMS specific syntax to be used after `SET TRANSACTION ISOLATION LEVEL`.\n@return ExtendedPromiseInterface|LazyPromiseInterface\n@throws Exception if the transaction is not active\n@see http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Isolation_levels", "docstring_tokens": ["Sets", "the", "transaction", "isolation", "level", "for", "this", "transaction", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/Transaction.php#L213-L220", "partition": "test"}
{"repo": "koraktor/steam-condenser-php", "path": "lib/SteamCondenser/Community/GameLeaderboard.php", "func_name": "GameLeaderboard.getLeaderboards", "original_string": "public static function getLeaderboards($gameName) {\n        if(!array_key_exists($gameName, self::$leaderboards)) {\n            self::loadLeaderboards($gameName);\n        }\n\n        return self::$leaderboards[$gameName];\n    }", "language": "php", "code": "public static function getLeaderboards($gameName) {\n        if(!array_key_exists($gameName, self::$leaderboards)) {\n            self::loadLeaderboards($gameName);\n        }\n\n        return self::$leaderboards[$gameName];\n    }", "code_tokens": ["public", "static", "function", "getLeaderboards", "(", "$", "gameName", ")", "{", "if", "(", "!", "array_key_exists", "(", "$", "gameName", ",", "self", "::", "$", "leaderboards", ")", ")", "{", "self", "::", "loadLeaderboards", "(", "$", "gameName", ")", ";", "}", "return", "self", "::", "$", "leaderboards", "[", "$", "gameName", "]", ";", "}"], "docstring": "Returns an array containing all of a game's leaderboards\n\n@param string $gameName The name of the game\n@return GameLeaderboard[] The leaderboards for this game", "docstring_tokens": ["Returns", "an", "array", "containing", "all", "of", "a", "game", "s", "leaderboards"], "sha": "92dde9e3b462e93cc498fe795a712c61eec7051e", "url": "https://github.com/koraktor/steam-condenser-php/blob/92dde9e3b462e93cc498fe795a712c61eec7051e/lib/SteamCondenser/Community/GameLeaderboard.php#L102-L108", "partition": "test"}
{"repo": "alessandrotesoro/wp-notices", "path": "wp-notices.php", "func_name": "WP_Notice.dismiss_user", "original_string": "private function dismiss_user( $id ) {\n\t\t$dismissed = self::$instance->dismissed_user();\n\t\tif ( in_array( $id, $dismissed ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tarray_push( $dismissed, $id );\n\t\treturn update_user_meta( get_current_user_id(), 'tdp_dismissed_notices', $dismissed );\n\t}", "language": "php", "code": "private function dismiss_user( $id ) {\n\t\t$dismissed = self::$instance->dismissed_user();\n\t\tif ( in_array( $id, $dismissed ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tarray_push( $dismissed, $id );\n\t\treturn update_user_meta( get_current_user_id(), 'tdp_dismissed_notices', $dismissed );\n\t}", "code_tokens": ["private", "function", "dismiss_user", "(", "$", "id", ")", "{", "$", "dismissed", "=", "self", "::", "$", "instance", "->", "dismissed_user", "(", ")", ";", "if", "(", "in_array", "(", "$", "id", ",", "$", "dismissed", ")", ")", "{", "return", "false", ";", "}", "array_push", "(", "$", "dismissed", ",", "$", "id", ")", ";", "return", "update_user_meta", "(", "get_current_user_id", "(", ")", ",", "'tdp_dismissed_notices'", ",", "$", "dismissed", ")", ";", "}"], "docstring": "Dismiss notice for an user.\n\n@param string $id the notice id.\n@return void", "docstring_tokens": ["Dismiss", "notice", "for", "an", "user", "."], "sha": "e465904b48289bafbd01c9cffb2035b92d78bc1f", "url": "https://github.com/alessandrotesoro/wp-notices/blob/e465904b48289bafbd01c9cffb2035b92d78bc1f/wp-notices.php#L240-L247", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Middleware/Throttle.php", "func_name": "Throttle.getLimiter", "original_string": "protected function getLimiter()\n    {\n        if (!isset($this->limiter)) {\n            $this->limiter = $this->getDI()->get(RateLimiter::class, [$this->name]);\n        }\n\n        return $this->limiter;\n    }", "language": "php", "code": "protected function getLimiter()\n    {\n        if (!isset($this->limiter)) {\n            $this->limiter = $this->getDI()->get(RateLimiter::class, [$this->name]);\n        }\n\n        return $this->limiter;\n    }", "code_tokens": ["protected", "function", "getLimiter", "(", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "limiter", ")", ")", "{", "$", "this", "->", "limiter", "=", "$", "this", "->", "getDI", "(", ")", "->", "get", "(", "RateLimiter", "::", "class", ",", "[", "$", "this", "->", "name", "]", ")", ";", "}", "return", "$", "this", "->", "limiter", ";", "}"], "docstring": "Bind and return the limiter instance.\n\n@return \\Neutrino\\Security\\RateLimiter", "docstring_tokens": ["Bind", "and", "return", "the", "limiter", "instance", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Middleware/Throttle.php#L175-L182", "partition": "test"}
{"repo": "dmetri333/wiggum-services", "path": "src/db/JoinClause.class.php", "func_name": "JoinClause.on", "original_string": "public function on($firstColumn, $operator, $secondColumn, $boolean = 'and', $where = false) {\n\t\t\n\t\tif ($where)\n\t\t\t$this->bindings[] = $secondColumn;\n\t\t\n\t\tif ($where && ($operator === 'in' || $operator === 'not in') && is_array($secondColumn)) {\n\t\t\t$secondColumn = count($secondColumn);\n\t\t}\n\t\t\n\t\t$this->clauses[] = compact('firstColumn', 'operator', 'secondColumn', 'boolean', 'where');\n\t\t\n\t\treturn $this;\n\t}", "language": "php", "code": "public function on($firstColumn, $operator, $secondColumn, $boolean = 'and', $where = false) {\n\t\t\n\t\tif ($where)\n\t\t\t$this->bindings[] = $secondColumn;\n\t\t\n\t\tif ($where && ($operator === 'in' || $operator === 'not in') && is_array($secondColumn)) {\n\t\t\t$secondColumn = count($secondColumn);\n\t\t}\n\t\t\n\t\t$this->clauses[] = compact('firstColumn', 'operator', 'secondColumn', 'boolean', 'where');\n\t\t\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "on", "(", "$", "firstColumn", ",", "$", "operator", ",", "$", "secondColumn", ",", "$", "boolean", "=", "'and'", ",", "$", "where", "=", "false", ")", "{", "if", "(", "$", "where", ")", "$", "this", "->", "bindings", "[", "]", "=", "$", "secondColumn", ";", "if", "(", "$", "where", "&&", "(", "$", "operator", "===", "'in'", "||", "$", "operator", "===", "'not in'", ")", "&&", "is_array", "(", "$", "secondColumn", ")", ")", "{", "$", "secondColumn", "=", "count", "(", "$", "secondColumn", ")", ";", "}", "$", "this", "->", "clauses", "[", "]", "=", "compact", "(", "'firstColumn'", ",", "'operator'", ",", "'secondColumn'", ",", "'boolean'", ",", "'where'", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Add an \"on\" clause to the join.\n\n@param string $first\n@param string $operator\n@param string $second\n@param string $boolean\n@param bool $where\n@return \\queryBuilder\\JoinClause", "docstring_tokens": ["Add", "an", "on", "clause", "to", "the", "join", "."], "sha": "be29764c9e825d6243df2561bee25e1a62a0c8eb", "url": "https://github.com/dmetri333/wiggum-services/blob/be29764c9e825d6243df2561bee25e1a62a0c8eb/src/db/JoinClause.class.php#L33-L45", "partition": "test"}
{"repo": "skeetr/skeetr", "path": "src/Skeetr/Client/RPC/Method/Control.php", "func_name": "ControlChannel.executeCommand", "original_string": "private function executeCommand($command)\n    {\n        if ( !is_array($command) || !isset($command['command']) ) {\n            return $this->returnError('Malformed command received.');\n        }\n\n        switch ($command['command']) {\n            case 'journal': return $this->commandJournal($command);\n            case 'shutdown': return $this->commandShutdown($command);\n            default: return $this->returnError('Unknown command.');\n        }\n    }", "language": "php", "code": "private function executeCommand($command)\n    {\n        if ( !is_array($command) || !isset($command['command']) ) {\n            return $this->returnError('Malformed command received.');\n        }\n\n        switch ($command['command']) {\n            case 'journal': return $this->commandJournal($command);\n            case 'shutdown': return $this->commandShutdown($command);\n            default: return $this->returnError('Unknown command.');\n        }\n    }", "code_tokens": ["private", "function", "executeCommand", "(", "$", "command", ")", "{", "if", "(", "!", "is_array", "(", "$", "command", ")", "||", "!", "isset", "(", "$", "command", "[", "'command'", "]", ")", ")", "{", "return", "$", "this", "->", "returnError", "(", "'Malformed command received.'", ")", ";", "}", "switch", "(", "$", "command", "[", "'command'", "]", ")", "{", "case", "'journal'", ":", "return", "$", "this", "->", "commandJournal", "(", "$", "command", ")", ";", "case", "'shutdown'", ":", "return", "$", "this", "->", "commandShutdown", "(", "$", "command", ")", ";", "default", ":", "return", "$", "this", "->", "returnError", "(", "'Unknown command.'", ")", ";", "}", "}"], "docstring": "Execute the command received from the Job\n\n@param  array $command\n@return array the response", "docstring_tokens": ["Execute", "the", "command", "received", "from", "the", "Job"], "sha": "eb4ae5f7a6d3fed322041bbce830961e81ed6e20", "url": "https://github.com/skeetr/skeetr/blob/eb4ae5f7a6d3fed322041bbce830961e81ed6e20/src/Skeetr/Client/RPC/Method/Control.php#L62-L73", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/admin/class-papi-admin-ajax.php", "func_name": "Papi_Admin_Ajax.get_posts", "original_string": "public function get_posts() {\n\t\t$args   = papi_get_qs( 'query' ) ?: [];\n\t\t$args   = is_array( $args ) ? $args : [];\n\t\t$fields = papi_get_qs( 'fields' ) ?: [];\n\t\t$fields = is_array( $fields ) ? $fields : [];\n\t\t$posts  = ( new WP_Query( array_merge( [\n\t\t\t'posts_per_page'         => -1,\n\t\t\t'post_status'            => 'any',\n\t\t\t'post_type'              => ['post'],\n\t\t\t'no_found_rows'          => true,\n\t\t\t'update_post_meta_cache' => false,\n\t\t\t'update_post_term_cache' => false\n\t\t], $args ) ) )->posts;\n\n\t\t$posts = array_filter( $posts, function ( $post ) {\n\t\t\treturn ! empty( $post->post_title );\n\t\t} );\n\n\t\tusort( $posts, function ( $a, $b ) {\n\t\t\treturn strcmp( strtolower( $a->post_title ), strtolower( $b->post_title ) );\n\t\t} );\n\n\t\tif ( ! empty( $fields ) ) {\n\t\t\tforeach ( $posts as $index => $post ) {\n\t\t\t\t$item = [];\n\n\t\t\t\tforeach ( $fields as $field ) {\n\t\t\t\t\t$item[$field] = $post->$field;\n\t\t\t\t}\n\n\t\t\t\t$posts[$index] = $item;\n\t\t\t}\n\t\t}\n\n\t\twp_send_json( $posts );\n\t}", "language": "php", "code": "public function get_posts() {\n\t\t$args   = papi_get_qs( 'query' ) ?: [];\n\t\t$args   = is_array( $args ) ? $args : [];\n\t\t$fields = papi_get_qs( 'fields' ) ?: [];\n\t\t$fields = is_array( $fields ) ? $fields : [];\n\t\t$posts  = ( new WP_Query( array_merge( [\n\t\t\t'posts_per_page'         => -1,\n\t\t\t'post_status'            => 'any',\n\t\t\t'post_type'              => ['post'],\n\t\t\t'no_found_rows'          => true,\n\t\t\t'update_post_meta_cache' => false,\n\t\t\t'update_post_term_cache' => false\n\t\t], $args ) ) )->posts;\n\n\t\t$posts = array_filter( $posts, function ( $post ) {\n\t\t\treturn ! empty( $post->post_title );\n\t\t} );\n\n\t\tusort( $posts, function ( $a, $b ) {\n\t\t\treturn strcmp( strtolower( $a->post_title ), strtolower( $b->post_title ) );\n\t\t} );\n\n\t\tif ( ! empty( $fields ) ) {\n\t\t\tforeach ( $posts as $index => $post ) {\n\t\t\t\t$item = [];\n\n\t\t\t\tforeach ( $fields as $field ) {\n\t\t\t\t\t$item[$field] = $post->$field;\n\t\t\t\t}\n\n\t\t\t\t$posts[$index] = $item;\n\t\t\t}\n\t\t}\n\n\t\twp_send_json( $posts );\n\t}", "code_tokens": ["public", "function", "get_posts", "(", ")", "{", "$", "args", "=", "papi_get_qs", "(", "'query'", ")", "?", ":", "[", "]", ";", "$", "args", "=", "is_array", "(", "$", "args", ")", "?", "$", "args", ":", "[", "]", ";", "$", "fields", "=", "papi_get_qs", "(", "'fields'", ")", "?", ":", "[", "]", ";", "$", "fields", "=", "is_array", "(", "$", "fields", ")", "?", "$", "fields", ":", "[", "]", ";", "$", "posts", "=", "(", "new", "WP_Query", "(", "array_merge", "(", "[", "'posts_per_page'", "=>", "-", "1", ",", "'post_status'", "=>", "'any'", ",", "'post_type'", "=>", "[", "'post'", "]", ",", "'no_found_rows'", "=>", "true", ",", "'update_post_meta_cache'", "=>", "false", ",", "'update_post_term_cache'", "=>", "false", "]", ",", "$", "args", ")", ")", ")", "->", "posts", ";", "$", "posts", "=", "array_filter", "(", "$", "posts", ",", "function", "(", "$", "post", ")", "{", "return", "!", "empty", "(", "$", "post", "->", "post_title", ")", ";", "}", ")", ";", "usort", "(", "$", "posts", ",", "function", "(", "$", "a", ",", "$", "b", ")", "{", "return", "strcmp", "(", "strtolower", "(", "$", "a", "->", "post_title", ")", ",", "strtolower", "(", "$", "b", "->", "post_title", ")", ")", ";", "}", ")", ";", "if", "(", "!", "empty", "(", "$", "fields", ")", ")", "{", "foreach", "(", "$", "posts", "as", "$", "index", "=>", "$", "post", ")", "{", "$", "item", "=", "[", "]", ";", "foreach", "(", "$", "fields", "as", "$", "field", ")", "{", "$", "item", "[", "$", "field", "]", "=", "$", "post", "->", "$", "field", ";", "}", "$", "posts", "[", "$", "index", "]", "=", "$", "item", ";", "}", "}", "wp_send_json", "(", "$", "posts", ")", ";", "}"], "docstring": "Get posts via GET.\n\nPosts with empty title will be ignored.\n\nGET /papi-ajax/?action=get_posts", "docstring_tokens": ["Get", "posts", "via", "GET", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/admin/class-papi-admin-ajax.php#L112-L147", "partition": "test"}
{"repo": "spatie/string", "path": "src/Str.php", "func_name": "Str.contains", "original_string": "public function contains($needle, $caseSensitive = false, $absolute = false)\n    {\n        return $this->find($needle, $caseSensitive, $absolute);\n    }", "language": "php", "code": "public function contains($needle, $caseSensitive = false, $absolute = false)\n    {\n        return $this->find($needle, $caseSensitive, $absolute);\n    }", "code_tokens": ["public", "function", "contains", "(", "$", "needle", ",", "$", "caseSensitive", "=", "false", ",", "$", "absolute", "=", "false", ")", "{", "return", "$", "this", "->", "find", "(", "$", "needle", ",", "$", "caseSensitive", ",", "$", "absolute", ")", ";", "}"], "docstring": "Alias for find.\n\n@param array|string $needle\n@param bool         $caseSensitive\n@param bool         $absolute\n\n@return bool", "docstring_tokens": ["Alias", "for", "find", "."], "sha": "0da2ca3411ef5c47b5d89d68ecc11bfe87a70321", "url": "https://github.com/spatie/string/blob/0da2ca3411ef5c47b5d89d68ecc11bfe87a70321/src/Str.php#L375-L378", "partition": "test"}
{"repo": "orchestral/extension", "path": "src/ExtensionServiceProvider.php", "func_name": "ExtensionServiceProvider.registerExtensionStatusChecker", "original_string": "protected function registerExtensionStatusChecker(): void\n    {\n        $this->app->singleton('orchestra.extension.status', function (Application $app) {\n            return new StatusChecker($app->make('config'), $app->make('request'));\n        });\n    }", "language": "php", "code": "protected function registerExtensionStatusChecker(): void\n    {\n        $this->app->singleton('orchestra.extension.status', function (Application $app) {\n            return new StatusChecker($app->make('config'), $app->make('request'));\n        });\n    }", "code_tokens": ["protected", "function", "registerExtensionStatusChecker", "(", ")", ":", "void", "{", "$", "this", "->", "app", "->", "singleton", "(", "'orchestra.extension.status'", ",", "function", "(", "Application", "$", "app", ")", "{", "return", "new", "StatusChecker", "(", "$", "app", "->", "make", "(", "'config'", ")", ",", "$", "app", "->", "make", "(", "'request'", ")", ")", ";", "}", ")", ";", "}"], "docstring": "Register the service provider for Extension Safe Mode Checker.\n\n@return void", "docstring_tokens": ["Register", "the", "service", "provider", "for", "Extension", "Safe", "Mode", "Checker", "."], "sha": "d461c988ba6ec0200fc8f4e35b515e6710d3ef0a", "url": "https://github.com/orchestral/extension/blob/d461c988ba6ec0200fc8f4e35b515e6710d3ef0a/src/ExtensionServiceProvider.php#L104-L109", "partition": "test"}
{"repo": "pear/Crypt_GPG", "path": "Crypt/GPG.php", "func_name": "Crypt_GPG.addEncryptKey", "original_string": "public function addEncryptKey($key)\n    {\n        $this->_addKey($this->encryptKeys, true, false, $key);\n        return $this;\n    }", "language": "php", "code": "public function addEncryptKey($key)\n    {\n        $this->_addKey($this->encryptKeys, true, false, $key);\n        return $this;\n    }", "code_tokens": ["public", "function", "addEncryptKey", "(", "$", "key", ")", "{", "$", "this", "->", "_addKey", "(", "$", "this", "->", "encryptKeys", ",", "true", ",", "false", ",", "$", "key", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Adds a key to use for encryption\n\n@param mixed $key the key to use. This may be a key identifier, user id\nuser id, fingerprint, {@link Crypt_GPG_Key} or\n{@link Crypt_GPG_SubKey}. The key must be able to\nencrypt.\n\n@return Crypt_GPG the current object, for fluent interface.\n\n@see Crypt_GPG::encrypt()\n@see Crypt_GPG::encryptFile()\n@see Crypt_GPG::clearEncryptKeys()\n@see Crypt_GPG::_addKey()", "docstring_tokens": ["Adds", "a", "key", "to", "use", "for", "encryption"], "sha": "bf07ab51207446ed33ea0075083df9bbc2358617", "url": "https://github.com/pear/Crypt_GPG/blob/bf07ab51207446ed33ea0075083df9bbc2358617/Crypt/GPG.php#L1221-L1225", "partition": "test"}
{"repo": "marklogic-community/mlphp", "path": "api/MarkLogic/MLPHP/Metadata.php", "func_name": "Metadata.addPermissions", "original_string": "public function addPermissions($permissions)\n    {\n        if (is_array($permissions)) {\n            foreach($permissions as $perm) {\n                $this->permissions[$perm->getRoleName()] = $perm;\n            }\n        } else {\n            $this->permissions[$permissions->getRoleName()] = $permissions;\n        }\n        return $this;\n    }", "language": "php", "code": "public function addPermissions($permissions)\n    {\n        if (is_array($permissions)) {\n            foreach($permissions as $perm) {\n                $this->permissions[$perm->getRoleName()] = $perm;\n            }\n        } else {\n            $this->permissions[$permissions->getRoleName()] = $permissions;\n        }\n        return $this;\n    }", "code_tokens": ["public", "function", "addPermissions", "(", "$", "permissions", ")", "{", "if", "(", "is_array", "(", "$", "permissions", ")", ")", "{", "foreach", "(", "$", "permissions", "as", "$", "perm", ")", "{", "$", "this", "->", "permissions", "[", "$", "perm", "->", "getRoleName", "(", ")", "]", "=", "$", "perm", ";", "}", "}", "else", "{", "$", "this", "->", "permissions", "[", "$", "permissions", "->", "getRoleName", "(", ")", "]", "=", "$", "permissions", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Add permissions metadata.\n\n@param array|Permission $permissions An array of Permission objects or a Permission object.\n@return Metadata $this", "docstring_tokens": ["Add", "permissions", "metadata", "."], "sha": "c3aa3de82525cc5c3404e348e4d5069c0eee3277", "url": "https://github.com/marklogic-community/mlphp/blob/c3aa3de82525cc5c3404e348e4d5069c0eee3277/api/MarkLogic/MLPHP/Metadata.php#L108-L118", "partition": "test"}
{"repo": "mikecao/flight", "path": "flight/net/Request.php", "func_name": "Request.getBody", "original_string": "public static function getBody() {\n        static $body;\n\n        if (!is_null($body)) {\n            return $body;\n        }\n\n        $method = self::getMethod();\n\n        if ($method == 'POST' || $method == 'PUT' || $method == 'PATCH') {\n            $body = file_get_contents('php://input');\n        }\n\n        return $body;\n    }", "language": "php", "code": "public static function getBody() {\n        static $body;\n\n        if (!is_null($body)) {\n            return $body;\n        }\n\n        $method = self::getMethod();\n\n        if ($method == 'POST' || $method == 'PUT' || $method == 'PATCH') {\n            $body = file_get_contents('php://input');\n        }\n\n        return $body;\n    }", "code_tokens": ["public", "static", "function", "getBody", "(", ")", "{", "static", "$", "body", ";", "if", "(", "!", "is_null", "(", "$", "body", ")", ")", "{", "return", "$", "body", ";", "}", "$", "method", "=", "self", "::", "getMethod", "(", ")", ";", "if", "(", "$", "method", "==", "'POST'", "||", "$", "method", "==", "'PUT'", "||", "$", "method", "==", "'PATCH'", ")", "{", "$", "body", "=", "file_get_contents", "(", "'php://input'", ")", ";", "}", "return", "$", "body", ";", "}"], "docstring": "Gets the body of the request.\n\n@return string Raw HTTP request body", "docstring_tokens": ["Gets", "the", "body", "of", "the", "request", "."], "sha": "c57ee8cb8d8a4479ce7da28df9538eb8265f67be", "url": "https://github.com/mikecao/flight/blob/c57ee8cb8d8a4479ce7da28df9538eb8265f67be/flight/net/Request.php#L199-L213", "partition": "test"}
{"repo": "APY/APYDataGridBundle", "path": "Grid/Grid.php", "func_name": "Grid.setTemplate", "original_string": "public function setTemplate($template)\n    {\n        if ($template !== null) {\n            if ($template instanceof \\Twig_Template) {\n                $template = '__SELF__' . $template->getTemplateName();\n            } elseif (!is_string($template)) {\n                throw new \\Exception(self::TWIG_TEMPLATE_LOAD_EX_MSG);\n            }\n\n            $this->set(self::REQUEST_QUERY_TEMPLATE, $template);\n            $this->saveSession();\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function setTemplate($template)\n    {\n        if ($template !== null) {\n            if ($template instanceof \\Twig_Template) {\n                $template = '__SELF__' . $template->getTemplateName();\n            } elseif (!is_string($template)) {\n                throw new \\Exception(self::TWIG_TEMPLATE_LOAD_EX_MSG);\n            }\n\n            $this->set(self::REQUEST_QUERY_TEMPLATE, $template);\n            $this->saveSession();\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setTemplate", "(", "$", "template", ")", "{", "if", "(", "$", "template", "!==", "null", ")", "{", "if", "(", "$", "template", "instanceof", "\\", "Twig_Template", ")", "{", "$", "template", "=", "'__SELF__'", ".", "$", "template", "->", "getTemplateName", "(", ")", ";", "}", "elseif", "(", "!", "is_string", "(", "$", "template", ")", ")", "{", "throw", "new", "\\", "Exception", "(", "self", "::", "TWIG_TEMPLATE_LOAD_EX_MSG", ")", ";", "}", "$", "this", "->", "set", "(", "self", "::", "REQUEST_QUERY_TEMPLATE", ",", "$", "template", ")", ";", "$", "this", "->", "saveSession", "(", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Sets template for export.\n\n@param \\Twig_Template|string $template\n\n@throws \\Exception\n\n@return self", "docstring_tokens": ["Sets", "template", "for", "export", "."], "sha": "03050b366a79553b014aa4297d31b585a84622a3", "url": "https://github.com/APY/APYDataGridBundle/blob/03050b366a79553b014aa4297d31b585a84622a3/Grid/Grid.php#L1395-L1409", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/QBXML/Object/SalesTaxGroupItem.php", "func_name": "QuickBooks_QBXML_Object_SalesTaxGroupItem.asQBXML", "original_string": "public function asQBXML($request, $version = null, $locale = null, $root = null)\n\t{\n\t\treturn parent::asQBXML($request, $version, $locale, $root);\n\t}", "language": "php", "code": "public function asQBXML($request, $version = null, $locale = null, $root = null)\n\t{\n\t\treturn parent::asQBXML($request, $version, $locale, $root);\n\t}", "code_tokens": ["public", "function", "asQBXML", "(", "$", "request", ",", "$", "version", "=", "null", ",", "$", "locale", "=", "null", ",", "$", "root", "=", "null", ")", "{", "return", "parent", "::", "asQBXML", "(", "$", "request", ",", "$", "version", ",", "$", "locale", ",", "$", "root", ")", ";", "}"], "docstring": "Convert this object to a valid qbXML request\n\n@param string $request\t\t\t\t\tThe type of request to convert this to (examples: CustomerAddRq, CustomerModRq, CustomerQueryRq)\n@param boolean $todo_for_empty_elements\tA constant, one of: QUICKBOOKS_XML_XML_COMPRESS, QUICKBOOKS_XML_XML_DROP, QUICKBOOKS_XML_XML_PRESERVE\n@param string $indent\n@param string $root\n@return string", "docstring_tokens": ["Convert", "this", "object", "to", "a", "valid", "qbXML", "request"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/QBXML/Object/SalesTaxGroupItem.php#L140-L143", "partition": "test"}
{"repo": "iNem0o/PicORM", "path": "src/PicORM/Model.php", "func_name": "Model.hydrate", "original_string": "public function hydrate($data, $strictLoad = true)\n    {\n        // using reflection to check if property exist\n        $reflection = new \\ReflectionObject($this);\n        foreach ($data as $k => $v) {\n            // if strictLoad is disabled, all properties are allowed to be hydrated\n            if (!$strictLoad) {\n                $this->{$k} = $v;\n                continue;\n            }\n            // check if property really exists in class\n            if ($reflection->hasProperty($k)) {\n                $this->{$k} = $v;\n                continue;\n            }\n            // test relation auto get fields\n            foreach (static::$_relations as $uneRelation) {\n                // check if this field is in auto get from relation\n                if ($uneRelation['typeRelation'] == self::ONE_TO_ONE && in_array($k, $uneRelation['autoGetFields'])) {\n                    $this->{$k} = $v;\n                    break;\n                }\n            }\n        }\n\n        // model is not new anymore\n        $this->_isNew = false;\n    }", "language": "php", "code": "public function hydrate($data, $strictLoad = true)\n    {\n        // using reflection to check if property exist\n        $reflection = new \\ReflectionObject($this);\n        foreach ($data as $k => $v) {\n            // if strictLoad is disabled, all properties are allowed to be hydrated\n            if (!$strictLoad) {\n                $this->{$k} = $v;\n                continue;\n            }\n            // check if property really exists in class\n            if ($reflection->hasProperty($k)) {\n                $this->{$k} = $v;\n                continue;\n            }\n            // test relation auto get fields\n            foreach (static::$_relations as $uneRelation) {\n                // check if this field is in auto get from relation\n                if ($uneRelation['typeRelation'] == self::ONE_TO_ONE && in_array($k, $uneRelation['autoGetFields'])) {\n                    $this->{$k} = $v;\n                    break;\n                }\n            }\n        }\n\n        // model is not new anymore\n        $this->_isNew = false;\n    }", "code_tokens": ["public", "function", "hydrate", "(", "$", "data", ",", "$", "strictLoad", "=", "true", ")", "{", "// using reflection to check if property exist", "$", "reflection", "=", "new", "\\", "ReflectionObject", "(", "$", "this", ")", ";", "foreach", "(", "$", "data", "as", "$", "k", "=>", "$", "v", ")", "{", "// if strictLoad is disabled, all properties are allowed to be hydrated", "if", "(", "!", "$", "strictLoad", ")", "{", "$", "this", "->", "{", "$", "k", "}", "=", "$", "v", ";", "continue", ";", "}", "// check if property really exists in class", "if", "(", "$", "reflection", "->", "hasProperty", "(", "$", "k", ")", ")", "{", "$", "this", "->", "{", "$", "k", "}", "=", "$", "v", ";", "continue", ";", "}", "// test relation auto get fields", "foreach", "(", "static", "::", "$", "_relations", "as", "$", "uneRelation", ")", "{", "// check if this field is in auto get from relation", "if", "(", "$", "uneRelation", "[", "'typeRelation'", "]", "==", "self", "::", "ONE_TO_ONE", "&&", "in_array", "(", "$", "k", ",", "$", "uneRelation", "[", "'autoGetFields'", "]", ")", ")", "{", "$", "this", "->", "{", "$", "k", "}", "=", "$", "v", ";", "break", ";", "}", "}", "}", "// model is not new anymore", "$", "this", "->", "_isNew", "=", "false", ";", "}"], "docstring": "Hydrate model from a fetch assoc\nincluding OneToOne relation auto get field\n\n@param $data\n@param $strictLoad - if true, all fields from $data will be loaded", "docstring_tokens": ["Hydrate", "model", "from", "a", "fetch", "assoc", "including", "OneToOne", "relation", "auto", "get", "field"], "sha": "0bf6c5b359d5fcb098b43d3ea3bf99839bee8b9f", "url": "https://github.com/iNem0o/PicORM/blob/0bf6c5b359d5fcb098b43d3ea3bf99839bee8b9f/src/PicORM/Model.php#L1021-L1048", "partition": "test"}
{"repo": "F21/Paradox", "path": "Paradox/toolbox/PodManager.php", "func_name": "PodManager.convertToPods", "original_string": "public function convertToPods($type, array $documents)\n    {\n        $result = array();\n\n        foreach ($documents as $document) {\n\n            if ($document instanceof \\triagens\\ArangoDb\\Document) {\n                $model = $this->convertDriverDocumentToPod($document);\n\n                $result[$document->getInternalId()] = $model;\n\n            } else {\n                $model = $this->convertArrayToPod($type, $document);\n\n                if (isset($document['_id'])) {\n                    $result[$document['_id']] = $model;\n                } else {\n                    $result[] = $model;\n                }\n            }\n        }\n\n        return $result;\n    }", "language": "php", "code": "public function convertToPods($type, array $documents)\n    {\n        $result = array();\n\n        foreach ($documents as $document) {\n\n            if ($document instanceof \\triagens\\ArangoDb\\Document) {\n                $model = $this->convertDriverDocumentToPod($document);\n\n                $result[$document->getInternalId()] = $model;\n\n            } else {\n                $model = $this->convertArrayToPod($type, $document);\n\n                if (isset($document['_id'])) {\n                    $result[$document['_id']] = $model;\n                } else {\n                    $result[] = $model;\n                }\n            }\n        }\n\n        return $result;\n    }", "code_tokens": ["public", "function", "convertToPods", "(", "$", "type", ",", "array", "$", "documents", ")", "{", "$", "result", "=", "array", "(", ")", ";", "foreach", "(", "$", "documents", "as", "$", "document", ")", "{", "if", "(", "$", "document", "instanceof", "\\", "triagens", "\\", "ArangoDb", "\\", "Document", ")", "{", "$", "model", "=", "$", "this", "->", "convertDriverDocumentToPod", "(", "$", "document", ")", ";", "$", "result", "[", "$", "document", "->", "getInternalId", "(", ")", "]", "=", "$", "model", ";", "}", "else", "{", "$", "model", "=", "$", "this", "->", "convertArrayToPod", "(", "$", "type", ",", "$", "document", ")", ";", "if", "(", "isset", "(", "$", "document", "[", "'_id'", "]", ")", ")", "{", "$", "result", "[", "$", "document", "[", "'_id'", "]", "]", "=", "$", "model", ";", "}", "else", "{", "$", "result", "[", "]", "=", "$", "model", ";", "}", "}", "}", "return", "$", "result", ";", "}"], "docstring": "Converts an array of documents into pods. The documents in each array can be an ArangoDB-PHP document, edge or vertex or an associative array.\n@param  string $type      The type the resulting pods should have.\n@param  array  $documents An array of documents or associative arrays.\n@return array", "docstring_tokens": ["Converts", "an", "array", "of", "documents", "into", "pods", ".", "The", "documents", "in", "each", "array", "can", "be", "an", "ArangoDB", "-", "PHP", "document", "edge", "or", "vertex", "or", "an", "associative", "array", "."], "sha": "d1f47203e743760d8d8d6232bf0ea62920e7eefe", "url": "https://github.com/F21/Paradox/blob/d1f47203e743760d8d8d6232bf0ea62920e7eefe/Paradox/toolbox/PodManager.php#L464-L487", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/BaseResult.php", "func_name": "BaseResult.setRow", "original_string": "public function setRow($key, $value = null)\n\t{\n\t\t// We cache the row data for subsequent uses\n\t\tif (! is_array($this->rowData))\n\t\t{\n\t\t\t$this->rowData = $this->getRowArray(0);\n\t\t}\n\n\t\tif (is_array($key))\n\t\t{\n\t\t\tforeach ($key as $k => $v)\n\t\t\t{\n\t\t\t\t$this->rowData[$k] = $v;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ($key !== '' && $value !== null)\n\t\t{\n\t\t\t$this->rowData[$key] = $value;\n\t\t}\n\t}", "language": "php", "code": "public function setRow($key, $value = null)\n\t{\n\t\t// We cache the row data for subsequent uses\n\t\tif (! is_array($this->rowData))\n\t\t{\n\t\t\t$this->rowData = $this->getRowArray(0);\n\t\t}\n\n\t\tif (is_array($key))\n\t\t{\n\t\t\tforeach ($key as $k => $v)\n\t\t\t{\n\t\t\t\t$this->rowData[$k] = $v;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ($key !== '' && $value !== null)\n\t\t{\n\t\t\t$this->rowData[$key] = $value;\n\t\t}\n\t}", "code_tokens": ["public", "function", "setRow", "(", "$", "key", ",", "$", "value", "=", "null", ")", "{", "// We cache the row data for subsequent uses", "if", "(", "!", "is_array", "(", "$", "this", "->", "rowData", ")", ")", "{", "$", "this", "->", "rowData", "=", "$", "this", "->", "getRowArray", "(", "0", ")", ";", "}", "if", "(", "is_array", "(", "$", "key", ")", ")", "{", "foreach", "(", "$", "key", "as", "$", "k", "=>", "$", "v", ")", "{", "$", "this", "->", "rowData", "[", "$", "k", "]", "=", "$", "v", ";", "}", "return", ";", "}", "if", "(", "$", "key", "!==", "''", "&&", "$", "value", "!==", "null", ")", "{", "$", "this", "->", "rowData", "[", "$", "key", "]", "=", "$", "value", ";", "}", "}"], "docstring": "Assigns an item into a particular column slot.\n\n@param mixed $key\n@param mixed $value\n\n@return mixed", "docstring_tokens": ["Assigns", "an", "item", "into", "a", "particular", "column", "slot", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/BaseResult.php#L420-L442", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-common/src/Common/Internal/ConnectionStringParser.php", "func_name": "ConnectionStringParser._extractKey", "original_string": "private function _extractKey()\n    {\n        $key      = null;\n        $firstPos = $this->_pos;\n        $ch       = $this->_value[$this->_pos];\n\n        if ($ch == '\"' || $ch == '\\'') {\n            $this->_pos++;\n            $key = $this->_extractString($ch);\n        } elseif ($ch == ';' || $ch == '=') {\n            // Key name was expected.\n            throw $this->_createException(\n                $firstPos,\n                Resources::ERROR_CONNECTION_STRING_MISSING_KEY\n            );\n        } else {\n            while ($this->_pos < strlen($this->_value)) {\n                $ch = $this->_value[$this->_pos];\n\n                // At this point we've read the key, break.\n                if ($ch == '=') {\n                    break;\n                }\n\n                $this->_pos++;\n            }\n            $key = rtrim(substr($this->_value, $firstPos, $this->_pos - $firstPos));\n        }\n\n        if (strlen($key) == 0) {\n            // Empty key name.\n            throw $this->_createException(\n                $firstPos,\n                Resources::ERROR_CONNECTION_STRING_EMPTY_KEY\n            );\n        }\n\n        return $key;\n    }", "language": "php", "code": "private function _extractKey()\n    {\n        $key      = null;\n        $firstPos = $this->_pos;\n        $ch       = $this->_value[$this->_pos];\n\n        if ($ch == '\"' || $ch == '\\'') {\n            $this->_pos++;\n            $key = $this->_extractString($ch);\n        } elseif ($ch == ';' || $ch == '=') {\n            // Key name was expected.\n            throw $this->_createException(\n                $firstPos,\n                Resources::ERROR_CONNECTION_STRING_MISSING_KEY\n            );\n        } else {\n            while ($this->_pos < strlen($this->_value)) {\n                $ch = $this->_value[$this->_pos];\n\n                // At this point we've read the key, break.\n                if ($ch == '=') {\n                    break;\n                }\n\n                $this->_pos++;\n            }\n            $key = rtrim(substr($this->_value, $firstPos, $this->_pos - $firstPos));\n        }\n\n        if (strlen($key) == 0) {\n            // Empty key name.\n            throw $this->_createException(\n                $firstPos,\n                Resources::ERROR_CONNECTION_STRING_EMPTY_KEY\n            );\n        }\n\n        return $key;\n    }", "code_tokens": ["private", "function", "_extractKey", "(", ")", "{", "$", "key", "=", "null", ";", "$", "firstPos", "=", "$", "this", "->", "_pos", ";", "$", "ch", "=", "$", "this", "->", "_value", "[", "$", "this", "->", "_pos", "]", ";", "if", "(", "$", "ch", "==", "'\"'", "||", "$", "ch", "==", "'\\''", ")", "{", "$", "this", "->", "_pos", "++", ";", "$", "key", "=", "$", "this", "->", "_extractString", "(", "$", "ch", ")", ";", "}", "elseif", "(", "$", "ch", "==", "';'", "||", "$", "ch", "==", "'='", ")", "{", "// Key name was expected.", "throw", "$", "this", "->", "_createException", "(", "$", "firstPos", ",", "Resources", "::", "ERROR_CONNECTION_STRING_MISSING_KEY", ")", ";", "}", "else", "{", "while", "(", "$", "this", "->", "_pos", "<", "strlen", "(", "$", "this", "->", "_value", ")", ")", "{", "$", "ch", "=", "$", "this", "->", "_value", "[", "$", "this", "->", "_pos", "]", ";", "// At this point we've read the key, break.", "if", "(", "$", "ch", "==", "'='", ")", "{", "break", ";", "}", "$", "this", "->", "_pos", "++", ";", "}", "$", "key", "=", "rtrim", "(", "substr", "(", "$", "this", "->", "_value", ",", "$", "firstPos", ",", "$", "this", "->", "_pos", "-", "$", "firstPos", ")", ")", ";", "}", "if", "(", "strlen", "(", "$", "key", ")", "==", "0", ")", "{", "// Empty key name.", "throw", "$", "this", "->", "_createException", "(", "$", "firstPos", ",", "Resources", "::", "ERROR_CONNECTION_STRING_EMPTY_KEY", ")", ";", "}", "return", "$", "key", ";", "}"], "docstring": "Extracts key at the current position.\n\n@return string", "docstring_tokens": ["Extracts", "key", "at", "the", "current", "position", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-common/src/Common/Internal/ConnectionStringParser.php#L244-L282", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Validation/FormatRules.php", "func_name": "FormatRules.alpha_space", "original_string": "public function alpha_space(string $value = null): bool\n\t{\n\t\tif ($value === null)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (bool) preg_match('/^[A-Z ]+$/i', $value);\n\t}", "language": "php", "code": "public function alpha_space(string $value = null): bool\n\t{\n\t\tif ($value === null)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (bool) preg_match('/^[A-Z ]+$/i', $value);\n\t}", "code_tokens": ["public", "function", "alpha_space", "(", "string", "$", "value", "=", "null", ")", ":", "bool", "{", "if", "(", "$", "value", "===", "null", ")", "{", "return", "true", ";", "}", "return", "(", "bool", ")", "preg_match", "(", "'/^[A-Z ]+$/i'", ",", "$", "value", ")", ";", "}"], "docstring": "Alpha with spaces.\n\n@param string $value Value.\n\n@return boolean True if alpha with spaces, else false.", "docstring_tokens": ["Alpha", "with", "spaces", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Validation/FormatRules.php#L70-L78", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/Defuse.php", "func_name": "Defuse.keygen", "original_string": "public function keygen(): string\n    {\n        try { // Catch Defuse exceptions.\n            if (!($key = Key::createNewRandomKey()->saveToAsciiSafeString())) {\n                throw new Exception('Defuse keygen failure.');\n            }\n        } catch (\\Throwable $Exception) {\n            throw $this->c::issue($Exception->getMessage());\n        }\n        return $key;\n    }", "language": "php", "code": "public function keygen(): string\n    {\n        try { // Catch Defuse exceptions.\n            if (!($key = Key::createNewRandomKey()->saveToAsciiSafeString())) {\n                throw new Exception('Defuse keygen failure.');\n            }\n        } catch (\\Throwable $Exception) {\n            throw $this->c::issue($Exception->getMessage());\n        }\n        return $key;\n    }", "code_tokens": ["public", "function", "keygen", "(", ")", ":", "string", "{", "try", "{", "// Catch Defuse exceptions.", "if", "(", "!", "(", "$", "key", "=", "Key", "::", "createNewRandomKey", "(", ")", "->", "saveToAsciiSafeString", "(", ")", ")", ")", "{", "throw", "new", "Exception", "(", "'Defuse keygen failure.'", ")", ";", "}", "}", "catch", "(", "\\", "Throwable", "$", "Exception", ")", "{", "throw", "$", "this", "->", "c", "::", "issue", "(", "$", "Exception", "->", "getMessage", "(", ")", ")", ";", "}", "return", "$", "key", ";", "}"], "docstring": "Defuse keygen.\n\n@since 170309.60830 Defuse.\n\n@return string Defuse key.\n@note Keys begin w/ `def00000`.", "docstring_tokens": ["Defuse", "keygen", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/Defuse.php#L39-L49", "partition": "test"}
{"repo": "nails/module-admin", "path": "cron/controllers/Export.php", "func_name": "Export.executionFailed", "original_string": "protected function executionFailed(\n        \\Exception $oException,\n        \\stdClass $oRequest,\n        \\Nails\\Admin\\Model\\Export $oModel,\n        \\Nails\\Admin\\Factory\\Email\\DataExport $oEmail\n    ) {\n        $this->writeLog('Exception: ' . $oException->getMessage());\n        $oModel->setBatchStatus($oRequest->ids, $oModel::STATUS_FAILED, $oException->getMessage());\n\n        $oEmail\n            ->data([\n                'status' => $oModel::STATUS_FAILED,\n                'error'  => $oException->getMessage(),\n            ]);\n\n        foreach ($oRequest->recipients as $iRecipient) {\n            $oEmail->to($iRecipient)->send();\n        }\n    }", "language": "php", "code": "protected function executionFailed(\n        \\Exception $oException,\n        \\stdClass $oRequest,\n        \\Nails\\Admin\\Model\\Export $oModel,\n        \\Nails\\Admin\\Factory\\Email\\DataExport $oEmail\n    ) {\n        $this->writeLog('Exception: ' . $oException->getMessage());\n        $oModel->setBatchStatus($oRequest->ids, $oModel::STATUS_FAILED, $oException->getMessage());\n\n        $oEmail\n            ->data([\n                'status' => $oModel::STATUS_FAILED,\n                'error'  => $oException->getMessage(),\n            ]);\n\n        foreach ($oRequest->recipients as $iRecipient) {\n            $oEmail->to($iRecipient)->send();\n        }\n    }", "code_tokens": ["protected", "function", "executionFailed", "(", "\\", "Exception", "$", "oException", ",", "\\", "stdClass", "$", "oRequest", ",", "\\", "Nails", "\\", "Admin", "\\", "Model", "\\", "Export", "$", "oModel", ",", "\\", "Nails", "\\", "Admin", "\\", "Factory", "\\", "Email", "\\", "DataExport", "$", "oEmail", ")", "{", "$", "this", "->", "writeLog", "(", "'Exception: '", ".", "$", "oException", "->", "getMessage", "(", ")", ")", ";", "$", "oModel", "->", "setBatchStatus", "(", "$", "oRequest", "->", "ids", ",", "$", "oModel", "::", "STATUS_FAILED", ",", "$", "oException", "->", "getMessage", "(", ")", ")", ";", "$", "oEmail", "->", "data", "(", "[", "'status'", "=>", "$", "oModel", "::", "STATUS_FAILED", ",", "'error'", "=>", "$", "oException", "->", "getMessage", "(", ")", ",", "]", ")", ";", "foreach", "(", "$", "oRequest", "->", "recipients", "as", "$", "iRecipient", ")", "{", "$", "oEmail", "->", "to", "(", "$", "iRecipient", ")", "->", "send", "(", ")", ";", "}", "}"], "docstring": "Marks a request as failed, recording why it failed and informs the recipients\n\n@param \\Exception                            $oException The exception whichw as thrown\n@param \\stdClass                             $oRequest   The current request\n@param \\Nails\\Admin\\Model\\Export             $oModel     The data export model\n@param \\Nails\\Admin\\Factory\\Email\\DataExport $oEmail     The email object", "docstring_tokens": ["Marks", "a", "request", "as", "failed", "recording", "why", "it", "failed", "and", "informs", "the", "recipients"], "sha": "2ed8a91b5f05c86fcde21feb621cfafe391ee0c3", "url": "https://github.com/nails/module-admin/blob/2ed8a91b5f05c86fcde21feb621cfafe391ee0c3/cron/controllers/Export.php#L108-L126", "partition": "test"}
{"repo": "crysalead/router", "path": "src/Router.php", "func_name": "Router.bind", "original_string": "public function bind($pattern, $options = [], $handler = null)\n    {\n        if (!is_array($options)) {\n            $handler = $options;\n            $options = [];\n        }\n        if (!$handler instanceof Closure && !method_exists($handler, '__invoke')) {\n            throw new RouterException(\"The handler needs to be an instance of `Closure` or implements the `__invoke()` magic method.\");\n        }\n\n        if (isset($options['method'])) {\n            throw new RouterException(\"Use the `'methods'` option to limit HTTP verbs on a route binding definition.\");\n        }\n\n        $scope = end($this->_scopes);\n        $options = $scope->scopify($options);\n        $options['pattern'] = $pattern;\n        $options['handler'] = $handler;\n        $options['scope'] = $scope;\n\n        $scheme = $options['scheme'];\n        $host = $options['host'];\n\n        if (isset($this->_hosts[$scheme][$host])) {\n            $options['host'] = $this->_hosts[$scheme][$host];\n        }\n\n        if (isset($this->_pattern[$scheme][$host][$pattern])) {\n            $instance = $this->_pattern[$scheme][$host][$pattern];\n        } else {\n            $route = $this->_classes['route'];\n            $instance = new $route($options);\n            $this->_hosts[$scheme][$host] = $instance->host();\n        }\n\n        if (!isset($this->_pattern[$scheme][$host][$pattern])) {\n            $this->_pattern[$scheme][$host][$pattern] = $instance;\n        }\n\n        $methods = $options['methods'] ? (array) $options['methods'] : [];\n\n        $instance->allow($methods);\n\n        foreach ($methods as $method) {\n            $this->_routes[$scheme][$host][strtoupper($method)][] = $instance;\n        }\n\n        if (isset($options['name'])) {\n            $this->_data[$options['name']] = $instance;\n        }\n        return $instance;\n    }", "language": "php", "code": "public function bind($pattern, $options = [], $handler = null)\n    {\n        if (!is_array($options)) {\n            $handler = $options;\n            $options = [];\n        }\n        if (!$handler instanceof Closure && !method_exists($handler, '__invoke')) {\n            throw new RouterException(\"The handler needs to be an instance of `Closure` or implements the `__invoke()` magic method.\");\n        }\n\n        if (isset($options['method'])) {\n            throw new RouterException(\"Use the `'methods'` option to limit HTTP verbs on a route binding definition.\");\n        }\n\n        $scope = end($this->_scopes);\n        $options = $scope->scopify($options);\n        $options['pattern'] = $pattern;\n        $options['handler'] = $handler;\n        $options['scope'] = $scope;\n\n        $scheme = $options['scheme'];\n        $host = $options['host'];\n\n        if (isset($this->_hosts[$scheme][$host])) {\n            $options['host'] = $this->_hosts[$scheme][$host];\n        }\n\n        if (isset($this->_pattern[$scheme][$host][$pattern])) {\n            $instance = $this->_pattern[$scheme][$host][$pattern];\n        } else {\n            $route = $this->_classes['route'];\n            $instance = new $route($options);\n            $this->_hosts[$scheme][$host] = $instance->host();\n        }\n\n        if (!isset($this->_pattern[$scheme][$host][$pattern])) {\n            $this->_pattern[$scheme][$host][$pattern] = $instance;\n        }\n\n        $methods = $options['methods'] ? (array) $options['methods'] : [];\n\n        $instance->allow($methods);\n\n        foreach ($methods as $method) {\n            $this->_routes[$scheme][$host][strtoupper($method)][] = $instance;\n        }\n\n        if (isset($options['name'])) {\n            $this->_data[$options['name']] = $instance;\n        }\n        return $instance;\n    }", "code_tokens": ["public", "function", "bind", "(", "$", "pattern", ",", "$", "options", "=", "[", "]", ",", "$", "handler", "=", "null", ")", "{", "if", "(", "!", "is_array", "(", "$", "options", ")", ")", "{", "$", "handler", "=", "$", "options", ";", "$", "options", "=", "[", "]", ";", "}", "if", "(", "!", "$", "handler", "instanceof", "Closure", "&&", "!", "method_exists", "(", "$", "handler", ",", "'__invoke'", ")", ")", "{", "throw", "new", "RouterException", "(", "\"The handler needs to be an instance of `Closure` or implements the `__invoke()` magic method.\"", ")", ";", "}", "if", "(", "isset", "(", "$", "options", "[", "'method'", "]", ")", ")", "{", "throw", "new", "RouterException", "(", "\"Use the `'methods'` option to limit HTTP verbs on a route binding definition.\"", ")", ";", "}", "$", "scope", "=", "end", "(", "$", "this", "->", "_scopes", ")", ";", "$", "options", "=", "$", "scope", "->", "scopify", "(", "$", "options", ")", ";", "$", "options", "[", "'pattern'", "]", "=", "$", "pattern", ";", "$", "options", "[", "'handler'", "]", "=", "$", "handler", ";", "$", "options", "[", "'scope'", "]", "=", "$", "scope", ";", "$", "scheme", "=", "$", "options", "[", "'scheme'", "]", ";", "$", "host", "=", "$", "options", "[", "'host'", "]", ";", "if", "(", "isset", "(", "$", "this", "->", "_hosts", "[", "$", "scheme", "]", "[", "$", "host", "]", ")", ")", "{", "$", "options", "[", "'host'", "]", "=", "$", "this", "->", "_hosts", "[", "$", "scheme", "]", "[", "$", "host", "]", ";", "}", "if", "(", "isset", "(", "$", "this", "->", "_pattern", "[", "$", "scheme", "]", "[", "$", "host", "]", "[", "$", "pattern", "]", ")", ")", "{", "$", "instance", "=", "$", "this", "->", "_pattern", "[", "$", "scheme", "]", "[", "$", "host", "]", "[", "$", "pattern", "]", ";", "}", "else", "{", "$", "route", "=", "$", "this", "->", "_classes", "[", "'route'", "]", ";", "$", "instance", "=", "new", "$", "route", "(", "$", "options", ")", ";", "$", "this", "->", "_hosts", "[", "$", "scheme", "]", "[", "$", "host", "]", "=", "$", "instance", "->", "host", "(", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "this", "->", "_pattern", "[", "$", "scheme", "]", "[", "$", "host", "]", "[", "$", "pattern", "]", ")", ")", "{", "$", "this", "->", "_pattern", "[", "$", "scheme", "]", "[", "$", "host", "]", "[", "$", "pattern", "]", "=", "$", "instance", ";", "}", "$", "methods", "=", "$", "options", "[", "'methods'", "]", "?", "(", "array", ")", "$", "options", "[", "'methods'", "]", ":", "[", "]", ";", "$", "instance", "->", "allow", "(", "$", "methods", ")", ";", "foreach", "(", "$", "methods", "as", "$", "method", ")", "{", "$", "this", "->", "_routes", "[", "$", "scheme", "]", "[", "$", "host", "]", "[", "strtoupper", "(", "$", "method", ")", "]", "[", "]", "=", "$", "instance", ";", "}", "if", "(", "isset", "(", "$", "options", "[", "'name'", "]", ")", ")", "{", "$", "this", "->", "_data", "[", "$", "options", "[", "'name'", "]", "]", "=", "$", "instance", ";", "}", "return", "$", "instance", ";", "}"], "docstring": "Adds a route.\n\n@param  string|array  $pattern The route's pattern.\n@param  Closure|array $options An array of options or the callback handler.\n@param  Closure|null  $handler The callback handler.\n@return self", "docstring_tokens": ["Adds", "a", "route", "."], "sha": "e095a7edc13e3067803db4617fd997d7291de59b", "url": "https://github.com/crysalead/router/blob/e095a7edc13e3067803db4617fd997d7291de59b/src/Router.php#L146-L197", "partition": "test"}
{"repo": "wapmorgan/PhpCodeFixer", "path": "src/PhpCodeFixer.php", "func_name": "PhpCodeFixer.trimSpaces", "original_string": "public static function trimSpaces(array $tokens) {\r\n        $trimmed = [];\r\n        foreach ($tokens as $token) {\r\n            if (is_array($token)) {\r\n                if ($token[0] == T_WHITESPACE)\r\n                    continue;\r\n                else\r\n                    $trimmed[] = self::trimSpaces($token);\r\n            }\r\n            else\r\n                $trimmed[] = $token;\r\n        }\r\n        return $trimmed;\r\n    }", "language": "php", "code": "public static function trimSpaces(array $tokens) {\r\n        $trimmed = [];\r\n        foreach ($tokens as $token) {\r\n            if (is_array($token)) {\r\n                if ($token[0] == T_WHITESPACE)\r\n                    continue;\r\n                else\r\n                    $trimmed[] = self::trimSpaces($token);\r\n            }\r\n            else\r\n                $trimmed[] = $token;\r\n        }\r\n        return $trimmed;\r\n    }", "code_tokens": ["public", "static", "function", "trimSpaces", "(", "array", "$", "tokens", ")", "{", "$", "trimmed", "=", "[", "]", ";", "foreach", "(", "$", "tokens", "as", "$", "token", ")", "{", "if", "(", "is_array", "(", "$", "token", ")", ")", "{", "if", "(", "$", "token", "[", "0", "]", "==", "T_WHITESPACE", ")", "continue", ";", "else", "$", "trimmed", "[", "]", "=", "self", "::", "trimSpaces", "(", "$", "token", ")", ";", "}", "else", "$", "trimmed", "[", "]", "=", "$", "token", ";", "}", "return", "$", "trimmed", ";", "}"], "docstring": "Removes all T_WHITESPACE tokens from tokens hierarchy\n@param array $tokens\n@return array", "docstring_tokens": ["Removes", "all", "T_WHITESPACE", "tokens", "from", "tokens", "hierarchy"], "sha": "6e8982b0b3931bafc56dce4ed553348d64283aec", "url": "https://github.com/wapmorgan/PhpCodeFixer/blob/6e8982b0b3931bafc56dce4ed553348d64283aec/src/PhpCodeFixer.php#L499-L512", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/Image.php", "func_name": "Image.formatToExt", "original_string": "public function formatToExt(string $format): string\n    {\n        switch (($format = mb_strtolower($format))) {\n            case 'jpeg':\n                $ext = 'jpg';\n                break;\n\n            case 'png8':\n            case 'png16':\n            case 'png24':\n            case 'png32':\n            case 'png64':\n                $ext = 'png';\n                break;\n\n            default:\n                $ext = $format;\n        }\n        return $ext;\n    }", "language": "php", "code": "public function formatToExt(string $format): string\n    {\n        switch (($format = mb_strtolower($format))) {\n            case 'jpeg':\n                $ext = 'jpg';\n                break;\n\n            case 'png8':\n            case 'png16':\n            case 'png24':\n            case 'png32':\n            case 'png64':\n                $ext = 'png';\n                break;\n\n            default:\n                $ext = $format;\n        }\n        return $ext;\n    }", "code_tokens": ["public", "function", "formatToExt", "(", "string", "$", "format", ")", ":", "string", "{", "switch", "(", "(", "$", "format", "=", "mb_strtolower", "(", "$", "format", ")", ")", ")", "{", "case", "'jpeg'", ":", "$", "ext", "=", "'jpg'", ";", "break", ";", "case", "'png8'", ":", "case", "'png16'", ":", "case", "'png24'", ":", "case", "'png32'", ":", "case", "'png64'", ":", "$", "ext", "=", "'png'", ";", "break", ";", "default", ":", "$", "ext", "=", "$", "format", ";", "}", "return", "$", "ext", ";", "}"], "docstring": "Format to extension.\n\n@since 17xxxx Imagick utils.\n\n@param string $format Image format.\n\n@return string Format extension.", "docstring_tokens": ["Format", "to", "extension", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/Image.php#L642-L661", "partition": "test"}
{"repo": "Roave/BetterReflection", "path": "src/Reflection/ReflectionClass.php", "func_name": "ReflectionClass.getConstructor", "original_string": "public function getConstructor() : ReflectionMethod\n    {\n        $constructors = array_filter($this->getMethods(), static function (ReflectionMethod $method) : bool {\n            return $method->isConstructor();\n        });\n\n        if (! isset($constructors[0])) {\n            throw new OutOfBoundsException('Could not find method: __construct');\n        }\n\n        return $constructors[0];\n    }", "language": "php", "code": "public function getConstructor() : ReflectionMethod\n    {\n        $constructors = array_filter($this->getMethods(), static function (ReflectionMethod $method) : bool {\n            return $method->isConstructor();\n        });\n\n        if (! isset($constructors[0])) {\n            throw new OutOfBoundsException('Could not find method: __construct');\n        }\n\n        return $constructors[0];\n    }", "code_tokens": ["public", "function", "getConstructor", "(", ")", ":", "ReflectionMethod", "{", "$", "constructors", "=", "array_filter", "(", "$", "this", "->", "getMethods", "(", ")", ",", "static", "function", "(", "ReflectionMethod", "$", "method", ")", ":", "bool", "{", "return", "$", "method", "->", "isConstructor", "(", ")", ";", "}", ")", ";", "if", "(", "!", "isset", "(", "$", "constructors", "[", "0", "]", ")", ")", "{", "throw", "new", "OutOfBoundsException", "(", "'Could not find method: __construct'", ")", ";", "}", "return", "$", "constructors", "[", "0", "]", ";", "}"], "docstring": "Get the constructor method for this class.\n\n@throws OutOfBoundsException", "docstring_tokens": ["Get", "the", "constructor", "method", "for", "this", "class", "."], "sha": "173f42ccb0af41b01b3c2dfd5bd185ccd9ead50c", "url": "https://github.com/Roave/BetterReflection/blob/173f42ccb0af41b01b3c2dfd5bd185ccd9ead50c/src/Reflection/ReflectionClass.php#L581-L592", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Event.php", "func_name": "Event.fire", "original_string": "public static function fire($event) {\n        $handlers = self::getHandlers($event);\n        if (!$handlers) {\n            return null;\n        }\n\n        // Grab the handlers and call them.\n        $args = array_slice(func_get_args(), 1);\n        $result = null;\n        foreach ($handlers as $callbacks) {\n            foreach ($callbacks as $callback) {\n                $result = call_user_func_array($callback, $args);\n            }\n        }\n        return $result;\n    }", "language": "php", "code": "public static function fire($event) {\n        $handlers = self::getHandlers($event);\n        if (!$handlers) {\n            return null;\n        }\n\n        // Grab the handlers and call them.\n        $args = array_slice(func_get_args(), 1);\n        $result = null;\n        foreach ($handlers as $callbacks) {\n            foreach ($callbacks as $callback) {\n                $result = call_user_func_array($callback, $args);\n            }\n        }\n        return $result;\n    }", "code_tokens": ["public", "static", "function", "fire", "(", "$", "event", ")", "{", "$", "handlers", "=", "self", "::", "getHandlers", "(", "$", "event", ")", ";", "if", "(", "!", "$", "handlers", ")", "{", "return", "null", ";", "}", "// Grab the handlers and call them.", "$", "args", "=", "array_slice", "(", "func_get_args", "(", ")", ",", "1", ")", ";", "$", "result", "=", "null", ";", "foreach", "(", "$", "handlers", "as", "$", "callbacks", ")", "{", "foreach", "(", "$", "callbacks", "as", "$", "callback", ")", "{", "$", "result", "=", "call_user_func_array", "(", "$", "callback", ",", "$", "args", ")", ";", "}", "}", "return", "$", "result", ";", "}"], "docstring": "Fire an event.\n\n@param string $event The name of the event.\n@return mixed Returns the result of the last event handler.", "docstring_tokens": ["Fire", "an", "event", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Event.php#L195-L210", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "app/Config/Modules.php", "func_name": "Modules.shouldDiscover", "original_string": "public function shouldDiscover(string $alias)\n\t{\n\t\tif (! $this->enabled)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$alias = strtolower($alias);\n\n\t\treturn in_array($alias, $this->activeExplorers);\n\t}", "language": "php", "code": "public function shouldDiscover(string $alias)\n\t{\n\t\tif (! $this->enabled)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$alias = strtolower($alias);\n\n\t\treturn in_array($alias, $this->activeExplorers);\n\t}", "code_tokens": ["public", "function", "shouldDiscover", "(", "string", "$", "alias", ")", "{", "if", "(", "!", "$", "this", "->", "enabled", ")", "{", "return", "false", ";", "}", "$", "alias", "=", "strtolower", "(", "$", "alias", ")", ";", "return", "in_array", "(", "$", "alias", ",", "$", "this", "->", "activeExplorers", ")", ";", "}"], "docstring": "Should the application auto-discover the requested resources.\n\nValid values are:\n- events\n- registrars\n- routes\n- services\n\n@param string $alias\n\n@return boolean", "docstring_tokens": ["Should", "the", "application", "auto", "-", "discover", "the", "requested", "resources", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/app/Config/Modules.php#L56-L66", "partition": "test"}
{"repo": "cviebrock/eloquent-taggable", "path": "src/Taggable.php", "func_name": "Taggable.removeOneTag", "original_string": "protected function removeOneTag(string $tagName): void\n    {\n        $tag = app(TagService::class)->find($tagName);\n\n        if ($tag) {\n            $this->tags()->detach($tag);\n        }\n    }", "language": "php", "code": "protected function removeOneTag(string $tagName): void\n    {\n        $tag = app(TagService::class)->find($tagName);\n\n        if ($tag) {\n            $this->tags()->detach($tag);\n        }\n    }", "code_tokens": ["protected", "function", "removeOneTag", "(", "string", "$", "tagName", ")", ":", "void", "{", "$", "tag", "=", "app", "(", "TagService", "::", "class", ")", "->", "find", "(", "$", "tagName", ")", ";", "if", "(", "$", "tag", ")", "{", "$", "this", "->", "tags", "(", ")", "->", "detach", "(", "$", "tag", ")", ";", "}", "}"], "docstring": "Remove one tag from the model\n\n@param string $tagName", "docstring_tokens": ["Remove", "one", "tag", "from", "the", "model"], "sha": "0201cdc85e5642bf31250527eb779df6dc3ca364", "url": "https://github.com/cviebrock/eloquent-taggable/blob/0201cdc85e5642bf31250527eb779df6dc3ca364/src/Taggable.php#L140-L147", "partition": "test"}
{"repo": "gwa/WpMultisiteDirectoryResolver", "path": "src/Gwa/AbstractResolver.php", "func_name": "AbstractResolver.fixWpDoubleSlashFilter", "original_string": "public function fixWpDoubleSlashFilter($urls)\n    {\n        foreach ($urls as &$url) {\n            if ($url) {\n                $url = str_replace('//app', '/app', $url);\n            }\n        }\n\n        return $urls;\n    }", "language": "php", "code": "public function fixWpDoubleSlashFilter($urls)\n    {\n        foreach ($urls as &$url) {\n            if ($url) {\n                $url = str_replace('//app', '/app', $url);\n            }\n        }\n\n        return $urls;\n    }", "code_tokens": ["public", "function", "fixWpDoubleSlashFilter", "(", "$", "urls", ")", "{", "foreach", "(", "$", "urls", "as", "&", "$", "url", ")", "{", "if", "(", "$", "url", ")", "{", "$", "url", "=", "str_replace", "(", "'//app'", ",", "'/app'", ",", "$", "url", ")", ";", "}", "}", "return", "$", "urls", ";", "}"], "docstring": "Fix double backslashes in app folder.\n\n@param string", "docstring_tokens": ["Fix", "double", "backslashes", "in", "app", "folder", "."], "sha": "78dcc1c05bdfff6556fac8b634824d21b56fcb79", "url": "https://github.com/gwa/WpMultisiteDirectoryResolver/blob/78dcc1c05bdfff6556fac8b634824d21b56fcb79/src/Gwa/AbstractResolver.php#L71-L80", "partition": "test"}
{"repo": "techdivision/import", "path": "src/Callbacks/CallbackVisitor.php", "func_name": "CallbackVisitor.prepareCallbacks", "original_string": "protected function prepareCallbacks(SubjectInterface $subject, array $callbacks, $type = null)\n    {\n\n        // iterate over the array with callbacks and prepare them\n        foreach ($callbacks as $key => $callback) {\n            // we have to initialize the type only on the first level\n            if ($type == null) {\n                $type = $key;\n            }\n\n            // query whether or not we've an subarry or not\n            if (is_array($callback)) {\n                $this->prepareCallbacks($subject, $callback, $type);\n            } else {\n                $subject->registerCallback($this->container->get($callback), $type);\n            }\n        }\n    }", "language": "php", "code": "protected function prepareCallbacks(SubjectInterface $subject, array $callbacks, $type = null)\n    {\n\n        // iterate over the array with callbacks and prepare them\n        foreach ($callbacks as $key => $callback) {\n            // we have to initialize the type only on the first level\n            if ($type == null) {\n                $type = $key;\n            }\n\n            // query whether or not we've an subarry or not\n            if (is_array($callback)) {\n                $this->prepareCallbacks($subject, $callback, $type);\n            } else {\n                $subject->registerCallback($this->container->get($callback), $type);\n            }\n        }\n    }", "code_tokens": ["protected", "function", "prepareCallbacks", "(", "SubjectInterface", "$", "subject", ",", "array", "$", "callbacks", ",", "$", "type", "=", "null", ")", "{", "// iterate over the array with callbacks and prepare them", "foreach", "(", "$", "callbacks", "as", "$", "key", "=>", "$", "callback", ")", "{", "// we have to initialize the type only on the first level", "if", "(", "$", "type", "==", "null", ")", "{", "$", "type", "=", "$", "key", ";", "}", "// query whether or not we've an subarry or not", "if", "(", "is_array", "(", "$", "callback", ")", ")", "{", "$", "this", "->", "prepareCallbacks", "(", "$", "subject", ",", "$", "callback", ",", "$", "type", ")", ";", "}", "else", "{", "$", "subject", "->", "registerCallback", "(", "$", "this", "->", "container", "->", "get", "(", "$", "callback", ")", ",", "$", "type", ")", ";", "}", "}", "}"], "docstring": "Prepare the callbacks defined in the system configuration.\n\n@param \\TechDivision\\Import\\Subjects\\SubjectInterface $subject   The subject to prepare the callbacks for\n@param array                                          $callbacks The array with the callbacks\n@param string                                         $type      The actual callback type\n\n@return void", "docstring_tokens": ["Prepare", "the", "callbacks", "defined", "in", "the", "system", "configuration", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/Callbacks/CallbackVisitor.php#L83-L100", "partition": "test"}
{"repo": "estebanmatias92/RestGalleries", "path": "src/RestGalleries/Auth/Auth.php", "func_name": "Auth.getAuthProtocol", "original_string": "public static function getAuthProtocol(array $credentials)\n    {\n        $instance       = new static;\n        $credentialKeys = array_keys($credentials);\n\n        if ($instance->isOauth1($credentialKeys)) {\n            return 'oauth1';\n        }\n\n        if ($instance->isOauth2($credentialKeys)) {\n            return 'oauth2';\n        }\n\n        return false;\n\n    }", "language": "php", "code": "public static function getAuthProtocol(array $credentials)\n    {\n        $instance       = new static;\n        $credentialKeys = array_keys($credentials);\n\n        if ($instance->isOauth1($credentialKeys)) {\n            return 'oauth1';\n        }\n\n        if ($instance->isOauth2($credentialKeys)) {\n            return 'oauth2';\n        }\n\n        return false;\n\n    }", "code_tokens": ["public", "static", "function", "getAuthProtocol", "(", "array", "$", "credentials", ")", "{", "$", "instance", "=", "new", "static", ";", "$", "credentialKeys", "=", "array_keys", "(", "$", "credentials", ")", ";", "if", "(", "$", "instance", "->", "isOauth1", "(", "$", "credentialKeys", ")", ")", "{", "return", "'oauth1'", ";", "}", "if", "(", "$", "instance", "->", "isOauth2", "(", "$", "credentialKeys", ")", ")", "{", "return", "'oauth2'", ";", "}", "return", "false", ";", "}"], "docstring": "Checks the credentials and returns the name of the auth system used, if credentials are not founds, returns false.\n\n@param  array $credentials\n@return string|boolean", "docstring_tokens": ["Checks", "the", "credentials", "and", "returns", "the", "name", "of", "the", "auth", "system", "used", "if", "credentials", "are", "not", "founds", "returns", "false", "."], "sha": "09bbaf351e1ec330f075aa96b7c2aed407534a57", "url": "https://github.com/estebanmatias92/RestGalleries/blob/09bbaf351e1ec330f075aa96b7c2aed407534a57/src/RestGalleries/Auth/Auth.php#L227-L242", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/DataService/DataService.php", "func_name": "DataService.Configure", "original_string": "public static function Configure($settings)\n    {\n        if (isset($settings)) {\n            if (is_array($settings)) {\n                $ServiceContext = ServiceContext::ConfigureFromPassedArray($settings);\n                if (!isset($ServiceContext)) {\n                    throw new SdkException('Construct ServiceContext from OAuthSettigs failed.');\n                }\n                $DataServiceInstance = new DataService($ServiceContext);\n\n            } elseif (is_string($settings)) {\n                $ServiceContext = ServiceContext::ConfigureFromLocalFile($settings);\n                if (!isset($ServiceContext)) {\n                    throw new SdkException('Construct ServiceContext from File failed.');\n                }\n                $DataServiceInstance = new DataService($ServiceContext);\n\n            }\n\n            if($ServiceContext->IppConfiguration->OAuthMode == CoreConstants::OAUTH2)\n            {\n                $oauth2Config = $ServiceContext->IppConfiguration->Security;\n                if($oauth2Config instanceof OAuth2AccessToken){\n                    $DataServiceInstance->configureOAuth2LoginHelper($oauth2Config, $settings);\n                }else{\n                    throw new SdkException(\"SDK Error. OAuth mode is not OAuth 2.\");\n                }\n            }\n\n            return $DataServiceInstance;\n\n        } else {\n            throw new SdkException(\"Passed Null to Configure method. It expects either a file path for the config file or an array containing OAuth settings and BaseURL.\");\n        }\n    }", "language": "php", "code": "public static function Configure($settings)\n    {\n        if (isset($settings)) {\n            if (is_array($settings)) {\n                $ServiceContext = ServiceContext::ConfigureFromPassedArray($settings);\n                if (!isset($ServiceContext)) {\n                    throw new SdkException('Construct ServiceContext from OAuthSettigs failed.');\n                }\n                $DataServiceInstance = new DataService($ServiceContext);\n\n            } elseif (is_string($settings)) {\n                $ServiceContext = ServiceContext::ConfigureFromLocalFile($settings);\n                if (!isset($ServiceContext)) {\n                    throw new SdkException('Construct ServiceContext from File failed.');\n                }\n                $DataServiceInstance = new DataService($ServiceContext);\n\n            }\n\n            if($ServiceContext->IppConfiguration->OAuthMode == CoreConstants::OAUTH2)\n            {\n                $oauth2Config = $ServiceContext->IppConfiguration->Security;\n                if($oauth2Config instanceof OAuth2AccessToken){\n                    $DataServiceInstance->configureOAuth2LoginHelper($oauth2Config, $settings);\n                }else{\n                    throw new SdkException(\"SDK Error. OAuth mode is not OAuth 2.\");\n                }\n            }\n\n            return $DataServiceInstance;\n\n        } else {\n            throw new SdkException(\"Passed Null to Configure method. It expects either a file path for the config file or an array containing OAuth settings and BaseURL.\");\n        }\n    }", "code_tokens": ["public", "static", "function", "Configure", "(", "$", "settings", ")", "{", "if", "(", "isset", "(", "$", "settings", ")", ")", "{", "if", "(", "is_array", "(", "$", "settings", ")", ")", "{", "$", "ServiceContext", "=", "ServiceContext", "::", "ConfigureFromPassedArray", "(", "$", "settings", ")", ";", "if", "(", "!", "isset", "(", "$", "ServiceContext", ")", ")", "{", "throw", "new", "SdkException", "(", "'Construct ServiceContext from OAuthSettigs failed.'", ")", ";", "}", "$", "DataServiceInstance", "=", "new", "DataService", "(", "$", "ServiceContext", ")", ";", "}", "elseif", "(", "is_string", "(", "$", "settings", ")", ")", "{", "$", "ServiceContext", "=", "ServiceContext", "::", "ConfigureFromLocalFile", "(", "$", "settings", ")", ";", "if", "(", "!", "isset", "(", "$", "ServiceContext", ")", ")", "{", "throw", "new", "SdkException", "(", "'Construct ServiceContext from File failed.'", ")", ";", "}", "$", "DataServiceInstance", "=", "new", "DataService", "(", "$", "ServiceContext", ")", ";", "}", "if", "(", "$", "ServiceContext", "->", "IppConfiguration", "->", "OAuthMode", "==", "CoreConstants", "::", "OAUTH2", ")", "{", "$", "oauth2Config", "=", "$", "ServiceContext", "->", "IppConfiguration", "->", "Security", ";", "if", "(", "$", "oauth2Config", "instanceof", "OAuth2AccessToken", ")", "{", "$", "DataServiceInstance", "->", "configureOAuth2LoginHelper", "(", "$", "oauth2Config", ",", "$", "settings", ")", ";", "}", "else", "{", "throw", "new", "SdkException", "(", "\"SDK Error. OAuth mode is not OAuth 2.\"", ")", ";", "}", "}", "return", "$", "DataServiceInstance", ";", "}", "else", "{", "throw", "new", "SdkException", "(", "\"Passed Null to Configure method. It expects either a file path for the config file or an array containing OAuth settings and BaseURL.\"", ")", ";", "}", "}"], "docstring": "New Static function for static Reading from Config or Passing Array\nThe config needs to include\n\n@param $settings\n@return DataService\n@throws SdkException\n@throws SdkException", "docstring_tokens": ["New", "Static", "function", "for", "static", "Reading", "from", "Config", "or", "Passing", "Array", "The", "config", "needs", "to", "include"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/DataService/DataService.php#L363-L397", "partition": "test"}
{"repo": "cnvs/easel", "path": "src/CanvasServiceProvider.php", "func_name": "CanvasServiceProvider.handleViews", "original_string": "private function handleViews()\n    {\n        // Load the views...\n        $this->loadViewsFrom(__DIR__.'/../resources/views', 'canvas');\n\n        // Allow publishing view files, with tag: views\n        $this->publishes([\n            __DIR__.'/../resources/views/auth' => base_path('resources/views/vendor/canvas/auth'),\n            __DIR__.'/../resources/views/backend' => base_path('resources/views/vendor/canvas/backend'),\n            __DIR__.'/../resources/views/errors' => base_path('resources/views/vendor/canvas/errors'),\n            __DIR__.'/../resources/views/frontend' => base_path('resources/views/vendor/canvas/frontend'),\n        ], 'views');\n    }", "language": "php", "code": "private function handleViews()\n    {\n        // Load the views...\n        $this->loadViewsFrom(__DIR__.'/../resources/views', 'canvas');\n\n        // Allow publishing view files, with tag: views\n        $this->publishes([\n            __DIR__.'/../resources/views/auth' => base_path('resources/views/vendor/canvas/auth'),\n            __DIR__.'/../resources/views/backend' => base_path('resources/views/vendor/canvas/backend'),\n            __DIR__.'/../resources/views/errors' => base_path('resources/views/vendor/canvas/errors'),\n            __DIR__.'/../resources/views/frontend' => base_path('resources/views/vendor/canvas/frontend'),\n        ], 'views');\n    }", "code_tokens": ["private", "function", "handleViews", "(", ")", "{", "// Load the views...", "$", "this", "->", "loadViewsFrom", "(", "__DIR__", ".", "'/../resources/views'", ",", "'canvas'", ")", ";", "// Allow publishing view files, with tag: views", "$", "this", "->", "publishes", "(", "[", "__DIR__", ".", "'/../resources/views/auth'", "=>", "base_path", "(", "'resources/views/vendor/canvas/auth'", ")", ",", "__DIR__", ".", "'/../resources/views/backend'", "=>", "base_path", "(", "'resources/views/vendor/canvas/backend'", ")", ",", "__DIR__", ".", "'/../resources/views/errors'", "=>", "base_path", "(", "'resources/views/vendor/canvas/errors'", ")", ",", "__DIR__", ".", "'/../resources/views/frontend'", "=>", "base_path", "(", "'resources/views/vendor/canvas/frontend'", ")", ",", "]", ",", "'views'", ")", ";", "}"], "docstring": "View files.", "docstring_tokens": ["View", "files", "."], "sha": "bb2b564432155467944b4a2e719e474fd564b711", "url": "https://github.com/cnvs/easel/blob/bb2b564432155467944b4a2e719e474fd564b711/src/CanvasServiceProvider.php#L111-L123", "partition": "test"}
{"repo": "marklogic-community/mlphp", "path": "api/MarkLogic/MLPHP/Values.php", "func_name": "Values.addValuesOptions", "original_string": "private function addValuesOptions($dom, $elem)\n    {\n        if (!empty($this->valuesOptions)) {\n            foreach($this->valuesOptions as $opt) {\n                $valuesElem = $dom->createElement('values-option');\n                $valuesElem->nodeValue = $opt;\n                $elem->appendChild($valuesElem);\n            }\n        }\n        return $elem;\n    }", "language": "php", "code": "private function addValuesOptions($dom, $elem)\n    {\n        if (!empty($this->valuesOptions)) {\n            foreach($this->valuesOptions as $opt) {\n                $valuesElem = $dom->createElement('values-option');\n                $valuesElem->nodeValue = $opt;\n                $elem->appendChild($valuesElem);\n            }\n        }\n        return $elem;\n    }", "code_tokens": ["private", "function", "addValuesOptions", "(", "$", "dom", ",", "$", "elem", ")", "{", "if", "(", "!", "empty", "(", "$", "this", "->", "valuesOptions", ")", ")", "{", "foreach", "(", "$", "this", "->", "valuesOptions", "as", "$", "opt", ")", "{", "$", "valuesElem", "=", "$", "dom", "->", "createElement", "(", "'values-option'", ")", ";", "$", "valuesElem", "->", "nodeValue", "=", "$", "opt", ";", "$", "elem", "->", "appendChild", "(", "$", "valuesElem", ")", ";", "}", "}", "return", "$", "elem", ";", "}"], "docstring": "Add values options to an element.\n\n@param DOMDocument $dom A DOM document.\n@param DOMElement $elem A DOM element.\n@return DOMElement The updated element.", "docstring_tokens": ["Add", "values", "options", "to", "an", "element", "."], "sha": "c3aa3de82525cc5c3404e348e4d5069c0eee3277", "url": "https://github.com/marklogic-community/mlphp/blob/c3aa3de82525cc5c3404e348e4d5069c0eee3277/api/MarkLogic/MLPHP/Values.php#L173-L183", "partition": "test"}
{"repo": "Speicher210/business-hours", "path": "src/BusinessHours.php", "func_name": "BusinessHours.getClosestDateIntervalAfter", "original_string": "private function getClosestDateIntervalAfter(\\DateTime $date): DateTimeInterval\n    {\n        $tmpDate = clone $date;\n        $dayOfWeek = (int)$tmpDate->format('N');\n        $time = TimeBuilder::fromDate($tmpDate);\n\n        if (null !== $day = $this->getDay($dayOfWeek)) {\n            if (null !== $closestTime = $day->getClosestNextOpeningHoursInterval($time)) {\n                return $this->buildDateTimeInterval($tmpDate, $closestTime);\n            }\n        }\n\n        $tmpDate = $this->getDateAfter($tmpDate);\n\n        $closestDay = $this->getClosestDayBefore((int)$tmpDate->format('N'));\n\n        $openingTime = $closestDay->getOpeningTime();\n        $closestTime = $closestDay->getClosestNextOpeningHoursInterval($openingTime);\n\n        return $this->buildDateTimeInterval($tmpDate, $closestTime);\n    }", "language": "php", "code": "private function getClosestDateIntervalAfter(\\DateTime $date): DateTimeInterval\n    {\n        $tmpDate = clone $date;\n        $dayOfWeek = (int)$tmpDate->format('N');\n        $time = TimeBuilder::fromDate($tmpDate);\n\n        if (null !== $day = $this->getDay($dayOfWeek)) {\n            if (null !== $closestTime = $day->getClosestNextOpeningHoursInterval($time)) {\n                return $this->buildDateTimeInterval($tmpDate, $closestTime);\n            }\n        }\n\n        $tmpDate = $this->getDateAfter($tmpDate);\n\n        $closestDay = $this->getClosestDayBefore((int)$tmpDate->format('N'));\n\n        $openingTime = $closestDay->getOpeningTime();\n        $closestTime = $closestDay->getClosestNextOpeningHoursInterval($openingTime);\n\n        return $this->buildDateTimeInterval($tmpDate, $closestTime);\n    }", "code_tokens": ["private", "function", "getClosestDateIntervalAfter", "(", "\\", "DateTime", "$", "date", ")", ":", "DateTimeInterval", "{", "$", "tmpDate", "=", "clone", "$", "date", ";", "$", "dayOfWeek", "=", "(", "int", ")", "$", "tmpDate", "->", "format", "(", "'N'", ")", ";", "$", "time", "=", "TimeBuilder", "::", "fromDate", "(", "$", "tmpDate", ")", ";", "if", "(", "null", "!==", "$", "day", "=", "$", "this", "->", "getDay", "(", "$", "dayOfWeek", ")", ")", "{", "if", "(", "null", "!==", "$", "closestTime", "=", "$", "day", "->", "getClosestNextOpeningHoursInterval", "(", "$", "time", ")", ")", "{", "return", "$", "this", "->", "buildDateTimeInterval", "(", "$", "tmpDate", ",", "$", "closestTime", ")", ";", "}", "}", "$", "tmpDate", "=", "$", "this", "->", "getDateAfter", "(", "$", "tmpDate", ")", ";", "$", "closestDay", "=", "$", "this", "->", "getClosestDayBefore", "(", "(", "int", ")", "$", "tmpDate", "->", "format", "(", "'N'", ")", ")", ";", "$", "openingTime", "=", "$", "closestDay", "->", "getOpeningTime", "(", ")", ";", "$", "closestTime", "=", "$", "closestDay", "->", "getClosestNextOpeningHoursInterval", "(", "$", "openingTime", ")", ";", "return", "$", "this", "->", "buildDateTimeInterval", "(", "$", "tmpDate", ",", "$", "closestTime", ")", ";", "}"], "docstring": "Get the closest business hours date interval after the given date.\n\n@param \\DateTime $date The given date.\n@return DateTimeInterval", "docstring_tokens": ["Get", "the", "closest", "business", "hours", "date", "interval", "after", "the", "given", "date", "."], "sha": "f8479821532991927d7ff9ea1b659f76153a2587", "url": "https://github.com/Speicher210/business-hours/blob/f8479821532991927d7ff9ea1b659f76153a2587/src/BusinessHours.php#L176-L196", "partition": "test"}
{"repo": "PHPExif/php-exif", "path": "lib/PHPExif/Exif.php", "func_name": "Exif.getHorizontalResolution", "original_string": "public function getHorizontalResolution()\n    {\n        if (!isset($this->data[self::HORIZONTAL_RESOLUTION])) {\n            return false;\n        }\n\n        return $this->data[self::HORIZONTAL_RESOLUTION];\n    }", "language": "php", "code": "public function getHorizontalResolution()\n    {\n        if (!isset($this->data[self::HORIZONTAL_RESOLUTION])) {\n            return false;\n        }\n\n        return $this->data[self::HORIZONTAL_RESOLUTION];\n    }", "code_tokens": ["public", "function", "getHorizontalResolution", "(", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "data", "[", "self", "::", "HORIZONTAL_RESOLUTION", "]", ")", ")", "{", "return", "false", ";", "}", "return", "$", "this", "->", "data", "[", "self", "::", "HORIZONTAL_RESOLUTION", "]", ";", "}"], "docstring": "Returns the horizontal resolution in DPI, if it exists\n\n@return int|boolean", "docstring_tokens": ["Returns", "the", "horizontal", "resolution", "in", "DPI", "if", "it", "exists"], "sha": "41f23db39d7b48e4af0e134c2e80e577c1782ac9", "url": "https://github.com/PHPExif/php-exif/blob/41f23db39d7b48e4af0e134c2e80e577c1782ac9/lib/PHPExif/Exif.php#L579-L586", "partition": "test"}
{"repo": "shokohsc/TwitchApiBundle", "path": "Repository/SearchRepository.php", "func_name": "SearchRepository.getGames", "original_string": "public function getGames($params = array())\n    {\n        $params = 0 < count($params) ? '?'.http_build_query($params) : '';\n        $response = $this->getClient()->get(self::ENDPOINT.'games'.$params);\n        $data = $this->jsonResponse($response);\n\n        return $this->setFactory((new GameFactory()))->getFactory()->createList($data);\n    }", "language": "php", "code": "public function getGames($params = array())\n    {\n        $params = 0 < count($params) ? '?'.http_build_query($params) : '';\n        $response = $this->getClient()->get(self::ENDPOINT.'games'.$params);\n        $data = $this->jsonResponse($response);\n\n        return $this->setFactory((new GameFactory()))->getFactory()->createList($data);\n    }", "code_tokens": ["public", "function", "getGames", "(", "$", "params", "=", "array", "(", ")", ")", "{", "$", "params", "=", "0", "<", "count", "(", "$", "params", ")", "?", "'?'", ".", "http_build_query", "(", "$", "params", ")", ":", "''", ";", "$", "response", "=", "$", "this", "->", "getClient", "(", ")", "->", "get", "(", "self", "::", "ENDPOINT", ".", "'games'", ".", "$", "params", ")", ";", "$", "data", "=", "$", "this", "->", "jsonResponse", "(", "$", "response", ")", ";", "return", "$", "this", "->", "setFactory", "(", "(", "new", "GameFactory", "(", ")", ")", ")", "->", "getFactory", "(", ")", "->", "createList", "(", "$", "data", ")", ";", "}"], "docstring": "Search games.\n\n@param array $params\n\n@return GameList", "docstring_tokens": ["Search", "games", "."], "sha": "9ee6d2e1609d5dee4c083188a8ef5d916965eb64", "url": "https://github.com/shokohsc/TwitchApiBundle/blob/9ee6d2e1609d5dee4c083188a8ef5d916965eb64/Repository/SearchRepository.php#L39-L46", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/core/class-papi-core-property.php", "func_name": "Papi_Core_Property.html_id", "original_string": "public function html_id( $suffix = '', $row = null ) {\n\t\tif ( is_array( $suffix ) || is_object( $suffix ) ) {\n\t\t\treturn papi_f( $this->html_name( $suffix, $row ) );\n\t\t} else {\n\t\t\t$suffix = empty( $suffix ) || ! is_string( $suffix ) ? '' : '_' . $suffix;\n\t\t\t$suffix = papi_underscorify( papi_slugify( $suffix ) );\n\t\t}\n\n\t\t$name = $this->html_name();\n\t\t$len  = strlen( $name );\n\n\t\tif ( isset( $name[$len - 1] ) && $name[$len - 1] === ']' ) {\n\t\t\treturn papi_f( sprintf( '%s%s]', substr( $name, 0, $len - 1 ), $suffix ) );\n\t\t}\n\n\t\treturn papi_f( sprintf( '%s%s', $this->html_name(), $suffix ) );\n\t}", "language": "php", "code": "public function html_id( $suffix = '', $row = null ) {\n\t\tif ( is_array( $suffix ) || is_object( $suffix ) ) {\n\t\t\treturn papi_f( $this->html_name( $suffix, $row ) );\n\t\t} else {\n\t\t\t$suffix = empty( $suffix ) || ! is_string( $suffix ) ? '' : '_' . $suffix;\n\t\t\t$suffix = papi_underscorify( papi_slugify( $suffix ) );\n\t\t}\n\n\t\t$name = $this->html_name();\n\t\t$len  = strlen( $name );\n\n\t\tif ( isset( $name[$len - 1] ) && $name[$len - 1] === ']' ) {\n\t\t\treturn papi_f( sprintf( '%s%s]', substr( $name, 0, $len - 1 ), $suffix ) );\n\t\t}\n\n\t\treturn papi_f( sprintf( '%s%s', $this->html_name(), $suffix ) );\n\t}", "code_tokens": ["public", "function", "html_id", "(", "$", "suffix", "=", "''", ",", "$", "row", "=", "null", ")", "{", "if", "(", "is_array", "(", "$", "suffix", ")", "||", "is_object", "(", "$", "suffix", ")", ")", "{", "return", "papi_f", "(", "$", "this", "->", "html_name", "(", "$", "suffix", ",", "$", "row", ")", ")", ";", "}", "else", "{", "$", "suffix", "=", "empty", "(", "$", "suffix", ")", "||", "!", "is_string", "(", "$", "suffix", ")", "?", "''", ":", "'_'", ".", "$", "suffix", ";", "$", "suffix", "=", "papi_underscorify", "(", "papi_slugify", "(", "$", "suffix", ")", ")", ";", "}", "$", "name", "=", "$", "this", "->", "html_name", "(", ")", ";", "$", "len", "=", "strlen", "(", "$", "name", ")", ";", "if", "(", "isset", "(", "$", "name", "[", "$", "len", "-", "1", "]", ")", "&&", "$", "name", "[", "$", "len", "-", "1", "]", "===", "']'", ")", "{", "return", "papi_f", "(", "sprintf", "(", "'%s%s]'", ",", "substr", "(", "$", "name", ",", "0", ",", "$", "len", "-", "1", ")", ",", "$", "suffix", ")", ")", ";", "}", "return", "papi_f", "(", "sprintf", "(", "'%s%s'", ",", "$", "this", "->", "html_name", "(", ")", ",", "$", "suffix", ")", ")", ";", "}"], "docstring": "Get the html id attribute value.\n\n@param  object|string $suffix\n@param  int           $row\n\n@return string", "docstring_tokens": ["Get", "the", "html", "id", "attribute", "value", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/core/class-papi-core-property.php#L519-L535", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Config/Services.php", "func_name": "Services.redirectResponse", "original_string": "public static function redirectResponse(App $config = null, bool $getShared = true)\n\t{\n\t\tif ($getShared)\n\t\t{\n\t\t\treturn static::getSharedInstance('redirectResponse', $config);\n\t\t}\n\n\t\tif (! is_object($config))\n\t\t{\n\t\t\t$config = config(App::class);\n\t\t}\n\n\t\t$response = new RedirectResponse($config);\n\t\t$response->setProtocolVersion(static::request()\n\t\t\t\t\t\t\t\t\t\t  ->getProtocolVersion());\n\n\t\treturn $response;\n\t}", "language": "php", "code": "public static function redirectResponse(App $config = null, bool $getShared = true)\n\t{\n\t\tif ($getShared)\n\t\t{\n\t\t\treturn static::getSharedInstance('redirectResponse', $config);\n\t\t}\n\n\t\tif (! is_object($config))\n\t\t{\n\t\t\t$config = config(App::class);\n\t\t}\n\n\t\t$response = new RedirectResponse($config);\n\t\t$response->setProtocolVersion(static::request()\n\t\t\t\t\t\t\t\t\t\t  ->getProtocolVersion());\n\n\t\treturn $response;\n\t}", "code_tokens": ["public", "static", "function", "redirectResponse", "(", "App", "$", "config", "=", "null", ",", "bool", "$", "getShared", "=", "true", ")", "{", "if", "(", "$", "getShared", ")", "{", "return", "static", "::", "getSharedInstance", "(", "'redirectResponse'", ",", "$", "config", ")", ";", "}", "if", "(", "!", "is_object", "(", "$", "config", ")", ")", "{", "$", "config", "=", "config", "(", "App", "::", "class", ")", ";", "}", "$", "response", "=", "new", "RedirectResponse", "(", "$", "config", ")", ";", "$", "response", "->", "setProtocolVersion", "(", "static", "::", "request", "(", ")", "->", "getProtocolVersion", "(", ")", ")", ";", "return", "$", "response", ";", "}"], "docstring": "The Redirect class provides nice way of working with redirects.\n\n@param \\Config\\App $config\n@param boolean     $getShared\n\n@return \\CodeIgniter\\HTTP\\Response", "docstring_tokens": ["The", "Redirect", "class", "provides", "nice", "way", "of", "working", "with", "redirects", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Config/Services.php#L593-L610", "partition": "test"}
{"repo": "debuss/borsch-http-message", "path": "src/Http/Stream.php", "func_name": "Stream.detach", "original_string": "public function detach()\n    {\n        $previous_stream = $this->stream;\n        $this->stream = null;\n        $this->meta_data = null;\n\n        return $previous_stream;\n    }", "language": "php", "code": "public function detach()\n    {\n        $previous_stream = $this->stream;\n        $this->stream = null;\n        $this->meta_data = null;\n\n        return $previous_stream;\n    }", "code_tokens": ["public", "function", "detach", "(", ")", "{", "$", "previous_stream", "=", "$", "this", "->", "stream", ";", "$", "this", "->", "stream", "=", "null", ";", "$", "this", "->", "meta_data", "=", "null", ";", "return", "$", "previous_stream", ";", "}"], "docstring": "Separates any underlying resources from the stream.\nAfter the stream has been detached, the stream is in an unusable state.\n\n@return resource|null Underlying PHP stream, if any", "docstring_tokens": ["Separates", "any", "underlying", "resources", "from", "the", "stream", ".", "After", "the", "stream", "has", "been", "detached", "the", "stream", "is", "in", "an", "unusable", "state", "."], "sha": "b4f1ddf18221ab809bce3422c6c7337a7c233a6f", "url": "https://github.com/debuss/borsch-http-message/blob/b4f1ddf18221ab809bce3422c6c7337a7c233a6f/src/Http/Stream.php#L82-L89", "partition": "test"}
{"repo": "techdivision/import", "path": "src/SystemLoggerTrait.php", "func_name": "SystemLoggerTrait.getSystemLogger", "original_string": "public function getSystemLogger($name = LoggerKeys::SYSTEM)\n    {\n\n        // query whether or not, the requested logger is available\n        if (isset($this->systemLoggers[$name])) {\n            return $this->systemLoggers[$name];\n        }\n\n        // throw an exception if the requested logger is NOT available\n        throw new \\Exception(sprintf('The requested logger \\'%s\\' is not available', $name));\n    }", "language": "php", "code": "public function getSystemLogger($name = LoggerKeys::SYSTEM)\n    {\n\n        // query whether or not, the requested logger is available\n        if (isset($this->systemLoggers[$name])) {\n            return $this->systemLoggers[$name];\n        }\n\n        // throw an exception if the requested logger is NOT available\n        throw new \\Exception(sprintf('The requested logger \\'%s\\' is not available', $name));\n    }", "code_tokens": ["public", "function", "getSystemLogger", "(", "$", "name", "=", "LoggerKeys", "::", "SYSTEM", ")", "{", "// query whether or not, the requested logger is available", "if", "(", "isset", "(", "$", "this", "->", "systemLoggers", "[", "$", "name", "]", ")", ")", "{", "return", "$", "this", "->", "systemLoggers", "[", "$", "name", "]", ";", "}", "// throw an exception if the requested logger is NOT available", "throw", "new", "\\", "Exception", "(", "sprintf", "(", "'The requested logger \\'%s\\' is not available'", ",", "$", "name", ")", ")", ";", "}"], "docstring": "Return's the logger with the passed name, by default the system logger.\n\n@param string $name The name of the requested system logger\n\n@return \\Psr\\Log\\LoggerInterface The logger instance\n@throws \\Exception Is thrown, if the requested logger is NOT available", "docstring_tokens": ["Return", "s", "the", "logger", "with", "the", "passed", "name", "by", "default", "the", "system", "logger", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/SystemLoggerTrait.php#L52-L62", "partition": "test"}
{"repo": "marcelog/Ding", "path": "src/mg/Ding/Aspect/Proxy.php", "func_name": "Proxy.createMethod", "original_string": "protected function createMethod(\\ReflectionMethod $method)\n    {\n        $visibility = '';\n        $additional = '';\n        $name = $method->getName();\n        if ($method->isPublic()) {\n            $visibility = ' public';\n        } else if ($method->isProtected()) {\n            $visibility = ' protected';\n        } else if ($method->isPrivate()) {\n            // useless really. $visibility = ' private';\n            return '';\n        }\n        if ($method->isStatic()) {\n            // useless really. $additional .= ' static ';\n            return '';\n        }\n        //if ($method->isAbstract()) {\n            // useless really. $$additional .= ' abstract ';\n            //return '';\n        //}\n        if ($method->isConstructor()) {\n            $name = '__construct';\n        } else if ($method->isDestructor()) {\n            $name = '__destruct';\n        }\n        $args = array();\n        foreach ($method->getParameters() as $parameter) {\n            $args[] = $this->createParameter($parameter);\n        }\n\n        $src = $this->methodTemplate;\n        $src = str_replace('VISIBILITY', $visibility, $src);\n        $src = str_replace('ADDITIONAL', $additional, $src);\n        $src = str_replace('METHOD_NAME', $name, $src);\n        $src = str_replace('METHOD_ARGS', implode(',', $args), $src);\n        $src = str_replace(\n        \t'CLASS_NAME', $method->getDeclaringClass()->getName(), $src\n        );\n        return $src;\n    }", "language": "php", "code": "protected function createMethod(\\ReflectionMethod $method)\n    {\n        $visibility = '';\n        $additional = '';\n        $name = $method->getName();\n        if ($method->isPublic()) {\n            $visibility = ' public';\n        } else if ($method->isProtected()) {\n            $visibility = ' protected';\n        } else if ($method->isPrivate()) {\n            // useless really. $visibility = ' private';\n            return '';\n        }\n        if ($method->isStatic()) {\n            // useless really. $additional .= ' static ';\n            return '';\n        }\n        //if ($method->isAbstract()) {\n            // useless really. $$additional .= ' abstract ';\n            //return '';\n        //}\n        if ($method->isConstructor()) {\n            $name = '__construct';\n        } else if ($method->isDestructor()) {\n            $name = '__destruct';\n        }\n        $args = array();\n        foreach ($method->getParameters() as $parameter) {\n            $args[] = $this->createParameter($parameter);\n        }\n\n        $src = $this->methodTemplate;\n        $src = str_replace('VISIBILITY', $visibility, $src);\n        $src = str_replace('ADDITIONAL', $additional, $src);\n        $src = str_replace('METHOD_NAME', $name, $src);\n        $src = str_replace('METHOD_ARGS', implode(',', $args), $src);\n        $src = str_replace(\n        \t'CLASS_NAME', $method->getDeclaringClass()->getName(), $src\n        );\n        return $src;\n    }", "code_tokens": ["protected", "function", "createMethod", "(", "\\", "ReflectionMethod", "$", "method", ")", "{", "$", "visibility", "=", "''", ";", "$", "additional", "=", "''", ";", "$", "name", "=", "$", "method", "->", "getName", "(", ")", ";", "if", "(", "$", "method", "->", "isPublic", "(", ")", ")", "{", "$", "visibility", "=", "' public'", ";", "}", "else", "if", "(", "$", "method", "->", "isProtected", "(", ")", ")", "{", "$", "visibility", "=", "' protected'", ";", "}", "else", "if", "(", "$", "method", "->", "isPrivate", "(", ")", ")", "{", "// useless really. $visibility = ' private';", "return", "''", ";", "}", "if", "(", "$", "method", "->", "isStatic", "(", ")", ")", "{", "// useless really. $additional .= ' static ';", "return", "''", ";", "}", "//if ($method->isAbstract()) {", "// useless really. $$additional .= ' abstract ';", "//return '';", "//}", "if", "(", "$", "method", "->", "isConstructor", "(", ")", ")", "{", "$", "name", "=", "'__construct'", ";", "}", "else", "if", "(", "$", "method", "->", "isDestructor", "(", ")", ")", "{", "$", "name", "=", "'__destruct'", ";", "}", "$", "args", "=", "array", "(", ")", ";", "foreach", "(", "$", "method", "->", "getParameters", "(", ")", "as", "$", "parameter", ")", "{", "$", "args", "[", "]", "=", "$", "this", "->", "createParameter", "(", "$", "parameter", ")", ";", "}", "$", "src", "=", "$", "this", "->", "methodTemplate", ";", "$", "src", "=", "str_replace", "(", "'VISIBILITY'", ",", "$", "visibility", ",", "$", "src", ")", ";", "$", "src", "=", "str_replace", "(", "'ADDITIONAL'", ",", "$", "additional", ",", "$", "src", ")", ";", "$", "src", "=", "str_replace", "(", "'METHOD_NAME'", ",", "$", "name", ",", "$", "src", ")", ";", "$", "src", "=", "str_replace", "(", "'METHOD_ARGS'", ",", "implode", "(", "','", ",", "$", "args", ")", ",", "$", "src", ")", ";", "$", "src", "=", "str_replace", "(", "'CLASS_NAME'", ",", "$", "method", "->", "getDeclaringClass", "(", ")", "->", "getName", "(", ")", ",", "$", "src", ")", ";", "return", "$", "src", ";", "}"], "docstring": "This will return a full proxy-method source.\n\n@param \\ReflectionMethod $method The method to be proxied.\n\n@see Proxy::$methodTemplate\n\n@return string", "docstring_tokens": ["This", "will", "return", "a", "full", "proxy", "-", "method", "source", "."], "sha": "aad50c28e99509f22c9cb1ba54acbeced3b30c50", "url": "https://github.com/marcelog/Ding/blob/aad50c28e99509f22c9cb1ba54acbeced3b30c50/src/mg/Ding/Aspect/Proxy.php#L212-L252", "partition": "test"}
{"repo": "nimbly/Limber", "path": "src/Router/RouteBranch.php", "func_name": "RouteBranch.next", "original_string": "public function next(string $uriPart): RouteBranch\n    {\n        foreach( $this->branches as $key => $branch ){\n            \n            if( $uriPart === $key ){\n                return $branch;\n            }\n        }\n\n        return $this->addBranch($uriPart);\n    }", "language": "php", "code": "public function next(string $uriPart): RouteBranch\n    {\n        foreach( $this->branches as $key => $branch ){\n            \n            if( $uriPart === $key ){\n                return $branch;\n            }\n        }\n\n        return $this->addBranch($uriPart);\n    }", "code_tokens": ["public", "function", "next", "(", "string", "$", "uriPart", ")", ":", "RouteBranch", "{", "foreach", "(", "$", "this", "->", "branches", "as", "$", "key", "=>", "$", "branch", ")", "{", "if", "(", "$", "uriPart", "===", "$", "key", ")", "{", "return", "$", "branch", ";", "}", "}", "return", "$", "this", "->", "addBranch", "(", "$", "uriPart", ")", ";", "}"], "docstring": "Get the next branch or create a new one.\n\n@param string $uriPart\n@return RouteBranch", "docstring_tokens": ["Get", "the", "next", "branch", "or", "create", "a", "new", "one", "."], "sha": "f5d4656e5b6ae8da479456f3e642e38d841d7b94", "url": "https://github.com/nimbly/Limber/blob/f5d4656e5b6ae8da479456f3e642e38d841d7b94/src/Router/RouteBranch.php#L115-L125", "partition": "test"}
{"repo": "php-school/cli-menu", "path": "src/MenuItem/SplitItem.php", "func_name": "SplitItem.canSelectIndex", "original_string": "public function canSelectIndex(int $index) : bool\n    {\n        return isset($this->items[$index]) && $this->items[$index]->canSelect();\n    }", "language": "php", "code": "public function canSelectIndex(int $index) : bool\n    {\n        return isset($this->items[$index]) && $this->items[$index]->canSelect();\n    }", "code_tokens": ["public", "function", "canSelectIndex", "(", "int", "$", "index", ")", ":", "bool", "{", "return", "isset", "(", "$", "this", "->", "items", "[", "$", "index", "]", ")", "&&", "$", "this", "->", "items", "[", "$", "index", "]", "->", "canSelect", "(", ")", ";", "}"], "docstring": "Is there an item with this index and can it be\nselected?", "docstring_tokens": ["Is", "there", "an", "item", "with", "this", "index", "and", "can", "it", "be", "selected?"], "sha": "2b24d576338c5add84c9515a766c6d12337ff2b8", "url": "https://github.com/php-school/cli-menu/blob/2b24d576338c5add84c9515a766c6d12337ff2b8/src/MenuItem/SplitItem.php#L219-L222", "partition": "test"}
{"repo": "thephpleague/omnipay-paypal", "path": "src/Message/RestAuthorizeRequest.php", "func_name": "RestAuthorizeRequest.getDescription", "original_string": "public function getDescription()\n    {\n        $id = $this->getTransactionId();\n        $desc = parent::getDescription();\n\n        if (empty($id)) {\n            return $desc;\n        } elseif (empty($desc)) {\n            return $id;\n        } else {\n            return \"$id : $desc\";\n        }\n    }", "language": "php", "code": "public function getDescription()\n    {\n        $id = $this->getTransactionId();\n        $desc = parent::getDescription();\n\n        if (empty($id)) {\n            return $desc;\n        } elseif (empty($desc)) {\n            return $id;\n        } else {\n            return \"$id : $desc\";\n        }\n    }", "code_tokens": ["public", "function", "getDescription", "(", ")", "{", "$", "id", "=", "$", "this", "->", "getTransactionId", "(", ")", ";", "$", "desc", "=", "parent", "::", "getDescription", "(", ")", ";", "if", "(", "empty", "(", "$", "id", ")", ")", "{", "return", "$", "desc", ";", "}", "elseif", "(", "empty", "(", "$", "desc", ")", ")", "{", "return", "$", "id", ";", "}", "else", "{", "return", "\"$id : $desc\"", ";", "}", "}"], "docstring": "Get transaction description.\n\nThe REST API does not currently have support for passing an invoice number\nor transaction ID.\n\n@return string", "docstring_tokens": ["Get", "transaction", "description", "."], "sha": "b500e0b17648958414df88e6cbc32cc2b341f1c2", "url": "https://github.com/thephpleague/omnipay-paypal/blob/b500e0b17648958414df88e6cbc32cc2b341f1c2/src/Message/RestAuthorizeRequest.php#L336-L348", "partition": "test"}
{"repo": "Kuestenschmiede/CoreBundle", "path": "Resources/contao/classes/container/C4GContainer.php", "func_name": "C4GContainer.addContainersFromArray", "original_string": "public function addContainersFromArray(array $array) {\n        foreach ($array as $value) {\n            $container = new C4GContainer();\n            foreach ($value as $k => $v) {\n                $container->addElement($v, $k);\n            }\n            $this->addElement($container);\n        }\n    }", "language": "php", "code": "public function addContainersFromArray(array $array) {\n        foreach ($array as $value) {\n            $container = new C4GContainer();\n            foreach ($value as $k => $v) {\n                $container->addElement($v, $k);\n            }\n            $this->addElement($container);\n        }\n    }", "code_tokens": ["public", "function", "addContainersFromArray", "(", "array", "$", "array", ")", "{", "foreach", "(", "$", "array", "as", "$", "value", ")", "{", "$", "container", "=", "new", "C4GContainer", "(", ")", ";", "foreach", "(", "$", "value", "as", "$", "k", "=>", "$", "v", ")", "{", "$", "container", "->", "addElement", "(", "$", "v", ",", "$", "k", ")", ";", "}", "$", "this", "->", "addElement", "(", "$", "container", ")", ";", "}", "}"], "docstring": "Add a two-dimensional array to the container, where every outer array element becomes a container\nand every inner array element becomes an element of the corresponding container.\n@param array $array\n@throws \\Exception", "docstring_tokens": ["Add", "a", "two", "-", "dimensional", "array", "to", "the", "container", "where", "every", "outer", "array", "element", "becomes", "a", "container", "and", "every", "inner", "array", "element", "becomes", "an", "element", "of", "the", "corresponding", "container", "."], "sha": "f8a9044369df8f45dd07bdf25d02119042ac5bc4", "url": "https://github.com/Kuestenschmiede/CoreBundle/blob/f8a9044369df8f45dd07bdf25d02119042ac5bc4/Resources/contao/classes/container/C4GContainer.php#L53-L61", "partition": "test"}
{"repo": "helionogueir/shell", "path": "core/output/Trace.class.php", "func_name": "Trace.display", "original_string": "public final function display(string $text, int $tab = 0, string $highlighter = \"*\") {\n    $_tab = null;\n    for ($index = 0; $index < $tab; $index++) {\n      $_tab .= $this->tabSpace;\n    }\n    echo(\"(\" . Date(\"Y-m-d H:i:s\") . \") | {$_tab}{$highlighter} {$text}\" . PHP_EOL);\n    return null;\n  }", "language": "php", "code": "public final function display(string $text, int $tab = 0, string $highlighter = \"*\") {\n    $_tab = null;\n    for ($index = 0; $index < $tab; $index++) {\n      $_tab .= $this->tabSpace;\n    }\n    echo(\"(\" . Date(\"Y-m-d H:i:s\") . \") | {$_tab}{$highlighter} {$text}\" . PHP_EOL);\n    return null;\n  }", "code_tokens": ["public", "final", "function", "display", "(", "string", "$", "text", ",", "int", "$", "tab", "=", "0", ",", "string", "$", "highlighter", "=", "\"*\"", ")", "{", "$", "_tab", "=", "null", ";", "for", "(", "$", "index", "=", "0", ";", "$", "index", "<", "$", "tab", ";", "$", "index", "++", ")", "{", "$", "_tab", ".=", "$", "this", "->", "tabSpace", ";", "}", "echo", "(", "\"(\"", ".", "Date", "(", "\"Y-m-d H:i:s\"", ")", ".", "\") | {$_tab}{$highlighter} {$text}\"", ".", "PHP_EOL", ")", ";", "return", "null", ";", "}"], "docstring": "- Print display trace data in shell\n@param string $text Text show in display\n@param int $tab Nivel tab\n@return null", "docstring_tokens": ["-", "Print", "display", "trace", "data", "in", "shell"], "sha": "208d38d0d1ba046aedb7ca6608c66f8f4d2994b2", "url": "https://github.com/helionogueir/shell/blob/208d38d0d1ba046aedb7ca6608c66f8f4d2994b2/core/output/Trace.class.php#L26-L33", "partition": "test"}
{"repo": "tastyigniter/flame", "path": "src/Pagic/Concerns/HasEvents.php", "func_name": "HasEvents.registerModelEvent", "original_string": "protected static function registerModelEvent($event, $callback, $priority = 0)\n    {\n        if (isset(static::$dispatcher)) {\n            $name = static::class;\n\n            static::$dispatcher->listen(\"eloquent.{$event}: {$name}\", $callback, $priority);\n        }\n    }", "language": "php", "code": "protected static function registerModelEvent($event, $callback, $priority = 0)\n    {\n        if (isset(static::$dispatcher)) {\n            $name = static::class;\n\n            static::$dispatcher->listen(\"eloquent.{$event}: {$name}\", $callback, $priority);\n        }\n    }", "code_tokens": ["protected", "static", "function", "registerModelEvent", "(", "$", "event", ",", "$", "callback", ",", "$", "priority", "=", "0", ")", "{", "if", "(", "isset", "(", "static", "::", "$", "dispatcher", ")", ")", "{", "$", "name", "=", "static", "::", "class", ";", "static", "::", "$", "dispatcher", "->", "listen", "(", "\"eloquent.{$event}: {$name}\"", ",", "$", "callback", ",", "$", "priority", ")", ";", "}", "}"], "docstring": "Register a model event with the dispatcher.\n\n@param  string $event\n@param  \\Closure|string $callback\n@param  int $priority\n\n@return void", "docstring_tokens": ["Register", "a", "model", "event", "with", "the", "dispatcher", "."], "sha": "3c922ba1c02b3c14ad4adf91c2f37498045fa92a", "url": "https://github.com/tastyigniter/flame/blob/3c922ba1c02b3c14ad4adf91c2f37498045fa92a/src/Pagic/Concerns/HasEvents.php#L118-L125", "partition": "test"}
{"repo": "juliangut/doctrine-base-repositories", "path": "src/RepositoryTrait.php", "func_name": "RepositoryTrait.removeOneBy", "original_string": "public function removeOneBy(array $criteria, bool $flush = false)\n    {\n        $this->runManagerAction('remove', $this->findOneBy($criteria), $flush);\n    }", "language": "php", "code": "public function removeOneBy(array $criteria, bool $flush = false)\n    {\n        $this->runManagerAction('remove', $this->findOneBy($criteria), $flush);\n    }", "code_tokens": ["public", "function", "removeOneBy", "(", "array", "$", "criteria", ",", "bool", "$", "flush", "=", "false", ")", "{", "$", "this", "->", "runManagerAction", "(", "'remove'", ",", "$", "this", "->", "findOneBy", "(", "$", "criteria", ")", ",", "$", "flush", ")", ";", "}"], "docstring": "Remove first object filtered by a set of criteria.\n\n@param array $criteria\n@param bool  $flush", "docstring_tokens": ["Remove", "first", "object", "filtered", "by", "a", "set", "of", "criteria", "."], "sha": "3eb661fa8f1296512c2cbb683de7995724509cb7", "url": "https://github.com/juliangut/doctrine-base-repositories/blob/3eb661fa8f1296512c2cbb683de7995724509cb7/src/RepositoryTrait.php#L250-L253", "partition": "test"}
{"repo": "imkrimerman/primitive", "path": "src/Primitive/Container/Container.php", "func_name": "Container.restAfterKey", "original_string": "public function restAfterKey($key)\n    {\n        $key = $this->getKey($key);\n\n        if ( ! array_key_exists($key, $this->items))\n        {\n            throw new OffsetNotExistsException('Key: '. $key .' not exists');\n        }\n\n        $index = $this->keys()->flip()->get($key);\n\n        return $this->restAfterIndex($index);\n    }", "language": "php", "code": "public function restAfterKey($key)\n    {\n        $key = $this->getKey($key);\n\n        if ( ! array_key_exists($key, $this->items))\n        {\n            throw new OffsetNotExistsException('Key: '. $key .' not exists');\n        }\n\n        $index = $this->keys()->flip()->get($key);\n\n        return $this->restAfterIndex($index);\n    }", "code_tokens": ["public", "function", "restAfterKey", "(", "$", "key", ")", "{", "$", "key", "=", "$", "this", "->", "getKey", "(", "$", "key", ")", ";", "if", "(", "!", "array_key_exists", "(", "$", "key", ",", "$", "this", "->", "items", ")", ")", "{", "throw", "new", "OffsetNotExistsException", "(", "'Key: '", ".", "$", "key", ".", "' not exists'", ")", ";", "}", "$", "index", "=", "$", "this", "->", "keys", "(", ")", "->", "flip", "(", ")", "->", "get", "(", "$", "key", ")", ";", "return", "$", "this", "->", "restAfterIndex", "(", "$", "index", ")", ";", "}"], "docstring": "Return rest items after given key.\n\n@param mixed $key\n@return \\im\\Primitive\\Container\\Container\n@throws \\im\\Primitive\\Container\\Exceptions\\ContainerException\n@throws \\im\\Primitive\\Support\\Exceptions\\OffsetNotExistsException", "docstring_tokens": ["Return", "rest", "items", "after", "given", "key", "."], "sha": "bdb45bb5109ca07f116cce571b76804e47ac5d56", "url": "https://github.com/imkrimerman/primitive/blob/bdb45bb5109ca07f116cce571b76804e47ac5d56/src/Primitive/Container/Container.php#L995-L1007", "partition": "test"}
{"repo": "AeonDigital/PHP-DataModel", "path": "src/Abstracts/aField.php", "func_name": "aField.setValue", "original_string": "public function setValue($v) : bool\n    {\n        $iPS = $this->internal_ProccessSet($v);\n\n        if ($iPS[\"canSet\"] === true) {\n            $this->value                        = $iPS[\"value\"];\n            $this->rawValue                     = $iPS[\"rawValue\"];\n            $this->fieldState_IsValid           = $iPS[\"valid\"];\n            $this->fieldState_CurrentState      = $iPS[\"state\"];\n            $this->fieldState_CollectionState   = $iPS[\"cState\"];\n        } \n        $this->fieldState_ValidateState             = $iPS[\"state\"];\n        $this->fieldState_ValidateStateCanSet       = $iPS[\"canSet\"];\n        $this->fieldState_CollectionValidateState   = $iPS[\"cState\"];\n\n        return ($iPS[\"canSet\"] === true && $iPS[\"valid\"] === true);\n    }", "language": "php", "code": "public function setValue($v) : bool\n    {\n        $iPS = $this->internal_ProccessSet($v);\n\n        if ($iPS[\"canSet\"] === true) {\n            $this->value                        = $iPS[\"value\"];\n            $this->rawValue                     = $iPS[\"rawValue\"];\n            $this->fieldState_IsValid           = $iPS[\"valid\"];\n            $this->fieldState_CurrentState      = $iPS[\"state\"];\n            $this->fieldState_CollectionState   = $iPS[\"cState\"];\n        } \n        $this->fieldState_ValidateState             = $iPS[\"state\"];\n        $this->fieldState_ValidateStateCanSet       = $iPS[\"canSet\"];\n        $this->fieldState_CollectionValidateState   = $iPS[\"cState\"];\n\n        return ($iPS[\"canSet\"] === true && $iPS[\"valid\"] === true);\n    }", "code_tokens": ["public", "function", "setValue", "(", "$", "v", ")", ":", "bool", "{", "$", "iPS", "=", "$", "this", "->", "internal_ProccessSet", "(", "$", "v", ")", ";", "if", "(", "$", "iPS", "[", "\"canSet\"", "]", "===", "true", ")", "{", "$", "this", "->", "value", "=", "$", "iPS", "[", "\"value\"", "]", ";", "$", "this", "->", "rawValue", "=", "$", "iPS", "[", "\"rawValue\"", "]", ";", "$", "this", "->", "fieldState_IsValid", "=", "$", "iPS", "[", "\"valid\"", "]", ";", "$", "this", "->", "fieldState_CurrentState", "=", "$", "iPS", "[", "\"state\"", "]", ";", "$", "this", "->", "fieldState_CollectionState", "=", "$", "iPS", "[", "\"cState\"", "]", ";", "}", "$", "this", "->", "fieldState_ValidateState", "=", "$", "iPS", "[", "\"state\"", "]", ";", "$", "this", "->", "fieldState_ValidateStateCanSet", "=", "$", "iPS", "[", "\"canSet\"", "]", ";", "$", "this", "->", "fieldState_CollectionValidateState", "=", "$", "iPS", "[", "\"cState\"", "]", ";", "return", "(", "$", "iPS", "[", "\"canSet\"", "]", "===", "true", "&&", "$", "iPS", "[", "\"valid\"", "]", "===", "true", ")", ";", "}"], "docstring": "Define um novo valor para este campo.\n\n- Campos Simples\nPara que o campo assuma o novo valor ele precisa ser\ncompat\u00edvel com o \"type\" definido. Caso contr\u00e1rio o campo\nficar\u00e1 com o valor \"null\".\n\n-- Valores esperados\nnull, Bool, Int, Float, RealNumber, DateTime, String\n\n\n- Campos \"reference\"\nCampos deste tipo apenas aceitar\u00e3o valores capazes de preencher os\ncampos do modelo de dados ao qual eles se referenciam.\nIndependente de tornar o modelo de dados v\u00e1lido ou n\u00e3o, os valores\nser\u00e3o definidos exceto se o valor passado for incompat\u00edvel com o\nmodelo de dados configurado.\n\n-- Valores esperados\nnull, iterable, Array, iModel,\n\n\n- Campos \"collection\"\nUma cole\u00e7\u00e3o de dados sempre ser\u00e1 definida como o valor de\num campo que aceite este tipo de valor.\nOs membros da cole\u00e7\u00e3o ser\u00e3o convertidos para o tipo \"type\"\ndefinido. Membros que n\u00e3o possam ser convertidos ser\u00e3o substituidos\npor \"null\" e a cole\u00e7\u00e3o ser\u00e1 inv\u00e1lida at\u00e9 que estes membros sejam\nremovidos ou substitu\u00eddos.\n\nCole\u00e7\u00f5es do tipo \"reference\" apenas ser\u00e3o redefinidos se TODOS seus\nitens forem capazes de tornarem-se objetos \"iModel\" do tipo definido\npara este campo.\n\n-- Valores esperados\nnull, Array\n\n\n- Estado e valida\u00e7\u00e3o\n-- Independente de o valor vir a ser efetivamente definido para o campo\no estado da valida\u00e7\u00e3o pode ser verificado usando \"getLastValidateState\".\n\n-- Uma vez que o valor seja definido o campo passa a assumir o estado herdado\nda valida\u00e7\u00e3o e poder\u00e1 ser verificado em \"getState\".\n\n\n- undefined\nEste valor NUNCA ser\u00e1 aceito por nenhum tipo de campo e em\nqualquer circunst\u00e2ncia.\n\n\n@param       mixed $v\nValor a ser definido para o campo.\n\n@return      bool\nRetornar\u00e1 \"true\" se o valor tornou o campo v\u00e1lido\nou \"false\" caso agora ele esteja inv\u00e1lido.\nTamb\u00e9m retornar\u00e1 \"false\" caso o valor seja totalmente\nincompat\u00edvel com o campo.", "docstring_tokens": ["Define", "um", "novo", "valor", "para", "este", "campo", "."], "sha": "57d546000b5628667f16eb7d3e55ac38ac67c61e", "url": "https://github.com/AeonDigital/PHP-DataModel/blob/57d546000b5628667f16eb7d3e55ac38ac67c61e/src/Abstracts/aField.php#L1773-L1789", "partition": "test"}
{"repo": "activecollab/databaseobject", "path": "src/Entity/Entity.php", "func_name": "Entity.loadFromRow", "original_string": "public function loadFromRow(array $row)\n    {\n        if (empty($row)) {\n            throw new InvalidArgumentException('Database row expected');\n        }\n\n        $this->startLoading();\n\n        $found_generated_fields = [];\n\n        foreach ($row as $k => $v) {\n            if ($this->isGeneratedField($k)) {\n                $found_generated_fields[] = $k;\n            } elseif ($this->fieldExists($k)) {\n                $this->setFieldValue($k, $v);\n            }\n        }\n\n        if (!empty($found_generated_fields)) {\n            $generated_field_values = [];\n\n            $value_caster = $this->getGeneratedFieldsValueCaster();\n\n            if ($value_caster instanceof ValueCasterInterface) {\n                $generated_field_values = array_intersect_key($row, array_flip($found_generated_fields));\n\n                $value_caster->castRowValues($generated_field_values);\n            }\n\n            foreach ($generated_field_values as $k => $v) {\n                $this->setFieldValue($k, $v);\n            }\n        }\n\n        $this->doneLoading();\n    }", "language": "php", "code": "public function loadFromRow(array $row)\n    {\n        if (empty($row)) {\n            throw new InvalidArgumentException('Database row expected');\n        }\n\n        $this->startLoading();\n\n        $found_generated_fields = [];\n\n        foreach ($row as $k => $v) {\n            if ($this->isGeneratedField($k)) {\n                $found_generated_fields[] = $k;\n            } elseif ($this->fieldExists($k)) {\n                $this->setFieldValue($k, $v);\n            }\n        }\n\n        if (!empty($found_generated_fields)) {\n            $generated_field_values = [];\n\n            $value_caster = $this->getGeneratedFieldsValueCaster();\n\n            if ($value_caster instanceof ValueCasterInterface) {\n                $generated_field_values = array_intersect_key($row, array_flip($found_generated_fields));\n\n                $value_caster->castRowValues($generated_field_values);\n            }\n\n            foreach ($generated_field_values as $k => $v) {\n                $this->setFieldValue($k, $v);\n            }\n        }\n\n        $this->doneLoading();\n    }", "code_tokens": ["public", "function", "loadFromRow", "(", "array", "$", "row", ")", "{", "if", "(", "empty", "(", "$", "row", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Database row expected'", ")", ";", "}", "$", "this", "->", "startLoading", "(", ")", ";", "$", "found_generated_fields", "=", "[", "]", ";", "foreach", "(", "$", "row", "as", "$", "k", "=>", "$", "v", ")", "{", "if", "(", "$", "this", "->", "isGeneratedField", "(", "$", "k", ")", ")", "{", "$", "found_generated_fields", "[", "]", "=", "$", "k", ";", "}", "elseif", "(", "$", "this", "->", "fieldExists", "(", "$", "k", ")", ")", "{", "$", "this", "->", "setFieldValue", "(", "$", "k", ",", "$", "v", ")", ";", "}", "}", "if", "(", "!", "empty", "(", "$", "found_generated_fields", ")", ")", "{", "$", "generated_field_values", "=", "[", "]", ";", "$", "value_caster", "=", "$", "this", "->", "getGeneratedFieldsValueCaster", "(", ")", ";", "if", "(", "$", "value_caster", "instanceof", "ValueCasterInterface", ")", "{", "$", "generated_field_values", "=", "array_intersect_key", "(", "$", "row", ",", "array_flip", "(", "$", "found_generated_fields", ")", ")", ";", "$", "value_caster", "->", "castRowValues", "(", "$", "generated_field_values", ")", ";", "}", "foreach", "(", "$", "generated_field_values", "as", "$", "k", "=>", "$", "v", ")", "{", "$", "this", "->", "setFieldValue", "(", "$", "k", ",", "$", "v", ")", ";", "}", "}", "$", "this", "->", "doneLoading", "(", ")", ";", "}"], "docstring": "Load data from database row.\n\nIf $cache_row is set to true row data will be added to cache\n\n@param  array                    $row\n@throws InvalidArgumentException", "docstring_tokens": ["Load", "data", "from", "database", "row", "."], "sha": "93ebbc26fdcd82e8effa15fea46432dafbfa5e83", "url": "https://github.com/activecollab/databaseobject/blob/93ebbc26fdcd82e8effa15fea46432dafbfa5e83/src/Entity/Entity.php#L261-L296", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/DirCache.php", "func_name": "DirCache.subPath", "original_string": "protected function subPath(string $primary_key, $sub_key = null, array $args = []): string\n    {\n        if (!isset($sub_key)) {\n            if (empty($args['preserve_keys'])) {\n                extract($this->sha1Keys($primary_key, null, $args));\n            }\n            return $sub_path = $primary_key;\n        } else {\n            if (empty($args['preserve_keys'])) {\n                extract($this->sha1Keys($primary_key, $sub_key, $args));\n            }\n            $shard_id        = $this->c::sha1ModShardId($primary_key.$sub_key);\n            return $sub_path = $primary_key.'/'.$shard_id.'/'.$sub_key;\n        }\n    }", "language": "php", "code": "protected function subPath(string $primary_key, $sub_key = null, array $args = []): string\n    {\n        if (!isset($sub_key)) {\n            if (empty($args['preserve_keys'])) {\n                extract($this->sha1Keys($primary_key, null, $args));\n            }\n            return $sub_path = $primary_key;\n        } else {\n            if (empty($args['preserve_keys'])) {\n                extract($this->sha1Keys($primary_key, $sub_key, $args));\n            }\n            $shard_id        = $this->c::sha1ModShardId($primary_key.$sub_key);\n            return $sub_path = $primary_key.'/'.$shard_id.'/'.$sub_key;\n        }\n    }", "code_tokens": ["protected", "function", "subPath", "(", "string", "$", "primary_key", ",", "$", "sub_key", "=", "null", ",", "array", "$", "args", "=", "[", "]", ")", ":", "string", "{", "if", "(", "!", "isset", "(", "$", "sub_key", ")", ")", "{", "if", "(", "empty", "(", "$", "args", "[", "'preserve_keys'", "]", ")", ")", "{", "extract", "(", "$", "this", "->", "sha1Keys", "(", "$", "primary_key", ",", "null", ",", "$", "args", ")", ")", ";", "}", "return", "$", "sub_path", "=", "$", "primary_key", ";", "}", "else", "{", "if", "(", "empty", "(", "$", "args", "[", "'preserve_keys'", "]", ")", ")", "{", "extract", "(", "$", "this", "->", "sha1Keys", "(", "$", "primary_key", ",", "$", "sub_key", ",", "$", "args", ")", ")", ";", "}", "$", "shard_id", "=", "$", "this", "->", "c", "::", "sha1ModShardId", "(", "$", "primary_key", ".", "$", "sub_key", ")", ";", "return", "$", "sub_path", "=", "$", "primary_key", ".", "'/'", ".", "$", "shard_id", ".", "'/'", ".", "$", "sub_key", ";", "}", "}"], "docstring": "Key sub-path.\n\n@since 170824.30708 Dir cache utils.\n\n@param string          $primary_key Primary key.\n@param string|int|null $sub_key     Sub-key to get.\n@param array           $args        Any behavioral args.\n\n@return string Key sub-path.", "docstring_tokens": ["Key", "sub", "-", "path", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/DirCache.php#L191-L205", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Query/FluentQuery.php", "func_name": "FluentQuery.where_meta", "original_string": "public function where_meta( $query, MetaTable $table = null, $meta_type = '' ) {\n\n\t\tif ( ! $table && $this->model && method_exists( $this->model, 'get_meta_table' ) ) {\n\t\t\t$table = call_user_func( array( $this->model, 'get_meta_table' ) );\n\t\t}\n\n\t\tif ( ! $meta_type && $this->model && method_exists( $this->model, 'get_meta_type' ) ) {\n\t\t\t$meta_type = call_user_func( array( $this->model, 'get_meta_type' ) );\n\t\t}\n\n\t\tif ( ! $table ) {\n\t\t\tthrow new \\InvalidArgumentException( \"MetaTable can't be determined from the given arguments.\" );\n\t\t}\n\n\t\tif ( ! $meta_type ) {\n\t\t\tthrow new \\InvalidArgumentException( \"\\$meta_type can't be determined from the given arguments.\" );\n\t\t}\n\n\t\tif ( ! $query instanceof \\WP_Meta_Query ) {\n\t\t\t$query = new \\WP_Meta_Query( $query );\n\t\t}\n\n\t\t$fn = function ( $key, $original ) use ( $table, $meta_type ) {\n\n\t\t\tif ( $original === $meta_type . '_id' ) {\n\t\t\t\t$key = $table->get_primary_id_column();\n\t\t\t}\n\n\t\t\treturn $key;\n\t\t};\n\n\t\tadd_filter( 'sanitize_key', $fn, 10, 2 );\n\n\t\t$sql = $query->get_sql(\n\t\t\t$meta_type,\n\t\t\t$this->alias,\n\t\t\t$this->table->get_primary_key()\n\t\t);\n\n\t\tremove_filter( 'sanitize_key', $fn, 10 );\n\n\t\t$this->meta_join = $sql['join'];\n\n\t\t$where = $sql['where'];\n\t\t$where = preg_replace( '/^\\sAND\\s/', '', $where );\n\n\t\tif ( $this->where ) {\n\t\t\t$this->where->qAnd( new Where_Raw( $where ) );\n\t\t} else {\n\t\t\t$this->where = new Where_Raw( $where );\n\t\t}\n\n\t\treturn $this;\n\t}", "language": "php", "code": "public function where_meta( $query, MetaTable $table = null, $meta_type = '' ) {\n\n\t\tif ( ! $table && $this->model && method_exists( $this->model, 'get_meta_table' ) ) {\n\t\t\t$table = call_user_func( array( $this->model, 'get_meta_table' ) );\n\t\t}\n\n\t\tif ( ! $meta_type && $this->model && method_exists( $this->model, 'get_meta_type' ) ) {\n\t\t\t$meta_type = call_user_func( array( $this->model, 'get_meta_type' ) );\n\t\t}\n\n\t\tif ( ! $table ) {\n\t\t\tthrow new \\InvalidArgumentException( \"MetaTable can't be determined from the given arguments.\" );\n\t\t}\n\n\t\tif ( ! $meta_type ) {\n\t\t\tthrow new \\InvalidArgumentException( \"\\$meta_type can't be determined from the given arguments.\" );\n\t\t}\n\n\t\tif ( ! $query instanceof \\WP_Meta_Query ) {\n\t\t\t$query = new \\WP_Meta_Query( $query );\n\t\t}\n\n\t\t$fn = function ( $key, $original ) use ( $table, $meta_type ) {\n\n\t\t\tif ( $original === $meta_type . '_id' ) {\n\t\t\t\t$key = $table->get_primary_id_column();\n\t\t\t}\n\n\t\t\treturn $key;\n\t\t};\n\n\t\tadd_filter( 'sanitize_key', $fn, 10, 2 );\n\n\t\t$sql = $query->get_sql(\n\t\t\t$meta_type,\n\t\t\t$this->alias,\n\t\t\t$this->table->get_primary_key()\n\t\t);\n\n\t\tremove_filter( 'sanitize_key', $fn, 10 );\n\n\t\t$this->meta_join = $sql['join'];\n\n\t\t$where = $sql['where'];\n\t\t$where = preg_replace( '/^\\sAND\\s/', '', $where );\n\n\t\tif ( $this->where ) {\n\t\t\t$this->where->qAnd( new Where_Raw( $where ) );\n\t\t} else {\n\t\t\t$this->where = new Where_Raw( $where );\n\t\t}\n\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "where_meta", "(", "$", "query", ",", "MetaTable", "$", "table", "=", "null", ",", "$", "meta_type", "=", "''", ")", "{", "if", "(", "!", "$", "table", "&&", "$", "this", "->", "model", "&&", "method_exists", "(", "$", "this", "->", "model", ",", "'get_meta_table'", ")", ")", "{", "$", "table", "=", "call_user_func", "(", "array", "(", "$", "this", "->", "model", ",", "'get_meta_table'", ")", ")", ";", "}", "if", "(", "!", "$", "meta_type", "&&", "$", "this", "->", "model", "&&", "method_exists", "(", "$", "this", "->", "model", ",", "'get_meta_type'", ")", ")", "{", "$", "meta_type", "=", "call_user_func", "(", "array", "(", "$", "this", "->", "model", ",", "'get_meta_type'", ")", ")", ";", "}", "if", "(", "!", "$", "table", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"MetaTable can't be determined from the given arguments.\"", ")", ";", "}", "if", "(", "!", "$", "meta_type", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"\\$meta_type can't be determined from the given arguments.\"", ")", ";", "}", "if", "(", "!", "$", "query", "instanceof", "\\", "WP_Meta_Query", ")", "{", "$", "query", "=", "new", "\\", "WP_Meta_Query", "(", "$", "query", ")", ";", "}", "$", "fn", "=", "function", "(", "$", "key", ",", "$", "original", ")", "use", "(", "$", "table", ",", "$", "meta_type", ")", "{", "if", "(", "$", "original", "===", "$", "meta_type", ".", "'_id'", ")", "{", "$", "key", "=", "$", "table", "->", "get_primary_id_column", "(", ")", ";", "}", "return", "$", "key", ";", "}", ";", "add_filter", "(", "'sanitize_key'", ",", "$", "fn", ",", "10", ",", "2", ")", ";", "$", "sql", "=", "$", "query", "->", "get_sql", "(", "$", "meta_type", ",", "$", "this", "->", "alias", ",", "$", "this", "->", "table", "->", "get_primary_key", "(", ")", ")", ";", "remove_filter", "(", "'sanitize_key'", ",", "$", "fn", ",", "10", ")", ";", "$", "this", "->", "meta_join", "=", "$", "sql", "[", "'join'", "]", ";", "$", "where", "=", "$", "sql", "[", "'where'", "]", ";", "$", "where", "=", "preg_replace", "(", "'/^\\sAND\\s/'", ",", "''", ",", "$", "where", ")", ";", "if", "(", "$", "this", "->", "where", ")", "{", "$", "this", "->", "where", "->", "qAnd", "(", "new", "Where_Raw", "(", "$", "where", ")", ")", ";", "}", "else", "{", "$", "this", "->", "where", "=", "new", "Where_Raw", "(", "$", "where", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Perform a meta query.\n\n@since 2.0\n\n@param array|\\WP_Meta_Query $query\n@param MetaTable|null       $table     Table metadata is stored in. If not specified, will be retrieved from the\nmodel.\n@param string               $meta_type Type of metadata. Will be determined from the model if not given.\n\n@return $this\n\n@throws \\InvalidArgumentException If a MetaTable or $meta_type can't be determined.", "docstring_tokens": ["Perform", "a", "meta", "query", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Query/FluentQuery.php#L514-L567", "partition": "test"}
{"repo": "oxygen-cms/data", "path": "src/Repository/Doctrine/Repository.php", "func_name": "Repository.columns", "original_string": "public function columns(array $fields, QueryParameters $queryParameters = null) {\n        $select = '';\n        foreach($fields as $field) {\n            $select .= 'o.' . $field;\n            if($field !== last($fields)) {\n                $select .= ', ';\n            }\n        }\n        $qb = $this->entities->createQueryBuilder()\n            ->select($select)\n            ->from($this->entityName, 'o');\n\n        return $this->getQuery($qb, $queryParameters)->getResult();\n    }", "language": "php", "code": "public function columns(array $fields, QueryParameters $queryParameters = null) {\n        $select = '';\n        foreach($fields as $field) {\n            $select .= 'o.' . $field;\n            if($field !== last($fields)) {\n                $select .= ', ';\n            }\n        }\n        $qb = $this->entities->createQueryBuilder()\n            ->select($select)\n            ->from($this->entityName, 'o');\n\n        return $this->getQuery($qb, $queryParameters)->getResult();\n    }", "code_tokens": ["public", "function", "columns", "(", "array", "$", "fields", ",", "QueryParameters", "$", "queryParameters", "=", "null", ")", "{", "$", "select", "=", "''", ";", "foreach", "(", "$", "fields", "as", "$", "field", ")", "{", "$", "select", ".=", "'o.'", ".", "$", "field", ";", "if", "(", "$", "field", "!==", "last", "(", "$", "fields", ")", ")", "{", "$", "select", ".=", "', '", ";", "}", "}", "$", "qb", "=", "$", "this", "->", "entities", "->", "createQueryBuilder", "(", ")", "->", "select", "(", "$", "select", ")", "->", "from", "(", "$", "this", "->", "entityName", ",", "'o'", ")", ";", "return", "$", "this", "->", "getQuery", "(", "$", "qb", ",", "$", "queryParameters", ")", "->", "getResult", "(", ")", ";", "}"], "docstring": "Retrieves certain columns of entities.\n\n@param array           $fields\n@param QueryParameters $queryParameters an optional array of query scopes\n@return mixed", "docstring_tokens": ["Retrieves", "certain", "columns", "of", "entities", "."], "sha": "8783d4dee75805a9dcbdcf932e12328ee0224865", "url": "https://github.com/oxygen-cms/data/blob/8783d4dee75805a9dcbdcf932e12328ee0224865/src/Repository/Doctrine/Repository.php#L74-L87", "partition": "test"}
{"repo": "ipinfo/php", "path": "src/IPinfo.php", "func_name": "IPinfo.getDetails", "original_string": "public function getDetails($ip_address = null)\n    {\n        $response_details = $this->getRequestDetails((string) $ip_address);\n\n        return $this->formatDetailsObject($response_details);\n    }", "language": "php", "code": "public function getDetails($ip_address = null)\n    {\n        $response_details = $this->getRequestDetails((string) $ip_address);\n\n        return $this->formatDetailsObject($response_details);\n    }", "code_tokens": ["public", "function", "getDetails", "(", "$", "ip_address", "=", "null", ")", "{", "$", "response_details", "=", "$", "this", "->", "getRequestDetails", "(", "(", "string", ")", "$", "ip_address", ")", ";", "return", "$", "this", "->", "formatDetailsObject", "(", "$", "response_details", ")", ";", "}"], "docstring": "Get formatted details for an IP address.\n@param  string|null $ip_address IP address to look up.\n@return Details Formatted IPinfo data.\n@throws IPinfoException", "docstring_tokens": ["Get", "formatted", "details", "for", "an", "IP", "address", "."], "sha": "87e5b3e059246bd8c241b006c0e7354d2beef5cd", "url": "https://github.com/ipinfo/php/blob/87e5b3e059246bd8c241b006c0e7354d2beef5cd/src/IPinfo.php#L52-L57", "partition": "test"}
{"repo": "invite-networks/cisco-wsapi", "path": "Request/XcdrRequest.php", "func_name": "XcdrRequest.NotifyXcdrRecord", "original_string": "public function NotifyXcdrRecord($msgHeader, $format, $type, $cdr)\n    {\n        $this->msgHeader = $msgHeader;\n        $this->registrationID = $msgHeader->registrationID;\n        $this->transactionID = $msgHeader->transactionID;\n        $this->cdrFormat = $format;\n        $this->cdrType = $type;\n        $this->cdrRecord = $cdr;\n\n        $response = $this->listener->processRecord($this, null);\n\n        if (!$this->isValid()) return;\n        return $response;\n    }", "language": "php", "code": "public function NotifyXcdrRecord($msgHeader, $format, $type, $cdr)\n    {\n        $this->msgHeader = $msgHeader;\n        $this->registrationID = $msgHeader->registrationID;\n        $this->transactionID = $msgHeader->transactionID;\n        $this->cdrFormat = $format;\n        $this->cdrType = $type;\n        $this->cdrRecord = $cdr;\n\n        $response = $this->listener->processRecord($this, null);\n\n        if (!$this->isValid()) return;\n        return $response;\n    }", "code_tokens": ["public", "function", "NotifyXcdrRecord", "(", "$", "msgHeader", ",", "$", "format", ",", "$", "type", ",", "$", "cdr", ")", "{", "$", "this", "->", "msgHeader", "=", "$", "msgHeader", ";", "$", "this", "->", "registrationID", "=", "$", "msgHeader", "->", "registrationID", ";", "$", "this", "->", "transactionID", "=", "$", "msgHeader", "->", "transactionID", ";", "$", "this", "->", "cdrFormat", "=", "$", "format", ";", "$", "this", "->", "cdrType", "=", "$", "type", ";", "$", "this", "->", "cdrRecord", "=", "$", "cdr", ";", "$", "response", "=", "$", "this", "->", "listener", "->", "processRecord", "(", "$", "this", ",", "null", ")", ";", "if", "(", "!", "$", "this", "->", "isValid", "(", ")", ")", "return", ";", "return", "$", "response", ";", "}"], "docstring": "Parse and save wsapi cdr record.", "docstring_tokens": ["Parse", "and", "save", "wsapi", "cdr", "record", "."], "sha": "a3177b8edb39b91ca093251f4c72c0ac2568a155", "url": "https://github.com/invite-networks/cisco-wsapi/blob/a3177b8edb39b91ca093251f4c72c0ac2568a155/Request/XcdrRequest.php#L93-L106", "partition": "test"}
{"repo": "marklogic-community/mlphp", "path": "api/MarkLogic/MLPHP/MLPHP.php", "func_name": "MLPHP.getDatabase", "original_string": "public function getDatabase($name = null)\n    {\n        $name = $name ? $name : $this->config['db'];\n        return new Database(\n            $this->getManageClient(),\n            $name\n        );\n    }", "language": "php", "code": "public function getDatabase($name = null)\n    {\n        $name = $name ? $name : $this->config['db'];\n        return new Database(\n            $this->getManageClient(),\n            $name\n        );\n    }", "code_tokens": ["public", "function", "getDatabase", "(", "$", "name", "=", "null", ")", "{", "$", "name", "=", "$", "name", "?", "$", "name", ":", "$", "this", "->", "config", "[", "'db'", "]", ";", "return", "new", "Database", "(", "$", "this", "->", "getManageClient", "(", ")", ",", "$", "name", ")", ";", "}"], "docstring": "Return a Database object.\n\n@return Database", "docstring_tokens": ["Return", "a", "Database", "object", "."], "sha": "c3aa3de82525cc5c3404e348e4d5069c0eee3277", "url": "https://github.com/marklogic-community/mlphp/blob/c3aa3de82525cc5c3404e348e4d5069c0eee3277/api/MarkLogic/MLPHP/MLPHP.php#L169-L176", "partition": "test"}
{"repo": "polyfractal/sherlock", "path": "src/Sherlock/requests/IndexDocumentRequest.php", "func_name": "IndexDocumentRequest.document", "original_string": "public function document($value, $id = null, $update = false)\n    {\n        if (!$this->batch instanceof BatchCommand) {\n                        throw new exceptions\\RuntimeException(\"Cannot add a new document to an external BatchCommandInterface\");\n        }\n\n        $this->finalizeCurrentCommand();\n\n\n        if (is_array($value)) {\n            $this->params['doc'] = $value;\n\n        } elseif (is_string($value)) {\n            $this->params['doc'] = json_decode($value, true);\n        }\n\n        if ($id !== null) {\n            $this->currentCommand->id($id)\n                ->action('put');\n\n            $this->params['update'] = $update;\n\n        } else {\n            $this->currentCommand->action('post');\n\n            $this->params['update'] = false;\n        }\n\n\n        return $this;\n    }", "language": "php", "code": "public function document($value, $id = null, $update = false)\n    {\n        if (!$this->batch instanceof BatchCommand) {\n                        throw new exceptions\\RuntimeException(\"Cannot add a new document to an external BatchCommandInterface\");\n        }\n\n        $this->finalizeCurrentCommand();\n\n\n        if (is_array($value)) {\n            $this->params['doc'] = $value;\n\n        } elseif (is_string($value)) {\n            $this->params['doc'] = json_decode($value, true);\n        }\n\n        if ($id !== null) {\n            $this->currentCommand->id($id)\n                ->action('put');\n\n            $this->params['update'] = $update;\n\n        } else {\n            $this->currentCommand->action('post');\n\n            $this->params['update'] = false;\n        }\n\n\n        return $this;\n    }", "code_tokens": ["public", "function", "document", "(", "$", "value", ",", "$", "id", "=", "null", ",", "$", "update", "=", "false", ")", "{", "if", "(", "!", "$", "this", "->", "batch", "instanceof", "BatchCommand", ")", "{", "throw", "new", "exceptions", "\\", "RuntimeException", "(", "\"Cannot add a new document to an external BatchCommandInterface\"", ")", ";", "}", "$", "this", "->", "finalizeCurrentCommand", "(", ")", ";", "if", "(", "is_array", "(", "$", "value", ")", ")", "{", "$", "this", "->", "params", "[", "'doc'", "]", "=", "$", "value", ";", "}", "elseif", "(", "is_string", "(", "$", "value", ")", ")", "{", "$", "this", "->", "params", "[", "'doc'", "]", "=", "json_decode", "(", "$", "value", ",", "true", ")", ";", "}", "if", "(", "$", "id", "!==", "null", ")", "{", "$", "this", "->", "currentCommand", "->", "id", "(", "$", "id", ")", "->", "action", "(", "'put'", ")", ";", "$", "this", "->", "params", "[", "'update'", "]", "=", "$", "update", ";", "}", "else", "{", "$", "this", "->", "currentCommand", "->", "action", "(", "'post'", ")", ";", "$", "this", "->", "params", "[", "'update'", "]", "=", "false", ";", "}", "return", "$", "this", ";", "}"], "docstring": "The document to index\n\n@param  \\string|\\array $value\n@param  null           $id\n@param bool|null       $update\n\n@throws \\Sherlock\\common\\exceptions\\RuntimeException\n@return IndexDocumentRequest", "docstring_tokens": ["The", "document", "to", "index"], "sha": "24ca42c9a60fdc93552f52ea39cb121ec13e9b4e", "url": "https://github.com/polyfractal/sherlock/blob/24ca42c9a60fdc93552f52ea39cb121ec13e9b4e/src/Sherlock/requests/IndexDocumentRequest.php#L165-L195", "partition": "test"}
{"repo": "gwa/wp-disable-auto-update", "path": "src/DisableAutoUpdateHandler.php", "func_name": "DisableAutoUpdateHandler.blockWpRequest", "original_string": "public function blockWpRequest($pre, $args, $url)\n    {\n        if (empty($url)) {\n            return $pre;\n        }\n\n        /* Invalid host */\n        if (!$host = $this->wpMockery->parseUrl($url, PHP_URL_HOST)) {\n            return $pre;\n        }\n\n        $urlData = $this->wpMockery->parseUrl($url);\n\n        /* block request */\n        $path =  (false !== stripos($urlData['path'], 'update-check') || false !== stripos($urlData['path'], 'browse-happy'));\n\n        if (false !== stripos($host, 'api.wordpress.org') && $path) {\n            return true;\n        }\n\n        return $pre;\n    }", "language": "php", "code": "public function blockWpRequest($pre, $args, $url)\n    {\n        if (empty($url)) {\n            return $pre;\n        }\n\n        /* Invalid host */\n        if (!$host = $this->wpMockery->parseUrl($url, PHP_URL_HOST)) {\n            return $pre;\n        }\n\n        $urlData = $this->wpMockery->parseUrl($url);\n\n        /* block request */\n        $path =  (false !== stripos($urlData['path'], 'update-check') || false !== stripos($urlData['path'], 'browse-happy'));\n\n        if (false !== stripos($host, 'api.wordpress.org') && $path) {\n            return true;\n        }\n\n        return $pre;\n    }", "code_tokens": ["public", "function", "blockWpRequest", "(", "$", "pre", ",", "$", "args", ",", "$", "url", ")", "{", "if", "(", "empty", "(", "$", "url", ")", ")", "{", "return", "$", "pre", ";", "}", "/* Invalid host */", "if", "(", "!", "$", "host", "=", "$", "this", "->", "wpMockery", "->", "parseUrl", "(", "$", "url", ",", "PHP_URL_HOST", ")", ")", "{", "return", "$", "pre", ";", "}", "$", "urlData", "=", "$", "this", "->", "wpMockery", "->", "parseUrl", "(", "$", "url", ")", ";", "/* block request */", "$", "path", "=", "(", "false", "!==", "stripos", "(", "$", "urlData", "[", "'path'", "]", ",", "'update-check'", ")", "||", "false", "!==", "stripos", "(", "$", "urlData", "[", "'path'", "]", ",", "'browse-happy'", ")", ")", ";", "if", "(", "false", "!==", "stripos", "(", "$", "host", ",", "'api.wordpress.org'", ")", "&&", "$", "path", ")", "{", "return", "true", ";", "}", "return", "$", "pre", ";", "}"], "docstring": "Check the outgoing request", "docstring_tokens": ["Check", "the", "outgoing", "request"], "sha": "608d2c901178ae9f55c17535d2a592e7d74e17f1", "url": "https://github.com/gwa/wp-disable-auto-update/blob/608d2c901178ae9f55c17535d2a592e7d74e17f1/src/DisableAutoUpdateHandler.php#L74-L95", "partition": "test"}
{"repo": "flugger/laravel-responder", "path": "src/Transformers/TransformerResolver.php", "func_name": "TransformerResolver.resolveFromData", "original_string": "public function resolveFromData($data)\n    {\n        $transformer = $this->resolveTransformer($this->resolveTransformableItem($data));\n\n        return $this->resolve($transformer);\n    }", "language": "php", "code": "public function resolveFromData($data)\n    {\n        $transformer = $this->resolveTransformer($this->resolveTransformableItem($data));\n\n        return $this->resolve($transformer);\n    }", "code_tokens": ["public", "function", "resolveFromData", "(", "$", "data", ")", "{", "$", "transformer", "=", "$", "this", "->", "resolveTransformer", "(", "$", "this", "->", "resolveTransformableItem", "(", "$", "data", ")", ")", ";", "return", "$", "this", "->", "resolve", "(", "$", "transformer", ")", ";", "}"], "docstring": "Resolve a transformer from the given data.\n\n@param  mixed $data\n@return \\Flugg\\Responder\\Transformers\\Transformer|callable", "docstring_tokens": ["Resolve", "a", "transformer", "from", "the", "given", "data", "."], "sha": "4baadabc9087d73927cf13b65a253f9e7ddef15c", "url": "https://github.com/flugger/laravel-responder/blob/4baadabc9087d73927cf13b65a253f9e7ddef15c/src/Transformers/TransformerResolver.php#L93-L98", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Db/MySqlDb.php", "func_name": "MySqlDb.query", "original_string": "public function query($sql, $type = Db::QUERY_READ, $options = []) {\n        $mode = val(Db::OPTION_MODE, $options, $this->mode);\n\n        if ($mode & Db::MODE_ECHO) {\n            echo trim($sql, \"\\n;\").\";\\n\\n\";\n        }\n        if ($mode & Db::MODE_SQL) {\n            return $sql;\n        }\n\n        $result = null;\n        if ($mode & Db::MODE_EXEC) {\n            $result = $this->pdo()->query($sql);\n\n            if ($type == Db::QUERY_READ) {\n                $result->setFetchMode(PDO::FETCH_ASSOC);\n                $result = $result->fetchAll();\n                $this->rowCount = count($result);\n            } elseif (is_object($result) && method_exists($result, 'rowCount')) {\n                $this->rowCount = $result->rowCount();\n                $result = $this->rowCount;\n            }\n        } elseif ($mode & Db::MODE_PDO) {\n            /* @var \\PDOStatement $result */\n            $result = $this->pdo()->prepare($sql);\n        }\n\n        return $result;\n    }", "language": "php", "code": "public function query($sql, $type = Db::QUERY_READ, $options = []) {\n        $mode = val(Db::OPTION_MODE, $options, $this->mode);\n\n        if ($mode & Db::MODE_ECHO) {\n            echo trim($sql, \"\\n;\").\";\\n\\n\";\n        }\n        if ($mode & Db::MODE_SQL) {\n            return $sql;\n        }\n\n        $result = null;\n        if ($mode & Db::MODE_EXEC) {\n            $result = $this->pdo()->query($sql);\n\n            if ($type == Db::QUERY_READ) {\n                $result->setFetchMode(PDO::FETCH_ASSOC);\n                $result = $result->fetchAll();\n                $this->rowCount = count($result);\n            } elseif (is_object($result) && method_exists($result, 'rowCount')) {\n                $this->rowCount = $result->rowCount();\n                $result = $this->rowCount;\n            }\n        } elseif ($mode & Db::MODE_PDO) {\n            /* @var \\PDOStatement $result */\n            $result = $this->pdo()->prepare($sql);\n        }\n\n        return $result;\n    }", "code_tokens": ["public", "function", "query", "(", "$", "sql", ",", "$", "type", "=", "Db", "::", "QUERY_READ", ",", "$", "options", "=", "[", "]", ")", "{", "$", "mode", "=", "val", "(", "Db", "::", "OPTION_MODE", ",", "$", "options", ",", "$", "this", "->", "mode", ")", ";", "if", "(", "$", "mode", "&", "Db", "::", "MODE_ECHO", ")", "{", "echo", "trim", "(", "$", "sql", ",", "\"\\n;\"", ")", ".", "\";\\n\\n\"", ";", "}", "if", "(", "$", "mode", "&", "Db", "::", "MODE_SQL", ")", "{", "return", "$", "sql", ";", "}", "$", "result", "=", "null", ";", "if", "(", "$", "mode", "&", "Db", "::", "MODE_EXEC", ")", "{", "$", "result", "=", "$", "this", "->", "pdo", "(", ")", "->", "query", "(", "$", "sql", ")", ";", "if", "(", "$", "type", "==", "Db", "::", "QUERY_READ", ")", "{", "$", "result", "->", "setFetchMode", "(", "PDO", "::", "FETCH_ASSOC", ")", ";", "$", "result", "=", "$", "result", "->", "fetchAll", "(", ")", ";", "$", "this", "->", "rowCount", "=", "count", "(", "$", "result", ")", ";", "}", "elseif", "(", "is_object", "(", "$", "result", ")", "&&", "method_exists", "(", "$", "result", ",", "'rowCount'", ")", ")", "{", "$", "this", "->", "rowCount", "=", "$", "result", "->", "rowCount", "(", ")", ";", "$", "result", "=", "$", "this", "->", "rowCount", ";", "}", "}", "elseif", "(", "$", "mode", "&", "Db", "::", "MODE_PDO", ")", "{", "/* @var \\PDOStatement $result */", "$", "result", "=", "$", "this", "->", "pdo", "(", ")", "->", "prepare", "(", "$", "sql", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Execute a query on the database.\n\n@param string $sql The sql query to execute.\n@param string $type One of the Db::QUERY_* constants.\n\nDb::QUERY_READ\n: The query reads from the database.\n\nDb::QUERY_WRITE\n: The query writes to the database.\n\nDb::QUERY_DEFINE\n: The query alters the structure of the datbase.\n\n@param array $options Additional options for the query.\n\nDb::OPTION_MODE\n: Override {@link Db::$mode}.\n\n@return array|string|PDOStatement|int Returns the result of the query.\n\narray\n: Returns an array when reading from the database and the mode is {@link Db::MODE_EXEC}.\nstring\n: Returns the sql query when the mode is {@link Db::MODE_SQL}.\nPDOStatement\n: Returns a {@link \\PDOStatement} when the mode is {@link Db::MODE_PDO}.\nint\n: Returns the number of rows affected when performing an update or an insert.", "docstring_tokens": ["Execute", "a", "query", "on", "the", "database", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Db/MySqlDb.php#L91-L119", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-common/src/Common/Internal/ServiceRestTrait.php", "func_name": "ServiceRestTrait.setServicePropertiesAsync", "original_string": "public function setServicePropertiesAsync(\n        ServiceProperties $serviceProperties,\n        ServiceOptions $options = null\n    ) {\n        Validate::isTrue(\n            $serviceProperties instanceof ServiceProperties,\n            Resources::INVALID_SVC_PROP_MSG\n        );\n\n        $method      = Resources::HTTP_PUT;\n        $headers     = array();\n        $queryParams = array();\n        $postParams  = array();\n        $path        = Resources::EMPTY_STRING;\n        $body        = $serviceProperties->toXml($this->dataSerializer);\n\n        if (is_null($options)) {\n            $options = new ServiceOptions();\n        }\n\n        $this->addOptionalQueryParam(\n            $queryParams,\n            Resources::QP_REST_TYPE,\n            'service'\n        );\n        $this->addOptionalQueryParam(\n            $queryParams,\n            Resources::QP_COMP,\n            'properties'\n        );\n        $this->addOptionalHeader(\n            $headers,\n            Resources::CONTENT_TYPE,\n            Resources::URL_ENCODED_CONTENT_TYPE\n        );\n\n        $options->setLocationMode(LocationMode::PRIMARY_ONLY);\n\n        return $this->sendAsync(\n            $method,\n            $headers,\n            $queryParams,\n            $postParams,\n            $path,\n            Resources::STATUS_ACCEPTED,\n            $body,\n            $options\n        );\n    }", "language": "php", "code": "public function setServicePropertiesAsync(\n        ServiceProperties $serviceProperties,\n        ServiceOptions $options = null\n    ) {\n        Validate::isTrue(\n            $serviceProperties instanceof ServiceProperties,\n            Resources::INVALID_SVC_PROP_MSG\n        );\n\n        $method      = Resources::HTTP_PUT;\n        $headers     = array();\n        $queryParams = array();\n        $postParams  = array();\n        $path        = Resources::EMPTY_STRING;\n        $body        = $serviceProperties->toXml($this->dataSerializer);\n\n        if (is_null($options)) {\n            $options = new ServiceOptions();\n        }\n\n        $this->addOptionalQueryParam(\n            $queryParams,\n            Resources::QP_REST_TYPE,\n            'service'\n        );\n        $this->addOptionalQueryParam(\n            $queryParams,\n            Resources::QP_COMP,\n            'properties'\n        );\n        $this->addOptionalHeader(\n            $headers,\n            Resources::CONTENT_TYPE,\n            Resources::URL_ENCODED_CONTENT_TYPE\n        );\n\n        $options->setLocationMode(LocationMode::PRIMARY_ONLY);\n\n        return $this->sendAsync(\n            $method,\n            $headers,\n            $queryParams,\n            $postParams,\n            $path,\n            Resources::STATUS_ACCEPTED,\n            $body,\n            $options\n        );\n    }", "code_tokens": ["public", "function", "setServicePropertiesAsync", "(", "ServiceProperties", "$", "serviceProperties", ",", "ServiceOptions", "$", "options", "=", "null", ")", "{", "Validate", "::", "isTrue", "(", "$", "serviceProperties", "instanceof", "ServiceProperties", ",", "Resources", "::", "INVALID_SVC_PROP_MSG", ")", ";", "$", "method", "=", "Resources", "::", "HTTP_PUT", ";", "$", "headers", "=", "array", "(", ")", ";", "$", "queryParams", "=", "array", "(", ")", ";", "$", "postParams", "=", "array", "(", ")", ";", "$", "path", "=", "Resources", "::", "EMPTY_STRING", ";", "$", "body", "=", "$", "serviceProperties", "->", "toXml", "(", "$", "this", "->", "dataSerializer", ")", ";", "if", "(", "is_null", "(", "$", "options", ")", ")", "{", "$", "options", "=", "new", "ServiceOptions", "(", ")", ";", "}", "$", "this", "->", "addOptionalQueryParam", "(", "$", "queryParams", ",", "Resources", "::", "QP_REST_TYPE", ",", "'service'", ")", ";", "$", "this", "->", "addOptionalQueryParam", "(", "$", "queryParams", ",", "Resources", "::", "QP_COMP", ",", "'properties'", ")", ";", "$", "this", "->", "addOptionalHeader", "(", "$", "headers", ",", "Resources", "::", "CONTENT_TYPE", ",", "Resources", "::", "URL_ENCODED_CONTENT_TYPE", ")", ";", "$", "options", "->", "setLocationMode", "(", "LocationMode", "::", "PRIMARY_ONLY", ")", ";", "return", "$", "this", "->", "sendAsync", "(", "$", "method", ",", "$", "headers", ",", "$", "queryParams", ",", "$", "postParams", ",", "$", "path", ",", "Resources", "::", "STATUS_ACCEPTED", ",", "$", "body", ",", "$", "options", ")", ";", "}"], "docstring": "Creates the promise to set the properties of the service.\n\nIt's recommended to use getServiceProperties, alter the returned object and\nthen use setServiceProperties with this altered object.\n\n@param ServiceProperties $serviceProperties The service properties.\n@param ServiceOptions    $options           The optional parameters.\n\n@return \\GuzzleHttp\\Promise\\PromiseInterface\n\n@see http://msdn.microsoft.com/en-us/library/windowsazure/hh452235.aspx", "docstring_tokens": ["Creates", "the", "promise", "to", "set", "the", "properties", "of", "the", "service", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-common/src/Common/Internal/ServiceRestTrait.php#L147-L195", "partition": "test"}
{"repo": "damianociarla/DCSOpauthBundle", "path": "Controller/ResponseController.php", "func_name": "ResponseController.checkAction", "original_string": "public function checkAction($strategy)\n    {\n        $config = $this->get('dcs_opauth.strategy_parser')->get($strategy);\n        $opauth = new \\Opauth($config, false);\n\n        $this->dispatchEvent(DCSOpauthEvents::BEFORE_PARSE_RESPONSE, new OpauthEvent($opauth));\n\n        $responseData = $this->get('dcs_opauth.response_parser')->parse($opauth);\n\n        // Check if there are errors from the provider\n        $isValid = !isset($responseData['error']);\n\n        $event = new OpauthResponseEvent($opauth, $responseData, $isValid);\n        $this->dispatchEvent(DCSOpauthEvents::AFTER_PARSE_RESPONSE, $event);\n\n        // If there are no errors, and authentication is enabled, create the token with the data provider\n        if ($isValid && $event->getAuthenticate()) {\n            $this->get('dcs_opauth.authenticator')->authenticate($responseData);\n        }\n\n        // Verify if the response is set\n        if (null === $response = $event->getResponse()) {\n            if ($isValid) {\n                if (null === $routeRedirect = $this->container->getParameter('dcs_opauth.redirect_after_response')) {\n                    $url = '/'.ltrim($this->get('request')->getBaseUrl(), '/');\n                } else {\n                    // Check if route exists\n                    try {\n                        $url = $this->generateUrl($routeRedirect);\n                    } catch (RouteNotFoundException $e) {\n                        $url = $routeRedirect;\n                    }\n                }\n                // Create default response\n                $response = new RedirectResponse($url);\n            } else {\n                $response = $this->render($this->container->getParameter('dcs_opauth.error_view'), $responseData['error']);\n            }\n        }\n\n        return $response;\n    }", "language": "php", "code": "public function checkAction($strategy)\n    {\n        $config = $this->get('dcs_opauth.strategy_parser')->get($strategy);\n        $opauth = new \\Opauth($config, false);\n\n        $this->dispatchEvent(DCSOpauthEvents::BEFORE_PARSE_RESPONSE, new OpauthEvent($opauth));\n\n        $responseData = $this->get('dcs_opauth.response_parser')->parse($opauth);\n\n        // Check if there are errors from the provider\n        $isValid = !isset($responseData['error']);\n\n        $event = new OpauthResponseEvent($opauth, $responseData, $isValid);\n        $this->dispatchEvent(DCSOpauthEvents::AFTER_PARSE_RESPONSE, $event);\n\n        // If there are no errors, and authentication is enabled, create the token with the data provider\n        if ($isValid && $event->getAuthenticate()) {\n            $this->get('dcs_opauth.authenticator')->authenticate($responseData);\n        }\n\n        // Verify if the response is set\n        if (null === $response = $event->getResponse()) {\n            if ($isValid) {\n                if (null === $routeRedirect = $this->container->getParameter('dcs_opauth.redirect_after_response')) {\n                    $url = '/'.ltrim($this->get('request')->getBaseUrl(), '/');\n                } else {\n                    // Check if route exists\n                    try {\n                        $url = $this->generateUrl($routeRedirect);\n                    } catch (RouteNotFoundException $e) {\n                        $url = $routeRedirect;\n                    }\n                }\n                // Create default response\n                $response = new RedirectResponse($url);\n            } else {\n                $response = $this->render($this->container->getParameter('dcs_opauth.error_view'), $responseData['error']);\n            }\n        }\n\n        return $response;\n    }", "code_tokens": ["public", "function", "checkAction", "(", "$", "strategy", ")", "{", "$", "config", "=", "$", "this", "->", "get", "(", "'dcs_opauth.strategy_parser'", ")", "->", "get", "(", "$", "strategy", ")", ";", "$", "opauth", "=", "new", "\\", "Opauth", "(", "$", "config", ",", "false", ")", ";", "$", "this", "->", "dispatchEvent", "(", "DCSOpauthEvents", "::", "BEFORE_PARSE_RESPONSE", ",", "new", "OpauthEvent", "(", "$", "opauth", ")", ")", ";", "$", "responseData", "=", "$", "this", "->", "get", "(", "'dcs_opauth.response_parser'", ")", "->", "parse", "(", "$", "opauth", ")", ";", "// Check if there are errors from the provider", "$", "isValid", "=", "!", "isset", "(", "$", "responseData", "[", "'error'", "]", ")", ";", "$", "event", "=", "new", "OpauthResponseEvent", "(", "$", "opauth", ",", "$", "responseData", ",", "$", "isValid", ")", ";", "$", "this", "->", "dispatchEvent", "(", "DCSOpauthEvents", "::", "AFTER_PARSE_RESPONSE", ",", "$", "event", ")", ";", "// If there are no errors, and authentication is enabled, create the token with the data provider", "if", "(", "$", "isValid", "&&", "$", "event", "->", "getAuthenticate", "(", ")", ")", "{", "$", "this", "->", "get", "(", "'dcs_opauth.authenticator'", ")", "->", "authenticate", "(", "$", "responseData", ")", ";", "}", "// Verify if the response is set", "if", "(", "null", "===", "$", "response", "=", "$", "event", "->", "getResponse", "(", ")", ")", "{", "if", "(", "$", "isValid", ")", "{", "if", "(", "null", "===", "$", "routeRedirect", "=", "$", "this", "->", "container", "->", "getParameter", "(", "'dcs_opauth.redirect_after_response'", ")", ")", "{", "$", "url", "=", "'/'", ".", "ltrim", "(", "$", "this", "->", "get", "(", "'request'", ")", "->", "getBaseUrl", "(", ")", ",", "'/'", ")", ";", "}", "else", "{", "// Check if route exists", "try", "{", "$", "url", "=", "$", "this", "->", "generateUrl", "(", "$", "routeRedirect", ")", ";", "}", "catch", "(", "RouteNotFoundException", "$", "e", ")", "{", "$", "url", "=", "$", "routeRedirect", ";", "}", "}", "// Create default response", "$", "response", "=", "new", "RedirectResponse", "(", "$", "url", ")", ";", "}", "else", "{", "$", "response", "=", "$", "this", "->", "render", "(", "$", "this", "->", "container", "->", "getParameter", "(", "'dcs_opauth.error_view'", ")", ",", "$", "responseData", "[", "'error'", "]", ")", ";", "}", "}", "return", "$", "response", ";", "}"], "docstring": "Parse the response of the provider", "docstring_tokens": ["Parse", "the", "response", "of", "the", "provider"], "sha": "8be30f7b6f096207e2dfb67ba04275f1efd557e8", "url": "https://github.com/damianociarla/DCSOpauthBundle/blob/8be30f7b6f096207e2dfb67ba04275f1efd557e8/Controller/ResponseController.php#L17-L58", "partition": "test"}
{"repo": "ifcanduela/db", "path": "src/Database.php", "func_name": "Database.cell", "original_string": "public function cell($sql, array $params = [], $columnName = 0)\n    {\n        $result = $this->run($sql, $params, false, PDO::FETCH_BOTH);\n\n        return $result[0][$columnName] ?? null;\n    }", "language": "php", "code": "public function cell($sql, array $params = [], $columnName = 0)\n    {\n        $result = $this->run($sql, $params, false, PDO::FETCH_BOTH);\n\n        return $result[0][$columnName] ?? null;\n    }", "code_tokens": ["public", "function", "cell", "(", "$", "sql", ",", "array", "$", "params", "=", "[", "]", ",", "$", "columnName", "=", "0", ")", "{", "$", "result", "=", "$", "this", "->", "run", "(", "$", "sql", ",", "$", "params", ",", "false", ",", "PDO", "::", "FETCH_BOTH", ")", ";", "return", "$", "result", "[", "0", "]", "[", "$", "columnName", "]", "??", "null", ";", "}"], "docstring": "Run a query using a prepared statement and return the first column of the first row.\n\n@param string|Query $sql\n@param array $params\n@param int|string $columnName\n@return string|null", "docstring_tokens": ["Run", "a", "query", "using", "a", "prepared", "statement", "and", "return", "the", "first", "column", "of", "the", "first", "row", "."], "sha": "ff6e78ee52fa72188c432e5d3309117c8c8a8317", "url": "https://github.com/ifcanduela/db/blob/ff6e78ee52fa72188c432e5d3309117c8c8a8317/src/Database.php#L212-L217", "partition": "test"}
{"repo": "contao-bootstrap/grid-editor", "path": "src/Integration/Subcolumns.php", "func_name": "Subcolumns.prepareContainer", "original_string": "protected function prepareContainer(Grid $grid)\n    {\n        $container = array();\n\n        foreach ($grid->getColumns() as $column) {\n            $container[] = array(implode(' ', $column));\n        }\n\n        return $container;\n    }", "language": "php", "code": "protected function prepareContainer(Grid $grid)\n    {\n        $container = array();\n\n        foreach ($grid->getColumns() as $column) {\n            $container[] = array(implode(' ', $column));\n        }\n\n        return $container;\n    }", "code_tokens": ["protected", "function", "prepareContainer", "(", "Grid", "$", "grid", ")", "{", "$", "container", "=", "array", "(", ")", ";", "foreach", "(", "$", "grid", "->", "getColumns", "(", ")", "as", "$", "column", ")", "{", "$", "container", "[", "]", "=", "array", "(", "implode", "(", "' '", ",", "$", "column", ")", ")", ";", "}", "return", "$", "container", ";", "}"], "docstring": "Prepare the container by loading the grid and parse it as subcolumns definition.\n\n@param Grid $grid The grid object.\n\n@return array", "docstring_tokens": ["Prepare", "the", "container", "by", "loading", "the", "grid", "and", "parse", "it", "as", "subcolumns", "definition", "."], "sha": "e017332aeec861b64b5dc963156533af4a21dc71", "url": "https://github.com/contao-bootstrap/grid-editor/blob/e017332aeec861b64b5dc963156533af4a21dc71/src/Integration/Subcolumns.php#L239-L248", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/HttpMessage/MessageTrait.php", "func_name": "MessageTrait.assertHeaderValues", "original_string": "protected function assertHeaderValues(string ...$values): array\n    {\n        foreach ($values as $value) {\n            HeaderSecurity::assertValid($value);\n        }\n\n        return $values;\n    }", "language": "php", "code": "protected function assertHeaderValues(string ...$values): array\n    {\n        foreach ($values as $value) {\n            HeaderSecurity::assertValid($value);\n        }\n\n        return $values;\n    }", "code_tokens": ["protected", "function", "assertHeaderValues", "(", "string", "...", "$", "values", ")", ":", "array", "{", "foreach", "(", "$", "values", "as", "$", "value", ")", "{", "HeaderSecurity", "::", "assertValid", "(", "$", "value", ")", ";", "}", "return", "$", "values", ";", "}"], "docstring": "Filter header values.\n\n@param string[] ...$values Header values\n\n@throws \\InvalidArgumentException\n\n@return string[]", "docstring_tokens": ["Filter", "header", "values", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/HttpMessage/MessageTrait.php#L387-L394", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/ResourceRoute.php", "func_name": "ResourceRoute.allowedMethods", "original_string": "protected function allowedMethods($object, $action) {\n        $allMethods = [\n            Request::METHOD_GET, Request::METHOD_POST, Request::METHOD_DELETE,\n            Request::METHOD_PATCH, Request::METHOD_PUT,\n            Request::METHOD_HEAD, Request::METHOD_OPTIONS\n        ];\n\n        // Special actions should not be considered.\n        if (in_array($action, self::$specialActions)) {\n            return [];\n        }\n\n        if (Event::methodExists($object, $action)) {\n            // The controller has the named action and thus supports all methods.\n            return $allMethods;\n        }\n\n        // Loop through all the methods and check to see if they exist in the form $method.$action.\n        $allowed = [];\n        foreach ($allMethods as $method) {\n            if (Event::methodExists($object, $method.$action)) {\n                $allowed[] = $method;\n            }\n        }\n        return $allowed;\n    }", "language": "php", "code": "protected function allowedMethods($object, $action) {\n        $allMethods = [\n            Request::METHOD_GET, Request::METHOD_POST, Request::METHOD_DELETE,\n            Request::METHOD_PATCH, Request::METHOD_PUT,\n            Request::METHOD_HEAD, Request::METHOD_OPTIONS\n        ];\n\n        // Special actions should not be considered.\n        if (in_array($action, self::$specialActions)) {\n            return [];\n        }\n\n        if (Event::methodExists($object, $action)) {\n            // The controller has the named action and thus supports all methods.\n            return $allMethods;\n        }\n\n        // Loop through all the methods and check to see if they exist in the form $method.$action.\n        $allowed = [];\n        foreach ($allMethods as $method) {\n            if (Event::methodExists($object, $method.$action)) {\n                $allowed[] = $method;\n            }\n        }\n        return $allowed;\n    }", "code_tokens": ["protected", "function", "allowedMethods", "(", "$", "object", ",", "$", "action", ")", "{", "$", "allMethods", "=", "[", "Request", "::", "METHOD_GET", ",", "Request", "::", "METHOD_POST", ",", "Request", "::", "METHOD_DELETE", ",", "Request", "::", "METHOD_PATCH", ",", "Request", "::", "METHOD_PUT", ",", "Request", "::", "METHOD_HEAD", ",", "Request", "::", "METHOD_OPTIONS", "]", ";", "// Special actions should not be considered.", "if", "(", "in_array", "(", "$", "action", ",", "self", "::", "$", "specialActions", ")", ")", "{", "return", "[", "]", ";", "}", "if", "(", "Event", "::", "methodExists", "(", "$", "object", ",", "$", "action", ")", ")", "{", "// The controller has the named action and thus supports all methods.", "return", "$", "allMethods", ";", "}", "// Loop through all the methods and check to see if they exist in the form $method.$action.", "$", "allowed", "=", "[", "]", ";", "foreach", "(", "$", "allMethods", "as", "$", "method", ")", "{", "if", "(", "Event", "::", "methodExists", "(", "$", "object", ",", "$", "method", ".", "$", "action", ")", ")", "{", "$", "allowed", "[", "]", "=", "$", "method", ";", "}", "}", "return", "$", "allowed", ";", "}"], "docstring": "Find the allowed http methods on a controller object.\n\n@param object $object The object to test.\n@param string $action The action to test.\n@return array Returns an array of allowed http methods.", "docstring_tokens": ["Find", "the", "allowed", "http", "methods", "on", "a", "controller", "object", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/ResourceRoute.php#L264-L289", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/Db/SqliteDb.php", "func_name": "SqliteDb.dropIndex", "original_string": "protected function dropIndex($indexName) {\n        $sql = 'drop index if exists '.\n            $this->backtick($indexName);\n        $this->query($sql, Db::QUERY_DEFINE);\n    }", "language": "php", "code": "protected function dropIndex($indexName) {\n        $sql = 'drop index if exists '.\n            $this->backtick($indexName);\n        $this->query($sql, Db::QUERY_DEFINE);\n    }", "code_tokens": ["protected", "function", "dropIndex", "(", "$", "indexName", ")", "{", "$", "sql", "=", "'drop index if exists '", ".", "$", "this", "->", "backtick", "(", "$", "indexName", ")", ";", "$", "this", "->", "query", "(", "$", "sql", ",", "Db", "::", "QUERY_DEFINE", ")", ";", "}"], "docstring": "Drop an index.\n\n@param string $indexName The name of the index to drop.", "docstring_tokens": ["Drop", "an", "index", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/Db/SqliteDb.php#L104-L108", "partition": "test"}
{"repo": "Kylob/Database", "path": "src/Component.php", "func_name": "Component.exec", "original_string": "public function exec($query, $values = array())\n    {\n        if ($stmt = $this->prepare($query)) {\n            $result = $this->execute($stmt, $values);\n            $this->close($stmt);\n        }\n\n        return (isset($result)) ? $result : false;\n    }", "language": "php", "code": "public function exec($query, $values = array())\n    {\n        if ($stmt = $this->prepare($query)) {\n            $result = $this->execute($stmt, $values);\n            $this->close($stmt);\n        }\n\n        return (isset($result)) ? $result : false;\n    }", "code_tokens": ["public", "function", "exec", "(", "$", "query", ",", "$", "values", "=", "array", "(", ")", ")", "{", "if", "(", "$", "stmt", "=", "$", "this", "->", "prepare", "(", "$", "query", ")", ")", "{", "$", "result", "=", "$", "this", "->", "execute", "(", "$", "stmt", ",", "$", "values", ")", ";", "$", "this", "->", "close", "(", "$", "stmt", ")", ";", "}", "return", "(", "isset", "(", "$", "result", ")", ")", "?", "$", "result", ":", "false", ";", "}"], "docstring": "Prepare and execute a query.\n\n@param string|array $query  An SQL statement.\n@param string|array $values The query parameters.\n\n@return mixed Either ``false`` if there was a problem, or whatever the ``$db->execute()``d.\n\n```php\n$db->exec(array(\n'CREATE TABLE employees (',\n'  id INTEGER PRIMARY KEY,',\n'  name TEXT NOT NULL DEFAULT \"\",',\n'  title TEXT NOT NULL DEFAULT \"\"',\n')',\n));\n```", "docstring_tokens": ["Prepare", "and", "execute", "a", "query", "."], "sha": "9a25dd726512c8b22471e59d919208b58d5e6b0f", "url": "https://github.com/Kylob/Database/blob/9a25dd726512c8b22471e59d919208b58d5e6b0f/src/Component.php#L27-L35", "partition": "test"}
{"repo": "thecodingmachine/yaml-definition-loader", "path": "src/YamlDefinitionLoader.php", "func_name": "YamlDefinitionLoader.loadFile", "original_string": "protected function loadFile($file)\n    {\n        if (!stream_is_local($file)) {\n            throw new InvalidArgumentException(sprintf('This is not a local file \"%s\".', $file));\n        }\n\n        if (!is_readable($file)) {\n            throw new FileNotFoundException(sprintf('The file \"%s\" does not exist or is not readable.', $file));\n        }\n\n        $yamlParser = new Parser();\n\n        try {\n            $configuration = $yamlParser->parse(file_get_contents($file));\n        } catch (ParseException $e) {\n            throw new InvalidArgumentException(sprintf('The file \"%s\" does not contain valid YAML.', $file), 0, $e);\n        }\n\n        return $this->validate($configuration, $file);\n    }", "language": "php", "code": "protected function loadFile($file)\n    {\n        if (!stream_is_local($file)) {\n            throw new InvalidArgumentException(sprintf('This is not a local file \"%s\".', $file));\n        }\n\n        if (!is_readable($file)) {\n            throw new FileNotFoundException(sprintf('The file \"%s\" does not exist or is not readable.', $file));\n        }\n\n        $yamlParser = new Parser();\n\n        try {\n            $configuration = $yamlParser->parse(file_get_contents($file));\n        } catch (ParseException $e) {\n            throw new InvalidArgumentException(sprintf('The file \"%s\" does not contain valid YAML.', $file), 0, $e);\n        }\n\n        return $this->validate($configuration, $file);\n    }", "code_tokens": ["protected", "function", "loadFile", "(", "$", "file", ")", "{", "if", "(", "!", "stream_is_local", "(", "$", "file", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "sprintf", "(", "'This is not a local file \"%s\".'", ",", "$", "file", ")", ")", ";", "}", "if", "(", "!", "is_readable", "(", "$", "file", ")", ")", "{", "throw", "new", "FileNotFoundException", "(", "sprintf", "(", "'The file \"%s\" does not exist or is not readable.'", ",", "$", "file", ")", ")", ";", "}", "$", "yamlParser", "=", "new", "Parser", "(", ")", ";", "try", "{", "$", "configuration", "=", "$", "yamlParser", "->", "parse", "(", "file_get_contents", "(", "$", "file", ")", ")", ";", "}", "catch", "(", "ParseException", "$", "e", ")", "{", "throw", "new", "InvalidArgumentException", "(", "sprintf", "(", "'The file \"%s\" does not contain valid YAML.'", ",", "$", "file", ")", ",", "0", ",", "$", "e", ")", ";", "}", "return", "$", "this", "->", "validate", "(", "$", "configuration", ",", "$", "file", ")", ";", "}"], "docstring": "Loads a YAML file.\n\n@param string $file\n\n@return array The file content\n\n@throws InvalidArgumentException when the given file is not a local file or when it does not exist", "docstring_tokens": ["Loads", "a", "YAML", "file", "."], "sha": "9b05f3206dba554fdea5dbd362c54d331af67b2c", "url": "https://github.com/thecodingmachine/yaml-definition-loader/blob/9b05f3206dba554fdea5dbd362c54d331af67b2c/src/YamlDefinitionLoader.php#L293-L312", "partition": "test"}
{"repo": "phpable/prototypes", "path": "src/TMutatable.php", "func_name": "TMutatable.mutate", "original_string": "protected final function mutate(string $prefix, string $name, $value = null) {\n\t\treturn method_exists($this, $method = Src::tcm(strtolower(Str::join('_', $prefix, $name , 'property'))))\n\t\t\t? call_user_func([$this, $method], $value) : $value;\n\t}", "language": "php", "code": "protected final function mutate(string $prefix, string $name, $value = null) {\n\t\treturn method_exists($this, $method = Src::tcm(strtolower(Str::join('_', $prefix, $name , 'property'))))\n\t\t\t? call_user_func([$this, $method], $value) : $value;\n\t}", "code_tokens": ["protected", "final", "function", "mutate", "(", "string", "$", "prefix", ",", "string", "$", "name", ",", "$", "value", "=", "null", ")", "{", "return", "method_exists", "(", "$", "this", ",", "$", "method", "=", "Src", "::", "tcm", "(", "strtolower", "(", "Str", "::", "join", "(", "'_'", ",", "$", "prefix", ",", "$", "name", ",", "'property'", ")", ")", ")", ")", "?", "call_user_func", "(", "[", "$", "this", ",", "$", "method", "]", ",", "$", "value", ")", ":", "$", "value", ";", "}"], "docstring": "Checks if mutator exists and returns the mutated value.\n\n@param string $prefix\nAny prefix like 'get' or 'set' to separate getters and setters for example.\n\n@param string $name\nIt will be converted into the camel case\nvia underscores like a separator.\n\n@param $value\nSome parameters if needed.\n\n@return mixed\nThe value will be returned \"as is\" if the requested mutator doesn't exist.", "docstring_tokens": ["Checks", "if", "mutator", "exists", "and", "returns", "the", "mutated", "value", "."], "sha": "d8d9ad1db8ff03143bf2da7494fdb01853ae6ff5", "url": "https://github.com/phpable/prototypes/blob/d8d9ad1db8ff03143bf2da7494fdb01853ae6ff5/src/TMutatable.php#L25-L28", "partition": "test"}
{"repo": "flugger/laravel-responder", "path": "src/Transformers/TransformerResolver.php", "func_name": "TransformerResolver.resolveTransformer", "original_string": "protected function resolveTransformer($transformable)\n    {\n        if (is_object($transformable) && key_exists(get_class($transformable), $this->bindings)) {\n            return $this->bindings[get_class($transformable)];\n        }\n\n        if ($transformable instanceof Transformable) {\n            return $transformable->transformer();\n        }\n\n        return $this->resolve($this->fallback);\n    }", "language": "php", "code": "protected function resolveTransformer($transformable)\n    {\n        if (is_object($transformable) && key_exists(get_class($transformable), $this->bindings)) {\n            return $this->bindings[get_class($transformable)];\n        }\n\n        if ($transformable instanceof Transformable) {\n            return $transformable->transformer();\n        }\n\n        return $this->resolve($this->fallback);\n    }", "code_tokens": ["protected", "function", "resolveTransformer", "(", "$", "transformable", ")", "{", "if", "(", "is_object", "(", "$", "transformable", ")", "&&", "key_exists", "(", "get_class", "(", "$", "transformable", ")", ",", "$", "this", "->", "bindings", ")", ")", "{", "return", "$", "this", "->", "bindings", "[", "get_class", "(", "$", "transformable", ")", "]", ";", "}", "if", "(", "$", "transformable", "instanceof", "Transformable", ")", "{", "return", "$", "transformable", "->", "transformer", "(", ")", ";", "}", "return", "$", "this", "->", "resolve", "(", "$", "this", "->", "fallback", ")", ";", "}"], "docstring": "Resolve a transformer from the transformable element.\n\n@param  mixed $transformable\n@return \\Flugg\\Responder\\Contracts\\Transformable|callable", "docstring_tokens": ["Resolve", "a", "transformer", "from", "the", "transformable", "element", "."], "sha": "4baadabc9087d73927cf13b65a253f9e7ddef15c", "url": "https://github.com/flugger/laravel-responder/blob/4baadabc9087d73927cf13b65a253f9e7ddef15c/src/Transformers/TransformerResolver.php#L106-L117", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Easy/FormRenderer.php", "func_name": "FormRenderer.renderPHP", "original_string": "static protected function renderPHP($formObj, $tplAttributes = Array())\n    {\n        $form = TemplateHelper::getZendTemplate();\n        $tplFile = TemplateHelper::getTplFileWithPath($formObj->templateFile, $formObj->package);\n        $form->addScriptPath(dirname($tplFile));\n\n        /* $formOutput = $formObj->outputAttrs();\n          foreach ($formOutput as $k=>$v) {\n          $form->$k = $v;\n          } */\n\n        foreach ($tplAttributes as $key => $value) {\n            if ($value == NULL) {\n                $form->$key = '';\n            } else {\n                $form->$key = $value;\n            }\n        }\n\n        // render the formobj attributes\n        //$form->form = $formOutput;\n\n        return $form->render($formObj->templateFile);\n    }", "language": "php", "code": "static protected function renderPHP($formObj, $tplAttributes = Array())\n    {\n        $form = TemplateHelper::getZendTemplate();\n        $tplFile = TemplateHelper::getTplFileWithPath($formObj->templateFile, $formObj->package);\n        $form->addScriptPath(dirname($tplFile));\n\n        /* $formOutput = $formObj->outputAttrs();\n          foreach ($formOutput as $k=>$v) {\n          $form->$k = $v;\n          } */\n\n        foreach ($tplAttributes as $key => $value) {\n            if ($value == NULL) {\n                $form->$key = '';\n            } else {\n                $form->$key = $value;\n            }\n        }\n\n        // render the formobj attributes\n        //$form->form = $formOutput;\n\n        return $form->render($formObj->templateFile);\n    }", "code_tokens": ["static", "protected", "function", "renderPHP", "(", "$", "formObj", ",", "$", "tplAttributes", "=", "Array", "(", ")", ")", "{", "$", "form", "=", "TemplateHelper", "::", "getZendTemplate", "(", ")", ";", "$", "tplFile", "=", "TemplateHelper", "::", "getTplFileWithPath", "(", "$", "formObj", "->", "templateFile", ",", "$", "formObj", "->", "package", ")", ";", "$", "form", "->", "addScriptPath", "(", "dirname", "(", "$", "tplFile", ")", ")", ";", "/* $formOutput = $formObj->outputAttrs();\n          foreach ($formOutput as $k=>$v) {\n          $form->$k = $v;\n          } */", "foreach", "(", "$", "tplAttributes", "as", "$", "key", "=>", "$", "value", ")", "{", "if", "(", "$", "value", "==", "NULL", ")", "{", "$", "form", "->", "$", "key", "=", "''", ";", "}", "else", "{", "$", "form", "->", "$", "key", "=", "$", "value", ";", "}", "}", "// render the formobj attributes", "//$form->form = $formOutput;", "return", "$", "form", "->", "render", "(", "$", "formObj", "->", "templateFile", ")", ";", "}"], "docstring": "Render PHP template for form object\n\n@param EasyForm $formObj\n@param string $tplFile\n@return string result of rendering process", "docstring_tokens": ["Render", "PHP", "template", "for", "form", "object"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Easy/FormRenderer.php#L141-L164", "partition": "test"}
{"repo": "alekitto/function-mock", "path": "lib/Promise/ReturnArgumentPromise.php", "func_name": "ReturnArgumentPromise.execute", "original_string": "public function execute(array $args, FunctionProphecy $function)\n    {\n        return count($args) > $this->index ? $args[$this->index] : null;\n    }", "language": "php", "code": "public function execute(array $args, FunctionProphecy $function)\n    {\n        return count($args) > $this->index ? $args[$this->index] : null;\n    }", "code_tokens": ["public", "function", "execute", "(", "array", "$", "args", ",", "FunctionProphecy", "$", "function", ")", "{", "return", "count", "(", "$", "args", ")", ">", "$", "this", "->", "index", "?", "$", "args", "[", "$", "this", "->", "index", "]", ":", "null", ";", "}"], "docstring": "Returns nth argument if has one, null otherwise.\n\n@param array          $args\n@param FunctionProphecy $function\n\n@return null|mixed", "docstring_tokens": ["Returns", "nth", "argument", "if", "has", "one", "null", "otherwise", "."], "sha": "cd920d7e5da05df8df38b349169cb8adac5e6b27", "url": "https://github.com/alekitto/function-mock/blob/cd920d7e5da05df8df38b349169cb8adac5e6b27/lib/Promise/ReturnArgumentPromise.php#L44-L47", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-table/src/Table/Models/Entity.php", "func_name": "Entity._validateProperties", "original_string": "private function _validateProperties($properties)\n    {\n        Validate::isArray($properties, 'entity properties');\n\n        foreach ($properties as $key => $value) {\n            Validate::canCastAsString($key, 'key');\n            Validate::isTrue(\n                $value instanceof Property,\n                Resources::INVALID_PROP_MSG\n            );\n            Validate::isTrue(\n                EdmType::validateEdmValue(\n                    $value->getEdmType(),\n                    $value->getValue(),\n                    $condition\n                ),\n                sprintf(Resources::INVALID_PROP_VAL_MSG, $key, $condition)\n            );\n        }\n    }", "language": "php", "code": "private function _validateProperties($properties)\n    {\n        Validate::isArray($properties, 'entity properties');\n\n        foreach ($properties as $key => $value) {\n            Validate::canCastAsString($key, 'key');\n            Validate::isTrue(\n                $value instanceof Property,\n                Resources::INVALID_PROP_MSG\n            );\n            Validate::isTrue(\n                EdmType::validateEdmValue(\n                    $value->getEdmType(),\n                    $value->getValue(),\n                    $condition\n                ),\n                sprintf(Resources::INVALID_PROP_VAL_MSG, $key, $condition)\n            );\n        }\n    }", "code_tokens": ["private", "function", "_validateProperties", "(", "$", "properties", ")", "{", "Validate", "::", "isArray", "(", "$", "properties", ",", "'entity properties'", ")", ";", "foreach", "(", "$", "properties", "as", "$", "key", "=>", "$", "value", ")", "{", "Validate", "::", "canCastAsString", "(", "$", "key", ",", "'key'", ")", ";", "Validate", "::", "isTrue", "(", "$", "value", "instanceof", "Property", ",", "Resources", "::", "INVALID_PROP_MSG", ")", ";", "Validate", "::", "isTrue", "(", "EdmType", "::", "validateEdmValue", "(", "$", "value", "->", "getEdmType", "(", ")", ",", "$", "value", "->", "getValue", "(", ")", ",", "$", "condition", ")", ",", "sprintf", "(", "Resources", "::", "INVALID_PROP_VAL_MSG", ",", "$", "key", ",", "$", "condition", ")", ")", ";", "}", "}"], "docstring": "Validates if properties is valid or not.\n\n@param mixed $properties The properties array.\n\n@return void", "docstring_tokens": ["Validates", "if", "properties", "is", "valid", "or", "not", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-table/src/Table/Models/Entity.php#L53-L72", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/HttpMessage/Cookie.php", "func_name": "Cookie.setSameSite", "original_string": "public function setSameSite(string $sameSite = null): self\n    {\n        if (! \\in_array($sameSite, [self::LAX, self::STRICT, null], true)) {\n            throw new InvalidSameSiteTypeException(\n                'The \"sameSite\" parameter value is not valid.'\n            );\n        }\n\n        $this->sameSite = $sameSite;\n\n        return $this;\n    }", "language": "php", "code": "public function setSameSite(string $sameSite = null): self\n    {\n        if (! \\in_array($sameSite, [self::LAX, self::STRICT, null], true)) {\n            throw new InvalidSameSiteTypeException(\n                'The \"sameSite\" parameter value is not valid.'\n            );\n        }\n\n        $this->sameSite = $sameSite;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setSameSite", "(", "string", "$", "sameSite", "=", "null", ")", ":", "self", "{", "if", "(", "!", "\\", "in_array", "(", "$", "sameSite", ",", "[", "self", "::", "LAX", ",", "self", "::", "STRICT", ",", "null", "]", ",", "true", ")", ")", "{", "throw", "new", "InvalidSameSiteTypeException", "(", "'The \"sameSite\" parameter value is not valid.'", ")", ";", "}", "$", "this", "->", "sameSite", "=", "$", "sameSite", ";", "return", "$", "this", ";", "}"], "docstring": "Set whether the cookie will be available for cross-site requests.\n\n@param string $sameSite\n\n@throws \\Valkyrja\\Http\\Exceptions\\InvalidSameSiteTypeException\n\n@return \\Valkyrja\\HttpMessage\\Cookie", "docstring_tokens": ["Set", "whether", "the", "cookie", "will", "be", "available", "for", "cross", "-", "site", "requests", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/HttpMessage/Cookie.php#L411-L422", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/Sri.php", "func_name": "Sri.&", "original_string": "protected function &getMap(): array\n    {\n        if (!isset($this->map)) {\n            $this->map = []; // Define.\n\n            if (is_file($this->map_file)) {\n                $this->map = file_get_contents($this->map_file);\n                $this->map = json_decode($this->map, true);\n                $this->map = is_array($this->map) ? $this->map : [];\n            } // Only if file exists, otherwise empty array.\n        }\n        return $this->map;\n    }", "language": "php", "code": "protected function &getMap(): array\n    {\n        if (!isset($this->map)) {\n            $this->map = []; // Define.\n\n            if (is_file($this->map_file)) {\n                $this->map = file_get_contents($this->map_file);\n                $this->map = json_decode($this->map, true);\n                $this->map = is_array($this->map) ? $this->map : [];\n            } // Only if file exists, otherwise empty array.\n        }\n        return $this->map;\n    }", "code_tokens": ["protected", "function", "&", "getMap", "(", ")", ":", "array", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "map", ")", ")", "{", "$", "this", "->", "map", "=", "[", "]", ";", "// Define.", "if", "(", "is_file", "(", "$", "this", "->", "map_file", ")", ")", "{", "$", "this", "->", "map", "=", "file_get_contents", "(", "$", "this", "->", "map_file", ")", ";", "$", "this", "->", "map", "=", "json_decode", "(", "$", "this", "->", "map", ",", "true", ")", ";", "$", "this", "->", "map", "=", "is_array", "(", "$", "this", "->", "map", ")", "?", "$", "this", "->", "map", ":", "[", "]", ";", "}", "// Only if file exists, otherwise empty array.", "}", "return", "$", "this", "->", "map", ";", "}"], "docstring": "Get the SRIs map.\n\n@since 170215.53419 SRI utils.\n\n@return array Map of SRIs.", "docstring_tokens": ["Get", "the", "SRIs", "map", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/Sri.php#L452-L464", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Debug/Exceptions.php", "func_name": "Exceptions.describeMemory", "original_string": "public static function describeMemory(int $bytes): string\n\t{\n\t\tif ($bytes < 1024)\n\t\t{\n\t\t\treturn $bytes . 'B';\n\t\t}\n\t\telse if ($bytes < 1048576)\n\t\t{\n\t\t\treturn round($bytes / 1024, 2) . 'KB';\n\t\t}\n\n\t\treturn round($bytes / 1048576, 2) . 'MB';\n\t}", "language": "php", "code": "public static function describeMemory(int $bytes): string\n\t{\n\t\tif ($bytes < 1024)\n\t\t{\n\t\t\treturn $bytes . 'B';\n\t\t}\n\t\telse if ($bytes < 1048576)\n\t\t{\n\t\t\treturn round($bytes / 1024, 2) . 'KB';\n\t\t}\n\n\t\treturn round($bytes / 1048576, 2) . 'MB';\n\t}", "code_tokens": ["public", "static", "function", "describeMemory", "(", "int", "$", "bytes", ")", ":", "string", "{", "if", "(", "$", "bytes", "<", "1024", ")", "{", "return", "$", "bytes", ".", "'B'", ";", "}", "else", "if", "(", "$", "bytes", "<", "1048576", ")", "{", "return", "round", "(", "$", "bytes", "/", "1024", ",", "2", ")", ".", "'KB'", ";", "}", "return", "round", "(", "$", "bytes", "/", "1048576", ",", "2", ")", ".", "'MB'", ";", "}"], "docstring": "Describes memory usage in real-world units. Intended for use\nwith memory_get_usage, etc.\n\n@param $bytes\n\n@return string", "docstring_tokens": ["Describes", "memory", "usage", "in", "real", "-", "world", "units", ".", "Intended", "for", "use", "with", "memory_get_usage", "etc", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Debug/Exceptions.php#L395-L407", "partition": "test"}
{"repo": "php-cache/adapter-bundle", "path": "src/DependencyInjection/CacheAdapterExtension.php", "func_name": "CacheAdapterExtension.load", "original_string": "public function load(array $configs, ContainerBuilder $container)\n    {\n        $configuration = new Configuration();\n        $config = $this->processConfiguration($configuration, $configs);\n\n        $loader = new Loader\\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));\n        $loader->load('services.yml');\n\n        // Configure client services\n        $first = isset($config['providers']['default']) ? 'default' : null;\n        foreach ($config['providers'] as $name => $arguments) {\n            if (null === $first) {\n                $first = $name;\n            }\n\n            $factoryClass = $container->getDefinition($arguments['factory'])->getClass();\n            $factoryClass::validate($arguments['options'], $name);\n\n            // See if any option has a service reference\n            $arguments['options'] = $this->findReferences($arguments['options']);\n\n            $def = $container->register('cache.provider.'.$name, DummyAdapter::class);\n            $def->setFactory([new Reference($arguments['factory']), 'createAdapter'])\n                ->addArgument($arguments['options'])\n                ->setPublic(true);\n\n            $def->addTag('cache.provider');\n            foreach ($arguments['aliases'] as $alias) {\n                $container->setAlias($alias, new Alias('cache.provider.'.$name, true));\n            }\n        }\n\n        if (null !== $first) {\n            $container->setAlias('cache', 'cache.provider.'.$first);\n            $container->setAlias('php_cache', 'cache.provider.'.$first);\n        }\n    }", "language": "php", "code": "public function load(array $configs, ContainerBuilder $container)\n    {\n        $configuration = new Configuration();\n        $config = $this->processConfiguration($configuration, $configs);\n\n        $loader = new Loader\\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));\n        $loader->load('services.yml');\n\n        // Configure client services\n        $first = isset($config['providers']['default']) ? 'default' : null;\n        foreach ($config['providers'] as $name => $arguments) {\n            if (null === $first) {\n                $first = $name;\n            }\n\n            $factoryClass = $container->getDefinition($arguments['factory'])->getClass();\n            $factoryClass::validate($arguments['options'], $name);\n\n            // See if any option has a service reference\n            $arguments['options'] = $this->findReferences($arguments['options']);\n\n            $def = $container->register('cache.provider.'.$name, DummyAdapter::class);\n            $def->setFactory([new Reference($arguments['factory']), 'createAdapter'])\n                ->addArgument($arguments['options'])\n                ->setPublic(true);\n\n            $def->addTag('cache.provider');\n            foreach ($arguments['aliases'] as $alias) {\n                $container->setAlias($alias, new Alias('cache.provider.'.$name, true));\n            }\n        }\n\n        if (null !== $first) {\n            $container->setAlias('cache', 'cache.provider.'.$first);\n            $container->setAlias('php_cache', 'cache.provider.'.$first);\n        }\n    }", "code_tokens": ["public", "function", "load", "(", "array", "$", "configs", ",", "ContainerBuilder", "$", "container", ")", "{", "$", "configuration", "=", "new", "Configuration", "(", ")", ";", "$", "config", "=", "$", "this", "->", "processConfiguration", "(", "$", "configuration", ",", "$", "configs", ")", ";", "$", "loader", "=", "new", "Loader", "\\", "YamlFileLoader", "(", "$", "container", ",", "new", "FileLocator", "(", "__DIR__", ".", "'/../Resources/config'", ")", ")", ";", "$", "loader", "->", "load", "(", "'services.yml'", ")", ";", "// Configure client services", "$", "first", "=", "isset", "(", "$", "config", "[", "'providers'", "]", "[", "'default'", "]", ")", "?", "'default'", ":", "null", ";", "foreach", "(", "$", "config", "[", "'providers'", "]", "as", "$", "name", "=>", "$", "arguments", ")", "{", "if", "(", "null", "===", "$", "first", ")", "{", "$", "first", "=", "$", "name", ";", "}", "$", "factoryClass", "=", "$", "container", "->", "getDefinition", "(", "$", "arguments", "[", "'factory'", "]", ")", "->", "getClass", "(", ")", ";", "$", "factoryClass", "::", "validate", "(", "$", "arguments", "[", "'options'", "]", ",", "$", "name", ")", ";", "// See if any option has a service reference", "$", "arguments", "[", "'options'", "]", "=", "$", "this", "->", "findReferences", "(", "$", "arguments", "[", "'options'", "]", ")", ";", "$", "def", "=", "$", "container", "->", "register", "(", "'cache.provider.'", ".", "$", "name", ",", "DummyAdapter", "::", "class", ")", ";", "$", "def", "->", "setFactory", "(", "[", "new", "Reference", "(", "$", "arguments", "[", "'factory'", "]", ")", ",", "'createAdapter'", "]", ")", "->", "addArgument", "(", "$", "arguments", "[", "'options'", "]", ")", "->", "setPublic", "(", "true", ")", ";", "$", "def", "->", "addTag", "(", "'cache.provider'", ")", ";", "foreach", "(", "$", "arguments", "[", "'aliases'", "]", "as", "$", "alias", ")", "{", "$", "container", "->", "setAlias", "(", "$", "alias", ",", "new", "Alias", "(", "'cache.provider.'", ".", "$", "name", ",", "true", ")", ")", ";", "}", "}", "if", "(", "null", "!==", "$", "first", ")", "{", "$", "container", "->", "setAlias", "(", "'cache'", ",", "'cache.provider.'", ".", "$", "first", ")", ";", "$", "container", "->", "setAlias", "(", "'php_cache'", ",", "'cache.provider.'", ".", "$", "first", ")", ";", "}", "}"], "docstring": "Loads the configs for Cache and puts data into the container.\n\n@param array            $configs   Array of configs\n@param ContainerBuilder $container Container Object", "docstring_tokens": ["Loads", "the", "configs", "for", "Cache", "and", "puts", "data", "into", "the", "container", "."], "sha": "d58b2910f78d8ae719d27727c16abd4c904e8d65", "url": "https://github.com/php-cache/adapter-bundle/blob/d58b2910f78d8ae719d27727c16abd4c904e8d65/src/DependencyInjection/CacheAdapterExtension.php#L33-L69", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Console/Annotations/NativeCommandAnnotations.php", "func_name": "NativeCommandAnnotations.getCommandFromAnnotation", "original_string": "protected function getCommandFromAnnotation(Command $command): ConsoleCommand\n    {\n        $consoleCommand = new ConsoleCommand();\n\n        $consoleCommand\n            ->setPath($command->getRegex())\n            ->setRegex($command->getRegex())\n            ->setParams($command->getParams())\n            ->setSegments($command->getSegments())\n            ->setDescription($command->getDescription())\n            ->setId($command->getId())\n            ->setName($command->getName())\n            ->setClass($command->getClass())\n            ->setProperty($command->getProperty())\n            ->setMethod($command->getMethod())\n            ->setStatic($command->isStatic())\n            ->setFunction($command->getFunction())\n            ->setMatches($command->getMatches())\n            ->setDependencies($command->getDependencies())\n            ->setArguments($command->getArguments());\n\n        return $consoleCommand;\n    }", "language": "php", "code": "protected function getCommandFromAnnotation(Command $command): ConsoleCommand\n    {\n        $consoleCommand = new ConsoleCommand();\n\n        $consoleCommand\n            ->setPath($command->getRegex())\n            ->setRegex($command->getRegex())\n            ->setParams($command->getParams())\n            ->setSegments($command->getSegments())\n            ->setDescription($command->getDescription())\n            ->setId($command->getId())\n            ->setName($command->getName())\n            ->setClass($command->getClass())\n            ->setProperty($command->getProperty())\n            ->setMethod($command->getMethod())\n            ->setStatic($command->isStatic())\n            ->setFunction($command->getFunction())\n            ->setMatches($command->getMatches())\n            ->setDependencies($command->getDependencies())\n            ->setArguments($command->getArguments());\n\n        return $consoleCommand;\n    }", "code_tokens": ["protected", "function", "getCommandFromAnnotation", "(", "Command", "$", "command", ")", ":", "ConsoleCommand", "{", "$", "consoleCommand", "=", "new", "ConsoleCommand", "(", ")", ";", "$", "consoleCommand", "->", "setPath", "(", "$", "command", "->", "getRegex", "(", ")", ")", "->", "setRegex", "(", "$", "command", "->", "getRegex", "(", ")", ")", "->", "setParams", "(", "$", "command", "->", "getParams", "(", ")", ")", "->", "setSegments", "(", "$", "command", "->", "getSegments", "(", ")", ")", "->", "setDescription", "(", "$", "command", "->", "getDescription", "(", ")", ")", "->", "setId", "(", "$", "command", "->", "getId", "(", ")", ")", "->", "setName", "(", "$", "command", "->", "getName", "(", ")", ")", "->", "setClass", "(", "$", "command", "->", "getClass", "(", ")", ")", "->", "setProperty", "(", "$", "command", "->", "getProperty", "(", ")", ")", "->", "setMethod", "(", "$", "command", "->", "getMethod", "(", ")", ")", "->", "setStatic", "(", "$", "command", "->", "isStatic", "(", ")", ")", "->", "setFunction", "(", "$", "command", "->", "getFunction", "(", ")", ")", "->", "setMatches", "(", "$", "command", "->", "getMatches", "(", ")", ")", "->", "setDependencies", "(", "$", "command", "->", "getDependencies", "(", ")", ")", "->", "setArguments", "(", "$", "command", "->", "getArguments", "(", ")", ")", ";", "return", "$", "consoleCommand", ";", "}"], "docstring": "Get a command from a command annotation.\n\n@param Command $command The command annotation\n\n@return \\Valkyrja\\Console\\Command", "docstring_tokens": ["Get", "a", "command", "from", "a", "command", "annotation", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Console/Annotations/NativeCommandAnnotations.php#L110-L132", "partition": "test"}
{"repo": "pear/Crypt_GPG", "path": "Crypt/GPG/ProcessHandler.php", "func_name": "Crypt_GPG_ProcessHandler.setErrorCode", "original_string": "protected function setErrorCode($exitcode)\n    {\n        if ($this->needPassphrase > 0) {\n            return Crypt_GPG::ERROR_MISSING_PASSPHRASE;\n        }\n\n        if ($this->operation == 'import') {\n            return Crypt_GPG::ERROR_NONE;\n        }\n\n        if ($this->operation == 'decrypt' && !empty($this->data['DecryptionOkay'])) {\n            if (!empty($this->data['IgnoreVerifyErrors'])) {\n                return Crypt_GPG::ERROR_NONE;\n            }\n            if (!empty($this->data['MissingKeys'])) {\n                return Crypt_GPG::ERROR_KEY_NOT_FOUND;\n            }\n        }\n\n        return Crypt_GPG::ERROR_UNKNOWN;\n    }", "language": "php", "code": "protected function setErrorCode($exitcode)\n    {\n        if ($this->needPassphrase > 0) {\n            return Crypt_GPG::ERROR_MISSING_PASSPHRASE;\n        }\n\n        if ($this->operation == 'import') {\n            return Crypt_GPG::ERROR_NONE;\n        }\n\n        if ($this->operation == 'decrypt' && !empty($this->data['DecryptionOkay'])) {\n            if (!empty($this->data['IgnoreVerifyErrors'])) {\n                return Crypt_GPG::ERROR_NONE;\n            }\n            if (!empty($this->data['MissingKeys'])) {\n                return Crypt_GPG::ERROR_KEY_NOT_FOUND;\n            }\n        }\n\n        return Crypt_GPG::ERROR_UNKNOWN;\n    }", "code_tokens": ["protected", "function", "setErrorCode", "(", "$", "exitcode", ")", "{", "if", "(", "$", "this", "->", "needPassphrase", ">", "0", ")", "{", "return", "Crypt_GPG", "::", "ERROR_MISSING_PASSPHRASE", ";", "}", "if", "(", "$", "this", "->", "operation", "==", "'import'", ")", "{", "return", "Crypt_GPG", "::", "ERROR_NONE", ";", "}", "if", "(", "$", "this", "->", "operation", "==", "'decrypt'", "&&", "!", "empty", "(", "$", "this", "->", "data", "[", "'DecryptionOkay'", "]", ")", ")", "{", "if", "(", "!", "empty", "(", "$", "this", "->", "data", "[", "'IgnoreVerifyErrors'", "]", ")", ")", "{", "return", "Crypt_GPG", "::", "ERROR_NONE", ";", "}", "if", "(", "!", "empty", "(", "$", "this", "->", "data", "[", "'MissingKeys'", "]", ")", ")", "{", "return", "Crypt_GPG", "::", "ERROR_KEY_NOT_FOUND", ";", "}", "}", "return", "Crypt_GPG", "::", "ERROR_UNKNOWN", ";", "}"], "docstring": "Check exit code of the GPG operation.\n\n@param int $exitcode GPG process exit code\n\n@return int Internal error code", "docstring_tokens": ["Check", "exit", "code", "of", "the", "GPG", "operation", "."], "sha": "bf07ab51207446ed33ea0075083df9bbc2358617", "url": "https://github.com/pear/Crypt_GPG/blob/bf07ab51207446ed33ea0075083df9bbc2358617/Crypt/GPG/ProcessHandler.php#L775-L795", "partition": "test"}
{"repo": "census-ecosystem/opencensus-php-exporter-stackdriver", "path": "src/StackdriverExporter.php", "func_name": "StackdriverExporter.getCallback", "original_string": "protected function getCallback()\n    {\n        if (!isset(self::$client)) {\n            self::$client = new TraceClient($this->clientConfig);\n        }\n\n        return [self::$client, $this->batchMethod];\n    }", "language": "php", "code": "protected function getCallback()\n    {\n        if (!isset(self::$client)) {\n            self::$client = new TraceClient($this->clientConfig);\n        }\n\n        return [self::$client, $this->batchMethod];\n    }", "code_tokens": ["protected", "function", "getCallback", "(", ")", "{", "if", "(", "!", "isset", "(", "self", "::", "$", "client", ")", ")", "{", "self", "::", "$", "client", "=", "new", "TraceClient", "(", "$", "this", "->", "clientConfig", ")", ";", "}", "return", "[", "self", "::", "$", "client", ",", "$", "this", "->", "batchMethod", "]", ";", "}"], "docstring": "Returns an array representation of a callback which will be used to write\nbatch items.\n\n@return array", "docstring_tokens": ["Returns", "an", "array", "representation", "of", "a", "callback", "which", "will", "be", "used", "to", "write", "batch", "items", "."], "sha": "06269cf260594a71ed4c30be419d4f375bddd11c", "url": "https://github.com/census-ecosystem/opencensus-php-exporter-stackdriver/blob/06269cf260594a71ed4c30be419d4f375bddd11c/src/StackdriverExporter.php#L143-L150", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/Helper/SingleEventData.php", "func_name": "SingleEventData.dateParts", "original_string": "public static function dateParts($start_date)\n    {\n        $start = date('Y-m-d H:i:s', strtotime($start_date));\n        $date = array(\n            'date' => mysql2date('j', $start, true),\n            'month' => mysql2date('F', $start, true),\n            'month_short' => substr(mysql2date('F', $start, true), 0, 3),\n            'year' => mysql2date('Y', $start, true),\n            'time' => mysql2date('H:i', $start, true),\n        );\n\n        return $date;\n    }", "language": "php", "code": "public static function dateParts($start_date)\n    {\n        $start = date('Y-m-d H:i:s', strtotime($start_date));\n        $date = array(\n            'date' => mysql2date('j', $start, true),\n            'month' => mysql2date('F', $start, true),\n            'month_short' => substr(mysql2date('F', $start, true), 0, 3),\n            'year' => mysql2date('Y', $start, true),\n            'time' => mysql2date('H:i', $start, true),\n        );\n\n        return $date;\n    }", "code_tokens": ["public", "static", "function", "dateParts", "(", "$", "start_date", ")", "{", "$", "start", "=", "date", "(", "'Y-m-d H:i:s'", ",", "strtotime", "(", "$", "start_date", ")", ")", ";", "$", "date", "=", "array", "(", "'date'", "=>", "mysql2date", "(", "'j'", ",", "$", "start", ",", "true", ")", ",", "'month'", "=>", "mysql2date", "(", "'F'", ",", "$", "start", ",", "true", ")", ",", "'month_short'", "=>", "substr", "(", "mysql2date", "(", "'F'", ",", "$", "start", ",", "true", ")", ",", "0", ",", "3", ")", ",", "'year'", "=>", "mysql2date", "(", "'Y'", ",", "$", "start", ",", "true", ")", ",", "'time'", "=>", "mysql2date", "(", "'H:i'", ",", "$", "start", ",", "true", ")", ",", ")", ";", "return", "$", "date", ";", "}"], "docstring": "Get date parts as array\n@param  string $start_date event start date\n@return array              date values", "docstring_tokens": ["Get", "date", "parts", "as", "array"], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/Helper/SingleEventData.php#L90-L102", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/I18n/Time.php", "func_name": "Time.getAge", "original_string": "public function getAge()\n\t{\n\t\t$now  = Time::now()->getTimestamp();\n\t\t$time = $this->getTimestamp();\n\n\t\t// future dates have no age\n\t\treturn max(0, date('Y', $now) - date('Y', $time));\n\t}", "language": "php", "code": "public function getAge()\n\t{\n\t\t$now  = Time::now()->getTimestamp();\n\t\t$time = $this->getTimestamp();\n\n\t\t// future dates have no age\n\t\treturn max(0, date('Y', $now) - date('Y', $time));\n\t}", "code_tokens": ["public", "function", "getAge", "(", ")", "{", "$", "now", "=", "Time", "::", "now", "(", ")", "->", "getTimestamp", "(", ")", ";", "$", "time", "=", "$", "this", "->", "getTimestamp", "(", ")", ";", "// future dates have no age", "return", "max", "(", "0", ",", "date", "(", "'Y'", ",", "$", "now", ")", "-", "date", "(", "'Y'", ",", "$", "time", ")", ")", ";", "}"], "docstring": "Returns the age in years from the \"current\" date and 'now'\n@throws \\Exception", "docstring_tokens": ["Returns", "the", "age", "in", "years", "from", "the", "current", "date", "and", "now"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/I18n/Time.php#L551-L558", "partition": "test"}
{"repo": "cundd/noshi", "path": "Classes/Cundd/Noshi/Ui/Template.php", "func_name": "Template.resolveExpressionKeyPath", "original_string": "public function resolveExpressionKeyPath($keyPath)\n    {\n        if (isset($this->data[$keyPath])) {\n            return $this->data[$keyPath];\n        }\n\n        return ObjectUtility::valueForKeyPathOfObject($keyPath, $this->data);\n    }", "language": "php", "code": "public function resolveExpressionKeyPath($keyPath)\n    {\n        if (isset($this->data[$keyPath])) {\n            return $this->data[$keyPath];\n        }\n\n        return ObjectUtility::valueForKeyPathOfObject($keyPath, $this->data);\n    }", "code_tokens": ["public", "function", "resolveExpressionKeyPath", "(", "$", "keyPath", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "data", "[", "$", "keyPath", "]", ")", ")", "{", "return", "$", "this", "->", "data", "[", "$", "keyPath", "]", ";", "}", "return", "ObjectUtility", "::", "valueForKeyPathOfObject", "(", "$", "keyPath", ",", "$", "this", "->", "data", ")", ";", "}"], "docstring": "Returns the assigned variable value\n\n@param string $keyPath\n@return string", "docstring_tokens": ["Returns", "the", "assigned", "variable", "value"], "sha": "4c236ccd08532d81ab1f54fc0634ea0445c43388", "url": "https://github.com/cundd/noshi/blob/4c236ccd08532d81ab1f54fc0634ea0445c43388/Classes/Cundd/Noshi/Ui/Template.php#L131-L138", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Entity.php", "func_name": "Entity.castAsJson", "original_string": "private function castAsJson($value, bool $asArray = false)\n\t{\n\t\t$tmp = ! is_null($value) ? ($asArray ? [] : new \\stdClass) : null;\n\t\tif (function_exists('json_decode'))\n\t\t{\n\t\t\tif ((is_string($value) && (strpos($value, '[') === 0 || strpos($value, '{') === 0 || (strpos($value, '\"') === 0 && strrpos($value, '\"') === 0 ))) || is_numeric($value))\n\t\t\t{\n\t\t\t\t$tmp = json_decode($value, $asArray);\n\n\t\t\t\tif (json_last_error() !== JSON_ERROR_NONE)\n\t\t\t\t{\n\t\t\t\t\tthrow CastException::forInvalidJsonFormatException(json_last_error());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $tmp;\n\t}", "language": "php", "code": "private function castAsJson($value, bool $asArray = false)\n\t{\n\t\t$tmp = ! is_null($value) ? ($asArray ? [] : new \\stdClass) : null;\n\t\tif (function_exists('json_decode'))\n\t\t{\n\t\t\tif ((is_string($value) && (strpos($value, '[') === 0 || strpos($value, '{') === 0 || (strpos($value, '\"') === 0 && strrpos($value, '\"') === 0 ))) || is_numeric($value))\n\t\t\t{\n\t\t\t\t$tmp = json_decode($value, $asArray);\n\n\t\t\t\tif (json_last_error() !== JSON_ERROR_NONE)\n\t\t\t\t{\n\t\t\t\t\tthrow CastException::forInvalidJsonFormatException(json_last_error());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $tmp;\n\t}", "code_tokens": ["private", "function", "castAsJson", "(", "$", "value", ",", "bool", "$", "asArray", "=", "false", ")", "{", "$", "tmp", "=", "!", "is_null", "(", "$", "value", ")", "?", "(", "$", "asArray", "?", "[", "]", ":", "new", "\\", "stdClass", ")", ":", "null", ";", "if", "(", "function_exists", "(", "'json_decode'", ")", ")", "{", "if", "(", "(", "is_string", "(", "$", "value", ")", "&&", "(", "strpos", "(", "$", "value", ",", "'['", ")", "===", "0", "||", "strpos", "(", "$", "value", ",", "'{'", ")", "===", "0", "||", "(", "strpos", "(", "$", "value", ",", "'\"'", ")", "===", "0", "&&", "strrpos", "(", "$", "value", ",", "'\"'", ")", "===", "0", ")", ")", ")", "||", "is_numeric", "(", "$", "value", ")", ")", "{", "$", "tmp", "=", "json_decode", "(", "$", "value", ",", "$", "asArray", ")", ";", "if", "(", "json_last_error", "(", ")", "!==", "JSON_ERROR_NONE", ")", "{", "throw", "CastException", "::", "forInvalidJsonFormatException", "(", "json_last_error", "(", ")", ")", ";", "}", "}", "}", "return", "$", "tmp", ";", "}"], "docstring": "Cast as JSON\n\n@param mixed   $value\n@param boolean $asArray\n\n@return mixed\n@throws \\CodeIgniter\\Exceptions\\CastException", "docstring_tokens": ["Cast", "as", "JSON"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Entity.php#L585-L601", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Helper/MapHelper.php", "func_name": "MapHelper.renderJavascripts", "original_string": "public function renderJavascripts(Map $map)\n    {\n        $output = array();\n\n        if (!$map->isAsync()) {\n            $output[] = $this->renderJsLibraries($map);\n        }\n\n        $output[] = '<script type=\"text/javascript\">'.PHP_EOL;\n        $output[] = $this->renderJsBefore($map);\n        $output[] = $this->renderJsContainer($map);\n        $output[] = $this->renderJsAfter($map);\n        $output[] = '</script>'.PHP_EOL;\n\n        if ($map->isAsync()) {\n            $output[] = $this->renderJsLibraries($map);\n        }\n\n        return implode('', $output);\n    }", "language": "php", "code": "public function renderJavascripts(Map $map)\n    {\n        $output = array();\n\n        if (!$map->isAsync()) {\n            $output[] = $this->renderJsLibraries($map);\n        }\n\n        $output[] = '<script type=\"text/javascript\">'.PHP_EOL;\n        $output[] = $this->renderJsBefore($map);\n        $output[] = $this->renderJsContainer($map);\n        $output[] = $this->renderJsAfter($map);\n        $output[] = '</script>'.PHP_EOL;\n\n        if ($map->isAsync()) {\n            $output[] = $this->renderJsLibraries($map);\n        }\n\n        return implode('', $output);\n    }", "code_tokens": ["public", "function", "renderJavascripts", "(", "Map", "$", "map", ")", "{", "$", "output", "=", "array", "(", ")", ";", "if", "(", "!", "$", "map", "->", "isAsync", "(", ")", ")", "{", "$", "output", "[", "]", "=", "$", "this", "->", "renderJsLibraries", "(", "$", "map", ")", ";", "}", "$", "output", "[", "]", "=", "'<script type=\"text/javascript\">'", ".", "PHP_EOL", ";", "$", "output", "[", "]", "=", "$", "this", "->", "renderJsBefore", "(", "$", "map", ")", ";", "$", "output", "[", "]", "=", "$", "this", "->", "renderJsContainer", "(", "$", "map", ")", ";", "$", "output", "[", "]", "=", "$", "this", "->", "renderJsAfter", "(", "$", "map", ")", ";", "$", "output", "[", "]", "=", "'</script>'", ".", "PHP_EOL", ";", "if", "(", "$", "map", "->", "isAsync", "(", ")", ")", "{", "$", "output", "[", "]", "=", "$", "this", "->", "renderJsLibraries", "(", "$", "map", ")", ";", "}", "return", "implode", "(", "''", ",", "$", "output", ")", ";", "}"], "docstring": "Renders the map javascripts.\n\n@param \\Ivory\\GoogleMap\\Map $map The map.\n\n@return string The HTML output.", "docstring_tokens": ["Renders", "the", "map", "javascripts", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Helper/MapHelper.php#L953-L972", "partition": "test"}
{"repo": "perminder-klair/kato-core", "path": "modules/tag/models/Tag.php", "func_name": "Tag.listTags", "original_string": "public static function listTags($tagType = null, $limit = 30)\n    {\n        $model = self::find()\n            ->select('name')\n            ->orderBy('frequency DESC, Name')\n            ->limit($limit);\n            if (!is_null($tagType)) {\n                $data = $model->where('tag_type = :type', [':type' => $tagType])->all();\n            } else {\n                $data = $model->all();\n            }\n\n        $return = [''];\n        if (!empty($data)) {\n            foreach ($data as $tag) {\n                $return[] = $tag->name;\n            }\n        }\n        return $return;\n    }", "language": "php", "code": "public static function listTags($tagType = null, $limit = 30)\n    {\n        $model = self::find()\n            ->select('name')\n            ->orderBy('frequency DESC, Name')\n            ->limit($limit);\n            if (!is_null($tagType)) {\n                $data = $model->where('tag_type = :type', [':type' => $tagType])->all();\n            } else {\n                $data = $model->all();\n            }\n\n        $return = [''];\n        if (!empty($data)) {\n            foreach ($data as $tag) {\n                $return[] = $tag->name;\n            }\n        }\n        return $return;\n    }", "code_tokens": ["public", "static", "function", "listTags", "(", "$", "tagType", "=", "null", ",", "$", "limit", "=", "30", ")", "{", "$", "model", "=", "self", "::", "find", "(", ")", "->", "select", "(", "'name'", ")", "->", "orderBy", "(", "'frequency DESC, Name'", ")", "->", "limit", "(", "$", "limit", ")", ";", "if", "(", "!", "is_null", "(", "$", "tagType", ")", ")", "{", "$", "data", "=", "$", "model", "->", "where", "(", "'tag_type = :type'", ",", "[", "':type'", "=>", "$", "tagType", "]", ")", "->", "all", "(", ")", ";", "}", "else", "{", "$", "data", "=", "$", "model", "->", "all", "(", ")", ";", "}", "$", "return", "=", "[", "''", "]", ";", "if", "(", "!", "empty", "(", "$", "data", ")", ")", "{", "foreach", "(", "$", "data", "as", "$", "tag", ")", "{", "$", "return", "[", "]", "=", "$", "tag", "->", "name", ";", "}", "}", "return", "$", "return", ";", "}"], "docstring": "Returns array of tags by tag type\n@param null $tagType\n@param int $limit\n@return array", "docstring_tokens": ["Returns", "array", "of", "tags", "by", "tag", "type"], "sha": "168227027b857c90e8c5f24a2d591796b49ac9e7", "url": "https://github.com/perminder-klair/kato-core/blob/168227027b857c90e8c5f24a2d591796b49ac9e7/modules/tag/models/Tag.php#L59-L78", "partition": "test"}
{"repo": "nimbly/Limber", "path": "src/Middleware/MiddlewareManager.php", "func_name": "MiddlewareManager.run", "original_string": "public function run(Request $request, callable $kernel): Response\n    {\n        $next = array_reduce(array_reverse($this->middlewareStack), function(callable $next, MiddlewareLayerInterface $layer): \\Closure {\n\n            return function(Request $request) use ($next, $layer): Response {\n                return $layer->handle($request, $next);\n            };\n\n        }, function(Request $request) use ($kernel): Response {\n            return $kernel($request);\n        });\n\n        return $next($request);\n    }", "language": "php", "code": "public function run(Request $request, callable $kernel): Response\n    {\n        $next = array_reduce(array_reverse($this->middlewareStack), function(callable $next, MiddlewareLayerInterface $layer): \\Closure {\n\n            return function(Request $request) use ($next, $layer): Response {\n                return $layer->handle($request, $next);\n            };\n\n        }, function(Request $request) use ($kernel): Response {\n            return $kernel($request);\n        });\n\n        return $next($request);\n    }", "code_tokens": ["public", "function", "run", "(", "Request", "$", "request", ",", "callable", "$", "kernel", ")", ":", "Response", "{", "$", "next", "=", "array_reduce", "(", "array_reverse", "(", "$", "this", "->", "middlewareStack", ")", ",", "function", "(", "callable", "$", "next", ",", "MiddlewareLayerInterface", "$", "layer", ")", ":", "\\", "Closure", "{", "return", "function", "(", "Request", "$", "request", ")", "use", "(", "$", "next", ",", "$", "layer", ")", ":", "Response", "{", "return", "$", "layer", "->", "handle", "(", "$", "request", ",", "$", "next", ")", ";", "}", ";", "}", ",", "function", "(", "Request", "$", "request", ")", "use", "(", "$", "kernel", ")", ":", "Response", "{", "return", "$", "kernel", "(", "$", "request", ")", ";", "}", ")", ";", "return", "$", "next", "(", "$", "request", ")", ";", "}"], "docstring": "Run the middleware stack.\n\n@param Request $request\n@param callable $kernel\n@return Response", "docstring_tokens": ["Run", "the", "middleware", "stack", "."], "sha": "f5d4656e5b6ae8da479456f3e642e38d841d7b94", "url": "https://github.com/nimbly/Limber/blob/f5d4656e5b6ae8da479456f3e642e38d841d7b94/src/Middleware/MiddlewareManager.php#L67-L80", "partition": "test"}
{"repo": "monolyth-php/croney", "path": "src/Scheduler.php", "func_name": "Scheduler.offsetSet", "original_string": "public function offsetSet($name, $job)\n    {\n        if (!is_callable($job)) {\n            throw new InvalidArgumentException('Each job must be callable');\n        }\n        $this->jobs[$name] = $job;\n    }", "language": "php", "code": "public function offsetSet($name, $job)\n    {\n        if (!is_callable($job)) {\n            throw new InvalidArgumentException('Each job must be callable');\n        }\n        $this->jobs[$name] = $job;\n    }", "code_tokens": ["public", "function", "offsetSet", "(", "$", "name", ",", "$", "job", ")", "{", "if", "(", "!", "is_callable", "(", "$", "job", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Each job must be callable'", ")", ";", "}", "$", "this", "->", "jobs", "[", "$", "name", "]", "=", "$", "job", ";", "}"], "docstring": "Add a job to the schedule.\n\n@param string $name\n@param callable $job The job.", "docstring_tokens": ["Add", "a", "job", "to", "the", "schedule", "."], "sha": "008334d104d689e24af600b74151c9447a934438", "url": "https://github.com/monolyth-php/croney/blob/008334d104d689e24af600b74151c9447a934438/src/Scheduler.php#L46-L52", "partition": "test"}
{"repo": "sabre-io/xml", "path": "lib/Reader.php", "func_name": "Reader.parseGetElements", "original_string": "public function parseGetElements(array $elementMap = null): array\n    {\n        $result = $this->parseInnerTree($elementMap);\n        if (!is_array($result)) {\n            return [];\n        }\n\n        return $result;\n    }", "language": "php", "code": "public function parseGetElements(array $elementMap = null): array\n    {\n        $result = $this->parseInnerTree($elementMap);\n        if (!is_array($result)) {\n            return [];\n        }\n\n        return $result;\n    }", "code_tokens": ["public", "function", "parseGetElements", "(", "array", "$", "elementMap", "=", "null", ")", ":", "array", "{", "$", "result", "=", "$", "this", "->", "parseInnerTree", "(", "$", "elementMap", ")", ";", "if", "(", "!", "is_array", "(", "$", "result", ")", ")", "{", "return", "[", "]", ";", "}", "return", "$", "result", ";", "}"], "docstring": "parseGetElements parses everything in the current sub-tree,\nand returns a an array of elements.\n\nEach element has a 'name', 'value' and 'attributes' key.\n\nIf the the element didn't contain sub-elements, an empty array is always\nreturned. If there was any text inside the element, it will be\ndiscarded.\n\nIf the $elementMap argument is specified, the existing elementMap will\nbe overridden while parsing the tree, and restored after this process.", "docstring_tokens": ["parseGetElements", "parses", "everything", "in", "the", "current", "sub", "-", "tree", "and", "returns", "a", "an", "array", "of", "elements", "."], "sha": "e8e9bb3e46afe12262ffd0e994ffa7fd5e163893", "url": "https://github.com/sabre-io/xml/blob/e8e9bb3e46afe12262ffd0e994ffa7fd5e163893/lib/Reader.php#L100-L108", "partition": "test"}
{"repo": "pear/Crypt_GPG", "path": "Crypt/GPG.php", "func_name": "Crypt_GPG._importKey", "original_string": "protected function _importKey($key, $isFile)\n    {\n        $result    = array();\n        $arguments = array();\n        $input     = $this->_prepareInput($key, $isFile, false);\n        $version   = $this->engine->getVersion();\n\n        if (version_compare($version, '1.0.5', 'ge')\n            && version_compare($version, '1.0.7', 'lt')\n        ) {\n            $arguments[] = '--allow-secret-key-import';\n        }\n\n        if (empty($this->passphrases)) {\n            $arguments[] = '--batch';\n        }\n\n        $this->engine->reset();\n        $this->engine->setPins($this->passphrases);\n        $this->engine->setOperation('--import', $arguments);\n        $this->engine->setInput($input);\n        $this->engine->run();\n\n        return $this->engine->getProcessData('Import');\n    }", "language": "php", "code": "protected function _importKey($key, $isFile)\n    {\n        $result    = array();\n        $arguments = array();\n        $input     = $this->_prepareInput($key, $isFile, false);\n        $version   = $this->engine->getVersion();\n\n        if (version_compare($version, '1.0.5', 'ge')\n            && version_compare($version, '1.0.7', 'lt')\n        ) {\n            $arguments[] = '--allow-secret-key-import';\n        }\n\n        if (empty($this->passphrases)) {\n            $arguments[] = '--batch';\n        }\n\n        $this->engine->reset();\n        $this->engine->setPins($this->passphrases);\n        $this->engine->setOperation('--import', $arguments);\n        $this->engine->setInput($input);\n        $this->engine->run();\n\n        return $this->engine->getProcessData('Import');\n    }", "code_tokens": ["protected", "function", "_importKey", "(", "$", "key", ",", "$", "isFile", ")", "{", "$", "result", "=", "array", "(", ")", ";", "$", "arguments", "=", "array", "(", ")", ";", "$", "input", "=", "$", "this", "->", "_prepareInput", "(", "$", "key", ",", "$", "isFile", ",", "false", ")", ";", "$", "version", "=", "$", "this", "->", "engine", "->", "getVersion", "(", ")", ";", "if", "(", "version_compare", "(", "$", "version", ",", "'1.0.5'", ",", "'ge'", ")", "&&", "version_compare", "(", "$", "version", ",", "'1.0.7'", ",", "'lt'", ")", ")", "{", "$", "arguments", "[", "]", "=", "'--allow-secret-key-import'", ";", "}", "if", "(", "empty", "(", "$", "this", "->", "passphrases", ")", ")", "{", "$", "arguments", "[", "]", "=", "'--batch'", ";", "}", "$", "this", "->", "engine", "->", "reset", "(", ")", ";", "$", "this", "->", "engine", "->", "setPins", "(", "$", "this", "->", "passphrases", ")", ";", "$", "this", "->", "engine", "->", "setOperation", "(", "'--import'", ",", "$", "arguments", ")", ";", "$", "this", "->", "engine", "->", "setInput", "(", "$", "input", ")", ";", "$", "this", "->", "engine", "->", "run", "(", ")", ";", "return", "$", "this", "->", "engine", "->", "getProcessData", "(", "'Import'", ")", ";", "}"], "docstring": "Imports a public or private key into the keyring\n\n@param string  $key    the key to be imported.\n@param boolean $isFile whether or not the input is a filename.\n\n@return array an associative array containing the following elements:\n- <kbd>fingerprint</kbd>       - the fingerprint of the\nimported key,\n- <kbd>public_imported</kbd>   - the number of public\nkeys imported,\n- <kbd>public_unchanged</kbd>  - the number of unchanged\npublic keys,\n- <kbd>private_imported</kbd>  - the number of private\nkeys imported,\n- <kbd>private_unchanged</kbd> - the number of unchanged\nprivate keys.\n\n@throws Crypt_GPG_NoDataException if the key data is missing or if the\ndata is is not valid key data.\n\n@throws Crypt_GPG_FileException if the key file is not readable.\n\n@throws Crypt_GPG_BadPassphraseException if a required passphrase is\nincorrect or if a required passphrase is not specified. See\n{@link Crypt_GPG::addPassphrase()}.\n\n@throws Crypt_GPG_Exception if an unknown or unexpected error occurs.\nUse the <kbd>debug</kbd> option and file a bug report if these\nexceptions occur.", "docstring_tokens": ["Imports", "a", "public", "or", "private", "key", "into", "the", "keyring"], "sha": "bf07ab51207446ed33ea0075083df9bbc2358617", "url": "https://github.com/pear/Crypt_GPG/blob/bf07ab51207446ed33ea0075083df9bbc2358617/Crypt/GPG.php#L1517-L1541", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Helper/Overlays/MarkerImageHelper.php", "func_name": "MarkerImageHelper.render", "original_string": "public function render(MarkerImage $markerImage)\n    {\n        return sprintf(\n            '%s = new google.maps.MarkerImage(\"%s\", %s, %s, %s, %s);'.PHP_EOL,\n            $markerImage->getJavascriptVariable(),\n            $markerImage->getUrl(),\n            $markerImage->hasSize() ? $markerImage->getSize()->getJavascriptVariable() : 'null',\n            $markerImage->hasOrigin() ? $markerImage->getOrigin()->getJavascriptVariable() : 'null',\n            $markerImage->hasAnchor() ? $markerImage->getAnchor()->getJavascriptVariable() : 'null',\n            $markerImage->hasScaledSize() ? $markerImage->getScaledSize()->getJavascriptVariable() : 'null'\n        );\n    }", "language": "php", "code": "public function render(MarkerImage $markerImage)\n    {\n        return sprintf(\n            '%s = new google.maps.MarkerImage(\"%s\", %s, %s, %s, %s);'.PHP_EOL,\n            $markerImage->getJavascriptVariable(),\n            $markerImage->getUrl(),\n            $markerImage->hasSize() ? $markerImage->getSize()->getJavascriptVariable() : 'null',\n            $markerImage->hasOrigin() ? $markerImage->getOrigin()->getJavascriptVariable() : 'null',\n            $markerImage->hasAnchor() ? $markerImage->getAnchor()->getJavascriptVariable() : 'null',\n            $markerImage->hasScaledSize() ? $markerImage->getScaledSize()->getJavascriptVariable() : 'null'\n        );\n    }", "code_tokens": ["public", "function", "render", "(", "MarkerImage", "$", "markerImage", ")", "{", "return", "sprintf", "(", "'%s = new google.maps.MarkerImage(\"%s\", %s, %s, %s, %s);'", ".", "PHP_EOL", ",", "$", "markerImage", "->", "getJavascriptVariable", "(", ")", ",", "$", "markerImage", "->", "getUrl", "(", ")", ",", "$", "markerImage", "->", "hasSize", "(", ")", "?", "$", "markerImage", "->", "getSize", "(", ")", "->", "getJavascriptVariable", "(", ")", ":", "'null'", ",", "$", "markerImage", "->", "hasOrigin", "(", ")", "?", "$", "markerImage", "->", "getOrigin", "(", ")", "->", "getJavascriptVariable", "(", ")", ":", "'null'", ",", "$", "markerImage", "->", "hasAnchor", "(", ")", "?", "$", "markerImage", "->", "getAnchor", "(", ")", "->", "getJavascriptVariable", "(", ")", ":", "'null'", ",", "$", "markerImage", "->", "hasScaledSize", "(", ")", "?", "$", "markerImage", "->", "getScaledSize", "(", ")", "->", "getJavascriptVariable", "(", ")", ":", "'null'", ")", ";", "}"], "docstring": "Renders a marker image.\n\n@param \\Ivory\\GoogleMap\\Overlays\\MarkerImage $markerImage The marker image.\n\n@return string The JS output.", "docstring_tokens": ["Renders", "a", "marker", "image", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Helper/Overlays/MarkerImageHelper.php#L30-L41", "partition": "test"}
{"repo": "iNem0o/PicORM", "path": "src/PicORM/Collection.php", "func_name": "Collection.offsetExists", "original_string": "public function offsetExists($offset)\n    {\n        if (!$this->isFetched) {\n            $this->fetch();\n        }\n\n        return isset($this->models[$offset]);\n    }", "language": "php", "code": "public function offsetExists($offset)\n    {\n        if (!$this->isFetched) {\n            $this->fetch();\n        }\n\n        return isset($this->models[$offset]);\n    }", "code_tokens": ["public", "function", "offsetExists", "(", "$", "offset", ")", "{", "if", "(", "!", "$", "this", "->", "isFetched", ")", "{", "$", "this", "->", "fetch", "(", ")", ";", "}", "return", "isset", "(", "$", "this", "->", "models", "[", "$", "offset", "]", ")", ";", "}"], "docstring": "Whether a offset exists\n\n@param mixed $offset - Offset name to test\n\n@return bool", "docstring_tokens": ["Whether", "a", "offset", "exists"], "sha": "0bf6c5b359d5fcb098b43d3ea3bf99839bee8b9f", "url": "https://github.com/iNem0o/PicORM/blob/0bf6c5b359d5fcb098b43d3ea3bf99839bee8b9f/src/PicORM/Collection.php#L497-L504", "partition": "test"}
{"repo": "dusterio/link-preview", "path": "src/Client.php", "func_name": "Client.getPreview", "original_string": "public function getPreview($parserId)\n    {\n        if (array_key_exists($parserId, $this->getParsers())) {\n            $parser = $this->getParsers()[$parserId];\n        } else throw new UnknownParserException();\n\n        return $parser->parseLink($this->link)->getPreview();\n    }", "language": "php", "code": "public function getPreview($parserId)\n    {\n        if (array_key_exists($parserId, $this->getParsers())) {\n            $parser = $this->getParsers()[$parserId];\n        } else throw new UnknownParserException();\n\n        return $parser->parseLink($this->link)->getPreview();\n    }", "code_tokens": ["public", "function", "getPreview", "(", "$", "parserId", ")", "{", "if", "(", "array_key_exists", "(", "$", "parserId", ",", "$", "this", "->", "getParsers", "(", ")", ")", ")", "{", "$", "parser", "=", "$", "this", "->", "getParsers", "(", ")", "[", "$", "parserId", "]", ";", "}", "else", "throw", "new", "UnknownParserException", "(", ")", ";", "return", "$", "parser", "->", "parseLink", "(", "$", "this", "->", "link", ")", "->", "getPreview", "(", ")", ";", "}"], "docstring": "Get a preview from a single parser\n@param string $parserId\n@throws UnknownParserException\n@return PreviewInterface|boolean", "docstring_tokens": ["Get", "a", "preview", "from", "a", "single", "parser"], "sha": "0c1bbff112e66c2f7a9ca72c5855f892fd26fdab", "url": "https://github.com/dusterio/link-preview/blob/0c1bbff112e66c2f7a9ca72c5855f892fd26fdab/src/Client.php#L56-L63", "partition": "test"}
{"repo": "the-control-group/voyager", "path": "src/Http/Controllers/VoyagerBreadController.php", "func_name": "VoyagerBreadController.store", "original_string": "public function store(Request $request)\n    {\n        $this->authorize('browse_bread');\n\n        try {\n            $dataType = Voyager::model('DataType');\n            $res = $dataType->updateDataType($request->all(), true);\n            $data = $res\n                ? $this->alertSuccess(__('voyager::bread.success_created_bread'))\n                : $this->alertError(__('voyager::bread.error_creating_bread'));\n            if ($res) {\n                event(new BreadAdded($dataType, $data));\n            }\n\n            return redirect()->route('voyager.bread.index')->with($data);\n        } catch (Exception $e) {\n            return redirect()->route('voyager.bread.index')->with($this->alertException($e, 'Saving Failed'));\n        }\n    }", "language": "php", "code": "public function store(Request $request)\n    {\n        $this->authorize('browse_bread');\n\n        try {\n            $dataType = Voyager::model('DataType');\n            $res = $dataType->updateDataType($request->all(), true);\n            $data = $res\n                ? $this->alertSuccess(__('voyager::bread.success_created_bread'))\n                : $this->alertError(__('voyager::bread.error_creating_bread'));\n            if ($res) {\n                event(new BreadAdded($dataType, $data));\n            }\n\n            return redirect()->route('voyager.bread.index')->with($data);\n        } catch (Exception $e) {\n            return redirect()->route('voyager.bread.index')->with($this->alertException($e, 'Saving Failed'));\n        }\n    }", "code_tokens": ["public", "function", "store", "(", "Request", "$", "request", ")", "{", "$", "this", "->", "authorize", "(", "'browse_bread'", ")", ";", "try", "{", "$", "dataType", "=", "Voyager", "::", "model", "(", "'DataType'", ")", ";", "$", "res", "=", "$", "dataType", "->", "updateDataType", "(", "$", "request", "->", "all", "(", ")", ",", "true", ")", ";", "$", "data", "=", "$", "res", "?", "$", "this", "->", "alertSuccess", "(", "__", "(", "'voyager::bread.success_created_bread'", ")", ")", ":", "$", "this", "->", "alertError", "(", "__", "(", "'voyager::bread.error_creating_bread'", ")", ")", ";", "if", "(", "$", "res", ")", "{", "event", "(", "new", "BreadAdded", "(", "$", "dataType", ",", "$", "data", ")", ")", ";", "}", "return", "redirect", "(", ")", "->", "route", "(", "'voyager.bread.index'", ")", "->", "with", "(", "$", "data", ")", ";", "}", "catch", "(", "Exception", "$", "e", ")", "{", "return", "redirect", "(", ")", "->", "route", "(", "'voyager.bread.index'", ")", "->", "with", "(", "$", "this", "->", "alertException", "(", "$", "e", ",", "'Saving Failed'", ")", ")", ";", "}", "}"], "docstring": "Store BREAD.\n\n@param \\Illuminate\\Http\\Request $request\n\n@return \\Illuminate\\Http\\RedirectResponse", "docstring_tokens": ["Store", "BREAD", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Http/Controllers/VoyagerBreadController.php#L90-L108", "partition": "test"}
{"repo": "Cecilapp/PHPoole", "path": "src/Builder.php", "func_name": "Builder.build", "original_string": "public function build($options)\n    {\n        // backward compatibility\n        if ($options === true) {\n            $options['verbosity'] = self::VERBOSITY_VERBOSE;\n        }\n        $this->options = array_merge([\n            'verbosity' => self::VERBOSITY_NORMAL, // -1: quiet, 0: normal, 1: verbose, 2: debug\n            'drafts'    => false, // build drafts or not\n            'dry-run'   => false, // if dry-run is true, generated files are not saved\n        ], $options);\n\n        $steps = [];\n        // init...\n        foreach ($this->steps as $step) {\n            /* @var $stepClass Step\\StepInterface */\n            $stepClass = new $step($this);\n            $stepClass->init($this->options);\n            $steps[] = $stepClass;\n        }\n        $this->steps = $steps;\n        // ... and process!\n        foreach ($this->steps as $step) {\n            /* @var $step Step\\StepInterface */\n            $step->runProcess();\n        }\n        // show process time\n        call_user_func_array($this->messageCallback, [\n            'TIME',\n            sprintf('Built in %ss', round(microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'], 2)),\n        ]);\n        // show log\n        $this->showLog($this->options['verbosity']);\n\n        return $this;\n    }", "language": "php", "code": "public function build($options)\n    {\n        // backward compatibility\n        if ($options === true) {\n            $options['verbosity'] = self::VERBOSITY_VERBOSE;\n        }\n        $this->options = array_merge([\n            'verbosity' => self::VERBOSITY_NORMAL, // -1: quiet, 0: normal, 1: verbose, 2: debug\n            'drafts'    => false, // build drafts or not\n            'dry-run'   => false, // if dry-run is true, generated files are not saved\n        ], $options);\n\n        $steps = [];\n        // init...\n        foreach ($this->steps as $step) {\n            /* @var $stepClass Step\\StepInterface */\n            $stepClass = new $step($this);\n            $stepClass->init($this->options);\n            $steps[] = $stepClass;\n        }\n        $this->steps = $steps;\n        // ... and process!\n        foreach ($this->steps as $step) {\n            /* @var $step Step\\StepInterface */\n            $step->runProcess();\n        }\n        // show process time\n        call_user_func_array($this->messageCallback, [\n            'TIME',\n            sprintf('Built in %ss', round(microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'], 2)),\n        ]);\n        // show log\n        $this->showLog($this->options['verbosity']);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "build", "(", "$", "options", ")", "{", "// backward compatibility", "if", "(", "$", "options", "===", "true", ")", "{", "$", "options", "[", "'verbosity'", "]", "=", "self", "::", "VERBOSITY_VERBOSE", ";", "}", "$", "this", "->", "options", "=", "array_merge", "(", "[", "'verbosity'", "=>", "self", "::", "VERBOSITY_NORMAL", ",", "// -1: quiet, 0: normal, 1: verbose, 2: debug", "'drafts'", "=>", "false", ",", "// build drafts or not", "'dry-run'", "=>", "false", ",", "// if dry-run is true, generated files are not saved", "]", ",", "$", "options", ")", ";", "$", "steps", "=", "[", "]", ";", "// init...", "foreach", "(", "$", "this", "->", "steps", "as", "$", "step", ")", "{", "/* @var $stepClass Step\\StepInterface */", "$", "stepClass", "=", "new", "$", "step", "(", "$", "this", ")", ";", "$", "stepClass", "->", "init", "(", "$", "this", "->", "options", ")", ";", "$", "steps", "[", "]", "=", "$", "stepClass", ";", "}", "$", "this", "->", "steps", "=", "$", "steps", ";", "// ... and process!", "foreach", "(", "$", "this", "->", "steps", "as", "$", "step", ")", "{", "/* @var $step Step\\StepInterface */", "$", "step", "->", "runProcess", "(", ")", ";", "}", "// show process time", "call_user_func_array", "(", "$", "this", "->", "messageCallback", ",", "[", "'TIME'", ",", "sprintf", "(", "'Built in %ss'", ",", "round", "(", "microtime", "(", "true", ")", "-", "$", "_SERVER", "[", "'REQUEST_TIME_FLOAT'", "]", ",", "2", ")", ")", ",", "]", ")", ";", "// show log", "$", "this", "->", "showLog", "(", "$", "this", "->", "options", "[", "'verbosity'", "]", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Builds a new website.\n\n@param array $options\n\n@return $this", "docstring_tokens": ["Builds", "a", "new", "website", "."], "sha": "ac921557e4c61ef649bf5c41011f72dc890a2e9f", "url": "https://github.com/Cecilapp/PHPoole/blob/ac921557e4c61ef649bf5c41011f72dc890a2e9f/src/Builder.php#L364-L399", "partition": "test"}
{"repo": "php-carteblanche/core", "path": "src/CarteBlanche/Library/AutoObject/AutoObjectMapper.php", "func_name": "AutoObjectMapper.buildObjectsStructure", "original_string": "protected function buildObjectsStructure($dbname = null)\n    {\n        $dbname = str_replace(array(CarteBlanche::getPath('root_path'), CarteBlanche::getPath('config_dir')), '', $dbname);\n        $tables_def = CarteBlanche::getConfig($dbname.'_database.db_structure');\n        $tables_def_file = Locator::locateConfig($tables_def);\n\n        if ($tables_def_file && @file_exists($tables_def_file) && @is_file($tables_def_file)) {\n            $table = array();\n            include $tables_def_file;\n            if (!empty($tables)) {\n                $tables_stacks=array();\n                foreach ($tables as $_tbl) {\n                    $_t_n = $_tbl['table'];\n                    $tables_stacks[$_t_n] = new \\CarteBlanche\\Library\\AutoObject\\AutoObject( $_t_n, $_tbl, $_t_n, $dbname );\n                    $this->registry->setEntry(\n                        $_tbl['table'],\n                        $tables_stacks[$_t_n],\n                        $dbname\n                    );\n                }\n                return $tables_stacks;\n            } else\n                throw new \\RuntimeException(\n                    sprintf('Tables definition can\\'t be found in file \"%s\"!', $tables_def)\n                );\n        } else\n            throw new \\RuntimeException(\n                sprintf('Tables definition file \"%s\" can\\'t be found!', $tables_def)\n            );\n    }", "language": "php", "code": "protected function buildObjectsStructure($dbname = null)\n    {\n        $dbname = str_replace(array(CarteBlanche::getPath('root_path'), CarteBlanche::getPath('config_dir')), '', $dbname);\n        $tables_def = CarteBlanche::getConfig($dbname.'_database.db_structure');\n        $tables_def_file = Locator::locateConfig($tables_def);\n\n        if ($tables_def_file && @file_exists($tables_def_file) && @is_file($tables_def_file)) {\n            $table = array();\n            include $tables_def_file;\n            if (!empty($tables)) {\n                $tables_stacks=array();\n                foreach ($tables as $_tbl) {\n                    $_t_n = $_tbl['table'];\n                    $tables_stacks[$_t_n] = new \\CarteBlanche\\Library\\AutoObject\\AutoObject( $_t_n, $_tbl, $_t_n, $dbname );\n                    $this->registry->setEntry(\n                        $_tbl['table'],\n                        $tables_stacks[$_t_n],\n                        $dbname\n                    );\n                }\n                return $tables_stacks;\n            } else\n                throw new \\RuntimeException(\n                    sprintf('Tables definition can\\'t be found in file \"%s\"!', $tables_def)\n                );\n        } else\n            throw new \\RuntimeException(\n                sprintf('Tables definition file \"%s\" can\\'t be found!', $tables_def)\n            );\n    }", "code_tokens": ["protected", "function", "buildObjectsStructure", "(", "$", "dbname", "=", "null", ")", "{", "$", "dbname", "=", "str_replace", "(", "array", "(", "CarteBlanche", "::", "getPath", "(", "'root_path'", ")", ",", "CarteBlanche", "::", "getPath", "(", "'config_dir'", ")", ")", ",", "''", ",", "$", "dbname", ")", ";", "$", "tables_def", "=", "CarteBlanche", "::", "getConfig", "(", "$", "dbname", ".", "'_database.db_structure'", ")", ";", "$", "tables_def_file", "=", "Locator", "::", "locateConfig", "(", "$", "tables_def", ")", ";", "if", "(", "$", "tables_def_file", "&&", "@", "file_exists", "(", "$", "tables_def_file", ")", "&&", "@", "is_file", "(", "$", "tables_def_file", ")", ")", "{", "$", "table", "=", "array", "(", ")", ";", "include", "$", "tables_def_file", ";", "if", "(", "!", "empty", "(", "$", "tables", ")", ")", "{", "$", "tables_stacks", "=", "array", "(", ")", ";", "foreach", "(", "$", "tables", "as", "$", "_tbl", ")", "{", "$", "_t_n", "=", "$", "_tbl", "[", "'table'", "]", ";", "$", "tables_stacks", "[", "$", "_t_n", "]", "=", "new", "\\", "CarteBlanche", "\\", "Library", "\\", "AutoObject", "\\", "AutoObject", "(", "$", "_t_n", ",", "$", "_tbl", ",", "$", "_t_n", ",", "$", "dbname", ")", ";", "$", "this", "->", "registry", "->", "setEntry", "(", "$", "_tbl", "[", "'table'", "]", ",", "$", "tables_stacks", "[", "$", "_t_n", "]", ",", "$", "dbname", ")", ";", "}", "return", "$", "tables_stacks", ";", "}", "else", "throw", "new", "\\", "RuntimeException", "(", "sprintf", "(", "'Tables definition can\\'t be found in file \"%s\"!'", ",", "$", "tables_def", ")", ")", ";", "}", "else", "throw", "new", "\\", "RuntimeException", "(", "sprintf", "(", "'Tables definition file \"%s\" can\\'t be found!'", ",", "$", "tables_def", ")", ")", ";", "}"], "docstring": "Build the objects structure from a specific entity\n@param string $dbname The name of the database to build\n@return array Returns an array of the objects structure (FALSE if nothing is found)", "docstring_tokens": ["Build", "the", "objects", "structure", "from", "a", "specific", "entity"], "sha": "b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343", "url": "https://github.com/php-carteblanche/core/blob/b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343/src/CarteBlanche/Library/AutoObject/AutoObjectMapper.php#L231-L260", "partition": "test"}
{"repo": "tekkla/core-toolbox", "path": "Core/Toolbox/Arrays/Flatten.php", "func_name": "Flatten.process", "original_string": "private function process(array $array, $prefix = '')\n    {\n        $result = [];\n\n        foreach ($array as $key => $value) {\n\n            // Subarrray handling needed?\n            if (is_array($value)) {\n\n                // __preserve key set tha signals us to store the array as it is?\n                if ($this->preserve_flagged_arrays && array_key_exists('__preserve', $value)) {\n                    $result[$prefix . $key . $this->glue . 'array'] = $value;\n                    unset($value['__preserve']);\n                }\n\n                // Flatten the array\n                $result = $result + $this->process($value, $prefix . $key . $this->glue, $this->glue, $this->preserve_flagged_arrays);\n            }\n            else {\n                $result[$prefix . $key] = $value;\n            }\n        }\n        return $result;\n    }", "language": "php", "code": "private function process(array $array, $prefix = '')\n    {\n        $result = [];\n\n        foreach ($array as $key => $value) {\n\n            // Subarrray handling needed?\n            if (is_array($value)) {\n\n                // __preserve key set tha signals us to store the array as it is?\n                if ($this->preserve_flagged_arrays && array_key_exists('__preserve', $value)) {\n                    $result[$prefix . $key . $this->glue . 'array'] = $value;\n                    unset($value['__preserve']);\n                }\n\n                // Flatten the array\n                $result = $result + $this->process($value, $prefix . $key . $this->glue, $this->glue, $this->preserve_flagged_arrays);\n            }\n            else {\n                $result[$prefix . $key] = $value;\n            }\n        }\n        return $result;\n    }", "code_tokens": ["private", "function", "process", "(", "array", "$", "array", ",", "$", "prefix", "=", "''", ")", "{", "$", "result", "=", "[", "]", ";", "foreach", "(", "$", "array", "as", "$", "key", "=>", "$", "value", ")", "{", "// Subarrray handling needed?", "if", "(", "is_array", "(", "$", "value", ")", ")", "{", "// __preserve key set tha signals us to store the array as it is?", "if", "(", "$", "this", "->", "preserve_flagged_arrays", "&&", "array_key_exists", "(", "'__preserve'", ",", "$", "value", ")", ")", "{", "$", "result", "[", "$", "prefix", ".", "$", "key", ".", "$", "this", "->", "glue", ".", "'array'", "]", "=", "$", "value", ";", "unset", "(", "$", "value", "[", "'__preserve'", "]", ")", ";", "}", "// Flatten the array", "$", "result", "=", "$", "result", "+", "$", "this", "->", "process", "(", "$", "value", ",", "$", "prefix", ".", "$", "key", ".", "$", "this", "->", "glue", ",", "$", "this", "->", "glue", ",", "$", "this", "->", "preserve_flagged_arrays", ")", ";", "}", "else", "{", "$", "result", "[", "$", "prefix", ".", "$", "key", "]", "=", "$", "value", ";", "}", "}", "return", "$", "result", ";", "}"], "docstring": "Flattens a multidimensional array by using a glue\n\n@param array $array\nThe array to flatten\n@param string $glue\nOptional glue to get flattened array with this glue as return value\n@param boolean $preserve_flagged_arrays\nWith this optional flag and a set __preserve key in the array the array will be still flattended but\nalso be stored as array with an ending .array key. Those arrays will not be flattened further more.\nThis means any nesting array will stay arrays in this array.\n\n@return string|array", "docstring_tokens": ["Flattens", "a", "multidimensional", "array", "by", "using", "a", "glue"], "sha": "c21ad38c54ff57e7ce57dc01dbfa72b4005889e4", "url": "https://github.com/tekkla/core-toolbox/blob/c21ad38c54ff57e7ce57dc01dbfa72b4005889e4/Core/Toolbox/Arrays/Flatten.php#L101-L124", "partition": "test"}
{"repo": "symbiote/silverstripe-queuedjobs", "path": "src/Jobs/PublishItemsJob.php", "func_name": "PublishItemsJob.process", "original_string": "public function process()\n    {\n        $remainingChildren = $this->remainingChildren;\n\n        // if there's no more, we're done!\n        if (!count($remainingChildren)) {\n            $this->isComplete = true;\n            return;\n        }\n\n        // we need to always increment! This is important, because if we don't then our container\n        // that executes around us thinks that the job has died, and will stop it running.\n        $this->currentStep++;\n\n        // lets process our first item - note that we take it off the list of things left to do\n        $ID = array_shift($remainingChildren);\n\n        // get the page\n        $page = DataObject::get_by_id(Page::class, $ID);\n        if ($page) {\n            // publish it\n            $page->doPublish();\n\n            // and add its children to the list to be published\n            foreach ($page->Children() as $child) {\n                $remainingChildren[] = $child->ID;\n                // we increase how many steps we need to do - this means our total steps constantly rises,\n                // but it gives users an idea of exactly how many more we know about\n                $this->totalSteps++;\n            }\n            $page->destroy();\n            unset($page);\n        }\n\n        // and now we store the new list of remaining children\n        $this->remainingChildren = $remainingChildren;\n\n        if (!count($remainingChildren)) {\n            $this->isComplete = true;\n            return;\n        }\n    }", "language": "php", "code": "public function process()\n    {\n        $remainingChildren = $this->remainingChildren;\n\n        // if there's no more, we're done!\n        if (!count($remainingChildren)) {\n            $this->isComplete = true;\n            return;\n        }\n\n        // we need to always increment! This is important, because if we don't then our container\n        // that executes around us thinks that the job has died, and will stop it running.\n        $this->currentStep++;\n\n        // lets process our first item - note that we take it off the list of things left to do\n        $ID = array_shift($remainingChildren);\n\n        // get the page\n        $page = DataObject::get_by_id(Page::class, $ID);\n        if ($page) {\n            // publish it\n            $page->doPublish();\n\n            // and add its children to the list to be published\n            foreach ($page->Children() as $child) {\n                $remainingChildren[] = $child->ID;\n                // we increase how many steps we need to do - this means our total steps constantly rises,\n                // but it gives users an idea of exactly how many more we know about\n                $this->totalSteps++;\n            }\n            $page->destroy();\n            unset($page);\n        }\n\n        // and now we store the new list of remaining children\n        $this->remainingChildren = $remainingChildren;\n\n        if (!count($remainingChildren)) {\n            $this->isComplete = true;\n            return;\n        }\n    }", "code_tokens": ["public", "function", "process", "(", ")", "{", "$", "remainingChildren", "=", "$", "this", "->", "remainingChildren", ";", "// if there's no more, we're done!", "if", "(", "!", "count", "(", "$", "remainingChildren", ")", ")", "{", "$", "this", "->", "isComplete", "=", "true", ";", "return", ";", "}", "// we need to always increment! This is important, because if we don't then our container", "// that executes around us thinks that the job has died, and will stop it running.", "$", "this", "->", "currentStep", "++", ";", "// lets process our first item - note that we take it off the list of things left to do", "$", "ID", "=", "array_shift", "(", "$", "remainingChildren", ")", ";", "// get the page", "$", "page", "=", "DataObject", "::", "get_by_id", "(", "Page", "::", "class", ",", "$", "ID", ")", ";", "if", "(", "$", "page", ")", "{", "// publish it", "$", "page", "->", "doPublish", "(", ")", ";", "// and add its children to the list to be published", "foreach", "(", "$", "page", "->", "Children", "(", ")", "as", "$", "child", ")", "{", "$", "remainingChildren", "[", "]", "=", "$", "child", "->", "ID", ";", "// we increase how many steps we need to do - this means our total steps constantly rises,", "// but it gives users an idea of exactly how many more we know about", "$", "this", "->", "totalSteps", "++", ";", "}", "$", "page", "->", "destroy", "(", ")", ";", "unset", "(", "$", "page", ")", ";", "}", "// and now we store the new list of remaining children", "$", "this", "->", "remainingChildren", "=", "$", "remainingChildren", ";", "if", "(", "!", "count", "(", "$", "remainingChildren", ")", ")", "{", "$", "this", "->", "isComplete", "=", "true", ";", "return", ";", "}", "}"], "docstring": "Lets process a single node, and publish it if necessary", "docstring_tokens": ["Lets", "process", "a", "single", "node", "and", "publish", "it", "if", "necessary"], "sha": "897149ebb689ab2304356048251b2f7c3db659b7", "url": "https://github.com/symbiote/silverstripe-queuedjobs/blob/897149ebb689ab2304356048251b2f7c3db659b7/src/Jobs/PublishItemsJob.php#L103-L144", "partition": "test"}
{"repo": "pear/Crypt_GPG", "path": "Crypt/GPG/Engine.php", "func_name": "Crypt_GPG_Engine.setPins", "original_string": "public function setPins(array $keys)\n    {\n        $envKeys = array();\n\n        foreach ($keys as $keyId => $key) {\n            $envKeys[$keyId] = is_array($key) ? $key['passphrase'] : $key;\n        }\n\n        $_ENV['PINENTRY_USER_DATA'] = json_encode($envKeys);\n    }", "language": "php", "code": "public function setPins(array $keys)\n    {\n        $envKeys = array();\n\n        foreach ($keys as $keyId => $key) {\n            $envKeys[$keyId] = is_array($key) ? $key['passphrase'] : $key;\n        }\n\n        $_ENV['PINENTRY_USER_DATA'] = json_encode($envKeys);\n    }", "code_tokens": ["public", "function", "setPins", "(", "array", "$", "keys", ")", "{", "$", "envKeys", "=", "array", "(", ")", ";", "foreach", "(", "$", "keys", "as", "$", "keyId", "=>", "$", "key", ")", "{", "$", "envKeys", "[", "$", "keyId", "]", "=", "is_array", "(", "$", "key", ")", "?", "$", "key", "[", "'passphrase'", "]", ":", "$", "key", ";", "}", "$", "_ENV", "[", "'PINENTRY_USER_DATA'", "]", "=", "json_encode", "(", "$", "envKeys", ")", ";", "}"], "docstring": "Sets the PINENTRY_USER_DATA environment variable with the currently\nadded keys and passphrases\n\nKeys and passphrases are stored as an indexed array of passphrases\nin JSON encoded to a flat string.\n\nFor GnuPG 2.x this is how passphrases are passed. For GnuPG 1.x the\nenvironment variable is set but not used.\n\n@param array $keys the internal key array to use.\n\n@return void", "docstring_tokens": ["Sets", "the", "PINENTRY_USER_DATA", "environment", "variable", "with", "the", "currently", "added", "keys", "and", "passphrases"], "sha": "bf07ab51207446ed33ea0075083df9bbc2358617", "url": "https://github.com/pear/Crypt_GPG/blob/bf07ab51207446ed33ea0075083df9bbc2358617/Crypt/GPG/Engine.php#L964-L973", "partition": "test"}
{"repo": "php-carteblanche/core", "path": "src/CarteBlanche/Library/StorageEngine/Database.php", "func_name": "Database.table_exists", "original_string": "public function table_exists($tablename = null)\n    {\n        if (!empty($tablename)) {\n            if (isset($this->tables[$tablename])) return true;\n            $query = \"SELECT name FROM sqlite_master WHERE name='{$tablename}'\";\n            $results = $this->query($query);\n            if ($results && $results->numRows()) {\n                $this->tables[$tablename] = true;\n                return true;\n            }\n        }\n        return false;\n    }", "language": "php", "code": "public function table_exists($tablename = null)\n    {\n        if (!empty($tablename)) {\n            if (isset($this->tables[$tablename])) return true;\n            $query = \"SELECT name FROM sqlite_master WHERE name='{$tablename}'\";\n            $results = $this->query($query);\n            if ($results && $results->numRows()) {\n                $this->tables[$tablename] = true;\n                return true;\n            }\n        }\n        return false;\n    }", "code_tokens": ["public", "function", "table_exists", "(", "$", "tablename", "=", "null", ")", "{", "if", "(", "!", "empty", "(", "$", "tablename", ")", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "tables", "[", "$", "tablename", "]", ")", ")", "return", "true", ";", "$", "query", "=", "\"SELECT name FROM sqlite_master WHERE name='{$tablename}'\"", ";", "$", "results", "=", "$", "this", "->", "query", "(", "$", "query", ")", ";", "if", "(", "$", "results", "&&", "$", "results", "->", "numRows", "(", ")", ")", "{", "$", "this", "->", "tables", "[", "$", "tablename", "]", "=", "true", ";", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Check if a table exists in the database\n\n@param string $tablename The new table name\n@return bool TRUE if the table exists, FALSE otherwise", "docstring_tokens": ["Check", "if", "a", "table", "exists", "in", "the", "database"], "sha": "b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343", "url": "https://github.com/php-carteblanche/core/blob/b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343/src/CarteBlanche/Library/StorageEngine/Database.php#L431-L443", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/UrlHost.php", "func_name": "UrlHost.parse", "original_string": "public function parse(string $host, bool $no_port = false): array\n    {\n        $host = mb_strtolower($host); // `abc.xyz.example.com:80`.\n\n        $name = preg_replace('/\\:[0-9]+$/u', '', $host); // `abc.xyz.example.com`.\n        $port = (explode(':', $host, 2) + ['', ''])[1]; // `80`; i.e., port number.\n\n        $name_parts = explode('.', $name); // `[abc,xyz,example,com]`.\n\n        $subs = array_slice($name_parts, 0, -2); // `[abc,xyz]`.\n        $sub  = implode('.', $subs); // `abc.xyz`.\n\n        $root_name     = implode('.', array_slice($name_parts, -2)); // `example.com`.\n        $root_port     = $port; // This is nothing more than a copy of the `$port`; `80`.\n        $root          = $root_name.(isset($root_port[0]) ? ':'.$root_port : ''); // `example.com:80`.\n        $root_basename = implode('.', array_slice($name_parts, -2, 1)); // `example`.\n\n        $tld = implode('.', array_slice($name_parts, -1)); // `com`, `net`, `org`, etc.\n\n        return compact('name', 'port', 'sub', 'subs', 'root', 'root_name', 'root_port', 'root_basename', 'tld');\n    }", "language": "php", "code": "public function parse(string $host, bool $no_port = false): array\n    {\n        $host = mb_strtolower($host); // `abc.xyz.example.com:80`.\n\n        $name = preg_replace('/\\:[0-9]+$/u', '', $host); // `abc.xyz.example.com`.\n        $port = (explode(':', $host, 2) + ['', ''])[1]; // `80`; i.e., port number.\n\n        $name_parts = explode('.', $name); // `[abc,xyz,example,com]`.\n\n        $subs = array_slice($name_parts, 0, -2); // `[abc,xyz]`.\n        $sub  = implode('.', $subs); // `abc.xyz`.\n\n        $root_name     = implode('.', array_slice($name_parts, -2)); // `example.com`.\n        $root_port     = $port; // This is nothing more than a copy of the `$port`; `80`.\n        $root          = $root_name.(isset($root_port[0]) ? ':'.$root_port : ''); // `example.com:80`.\n        $root_basename = implode('.', array_slice($name_parts, -2, 1)); // `example`.\n\n        $tld = implode('.', array_slice($name_parts, -1)); // `com`, `net`, `org`, etc.\n\n        return compact('name', 'port', 'sub', 'subs', 'root', 'root_name', 'root_port', 'root_basename', 'tld');\n    }", "code_tokens": ["public", "function", "parse", "(", "string", "$", "host", ",", "bool", "$", "no_port", "=", "false", ")", ":", "array", "{", "$", "host", "=", "mb_strtolower", "(", "$", "host", ")", ";", "// `abc.xyz.example.com:80`.", "$", "name", "=", "preg_replace", "(", "'/\\:[0-9]+$/u'", ",", "''", ",", "$", "host", ")", ";", "// `abc.xyz.example.com`.", "$", "port", "=", "(", "explode", "(", "':'", ",", "$", "host", ",", "2", ")", "+", "[", "''", ",", "''", "]", ")", "[", "1", "]", ";", "// `80`; i.e., port number.", "$", "name_parts", "=", "explode", "(", "'.'", ",", "$", "name", ")", ";", "// `[abc,xyz,example,com]`.", "$", "subs", "=", "array_slice", "(", "$", "name_parts", ",", "0", ",", "-", "2", ")", ";", "// `[abc,xyz]`.", "$", "sub", "=", "implode", "(", "'.'", ",", "$", "subs", ")", ";", "// `abc.xyz`.", "$", "root_name", "=", "implode", "(", "'.'", ",", "array_slice", "(", "$", "name_parts", ",", "-", "2", ")", ")", ";", "// `example.com`.", "$", "root_port", "=", "$", "port", ";", "// This is nothing more than a copy of the `$port`; `80`.", "$", "root", "=", "$", "root_name", ".", "(", "isset", "(", "$", "root_port", "[", "0", "]", ")", "?", "':'", ".", "$", "root_port", ":", "''", ")", ";", "// `example.com:80`.", "$", "root_basename", "=", "implode", "(", "'.'", ",", "array_slice", "(", "$", "name_parts", ",", "-", "2", ",", "1", ")", ")", ";", "// `example`.", "$", "tld", "=", "implode", "(", "'.'", ",", "array_slice", "(", "$", "name_parts", ",", "-", "1", ")", ")", ";", "// `com`, `net`, `org`, etc.", "return", "compact", "(", "'name'", ",", "'port'", ",", "'sub'", ",", "'subs'", ",", "'root'", ",", "'root_name'", ",", "'root_port'", ",", "'root_basename'", ",", "'tld'", ")", ";", "}"], "docstring": "Host parser.\n\n@since 151002 Adding host parser.\n@since 170124.74961 Adding `port` key.\n@since 170124.74961 Adding `root_name` key.\n@since 170124.74961 Adding `root_port` key.\n@since 170124.74961 Removing `root_as_name` key.\n@since 170124.74961 The `name` key now contains only the name.\n@since 170124.74961 The `root` key now contains a full root host (including port).\n@since 170124.74961 Bug fix. Hosts with ports in their name are now exploded properly.\n\n@param string $host The input host to parse.\n\n@return array `[name, port, sub, subs, root, root_name, root_port, root_basename, tld]`.\n\n@internal This allows an empty `$host` so that a caller can get the array elements even if empty.", "docstring_tokens": ["Host", "parser", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/UrlHost.php#L46-L66", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Routing/Traits/MiddlewareValidatorTrait.php", "func_name": "MiddlewareValidatorTrait.validateMiddleware", "original_string": "protected function validateMiddleware($middleware): void\n    {\n        $middleware = $this->getMiddlewareClassName($middleware);\n        $interfaces = \\class_implements($middleware);\n\n        if (! isset($interfaces[MiddlewareInterface::class])) {\n            throw new UnexpectedValueException(\n                \\sprintf('%s is not implemented in [%s].', MiddlewareInterface::class, $middleware)\n            );\n        }\n    }", "language": "php", "code": "protected function validateMiddleware($middleware): void\n    {\n        $middleware = $this->getMiddlewareClassName($middleware);\n        $interfaces = \\class_implements($middleware);\n\n        if (! isset($interfaces[MiddlewareInterface::class])) {\n            throw new UnexpectedValueException(\n                \\sprintf('%s is not implemented in [%s].', MiddlewareInterface::class, $middleware)\n            );\n        }\n    }", "code_tokens": ["protected", "function", "validateMiddleware", "(", "$", "middleware", ")", ":", "void", "{", "$", "middleware", "=", "$", "this", "->", "getMiddlewareClassName", "(", "$", "middleware", ")", ";", "$", "interfaces", "=", "\\", "class_implements", "(", "$", "middleware", ")", ";", "if", "(", "!", "isset", "(", "$", "interfaces", "[", "MiddlewareInterface", "::", "class", "]", ")", ")", "{", "throw", "new", "UnexpectedValueException", "(", "\\", "sprintf", "(", "'%s is not implemented in [%s].'", ",", "MiddlewareInterface", "::", "class", ",", "$", "middleware", ")", ")", ";", "}", "}"], "docstring": "Validates if given object or string has a middleware interface.\n\n@param \\Psr\\Http\\Server\\MiddlewareInterface|string $middleware\n\n@throws \\Viserio\\Component\\Contract\\Routing\\Exception\\UnexpectedValueException if \\Psr\\Http\\Server\\MiddlewareInterface was not found\n\n@return void", "docstring_tokens": ["Validates", "if", "given", "object", "or", "string", "has", "a", "middleware", "interface", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Routing/Traits/MiddlewareValidatorTrait.php#L40-L50", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/Core/OAuth/OAuth2/OAuth2AccessToken.php", "func_name": "OAuth2AccessToken.getRefreshToken", "original_string": "public function getRefreshToken(){\n        if(isset($this->refresh_token) && !empty($this->refresh_token))  return $this->refresh_token;\n        else throw new SdkException(\"The OAuth 2 Refresh Token is not set in the Access Token Object.\");\n    }", "language": "php", "code": "public function getRefreshToken(){\n        if(isset($this->refresh_token) && !empty($this->refresh_token))  return $this->refresh_token;\n        else throw new SdkException(\"The OAuth 2 Refresh Token is not set in the Access Token Object.\");\n    }", "code_tokens": ["public", "function", "getRefreshToken", "(", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "refresh_token", ")", "&&", "!", "empty", "(", "$", "this", "->", "refresh_token", ")", ")", "return", "$", "this", "->", "refresh_token", ";", "else", "throw", "new", "SdkException", "(", "\"The OAuth 2 Refresh Token is not set in the Access Token Object.\"", ")", ";", "}"], "docstring": "Return the refresh Token\n@return String", "docstring_tokens": ["Return", "the", "refresh", "Token"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/Core/OAuth/OAuth2/OAuth2AccessToken.php#L278-L281", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/I18n/Time.php", "func_name": "Time.createFromFormat", "original_string": "public static function createFromFormat($format, $datetime, $timeZone = null)\n\t{\n\t\t$date = parent::createFromFormat($format, $datetime);\n\n\t\treturn new Time($date->format('Y-m-d H:i:s'), $timeZone);\n\t}", "language": "php", "code": "public static function createFromFormat($format, $datetime, $timeZone = null)\n\t{\n\t\t$date = parent::createFromFormat($format, $datetime);\n\n\t\treturn new Time($date->format('Y-m-d H:i:s'), $timeZone);\n\t}", "code_tokens": ["public", "static", "function", "createFromFormat", "(", "$", "format", ",", "$", "datetime", ",", "$", "timeZone", "=", "null", ")", "{", "$", "date", "=", "parent", "::", "createFromFormat", "(", "$", "format", ",", "$", "datetime", ")", ";", "return", "new", "Time", "(", "$", "date", "->", "format", "(", "'Y-m-d H:i:s'", ")", ",", "$", "timeZone", ")", ";", "}"], "docstring": "Provides a replacement for DateTime's own createFromFormat function, that provides\nmore flexible timeZone handling\n\n@param string                $format\n@param string                $datetime\n@param DateTimeZone|string   $timeZone\n\n@return \\CodeIgniter\\I18n\\Time\n@throws \\Exception", "docstring_tokens": ["Provides", "a", "replacement", "for", "DateTime", "s", "own", "createFromFormat", "function", "that", "provides", "more", "flexible", "timeZone", "handling"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/I18n/Time.php#L305-L310", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/HTTP/Negotiate.php", "func_name": "Negotiate.match", "original_string": "protected function match(array $acceptable, string $supported, bool $enforceTypes = false): bool\n\t{\n\t\t$supported = $this->parseHeader($supported);\n\t\tif (is_array($supported) && count($supported) === 1)\n\t\t{\n\t\t\t$supported = $supported[0];\n\t\t}\n\n\t\t// Is it an exact match?\n\t\tif ($acceptable['value'] === $supported['value'])\n\t\t{\n\t\t\treturn $this->matchParameters($acceptable, $supported);\n\t\t}\n\n\t\t// Do we need to compare types/sub-types? Only used\n\t\t// by negotiateMedia().\n\t\tif ($enforceTypes)\n\t\t{\n\t\t\treturn $this->matchTypes($acceptable, $supported);\n\t\t}\n\n\t\treturn false;\n\t}", "language": "php", "code": "protected function match(array $acceptable, string $supported, bool $enforceTypes = false): bool\n\t{\n\t\t$supported = $this->parseHeader($supported);\n\t\tif (is_array($supported) && count($supported) === 1)\n\t\t{\n\t\t\t$supported = $supported[0];\n\t\t}\n\n\t\t// Is it an exact match?\n\t\tif ($acceptable['value'] === $supported['value'])\n\t\t{\n\t\t\treturn $this->matchParameters($acceptable, $supported);\n\t\t}\n\n\t\t// Do we need to compare types/sub-types? Only used\n\t\t// by negotiateMedia().\n\t\tif ($enforceTypes)\n\t\t{\n\t\t\treturn $this->matchTypes($acceptable, $supported);\n\t\t}\n\n\t\treturn false;\n\t}", "code_tokens": ["protected", "function", "match", "(", "array", "$", "acceptable", ",", "string", "$", "supported", ",", "bool", "$", "enforceTypes", "=", "false", ")", ":", "bool", "{", "$", "supported", "=", "$", "this", "->", "parseHeader", "(", "$", "supported", ")", ";", "if", "(", "is_array", "(", "$", "supported", ")", "&&", "count", "(", "$", "supported", ")", "===", "1", ")", "{", "$", "supported", "=", "$", "supported", "[", "0", "]", ";", "}", "// Is it an exact match?", "if", "(", "$", "acceptable", "[", "'value'", "]", "===", "$", "supported", "[", "'value'", "]", ")", "{", "return", "$", "this", "->", "matchParameters", "(", "$", "acceptable", ",", "$", "supported", ")", ";", "}", "// Do we need to compare types/sub-types? Only used", "// by negotiateMedia().", "if", "(", "$", "enforceTypes", ")", "{", "return", "$", "this", "->", "matchTypes", "(", "$", "acceptable", ",", "$", "supported", ")", ";", "}", "return", "false", ";", "}"], "docstring": "Match-maker\n\n@param  array   $acceptable\n@param  string  $supported\n@param  boolean $enforceTypes\n@return boolean", "docstring_tokens": ["Match", "-", "maker"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/HTTP/Negotiate.php#L344-L366", "partition": "test"}
{"repo": "Intervention/gif", "path": "src/Intervention/Gif/Decoded.php", "func_name": "Decoded.getBackgroundColorIndex", "original_string": "public function getBackgroundColorIndex()\n    {\n        if ($this->logicalScreenDescriptor) {\n            $index = substr($this->logicalScreenDescriptor, 5, 1);\n            $index = unpack('C', $index)[1];\n\n            return $index;\n        }\n\n        return 0;\n    }", "language": "php", "code": "public function getBackgroundColorIndex()\n    {\n        if ($this->logicalScreenDescriptor) {\n            $index = substr($this->logicalScreenDescriptor, 5, 1);\n            $index = unpack('C', $index)[1];\n\n            return $index;\n        }\n\n        return 0;\n    }", "code_tokens": ["public", "function", "getBackgroundColorIndex", "(", ")", "{", "if", "(", "$", "this", "->", "logicalScreenDescriptor", ")", "{", "$", "index", "=", "substr", "(", "$", "this", "->", "logicalScreenDescriptor", ",", "5", ",", "1", ")", ";", "$", "index", "=", "unpack", "(", "'C'", ",", "$", "index", ")", "[", "1", "]", ";", "return", "$", "index", ";", "}", "return", "0", ";", "}"], "docstring": "Returns background color index\n\n@return integer", "docstring_tokens": ["Returns", "background", "color", "index"], "sha": "7f7e747f26b8362f18384f67a9765290523f607a", "url": "https://github.com/Intervention/gif/blob/7f7e747f26b8362f18384f67a9765290523f607a/src/Intervention/Gif/Decoded.php#L397-L407", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Support/Str.php", "func_name": "Str.replaceLast", "original_string": "public static function replaceLast(string $search, string $replace, string $subject): string\n    {\n        $position = \\mb_strrpos($subject, $search);\n\n        return self::replaceByPosition($subject, $replace, $position, $search);\n    }", "language": "php", "code": "public static function replaceLast(string $search, string $replace, string $subject): string\n    {\n        $position = \\mb_strrpos($subject, $search);\n\n        return self::replaceByPosition($subject, $replace, $position, $search);\n    }", "code_tokens": ["public", "static", "function", "replaceLast", "(", "string", "$", "search", ",", "string", "$", "replace", ",", "string", "$", "subject", ")", ":", "string", "{", "$", "position", "=", "\\", "mb_strrpos", "(", "$", "subject", ",", "$", "search", ")", ";", "return", "self", "::", "replaceByPosition", "(", "$", "subject", ",", "$", "replace", ",", "$", "position", ",", "$", "search", ")", ";", "}"], "docstring": "Replace the last occurrence of a given value in the string.\n\n@param string $search\n@param string $replace\n@param string $subject\n\n@return string", "docstring_tokens": ["Replace", "the", "last", "occurrence", "of", "a", "given", "value", "in", "the", "string", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Support/Str.php#L258-L263", "partition": "test"}
{"repo": "belgattitude/solublecomponents", "path": "src/Soluble/Normalist/Driver/ZeroConfDriver.php", "func_name": "ZeroConfDriver.getModelsConfigFile", "original_string": "public function getModelsConfigFile()\n    {\n        $o = $this->params;\n        $file = $o['path'] . DIRECTORY_SEPARATOR . 'normalist_zeroconf_cache_' . $o['alias'] . '_' . $o['version'] . '.php';\n        return $file;\n    }", "language": "php", "code": "public function getModelsConfigFile()\n    {\n        $o = $this->params;\n        $file = $o['path'] . DIRECTORY_SEPARATOR . 'normalist_zeroconf_cache_' . $o['alias'] . '_' . $o['version'] . '.php';\n        return $file;\n    }", "code_tokens": ["public", "function", "getModelsConfigFile", "(", ")", "{", "$", "o", "=", "$", "this", "->", "params", ";", "$", "file", "=", "$", "o", "[", "'path'", "]", ".", "DIRECTORY_SEPARATOR", ".", "'normalist_zeroconf_cache_'", ".", "$", "o", "[", "'alias'", "]", ".", "'_'", ".", "$", "o", "[", "'version'", "]", ".", "'.php'", ";", "return", "$", "file", ";", "}"], "docstring": "Return models configuration file\n@return string", "docstring_tokens": ["Return", "models", "configuration", "file"], "sha": "f045b3967e42d352d8e70fb2c1f8a427df62599f", "url": "https://github.com/belgattitude/solublecomponents/blob/f045b3967e42d352d8e70fb2c1f8a427df62599f/src/Soluble/Normalist/Driver/ZeroConfDriver.php#L110-L115", "partition": "test"}
{"repo": "rinvex/laravel-cacheable", "path": "src/CacheableEloquent.php", "func_name": "CacheableEloquent.bootCacheableEloquent", "original_string": "public static function bootCacheableEloquent(): void\n    {\n        static::updated(function (Model $cachedModel) {\n            ! $cachedModel->isCacheClearEnabled() || $cachedModel::forgetCache();\n        });\n\n        static::created(function (Model $cachedModel) {\n            ! $cachedModel->isCacheClearEnabled() || $cachedModel::forgetCache();\n        });\n\n        static::deleted(function (Model $cachedModel) {\n            ! $cachedModel->isCacheClearEnabled() || $cachedModel::forgetCache();\n        });\n    }", "language": "php", "code": "public static function bootCacheableEloquent(): void\n    {\n        static::updated(function (Model $cachedModel) {\n            ! $cachedModel->isCacheClearEnabled() || $cachedModel::forgetCache();\n        });\n\n        static::created(function (Model $cachedModel) {\n            ! $cachedModel->isCacheClearEnabled() || $cachedModel::forgetCache();\n        });\n\n        static::deleted(function (Model $cachedModel) {\n            ! $cachedModel->isCacheClearEnabled() || $cachedModel::forgetCache();\n        });\n    }", "code_tokens": ["public", "static", "function", "bootCacheableEloquent", "(", ")", ":", "void", "{", "static", "::", "updated", "(", "function", "(", "Model", "$", "cachedModel", ")", "{", "!", "$", "cachedModel", "->", "isCacheClearEnabled", "(", ")", "||", "$", "cachedModel", "::", "forgetCache", "(", ")", ";", "}", ")", ";", "static", "::", "created", "(", "function", "(", "Model", "$", "cachedModel", ")", "{", "!", "$", "cachedModel", "->", "isCacheClearEnabled", "(", ")", "||", "$", "cachedModel", "::", "forgetCache", "(", ")", ";", "}", ")", ";", "static", "::", "deleted", "(", "function", "(", "Model", "$", "cachedModel", ")", "{", "!", "$", "cachedModel", "->", "isCacheClearEnabled", "(", ")", "||", "$", "cachedModel", "::", "forgetCache", "(", ")", ";", "}", ")", ";", "}"], "docstring": "Boot the cacheable eloquent trait for a model.\n\n@return void", "docstring_tokens": ["Boot", "the", "cacheable", "eloquent", "trait", "for", "a", "model", "."], "sha": "d6b8a48ab6fa3e018f2eda05930915f6870339e0", "url": "https://github.com/rinvex/laravel-cacheable/blob/d6b8a48ab6fa3e018f2eda05930915f6870339e0/src/CacheableEloquent.php#L45-L58", "partition": "test"}
{"repo": "activecollab/databaseobject", "path": "src/Collection/Type.php", "func_name": "Type.execute", "original_string": "public function execute()\n    {\n        if (!$this->isReady()) {\n            throw new LogicException('Collection is not ready');\n        }\n\n        if (is_callable($this->pre_execute_callback)) {\n            $ids = $this->executeIds();\n\n            if ($ids_count = count($ids)) {\n                call_user_func($this->pre_execute_callback, $ids);\n\n                if ($ids_count > 1000) {\n                    $sql = $this->getSelectSql(); // Don't escape more than 1000 ID-s using DB::escape(), let MySQL do the dirty work instead of PHP\n                } else {\n                    $escaped_ids = $this->connection->escapeValue($ids);\n\n                    $sql = \"SELECT * FROM {$this->getTableName()} WHERE id IN ($escaped_ids) ORDER BY FIELD (id, $escaped_ids)\";\n                }\n\n                return $this->pool->findBySql($this->getType(), $sql);\n            }\n\n            return null;\n        } else {\n            return $this->pool->findBySql($this->getType(), $this->getSelectSql());\n        }\n    }", "language": "php", "code": "public function execute()\n    {\n        if (!$this->isReady()) {\n            throw new LogicException('Collection is not ready');\n        }\n\n        if (is_callable($this->pre_execute_callback)) {\n            $ids = $this->executeIds();\n\n            if ($ids_count = count($ids)) {\n                call_user_func($this->pre_execute_callback, $ids);\n\n                if ($ids_count > 1000) {\n                    $sql = $this->getSelectSql(); // Don't escape more than 1000 ID-s using DB::escape(), let MySQL do the dirty work instead of PHP\n                } else {\n                    $escaped_ids = $this->connection->escapeValue($ids);\n\n                    $sql = \"SELECT * FROM {$this->getTableName()} WHERE id IN ($escaped_ids) ORDER BY FIELD (id, $escaped_ids)\";\n                }\n\n                return $this->pool->findBySql($this->getType(), $sql);\n            }\n\n            return null;\n        } else {\n            return $this->pool->findBySql($this->getType(), $this->getSelectSql());\n        }\n    }", "code_tokens": ["public", "function", "execute", "(", ")", "{", "if", "(", "!", "$", "this", "->", "isReady", "(", ")", ")", "{", "throw", "new", "LogicException", "(", "'Collection is not ready'", ")", ";", "}", "if", "(", "is_callable", "(", "$", "this", "->", "pre_execute_callback", ")", ")", "{", "$", "ids", "=", "$", "this", "->", "executeIds", "(", ")", ";", "if", "(", "$", "ids_count", "=", "count", "(", "$", "ids", ")", ")", "{", "call_user_func", "(", "$", "this", "->", "pre_execute_callback", ",", "$", "ids", ")", ";", "if", "(", "$", "ids_count", ">", "1000", ")", "{", "$", "sql", "=", "$", "this", "->", "getSelectSql", "(", ")", ";", "// Don't escape more than 1000 ID-s using DB::escape(), let MySQL do the dirty work instead of PHP", "}", "else", "{", "$", "escaped_ids", "=", "$", "this", "->", "connection", "->", "escapeValue", "(", "$", "ids", ")", ";", "$", "sql", "=", "\"SELECT * FROM {$this->getTableName()} WHERE id IN ($escaped_ids) ORDER BY FIELD (id, $escaped_ids)\"", ";", "}", "return", "$", "this", "->", "pool", "->", "findBySql", "(", "$", "this", "->", "getType", "(", ")", ",", "$", "sql", ")", ";", "}", "return", "null", ";", "}", "else", "{", "return", "$", "this", "->", "pool", "->", "findBySql", "(", "$", "this", "->", "getType", "(", ")", ",", "$", "this", "->", "getSelectSql", "(", ")", ")", ";", "}", "}"], "docstring": "Run the query and return DB result.\n\n@return ResultInterface|EntityInterface[]", "docstring_tokens": ["Run", "the", "query", "and", "return", "DB", "result", "."], "sha": "93ebbc26fdcd82e8effa15fea46432dafbfa5e83", "url": "https://github.com/activecollab/databaseobject/blob/93ebbc26fdcd82e8effa15fea46432dafbfa5e83/src/Collection/Type.php#L164-L191", "partition": "test"}
{"repo": "php-carteblanche/core", "path": "src/CarteBlanche/Library/AutoObject/AutoObject.php", "func_name": "AutoObject.setModelName", "original_string": "public function setModelName($name = null)\n    {\n        if (empty($name) || !is_string($name)) {\n            throw new \\InvalidArgumentException(\n                sprintf('Object model name is invalid! (must be a string, got \"%s\")', var_export($name,1))\n            );\n        }\n        if (false===\\CarteBlanche\\App\\Loader::classExists($name)) {\n            throw new \\InvalidArgumentException(\n                sprintf('Object model\\'s class can\\'t be found! (got \"%s\")', var_export($name,1))\n            );\n        }\n        $this->object_model_name = $name;\n        return $this;\n    }", "language": "php", "code": "public function setModelName($name = null)\n    {\n        if (empty($name) || !is_string($name)) {\n            throw new \\InvalidArgumentException(\n                sprintf('Object model name is invalid! (must be a string, got \"%s\")', var_export($name,1))\n            );\n        }\n        if (false===\\CarteBlanche\\App\\Loader::classExists($name)) {\n            throw new \\InvalidArgumentException(\n                sprintf('Object model\\'s class can\\'t be found! (got \"%s\")', var_export($name,1))\n            );\n        }\n        $this->object_model_name = $name;\n        return $this;\n    }", "code_tokens": ["public", "function", "setModelName", "(", "$", "name", "=", "null", ")", "{", "if", "(", "empty", "(", "$", "name", ")", "||", "!", "is_string", "(", "$", "name", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "sprintf", "(", "'Object model name is invalid! (must be a string, got \"%s\")'", ",", "var_export", "(", "$", "name", ",", "1", ")", ")", ")", ";", "}", "if", "(", "false", "===", "\\", "CarteBlanche", "\\", "App", "\\", "Loader", "::", "classExists", "(", "$", "name", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "sprintf", "(", "'Object model\\'s class can\\'t be found! (got \"%s\")'", ",", "var_export", "(", "$", "name", ",", "1", ")", ")", ")", ";", "}", "$", "this", "->", "object_model_name", "=", "$", "name", ";", "return", "$", "this", ";", "}"], "docstring": "Set the object model name\n@param string $name The object model name to set\n@return self Return the object for method chaining", "docstring_tokens": ["Set", "the", "object", "model", "name"], "sha": "b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343", "url": "https://github.com/php-carteblanche/core/blob/b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343/src/CarteBlanche/Library/AutoObject/AutoObject.php#L131-L145", "partition": "test"}
{"repo": "velkuns/eureka-package-money", "path": "src/Money/Module/Budget/Controller/Budget.php", "func_name": "Budget.loadNavBar", "original_string": "protected function loadNavBar()\n    {\n        $this->breadcrumb->add((new BreadcrumbItem('Budget'))\n            ->setIcon('money')\n            ->setUri('#'));\n\n        $bankMapper = new BankMapper(Database::get('money'));\n        $banks      = $bankMapper->select();\n\n        $accountUserMapper = new AccountUserMapper(Database::get('money'));\n        $userAccounts      = $accountUserMapper->findByUserId((int) Session::getInstance()->get('id'));\n\n        $accounts = array();\n        foreach ($userAccounts as $userAccount) {\n            $account = $userAccount->getAccount();\n\n            if ($account->isVirtual()) {\n                continue;\n            }\n\n            if (!isset($accounts[$account->getBankId()])) {\n                $accounts[$account->getBankId()] = array();\n            }\n\n            $accounts[$account->getBankId()][] = $account;\n        }\n\n        $this->dataCollection->add('banks', $banks);\n        $this->dataCollection->add('accounts', $accounts);\n\n        $params = $this->route->getParameterCollection();\n        $get    = Get::getInstance();\n\n        try {\n            $dateStart = new \\DateTimeImmutable($get->get('date_start', date('Y-m-01')));\n        } catch(\\Exception $exception) {\n            $dateStart = new \\DateTimeImmutable();\n        }\n\n        $this->navForm->setParams(array(\n            'banks'            => $banks,\n            'accounts'         => $accounts,\n            'currentAccountId' => ($params->hasByName('id') ? (int) $params->getByName('id')->getValue() : 0),\n            'dateStart'        => $dateStart,\n            'date'             => new \\DateTimeImmutable(date('Y-m-01')),\n        ));\n\n        $this->navForm->setTemplate($this->appTplPath . '/Partial/NavbarForm');\n    }", "language": "php", "code": "protected function loadNavBar()\n    {\n        $this->breadcrumb->add((new BreadcrumbItem('Budget'))\n            ->setIcon('money')\n            ->setUri('#'));\n\n        $bankMapper = new BankMapper(Database::get('money'));\n        $banks      = $bankMapper->select();\n\n        $accountUserMapper = new AccountUserMapper(Database::get('money'));\n        $userAccounts      = $accountUserMapper->findByUserId((int) Session::getInstance()->get('id'));\n\n        $accounts = array();\n        foreach ($userAccounts as $userAccount) {\n            $account = $userAccount->getAccount();\n\n            if ($account->isVirtual()) {\n                continue;\n            }\n\n            if (!isset($accounts[$account->getBankId()])) {\n                $accounts[$account->getBankId()] = array();\n            }\n\n            $accounts[$account->getBankId()][] = $account;\n        }\n\n        $this->dataCollection->add('banks', $banks);\n        $this->dataCollection->add('accounts', $accounts);\n\n        $params = $this->route->getParameterCollection();\n        $get    = Get::getInstance();\n\n        try {\n            $dateStart = new \\DateTimeImmutable($get->get('date_start', date('Y-m-01')));\n        } catch(\\Exception $exception) {\n            $dateStart = new \\DateTimeImmutable();\n        }\n\n        $this->navForm->setParams(array(\n            'banks'            => $banks,\n            'accounts'         => $accounts,\n            'currentAccountId' => ($params->hasByName('id') ? (int) $params->getByName('id')->getValue() : 0),\n            'dateStart'        => $dateStart,\n            'date'             => new \\DateTimeImmutable(date('Y-m-01')),\n        ));\n\n        $this->navForm->setTemplate($this->appTplPath . '/Partial/NavbarForm');\n    }", "code_tokens": ["protected", "function", "loadNavBar", "(", ")", "{", "$", "this", "->", "breadcrumb", "->", "add", "(", "(", "new", "BreadcrumbItem", "(", "'Budget'", ")", ")", "->", "setIcon", "(", "'money'", ")", "->", "setUri", "(", "'#'", ")", ")", ";", "$", "bankMapper", "=", "new", "BankMapper", "(", "Database", "::", "get", "(", "'money'", ")", ")", ";", "$", "banks", "=", "$", "bankMapper", "->", "select", "(", ")", ";", "$", "accountUserMapper", "=", "new", "AccountUserMapper", "(", "Database", "::", "get", "(", "'money'", ")", ")", ";", "$", "userAccounts", "=", "$", "accountUserMapper", "->", "findByUserId", "(", "(", "int", ")", "Session", "::", "getInstance", "(", ")", "->", "get", "(", "'id'", ")", ")", ";", "$", "accounts", "=", "array", "(", ")", ";", "foreach", "(", "$", "userAccounts", "as", "$", "userAccount", ")", "{", "$", "account", "=", "$", "userAccount", "->", "getAccount", "(", ")", ";", "if", "(", "$", "account", "->", "isVirtual", "(", ")", ")", "{", "continue", ";", "}", "if", "(", "!", "isset", "(", "$", "accounts", "[", "$", "account", "->", "getBankId", "(", ")", "]", ")", ")", "{", "$", "accounts", "[", "$", "account", "->", "getBankId", "(", ")", "]", "=", "array", "(", ")", ";", "}", "$", "accounts", "[", "$", "account", "->", "getBankId", "(", ")", "]", "[", "]", "=", "$", "account", ";", "}", "$", "this", "->", "dataCollection", "->", "add", "(", "'banks'", ",", "$", "banks", ")", ";", "$", "this", "->", "dataCollection", "->", "add", "(", "'accounts'", ",", "$", "accounts", ")", ";", "$", "params", "=", "$", "this", "->", "route", "->", "getParameterCollection", "(", ")", ";", "$", "get", "=", "Get", "::", "getInstance", "(", ")", ";", "try", "{", "$", "dateStart", "=", "new", "\\", "DateTimeImmutable", "(", "$", "get", "->", "get", "(", "'date_start'", ",", "date", "(", "'Y-m-01'", ")", ")", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "exception", ")", "{", "$", "dateStart", "=", "new", "\\", "DateTimeImmutable", "(", ")", ";", "}", "$", "this", "->", "navForm", "->", "setParams", "(", "array", "(", "'banks'", "=>", "$", "banks", ",", "'accounts'", "=>", "$", "accounts", ",", "'currentAccountId'", "=>", "(", "$", "params", "->", "hasByName", "(", "'id'", ")", "?", "(", "int", ")", "$", "params", "->", "getByName", "(", "'id'", ")", "->", "getValue", "(", ")", ":", "0", ")", ",", "'dateStart'", "=>", "$", "dateStart", ",", "'date'", "=>", "new", "\\", "DateTimeImmutable", "(", "date", "(", "'Y-m-01'", ")", ")", ",", ")", ")", ";", "$", "this", "->", "navForm", "->", "setTemplate", "(", "$", "this", "->", "appTplPath", ".", "'/Partial/NavbarForm'", ")", ";", "}"], "docstring": "Load navbar for budgets pages\n@return void\n@throws \\Exception", "docstring_tokens": ["Load", "navbar", "for", "budgets", "pages"], "sha": "6a7954ebd228b400c8922f66fbd390711f27c23b", "url": "https://github.com/velkuns/eureka-package-money/blob/6a7954ebd228b400c8922f66fbd390711f27c23b/src/Money/Module/Budget/Controller/Budget.php#L557-L605", "partition": "test"}
{"repo": "sonata-project/SonataSeoBundle", "path": "src/DependencyInjection/SonataSeoExtension.php", "func_name": "SonataSeoExtension.configureSitemap", "original_string": "protected function configureSitemap(array $config, ContainerBuilder $container)\n    {\n        $source = $container->getDefinition('sonata.seo.sitemap.manager');\n\n        if (method_exists($source, 'setShared')) { // Symfony 2.8+\n            $source->setShared(false);\n        } else {\n            // For Symfony <2.8 compatibility\n            $source->setScope(ContainerInterface::SCOPE_PROTOTYPE);\n        }\n\n        foreach ($config['doctrine_orm'] as $pos => $sitemap) {\n            // define the connectionIterator\n            $connectionIteratorId = 'sonata.seo.source.doctrine_connection_iterator_'.$pos;\n\n            $connectionIterator = new Definition('%sonata.seo.exporter.database_source_iterator.class%', [\n                new Reference($sitemap['connection']),\n                $sitemap['query'],\n            ]);\n\n            $connectionIterator->setPublic(false);\n            $container->setDefinition($connectionIteratorId, $connectionIterator);\n\n            // define the sitemap proxy iterator\n            $sitemapIteratorId = 'sonata.seo.source.doctrine_sitemap_iterator_'.$pos;\n\n            $sitemapIterator = new Definition('%sonata.seo.exporter.sitemap_source_iterator.class%', [\n                new Reference($connectionIteratorId),\n                new Reference('router'),\n                $sitemap['route'],\n                $sitemap['parameters'],\n            ]);\n\n            $sitemapIterator->setPublic(false);\n\n            $container->setDefinition($sitemapIteratorId, $sitemapIterator);\n\n            $source->addMethodCall('addSource', [$sitemap['group'], new Reference($sitemapIteratorId), $sitemap['types']]);\n        }\n\n        foreach ($config['services'] as $service) {\n            $source->addMethodCall('addSource', [$service['group'], new Reference($service['id']), $service['types']]);\n        }\n    }", "language": "php", "code": "protected function configureSitemap(array $config, ContainerBuilder $container)\n    {\n        $source = $container->getDefinition('sonata.seo.sitemap.manager');\n\n        if (method_exists($source, 'setShared')) { // Symfony 2.8+\n            $source->setShared(false);\n        } else {\n            // For Symfony <2.8 compatibility\n            $source->setScope(ContainerInterface::SCOPE_PROTOTYPE);\n        }\n\n        foreach ($config['doctrine_orm'] as $pos => $sitemap) {\n            // define the connectionIterator\n            $connectionIteratorId = 'sonata.seo.source.doctrine_connection_iterator_'.$pos;\n\n            $connectionIterator = new Definition('%sonata.seo.exporter.database_source_iterator.class%', [\n                new Reference($sitemap['connection']),\n                $sitemap['query'],\n            ]);\n\n            $connectionIterator->setPublic(false);\n            $container->setDefinition($connectionIteratorId, $connectionIterator);\n\n            // define the sitemap proxy iterator\n            $sitemapIteratorId = 'sonata.seo.source.doctrine_sitemap_iterator_'.$pos;\n\n            $sitemapIterator = new Definition('%sonata.seo.exporter.sitemap_source_iterator.class%', [\n                new Reference($connectionIteratorId),\n                new Reference('router'),\n                $sitemap['route'],\n                $sitemap['parameters'],\n            ]);\n\n            $sitemapIterator->setPublic(false);\n\n            $container->setDefinition($sitemapIteratorId, $sitemapIterator);\n\n            $source->addMethodCall('addSource', [$sitemap['group'], new Reference($sitemapIteratorId), $sitemap['types']]);\n        }\n\n        foreach ($config['services'] as $service) {\n            $source->addMethodCall('addSource', [$service['group'], new Reference($service['id']), $service['types']]);\n        }\n    }", "code_tokens": ["protected", "function", "configureSitemap", "(", "array", "$", "config", ",", "ContainerBuilder", "$", "container", ")", "{", "$", "source", "=", "$", "container", "->", "getDefinition", "(", "'sonata.seo.sitemap.manager'", ")", ";", "if", "(", "method_exists", "(", "$", "source", ",", "'setShared'", ")", ")", "{", "// Symfony 2.8+", "$", "source", "->", "setShared", "(", "false", ")", ";", "}", "else", "{", "// For Symfony <2.8 compatibility", "$", "source", "->", "setScope", "(", "ContainerInterface", "::", "SCOPE_PROTOTYPE", ")", ";", "}", "foreach", "(", "$", "config", "[", "'doctrine_orm'", "]", "as", "$", "pos", "=>", "$", "sitemap", ")", "{", "// define the connectionIterator", "$", "connectionIteratorId", "=", "'sonata.seo.source.doctrine_connection_iterator_'", ".", "$", "pos", ";", "$", "connectionIterator", "=", "new", "Definition", "(", "'%sonata.seo.exporter.database_source_iterator.class%'", ",", "[", "new", "Reference", "(", "$", "sitemap", "[", "'connection'", "]", ")", ",", "$", "sitemap", "[", "'query'", "]", ",", "]", ")", ";", "$", "connectionIterator", "->", "setPublic", "(", "false", ")", ";", "$", "container", "->", "setDefinition", "(", "$", "connectionIteratorId", ",", "$", "connectionIterator", ")", ";", "// define the sitemap proxy iterator", "$", "sitemapIteratorId", "=", "'sonata.seo.source.doctrine_sitemap_iterator_'", ".", "$", "pos", ";", "$", "sitemapIterator", "=", "new", "Definition", "(", "'%sonata.seo.exporter.sitemap_source_iterator.class%'", ",", "[", "new", "Reference", "(", "$", "connectionIteratorId", ")", ",", "new", "Reference", "(", "'router'", ")", ",", "$", "sitemap", "[", "'route'", "]", ",", "$", "sitemap", "[", "'parameters'", "]", ",", "]", ")", ";", "$", "sitemapIterator", "->", "setPublic", "(", "false", ")", ";", "$", "container", "->", "setDefinition", "(", "$", "sitemapIteratorId", ",", "$", "sitemapIterator", ")", ";", "$", "source", "->", "addMethodCall", "(", "'addSource'", ",", "[", "$", "sitemap", "[", "'group'", "]", ",", "new", "Reference", "(", "$", "sitemapIteratorId", ")", ",", "$", "sitemap", "[", "'types'", "]", "]", ")", ";", "}", "foreach", "(", "$", "config", "[", "'services'", "]", "as", "$", "service", ")", "{", "$", "source", "->", "addMethodCall", "(", "'addSource'", ",", "[", "$", "service", "[", "'group'", "]", ",", "new", "Reference", "(", "$", "service", "[", "'id'", "]", ")", ",", "$", "service", "[", "'types'", "]", "]", ")", ";", "}", "}"], "docstring": "Configure the sitemap source manager.\n\n@param array            $config\n@param ContainerBuilder $container", "docstring_tokens": ["Configure", "the", "sitemap", "source", "manager", "."], "sha": "02fc6a0b50464fb498561527b6e068a9515e22a7", "url": "https://github.com/sonata-project/SonataSeoBundle/blob/02fc6a0b50464fb498561527b6e068a9515e22a7/src/DependencyInjection/SonataSeoExtension.php#L74-L117", "partition": "test"}
{"repo": "whatthejeff/php-drawille", "path": "src/Drawille/Canvas.php", "func_name": "Canvas.prime", "original_string": "private function prime($x, $y) {\n        $x = round($x);\n        $y = round($y);\n        $px = floor($x / 2);\n        $py = floor($y / 4);\n\n        if (!isset($this->chars[$py][$px])) {\n            $this->chars[$py][$px] = 0;\n        }\n\n        return [$x, $y, $px, $py, $this->chars[$py][$px]];\n    }", "language": "php", "code": "private function prime($x, $y) {\n        $x = round($x);\n        $y = round($y);\n        $px = floor($x / 2);\n        $py = floor($y / 4);\n\n        if (!isset($this->chars[$py][$px])) {\n            $this->chars[$py][$px] = 0;\n        }\n\n        return [$x, $y, $px, $py, $this->chars[$py][$px]];\n    }", "code_tokens": ["private", "function", "prime", "(", "$", "x", ",", "$", "y", ")", "{", "$", "x", "=", "round", "(", "$", "x", ")", ";", "$", "y", "=", "round", "(", "$", "y", ")", ";", "$", "px", "=", "floor", "(", "$", "x", "/", "2", ")", ";", "$", "py", "=", "floor", "(", "$", "y", "/", "4", ")", ";", "if", "(", "!", "isset", "(", "$", "this", "->", "chars", "[", "$", "py", "]", "[", "$", "px", "]", ")", ")", "{", "$", "this", "->", "chars", "[", "$", "py", "]", "[", "$", "px", "]", "=", "0", ";", "}", "return", "[", "$", "x", ",", "$", "y", ",", "$", "px", ",", "$", "py", ",", "$", "this", "->", "chars", "[", "$", "py", "]", "[", "$", "px", "]", "]", ";", "}"], "docstring": "Autovivification for a canvas position.\n\n@param integer $x x position\n@param integer $y y position\n\n@return array", "docstring_tokens": ["Autovivification", "for", "a", "canvas", "position", "."], "sha": "541b2517a70b988d9f2a6249603f7331c1814957", "url": "https://github.com/whatthejeff/php-drawille/blob/541b2517a70b988d9f2a6249603f7331c1814957/src/Drawille/Canvas.php#L218-L229", "partition": "test"}
{"repo": "mcamara/laravel-localization", "path": "src/Mcamara/LaravelLocalization/LanguageNegotiator.php", "func_name": "LanguageNegotiator.negotiateLanguage", "original_string": "public function negotiateLanguage()\n    {\n        $matches = $this->getMatchesFromAcceptedLanguages();\n        foreach ($matches as $key => $q) {\n\n            $key = ($this->configRepository->get('laravellocalization.localesMapping')[$key]) ?? $key;\n\n            if (!empty($this->supportedLanguages[$key])) {\n                return $key;\n            }\n\n            if ($this->use_intl) {\n                $key = Locale::canonicalize($key);\n            }\n\n            // Search for acceptable locale by 'regional' => 'af_ZA' or 'lang' => 'af-ZA' match.\n            foreach ( $this->supportedLanguages as $key_supported => $locale ) {\n                if ( (isset($locale['regional']) && $locale['regional'] == $key) || (isset($locale['lang']) && $locale['lang'] == $key) ) {\n                    return $key_supported;\n                }\n            }\n        }\n        // If any (i.e. \"*\") is acceptable, return the first supported format\n        if (isset($matches['*'])) {\n            reset($this->supportedLanguages);\n\n            return key($this->supportedLanguages);\n        }\n\n        if ($this->use_intl && !empty($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n            $http_accept_language = Locale::acceptFromHttp($_SERVER['HTTP_ACCEPT_LANGUAGE']);\n\n            if (!empty($this->supportedLanguages[$http_accept_language])) {\n                return $http_accept_language;\n            }\n        }\n\n        if ($this->request->server('REMOTE_HOST')) {\n            $remote_host = explode('.', $this->request->server('REMOTE_HOST'));\n            $lang = strtolower(end($remote_host));\n\n            if (!empty($this->supportedLanguages[$lang])) {\n                return $lang;\n            }\n        }\n\n        return $this->defaultLocale;\n    }", "language": "php", "code": "public function negotiateLanguage()\n    {\n        $matches = $this->getMatchesFromAcceptedLanguages();\n        foreach ($matches as $key => $q) {\n\n            $key = ($this->configRepository->get('laravellocalization.localesMapping')[$key]) ?? $key;\n\n            if (!empty($this->supportedLanguages[$key])) {\n                return $key;\n            }\n\n            if ($this->use_intl) {\n                $key = Locale::canonicalize($key);\n            }\n\n            // Search for acceptable locale by 'regional' => 'af_ZA' or 'lang' => 'af-ZA' match.\n            foreach ( $this->supportedLanguages as $key_supported => $locale ) {\n                if ( (isset($locale['regional']) && $locale['regional'] == $key) || (isset($locale['lang']) && $locale['lang'] == $key) ) {\n                    return $key_supported;\n                }\n            }\n        }\n        // If any (i.e. \"*\") is acceptable, return the first supported format\n        if (isset($matches['*'])) {\n            reset($this->supportedLanguages);\n\n            return key($this->supportedLanguages);\n        }\n\n        if ($this->use_intl && !empty($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n            $http_accept_language = Locale::acceptFromHttp($_SERVER['HTTP_ACCEPT_LANGUAGE']);\n\n            if (!empty($this->supportedLanguages[$http_accept_language])) {\n                return $http_accept_language;\n            }\n        }\n\n        if ($this->request->server('REMOTE_HOST')) {\n            $remote_host = explode('.', $this->request->server('REMOTE_HOST'));\n            $lang = strtolower(end($remote_host));\n\n            if (!empty($this->supportedLanguages[$lang])) {\n                return $lang;\n            }\n        }\n\n        return $this->defaultLocale;\n    }", "code_tokens": ["public", "function", "negotiateLanguage", "(", ")", "{", "$", "matches", "=", "$", "this", "->", "getMatchesFromAcceptedLanguages", "(", ")", ";", "foreach", "(", "$", "matches", "as", "$", "key", "=>", "$", "q", ")", "{", "$", "key", "=", "(", "$", "this", "->", "configRepository", "->", "get", "(", "'laravellocalization.localesMapping'", ")", "[", "$", "key", "]", ")", "??", "$", "key", ";", "if", "(", "!", "empty", "(", "$", "this", "->", "supportedLanguages", "[", "$", "key", "]", ")", ")", "{", "return", "$", "key", ";", "}", "if", "(", "$", "this", "->", "use_intl", ")", "{", "$", "key", "=", "Locale", "::", "canonicalize", "(", "$", "key", ")", ";", "}", "// Search for acceptable locale by 'regional' => 'af_ZA' or 'lang' => 'af-ZA' match.", "foreach", "(", "$", "this", "->", "supportedLanguages", "as", "$", "key_supported", "=>", "$", "locale", ")", "{", "if", "(", "(", "isset", "(", "$", "locale", "[", "'regional'", "]", ")", "&&", "$", "locale", "[", "'regional'", "]", "==", "$", "key", ")", "||", "(", "isset", "(", "$", "locale", "[", "'lang'", "]", ")", "&&", "$", "locale", "[", "'lang'", "]", "==", "$", "key", ")", ")", "{", "return", "$", "key_supported", ";", "}", "}", "}", "// If any (i.e. \"*\") is acceptable, return the first supported format", "if", "(", "isset", "(", "$", "matches", "[", "'*'", "]", ")", ")", "{", "reset", "(", "$", "this", "->", "supportedLanguages", ")", ";", "return", "key", "(", "$", "this", "->", "supportedLanguages", ")", ";", "}", "if", "(", "$", "this", "->", "use_intl", "&&", "!", "empty", "(", "$", "_SERVER", "[", "'HTTP_ACCEPT_LANGUAGE'", "]", ")", ")", "{", "$", "http_accept_language", "=", "Locale", "::", "acceptFromHttp", "(", "$", "_SERVER", "[", "'HTTP_ACCEPT_LANGUAGE'", "]", ")", ";", "if", "(", "!", "empty", "(", "$", "this", "->", "supportedLanguages", "[", "$", "http_accept_language", "]", ")", ")", "{", "return", "$", "http_accept_language", ";", "}", "}", "if", "(", "$", "this", "->", "request", "->", "server", "(", "'REMOTE_HOST'", ")", ")", "{", "$", "remote_host", "=", "explode", "(", "'.'", ",", "$", "this", "->", "request", "->", "server", "(", "'REMOTE_HOST'", ")", ")", ";", "$", "lang", "=", "strtolower", "(", "end", "(", "$", "remote_host", ")", ")", ";", "if", "(", "!", "empty", "(", "$", "this", "->", "supportedLanguages", "[", "$", "lang", "]", ")", ")", "{", "return", "$", "lang", ";", "}", "}", "return", "$", "this", "->", "defaultLocale", ";", "}"], "docstring": "Negotiates language with the user's browser through the Accept-Language\nHTTP header or the user's host address.  Language codes are generally in\nthe form \"ll\" for a language spoken in only one country, or \"ll-CC\" for a\nlanguage spoken in a particular country.  For example, U.S. English is\n\"en-US\", while British English is \"en-UK\".  Portuguese as spoken in\nPortugal is \"pt-PT\", while Brazilian Portuguese is \"pt-BR\".\n\nThis function is based on negotiateLanguage from Pear HTTP2\nhttp://pear.php.net/package/HTTP2/\n\nQuality factors in the Accept-Language: header are supported, e.g.:\nAccept-Language: en-UK;q=0.7, en-US;q=0.6, no, dk;q=0.8\n\n@return string The negotiated language result or app.locale.", "docstring_tokens": ["Negotiates", "language", "with", "the", "user", "s", "browser", "through", "the", "Accept", "-", "Language", "HTTP", "header", "or", "the", "user", "s", "host", "address", ".", "Language", "codes", "are", "generally", "in", "the", "form", "ll", "for", "a", "language", "spoken", "in", "only", "one", "country", "or", "ll", "-", "CC", "for", "a", "language", "spoken", "in", "a", "particular", "country", ".", "For", "example", "U", ".", "S", ".", "English", "is", "en", "-", "US", "while", "British", "English", "is", "en", "-", "UK", ".", "Portuguese", "as", "spoken", "in", "Portugal", "is", "pt", "-", "PT", "while", "Brazilian", "Portuguese", "is", "pt", "-", "BR", "."], "sha": "cf89d2515d576292e65bfa5893a0efd1cc5a4064", "url": "https://github.com/mcamara/laravel-localization/blob/cf89d2515d576292e65bfa5893a0efd1cc5a4064/src/Mcamara/LaravelLocalization/LanguageNegotiator.php#L98-L145", "partition": "test"}
{"repo": "didww/php-sdk", "path": "src/Didww/API2/PSTNNetwork.php", "func_name": "PSTNNetwork.getAll", "original_string": "public static function getAll($lastRequestGmt = NULL)\n    {\n        $countries = array();\n        $response = self::getClientInstance()->call(\"getdidwwpstnrates\",\n            array('last_request_gmt' => $lastRequestGmt)\n        );\n\n\n        foreach ($response as $countryWithNetworks) {\n\n            $countries[trim($countryWithNetworks->country_iso)] = new \\Didww\\API2\\Country((array)$countryWithNetworks);\n        }\n        return $countries;\n    }", "language": "php", "code": "public static function getAll($lastRequestGmt = NULL)\n    {\n        $countries = array();\n        $response = self::getClientInstance()->call(\"getdidwwpstnrates\",\n            array('last_request_gmt' => $lastRequestGmt)\n        );\n\n\n        foreach ($response as $countryWithNetworks) {\n\n            $countries[trim($countryWithNetworks->country_iso)] = new \\Didww\\API2\\Country((array)$countryWithNetworks);\n        }\n        return $countries;\n    }", "code_tokens": ["public", "static", "function", "getAll", "(", "$", "lastRequestGmt", "=", "NULL", ")", "{", "$", "countries", "=", "array", "(", ")", ";", "$", "response", "=", "self", "::", "getClientInstance", "(", ")", "->", "call", "(", "\"getdidwwpstnrates\"", ",", "array", "(", "'last_request_gmt'", "=>", "$", "lastRequestGmt", ")", ")", ";", "foreach", "(", "$", "response", "as", "$", "countryWithNetworks", ")", "{", "$", "countries", "[", "trim", "(", "$", "countryWithNetworks", "->", "country_iso", ")", "]", "=", "new", "\\", "Didww", "\\", "API2", "\\", "Country", "(", "(", "array", ")", "$", "countryWithNetworks", ")", ";", "}", "return", "$", "countries", ";", "}"], "docstring": "get collection of pstn rates\n@link http://open.didww.com/index.php/2._Get_DIDWW_PSTN_Rates\n@param string $lastRequestGmt\n@return \\Didww\\API2\\Countries[]", "docstring_tokens": ["get", "collection", "of", "pstn", "rates"], "sha": "ee406862bceeb67bc6796f52f2bd60e103cd8de3", "url": "https://github.com/didww/php-sdk/blob/ee406862bceeb67bc6796f52f2bd60e103cd8de3/src/Didww/API2/PSTNNetwork.php#L177-L190", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Profiler/DataCollector/Bridge/PDO/TraceablePDODecorater.php", "func_name": "TraceablePDODecorater.profileCall", "original_string": "protected function profileCall(string $method, string $sql, array $args)\n    {\n        $trace = new TracedStatement($sql);\n        $trace->start();\n\n        $ex     = null;\n        $result = null;\n\n        try {\n            $result = $this->pdo->{$method}(...$args);\n        } catch (PDOException $e) {\n            $ex = $e;\n        }\n\n        if ($this->pdo->getAttribute(PDO::ATTR_ERRMODE) !== PDO::ERRMODE_EXCEPTION && $result === false) {\n            $error = $this->pdo->errorInfo();\n            $ex    = new PDOException($error[2], $error[0]);\n        }\n\n        $trace->end($ex);\n\n        $this->addExecutedStatement($trace);\n\n        if ($this->pdo->getAttribute(PDO::ATTR_ERRMODE) === PDO::ERRMODE_EXCEPTION && $ex !== null) {\n            throw $ex;\n        }\n\n        return $result;\n    }", "language": "php", "code": "protected function profileCall(string $method, string $sql, array $args)\n    {\n        $trace = new TracedStatement($sql);\n        $trace->start();\n\n        $ex     = null;\n        $result = null;\n\n        try {\n            $result = $this->pdo->{$method}(...$args);\n        } catch (PDOException $e) {\n            $ex = $e;\n        }\n\n        if ($this->pdo->getAttribute(PDO::ATTR_ERRMODE) !== PDO::ERRMODE_EXCEPTION && $result === false) {\n            $error = $this->pdo->errorInfo();\n            $ex    = new PDOException($error[2], $error[0]);\n        }\n\n        $trace->end($ex);\n\n        $this->addExecutedStatement($trace);\n\n        if ($this->pdo->getAttribute(PDO::ATTR_ERRMODE) === PDO::ERRMODE_EXCEPTION && $ex !== null) {\n            throw $ex;\n        }\n\n        return $result;\n    }", "code_tokens": ["protected", "function", "profileCall", "(", "string", "$", "method", ",", "string", "$", "sql", ",", "array", "$", "args", ")", "{", "$", "trace", "=", "new", "TracedStatement", "(", "$", "sql", ")", ";", "$", "trace", "->", "start", "(", ")", ";", "$", "ex", "=", "null", ";", "$", "result", "=", "null", ";", "try", "{", "$", "result", "=", "$", "this", "->", "pdo", "->", "{", "$", "method", "}", "(", "...", "$", "args", ")", ";", "}", "catch", "(", "PDOException", "$", "e", ")", "{", "$", "ex", "=", "$", "e", ";", "}", "if", "(", "$", "this", "->", "pdo", "->", "getAttribute", "(", "PDO", "::", "ATTR_ERRMODE", ")", "!==", "PDO", "::", "ERRMODE_EXCEPTION", "&&", "$", "result", "===", "false", ")", "{", "$", "error", "=", "$", "this", "->", "pdo", "->", "errorInfo", "(", ")", ";", "$", "ex", "=", "new", "PDOException", "(", "$", "error", "[", "2", "]", ",", "$", "error", "[", "0", "]", ")", ";", "}", "$", "trace", "->", "end", "(", "$", "ex", ")", ";", "$", "this", "->", "addExecutedStatement", "(", "$", "trace", ")", ";", "if", "(", "$", "this", "->", "pdo", "->", "getAttribute", "(", "PDO", "::", "ATTR_ERRMODE", ")", "===", "PDO", "::", "ERRMODE_EXCEPTION", "&&", "$", "ex", "!==", "null", ")", "{", "throw", "$", "ex", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Profiles a call to a PDO method.\n\n@param string $method\n@param string $sql\n@param array  $args\n\n@return mixed", "docstring_tokens": ["Profiles", "a", "call", "to", "a", "PDO", "method", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Profiler/DataCollector/Bridge/PDO/TraceablePDODecorater.php#L220-L248", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Events/Events.php", "func_name": "Events.listeners", "original_string": "public static function listeners($event_name): array\n\t{\n\t\tif (! isset(static::$listeners[$event_name]))\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\t// The list is not sorted\n\t\tif (! static::$listeners[$event_name][0])\n\t\t{\n\t\t\t// Sort it!\n\t\t\tarray_multisort(static::$listeners[$event_name][1], SORT_NUMERIC, static::$listeners[$event_name][2]);\n\n\t\t\t// Mark it as sorted already!\n\t\t\tstatic::$listeners[$event_name][0] = true;\n\t\t}\n\n\t\treturn static::$listeners[$event_name][2];\n\t}", "language": "php", "code": "public static function listeners($event_name): array\n\t{\n\t\tif (! isset(static::$listeners[$event_name]))\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\t// The list is not sorted\n\t\tif (! static::$listeners[$event_name][0])\n\t\t{\n\t\t\t// Sort it!\n\t\t\tarray_multisort(static::$listeners[$event_name][1], SORT_NUMERIC, static::$listeners[$event_name][2]);\n\n\t\t\t// Mark it as sorted already!\n\t\t\tstatic::$listeners[$event_name][0] = true;\n\t\t}\n\n\t\treturn static::$listeners[$event_name][2];\n\t}", "code_tokens": ["public", "static", "function", "listeners", "(", "$", "event_name", ")", ":", "array", "{", "if", "(", "!", "isset", "(", "static", "::", "$", "listeners", "[", "$", "event_name", "]", ")", ")", "{", "return", "[", "]", ";", "}", "// The list is not sorted", "if", "(", "!", "static", "::", "$", "listeners", "[", "$", "event_name", "]", "[", "0", "]", ")", "{", "// Sort it!", "array_multisort", "(", "static", "::", "$", "listeners", "[", "$", "event_name", "]", "[", "1", "]", ",", "SORT_NUMERIC", ",", "static", "::", "$", "listeners", "[", "$", "event_name", "]", "[", "2", "]", ")", ";", "// Mark it as sorted already!", "static", "::", "$", "listeners", "[", "$", "event_name", "]", "[", "0", "]", "=", "true", ";", "}", "return", "static", "::", "$", "listeners", "[", "$", "event_name", "]", "[", "2", "]", ";", "}"], "docstring": "Returns an array of listeners for a single event. They are\nsorted by priority.\n\nIf the listener could not be found, returns FALSE, or TRUE if\nit was removed.\n\n@param $event_name\n\n@return array", "docstring_tokens": ["Returns", "an", "array", "of", "listeners", "for", "a", "single", "event", ".", "They", "are", "sorted", "by", "priority", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Events/Events.php#L220-L238", "partition": "test"}
{"repo": "joegreen88/zf1-component-filter", "path": "src/Zend/Filter/Compress/Tar.php", "func_name": "Zend_Filter_Compress_Tar.setTarget", "original_string": "public function setTarget($target)\n    {\n        if (!file_exists(dirname($target))) {\n\n            throw new Zend_Filter_Exception(\"The directory '$target' does not exist\");\n        }\n\n        $target = str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $target);\n        $this->_options['target'] = (string) $target;\n        return $this;\n    }", "language": "php", "code": "public function setTarget($target)\n    {\n        if (!file_exists(dirname($target))) {\n\n            throw new Zend_Filter_Exception(\"The directory '$target' does not exist\");\n        }\n\n        $target = str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $target);\n        $this->_options['target'] = (string) $target;\n        return $this;\n    }", "code_tokens": ["public", "function", "setTarget", "(", "$", "target", ")", "{", "if", "(", "!", "file_exists", "(", "dirname", "(", "$", "target", ")", ")", ")", "{", "throw", "new", "Zend_Filter_Exception", "(", "\"The directory '$target' does not exist\"", ")", ";", "}", "$", "target", "=", "str_replace", "(", "array", "(", "'/'", ",", "'\\\\'", ")", ",", "DIRECTORY_SEPARATOR", ",", "$", "target", ")", ";", "$", "this", "->", "_options", "[", "'target'", "]", "=", "(", "string", ")", "$", "target", ";", "return", "$", "this", ";", "}"], "docstring": "Sets the targetpath to use\n\n@param string $target\n@return Zend_Filter_Compress_Tar", "docstring_tokens": ["Sets", "the", "targetpath", "to", "use"], "sha": "c19c3729ad352cb0ece6ae4777921722d46a1711", "url": "https://github.com/joegreen88/zf1-component-filter/blob/c19c3729ad352cb0ece6ae4777921722d46a1711/src/Zend/Filter/Compress/Tar.php#L111-L121", "partition": "test"}
{"repo": "duoshuo/php-cassandra", "path": "src/Response/StreamReader.php", "func_name": "StreamReader.readVarint", "original_string": "public function readVarint() {\n        list($higher, $lower) = array_values(unpack('N2', $this->data));\n        return $higher << 32 | $lower;\n    }", "language": "php", "code": "public function readVarint() {\n        list($higher, $lower) = array_values(unpack('N2', $this->data));\n        return $higher << 32 | $lower;\n    }", "code_tokens": ["public", "function", "readVarint", "(", ")", "{", "list", "(", "$", "higher", ",", "$", "lower", ")", "=", "array_values", "(", "unpack", "(", "'N2'", ",", "$", "this", "->", "data", ")", ")", ";", "return", "$", "higher", "<<", "32", "|", "$", "lower", ";", "}"], "docstring": "Read variable length integer.\n\n@return string", "docstring_tokens": ["Read", "variable", "length", "integer", "."], "sha": "323613df9bd2505a11fe24dc8be22c2c77c0809d", "url": "https://github.com/duoshuo/php-cassandra/blob/323613df9bd2505a11fe24dc8be22c2c77c0809d/src/Response/StreamReader.php#L206-L209", "partition": "test"}
{"repo": "didww/php-sdk", "path": "src/Didww/API2/Order.php", "func_name": "Order.fromFlatList", "original_string": "public function  fromFlatList($array)\n    {\n        //try to load order properties\n        $assignType = $this->getAssignType();\n        $this->setAssignType(\\Didww\\API2\\Object::ASSIGN_IGNORE);\n        $array = parent::fromArray($array);\n        $this->setAssignType($assignType);\n\n        //try to load number properties\n        $number = $this->_ensureNumber();\n        $assignType = $number->getAssignType();\n        $number->setAssignType(\\Didww\\API2\\Object::ASSIGN_IGNORE);\n        $array = $number->fromArray($array);\n        $number->setAssignType($assignType);\n\n        //finally create mapping object\n        $mapping = Mapping::create($array);\n\n        $this->setMapData($mapping);\n    }", "language": "php", "code": "public function  fromFlatList($array)\n    {\n        //try to load order properties\n        $assignType = $this->getAssignType();\n        $this->setAssignType(\\Didww\\API2\\Object::ASSIGN_IGNORE);\n        $array = parent::fromArray($array);\n        $this->setAssignType($assignType);\n\n        //try to load number properties\n        $number = $this->_ensureNumber();\n        $assignType = $number->getAssignType();\n        $number->setAssignType(\\Didww\\API2\\Object::ASSIGN_IGNORE);\n        $array = $number->fromArray($array);\n        $number->setAssignType($assignType);\n\n        //finally create mapping object\n        $mapping = Mapping::create($array);\n\n        $this->setMapData($mapping);\n    }", "code_tokens": ["public", "function", "fromFlatList", "(", "$", "array", ")", "{", "//try to load order properties", "$", "assignType", "=", "$", "this", "->", "getAssignType", "(", ")", ";", "$", "this", "->", "setAssignType", "(", "\\", "Didww", "\\", "API2", "\\", "Object", "::", "ASSIGN_IGNORE", ")", ";", "$", "array", "=", "parent", "::", "fromArray", "(", "$", "array", ")", ";", "$", "this", "->", "setAssignType", "(", "$", "assignType", ")", ";", "//try to load number properties", "$", "number", "=", "$", "this", "->", "_ensureNumber", "(", ")", ";", "$", "assignType", "=", "$", "number", "->", "getAssignType", "(", ")", ";", "$", "number", "->", "setAssignType", "(", "\\", "Didww", "\\", "API2", "\\", "Object", "::", "ASSIGN_IGNORE", ")", ";", "$", "array", "=", "$", "number", "->", "fromArray", "(", "$", "array", ")", ";", "$", "number", "->", "setAssignType", "(", "$", "assignType", ")", ";", "//finally create mapping object", "$", "mapping", "=", "Mapping", "::", "create", "(", "$", "array", ")", ";", "$", "this", "->", "setMapData", "(", "$", "mapping", ")", ";", "}"], "docstring": "create object from flat array\n@see parent::fromList()\n@param array $array", "docstring_tokens": ["create", "object", "from", "flat", "array"], "sha": "ee406862bceeb67bc6796f52f2bd60e103cd8de3", "url": "https://github.com/didww/php-sdk/blob/ee406862bceeb67bc6796f52f2bd60e103cd8de3/src/Didww/API2/Order.php#L327-L346", "partition": "test"}
{"repo": "tastyigniter/flame", "path": "src/Currency/CurrencyServiceProvider.php", "func_name": "CurrencyServiceProvider.registerCurrency", "original_string": "public function registerCurrency()\n    {\n        $this->app->singleton('currency', function ($app) {\n\n            $this->app['events']->fire('currency.beforeRegister', [$this]);\n\n            return new Currency(\n                $app->config->get('currency', []),\n                $app['cache']\n            );\n        });\n    }", "language": "php", "code": "public function registerCurrency()\n    {\n        $this->app->singleton('currency', function ($app) {\n\n            $this->app['events']->fire('currency.beforeRegister', [$this]);\n\n            return new Currency(\n                $app->config->get('currency', []),\n                $app['cache']\n            );\n        });\n    }", "code_tokens": ["public", "function", "registerCurrency", "(", ")", "{", "$", "this", "->", "app", "->", "singleton", "(", "'currency'", ",", "function", "(", "$", "app", ")", "{", "$", "this", "->", "app", "[", "'events'", "]", "->", "fire", "(", "'currency.beforeRegister'", ",", "[", "$", "this", "]", ")", ";", "return", "new", "Currency", "(", "$", "app", "->", "config", "->", "get", "(", "'currency'", ",", "[", "]", ")", ",", "$", "app", "[", "'cache'", "]", ")", ";", "}", ")", ";", "}"], "docstring": "Register currency provider.\n\n@return void", "docstring_tokens": ["Register", "currency", "provider", "."], "sha": "3c922ba1c02b3c14ad4adf91c2f37498045fa92a", "url": "https://github.com/tastyigniter/flame/blob/3c922ba1c02b3c14ad4adf91c2f37498045fa92a/src/Currency/CurrencyServiceProvider.php#L41-L52", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Helper/Extension/CoreExtensionHelper.php", "func_name": "CoreExtensionHelper.getLibraries", "original_string": "protected function getLibraries(Map $map)\n    {\n        $libraries = $map->getLibraries();\n\n        $encodedPolylines = $map->getEncodedPolylines();\n        if (!empty($encodedPolylines)) {\n            $libraries[] = 'geometry';\n        }\n\n        return array_unique($libraries);\n    }", "language": "php", "code": "protected function getLibraries(Map $map)\n    {\n        $libraries = $map->getLibraries();\n\n        $encodedPolylines = $map->getEncodedPolylines();\n        if (!empty($encodedPolylines)) {\n            $libraries[] = 'geometry';\n        }\n\n        return array_unique($libraries);\n    }", "code_tokens": ["protected", "function", "getLibraries", "(", "Map", "$", "map", ")", "{", "$", "libraries", "=", "$", "map", "->", "getLibraries", "(", ")", ";", "$", "encodedPolylines", "=", "$", "map", "->", "getEncodedPolylines", "(", ")", ";", "if", "(", "!", "empty", "(", "$", "encodedPolylines", ")", ")", "{", "$", "libraries", "[", "]", "=", "'geometry'", ";", "}", "return", "array_unique", "(", "$", "libraries", ")", ";", "}"], "docstring": "Gets the libraries needed for the map.\n\n@param \\Ivory\\GoogleMap\\Map $map The map.\n\n@return array The map libraries.", "docstring_tokens": ["Gets", "the", "libraries", "needed", "for", "the", "map", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Helper/Extension/CoreExtensionHelper.php#L141-L151", "partition": "test"}
{"repo": "juliangut/doctrine-base-repositories", "path": "src/RepositoryTrait.php", "func_name": "RepositoryTrait.removeBy", "original_string": "public function removeBy(array $criteria, bool $flush = false)\n    {\n        $this->runManagerAction('remove', $this->findBy($criteria), $flush);\n    }", "language": "php", "code": "public function removeBy(array $criteria, bool $flush = false)\n    {\n        $this->runManagerAction('remove', $this->findBy($criteria), $flush);\n    }", "code_tokens": ["public", "function", "removeBy", "(", "array", "$", "criteria", ",", "bool", "$", "flush", "=", "false", ")", "{", "$", "this", "->", "runManagerAction", "(", "'remove'", ",", "$", "this", "->", "findBy", "(", "$", "criteria", ")", ",", "$", "flush", ")", ";", "}"], "docstring": "Remove object filtered by a set of criteria.\n\n@param array $criteria\n@param bool  $flush", "docstring_tokens": ["Remove", "object", "filtered", "by", "a", "set", "of", "criteria", "."], "sha": "3eb661fa8f1296512c2cbb683de7995724509cb7", "url": "https://github.com/juliangut/doctrine-base-repositories/blob/3eb661fa8f1296512c2cbb683de7995724509cb7/src/RepositoryTrait.php#L239-L242", "partition": "test"}
{"repo": "chrisbarr/AmazonSNS-PHP-API", "path": "lib/AmazonSNS.php", "func_name": "AmazonSNS.publish", "original_string": "public function publish($topicArn, $message, $subject = '', $messageStructure = '') {\n\t\tif(empty($topicArn) || empty($message)) {\n\t\t\tthrow new InvalidArgumentException('Must supply a TopicARN and Message to publish to a topic');\n\t\t}\n\n\t\t$params = array(\n\t\t\t'TopicArn' => $topicArn,\n\t\t\t'Message' => $message\n\t\t);\n\n\t\tif(!empty($subject)) {\n\t\t\t$params['Subject'] = $subject;\n\t\t}\n\n\t\tif(!empty($messageStructure)) {\n\t\t\t$params['MessageStructure'] = $messageStructure;\n\t\t}\n\n\t\t$resultXml = $this->_request('Publish', $params);\n\n\t\treturn strval($resultXml->PublishResult->MessageId);\n\t}", "language": "php", "code": "public function publish($topicArn, $message, $subject = '', $messageStructure = '') {\n\t\tif(empty($topicArn) || empty($message)) {\n\t\t\tthrow new InvalidArgumentException('Must supply a TopicARN and Message to publish to a topic');\n\t\t}\n\n\t\t$params = array(\n\t\t\t'TopicArn' => $topicArn,\n\t\t\t'Message' => $message\n\t\t);\n\n\t\tif(!empty($subject)) {\n\t\t\t$params['Subject'] = $subject;\n\t\t}\n\n\t\tif(!empty($messageStructure)) {\n\t\t\t$params['MessageStructure'] = $messageStructure;\n\t\t}\n\n\t\t$resultXml = $this->_request('Publish', $params);\n\n\t\treturn strval($resultXml->PublishResult->MessageId);\n\t}", "code_tokens": ["public", "function", "publish", "(", "$", "topicArn", ",", "$", "message", ",", "$", "subject", "=", "''", ",", "$", "messageStructure", "=", "''", ")", "{", "if", "(", "empty", "(", "$", "topicArn", ")", "||", "empty", "(", "$", "message", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Must supply a TopicARN and Message to publish to a topic'", ")", ";", "}", "$", "params", "=", "array", "(", "'TopicArn'", "=>", "$", "topicArn", ",", "'Message'", "=>", "$", "message", ")", ";", "if", "(", "!", "empty", "(", "$", "subject", ")", ")", "{", "$", "params", "[", "'Subject'", "]", "=", "$", "subject", ";", "}", "if", "(", "!", "empty", "(", "$", "messageStructure", ")", ")", "{", "$", "params", "[", "'MessageStructure'", "]", "=", "$", "messageStructure", ";", "}", "$", "resultXml", "=", "$", "this", "->", "_request", "(", "'Publish'", ",", "$", "params", ")", ";", "return", "strval", "(", "$", "resultXml", "->", "PublishResult", "->", "MessageId", ")", ";", "}"], "docstring": "Publish a message to a topic\n\n@link http://docs.amazonwebservices.com/sns/latest/api/API_Publish.html\n@param string $topicArn\n@param string $message\n@param string $subject [optional] Used when sending emails\n@param string $messageStructure [optional] Used when you want to send a different message for each protocol.If you set MessageStructure to json, the value of the Message parameter must: be a syntactically valid JSON object; and contain at least a top-level JSON key of \"default\" with a value that is a string.\n@return string\n@throws InvalidArgumentException", "docstring_tokens": ["Publish", "a", "message", "to", "a", "topic"], "sha": "df3c6ae499088cc7be5be9058cbff1e660c2bc2d", "url": "https://github.com/chrisbarr/AmazonSNS-PHP-API/blob/df3c6ae499088cc7be5be9058cbff1e660c2bc2d/lib/AmazonSNS.php#L346-L367", "partition": "test"}
{"repo": "alekitto/function-mock", "path": "lib/Prediction/NoCallsPrediction.php", "func_name": "NoCallsPrediction.check", "original_string": "public function check(array $calls, FunctionProphecy $prophecy)\n    {\n        if (!count($calls)) {\n            return;\n        }\n\n        $verb = count($calls) === 1 ? 'was' : 'were';\n\n        throw new UnexpectedCallsException(sprintf(\n            \"No calls expected that match:\\n\".\n            \"  %s(%s)\\n\".\n            \"but %d %s made:\\n%s\",\n            $prophecy->getName(),\n            $prophecy->getArgumentsWildcard(),\n            count($calls),\n            $verb,\n            $this->util->stringifyCalls($calls)\n        ));\n    }", "language": "php", "code": "public function check(array $calls, FunctionProphecy $prophecy)\n    {\n        if (!count($calls)) {\n            return;\n        }\n\n        $verb = count($calls) === 1 ? 'was' : 'were';\n\n        throw new UnexpectedCallsException(sprintf(\n            \"No calls expected that match:\\n\".\n            \"  %s(%s)\\n\".\n            \"but %d %s made:\\n%s\",\n            $prophecy->getName(),\n            $prophecy->getArgumentsWildcard(),\n            count($calls),\n            $verb,\n            $this->util->stringifyCalls($calls)\n        ));\n    }", "code_tokens": ["public", "function", "check", "(", "array", "$", "calls", ",", "FunctionProphecy", "$", "prophecy", ")", "{", "if", "(", "!", "count", "(", "$", "calls", ")", ")", "{", "return", ";", "}", "$", "verb", "=", "count", "(", "$", "calls", ")", "===", "1", "?", "'was'", ":", "'were'", ";", "throw", "new", "UnexpectedCallsException", "(", "sprintf", "(", "\"No calls expected that match:\\n\"", ".", "\"  %s(%s)\\n\"", ".", "\"but %d %s made:\\n%s\"", ",", "$", "prophecy", "->", "getName", "(", ")", ",", "$", "prophecy", "->", "getArgumentsWildcard", "(", ")", ",", "count", "(", "$", "calls", ")", ",", "$", "verb", ",", "$", "this", "->", "util", "->", "stringifyCalls", "(", "$", "calls", ")", ")", ")", ";", "}"], "docstring": "Tests that there were no calls made.\n\n@param Call[]         $calls\n@param FunctionProphecy $prophecy\n\n@throws UnexpectedCallsException", "docstring_tokens": ["Tests", "that", "there", "were", "no", "calls", "made", "."], "sha": "cd920d7e5da05df8df38b349169cb8adac5e6b27", "url": "https://github.com/alekitto/function-mock/blob/cd920d7e5da05df8df38b349169cb8adac5e6b27/lib/Prediction/NoCallsPrediction.php#L32-L50", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/Pgsql/PgConnection.php", "func_name": "PgConnection.setState", "original_string": "protected function setState($state)\n    {\n        $this->queryState = $state;\n        $map = [\n            static::STATE_BUSY => static::CLIENT_POOL_STATE_BUSY,\n            static::STATE_READY => static::CLIENT_POOL_STATE_READY,\n        ];\n        $statePool = isset($map[$state]) ? $map[$state] : static::CLIENT_POOL_STATE_NOT_READY;\n        $this->changeState($statePool);\n    }", "language": "php", "code": "protected function setState($state)\n    {\n        $this->queryState = $state;\n        $map = [\n            static::STATE_BUSY => static::CLIENT_POOL_STATE_BUSY,\n            static::STATE_READY => static::CLIENT_POOL_STATE_READY,\n        ];\n        $statePool = isset($map[$state]) ? $map[$state] : static::CLIENT_POOL_STATE_NOT_READY;\n        $this->changeState($statePool);\n    }", "code_tokens": ["protected", "function", "setState", "(", "$", "state", ")", "{", "$", "this", "->", "queryState", "=", "$", "state", ";", "$", "map", "=", "[", "static", "::", "STATE_BUSY", "=>", "static", "::", "CLIENT_POOL_STATE_BUSY", ",", "static", "::", "STATE_READY", "=>", "static", "::", "CLIENT_POOL_STATE_READY", ",", "]", ";", "$", "statePool", "=", "isset", "(", "$", "map", "[", "$", "state", "]", ")", "?", "$", "map", "[", "$", "state", "]", ":", "static", "::", "CLIENT_POOL_STATE_NOT_READY", ";", "$", "this", "->", "changeState", "(", "$", "statePool", ")", ";", "}"], "docstring": "Set query state\n@param int $state", "docstring_tokens": ["Set", "query", "state"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/Pgsql/PgConnection.php#L166-L175", "partition": "test"}
{"repo": "ClanCats/Container", "path": "src/Container.php", "func_name": "Container.addMetaData", "original_string": "public function addMetaData(string $serviceName, string $key, array $values)\n    {\n        // make sure the service exists\n        if (!$this->has($serviceName)) {\n            throw new UnknownServiceException('There is no service named \"' . $serviceName . '\" specified.'); \n        }\n\n        // make sure the metadata key is allocated\n        if (!isset($this->metadata[$key])) {\n            $this->metadata[$key] = [];\n        }\n\n        // make sure the service key is allocated\n        if (!isset($this->metadata[$key][$serviceName])) {\n            $this->metadata[$key][$serviceName] = [];\n        }\n\n        // append\n        $this->metadata[$key][$serviceName][] = $values;\n        $this->linkMetaService($serviceName, $key);\n    }", "language": "php", "code": "public function addMetaData(string $serviceName, string $key, array $values)\n    {\n        // make sure the service exists\n        if (!$this->has($serviceName)) {\n            throw new UnknownServiceException('There is no service named \"' . $serviceName . '\" specified.'); \n        }\n\n        // make sure the metadata key is allocated\n        if (!isset($this->metadata[$key])) {\n            $this->metadata[$key] = [];\n        }\n\n        // make sure the service key is allocated\n        if (!isset($this->metadata[$key][$serviceName])) {\n            $this->metadata[$key][$serviceName] = [];\n        }\n\n        // append\n        $this->metadata[$key][$serviceName][] = $values;\n        $this->linkMetaService($serviceName, $key);\n    }", "code_tokens": ["public", "function", "addMetaData", "(", "string", "$", "serviceName", ",", "string", "$", "key", ",", "array", "$", "values", ")", "{", "// make sure the service exists", "if", "(", "!", "$", "this", "->", "has", "(", "$", "serviceName", ")", ")", "{", "throw", "new", "UnknownServiceException", "(", "'There is no service named \"'", ".", "$", "serviceName", ".", "'\" specified.'", ")", ";", "}", "// make sure the metadata key is allocated", "if", "(", "!", "isset", "(", "$", "this", "->", "metadata", "[", "$", "key", "]", ")", ")", "{", "$", "this", "->", "metadata", "[", "$", "key", "]", "=", "[", "]", ";", "}", "// make sure the service key is allocated", "if", "(", "!", "isset", "(", "$", "this", "->", "metadata", "[", "$", "key", "]", "[", "$", "serviceName", "]", ")", ")", "{", "$", "this", "->", "metadata", "[", "$", "key", "]", "[", "$", "serviceName", "]", "=", "[", "]", ";", "}", "// append", "$", "this", "->", "metadata", "[", "$", "key", "]", "[", "$", "serviceName", "]", "[", "]", "=", "$", "values", ";", "$", "this", "->", "linkMetaService", "(", "$", "serviceName", ",", "$", "key", ")", ";", "}"], "docstring": "Same as `setMetaData` but will append the data instead of overriding.\n\n@param string            $serviceName\n@param string            $key\n@param array             $values\n\n@return void", "docstring_tokens": ["Same", "as", "setMetaData", "but", "will", "append", "the", "data", "instead", "of", "overriding", "."], "sha": "95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12", "url": "https://github.com/ClanCats/Container/blob/95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12/src/Container.php#L229-L249", "partition": "test"}
{"repo": "flugger/laravel-responder", "path": "src/Transformers/Concerns/MakesResources.php", "func_name": "MakesResources.includeResourceFromModel", "original_string": "protected function includeResourceFromModel(Model $model, string $identifier, $transformer = null): ResourceInterface\n    {\n        $data = $this->resolveRelation($model, $identifier);\n\n        if (! $this->shouldCacheResource($data)) {\n            return $this->resource($data, $transformer, $identifier);\n        } elseif (key_exists($identifier, $this->resources)) {\n            return $this->resources[$identifier]->setData($data);\n        }\n\n        return $this->resources[$identifier] = $this->resource($data, $transformer, $identifier);\n    }", "language": "php", "code": "protected function includeResourceFromModel(Model $model, string $identifier, $transformer = null): ResourceInterface\n    {\n        $data = $this->resolveRelation($model, $identifier);\n\n        if (! $this->shouldCacheResource($data)) {\n            return $this->resource($data, $transformer, $identifier);\n        } elseif (key_exists($identifier, $this->resources)) {\n            return $this->resources[$identifier]->setData($data);\n        }\n\n        return $this->resources[$identifier] = $this->resource($data, $transformer, $identifier);\n    }", "code_tokens": ["protected", "function", "includeResourceFromModel", "(", "Model", "$", "model", ",", "string", "$", "identifier", ",", "$", "transformer", "=", "null", ")", ":", "ResourceInterface", "{", "$", "data", "=", "$", "this", "->", "resolveRelation", "(", "$", "model", ",", "$", "identifier", ")", ";", "if", "(", "!", "$", "this", "->", "shouldCacheResource", "(", "$", "data", ")", ")", "{", "return", "$", "this", "->", "resource", "(", "$", "data", ",", "$", "transformer", ",", "$", "identifier", ")", ";", "}", "elseif", "(", "key_exists", "(", "$", "identifier", ",", "$", "this", "->", "resources", ")", ")", "{", "return", "$", "this", "->", "resources", "[", "$", "identifier", "]", "->", "setData", "(", "$", "data", ")", ";", "}", "return", "$", "this", "->", "resources", "[", "$", "identifier", "]", "=", "$", "this", "->", "resource", "(", "$", "data", ",", "$", "transformer", ",", "$", "identifier", ")", ";", "}"], "docstring": "Include a related resource from a model and cache the resource type for following calls.\n\n@param  \\Illuminate\\Database\\Eloquent\\Model                            $model\n@param  string                                                         $identifier\n@param  \\Flugg\\Responder\\Transformers\\Transformer|string|callable|null $transformer\n@return \\League\\Fractal\\Resource\\ResourceInterface", "docstring_tokens": ["Include", "a", "related", "resource", "from", "a", "model", "and", "cache", "the", "resource", "type", "for", "following", "calls", "."], "sha": "4baadabc9087d73927cf13b65a253f9e7ddef15c", "url": "https://github.com/flugger/laravel-responder/blob/4baadabc9087d73927cf13b65a253f9e7ddef15c/src/Transformers/Concerns/MakesResources.php#L79-L90", "partition": "test"}
{"repo": "stone-lab/Dynamicfield", "path": "Utility/Fields/FieldBase.php", "func_name": "FieldBase.saveRepeaterField", "original_string": "public function saveRepeaterField()\n    {\n        $repeaterId = $this->repeaterId;\n\n        $repeaterTranslate = RepeaterTranslation::firstOrNew(array('id' => $this->translationId));\n\n        if (!$repeaterTranslate->id) {\n            $entity = Entity::getEntity($this->entityId, $this->entityType, $repeaterId);\n            if (!$entity->id) {\n                $entity->entity_id = $this->entityId;\n                $entity->entity_type = $this->entityType;\n                $entity->field_id = $repeaterId;\n                $entity->save();\n            }\n            $repeaterTranslate->entity_repeater_id = $entity->id;\n            $repeaterTranslate->locale = $this->locale;\n            $repeaterTranslate->save();\n        }\n        $this->model->translation_id = $repeaterTranslate->id;\n        $this->model->field_id = $this->fieldId;\n\n        $this->model->value = $this->getValue();\n        $this->model->save();\n        // assign translate_id to same group;\n        $this->translationId = $this->model->translation_id;\n    }", "language": "php", "code": "public function saveRepeaterField()\n    {\n        $repeaterId = $this->repeaterId;\n\n        $repeaterTranslate = RepeaterTranslation::firstOrNew(array('id' => $this->translationId));\n\n        if (!$repeaterTranslate->id) {\n            $entity = Entity::getEntity($this->entityId, $this->entityType, $repeaterId);\n            if (!$entity->id) {\n                $entity->entity_id = $this->entityId;\n                $entity->entity_type = $this->entityType;\n                $entity->field_id = $repeaterId;\n                $entity->save();\n            }\n            $repeaterTranslate->entity_repeater_id = $entity->id;\n            $repeaterTranslate->locale = $this->locale;\n            $repeaterTranslate->save();\n        }\n        $this->model->translation_id = $repeaterTranslate->id;\n        $this->model->field_id = $this->fieldId;\n\n        $this->model->value = $this->getValue();\n        $this->model->save();\n        // assign translate_id to same group;\n        $this->translationId = $this->model->translation_id;\n    }", "code_tokens": ["public", "function", "saveRepeaterField", "(", ")", "{", "$", "repeaterId", "=", "$", "this", "->", "repeaterId", ";", "$", "repeaterTranslate", "=", "RepeaterTranslation", "::", "firstOrNew", "(", "array", "(", "'id'", "=>", "$", "this", "->", "translationId", ")", ")", ";", "if", "(", "!", "$", "repeaterTranslate", "->", "id", ")", "{", "$", "entity", "=", "Entity", "::", "getEntity", "(", "$", "this", "->", "entityId", ",", "$", "this", "->", "entityType", ",", "$", "repeaterId", ")", ";", "if", "(", "!", "$", "entity", "->", "id", ")", "{", "$", "entity", "->", "entity_id", "=", "$", "this", "->", "entityId", ";", "$", "entity", "->", "entity_type", "=", "$", "this", "->", "entityType", ";", "$", "entity", "->", "field_id", "=", "$", "repeaterId", ";", "$", "entity", "->", "save", "(", ")", ";", "}", "$", "repeaterTranslate", "->", "entity_repeater_id", "=", "$", "entity", "->", "id", ";", "$", "repeaterTranslate", "->", "locale", "=", "$", "this", "->", "locale", ";", "$", "repeaterTranslate", "->", "save", "(", ")", ";", "}", "$", "this", "->", "model", "->", "translation_id", "=", "$", "repeaterTranslate", "->", "id", ";", "$", "this", "->", "model", "->", "field_id", "=", "$", "this", "->", "fieldId", ";", "$", "this", "->", "model", "->", "value", "=", "$", "this", "->", "getValue", "(", ")", ";", "$", "this", "->", "model", "->", "save", "(", ")", ";", "// assign translate_id to same group;", "$", "this", "->", "translationId", "=", "$", "this", "->", "model", "->", "translation_id", ";", "}"], "docstring": "Save repeat data for field of repeater.", "docstring_tokens": ["Save", "repeat", "data", "for", "field", "of", "repeater", "."], "sha": "7d25050180000b482d5efe301f54b9ce78963181", "url": "https://github.com/stone-lab/Dynamicfield/blob/7d25050180000b482d5efe301f54b9ce78963181/Utility/Fields/FieldBase.php#L293-L318", "partition": "test"}
{"repo": "m1/Vars", "path": "src/Vars.php", "func_name": "Vars.getResource", "original_string": "public function getResource($resource)\n    {\n        foreach ($this->getResources() as $r) {\n            if ($resource === $r->getFilename()) {\n                return $r;\n            }\n        }\n\n        return false;\n    }", "language": "php", "code": "public function getResource($resource)\n    {\n        foreach ($this->getResources() as $r) {\n            if ($resource === $r->getFilename()) {\n                return $r;\n            }\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "getResource", "(", "$", "resource", ")", "{", "foreach", "(", "$", "this", "->", "getResources", "(", ")", "as", "$", "r", ")", "{", "if", "(", "$", "resource", "===", "$", "r", "->", "getFilename", "(", ")", ")", "{", "return", "$", "r", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Searches the resource stack for a certain resource\n\n@param string $resource The resource to search for\n\n@return \\M1\\Vars\\Resource\\FileResource|bool Returns the resource if found", "docstring_tokens": ["Searches", "the", "resource", "stack", "for", "a", "certain", "resource"], "sha": "e64beb6d67ad30c0c86ec1e77022d6803ac11eda", "url": "https://github.com/m1/Vars/blob/e64beb6d67ad30c0c86ec1e77022d6803ac11eda/src/Vars.php#L330-L339", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/HTTP/IncomingRequest.php", "func_name": "IncomingRequest.isSecure", "original_string": "public function isSecure(): bool\n\t{\n\t\tif (! empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telseif (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telseif (! empty($_SERVER['HTTP_FRONT_END_HTTPS']) && strtolower($_SERVER['HTTP_FRONT_END_HTTPS']) !== 'off')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}", "language": "php", "code": "public function isSecure(): bool\n\t{\n\t\tif (! empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telseif (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telseif (! empty($_SERVER['HTTP_FRONT_END_HTTPS']) && strtolower($_SERVER['HTTP_FRONT_END_HTTPS']) !== 'off')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}", "code_tokens": ["public", "function", "isSecure", "(", ")", ":", "bool", "{", "if", "(", "!", "empty", "(", "$", "_SERVER", "[", "'HTTPS'", "]", ")", "&&", "strtolower", "(", "$", "_SERVER", "[", "'HTTPS'", "]", ")", "!==", "'off'", ")", "{", "return", "true", ";", "}", "elseif", "(", "isset", "(", "$", "_SERVER", "[", "'HTTP_X_FORWARDED_PROTO'", "]", ")", "&&", "$", "_SERVER", "[", "'HTTP_X_FORWARDED_PROTO'", "]", "===", "'https'", ")", "{", "return", "true", ";", "}", "elseif", "(", "!", "empty", "(", "$", "_SERVER", "[", "'HTTP_FRONT_END_HTTPS'", "]", ")", "&&", "strtolower", "(", "$", "_SERVER", "[", "'HTTP_FRONT_END_HTTPS'", "]", ")", "!==", "'off'", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Attempts to detect if the current connection is secure through\na few different methods.\n\n@return boolean", "docstring_tokens": ["Attempts", "to", "detect", "if", "the", "current", "connection", "is", "secure", "through", "a", "few", "different", "methods", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/HTTP/IncomingRequest.php#L299-L315", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/HTTP/Negotiate.php", "func_name": "Negotiate.matchParameters", "original_string": "protected function matchParameters(array $acceptable, array $supported): bool\n\t{\n\t\tif (count($acceptable['params']) !== count($supported['params']))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tforeach ($supported['params'] as $label => $value)\n\t\t{\n\t\t\tif (! isset($acceptable['params'][$label]) ||\n\t\t\t\t\t$acceptable['params'][$label] !== $value)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}", "language": "php", "code": "protected function matchParameters(array $acceptable, array $supported): bool\n\t{\n\t\tif (count($acceptable['params']) !== count($supported['params']))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tforeach ($supported['params'] as $label => $value)\n\t\t{\n\t\t\tif (! isset($acceptable['params'][$label]) ||\n\t\t\t\t\t$acceptable['params'][$label] !== $value)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}", "code_tokens": ["protected", "function", "matchParameters", "(", "array", "$", "acceptable", ",", "array", "$", "supported", ")", ":", "bool", "{", "if", "(", "count", "(", "$", "acceptable", "[", "'params'", "]", ")", "!==", "count", "(", "$", "supported", "[", "'params'", "]", ")", ")", "{", "return", "false", ";", "}", "foreach", "(", "$", "supported", "[", "'params'", "]", "as", "$", "label", "=>", "$", "value", ")", "{", "if", "(", "!", "isset", "(", "$", "acceptable", "[", "'params'", "]", "[", "$", "label", "]", ")", "||", "$", "acceptable", "[", "'params'", "]", "[", "$", "label", "]", "!==", "$", "value", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "docstring": "Checks two Accept values with matching 'values' to see if their\n'params' are the same.\n\n@param array $acceptable\n@param array $supported\n\n@return boolean", "docstring_tokens": ["Checks", "two", "Accept", "values", "with", "matching", "values", "to", "see", "if", "their", "params", "are", "the", "same", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/HTTP/Negotiate.php#L379-L396", "partition": "test"}
{"repo": "TYPO3-Console/TYPO3-Console", "path": "Classes/Console/Command/BackendCommandController.php", "func_name": "BackendCommandController.createAdminCommand", "original_string": "public function createAdminCommand(string $username, string $password)\n    {\n        $givenUsername = $username;\n        $username = strtolower(preg_replace('/\\\\s/i', '', $username));\n\n        if ($givenUsername !== $username) {\n            $this->outputLine('<warning>Given username \"%s\" contains invalid characters. Using \"%s\" instead.</warning>', [$givenUsername, $username]);\n        }\n\n        if (strlen($username) < 4) {\n            $this->outputLine('<error>Username must be at least 4 characters.</error>');\n            $this->quit(1);\n        }\n        if (strlen($password) < 8) {\n            $this->outputLine('<error>Password must be at least 8 characters.</error>');\n            $this->quit(1);\n        }\n        $connectionPool = GeneralUtility::makeInstance(ConnectionPool::class);\n        $userExists = $connectionPool->getConnectionForTable('be_users')\n            ->count(\n                'uid',\n                'be_users',\n                ['username' => $username]\n            );\n        if ($userExists) {\n            $this->outputLine('<error>A user with username \"%s\" already exists.</error>', [$username]);\n            $this->quit(1);\n        }\n        $adminUserFields = [\n            'username' => $username,\n            'password' => $this->salt->getHashedPassword($password),\n            'admin' => 1,\n            'tstamp' => $GLOBALS['EXEC_TIME'],\n            'crdate' => $GLOBALS['EXEC_TIME'],\n        ];\n        $connectionPool->getConnectionForTable('be_users')\n            ->insert('be_users', $adminUserFields);\n\n        $this->outputLine('<info>Created admin user with username \"%s\".</info>', [$username]);\n    }", "language": "php", "code": "public function createAdminCommand(string $username, string $password)\n    {\n        $givenUsername = $username;\n        $username = strtolower(preg_replace('/\\\\s/i', '', $username));\n\n        if ($givenUsername !== $username) {\n            $this->outputLine('<warning>Given username \"%s\" contains invalid characters. Using \"%s\" instead.</warning>', [$givenUsername, $username]);\n        }\n\n        if (strlen($username) < 4) {\n            $this->outputLine('<error>Username must be at least 4 characters.</error>');\n            $this->quit(1);\n        }\n        if (strlen($password) < 8) {\n            $this->outputLine('<error>Password must be at least 8 characters.</error>');\n            $this->quit(1);\n        }\n        $connectionPool = GeneralUtility::makeInstance(ConnectionPool::class);\n        $userExists = $connectionPool->getConnectionForTable('be_users')\n            ->count(\n                'uid',\n                'be_users',\n                ['username' => $username]\n            );\n        if ($userExists) {\n            $this->outputLine('<error>A user with username \"%s\" already exists.</error>', [$username]);\n            $this->quit(1);\n        }\n        $adminUserFields = [\n            'username' => $username,\n            'password' => $this->salt->getHashedPassword($password),\n            'admin' => 1,\n            'tstamp' => $GLOBALS['EXEC_TIME'],\n            'crdate' => $GLOBALS['EXEC_TIME'],\n        ];\n        $connectionPool->getConnectionForTable('be_users')\n            ->insert('be_users', $adminUserFields);\n\n        $this->outputLine('<info>Created admin user with username \"%s\".</info>', [$username]);\n    }", "code_tokens": ["public", "function", "createAdminCommand", "(", "string", "$", "username", ",", "string", "$", "password", ")", "{", "$", "givenUsername", "=", "$", "username", ";", "$", "username", "=", "strtolower", "(", "preg_replace", "(", "'/\\\\s/i'", ",", "''", ",", "$", "username", ")", ")", ";", "if", "(", "$", "givenUsername", "!==", "$", "username", ")", "{", "$", "this", "->", "outputLine", "(", "'<warning>Given username \"%s\" contains invalid characters. Using \"%s\" instead.</warning>'", ",", "[", "$", "givenUsername", ",", "$", "username", "]", ")", ";", "}", "if", "(", "strlen", "(", "$", "username", ")", "<", "4", ")", "{", "$", "this", "->", "outputLine", "(", "'<error>Username must be at least 4 characters.</error>'", ")", ";", "$", "this", "->", "quit", "(", "1", ")", ";", "}", "if", "(", "strlen", "(", "$", "password", ")", "<", "8", ")", "{", "$", "this", "->", "outputLine", "(", "'<error>Password must be at least 8 characters.</error>'", ")", ";", "$", "this", "->", "quit", "(", "1", ")", ";", "}", "$", "connectionPool", "=", "GeneralUtility", "::", "makeInstance", "(", "ConnectionPool", "::", "class", ")", ";", "$", "userExists", "=", "$", "connectionPool", "->", "getConnectionForTable", "(", "'be_users'", ")", "->", "count", "(", "'uid'", ",", "'be_users'", ",", "[", "'username'", "=>", "$", "username", "]", ")", ";", "if", "(", "$", "userExists", ")", "{", "$", "this", "->", "outputLine", "(", "'<error>A user with username \"%s\" already exists.</error>'", ",", "[", "$", "username", "]", ")", ";", "$", "this", "->", "quit", "(", "1", ")", ";", "}", "$", "adminUserFields", "=", "[", "'username'", "=>", "$", "username", ",", "'password'", "=>", "$", "this", "->", "salt", "->", "getHashedPassword", "(", "$", "password", ")", ",", "'admin'", "=>", "1", ",", "'tstamp'", "=>", "$", "GLOBALS", "[", "'EXEC_TIME'", "]", ",", "'crdate'", "=>", "$", "GLOBALS", "[", "'EXEC_TIME'", "]", ",", "]", ";", "$", "connectionPool", "->", "getConnectionForTable", "(", "'be_users'", ")", "->", "insert", "(", "'be_users'", ",", "$", "adminUserFields", ")", ";", "$", "this", "->", "outputLine", "(", "'<info>Created admin user with username \"%s\".</info>'", ",", "[", "$", "username", "]", ")", ";", "}"], "docstring": "Create admin backend user\n\nCreate a new user with administrative access.\n\n@param string $username Username of the user\n@param string $password Password of the user", "docstring_tokens": ["Create", "admin", "backend", "user"], "sha": "a8983d65aa5e2b7495082059cd72b6403b14abfd", "url": "https://github.com/TYPO3-Console/TYPO3-Console/blob/a8983d65aa5e2b7495082059cd72b6403b14abfd/Classes/Console/Command/BackendCommandController.php#L142-L181", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Easy/EasyFormWizard.php", "func_name": "EasyFormWizard.goBack", "original_string": "public function goBack()\n    {\n        $recArr = $this->readInputRecord();\n        $this->setActiveRecord($recArr);\n\t\t$this->activeRecord = $this->readInputRecord();\n\t\t\n        $viewObj = $this->getWebpageObject();\n        \n        // get the step\n        if($viewObj->getCurrentStep()){\n        \t$step = $viewObj->getCurrentStep();\n        }else{\n        \t$step = $_GET['step'];\n        }\n\n        // redirect the prev step\n        /* @var $viewObj WebPageWizard */\n        \n        $viewObj->renderStep($step-1);\n    }", "language": "php", "code": "public function goBack()\n    {\n        $recArr = $this->readInputRecord();\n        $this->setActiveRecord($recArr);\n\t\t$this->activeRecord = $this->readInputRecord();\n\t\t\n        $viewObj = $this->getWebpageObject();\n        \n        // get the step\n        if($viewObj->getCurrentStep()){\n        \t$step = $viewObj->getCurrentStep();\n        }else{\n        \t$step = $_GET['step'];\n        }\n\n        // redirect the prev step\n        /* @var $viewObj WebPageWizard */\n        \n        $viewObj->renderStep($step-1);\n    }", "code_tokens": ["public", "function", "goBack", "(", ")", "{", "$", "recArr", "=", "$", "this", "->", "readInputRecord", "(", ")", ";", "$", "this", "->", "setActiveRecord", "(", "$", "recArr", ")", ";", "$", "this", "->", "activeRecord", "=", "$", "this", "->", "readInputRecord", "(", ")", ";", "$", "viewObj", "=", "$", "this", "->", "getWebpageObject", "(", ")", ";", "// get the step", "if", "(", "$", "viewObj", "->", "getCurrentStep", "(", ")", ")", "{", "$", "step", "=", "$", "viewObj", "->", "getCurrentStep", "(", ")", ";", "}", "else", "{", "$", "step", "=", "$", "_GET", "[", "'step'", "]", ";", "}", "// redirect the prev step", "/* @var $viewObj WebPageWizard */", "$", "viewObj", "->", "renderStep", "(", "$", "step", "-", "1", ")", ";", "}"], "docstring": "Go to previous wizard page\n\n@return void\n@access remote", "docstring_tokens": ["Go", "to", "previous", "wizard", "page"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Easy/EasyFormWizard.php#L145-L164", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/Utilities.php", "func_name": "QuickBooks_Utilities.listObjects", "original_string": "static public function listObjects($filter = null, $return_keys = false, $order_for_mapping = false)\n\t{\n\t\tstatic $cache = array();\n\t\t\n\t\t$crunch = $filter . '[' . $return_keys . '[' . $order_for_mapping;\n\t\t\n\t\tif (isset($cache[$crunch]))\n\t\t{\n\t\t\treturn $cache[$crunch];\n\t\t}\n\t\t\n\t\t$constants = array();\n\t\t\t\n\t\tforeach (get_defined_constants() as $constant => $value)\n\t\t{\n\t\t\tif (substr($constant, 0, strlen('QUICKBOOKS_OBJECT_')) == 'QUICKBOOKS_OBJECT_' and \n\t\t\t\tsubstr_count($constant, '_') == 2)\n\t\t\t{\n\t\t\t\tif (!$return_keys)\n\t\t\t\t{\n\t\t\t\t\t$constant = $value;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ($filter)\n\t\t\t\t{\n\t\t\t\t\tif (QuickBooks_Utilities::fnmatch($filter, $constant))\n\t\t\t\t\t{\n\t\t\t\t\t\t$constants[] = $constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$constants[] = $constant;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif ($order_for_mapping)\n\t\t{\n\t\t\t// Sort with the very longest values first, to the shortest values last\n\t\t\tusort($constants, function($a, $b){ return strlen($a) > strlen($b) ? -1 : 1; });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsort($constants);\n\t\t}\n\t\t\t\n\t\t$cache[$crunch] = $constants;\n\t\t\t\n\t\treturn $constants;\n\t}", "language": "php", "code": "static public function listObjects($filter = null, $return_keys = false, $order_for_mapping = false)\n\t{\n\t\tstatic $cache = array();\n\t\t\n\t\t$crunch = $filter . '[' . $return_keys . '[' . $order_for_mapping;\n\t\t\n\t\tif (isset($cache[$crunch]))\n\t\t{\n\t\t\treturn $cache[$crunch];\n\t\t}\n\t\t\n\t\t$constants = array();\n\t\t\t\n\t\tforeach (get_defined_constants() as $constant => $value)\n\t\t{\n\t\t\tif (substr($constant, 0, strlen('QUICKBOOKS_OBJECT_')) == 'QUICKBOOKS_OBJECT_' and \n\t\t\t\tsubstr_count($constant, '_') == 2)\n\t\t\t{\n\t\t\t\tif (!$return_keys)\n\t\t\t\t{\n\t\t\t\t\t$constant = $value;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ($filter)\n\t\t\t\t{\n\t\t\t\t\tif (QuickBooks_Utilities::fnmatch($filter, $constant))\n\t\t\t\t\t{\n\t\t\t\t\t\t$constants[] = $constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$constants[] = $constant;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif ($order_for_mapping)\n\t\t{\n\t\t\t// Sort with the very longest values first, to the shortest values last\n\t\t\tusort($constants, function($a, $b){ return strlen($a) > strlen($b) ? -1 : 1; });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsort($constants);\n\t\t}\n\t\t\t\n\t\t$cache[$crunch] = $constants;\n\t\t\t\n\t\treturn $constants;\n\t}", "code_tokens": ["static", "public", "function", "listObjects", "(", "$", "filter", "=", "null", ",", "$", "return_keys", "=", "false", ",", "$", "order_for_mapping", "=", "false", ")", "{", "static", "$", "cache", "=", "array", "(", ")", ";", "$", "crunch", "=", "$", "filter", ".", "'['", ".", "$", "return_keys", ".", "'['", ".", "$", "order_for_mapping", ";", "if", "(", "isset", "(", "$", "cache", "[", "$", "crunch", "]", ")", ")", "{", "return", "$", "cache", "[", "$", "crunch", "]", ";", "}", "$", "constants", "=", "array", "(", ")", ";", "foreach", "(", "get_defined_constants", "(", ")", "as", "$", "constant", "=>", "$", "value", ")", "{", "if", "(", "substr", "(", "$", "constant", ",", "0", ",", "strlen", "(", "'QUICKBOOKS_OBJECT_'", ")", ")", "==", "'QUICKBOOKS_OBJECT_'", "and", "substr_count", "(", "$", "constant", ",", "'_'", ")", "==", "2", ")", "{", "if", "(", "!", "$", "return_keys", ")", "{", "$", "constant", "=", "$", "value", ";", "}", "if", "(", "$", "filter", ")", "{", "if", "(", "QuickBooks_Utilities", "::", "fnmatch", "(", "$", "filter", ",", "$", "constant", ")", ")", "{", "$", "constants", "[", "]", "=", "$", "constant", ";", "}", "}", "else", "{", "$", "constants", "[", "]", "=", "$", "constant", ";", "}", "}", "}", "if", "(", "$", "order_for_mapping", ")", "{", "// Sort with the very longest values first, to the shortest values last", "usort", "(", "$", "constants", ",", "function", "(", "$", "a", ",", "$", "b", ")", "{", "return", "strlen", "(", "$", "a", ")", ">", "strlen", "(", "$", "b", ")", "?", "-", "1", ":", "1", ";", "}", ")", ";", "}", "else", "{", "sort", "(", "$", "constants", ")", ";", "}", "$", "cache", "[", "$", "crunch", "]", "=", "$", "constants", ";", "return", "$", "constants", ";", "}"], "docstring": "List all of the QuickBooks object types supported by the framework\n\n@param string $filter\n@param boolean $return_keys\n@param boolean $order_for_mapping\n@return array", "docstring_tokens": ["List", "all", "of", "the", "QuickBooks", "object", "types", "supported", "by", "the", "framework"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/Utilities.php#L703-L753", "partition": "test"}
{"repo": "antaresproject/acl", "path": "src/Processor/Role.php", "func_name": "Role.saving", "original_string": "protected function saving(Eloquent $role, $input = [], $type = 'create')\n    {\n        $beforeEvent = ($type === 'create' ? 'creating' : 'updating');\n        $afterEvent  = ($type === 'create' ? 'created' : 'updated');\n\n        $name = $input['name'];\n        $role->fill([\n            'name'        => snake_case($name, '-'),\n            'full_name'   => $name,\n            'area'        => array_get($input, 'area'),\n            'description' => $input['description']\n        ]);\n        if (!$role->exists && isset($input['roles'])) {\n            $role->parent_id = $input['roles'];\n        }\n        $this->fireEvent($beforeEvent, [$role]);\n        $this->fireEvent('saving', [$role]);\n        DB::transaction(function() use($role, $input) {\n            $role->save();\n            $this->import($input, $role);\n        });\n        $this->fireEvent($afterEvent, [$role]);\n        $this->fireEvent('saved', [$role]);\n\n        return true;\n    }", "language": "php", "code": "protected function saving(Eloquent $role, $input = [], $type = 'create')\n    {\n        $beforeEvent = ($type === 'create' ? 'creating' : 'updating');\n        $afterEvent  = ($type === 'create' ? 'created' : 'updated');\n\n        $name = $input['name'];\n        $role->fill([\n            'name'        => snake_case($name, '-'),\n            'full_name'   => $name,\n            'area'        => array_get($input, 'area'),\n            'description' => $input['description']\n        ]);\n        if (!$role->exists && isset($input['roles'])) {\n            $role->parent_id = $input['roles'];\n        }\n        $this->fireEvent($beforeEvent, [$role]);\n        $this->fireEvent('saving', [$role]);\n        DB::transaction(function() use($role, $input) {\n            $role->save();\n            $this->import($input, $role);\n        });\n        $this->fireEvent($afterEvent, [$role]);\n        $this->fireEvent('saved', [$role]);\n\n        return true;\n    }", "code_tokens": ["protected", "function", "saving", "(", "Eloquent", "$", "role", ",", "$", "input", "=", "[", "]", ",", "$", "type", "=", "'create'", ")", "{", "$", "beforeEvent", "=", "(", "$", "type", "===", "'create'", "?", "'creating'", ":", "'updating'", ")", ";", "$", "afterEvent", "=", "(", "$", "type", "===", "'create'", "?", "'created'", ":", "'updated'", ")", ";", "$", "name", "=", "$", "input", "[", "'name'", "]", ";", "$", "role", "->", "fill", "(", "[", "'name'", "=>", "snake_case", "(", "$", "name", ",", "'-'", ")", ",", "'full_name'", "=>", "$", "name", ",", "'area'", "=>", "array_get", "(", "$", "input", ",", "'area'", ")", ",", "'description'", "=>", "$", "input", "[", "'description'", "]", "]", ")", ";", "if", "(", "!", "$", "role", "->", "exists", "&&", "isset", "(", "$", "input", "[", "'roles'", "]", ")", ")", "{", "$", "role", "->", "parent_id", "=", "$", "input", "[", "'roles'", "]", ";", "}", "$", "this", "->", "fireEvent", "(", "$", "beforeEvent", ",", "[", "$", "role", "]", ")", ";", "$", "this", "->", "fireEvent", "(", "'saving'", ",", "[", "$", "role", "]", ")", ";", "DB", "::", "transaction", "(", "function", "(", ")", "use", "(", "$", "role", ",", "$", "input", ")", "{", "$", "role", "->", "save", "(", ")", ";", "$", "this", "->", "import", "(", "$", "input", ",", "$", "role", ")", ";", "}", ")", ";", "$", "this", "->", "fireEvent", "(", "$", "afterEvent", ",", "[", "$", "role", "]", ")", ";", "$", "this", "->", "fireEvent", "(", "'saved'", ",", "[", "$", "role", "]", ")", ";", "return", "true", ";", "}"], "docstring": "Save the role.\n\n@param  \\Antares\\Model\\Role  $role\n@param  array  $input\n@param  string  $type\n\n@return bool", "docstring_tokens": ["Save", "the", "role", "."], "sha": "00b77857fd77990083fd0f177f9425f2e7915828", "url": "https://github.com/antaresproject/acl/blob/00b77857fd77990083fd0f177f9425f2e7915828/src/Processor/Role.php#L197-L222", "partition": "test"}
{"repo": "whatthejeff/php-drawille", "path": "src/Drawille/Canvas.php", "func_name": "Canvas.rows", "original_string": "public function rows(array $options = []) {\n        if (!isset($options['min_y']) || !isset($options['max_y'])) {\n            if (!($keys = array_keys($this->chars))) {\n                return [];\n            }\n        }\n\n        $min = isset($options['min_y']) ? $options['min_y'] : min($keys);\n        $max = isset($options['max_y']) ? $options['max_y'] : max($keys);\n\n        if (!isset($options['min_x']) || !isset($options['max_x'])) {\n            $flattened = array();\n            foreach ($this->chars as $key => $char) {\n                $flattened = array_merge($flattened, array_keys($char));\n            }\n        }\n\n        $options['min_x'] = isset($options['min_x']) ? $options['min_x'] : min($flattened);\n        $options['max_x'] = isset($options['max_x']) ? $options['max_x'] : max($flattened);\n\n        return array_map(function ($i) use ($options) {\n            return $this->row($i, $options);\n        }, range($min, $max));\n    }", "language": "php", "code": "public function rows(array $options = []) {\n        if (!isset($options['min_y']) || !isset($options['max_y'])) {\n            if (!($keys = array_keys($this->chars))) {\n                return [];\n            }\n        }\n\n        $min = isset($options['min_y']) ? $options['min_y'] : min($keys);\n        $max = isset($options['max_y']) ? $options['max_y'] : max($keys);\n\n        if (!isset($options['min_x']) || !isset($options['max_x'])) {\n            $flattened = array();\n            foreach ($this->chars as $key => $char) {\n                $flattened = array_merge($flattened, array_keys($char));\n            }\n        }\n\n        $options['min_x'] = isset($options['min_x']) ? $options['min_x'] : min($flattened);\n        $options['max_x'] = isset($options['max_x']) ? $options['max_x'] : max($flattened);\n\n        return array_map(function ($i) use ($options) {\n            return $this->row($i, $options);\n        }, range($min, $max));\n    }", "code_tokens": ["public", "function", "rows", "(", "array", "$", "options", "=", "[", "]", ")", "{", "if", "(", "!", "isset", "(", "$", "options", "[", "'min_y'", "]", ")", "||", "!", "isset", "(", "$", "options", "[", "'max_y'", "]", ")", ")", "{", "if", "(", "!", "(", "$", "keys", "=", "array_keys", "(", "$", "this", "->", "chars", ")", ")", ")", "{", "return", "[", "]", ";", "}", "}", "$", "min", "=", "isset", "(", "$", "options", "[", "'min_y'", "]", ")", "?", "$", "options", "[", "'min_y'", "]", ":", "min", "(", "$", "keys", ")", ";", "$", "max", "=", "isset", "(", "$", "options", "[", "'max_y'", "]", ")", "?", "$", "options", "[", "'max_y'", "]", ":", "max", "(", "$", "keys", ")", ";", "if", "(", "!", "isset", "(", "$", "options", "[", "'min_x'", "]", ")", "||", "!", "isset", "(", "$", "options", "[", "'max_x'", "]", ")", ")", "{", "$", "flattened", "=", "array", "(", ")", ";", "foreach", "(", "$", "this", "->", "chars", "as", "$", "key", "=>", "$", "char", ")", "{", "$", "flattened", "=", "array_merge", "(", "$", "flattened", ",", "array_keys", "(", "$", "char", ")", ")", ";", "}", "}", "$", "options", "[", "'min_x'", "]", "=", "isset", "(", "$", "options", "[", "'min_x'", "]", ")", "?", "$", "options", "[", "'min_x'", "]", ":", "min", "(", "$", "flattened", ")", ";", "$", "options", "[", "'max_x'", "]", "=", "isset", "(", "$", "options", "[", "'max_x'", "]", ")", "?", "$", "options", "[", "'max_x'", "]", ":", "max", "(", "$", "flattened", ")", ";", "return", "array_map", "(", "function", "(", "$", "i", ")", "use", "(", "$", "options", ")", "{", "return", "$", "this", "->", "row", "(", "$", "i", ",", "$", "options", ")", ";", "}", ",", "range", "(", "$", "min", ",", "$", "max", ")", ")", ";", "}"], "docstring": "Gets all lines\n\n@param array $options options\n\n@return array line", "docstring_tokens": ["Gets", "all", "lines"], "sha": "541b2517a70b988d9f2a6249603f7331c1814957", "url": "https://github.com/whatthejeff/php-drawille/blob/541b2517a70b988d9f2a6249603f7331c1814957/src/Drawille/Canvas.php#L139-L162", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/HttpClient/Provider/StreamContext.php", "func_name": "StreamContext.buildParams", "original_string": "protected function buildParams()\n    {\n            if ($this->isPostMethod()) {\n                $params = $this->params;\n                if ($this->isJsonRequest()) {\n                    return $this\n                        ->setOption('content', $params = json_encode($params))\n                        ->setHeader('Content-Type', 'application/json')\n                        ->setHeader('Content-Length', strlen($params));\n                }\n\n                if (!empty($params)) {\n                    if (!is_string($params)) {\n                        $params = http_build_query($params);\n                    }\n\n                    return $this\n                        ->setOption('content', $params)\n                        ->setHeader('Content-Type', 'application/x-www-form-urlencoded')\n                        ->setHeader('Content-Length', strlen($params));\n                }\n\n                return $this;\n            }\n\n            return $this->buildUrl();\n    }", "language": "php", "code": "protected function buildParams()\n    {\n            if ($this->isPostMethod()) {\n                $params = $this->params;\n                if ($this->isJsonRequest()) {\n                    return $this\n                        ->setOption('content', $params = json_encode($params))\n                        ->setHeader('Content-Type', 'application/json')\n                        ->setHeader('Content-Length', strlen($params));\n                }\n\n                if (!empty($params)) {\n                    if (!is_string($params)) {\n                        $params = http_build_query($params);\n                    }\n\n                    return $this\n                        ->setOption('content', $params)\n                        ->setHeader('Content-Type', 'application/x-www-form-urlencoded')\n                        ->setHeader('Content-Length', strlen($params));\n                }\n\n                return $this;\n            }\n\n            return $this->buildUrl();\n    }", "code_tokens": ["protected", "function", "buildParams", "(", ")", "{", "if", "(", "$", "this", "->", "isPostMethod", "(", ")", ")", "{", "$", "params", "=", "$", "this", "->", "params", ";", "if", "(", "$", "this", "->", "isJsonRequest", "(", ")", ")", "{", "return", "$", "this", "->", "setOption", "(", "'content'", ",", "$", "params", "=", "json_encode", "(", "$", "params", ")", ")", "->", "setHeader", "(", "'Content-Type'", ",", "'application/json'", ")", "->", "setHeader", "(", "'Content-Length'", ",", "strlen", "(", "$", "params", ")", ")", ";", "}", "if", "(", "!", "empty", "(", "$", "params", ")", ")", "{", "if", "(", "!", "is_string", "(", "$", "params", ")", ")", "{", "$", "params", "=", "http_build_query", "(", "$", "params", ")", ";", "}", "return", "$", "this", "->", "setOption", "(", "'content'", ",", "$", "params", ")", "->", "setHeader", "(", "'Content-Type'", ",", "'application/x-www-form-urlencoded'", ")", "->", "setHeader", "(", "'Content-Length'", ",", "strlen", "(", "$", "params", ")", ")", ";", "}", "return", "$", "this", ";", "}", "return", "$", "this", "->", "buildUrl", "(", ")", ";", "}"], "docstring": "Construit les parametres de la requete.\n\n@return $this", "docstring_tokens": ["Construit", "les", "parametres", "de", "la", "requete", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/HttpClient/Provider/StreamContext.php#L152-L178", "partition": "test"}
{"repo": "ClanCats/Container", "path": "src/Container.php", "func_name": "Container.setMetaData", "original_string": "public function setMetaData(string $serviceName, string $key, array $values)\n    {\n        // make sure the service exists\n        if (!$this->has($serviceName)) { \n            throw new UnknownServiceException('There is no service named \"' . $serviceName . '\" specified.'); \n        }\n\n        // make sure all elements are arrays\n        foreach($values as $value) \n        {\n            if (!is_array($value)) {\n                throw new ContainerException('Every meta data value must be an array. \"' . gettype($value) . '\" given.');\n            }\n        }\n\n        // make sure the metadata key is allocated\n        if (!isset($this->metadata[$key])) {\n            $this->metadata[$key] = [];\n        }\n\n        // write\n        $this->metadata[$key][$serviceName] = $values;\n        $this->linkMetaService($serviceName, $key);\n    }", "language": "php", "code": "public function setMetaData(string $serviceName, string $key, array $values)\n    {\n        // make sure the service exists\n        if (!$this->has($serviceName)) { \n            throw new UnknownServiceException('There is no service named \"' . $serviceName . '\" specified.'); \n        }\n\n        // make sure all elements are arrays\n        foreach($values as $value) \n        {\n            if (!is_array($value)) {\n                throw new ContainerException('Every meta data value must be an array. \"' . gettype($value) . '\" given.');\n            }\n        }\n\n        // make sure the metadata key is allocated\n        if (!isset($this->metadata[$key])) {\n            $this->metadata[$key] = [];\n        }\n\n        // write\n        $this->metadata[$key][$serviceName] = $values;\n        $this->linkMetaService($serviceName, $key);\n    }", "code_tokens": ["public", "function", "setMetaData", "(", "string", "$", "serviceName", ",", "string", "$", "key", ",", "array", "$", "values", ")", "{", "// make sure the service exists", "if", "(", "!", "$", "this", "->", "has", "(", "$", "serviceName", ")", ")", "{", "throw", "new", "UnknownServiceException", "(", "'There is no service named \"'", ".", "$", "serviceName", ".", "'\" specified.'", ")", ";", "}", "// make sure all elements are arrays", "foreach", "(", "$", "values", "as", "$", "value", ")", "{", "if", "(", "!", "is_array", "(", "$", "value", ")", ")", "{", "throw", "new", "ContainerException", "(", "'Every meta data value must be an array. \"'", ".", "gettype", "(", "$", "value", ")", ".", "'\" given.'", ")", ";", "}", "}", "// make sure the metadata key is allocated", "if", "(", "!", "isset", "(", "$", "this", "->", "metadata", "[", "$", "key", "]", ")", ")", "{", "$", "this", "->", "metadata", "[", "$", "key", "]", "=", "[", "]", ";", "}", "// write", "$", "this", "->", "metadata", "[", "$", "key", "]", "[", "$", "serviceName", "]", "=", "$", "values", ";", "$", "this", "->", "linkMetaService", "(", "$", "serviceName", ",", "$", "key", ")", ";", "}"], "docstring": "Set metadata for a specific service\nThis will override all meta data matching service and key.\n\n@param string            $serviceName\n@param string            $key\n@param array             $values multidimensional array\n\n@return void", "docstring_tokens": ["Set", "metadata", "for", "a", "specific", "service", "This", "will", "override", "all", "meta", "data", "matching", "service", "and", "key", "."], "sha": "95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12", "url": "https://github.com/ClanCats/Container/blob/95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12/src/Container.php#L195-L218", "partition": "test"}
{"repo": "Qeti/Karika", "path": "src/Karika/CoreBundle/Controller/Api/ApiController.php", "func_name": "ApiController.postAction", "original_string": "public function postAction(Request $request)\n    {\n        /**\n         * @var $em ApiEntityManager\n         */\n        $em = $this->getDoctrine()->getManager();\n\n        $data = json_decode($request->getContent(), true);\n        $entity = $em->createEntity($this->entityClassName());\n\n        $form = $this->createForm($this->formClassName(), $entity, [\n            \"method\" => $request->getMethod(),\n        ]);\n\n        $form->submit($data);\n\n        if ($form->isValid()) {\n            $em = $this->getDoctrine()->getManager();\n            $em->persist($entity);\n            $em->flush();\n\n            return $entity;\n        }\n\n        return FOSView::create([\n            'errors' => $form->getErrors()\n        ], Response::HTTP_INTERNAL_SERVER_ERROR);\n    }", "language": "php", "code": "public function postAction(Request $request)\n    {\n        /**\n         * @var $em ApiEntityManager\n         */\n        $em = $this->getDoctrine()->getManager();\n\n        $data = json_decode($request->getContent(), true);\n        $entity = $em->createEntity($this->entityClassName());\n\n        $form = $this->createForm($this->formClassName(), $entity, [\n            \"method\" => $request->getMethod(),\n        ]);\n\n        $form->submit($data);\n\n        if ($form->isValid()) {\n            $em = $this->getDoctrine()->getManager();\n            $em->persist($entity);\n            $em->flush();\n\n            return $entity;\n        }\n\n        return FOSView::create([\n            'errors' => $form->getErrors()\n        ], Response::HTTP_INTERNAL_SERVER_ERROR);\n    }", "code_tokens": ["public", "function", "postAction", "(", "Request", "$", "request", ")", "{", "/**\n         * @var $em ApiEntityManager\n         */", "$", "em", "=", "$", "this", "->", "getDoctrine", "(", ")", "->", "getManager", "(", ")", ";", "$", "data", "=", "json_decode", "(", "$", "request", "->", "getContent", "(", ")", ",", "true", ")", ";", "$", "entity", "=", "$", "em", "->", "createEntity", "(", "$", "this", "->", "entityClassName", "(", ")", ")", ";", "$", "form", "=", "$", "this", "->", "createForm", "(", "$", "this", "->", "formClassName", "(", ")", ",", "$", "entity", ",", "[", "\"method\"", "=>", "$", "request", "->", "getMethod", "(", ")", ",", "]", ")", ";", "$", "form", "->", "submit", "(", "$", "data", ")", ";", "if", "(", "$", "form", "->", "isValid", "(", ")", ")", "{", "$", "em", "=", "$", "this", "->", "getDoctrine", "(", ")", "->", "getManager", "(", ")", ";", "$", "em", "->", "persist", "(", "$", "entity", ")", ";", "$", "em", "->", "flush", "(", ")", ";", "return", "$", "entity", ";", "}", "return", "FOSView", "::", "create", "(", "[", "'errors'", "=>", "$", "form", "->", "getErrors", "(", ")", "]", ",", "Response", "::", "HTTP_INTERNAL_SERVER_ERROR", ")", ";", "}"], "docstring": "Create a Product entity.\n\n@ApiDoc\n\n@View(statusCode=201, serializerEnableMaxDepthChecks=true)\n\n@param Request $request\n\n@return object", "docstring_tokens": ["Create", "a", "Product", "entity", "."], "sha": "74f47fd68fb91759c74c5c50cb9ab5ec3704a43e", "url": "https://github.com/Qeti/Karika/blob/74f47fd68fb91759c74c5c50cb9ab5ec3704a43e/src/Karika/CoreBundle/Controller/Api/ApiController.php#L135-L162", "partition": "test"}
{"repo": "FACT-Finder/FACT-Finder-PHP-Library", "path": "src/log4php/Logger.php", "func_name": "Logger.warn", "original_string": "public function warn($message, $throwable = null) {\r\n\t\t$this->log(LoggerLevel::getLevelWarn(), $message, $throwable);\r\n\t}", "language": "php", "code": "public function warn($message, $throwable = null) {\r\n\t\t$this->log(LoggerLevel::getLevelWarn(), $message, $throwable);\r\n\t}", "code_tokens": ["public", "function", "warn", "(", "$", "message", ",", "$", "throwable", "=", "null", ")", "{", "$", "this", "->", "log", "(", "LoggerLevel", "::", "getLevelWarn", "(", ")", ",", "$", "message", ",", "$", "throwable", ")", ";", "}"], "docstring": "Log a message with the WARN level.\n\n@param mixed $message message\n@param Exception $throwable Optional throwable information to include\nin the logging event.", "docstring_tokens": ["Log", "a", "message", "with", "the", "WARN", "level", "."], "sha": "5c795b94117fa7ac40f5e80d4edc93999a76fc90", "url": "https://github.com/FACT-Finder/FACT-Finder-PHP-Library/blob/5c795b94117fa7ac40f5e80d4edc93999a76fc90/src/log4php/Logger.php#L137-L139", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/PEAR/PackageFile/v2.php", "func_name": "PEAR_PackageFile_v2.getConfigureOptions", "original_string": "function getConfigureOptions()\n    {\n        if ($this->getPackageType() != 'extsrc' && $this->getPackageType() != 'zendextsrc') {\n            return false;\n        }\n\n        $releases = $this->getReleases();\n        if (isset($releases[0])) {\n            $releases = $releases[0];\n        }\n\n        if (isset($releases['configureoption'])) {\n            if (!isset($releases['configureoption'][0])) {\n                $releases['configureoption'] = array($releases['configureoption']);\n            }\n\n            for ($i = 0; $i < count($releases['configureoption']); $i++) {\n                $releases['configureoption'][$i] = $releases['configureoption'][$i]['attribs'];\n            }\n\n            return $releases['configureoption'];\n        }\n\n        return false;\n    }", "language": "php", "code": "function getConfigureOptions()\n    {\n        if ($this->getPackageType() != 'extsrc' && $this->getPackageType() != 'zendextsrc') {\n            return false;\n        }\n\n        $releases = $this->getReleases();\n        if (isset($releases[0])) {\n            $releases = $releases[0];\n        }\n\n        if (isset($releases['configureoption'])) {\n            if (!isset($releases['configureoption'][0])) {\n                $releases['configureoption'] = array($releases['configureoption']);\n            }\n\n            for ($i = 0; $i < count($releases['configureoption']); $i++) {\n                $releases['configureoption'][$i] = $releases['configureoption'][$i]['attribs'];\n            }\n\n            return $releases['configureoption'];\n        }\n\n        return false;\n    }", "code_tokens": ["function", "getConfigureOptions", "(", ")", "{", "if", "(", "$", "this", "->", "getPackageType", "(", ")", "!=", "'extsrc'", "&&", "$", "this", "->", "getPackageType", "(", ")", "!=", "'zendextsrc'", ")", "{", "return", "false", ";", "}", "$", "releases", "=", "$", "this", "->", "getReleases", "(", ")", ";", "if", "(", "isset", "(", "$", "releases", "[", "0", "]", ")", ")", "{", "$", "releases", "=", "$", "releases", "[", "0", "]", ";", "}", "if", "(", "isset", "(", "$", "releases", "[", "'configureoption'", "]", ")", ")", "{", "if", "(", "!", "isset", "(", "$", "releases", "[", "'configureoption'", "]", "[", "0", "]", ")", ")", "{", "$", "releases", "[", "'configureoption'", "]", "=", "array", "(", "$", "releases", "[", "'configureoption'", "]", ")", ";", "}", "for", "(", "$", "i", "=", "0", ";", "$", "i", "<", "count", "(", "$", "releases", "[", "'configureoption'", "]", ")", ";", "$", "i", "++", ")", "{", "$", "releases", "[", "'configureoption'", "]", "[", "$", "i", "]", "=", "$", "releases", "[", "'configureoption'", "]", "[", "$", "i", "]", "[", "'attribs'", "]", ";", "}", "return", "$", "releases", "[", "'configureoption'", "]", ";", "}", "return", "false", ";", "}"], "docstring": "Return configure options array, if any\n\n@return array|false", "docstring_tokens": ["Return", "configure", "options", "array", "if", "any"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/PEAR/PackageFile/v2.php#L1199-L1223", "partition": "test"}
{"repo": "imkrimerman/primitive", "path": "src/Primitive/Container/Container.php", "func_name": "Container.fromString", "original_string": "protected function fromString($string)\n    {\n        if ($this->isFile($string))\n        {\n            return $this->fromFile($string);\n        }\n        elseif ($this->isJson($string))\n        {\n            return $this->initialize(json_decode($string, true));\n        }\n        elseif ($this->isSerialized($string))\n        {\n            return $this->initialize(unserialize($string));\n        }\n\n        throw new BadMethodCallException('Argument 1 should be valid json, serialized or file with json or serialized data');\n    }", "language": "php", "code": "protected function fromString($string)\n    {\n        if ($this->isFile($string))\n        {\n            return $this->fromFile($string);\n        }\n        elseif ($this->isJson($string))\n        {\n            return $this->initialize(json_decode($string, true));\n        }\n        elseif ($this->isSerialized($string))\n        {\n            return $this->initialize(unserialize($string));\n        }\n\n        throw new BadMethodCallException('Argument 1 should be valid json, serialized or file with json or serialized data');\n    }", "code_tokens": ["protected", "function", "fromString", "(", "$", "string", ")", "{", "if", "(", "$", "this", "->", "isFile", "(", "$", "string", ")", ")", "{", "return", "$", "this", "->", "fromFile", "(", "$", "string", ")", ";", "}", "elseif", "(", "$", "this", "->", "isJson", "(", "$", "string", ")", ")", "{", "return", "$", "this", "->", "initialize", "(", "json_decode", "(", "$", "string", ",", "true", ")", ")", ";", "}", "elseif", "(", "$", "this", "->", "isSerialized", "(", "$", "string", ")", ")", "{", "return", "$", "this", "->", "initialize", "(", "unserialize", "(", "$", "string", ")", ")", ";", "}", "throw", "new", "BadMethodCallException", "(", "'Argument 1 should be valid json, serialized or file with json or serialized data'", ")", ";", "}"], "docstring": "Construct from string.\n\n@param string|StringContract $string\n@return $this\n@throws \\im\\Primitive\\Container\\Exceptions\\ContainerException\n@throws \\im\\Primitive\\Support\\Exceptions\\NotIsFileException", "docstring_tokens": ["Construct", "from", "string", "."], "sha": "bdb45bb5109ca07f116cce571b76804e47ac5d56", "url": "https://github.com/imkrimerman/primitive/blob/bdb45bb5109ca07f116cce571b76804e47ac5d56/src/Primitive/Container/Container.php#L1410-L1426", "partition": "test"}
{"repo": "alct/noapi", "path": "src/NoAPI.php", "func_name": "NoAPI.curl", "original_string": "public static function curl($url)\n    {\n        $req = curl_init();\n\n        $opt = [\n            CURLOPT_AUTOREFERER    => true,\n            CURLOPT_COOKIEJAR      => tempnam(sys_get_temp_dir(), 'curl'),\n            CURLOPT_FAILONERROR    => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HEADER         => true,\n            CURLOPT_HTTPHEADER     => ['DNT: 1', 'Accept-Language: en-us,en;q=0.5'],\n            CURLOPT_MAXREDIRS      => 5,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_URL            => $url,\n            CURLOPT_USERAGENT      => 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0',\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_TIMEOUT        => 10,\n        ];\n\n        curl_setopt_array($req, $opt);\n\n        if (! $res = curl_exec($req)) return false;\n\n        curl_close($req);\n\n        // mb_convert_encoding is used to avoid encoding issues related to DOMDocument::loadHTML\n        // see https://secure.php.net/manual/en/domdocument.loadhtml.php#52251\n        return mb_convert_encoding($res, 'HTML-ENTITIES', 'UTF-8');\n    }", "language": "php", "code": "public static function curl($url)\n    {\n        $req = curl_init();\n\n        $opt = [\n            CURLOPT_AUTOREFERER    => true,\n            CURLOPT_COOKIEJAR      => tempnam(sys_get_temp_dir(), 'curl'),\n            CURLOPT_FAILONERROR    => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HEADER         => true,\n            CURLOPT_HTTPHEADER     => ['DNT: 1', 'Accept-Language: en-us,en;q=0.5'],\n            CURLOPT_MAXREDIRS      => 5,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_URL            => $url,\n            CURLOPT_USERAGENT      => 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0',\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_TIMEOUT        => 10,\n        ];\n\n        curl_setopt_array($req, $opt);\n\n        if (! $res = curl_exec($req)) return false;\n\n        curl_close($req);\n\n        // mb_convert_encoding is used to avoid encoding issues related to DOMDocument::loadHTML\n        // see https://secure.php.net/manual/en/domdocument.loadhtml.php#52251\n        return mb_convert_encoding($res, 'HTML-ENTITIES', 'UTF-8');\n    }", "code_tokens": ["public", "static", "function", "curl", "(", "$", "url", ")", "{", "$", "req", "=", "curl_init", "(", ")", ";", "$", "opt", "=", "[", "CURLOPT_AUTOREFERER", "=>", "true", ",", "CURLOPT_COOKIEJAR", "=>", "tempnam", "(", "sys_get_temp_dir", "(", ")", ",", "'curl'", ")", ",", "CURLOPT_FAILONERROR", "=>", "true", ",", "CURLOPT_FOLLOWLOCATION", "=>", "true", ",", "CURLOPT_HEADER", "=>", "true", ",", "CURLOPT_HTTPHEADER", "=>", "[", "'DNT: 1'", ",", "'Accept-Language: en-us,en;q=0.5'", "]", ",", "CURLOPT_MAXREDIRS", "=>", "5", ",", "CURLOPT_RETURNTRANSFER", "=>", "true", ",", "CURLOPT_URL", "=>", "$", "url", ",", "CURLOPT_USERAGENT", "=>", "'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0'", ",", "CURLOPT_SSL_VERIFYPEER", "=>", "false", ",", "CURLOPT_TIMEOUT", "=>", "10", ",", "]", ";", "curl_setopt_array", "(", "$", "req", ",", "$", "opt", ")", ";", "if", "(", "!", "$", "res", "=", "curl_exec", "(", "$", "req", ")", ")", "return", "false", ";", "curl_close", "(", "$", "req", ")", ";", "// mb_convert_encoding is used to avoid encoding issues related to DOMDocument::loadHTML", "// see https://secure.php.net/manual/en/domdocument.loadhtml.php#52251", "return", "mb_convert_encoding", "(", "$", "res", ",", "'HTML-ENTITIES'", ",", "'UTF-8'", ")", ";", "}"], "docstring": "Download and return a resource.\n\n@param string $url URL of the target page\n\n@return string|bool false on error", "docstring_tokens": ["Download", "and", "return", "a", "resource", "."], "sha": "de0b21a1a55988ce4b62e4e954c444111bc0e8ce", "url": "https://github.com/alct/noapi/blob/de0b21a1a55988ce4b62e4e954c444111bc0e8ce/src/NoAPI.php#L17-L45", "partition": "test"}
{"repo": "ARCANEDEV/LaravelHtml", "path": "src/HtmlBuilder.php", "func_name": "HtmlBuilder.favicon", "original_string": "public function favicon($url, array $attributes = [], $secure = null)\n    {\n        $attributes = array_merge([\n            'rel'  => 'shortcut icon',\n            'type' => 'image/x-icon',\n        ], $attributes);\n\n        return Elements\\Element::withTag('link')\n            ->attribute('href', $this->url->asset($url, $secure))\n            ->attributes($attributes)\n            ->render();\n    }", "language": "php", "code": "public function favicon($url, array $attributes = [], $secure = null)\n    {\n        $attributes = array_merge([\n            'rel'  => 'shortcut icon',\n            'type' => 'image/x-icon',\n        ], $attributes);\n\n        return Elements\\Element::withTag('link')\n            ->attribute('href', $this->url->asset($url, $secure))\n            ->attributes($attributes)\n            ->render();\n    }", "code_tokens": ["public", "function", "favicon", "(", "$", "url", ",", "array", "$", "attributes", "=", "[", "]", ",", "$", "secure", "=", "null", ")", "{", "$", "attributes", "=", "array_merge", "(", "[", "'rel'", "=>", "'shortcut icon'", ",", "'type'", "=>", "'image/x-icon'", ",", "]", ",", "$", "attributes", ")", ";", "return", "Elements", "\\", "Element", "::", "withTag", "(", "'link'", ")", "->", "attribute", "(", "'href'", ",", "$", "this", "->", "url", "->", "asset", "(", "$", "url", ",", "$", "secure", ")", ")", "->", "attributes", "(", "$", "attributes", ")", "->", "render", "(", ")", ";", "}"], "docstring": "Generate a link to a Favicon file.\n\n@param  string  $url\n@param  array   $attributes\n@param  bool    $secure\n\n@return \\Illuminate\\Support\\HtmlString", "docstring_tokens": ["Generate", "a", "link", "to", "a", "Favicon", "file", "."], "sha": "539ed117df0b21d2a267aac074446c6dadf50828", "url": "https://github.com/ARCANEDEV/LaravelHtml/blob/539ed117df0b21d2a267aac074446c6dadf50828/src/HtmlBuilder.php#L152-L163", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Micro/Router.php", "func_name": "Router.addPost", "original_string": "public function addPost($pattern, $paths = null)\n    {\n        return $this->application->post($pattern, $this->pathToHandler($paths));\n    }", "language": "php", "code": "public function addPost($pattern, $paths = null)\n    {\n        return $this->application->post($pattern, $this->pathToHandler($paths));\n    }", "code_tokens": ["public", "function", "addPost", "(", "$", "pattern", ",", "$", "paths", "=", "null", ")", "{", "return", "$", "this", "->", "application", "->", "post", "(", "$", "pattern", ",", "$", "this", "->", "pathToHandler", "(", "$", "paths", ")", ")", ";", "}"], "docstring": "Adds a route to the router that only match if the HTTP method is POST\n\n@param string $pattern\n@param mixed  $paths\n\n@return \\Phalcon\\Mvc\\Router\\RouteInterface", "docstring_tokens": ["Adds", "a", "route", "to", "the", "router", "that", "only", "match", "if", "the", "HTTP", "method", "is", "POST"], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Micro/Router.php#L120-L123", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Debug/ExceptionHandler.php", "func_name": "ExceptionHandler.sendExceptionResponse", "original_string": "public function sendExceptionResponse($exception): void\n    {\n        if (! headers_sent()) {\n            if ($exception instanceof HttpException) {\n                header(sprintf('HTTP/1.0 %s', $exception->getStatusCode()));\n\n                foreach ($exception->getHeaders() as $name => $value) {\n                    header($name . ': ' . $value, false);\n                }\n            }\n\n            header('Content-Type: text/html; charset=' . $this->charset);\n        }\n\n        echo $this->html($this->getContent($exception), $this->getStylesheet());\n    }", "language": "php", "code": "public function sendExceptionResponse($exception): void\n    {\n        if (! headers_sent()) {\n            if ($exception instanceof HttpException) {\n                header(sprintf('HTTP/1.0 %s', $exception->getStatusCode()));\n\n                foreach ($exception->getHeaders() as $name => $value) {\n                    header($name . ': ' . $value, false);\n                }\n            }\n\n            header('Content-Type: text/html; charset=' . $this->charset);\n        }\n\n        echo $this->html($this->getContent($exception), $this->getStylesheet());\n    }", "code_tokens": ["public", "function", "sendExceptionResponse", "(", "$", "exception", ")", ":", "void", "{", "if", "(", "!", "headers_sent", "(", ")", ")", "{", "if", "(", "$", "exception", "instanceof", "HttpException", ")", "{", "header", "(", "sprintf", "(", "'HTTP/1.0 %s'", ",", "$", "exception", "->", "getStatusCode", "(", ")", ")", ")", ";", "foreach", "(", "$", "exception", "->", "getHeaders", "(", ")", "as", "$", "name", "=>", "$", "value", ")", "{", "header", "(", "$", "name", ".", "': '", ".", "$", "value", ",", "false", ")", ";", "}", "}", "header", "(", "'Content-Type: text/html; charset='", ".", "$", "this", "->", "charset", ")", ";", "}", "echo", "$", "this", "->", "html", "(", "$", "this", "->", "getContent", "(", "$", "exception", ")", ",", "$", "this", "->", "getStylesheet", "(", ")", ")", ";", "}"], "docstring": "Send response.\n\n@param \\Throwable $exception\n\n@return void", "docstring_tokens": ["Send", "response", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Debug/ExceptionHandler.php#L185-L200", "partition": "test"}
{"repo": "traderinteractive/mongo-queue-php", "path": "src/AbstractQueue.php", "func_name": "AbstractQueue.count", "original_string": "final public function count(array $query, bool $running = null) : int\n    {\n        $totalQuery = [];\n\n        if ($running === true || $running === false) {\n            $key = $running ? '$gt' : '$lte';\n            $totalQuery['earliestGet'] = [$key => new UTCDateTime((int)(microtime(true) * 1000))];\n        }\n\n        return $this->collection->count($this->buildPayloadQuery($totalQuery, $query));\n    }", "language": "php", "code": "final public function count(array $query, bool $running = null) : int\n    {\n        $totalQuery = [];\n\n        if ($running === true || $running === false) {\n            $key = $running ? '$gt' : '$lte';\n            $totalQuery['earliestGet'] = [$key => new UTCDateTime((int)(microtime(true) * 1000))];\n        }\n\n        return $this->collection->count($this->buildPayloadQuery($totalQuery, $query));\n    }", "code_tokens": ["final", "public", "function", "count", "(", "array", "$", "query", ",", "bool", "$", "running", "=", "null", ")", ":", "int", "{", "$", "totalQuery", "=", "[", "]", ";", "if", "(", "$", "running", "===", "true", "||", "$", "running", "===", "false", ")", "{", "$", "key", "=", "$", "running", "?", "'$gt'", ":", "'$lte'", ";", "$", "totalQuery", "[", "'earliestGet'", "]", "=", "[", "$", "key", "=>", "new", "UTCDateTime", "(", "(", "int", ")", "(", "microtime", "(", "true", ")", "*", "1000", ")", ")", "]", ";", "}", "return", "$", "this", "->", "collection", "->", "count", "(", "$", "this", "->", "buildPayloadQuery", "(", "$", "totalQuery", ",", "$", "query", ")", ")", ";", "}"], "docstring": "Count queue messages.\n\n@param array $query in same format as \\MongoDB\\Collection::find() where top level fields do not contain\noperators. Lower level fields can however. eg: valid {a: {$gt: 1}, \"b.c\": 3},\ninvalid {$and: [{...}, {...}]}\n@param bool|null $running query a running message or not or all\n\n@return int the count\n\n@throws \\InvalidArgumentException key in $query was not a string", "docstring_tokens": ["Count", "queue", "messages", "."], "sha": "08e6d6ae6e4097e911a8df6a3b03b9c338cfa37d", "url": "https://github.com/traderinteractive/mongo-queue-php/blob/08e6d6ae6e4097e911a8df6a3b03b9c338cfa37d/src/AbstractQueue.php#L192-L202", "partition": "test"}
{"repo": "WordPress-Coding-Standards/WordPress-Coding-Standards", "path": "WordPress/Sniffs/WP/DiscouragedConstantsSniff.php", "func_name": "DiscouragedConstantsSniff.process_arbitrary_tstring", "original_string": "public function process_arbitrary_tstring( $stackPtr ) {\n\t\t$content = $this->tokens[ $stackPtr ]['content'];\n\n\t\tif ( ! isset( $this->discouraged_constants[ $content ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$next = $this->phpcsFile->findNext( Tokens::$emptyTokens, ( $stackPtr + 1 ), null, true );\n\t\tif ( false !== $next && \\T_OPEN_PARENTHESIS === $this->tokens[ $next ]['code'] ) {\n\t\t\t// Function call or declaration.\n\t\t\treturn;\n\t\t}\n\n\t\t$prev = $this->phpcsFile->findPrevious( Tokens::$emptyTokens, ( $stackPtr - 1 ), null, true );\n\t\tif ( false !== $prev && isset( $this->preceding_tokens_to_ignore[ $this->tokens[ $prev ]['code'] ] ) ) {\n\t\t\t// Not the use of a constant.\n\t\t\treturn;\n\t\t}\n\n\t\tif ( $this->is_token_namespaced( $stackPtr ) === true ) {\n\t\t\t// Namespaced constant of the same name.\n\t\t\treturn;\n\t\t}\n\n\t\tif ( false !== $prev\n\t\t\t&& \\T_CONST === $this->tokens[ $prev ]['code']\n\t\t\t&& true === $this->is_class_constant( $prev )\n\t\t) {\n\t\t\t// Class constant of the same name.\n\t\t\treturn;\n\t\t}\n\n\t\t/*\n\t\t * Deal with a number of variations of use statements.\n\t\t */\n\t\tfor ( $i = $stackPtr; $i > 0; $i-- ) {\n\t\t\tif ( $this->tokens[ $i ]['line'] !== $this->tokens[ $stackPtr ]['line'] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$first_on_line = $this->phpcsFile->findNext( Tokens::$emptyTokens, ( $i + 1 ), null, true );\n\t\tif ( false !== $first_on_line && \\T_USE === $this->tokens[ $first_on_line ]['code'] ) {\n\t\t\t$next_on_line = $this->phpcsFile->findNext( Tokens::$emptyTokens, ( $first_on_line + 1 ), null, true );\n\t\t\tif ( false !== $next_on_line ) {\n\t\t\t\tif ( ( \\T_STRING === $this->tokens[ $next_on_line ]['code']\n\t\t\t\t\t\t&& 'const' === $this->tokens[ $next_on_line ]['content'] )\n\t\t\t\t\t|| \\T_CONST === $this->tokens[ $next_on_line ]['code'] // Happens in some PHPCS versions.\n\t\t\t\t) {\n\t\t\t\t\t$has_ns_sep = $this->phpcsFile->findNext( \\T_NS_SEPARATOR, ( $next_on_line + 1 ), $stackPtr );\n\t\t\t\t\tif ( false !== $has_ns_sep ) {\n\t\t\t\t\t\t// Namespaced const (group) use statement.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Not a const use statement.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ok, this is really one of the discouraged constants.\n\t\t$this->phpcsFile->addWarning(\n\t\t\t'Found usage of constant \"%s\". Use %s instead.',\n\t\t\t$stackPtr,\n\t\t\t$this->string_to_errorcode( $content . 'UsageFound' ),\n\t\t\tarray(\n\t\t\t\t$content,\n\t\t\t\t$this->discouraged_constants[ $content ],\n\t\t\t)\n\t\t);\n\t}", "language": "php", "code": "public function process_arbitrary_tstring( $stackPtr ) {\n\t\t$content = $this->tokens[ $stackPtr ]['content'];\n\n\t\tif ( ! isset( $this->discouraged_constants[ $content ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$next = $this->phpcsFile->findNext( Tokens::$emptyTokens, ( $stackPtr + 1 ), null, true );\n\t\tif ( false !== $next && \\T_OPEN_PARENTHESIS === $this->tokens[ $next ]['code'] ) {\n\t\t\t// Function call or declaration.\n\t\t\treturn;\n\t\t}\n\n\t\t$prev = $this->phpcsFile->findPrevious( Tokens::$emptyTokens, ( $stackPtr - 1 ), null, true );\n\t\tif ( false !== $prev && isset( $this->preceding_tokens_to_ignore[ $this->tokens[ $prev ]['code'] ] ) ) {\n\t\t\t// Not the use of a constant.\n\t\t\treturn;\n\t\t}\n\n\t\tif ( $this->is_token_namespaced( $stackPtr ) === true ) {\n\t\t\t// Namespaced constant of the same name.\n\t\t\treturn;\n\t\t}\n\n\t\tif ( false !== $prev\n\t\t\t&& \\T_CONST === $this->tokens[ $prev ]['code']\n\t\t\t&& true === $this->is_class_constant( $prev )\n\t\t) {\n\t\t\t// Class constant of the same name.\n\t\t\treturn;\n\t\t}\n\n\t\t/*\n\t\t * Deal with a number of variations of use statements.\n\t\t */\n\t\tfor ( $i = $stackPtr; $i > 0; $i-- ) {\n\t\t\tif ( $this->tokens[ $i ]['line'] !== $this->tokens[ $stackPtr ]['line'] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$first_on_line = $this->phpcsFile->findNext( Tokens::$emptyTokens, ( $i + 1 ), null, true );\n\t\tif ( false !== $first_on_line && \\T_USE === $this->tokens[ $first_on_line ]['code'] ) {\n\t\t\t$next_on_line = $this->phpcsFile->findNext( Tokens::$emptyTokens, ( $first_on_line + 1 ), null, true );\n\t\t\tif ( false !== $next_on_line ) {\n\t\t\t\tif ( ( \\T_STRING === $this->tokens[ $next_on_line ]['code']\n\t\t\t\t\t\t&& 'const' === $this->tokens[ $next_on_line ]['content'] )\n\t\t\t\t\t|| \\T_CONST === $this->tokens[ $next_on_line ]['code'] // Happens in some PHPCS versions.\n\t\t\t\t) {\n\t\t\t\t\t$has_ns_sep = $this->phpcsFile->findNext( \\T_NS_SEPARATOR, ( $next_on_line + 1 ), $stackPtr );\n\t\t\t\t\tif ( false !== $has_ns_sep ) {\n\t\t\t\t\t\t// Namespaced const (group) use statement.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Not a const use statement.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ok, this is really one of the discouraged constants.\n\t\t$this->phpcsFile->addWarning(\n\t\t\t'Found usage of constant \"%s\". Use %s instead.',\n\t\t\t$stackPtr,\n\t\t\t$this->string_to_errorcode( $content . 'UsageFound' ),\n\t\t\tarray(\n\t\t\t\t$content,\n\t\t\t\t$this->discouraged_constants[ $content ],\n\t\t\t)\n\t\t);\n\t}", "code_tokens": ["public", "function", "process_arbitrary_tstring", "(", "$", "stackPtr", ")", "{", "$", "content", "=", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'content'", "]", ";", "if", "(", "!", "isset", "(", "$", "this", "->", "discouraged_constants", "[", "$", "content", "]", ")", ")", "{", "return", ";", "}", "$", "next", "=", "$", "this", "->", "phpcsFile", "->", "findNext", "(", "Tokens", "::", "$", "emptyTokens", ",", "(", "$", "stackPtr", "+", "1", ")", ",", "null", ",", "true", ")", ";", "if", "(", "false", "!==", "$", "next", "&&", "\\", "T_OPEN_PARENTHESIS", "===", "$", "this", "->", "tokens", "[", "$", "next", "]", "[", "'code'", "]", ")", "{", "// Function call or declaration.", "return", ";", "}", "$", "prev", "=", "$", "this", "->", "phpcsFile", "->", "findPrevious", "(", "Tokens", "::", "$", "emptyTokens", ",", "(", "$", "stackPtr", "-", "1", ")", ",", "null", ",", "true", ")", ";", "if", "(", "false", "!==", "$", "prev", "&&", "isset", "(", "$", "this", "->", "preceding_tokens_to_ignore", "[", "$", "this", "->", "tokens", "[", "$", "prev", "]", "[", "'code'", "]", "]", ")", ")", "{", "// Not the use of a constant.", "return", ";", "}", "if", "(", "$", "this", "->", "is_token_namespaced", "(", "$", "stackPtr", ")", "===", "true", ")", "{", "// Namespaced constant of the same name.", "return", ";", "}", "if", "(", "false", "!==", "$", "prev", "&&", "\\", "T_CONST", "===", "$", "this", "->", "tokens", "[", "$", "prev", "]", "[", "'code'", "]", "&&", "true", "===", "$", "this", "->", "is_class_constant", "(", "$", "prev", ")", ")", "{", "// Class constant of the same name.", "return", ";", "}", "/*\n\t\t * Deal with a number of variations of use statements.\n\t\t */", "for", "(", "$", "i", "=", "$", "stackPtr", ";", "$", "i", ">", "0", ";", "$", "i", "--", ")", "{", "if", "(", "$", "this", "->", "tokens", "[", "$", "i", "]", "[", "'line'", "]", "!==", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'line'", "]", ")", "{", "break", ";", "}", "}", "$", "first_on_line", "=", "$", "this", "->", "phpcsFile", "->", "findNext", "(", "Tokens", "::", "$", "emptyTokens", ",", "(", "$", "i", "+", "1", ")", ",", "null", ",", "true", ")", ";", "if", "(", "false", "!==", "$", "first_on_line", "&&", "\\", "T_USE", "===", "$", "this", "->", "tokens", "[", "$", "first_on_line", "]", "[", "'code'", "]", ")", "{", "$", "next_on_line", "=", "$", "this", "->", "phpcsFile", "->", "findNext", "(", "Tokens", "::", "$", "emptyTokens", ",", "(", "$", "first_on_line", "+", "1", ")", ",", "null", ",", "true", ")", ";", "if", "(", "false", "!==", "$", "next_on_line", ")", "{", "if", "(", "(", "\\", "T_STRING", "===", "$", "this", "->", "tokens", "[", "$", "next_on_line", "]", "[", "'code'", "]", "&&", "'const'", "===", "$", "this", "->", "tokens", "[", "$", "next_on_line", "]", "[", "'content'", "]", ")", "||", "\\", "T_CONST", "===", "$", "this", "->", "tokens", "[", "$", "next_on_line", "]", "[", "'code'", "]", "// Happens in some PHPCS versions.", ")", "{", "$", "has_ns_sep", "=", "$", "this", "->", "phpcsFile", "->", "findNext", "(", "\\", "T_NS_SEPARATOR", ",", "(", "$", "next_on_line", "+", "1", ")", ",", "$", "stackPtr", ")", ";", "if", "(", "false", "!==", "$", "has_ns_sep", ")", "{", "// Namespaced const (group) use statement.", "return", ";", "}", "}", "else", "{", "// Not a const use statement.", "return", ";", "}", "}", "}", "// Ok, this is really one of the discouraged constants.", "$", "this", "->", "phpcsFile", "->", "addWarning", "(", "'Found usage of constant \"%s\". Use %s instead.'", ",", "$", "stackPtr", ",", "$", "this", "->", "string_to_errorcode", "(", "$", "content", ".", "'UsageFound'", ")", ",", "array", "(", "$", "content", ",", "$", "this", "->", "discouraged_constants", "[", "$", "content", "]", ",", ")", ")", ";", "}"], "docstring": "Process an arbitrary T_STRING token to determine whether it is one of the target constants.\n\n@since 0.14.0\n\n@param int $stackPtr The position of the current token in the stack.\n\n@return void", "docstring_tokens": ["Process", "an", "arbitrary", "T_STRING", "token", "to", "determine", "whether", "it", "is", "one", "of", "the", "target", "constants", "."], "sha": "04bfa1284ca652e8e9befe82134f440cc31f655d", "url": "https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/blob/04bfa1284ca652e8e9befe82134f440cc31f655d/WordPress/Sniffs/WP/DiscouragedConstantsSniff.php#L108-L179", "partition": "test"}
{"repo": "tastyigniter/flame", "path": "src/Database/Builder.php", "func_name": "Builder.findOrNew", "original_string": "public function findOrNew($id, $columns = ['*'])\n    {\n        if (!is_null($model = $this->find($id, $columns))) {\n            return $model;\n        }\n\n        $attributes = $this->toBase()->getConnection()->getSchemaBuilder()->getColumnListing($this->model->getTable());\n\n        return $this->model->newInstance(array_fill_keys(array_values($attributes), null))->setConnection(\n            $this->toBase()->getConnection()->getName()\n        );\n    }", "language": "php", "code": "public function findOrNew($id, $columns = ['*'])\n    {\n        if (!is_null($model = $this->find($id, $columns))) {\n            return $model;\n        }\n\n        $attributes = $this->toBase()->getConnection()->getSchemaBuilder()->getColumnListing($this->model->getTable());\n\n        return $this->model->newInstance(array_fill_keys(array_values($attributes), null))->setConnection(\n            $this->toBase()->getConnection()->getName()\n        );\n    }", "code_tokens": ["public", "function", "findOrNew", "(", "$", "id", ",", "$", "columns", "=", "[", "'*'", "]", ")", "{", "if", "(", "!", "is_null", "(", "$", "model", "=", "$", "this", "->", "find", "(", "$", "id", ",", "$", "columns", ")", ")", ")", "{", "return", "$", "model", ";", "}", "$", "attributes", "=", "$", "this", "->", "toBase", "(", ")", "->", "getConnection", "(", ")", "->", "getSchemaBuilder", "(", ")", "->", "getColumnListing", "(", "$", "this", "->", "model", "->", "getTable", "(", ")", ")", ";", "return", "$", "this", "->", "model", "->", "newInstance", "(", "array_fill_keys", "(", "array_values", "(", "$", "attributes", ")", ",", "null", ")", ")", "->", "setConnection", "(", "$", "this", "->", "toBase", "(", ")", "->", "getConnection", "(", ")", "->", "getName", "(", ")", ")", ";", "}"], "docstring": "Find a model by its primary key or return fresh model instance\nwith filled attributes to use with forms.\n\n@param  mixed $id\n@param  array $columns\n\n@return \\Illuminate\\Database\\Eloquent\\Model", "docstring_tokens": ["Find", "a", "model", "by", "its", "primary", "key", "or", "return", "fresh", "model", "instance", "with", "filled", "attributes", "to", "use", "with", "forms", "."], "sha": "3c922ba1c02b3c14ad4adf91c2f37498045fa92a", "url": "https://github.com/tastyigniter/flame/blob/3c922ba1c02b3c14ad4adf91c2f37498045fa92a/src/Database/Builder.php#L269-L280", "partition": "test"}
{"repo": "wp-cli/widget-command", "path": "src/Widget_Command.php", "func_name": "Widget_Command.move_sidebar_widget", "original_string": "private function move_sidebar_widget( $widget_id, $current_sidebar_id, $new_sidebar_id, $current_index, $new_index ) {\n\n\t\t$all_widgets     = $this->wp_get_sidebars_widgets();\n\t\t$needs_placement = true;\n\t\t// Existing widget\n\t\tif ( $current_sidebar_id && ! is_null( $current_index ) ) {\n\n\t\t\t$widgets = $all_widgets[ $current_sidebar_id ];\n\t\t\tif ( $current_sidebar_id !== $new_sidebar_id ) {\n\n\t\t\t\tunset( $widgets[ $current_index ] );\n\n\t\t\t} else {\n\n\t\t\t\t$part = array_splice( $widgets, $current_index, 1 );\n\t\t\t\tarray_splice( $widgets, $new_index, 0, $part );\n\n\t\t\t\t$needs_placement = false;\n\n\t\t\t}\n\n\t\t\t$all_widgets[ $current_sidebar_id ] = array_values( $widgets );\n\n\t\t}\n\n\t\tif ( $needs_placement ) {\n\t\t\t$widgets                        = ! empty( $all_widgets[ $new_sidebar_id ] ) ? $all_widgets[ $new_sidebar_id ] : array();\n\t\t\t$before                         = array_slice( $widgets, 0, $new_index, true );\n\t\t\t$after                          = array_slice( $widgets, $new_index, count( $widgets ), true );\n\t\t\t$widgets                        = array_merge( $before, array( $widget_id ), $after );\n\t\t\t$all_widgets[ $new_sidebar_id ] = array_values( $widgets );\n\t\t}\n\n\t\tupdate_option( 'sidebars_widgets', $all_widgets );\n\n\t}", "language": "php", "code": "private function move_sidebar_widget( $widget_id, $current_sidebar_id, $new_sidebar_id, $current_index, $new_index ) {\n\n\t\t$all_widgets     = $this->wp_get_sidebars_widgets();\n\t\t$needs_placement = true;\n\t\t// Existing widget\n\t\tif ( $current_sidebar_id && ! is_null( $current_index ) ) {\n\n\t\t\t$widgets = $all_widgets[ $current_sidebar_id ];\n\t\t\tif ( $current_sidebar_id !== $new_sidebar_id ) {\n\n\t\t\t\tunset( $widgets[ $current_index ] );\n\n\t\t\t} else {\n\n\t\t\t\t$part = array_splice( $widgets, $current_index, 1 );\n\t\t\t\tarray_splice( $widgets, $new_index, 0, $part );\n\n\t\t\t\t$needs_placement = false;\n\n\t\t\t}\n\n\t\t\t$all_widgets[ $current_sidebar_id ] = array_values( $widgets );\n\n\t\t}\n\n\t\tif ( $needs_placement ) {\n\t\t\t$widgets                        = ! empty( $all_widgets[ $new_sidebar_id ] ) ? $all_widgets[ $new_sidebar_id ] : array();\n\t\t\t$before                         = array_slice( $widgets, 0, $new_index, true );\n\t\t\t$after                          = array_slice( $widgets, $new_index, count( $widgets ), true );\n\t\t\t$widgets                        = array_merge( $before, array( $widget_id ), $after );\n\t\t\t$all_widgets[ $new_sidebar_id ] = array_values( $widgets );\n\t\t}\n\n\t\tupdate_option( 'sidebars_widgets', $all_widgets );\n\n\t}", "code_tokens": ["private", "function", "move_sidebar_widget", "(", "$", "widget_id", ",", "$", "current_sidebar_id", ",", "$", "new_sidebar_id", ",", "$", "current_index", ",", "$", "new_index", ")", "{", "$", "all_widgets", "=", "$", "this", "->", "wp_get_sidebars_widgets", "(", ")", ";", "$", "needs_placement", "=", "true", ";", "// Existing widget", "if", "(", "$", "current_sidebar_id", "&&", "!", "is_null", "(", "$", "current_index", ")", ")", "{", "$", "widgets", "=", "$", "all_widgets", "[", "$", "current_sidebar_id", "]", ";", "if", "(", "$", "current_sidebar_id", "!==", "$", "new_sidebar_id", ")", "{", "unset", "(", "$", "widgets", "[", "$", "current_index", "]", ")", ";", "}", "else", "{", "$", "part", "=", "array_splice", "(", "$", "widgets", ",", "$", "current_index", ",", "1", ")", ";", "array_splice", "(", "$", "widgets", ",", "$", "new_index", ",", "0", ",", "$", "part", ")", ";", "$", "needs_placement", "=", "false", ";", "}", "$", "all_widgets", "[", "$", "current_sidebar_id", "]", "=", "array_values", "(", "$", "widgets", ")", ";", "}", "if", "(", "$", "needs_placement", ")", "{", "$", "widgets", "=", "!", "empty", "(", "$", "all_widgets", "[", "$", "new_sidebar_id", "]", ")", "?", "$", "all_widgets", "[", "$", "new_sidebar_id", "]", ":", "array", "(", ")", ";", "$", "before", "=", "array_slice", "(", "$", "widgets", ",", "0", ",", "$", "new_index", ",", "true", ")", ";", "$", "after", "=", "array_slice", "(", "$", "widgets", ",", "$", "new_index", ",", "count", "(", "$", "widgets", ")", ",", "true", ")", ";", "$", "widgets", "=", "array_merge", "(", "$", "before", ",", "array", "(", "$", "widget_id", ")", ",", "$", "after", ")", ";", "$", "all_widgets", "[", "$", "new_sidebar_id", "]", "=", "array_values", "(", "$", "widgets", ")", ";", "}", "update_option", "(", "'sidebars_widgets'", ",", "$", "all_widgets", ")", ";", "}"], "docstring": "Repositions a widget within a sidebar or move to another sidebar.\n\n@param string $widget_id\n@param string|null $current_sidebar_id\n@param string $new_sidebar_id\n@param int|null $current_index\n@param int $new_index", "docstring_tokens": ["Repositions", "a", "widget", "within", "a", "sidebar", "or", "move", "to", "another", "sidebar", "."], "sha": "58a1b2d2221cee852eb8a589535aaadb1217bb74", "url": "https://github.com/wp-cli/widget-command/blob/58a1b2d2221cee852eb8a589535aaadb1217bb74/src/Widget_Command.php#L581-L616", "partition": "test"}
{"repo": "hugodias/cakegallery", "path": "View/Helper/GalleryHelper.php", "func_name": "GalleryHelper.link", "original_string": "public function link($model = null, $model_id = null, $html_options = array())\n    {\n        return $this->_View->Html->link(\n            __('Upload pictures'),\n            array(\n                'controller' => 'albums',\n                'action' => 'upload',\n                'plugin' => 'gallery',\n                $model,\n                $model_id\n            ),\n            $html_options\n        );\n    }", "language": "php", "code": "public function link($model = null, $model_id = null, $html_options = array())\n    {\n        return $this->_View->Html->link(\n            __('Upload pictures'),\n            array(\n                'controller' => 'albums',\n                'action' => 'upload',\n                'plugin' => 'gallery',\n                $model,\n                $model_id\n            ),\n            $html_options\n        );\n    }", "code_tokens": ["public", "function", "link", "(", "$", "model", "=", "null", ",", "$", "model_id", "=", "null", ",", "$", "html_options", "=", "array", "(", ")", ")", "{", "return", "$", "this", "->", "_View", "->", "Html", "->", "link", "(", "__", "(", "'Upload pictures'", ")", ",", "array", "(", "'controller'", "=>", "'albums'", ",", "'action'", "=>", "'upload'", ",", "'plugin'", "=>", "'gallery'", ",", "$", "model", ",", "$", "model_id", ")", ",", "$", "html_options", ")", ";", "}"], "docstring": "Gallery link helper\n\nThis helper will create an link to a new or existing gallery\n\nIf no arguments are passed this will create a new gallery everytime the link are clicked.\n\nWhen model & model_id arguments are passed, this will redirect to this specific gallery (it will also create a\nnew one if didn't exists)\n\nExample:\n<?php echo $this->Gallery->button('product', 1) ?>\n\n@param null $model\n@param null $model_id\n@param array $html_options\n@return string", "docstring_tokens": ["Gallery", "link", "helper"], "sha": "5289c7babadaf0981cbbd71825f42f46cbbd7650", "url": "https://github.com/hugodias/cakegallery/blob/5289c7babadaf0981cbbd71825f42f46cbbd7650/View/Helper/GalleryHelper.php#L26-L39", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Http/Controllers/Inventory/StockController.php", "func_name": "StockController.destroy", "original_string": "public function destroy($itemId, $stockId)\n    {\n        if ($this->processor->destroy($itemId, $stockId)) {\n            flash()->success('Success!', 'Successfully deleted stock.');\n\n            return redirect()->route('maintenance.inventory.stocks.index', [$itemId]);\n        } else {\n            flash()->error('Error!', 'There was an issue deleting this stock. Please try again.');\n\n            return redirect()->route('maintenance.inventory.stocks.show', [$itemId, $stockId]);\n        }\n    }", "language": "php", "code": "public function destroy($itemId, $stockId)\n    {\n        if ($this->processor->destroy($itemId, $stockId)) {\n            flash()->success('Success!', 'Successfully deleted stock.');\n\n            return redirect()->route('maintenance.inventory.stocks.index', [$itemId]);\n        } else {\n            flash()->error('Error!', 'There was an issue deleting this stock. Please try again.');\n\n            return redirect()->route('maintenance.inventory.stocks.show', [$itemId, $stockId]);\n        }\n    }", "code_tokens": ["public", "function", "destroy", "(", "$", "itemId", ",", "$", "stockId", ")", "{", "if", "(", "$", "this", "->", "processor", "->", "destroy", "(", "$", "itemId", ",", "$", "stockId", ")", ")", "{", "flash", "(", ")", "->", "success", "(", "'Success!'", ",", "'Successfully deleted stock.'", ")", ";", "return", "redirect", "(", ")", "->", "route", "(", "'maintenance.inventory.stocks.index'", ",", "[", "$", "itemId", "]", ")", ";", "}", "else", "{", "flash", "(", ")", "->", "error", "(", "'Error!'", ",", "'There was an issue deleting this stock. Please try again.'", ")", ";", "return", "redirect", "(", ")", "->", "route", "(", "'maintenance.inventory.stocks.show'", ",", "[", "$", "itemId", ",", "$", "stockId", "]", ")", ";", "}", "}"], "docstring": "Removes the specified stock from the specified inventory.\n\n@param int|string $itemId\n@param int|string $stockId\n\n@return \\Illuminate\\Http\\RedirectResponse", "docstring_tokens": ["Removes", "the", "specified", "stock", "from", "the", "specified", "inventory", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Http/Controllers/Inventory/StockController.php#L127-L138", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/I18n/Time.php", "func_name": "Time.tomorrow", "original_string": "public static function tomorrow($timezone = null, string $locale = null)\n\t{\n\t\treturn new Time(date('Y-m-d 00:00:00', strtotime('+1 day')), $timezone, $locale);\n\t}", "language": "php", "code": "public static function tomorrow($timezone = null, string $locale = null)\n\t{\n\t\treturn new Time(date('Y-m-d 00:00:00', strtotime('+1 day')), $timezone, $locale);\n\t}", "code_tokens": ["public", "static", "function", "tomorrow", "(", "$", "timezone", "=", "null", ",", "string", "$", "locale", "=", "null", ")", "{", "return", "new", "Time", "(", "date", "(", "'Y-m-d 00:00:00'", ",", "strtotime", "(", "'+1 day'", ")", ")", ",", "$", "timezone", ",", "$", "locale", ")", ";", "}"], "docstring": "Returns an instance set to midnight tomorrow morning.\n\n@param null        $timezone\n@param string|null $locale\n\n@return \\CodeIgniter\\I18n\\Time\n@throws \\Exception", "docstring_tokens": ["Returns", "an", "instance", "set", "to", "midnight", "tomorrow", "morning", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/I18n/Time.php#L219-L222", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Validation/FormatRules.php", "func_name": "FormatRules.valid_email", "original_string": "public function valid_email(string $str = null): bool\n\t{\n\t\tif (function_exists('idn_to_ascii') && defined('INTL_IDNA_VARIANT_UTS46') && preg_match('#\\A([^@]+)@(.+)\\z#', $str, $matches))\n\t\t{\n\t\t\t$str = $matches[1] . '@' . idn_to_ascii($matches[2], 0, INTL_IDNA_VARIANT_UTS46);\n\t\t}\n\n\t\treturn (bool) filter_var($str, FILTER_VALIDATE_EMAIL);\n\t}", "language": "php", "code": "public function valid_email(string $str = null): bool\n\t{\n\t\tif (function_exists('idn_to_ascii') && defined('INTL_IDNA_VARIANT_UTS46') && preg_match('#\\A([^@]+)@(.+)\\z#', $str, $matches))\n\t\t{\n\t\t\t$str = $matches[1] . '@' . idn_to_ascii($matches[2], 0, INTL_IDNA_VARIANT_UTS46);\n\t\t}\n\n\t\treturn (bool) filter_var($str, FILTER_VALIDATE_EMAIL);\n\t}", "code_tokens": ["public", "function", "valid_email", "(", "string", "$", "str", "=", "null", ")", ":", "bool", "{", "if", "(", "function_exists", "(", "'idn_to_ascii'", ")", "&&", "defined", "(", "'INTL_IDNA_VARIANT_UTS46'", ")", "&&", "preg_match", "(", "'#\\A([^@]+)@(.+)\\z#'", ",", "$", "str", ",", "$", "matches", ")", ")", "{", "$", "str", "=", "$", "matches", "[", "1", "]", ".", "'@'", ".", "idn_to_ascii", "(", "$", "matches", "[", "2", "]", ",", "0", ",", "INTL_IDNA_VARIANT_UTS46", ")", ";", "}", "return", "(", "bool", ")", "filter_var", "(", "$", "str", ",", "FILTER_VALIDATE_EMAIL", ")", ";", "}"], "docstring": "Checks for a correctly formatted email address\n\n@param string\n\n@return boolean", "docstring_tokens": ["Checks", "for", "a", "correctly", "formatted", "email", "address"], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Validation/FormatRules.php#L285-L293", "partition": "test"}
{"repo": "JVMartin/angel-core", "path": "src/controllers/admin/AdminCrudController.php", "func_name": "AdminCrudController.edit", "original_string": "public function edit($id)\n\t{\n\t\t$Model = App::make($this->Model);\n\n\t\t$this->data[$this->singular] = $Model::withTrashed()->findOrFail($id);\n\t\t$this->data['action']        = 'edit';\n\n\t\treturn View::make($this->view('add-or-edit'), $this->data);\n\t}", "language": "php", "code": "public function edit($id)\n\t{\n\t\t$Model = App::make($this->Model);\n\n\t\t$this->data[$this->singular] = $Model::withTrashed()->findOrFail($id);\n\t\t$this->data['action']        = 'edit';\n\n\t\treturn View::make($this->view('add-or-edit'), $this->data);\n\t}", "code_tokens": ["public", "function", "edit", "(", "$", "id", ")", "{", "$", "Model", "=", "App", "::", "make", "(", "$", "this", "->", "Model", ")", ";", "$", "this", "->", "data", "[", "$", "this", "->", "singular", "]", "=", "$", "Model", "::", "withTrashed", "(", ")", "->", "findOrFail", "(", "$", "id", ")", ";", "$", "this", "->", "data", "[", "'action'", "]", "=", "'edit'", ";", "return", "View", "::", "make", "(", "$", "this", "->", "view", "(", "'add-or-edit'", ")", ",", "$", "this", "->", "data", ")", ";", "}"], "docstring": "Show the model form for editing.\n\nBoth add() and edit() use the same view:  add-or-edit\n\n@param int $id - The ID of the model we're editing.\n@return \\Illuminate\\View\\View", "docstring_tokens": ["Show", "the", "model", "form", "for", "editing", "."], "sha": "96637ecf2fdaeda2337d8a2dbea0ab1a18198b11", "url": "https://github.com/JVMartin/angel-core/blob/96637ecf2fdaeda2337d8a2dbea0ab1a18198b11/src/controllers/admin/AdminCrudController.php#L141-L149", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/PEAR/DependencyDB.php", "func_name": "PEAR_DependencyDB.rebuildDB", "original_string": "function rebuildDB()\n    {\n        $depdb = array('_version' => $this->_version);\n        if (!$this->hasWriteAccess()) {\n            // allow startup for read-only with older Registry\n            return $depdb;\n        }\n\n        $packages = $this->_registry->listAllPackages();\n        if (PEAR::isError($packages)) {\n            return $packages;\n        }\n\n        foreach ($packages as $channel => $ps) {\n            foreach ($ps as $package) {\n                $package = $this->_registry->getPackage($package, $channel);\n                if (PEAR::isError($package)) {\n                    return $package;\n                }\n                $this->_setPackageDeps($depdb, $package);\n            }\n        }\n\n        $error = $this->_writeDepDB($depdb);\n        if (PEAR::isError($error)) {\n            return $error;\n        }\n\n        $this->_cache = $depdb;\n        return true;\n    }", "language": "php", "code": "function rebuildDB()\n    {\n        $depdb = array('_version' => $this->_version);\n        if (!$this->hasWriteAccess()) {\n            // allow startup for read-only with older Registry\n            return $depdb;\n        }\n\n        $packages = $this->_registry->listAllPackages();\n        if (PEAR::isError($packages)) {\n            return $packages;\n        }\n\n        foreach ($packages as $channel => $ps) {\n            foreach ($ps as $package) {\n                $package = $this->_registry->getPackage($package, $channel);\n                if (PEAR::isError($package)) {\n                    return $package;\n                }\n                $this->_setPackageDeps($depdb, $package);\n            }\n        }\n\n        $error = $this->_writeDepDB($depdb);\n        if (PEAR::isError($error)) {\n            return $error;\n        }\n\n        $this->_cache = $depdb;\n        return true;\n    }", "code_tokens": ["function", "rebuildDB", "(", ")", "{", "$", "depdb", "=", "array", "(", "'_version'", "=>", "$", "this", "->", "_version", ")", ";", "if", "(", "!", "$", "this", "->", "hasWriteAccess", "(", ")", ")", "{", "// allow startup for read-only with older Registry", "return", "$", "depdb", ";", "}", "$", "packages", "=", "$", "this", "->", "_registry", "->", "listAllPackages", "(", ")", ";", "if", "(", "PEAR", "::", "isError", "(", "$", "packages", ")", ")", "{", "return", "$", "packages", ";", "}", "foreach", "(", "$", "packages", "as", "$", "channel", "=>", "$", "ps", ")", "{", "foreach", "(", "$", "ps", "as", "$", "package", ")", "{", "$", "package", "=", "$", "this", "->", "_registry", "->", "getPackage", "(", "$", "package", ",", "$", "channel", ")", ";", "if", "(", "PEAR", "::", "isError", "(", "$", "package", ")", ")", "{", "return", "$", "package", ";", "}", "$", "this", "->", "_setPackageDeps", "(", "$", "depdb", ",", "$", "package", ")", ";", "}", "}", "$", "error", "=", "$", "this", "->", "_writeDepDB", "(", "$", "depdb", ")", ";", "if", "(", "PEAR", "::", "isError", "(", "$", "error", ")", ")", "{", "return", "$", "error", ";", "}", "$", "this", "->", "_cache", "=", "$", "depdb", ";", "return", "true", ";", "}"], "docstring": "Rebuild the dependency DB by reading registry entries.\n@return true|PEAR_Error", "docstring_tokens": ["Rebuild", "the", "dependency", "DB", "by", "reading", "registry", "entries", "."], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/PEAR/DependencyDB.php#L435-L465", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Http/Controllers/Event/Controller.php", "func_name": "Controller.update", "original_string": "public function update(Request $request, $id)\n    {\n        $event = $this->event->update($request, $id);\n\n        if ($event) {\n            $message = 'Successfully updated event.';\n\n            return redirect()->route('maintenance.events.show', [$event->id])->withSuccess($message);\n        } else {\n            $message = 'There was an issue updating this event. Please try again.';\n\n            return redirect()->route('maintenance.events.create')->withErrors($message);\n        }\n    }", "language": "php", "code": "public function update(Request $request, $id)\n    {\n        $event = $this->event->update($request, $id);\n\n        if ($event) {\n            $message = 'Successfully updated event.';\n\n            return redirect()->route('maintenance.events.show', [$event->id])->withSuccess($message);\n        } else {\n            $message = 'There was an issue updating this event. Please try again.';\n\n            return redirect()->route('maintenance.events.create')->withErrors($message);\n        }\n    }", "code_tokens": ["public", "function", "update", "(", "Request", "$", "request", ",", "$", "id", ")", "{", "$", "event", "=", "$", "this", "->", "event", "->", "update", "(", "$", "request", ",", "$", "id", ")", ";", "if", "(", "$", "event", ")", "{", "$", "message", "=", "'Successfully updated event.'", ";", "return", "redirect", "(", ")", "->", "route", "(", "'maintenance.events.show'", ",", "[", "$", "event", "->", "id", "]", ")", "->", "withSuccess", "(", "$", "message", ")", ";", "}", "else", "{", "$", "message", "=", "'There was an issue updating this event. Please try again.'", ";", "return", "redirect", "(", ")", "->", "route", "(", "'maintenance.events.create'", ")", "->", "withErrors", "(", "$", "message", ")", ";", "}", "}"], "docstring": "Updates an event.\n\n@param Request    $request\n@param int|string $id\n\n@return \\Illuminate\\Support\\Facades\\Response", "docstring_tokens": ["Updates", "an", "event", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Http/Controllers/Event/Controller.php#L114-L127", "partition": "test"}
{"repo": "FriendsOfSymfony/FOSElasticaBundle", "path": "src/Index/AliasProcessor.php", "func_name": "AliasProcessor.closeIndex", "original_string": "private function closeIndex(Client $client, $indexName)\n    {\n        try {\n            $path = sprintf('%s/_close', $indexName);\n            $client->request($path, Request::POST);\n        } catch (ExceptionInterface $e) {\n            throw new \\RuntimeException(\n                sprintf(\n                    'Failed to close index %s with message: %s',\n                    $indexName,\n                    $e->getMessage()\n                ),\n                0,\n                $e\n            );\n        }\n    }", "language": "php", "code": "private function closeIndex(Client $client, $indexName)\n    {\n        try {\n            $path = sprintf('%s/_close', $indexName);\n            $client->request($path, Request::POST);\n        } catch (ExceptionInterface $e) {\n            throw new \\RuntimeException(\n                sprintf(\n                    'Failed to close index %s with message: %s',\n                    $indexName,\n                    $e->getMessage()\n                ),\n                0,\n                $e\n            );\n        }\n    }", "code_tokens": ["private", "function", "closeIndex", "(", "Client", "$", "client", ",", "$", "indexName", ")", "{", "try", "{", "$", "path", "=", "sprintf", "(", "'%s/_close'", ",", "$", "indexName", ")", ";", "$", "client", "->", "request", "(", "$", "path", ",", "Request", "::", "POST", ")", ";", "}", "catch", "(", "ExceptionInterface", "$", "e", ")", "{", "throw", "new", "\\", "RuntimeException", "(", "sprintf", "(", "'Failed to close index %s with message: %s'", ",", "$", "indexName", ",", "$", "e", "->", "getMessage", "(", ")", ")", ",", "0", ",", "$", "e", ")", ";", "}", "}"], "docstring": "Close an index.\n\n@param Client $client\n@param string $indexName", "docstring_tokens": ["Close", "an", "index", "."], "sha": "3f2707d1d606a59527f74e88808b820a170d3f42", "url": "https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/3f2707d1d606a59527f74e88808b820a170d3f42/src/Index/AliasProcessor.php#L171-L187", "partition": "test"}
{"repo": "shokohsc/TwitchApiBundle", "path": "Repository/StreamRepository.php", "func_name": "StreamRepository.getStreamsSummary", "original_string": "public function getStreamsSummary($params = array())\n    {\n        $params = 0 < count($params) ? '?'.http_build_query($params) : '';\n        $response = $this->getClient()->get(self::ENDPOINT.'summary'.$params);\n        $data = $this->jsonResponse($response);\n\n        return $this->setFactory((new RankFactory()))->getFactory()->createEntity($data);\n    }", "language": "php", "code": "public function getStreamsSummary($params = array())\n    {\n        $params = 0 < count($params) ? '?'.http_build_query($params) : '';\n        $response = $this->getClient()->get(self::ENDPOINT.'summary'.$params);\n        $data = $this->jsonResponse($response);\n\n        return $this->setFactory((new RankFactory()))->getFactory()->createEntity($data);\n    }", "code_tokens": ["public", "function", "getStreamsSummary", "(", "$", "params", "=", "array", "(", ")", ")", "{", "$", "params", "=", "0", "<", "count", "(", "$", "params", ")", "?", "'?'", ".", "http_build_query", "(", "$", "params", ")", ":", "''", ";", "$", "response", "=", "$", "this", "->", "getClient", "(", ")", "->", "get", "(", "self", "::", "ENDPOINT", ".", "'summary'", ".", "$", "params", ")", ";", "$", "data", "=", "$", "this", "->", "jsonResponse", "(", "$", "response", ")", ";", "return", "$", "this", "->", "setFactory", "(", "(", "new", "RankFactory", "(", ")", ")", ")", "->", "getFactory", "(", ")", "->", "createEntity", "(", "$", "data", ")", ";", "}"], "docstring": "Get streams summary.\n\n@param array $params\n\n@return Rank", "docstring_tokens": ["Get", "streams", "summary", "."], "sha": "9ee6d2e1609d5dee4c083188a8ef5d916965eb64", "url": "https://github.com/shokohsc/TwitchApiBundle/blob/9ee6d2e1609d5dee4c083188a8ef5d916965eb64/Repository/StreamRepository.php#L89-L96", "partition": "test"}
{"repo": "estebanmatias92/RestGalleries", "path": "src/RestGalleries/Auth/Auth.php", "func_name": "Auth.addDataTokens", "original_string": "protected function addDataTokens(&$object, $tokenCredentials)\n    {\n        $tokens = &$object->tokens;\n\n        $callback = function ($value, $key) use (&$tokens) {\n            $tokens = array_add($tokens, $key, $value);\n        };\n\n        array_walk($tokenCredentials, $callback);\n\n    }", "language": "php", "code": "protected function addDataTokens(&$object, $tokenCredentials)\n    {\n        $tokens = &$object->tokens;\n\n        $callback = function ($value, $key) use (&$tokens) {\n            $tokens = array_add($tokens, $key, $value);\n        };\n\n        array_walk($tokenCredentials, $callback);\n\n    }", "code_tokens": ["protected", "function", "addDataTokens", "(", "&", "$", "object", ",", "$", "tokenCredentials", ")", "{", "$", "tokens", "=", "&", "$", "object", "->", "tokens", ";", "$", "callback", "=", "function", "(", "$", "value", ",", "$", "key", ")", "use", "(", "&", "$", "tokens", ")", "{", "$", "tokens", "=", "array_add", "(", "$", "tokens", ",", "$", "key", ",", "$", "value", ")", ";", "}", ";", "array_walk", "(", "$", "tokenCredentials", ",", "$", "callback", ")", ";", "}"], "docstring": "Add token credentials to the object.\n\n@param  object $object\n@param  array  $tokens\n@return void", "docstring_tokens": ["Add", "token", "credentials", "to", "the", "object", "."], "sha": "09bbaf351e1ec330f075aa96b7c2aed407534a57", "url": "https://github.com/estebanmatias92/RestGalleries/blob/09bbaf351e1ec330f075aa96b7c2aed407534a57/src/RestGalleries/Auth/Auth.php#L209-L219", "partition": "test"}
{"repo": "silvershop/silvershop-core", "path": "src/Page/CheckoutPage.php", "func_name": "CheckoutPage.requireDefaultRecords", "original_string": "public function requireDefaultRecords()\n    {\n        parent::requireDefaultRecords();\n        if (!self::get()->exists() && $this->config()->create_default_pages) {\n            $page = self::create()->update(\n                [\n                    'Title'       => 'Checkout',\n                    'URLSegment'  => CheckoutPageController::config()->url_segment,\n                    'ShowInMenus' => 0,\n                ]\n            );\n            $page->write();\n            $page->publishSingle();\n            $page->flushCache();\n            DB::alteration_message('Checkout page created', 'created');\n        }\n    }", "language": "php", "code": "public function requireDefaultRecords()\n    {\n        parent::requireDefaultRecords();\n        if (!self::get()->exists() && $this->config()->create_default_pages) {\n            $page = self::create()->update(\n                [\n                    'Title'       => 'Checkout',\n                    'URLSegment'  => CheckoutPageController::config()->url_segment,\n                    'ShowInMenus' => 0,\n                ]\n            );\n            $page->write();\n            $page->publishSingle();\n            $page->flushCache();\n            DB::alteration_message('Checkout page created', 'created');\n        }\n    }", "code_tokens": ["public", "function", "requireDefaultRecords", "(", ")", "{", "parent", "::", "requireDefaultRecords", "(", ")", ";", "if", "(", "!", "self", "::", "get", "(", ")", "->", "exists", "(", ")", "&&", "$", "this", "->", "config", "(", ")", "->", "create_default_pages", ")", "{", "$", "page", "=", "self", "::", "create", "(", ")", "->", "update", "(", "[", "'Title'", "=>", "'Checkout'", ",", "'URLSegment'", "=>", "CheckoutPageController", "::", "config", "(", ")", "->", "url_segment", ",", "'ShowInMenus'", "=>", "0", ",", "]", ")", ";", "$", "page", "->", "write", "(", ")", ";", "$", "page", "->", "publishSingle", "(", ")", ";", "$", "page", "->", "flushCache", "(", ")", ";", "DB", "::", "alteration_message", "(", "'Checkout page created'", ",", "'created'", ")", ";", "}", "}"], "docstring": "This module always requires a page model.", "docstring_tokens": ["This", "module", "always", "requires", "a", "page", "model", "."], "sha": "b090e970b06c0fb7e68107360760b6e2d6d184c4", "url": "https://github.com/silvershop/silvershop-core/blob/b090e970b06c0fb7e68107360760b6e2d6d184c4/src/Page/CheckoutPage.php#L84-L100", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/core/class-papi-core-data-handler.php", "func_name": "Papi_Core_Data_Handler.prepare_post_data", "original_string": "protected function prepare_post_data( $data ) {\n\t\tif ( ! is_array( $data ) ) {\n\t\t\treturn $data;\n\t\t}\n\n\t\tforeach ( $data as $key => $value ) {\n\t\t\tif ( is_array( $value ) ) {\n\t\t\t\t$data[$key] = $this->prepare_post_data( $value );\n\t\t\t} else {\n\t\t\t\t$data[$key] = $this->decode_property( $key, $value );\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}", "language": "php", "code": "protected function prepare_post_data( $data ) {\n\t\tif ( ! is_array( $data ) ) {\n\t\t\treturn $data;\n\t\t}\n\n\t\tforeach ( $data as $key => $value ) {\n\t\t\tif ( is_array( $value ) ) {\n\t\t\t\t$data[$key] = $this->prepare_post_data( $value );\n\t\t\t} else {\n\t\t\t\t$data[$key] = $this->decode_property( $key, $value );\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}", "code_tokens": ["protected", "function", "prepare_post_data", "(", "$", "data", ")", "{", "if", "(", "!", "is_array", "(", "$", "data", ")", ")", "{", "return", "$", "data", ";", "}", "foreach", "(", "$", "data", "as", "$", "key", "=>", "$", "value", ")", "{", "if", "(", "is_array", "(", "$", "value", ")", ")", "{", "$", "data", "[", "$", "key", "]", "=", "$", "this", "->", "prepare_post_data", "(", "$", "value", ")", ";", "}", "else", "{", "$", "data", "[", "$", "key", "]", "=", "$", "this", "->", "decode_property", "(", "$", "key", ",", "$", "value", ")", ";", "}", "}", "return", "$", "data", ";", "}"], "docstring": "Prepare post data.\nWill decode property options recursive.\n\n@param  mixed $data\n\n@return mixed", "docstring_tokens": ["Prepare", "post", "data", ".", "Will", "decode", "property", "options", "recursive", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/core/class-papi-core-data-handler.php#L121-L135", "partition": "test"}
{"repo": "OXIDprojects/oxid-module-internals", "path": "Core/InternalModule.php", "func_name": "InternalModule.checkModuleEvents", "original_string": "public function checkModuleEvents()\n    {\n        $aDatabaseEvents = $this->getModuleEntries(ModuleList::MODULE_KEY_EVENTS);\n\n        $aDatabaseEvents = is_array($aDatabaseEvents) ? $aDatabaseEvents : [];\n        $aDatabaseEvents = array_map(function ($value){return print_r($value,true);}, $aDatabaseEvents);\n        $aResult = $this->toResult($aDatabaseEvents);\n        foreach ($aResult as $eventName => &$data){\n            $data['key_state'] = ($eventName == 'onActivate' || $eventName == 'onDeactivate') ? self::OK : self::SHOP_FILE_NOT_FOUND;\n        }\n        return $aResult;\n    }", "language": "php", "code": "public function checkModuleEvents()\n    {\n        $aDatabaseEvents = $this->getModuleEntries(ModuleList::MODULE_KEY_EVENTS);\n\n        $aDatabaseEvents = is_array($aDatabaseEvents) ? $aDatabaseEvents : [];\n        $aDatabaseEvents = array_map(function ($value){return print_r($value,true);}, $aDatabaseEvents);\n        $aResult = $this->toResult($aDatabaseEvents);\n        foreach ($aResult as $eventName => &$data){\n            $data['key_state'] = ($eventName == 'onActivate' || $eventName == 'onDeactivate') ? self::OK : self::SHOP_FILE_NOT_FOUND;\n        }\n        return $aResult;\n    }", "code_tokens": ["public", "function", "checkModuleEvents", "(", ")", "{", "$", "aDatabaseEvents", "=", "$", "this", "->", "getModuleEntries", "(", "ModuleList", "::", "MODULE_KEY_EVENTS", ")", ";", "$", "aDatabaseEvents", "=", "is_array", "(", "$", "aDatabaseEvents", ")", "?", "$", "aDatabaseEvents", ":", "[", "]", ";", "$", "aDatabaseEvents", "=", "array_map", "(", "function", "(", "$", "value", ")", "{", "return", "print_r", "(", "$", "value", ",", "true", ")", ";", "}", ",", "$", "aDatabaseEvents", ")", ";", "$", "aResult", "=", "$", "this", "->", "toResult", "(", "$", "aDatabaseEvents", ")", ";", "foreach", "(", "$", "aResult", "as", "$", "eventName", "=>", "&", "$", "data", ")", "{", "$", "data", "[", "'key_state'", "]", "=", "(", "$", "eventName", "==", "'onActivate'", "||", "$", "eventName", "==", "'onDeactivate'", ")", "?", "self", "::", "OK", ":", "self", "::", "SHOP_FILE_NOT_FOUND", ";", "}", "return", "$", "aResult", ";", "}"], "docstring": "Analyze events in metadata ans settings.\n\n@return array", "docstring_tokens": ["Analyze", "events", "in", "metadata", "ans", "settings", "."], "sha": "acfd0e6334b99b02c0f6ebcb738190511e89a4ee", "url": "https://github.com/OXIDprojects/oxid-module-internals/blob/acfd0e6334b99b02c0f6ebcb738190511e89a4ee/Core/InternalModule.php#L508-L519", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/HTTP2.php", "func_name": "HTTP2.date", "original_string": "public function date($time = null)\n    {\n        if (!isset($time)) {\n            $time = time();\n        } elseif (!is_numeric($time) && (-1 === $time = strtotime($time))) {\n            return false;\n        }\n\n        // RFC822 or RFC850\n        $format = ini_get('y2k_compliance') ? 'D, d M Y' : 'l, d-M-y';\n\n        return gmdate($format .' H:i:s \\G\\M\\T', $time);\n    }", "language": "php", "code": "public function date($time = null)\n    {\n        if (!isset($time)) {\n            $time = time();\n        } elseif (!is_numeric($time) && (-1 === $time = strtotime($time))) {\n            return false;\n        }\n\n        // RFC822 or RFC850\n        $format = ini_get('y2k_compliance') ? 'D, d M Y' : 'l, d-M-y';\n\n        return gmdate($format .' H:i:s \\G\\M\\T', $time);\n    }", "code_tokens": ["public", "function", "date", "(", "$", "time", "=", "null", ")", "{", "if", "(", "!", "isset", "(", "$", "time", ")", ")", "{", "$", "time", "=", "time", "(", ")", ";", "}", "elseif", "(", "!", "is_numeric", "(", "$", "time", ")", "&&", "(", "-", "1", "===", "$", "time", "=", "strtotime", "(", "$", "time", ")", ")", ")", "{", "return", "false", ";", "}", "// RFC822 or RFC850", "$", "format", "=", "ini_get", "(", "'y2k_compliance'", ")", "?", "'D, d M Y'", ":", "'l, d-M-y'", ";", "return", "gmdate", "(", "$", "format", ".", "' H:i:s \\G\\M\\T'", ",", "$", "time", ")", ";", "}"], "docstring": "Formats a RFC compliant GMT date HTTP header.  This function honors the\n\"y2k_compliance\" php.ini directive and formats the GMT date corresponding\nto either RFC850 or RFC822.\n\n@param mixed $time unix timestamp or date (default = current time)\n\n@return string|boolean GMT date string, or FALSE for an invalid\n$time parameter", "docstring_tokens": ["Formats", "a", "RFC", "compliant", "GMT", "date", "HTTP", "header", ".", "This", "function", "honors", "the", "y2k_compliance", "php", ".", "ini", "directive", "and", "formats", "the", "GMT", "date", "corresponding", "to", "either", "RFC850", "or", "RFC822", "."], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/HTTP2.php#L55-L67", "partition": "test"}
{"repo": "yiisoft/yii2-queue", "path": "src/cli/SignalLoop.php", "func_name": "SignalLoop.canContinue", "original_string": "public function canContinue()\n    {\n        if (extension_loaded('pcntl')) {\n            pcntl_signal_dispatch();\n            // Wait for resume signal until loop is suspended\n            while (self::$pause && !self::$exit) {\n                usleep(10000);\n                pcntl_signal_dispatch();\n            }\n        }\n\n        return !self::$exit;\n    }", "language": "php", "code": "public function canContinue()\n    {\n        if (extension_loaded('pcntl')) {\n            pcntl_signal_dispatch();\n            // Wait for resume signal until loop is suspended\n            while (self::$pause && !self::$exit) {\n                usleep(10000);\n                pcntl_signal_dispatch();\n            }\n        }\n\n        return !self::$exit;\n    }", "code_tokens": ["public", "function", "canContinue", "(", ")", "{", "if", "(", "extension_loaded", "(", "'pcntl'", ")", ")", "{", "pcntl_signal_dispatch", "(", ")", ";", "// Wait for resume signal until loop is suspended", "while", "(", "self", "::", "$", "pause", "&&", "!", "self", "::", "$", "exit", ")", "{", "usleep", "(", "10000", ")", ";", "pcntl_signal_dispatch", "(", ")", ";", "}", "}", "return", "!", "self", "::", "$", "exit", ";", "}"], "docstring": "Checks signals state.\n\n@inheritdoc", "docstring_tokens": ["Checks", "signals", "state", "."], "sha": "c5e75f9c4a8c38f5abd387165e16945da32b84dc", "url": "https://github.com/yiisoft/yii2-queue/blob/c5e75f9c4a8c38f5abd387165e16945da32b84dc/src/cli/SignalLoop.php#L96-L108", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Database/Migrations/MigrationCreator.php", "func_name": "MigrationCreator.create", "original_string": "public function create($name, $path, $table = null, $create = false)\n    {\n        $this->ensureMigrationDoesntAlreadyExist($name, $path);\n\n        $stub = $this->getStubContent($table, $create);\n\n        $populatedStub = $this->populateStub($name, $stub, $table);\n\n        $path = $this->getPath($name, $path);\n\n        file_put_contents($path, $populatedStub);\n\n        return $path;\n    }", "language": "php", "code": "public function create($name, $path, $table = null, $create = false)\n    {\n        $this->ensureMigrationDoesntAlreadyExist($name, $path);\n\n        $stub = $this->getStubContent($table, $create);\n\n        $populatedStub = $this->populateStub($name, $stub, $table);\n\n        $path = $this->getPath($name, $path);\n\n        file_put_contents($path, $populatedStub);\n\n        return $path;\n    }", "code_tokens": ["public", "function", "create", "(", "$", "name", ",", "$", "path", ",", "$", "table", "=", "null", ",", "$", "create", "=", "false", ")", "{", "$", "this", "->", "ensureMigrationDoesntAlreadyExist", "(", "$", "name", ",", "$", "path", ")", ";", "$", "stub", "=", "$", "this", "->", "getStubContent", "(", "$", "table", ",", "$", "create", ")", ";", "$", "populatedStub", "=", "$", "this", "->", "populateStub", "(", "$", "name", ",", "$", "stub", ",", "$", "table", ")", ";", "$", "path", "=", "$", "this", "->", "getPath", "(", "$", "name", ",", "$", "path", ")", ";", "file_put_contents", "(", "$", "path", ",", "$", "populatedStub", ")", ";", "return", "$", "path", ";", "}"], "docstring": "Create a new migration at the given path.\n\n@param  string $name\n@param  string $path\n@param  string $table\n@param  bool   $create\n\n@return string\n@throws \\Exception", "docstring_tokens": ["Create", "a", "new", "migration", "at", "the", "given", "path", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Database/Migrations/MigrationCreator.php#L42-L55", "partition": "test"}
{"repo": "sheadawson/silverstripe-editlock", "path": "code/extensions/EditLockControllerExtension.php", "func_name": "EditLockControllerExtension.updateEditForm", "original_string": "public function updateEditForm($form)\n    {\n        if ($record = $form->getRecord()) {\n            $form = $this->updateForm($form, $record);\n        }\n    }", "language": "php", "code": "public function updateEditForm($form)\n    {\n        if ($record = $form->getRecord()) {\n            $form = $this->updateForm($form, $record);\n        }\n    }", "code_tokens": ["public", "function", "updateEditForm", "(", "$", "form", ")", "{", "if", "(", "$", "record", "=", "$", "form", "->", "getRecord", "(", ")", ")", "{", "$", "form", "=", "$", "this", "->", "updateForm", "(", "$", "form", ",", "$", "record", ")", ";", "}", "}"], "docstring": "Extension hook for LeftAndMain subclasses", "docstring_tokens": ["Extension", "hook", "for", "LeftAndMain", "subclasses"], "sha": "d9223fd5999b9ebc5582d7ee22f1674308358629", "url": "https://github.com/sheadawson/silverstripe-editlock/blob/d9223fd5999b9ebc5582d7ee22f1674308358629/code/extensions/EditLockControllerExtension.php#L79-L84", "partition": "test"}
{"repo": "flugger/laravel-responder", "path": "src/Exceptions/Handler.php", "func_name": "Handler.render", "original_string": "public function render($request, Exception $exception)\n    {\n        if ($request->wantsJson()) {\n            $this->convertDefaultException($exception);\n\n            if ($exception instanceof HttpException) {\n                return $this->renderResponse($exception);\n            }\n        }\n\n        return parent::render($request, $exception);\n    }", "language": "php", "code": "public function render($request, Exception $exception)\n    {\n        if ($request->wantsJson()) {\n            $this->convertDefaultException($exception);\n\n            if ($exception instanceof HttpException) {\n                return $this->renderResponse($exception);\n            }\n        }\n\n        return parent::render($request, $exception);\n    }", "code_tokens": ["public", "function", "render", "(", "$", "request", ",", "Exception", "$", "exception", ")", "{", "if", "(", "$", "request", "->", "wantsJson", "(", ")", ")", "{", "$", "this", "->", "convertDefaultException", "(", "$", "exception", ")", ";", "if", "(", "$", "exception", "instanceof", "HttpException", ")", "{", "return", "$", "this", "->", "renderResponse", "(", "$", "exception", ")", ";", "}", "}", "return", "parent", "::", "render", "(", "$", "request", ",", "$", "exception", ")", ";", "}"], "docstring": "Render an exception into an HTTP response.\n\n@param  \\Illuminate\\Http\\Request $request\n@param  \\Exception               $exception\n@return \\Symfony\\Component\\HttpFoundation\\Response", "docstring_tokens": ["Render", "an", "exception", "into", "an", "HTTP", "response", "."], "sha": "4baadabc9087d73927cf13b65a253f9e7ddef15c", "url": "https://github.com/flugger/laravel-responder/blob/4baadabc9087d73927cf13b65a253f9e7ddef15c/src/Exceptions/Handler.php#L27-L38", "partition": "test"}
{"repo": "qcubed/composer", "path": "Installer.php", "func_name": "Installer.remove_dir", "original_string": "protected static function remove_dir($dst) {\n\t\tif (!$dst || !is_dir($dst)) return;\t// prevent deleting an entire disk by accidentally calling this with an empty string!\n\t\t$dir = opendir($dst);\n\n\t\twhile(false !== ( $file = readdir($dir)) ) {\n\t\t\tif (( $file != '.' ) && ( $file != '..' )) {\n\t\t\t\tif ( is_dir($dst . '/' . $file) ) {\n\t\t\t\t\tself::remove_dir($dst . '/' . $file);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tunlink($dst . '/' . $file);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tclosedir($dir);\n\t\trmdir($dst);\n\t}", "language": "php", "code": "protected static function remove_dir($dst) {\n\t\tif (!$dst || !is_dir($dst)) return;\t// prevent deleting an entire disk by accidentally calling this with an empty string!\n\t\t$dir = opendir($dst);\n\n\t\twhile(false !== ( $file = readdir($dir)) ) {\n\t\t\tif (( $file != '.' ) && ( $file != '..' )) {\n\t\t\t\tif ( is_dir($dst . '/' . $file) ) {\n\t\t\t\t\tself::remove_dir($dst . '/' . $file);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tunlink($dst . '/' . $file);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tclosedir($dir);\n\t\trmdir($dst);\n\t}", "code_tokens": ["protected", "static", "function", "remove_dir", "(", "$", "dst", ")", "{", "if", "(", "!", "$", "dst", "||", "!", "is_dir", "(", "$", "dst", ")", ")", "return", ";", "// prevent deleting an entire disk by accidentally calling this with an empty string!", "$", "dir", "=", "opendir", "(", "$", "dst", ")", ";", "while", "(", "false", "!==", "(", "$", "file", "=", "readdir", "(", "$", "dir", ")", ")", ")", "{", "if", "(", "(", "$", "file", "!=", "'.'", ")", "&&", "(", "$", "file", "!=", "'..'", ")", ")", "{", "if", "(", "is_dir", "(", "$", "dst", ".", "'/'", ".", "$", "file", ")", ")", "{", "self", "::", "remove_dir", "(", "$", "dst", ".", "'/'", ".", "$", "file", ")", ";", "}", "else", "{", "unlink", "(", "$", "dst", ".", "'/'", ".", "$", "file", ")", ";", "}", "}", "}", "closedir", "(", "$", "dir", ")", ";", "rmdir", "(", "$", "dst", ")", ";", "}"], "docstring": "Delete a directory and all of its contents.\n\n@param string $dst Directory to delete", "docstring_tokens": ["Delete", "a", "directory", "and", "all", "of", "its", "contents", "."], "sha": "0c6dfd90d3051d1b885702ab91f91fe4b5d7826f", "url": "https://github.com/qcubed/composer/blob/0c6dfd90d3051d1b885702ab91f91fe4b5d7826f/Installer.php#L271-L287", "partition": "test"}
{"repo": "akaunting/language", "path": "src/Middleware/SetLocale.php", "func_name": "SetLocale.setLocale", "original_string": "private function setLocale($locale)\n    {\n        // Check if is allowed and set default locale if not\n        if (!language()->allowed($locale)) {\n            $locale = config('app.locale');\n        }\n\n        // Set app language\n        \\App::setLocale($locale);\n\n        // Set carbon language\n        if (config('language.carbon')) {\n            // Carbon uses only language code\n            if (config('language.mode.code') == 'long') {\n                $locale = explode('-', $locale)[0];\n            }\n\n            \\Carbon\\Carbon::setLocale($locale);\n        }\n\n        // Set date language\n        if (config('language.date')) {\n            // Date uses only language code\n            if (config('language.mode.code') == 'long') {\n                $locale = explode('-', $locale)[0];\n            }\n\n            \\Date::setLocale($locale);\n        }\n    }", "language": "php", "code": "private function setLocale($locale)\n    {\n        // Check if is allowed and set default locale if not\n        if (!language()->allowed($locale)) {\n            $locale = config('app.locale');\n        }\n\n        // Set app language\n        \\App::setLocale($locale);\n\n        // Set carbon language\n        if (config('language.carbon')) {\n            // Carbon uses only language code\n            if (config('language.mode.code') == 'long') {\n                $locale = explode('-', $locale)[0];\n            }\n\n            \\Carbon\\Carbon::setLocale($locale);\n        }\n\n        // Set date language\n        if (config('language.date')) {\n            // Date uses only language code\n            if (config('language.mode.code') == 'long') {\n                $locale = explode('-', $locale)[0];\n            }\n\n            \\Date::setLocale($locale);\n        }\n    }", "code_tokens": ["private", "function", "setLocale", "(", "$", "locale", ")", "{", "// Check if is allowed and set default locale if not", "if", "(", "!", "language", "(", ")", "->", "allowed", "(", "$", "locale", ")", ")", "{", "$", "locale", "=", "config", "(", "'app.locale'", ")", ";", "}", "// Set app language", "\\", "App", "::", "setLocale", "(", "$", "locale", ")", ";", "// Set carbon language", "if", "(", "config", "(", "'language.carbon'", ")", ")", "{", "// Carbon uses only language code", "if", "(", "config", "(", "'language.mode.code'", ")", "==", "'long'", ")", "{", "$", "locale", "=", "explode", "(", "'-'", ",", "$", "locale", ")", "[", "0", "]", ";", "}", "\\", "Carbon", "\\", "Carbon", "::", "setLocale", "(", "$", "locale", ")", ";", "}", "// Set date language", "if", "(", "config", "(", "'language.date'", ")", ")", "{", "// Date uses only language code", "if", "(", "config", "(", "'language.mode.code'", ")", "==", "'long'", ")", "{", "$", "locale", "=", "explode", "(", "'-'", ",", "$", "locale", ")", "[", "0", "]", ";", "}", "\\", "Date", "::", "setLocale", "(", "$", "locale", ")", ";", "}", "}"], "docstring": "This function checks if language to set is an allowed lang of config.\n\n@param string $locale", "docstring_tokens": ["This", "function", "checks", "if", "language", "to", "set", "is", "an", "allowed", "lang", "of", "config", "."], "sha": "8f3e7aff116755701df568ffe5c9dbf20d627327", "url": "https://github.com/akaunting/language/blob/8f3e7aff116755701df568ffe5c9dbf20d627327/src/Middleware/SetLocale.php#L15-L44", "partition": "test"}
{"repo": "antaresproject/acl", "path": "src/Adapter/ControlsAdapter.php", "func_name": "ControlsAdapter.checked", "original_string": "protected function checked(array $control, array $displayable)\n    {\n        if (empty($displayable)) {\n            return ['checked' => 'checked'];\n        }\n        foreach ($displayable as $item) {\n            if ($control['name'] == $item['name']) {\n                return ['checked' => 'checked'];\n            }\n        }\n        return [];\n    }", "language": "php", "code": "protected function checked(array $control, array $displayable)\n    {\n        if (empty($displayable)) {\n            return ['checked' => 'checked'];\n        }\n        foreach ($displayable as $item) {\n            if ($control['name'] == $item['name']) {\n                return ['checked' => 'checked'];\n            }\n        }\n        return [];\n    }", "code_tokens": ["protected", "function", "checked", "(", "array", "$", "control", ",", "array", "$", "displayable", ")", "{", "if", "(", "empty", "(", "$", "displayable", ")", ")", "{", "return", "[", "'checked'", "=>", "'checked'", "]", ";", "}", "foreach", "(", "$", "displayable", "as", "$", "item", ")", "{", "if", "(", "$", "control", "[", "'name'", "]", "==", "$", "item", "[", "'name'", "]", ")", "{", "return", "[", "'checked'", "=>", "'checked'", "]", ";", "}", "}", "return", "[", "]", ";", "}"], "docstring": "verify whether checkbox should be checked\n\n@param array $control\n@param array $displayable\n@return string", "docstring_tokens": ["verify", "whether", "checkbox", "should", "be", "checked"], "sha": "00b77857fd77990083fd0f177f9425f2e7915828", "url": "https://github.com/antaresproject/acl/blob/00b77857fd77990083fd0f177f9425f2e7915828/src/Adapter/ControlsAdapter.php#L76-L87", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Query/FluentQuery.php", "func_name": "FluentQuery.paginate", "original_string": "public function paginate( $page, $per_page ) {\n\t\t$this->count           = $per_page;\n\t\t$this->offset          = $per_page * ( $page - 1 );\n\t\t$this->calc_found_rows = true;\n\n\t\treturn $this;\n\t}", "language": "php", "code": "public function paginate( $page, $per_page ) {\n\t\t$this->count           = $per_page;\n\t\t$this->offset          = $per_page * ( $page - 1 );\n\t\t$this->calc_found_rows = true;\n\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "paginate", "(", "$", "page", ",", "$", "per_page", ")", "{", "$", "this", "->", "count", "=", "$", "per_page", ";", "$", "this", "->", "offset", "=", "$", "per_page", "*", "(", "$", "page", "-", "1", ")", ";", "$", "this", "->", "calc_found_rows", "=", "true", ";", "return", "$", "this", ";", "}"], "docstring": "Paginate results.\n\n@since 2.0\n\n@param int $page\n@param int $per_page\n\n@return $this", "docstring_tokens": ["Paginate", "results", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Query/FluentQuery.php#L811-L817", "partition": "test"}
{"repo": "hassankhan/Sonic", "path": "src/Sonic/Routing/Router.php", "func_name": "Router.run", "original_string": "public function run()\n    {\n        // If no routes have been added, then throw an exception\n        try {\n            if (empty($this->routes)) {\n                throw new \\RuntimeException('No routes exist in the routing table. Add some');\n            }\n        }\n        catch (\\Exception $e) {\n            $this->error($e);\n            return FALSE;\n        }\n\n        // Try and get a matching route for the current URL\n        $route = $this->match(\n            $this->request->getPathInfo(),\n            $this->request->getMethod()\n        );\n\n        // Call not found handler if no match was found\n        if ($route === null) {\n            $this->not_found();\n            return FALSE;\n        }\n\n        // Set current route\n        $this->current_route = $route;\n\n        // Get parameters from request\n        $params = $this->parse_parameters($route);\n        // Try to execute callback for route, if it fails, catch the exception and generate a HTTP 500 error\n        try {\n            $this->current_http_status = \\Symfony\\Component\\HttpFoundation\\Response::HTTP_OK;\n\n            // Set response content\n            $this->response->setContent($route->execute($params));\n\n            // Send response\n            $this->response->send();\n            return TRUE;\n        }\n        catch (\\Exception $e) {\n            $this->error($e);\n            return FALSE;\n        }\n    }", "language": "php", "code": "public function run()\n    {\n        // If no routes have been added, then throw an exception\n        try {\n            if (empty($this->routes)) {\n                throw new \\RuntimeException('No routes exist in the routing table. Add some');\n            }\n        }\n        catch (\\Exception $e) {\n            $this->error($e);\n            return FALSE;\n        }\n\n        // Try and get a matching route for the current URL\n        $route = $this->match(\n            $this->request->getPathInfo(),\n            $this->request->getMethod()\n        );\n\n        // Call not found handler if no match was found\n        if ($route === null) {\n            $this->not_found();\n            return FALSE;\n        }\n\n        // Set current route\n        $this->current_route = $route;\n\n        // Get parameters from request\n        $params = $this->parse_parameters($route);\n        // Try to execute callback for route, if it fails, catch the exception and generate a HTTP 500 error\n        try {\n            $this->current_http_status = \\Symfony\\Component\\HttpFoundation\\Response::HTTP_OK;\n\n            // Set response content\n            $this->response->setContent($route->execute($params));\n\n            // Send response\n            $this->response->send();\n            return TRUE;\n        }\n        catch (\\Exception $e) {\n            $this->error($e);\n            return FALSE;\n        }\n    }", "code_tokens": ["public", "function", "run", "(", ")", "{", "// If no routes have been added, then throw an exception", "try", "{", "if", "(", "empty", "(", "$", "this", "->", "routes", ")", ")", "{", "throw", "new", "\\", "RuntimeException", "(", "'No routes exist in the routing table. Add some'", ")", ";", "}", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "$", "this", "->", "error", "(", "$", "e", ")", ";", "return", "FALSE", ";", "}", "// Try and get a matching route for the current URL", "$", "route", "=", "$", "this", "->", "match", "(", "$", "this", "->", "request", "->", "getPathInfo", "(", ")", ",", "$", "this", "->", "request", "->", "getMethod", "(", ")", ")", ";", "// Call not found handler if no match was found", "if", "(", "$", "route", "===", "null", ")", "{", "$", "this", "->", "not_found", "(", ")", ";", "return", "FALSE", ";", "}", "// Set current route", "$", "this", "->", "current_route", "=", "$", "route", ";", "// Get parameters from request", "$", "params", "=", "$", "this", "->", "parse_parameters", "(", "$", "route", ")", ";", "// Try to execute callback for route, if it fails, catch the exception and generate a HTTP 500 error", "try", "{", "$", "this", "->", "current_http_status", "=", "\\", "Symfony", "\\", "Component", "\\", "HttpFoundation", "\\", "Response", "::", "HTTP_OK", ";", "// Set response content", "$", "this", "->", "response", "->", "setContent", "(", "$", "route", "->", "execute", "(", "$", "params", ")", ")", ";", "// Send response", "$", "this", "->", "response", "->", "send", "(", ")", ";", "return", "TRUE", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "$", "this", "->", "error", "(", "$", "e", ")", ";", "return", "FALSE", ";", "}", "}"], "docstring": "Runs the router matching engine and then calls the matching route's\ncallback. otherwise execute the not found handler\n\n@return bool\n@throws \\RuntimeException If no routes exist in the routing table", "docstring_tokens": ["Runs", "the", "router", "matching", "engine", "and", "then", "calls", "the", "matching", "route", "s", "callback", ".", "otherwise", "execute", "the", "not", "found", "handler"], "sha": "8c842343f6bddc063bf6aa9de460d48bc113af64", "url": "https://github.com/hassankhan/Sonic/blob/8c842343f6bddc063bf6aa9de460d48bc113af64/src/Sonic/Routing/Router.php#L233-L278", "partition": "test"}
{"repo": "heiglandreas/Org_Heigl_Hyphenator", "path": "src/Hyphenator.php", "func_name": "Hyphenator.getDefaultHomePath", "original_string": "public static function getDefaultHomePath()\n    {\n        if (is_Dir(self::$defaultHomePath)) {\n            return self::$defaultHomePath;\n        }\n        if (defined('HYPHENATOR_HOME') && is_Dir(HYPHENATOR_HOME)) {\n            return realpath(HYPHENATOR_HOME);\n        }\n        if ($home = getenv('HYPHENATOR_HOME')) {\n            if (is_Dir($home)) {\n                return $home;\n            }\n        }\n\n        return __DIR__ . '/share';\n    }", "language": "php", "code": "public static function getDefaultHomePath()\n    {\n        if (is_Dir(self::$defaultHomePath)) {\n            return self::$defaultHomePath;\n        }\n        if (defined('HYPHENATOR_HOME') && is_Dir(HYPHENATOR_HOME)) {\n            return realpath(HYPHENATOR_HOME);\n        }\n        if ($home = getenv('HYPHENATOR_HOME')) {\n            if (is_Dir($home)) {\n                return $home;\n            }\n        }\n\n        return __DIR__ . '/share';\n    }", "code_tokens": ["public", "static", "function", "getDefaultHomePath", "(", ")", "{", "if", "(", "is_Dir", "(", "self", "::", "$", "defaultHomePath", ")", ")", "{", "return", "self", "::", "$", "defaultHomePath", ";", "}", "if", "(", "defined", "(", "'HYPHENATOR_HOME'", ")", "&&", "is_Dir", "(", "HYPHENATOR_HOME", ")", ")", "{", "return", "realpath", "(", "HYPHENATOR_HOME", ")", ";", "}", "if", "(", "$", "home", "=", "getenv", "(", "'HYPHENATOR_HOME'", ")", ")", "{", "if", "(", "is_Dir", "(", "$", "home", ")", ")", "{", "return", "$", "home", ";", "}", "}", "return", "__DIR__", ".", "'/share'", ";", "}"], "docstring": "Get the default Home-Path\n\n@return string", "docstring_tokens": ["Get", "the", "default", "Home", "-", "Path"], "sha": "24f49328d3f89c6ac803c83f1217c8cf8548118b", "url": "https://github.com/heiglandreas/Org_Heigl_Hyphenator/blob/24f49328d3f89c6ac803c83f1217c8cf8548118b/src/Hyphenator.php#L454-L469", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Services/Directions/DirectionsRequest.php", "func_name": "DirectionsRequest.setUnitSystem", "original_string": "public function setUnitSystem($unitSystem = null)\n    {\n        if (!in_array($unitSystem, UnitSystem::getUnitSystems()) && ($unitSystem !== null)) {\n            throw DirectionsException::invalidDirectionsRequestUnitSystem();\n        }\n\n        $this->unitSystem = $unitSystem;\n    }", "language": "php", "code": "public function setUnitSystem($unitSystem = null)\n    {\n        if (!in_array($unitSystem, UnitSystem::getUnitSystems()) && ($unitSystem !== null)) {\n            throw DirectionsException::invalidDirectionsRequestUnitSystem();\n        }\n\n        $this->unitSystem = $unitSystem;\n    }", "code_tokens": ["public", "function", "setUnitSystem", "(", "$", "unitSystem", "=", "null", ")", "{", "if", "(", "!", "in_array", "(", "$", "unitSystem", ",", "UnitSystem", "::", "getUnitSystems", "(", ")", ")", "&&", "(", "$", "unitSystem", "!==", "null", ")", ")", "{", "throw", "DirectionsException", "::", "invalidDirectionsRequestUnitSystem", "(", ")", ";", "}", "$", "this", "->", "unitSystem", "=", "$", "unitSystem", ";", "}"], "docstring": "Sets  the directions request unit system.\n\n@param string $unitSystem The directions request unit system.\n\n@throws \\Ivory\\GoogleMap\\Exception\\DirectionsException If the unit system is not valid.", "docstring_tokens": ["Sets", "the", "directions", "request", "unit", "system", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Services/Directions/DirectionsRequest.php#L526-L533", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Object/MetaObject.php", "func_name": "MetaObject.allowAccess", "original_string": "public function allowAccess($access = null)\n    {\n        if (CLI) {\n            return OPENBIZ_ALLOW;\n        }\n        if (!$access) {\n            $access = $this->access;\n        }\n        if ($access) {\n            return Openbizx::$app->allowUserAccess($access);\n        }\n        return OPENBIZ_ALLOW;\n    }", "language": "php", "code": "public function allowAccess($access = null)\n    {\n        if (CLI) {\n            return OPENBIZ_ALLOW;\n        }\n        if (!$access) {\n            $access = $this->access;\n        }\n        if ($access) {\n            return Openbizx::$app->allowUserAccess($access);\n        }\n        return OPENBIZ_ALLOW;\n    }", "code_tokens": ["public", "function", "allowAccess", "(", "$", "access", "=", "null", ")", "{", "if", "(", "CLI", ")", "{", "return", "OPENBIZ_ALLOW", ";", "}", "if", "(", "!", "$", "access", ")", "{", "$", "access", "=", "$", "this", "->", "access", ";", "}", "if", "(", "$", "access", ")", "{", "return", "Openbizx", "::", "$", "app", "->", "allowUserAccess", "(", "$", "access", ")", ";", "}", "return", "OPENBIZ_ALLOW", ";", "}"], "docstring": "Check is allow access?\n\n@global BizSystem $g_BizSystem\n@param <type> $access\n@return <type>", "docstring_tokens": ["Check", "is", "allow", "access?"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Object/MetaObject.php#L160-L172", "partition": "test"}
{"repo": "UWEnrollmentManagement/Group", "path": "src/Group.php", "func_name": "Group.parseSearch", "original_string": "protected function parseSearch($data)\n    {\n        $html = HtmlDomParser::str_get_html($data);\n        $groups = array();\n        foreach ($html->find('li.groupreference') as $e) {\n            $item = array();\n            $item['regid'] =  $e->find('span.regid', 0)->innertext;\n            $item['title'] =  $e->find('span.title', 0)->innertext;\n            $item['description'] = $e->find('span.description', 0)->innertext;\n            array_push($groups, $item);\n        }\n        return $groups;\n    }", "language": "php", "code": "protected function parseSearch($data)\n    {\n        $html = HtmlDomParser::str_get_html($data);\n        $groups = array();\n        foreach ($html->find('li.groupreference') as $e) {\n            $item = array();\n            $item['regid'] =  $e->find('span.regid', 0)->innertext;\n            $item['title'] =  $e->find('span.title', 0)->innertext;\n            $item['description'] = $e->find('span.description', 0)->innertext;\n            array_push($groups, $item);\n        }\n        return $groups;\n    }", "code_tokens": ["protected", "function", "parseSearch", "(", "$", "data", ")", "{", "$", "html", "=", "HtmlDomParser", "::", "str_get_html", "(", "$", "data", ")", ";", "$", "groups", "=", "array", "(", ")", ";", "foreach", "(", "$", "html", "->", "find", "(", "'li.groupreference'", ")", "as", "$", "e", ")", "{", "$", "item", "=", "array", "(", ")", ";", "$", "item", "[", "'regid'", "]", "=", "$", "e", "->", "find", "(", "'span.regid'", ",", "0", ")", "->", "innertext", ";", "$", "item", "[", "'title'", "]", "=", "$", "e", "->", "find", "(", "'span.title'", ",", "0", ")", "->", "innertext", ";", "$", "item", "[", "'description'", "]", "=", "$", "e", "->", "find", "(", "'span.description'", ",", "0", ")", "->", "innertext", ";", "array_push", "(", "$", "groups", ",", "$", "item", ")", ";", "}", "return", "$", "groups", ";", "}"], "docstring": "Parses out group information from a search.\n\n@param string $data\n@return array group information", "docstring_tokens": ["Parses", "out", "group", "information", "from", "a", "search", "."], "sha": "a6274e46ef230a487c7a5810eb506b09c6c3baf1", "url": "https://github.com/UWEnrollmentManagement/Group/blob/a6274e46ef230a487c7a5810eb506b09c6c3baf1/src/Group.php#L893-L905", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Web/Sessions/Session.php", "func_name": "Session.removeAllFlashes", "original_string": "public function removeAllFlashes()\n    {\n        $counters = $this->get($this->flashParam, []);\n        foreach (array_keys($counters) as $key) {\n            unset($this->data[$key]);\n        }\n        unset($this->data[$this->flashParam]);\n    }", "language": "php", "code": "public function removeAllFlashes()\n    {\n        $counters = $this->get($this->flashParam, []);\n        foreach (array_keys($counters) as $key) {\n            unset($this->data[$key]);\n        }\n        unset($this->data[$this->flashParam]);\n    }", "code_tokens": ["public", "function", "removeAllFlashes", "(", ")", "{", "$", "counters", "=", "$", "this", "->", "get", "(", "$", "this", "->", "flashParam", ",", "[", "]", ")", ";", "foreach", "(", "array_keys", "(", "$", "counters", ")", "as", "$", "key", ")", "{", "unset", "(", "$", "this", "->", "data", "[", "$", "key", "]", ")", ";", "}", "unset", "(", "$", "this", "->", "data", "[", "$", "this", "->", "flashParam", "]", ")", ";", "}"], "docstring": "Removes all flash messages.\nNote that flash messages and normal session variables share the same name space.\nIf you have a normal session variable using the same name, it will be removed\nby this method.\n@see getFlash()\n@see setFlash()\n@see addFlash()\n@see removeFlash()", "docstring_tokens": ["Removes", "all", "flash", "messages", ".", "Note", "that", "flash", "messages", "and", "normal", "session", "variables", "share", "the", "same", "name", "space", ".", "If", "you", "have", "a", "normal", "session", "variable", "using", "the", "same", "name", "it", "will", "be", "removed", "by", "this", "method", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Web/Sessions/Session.php#L816-L823", "partition": "test"}
{"repo": "m1/Vars", "path": "src/Vars.php", "func_name": "Vars.mergeGlobals", "original_string": "private function mergeGlobals($content, $options)\n    {\n        if (array_key_exists('_globals', $content)) {\n            $this->globals = $content['_globals'];\n\n            if ($options['merge_globals']) {\n                $content = array_replace_recursive($content, $content['_globals']);\n            }\n\n            unset($content['_globals']);\n        }\n\n        return $content;\n    }", "language": "php", "code": "private function mergeGlobals($content, $options)\n    {\n        if (array_key_exists('_globals', $content)) {\n            $this->globals = $content['_globals'];\n\n            if ($options['merge_globals']) {\n                $content = array_replace_recursive($content, $content['_globals']);\n            }\n\n            unset($content['_globals']);\n        }\n\n        return $content;\n    }", "code_tokens": ["private", "function", "mergeGlobals", "(", "$", "content", ",", "$", "options", ")", "{", "if", "(", "array_key_exists", "(", "'_globals'", ",", "$", "content", ")", ")", "{", "$", "this", "->", "globals", "=", "$", "content", "[", "'_globals'", "]", ";", "if", "(", "$", "options", "[", "'merge_globals'", "]", ")", "{", "$", "content", "=", "array_replace_recursive", "(", "$", "content", ",", "$", "content", "[", "'_globals'", "]", ")", ";", "}", "unset", "(", "$", "content", "[", "'_globals'", "]", ")", ";", "}", "return", "$", "content", ";", "}"], "docstring": "Gets the _globals from the file and merges them if merge_globals is true\n\n@param array $content The unparsed content\n@param array $options  The options being used for Vars\n\n@return array $content The parsed content", "docstring_tokens": ["Gets", "the", "_globals", "from", "the", "file", "and", "merges", "them", "if", "merge_globals", "is", "true"], "sha": "e64beb6d67ad30c0c86ec1e77022d6803ac11eda", "url": "https://github.com/m1/Vars/blob/e64beb6d67ad30c0c86ec1e77022d6803ac11eda/src/Vars.php#L260-L273", "partition": "test"}
{"repo": "samdark/sitemap", "path": "Sitemap.php", "func_name": "Sitemap.getSitemapUrls", "original_string": "public function getSitemapUrls($baseUrl)\n    {\n        $urls = array();\n        foreach ($this->writtenFilePaths as $file) {\n            $urls[] = $baseUrl . pathinfo($file, PATHINFO_BASENAME);\n        }\n        return $urls;\n    }", "language": "php", "code": "public function getSitemapUrls($baseUrl)\n    {\n        $urls = array();\n        foreach ($this->writtenFilePaths as $file) {\n            $urls[] = $baseUrl . pathinfo($file, PATHINFO_BASENAME);\n        }\n        return $urls;\n    }", "code_tokens": ["public", "function", "getSitemapUrls", "(", "$", "baseUrl", ")", "{", "$", "urls", "=", "array", "(", ")", ";", "foreach", "(", "$", "this", "->", "writtenFilePaths", "as", "$", "file", ")", "{", "$", "urls", "[", "]", "=", "$", "baseUrl", ".", "pathinfo", "(", "$", "file", ",", "PATHINFO_BASENAME", ")", ";", "}", "return", "$", "urls", ";", "}"], "docstring": "Returns an array of URLs written\n\n@param string $baseUrl base URL of all the sitemaps written\n@return array URLs of sitemaps written", "docstring_tokens": ["Returns", "an", "array", "of", "URLs", "written"], "sha": "6649a5769397e46a83b96dad52ebbadd5ecbef39", "url": "https://github.com/samdark/sitemap/blob/6649a5769397e46a83b96dad52ebbadd5ecbef39/Sitemap.php#L426-L433", "partition": "test"}
{"repo": "graste/environaut", "path": "src/Environaut/Config/Reader/Dom/DomElement.php", "func_name": "DomElement.getAttributeValue", "original_string": "public function getAttributeValue($name, $default_value = null)\n    {\n        $value = parent::getAttribute($name);\n\n        if ($value === '') {\n            $value = $default_value;\n        }\n\n        return $value;\n    }", "language": "php", "code": "public function getAttributeValue($name, $default_value = null)\n    {\n        $value = parent::getAttribute($name);\n\n        if ($value === '') {\n            $value = $default_value;\n        }\n\n        return $value;\n    }", "code_tokens": ["public", "function", "getAttributeValue", "(", "$", "name", ",", "$", "default_value", "=", "null", ")", "{", "$", "value", "=", "parent", "::", "getAttribute", "(", "$", "name", ")", ";", "if", "(", "$", "value", "===", "''", ")", "{", "$", "value", "=", "$", "default_value", ";", "}", "return", "$", "value", ";", "}"], "docstring": "Returns the value of the given attribute or returns the given\ndefault value if the attribute is missing.\n\n@param string $name name of attribute\n@param mixed $default_value value to return if attribute is missing\n\n@return mixed string value of attribute or default_value if attribute is not found or empty", "docstring_tokens": ["Returns", "the", "value", "of", "the", "given", "attribute", "or", "returns", "the", "given", "default", "value", "if", "the", "attribute", "is", "missing", "."], "sha": "e40b498c31214fdbdd529f334f6ce5e6138bb5fb", "url": "https://github.com/graste/environaut/blob/e40b498c31214fdbdd529f334f6ce5e6138bb5fb/src/Environaut/Config/Reader/Dom/DomElement.php#L84-L93", "partition": "test"}
{"repo": "BenjaminMedia/wp-cxense", "path": "src/Services/DocumentSearch.php", "func_name": "DocumentSearch.set_page", "original_string": "private function set_page($intPage = 1)\n    {\n        if (!isset($this->arrPayload['count'])) {\n            throw new DocumentSearchMissingCount('\\DocumentSearch::setPerPage() is required before \\DocumentSearch::setPage()');\n        }\n\n        // get the page\n        if (isset($this->arrSearch['page'])) {\n            $intPage = $this->arrSearch['page'];\n        }\n\n        // set the starting point\n        $this->arrPayload['start'] = $this->arrPayload['count'] * ($intPage - 1);\n\n        return $this;\n    }", "language": "php", "code": "private function set_page($intPage = 1)\n    {\n        if (!isset($this->arrPayload['count'])) {\n            throw new DocumentSearchMissingCount('\\DocumentSearch::setPerPage() is required before \\DocumentSearch::setPage()');\n        }\n\n        // get the page\n        if (isset($this->arrSearch['page'])) {\n            $intPage = $this->arrSearch['page'];\n        }\n\n        // set the starting point\n        $this->arrPayload['start'] = $this->arrPayload['count'] * ($intPage - 1);\n\n        return $this;\n    }", "code_tokens": ["private", "function", "set_page", "(", "$", "intPage", "=", "1", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "arrPayload", "[", "'count'", "]", ")", ")", "{", "throw", "new", "DocumentSearchMissingCount", "(", "'\\DocumentSearch::setPerPage() is required before \\DocumentSearch::setPage()'", ")", ";", "}", "// get the page", "if", "(", "isset", "(", "$", "this", "->", "arrSearch", "[", "'page'", "]", ")", ")", "{", "$", "intPage", "=", "$", "this", "->", "arrSearch", "[", "'page'", "]", ";", "}", "// set the starting point", "$", "this", "->", "arrPayload", "[", "'start'", "]", "=", "$", "this", "->", "arrPayload", "[", "'count'", "]", "*", "(", "$", "intPage", "-", "1", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Set page number for calculating the correct starting offset\n\n@param integer $intPage Page number\n@return $this\n@throws DocumentSearchMissingCount", "docstring_tokens": ["Set", "page", "number", "for", "calculating", "the", "correct", "starting", "offset"], "sha": "eb9b7afee06b17be226c442677bbfee67c904fe2", "url": "https://github.com/BenjaminMedia/wp-cxense/blob/eb9b7afee06b17be226c442677bbfee67c904fe2/src/Services/DocumentSearch.php#L348-L363", "partition": "test"}
{"repo": "TypistTech/wp-better-settings", "path": "src/Builder.php", "func_name": "Builder.email", "original_string": "public function email(\n        string $id,\n        string $title,\n        array $additionalArguments = null\n    ): Field {\n        $formControl = $this->builder->email($id)\n                                     ->addClass('regular-text')\n                                     ->value(\n                                         $this->optionStore->getString($id)\n                                     );\n\n        $additionalArguments = array_merge(\n            [\n                'sanitize_callback' => 'sanitize_email',\n            ],\n            (array) $additionalArguments\n        );\n\n        return new Field(\n            $id,\n            $title,\n            $formControl,\n            (array) $additionalArguments\n        );\n    }", "language": "php", "code": "public function email(\n        string $id,\n        string $title,\n        array $additionalArguments = null\n    ): Field {\n        $formControl = $this->builder->email($id)\n                                     ->addClass('regular-text')\n                                     ->value(\n                                         $this->optionStore->getString($id)\n                                     );\n\n        $additionalArguments = array_merge(\n            [\n                'sanitize_callback' => 'sanitize_email',\n            ],\n            (array) $additionalArguments\n        );\n\n        return new Field(\n            $id,\n            $title,\n            $formControl,\n            (array) $additionalArguments\n        );\n    }", "code_tokens": ["public", "function", "email", "(", "string", "$", "id", ",", "string", "$", "title", ",", "array", "$", "additionalArguments", "=", "null", ")", ":", "Field", "{", "$", "formControl", "=", "$", "this", "->", "builder", "->", "email", "(", "$", "id", ")", "->", "addClass", "(", "'regular-text'", ")", "->", "value", "(", "$", "this", "->", "optionStore", "->", "getString", "(", "$", "id", ")", ")", ";", "$", "additionalArguments", "=", "array_merge", "(", "[", "'sanitize_callback'", "=>", "'sanitize_email'", ",", "]", ",", "(", "array", ")", "$", "additionalArguments", ")", ";", "return", "new", "Field", "(", "$", "id", ",", "$", "title", ",", "$", "formControl", ",", "(", "array", ")", "$", "additionalArguments", ")", ";", "}"], "docstring": "Build an email field.\n\n@param string $id                  String for use in the 'id' attribute of tags.\n@param string $title               Title of the field.\n@param array  $additionalArguments Optional. Additional arguments that are passed to `register_setting` and\n`add_settings_field`.\n\n@return Field", "docstring_tokens": ["Build", "an", "email", "field", "."], "sha": "30fd7f962f8ab029ae6d6d53f48f8d4826a87f20", "url": "https://github.com/TypistTech/wp-better-settings/blob/30fd7f962f8ab029ae6d6d53f48f8d4826a87f20/src/Builder.php#L98-L122", "partition": "test"}
{"repo": "oscarotero/simple-crud", "path": "src/Row.php", "func_name": "Row.edit", "original_string": "public function edit(array $values): self\n    {\n        foreach ($values as $name => $value) {\n            $this->__set($name, $value);\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function edit(array $values): self\n    {\n        foreach ($values as $name => $value) {\n            $this->__set($name, $value);\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "edit", "(", "array", "$", "values", ")", ":", "self", "{", "foreach", "(", "$", "values", "as", "$", "name", "=>", "$", "value", ")", "{", "$", "this", "->", "__set", "(", "$", "name", ",", "$", "value", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Edit the values using an array", "docstring_tokens": ["Edit", "the", "values", "using", "an", "array"], "sha": "4fb1d67b4da58f9006f4b4546a51f0c51c994b8f", "url": "https://github.com/oscarotero/simple-crud/blob/4fb1d67b4da58f9006f4b4546a51f0c51c994b8f/src/Row.php#L200-L207", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Model.php", "func_name": "Model.get_relation", "original_string": "public function get_relation( $attribute ) {\n\n\t\tif ( ! $this->has_relation( $attribute ) ) {\n\t\t\tthrow new \\OutOfBoundsException(\n\t\t\t\tsprintf( \"Requested relation '%s' does not exist for '%s'.\", $attribute, get_class( $this ) )\n\t\t\t);\n\t\t}\n\n\t\t$method   = \"_{$attribute}_relation\";\n\t\t$relation = $this->{$method}();\n\n\t\tif ( ! $relation instanceof Relation ) {\n\t\t\tthrow new \\UnexpectedValueException( 'Relation methods must return an IronBound\\DB\\Relations\\Relation object.' );\n\t\t}\n\n\t\treturn $relation;\n\t}", "language": "php", "code": "public function get_relation( $attribute ) {\n\n\t\tif ( ! $this->has_relation( $attribute ) ) {\n\t\t\tthrow new \\OutOfBoundsException(\n\t\t\t\tsprintf( \"Requested relation '%s' does not exist for '%s'.\", $attribute, get_class( $this ) )\n\t\t\t);\n\t\t}\n\n\t\t$method   = \"_{$attribute}_relation\";\n\t\t$relation = $this->{$method}();\n\n\t\tif ( ! $relation instanceof Relation ) {\n\t\t\tthrow new \\UnexpectedValueException( 'Relation methods must return an IronBound\\DB\\Relations\\Relation object.' );\n\t\t}\n\n\t\treturn $relation;\n\t}", "code_tokens": ["public", "function", "get_relation", "(", "$", "attribute", ")", "{", "if", "(", "!", "$", "this", "->", "has_relation", "(", "$", "attribute", ")", ")", "{", "throw", "new", "\\", "OutOfBoundsException", "(", "sprintf", "(", "\"Requested relation '%s' does not exist for '%s'.\"", ",", "$", "attribute", ",", "get_class", "(", "$", "this", ")", ")", ")", ";", "}", "$", "method", "=", "\"_{$attribute}_relation\"", ";", "$", "relation", "=", "$", "this", "->", "{", "$", "method", "}", "(", ")", ";", "if", "(", "!", "$", "relation", "instanceof", "Relation", ")", "{", "throw", "new", "\\", "UnexpectedValueException", "(", "'Relation methods must return an IronBound\\DB\\Relations\\Relation object.'", ")", ";", "}", "return", "$", "relation", ";", "}"], "docstring": "Get a relation's controller object.\n\n@since 2.0\n\n@param string $attribute Relation name.\n\n@return Relation\n\n@throws \\OutOfBoundsException If no relation exists by the given name.\n@throws \\UnexpectedValueException If relation method returns an invalid value.", "docstring_tokens": ["Get", "a", "relation", "s", "controller", "object", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Model.php#L648-L664", "partition": "test"}
{"repo": "the-control-group/voyager", "path": "src/Policies/PostPolicy.php", "func_name": "PostPolicy.read", "original_string": "public function read(User $user, $model)\n    {\n        // Does this post belong to the current user?\n        $current = $user->id === $model->author_id;\n\n        return $current || $this->checkPermission($user, $model, 'read');\n    }", "language": "php", "code": "public function read(User $user, $model)\n    {\n        // Does this post belong to the current user?\n        $current = $user->id === $model->author_id;\n\n        return $current || $this->checkPermission($user, $model, 'read');\n    }", "code_tokens": ["public", "function", "read", "(", "User", "$", "user", ",", "$", "model", ")", "{", "// Does this post belong to the current user?", "$", "current", "=", "$", "user", "->", "id", "===", "$", "model", "->", "author_id", ";", "return", "$", "current", "||", "$", "this", "->", "checkPermission", "(", "$", "user", ",", "$", "model", ",", "'read'", ")", ";", "}"], "docstring": "Determine if the given model can be viewed by the user.\n\n@param \\TCG\\Voyager\\Contracts\\User $user\n@param  $model\n\n@return bool", "docstring_tokens": ["Determine", "if", "the", "given", "model", "can", "be", "viewed", "by", "the", "user", "."], "sha": "5315b63a5d17c7de877019ac53bec5bd7fd8e12c", "url": "https://github.com/the-control-group/voyager/blob/5315b63a5d17c7de877019ac53bec5bd7fd8e12c/src/Policies/PostPolicy.php#L17-L23", "partition": "test"}
{"repo": "nails/module-admin", "path": "src/Api/Controller/Note.php", "func_name": "Note.formatObject", "original_string": "protected function formatObject($oObj)\n    {\n        return (object) [\n            'id'      => $oObj->id,\n            'message' => auto_typography($oObj->message),\n            'date'    => toUserDatetime($oObj->created),\n            'user'    => (object) [\n                'id'         => $oObj->created_by ? (int) $oObj->created_by->id : null,\n                'first_name' => $oObj->created_by ? $oObj->created_by->first_name : null,\n                'last_name'  => $oObj->created_by ? $oObj->created_by->last_name : null,\n            ],\n        ];\n    }", "language": "php", "code": "protected function formatObject($oObj)\n    {\n        return (object) [\n            'id'      => $oObj->id,\n            'message' => auto_typography($oObj->message),\n            'date'    => toUserDatetime($oObj->created),\n            'user'    => (object) [\n                'id'         => $oObj->created_by ? (int) $oObj->created_by->id : null,\n                'first_name' => $oObj->created_by ? $oObj->created_by->first_name : null,\n                'last_name'  => $oObj->created_by ? $oObj->created_by->last_name : null,\n            ],\n        ];\n    }", "code_tokens": ["protected", "function", "formatObject", "(", "$", "oObj", ")", "{", "return", "(", "object", ")", "[", "'id'", "=>", "$", "oObj", "->", "id", ",", "'message'", "=>", "auto_typography", "(", "$", "oObj", "->", "message", ")", ",", "'date'", "=>", "toUserDatetime", "(", "$", "oObj", "->", "created", ")", ",", "'user'", "=>", "(", "object", ")", "[", "'id'", "=>", "$", "oObj", "->", "created_by", "?", "(", "int", ")", "$", "oObj", "->", "created_by", "->", "id", ":", "null", ",", "'first_name'", "=>", "$", "oObj", "->", "created_by", "?", "$", "oObj", "->", "created_by", "->", "first_name", ":", "null", ",", "'last_name'", "=>", "$", "oObj", "->", "created_by", "?", "$", "oObj", "->", "created_by", "->", "last_name", ":", "null", ",", "]", ",", "]", ";", "}"], "docstring": "Formats the response object\n\n@param \\stdClass $oObj The object to format\n\n@return \\stdClass", "docstring_tokens": ["Formats", "the", "response", "object"], "sha": "2ed8a91b5f05c86fcde21feb621cfafe391ee0c3", "url": "https://github.com/nails/module-admin/blob/2ed8a91b5f05c86fcde21feb621cfafe391ee0c3/src/Api/Controller/Note.php#L136-L148", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/Core/HttpClients/SyncRestHandler.php", "func_name": "SyncRestHandler.parseURL", "original_string": "private function parseURL($url){\n       $query_str = parse_url($url, PHP_URL_QUERY);\n       parse_str($query_str, $parameters);\n       return $parameters;\n    }", "language": "php", "code": "private function parseURL($url){\n       $query_str = parse_url($url, PHP_URL_QUERY);\n       parse_str($query_str, $parameters);\n       return $parameters;\n    }", "code_tokens": ["private", "function", "parseURL", "(", "$", "url", ")", "{", "$", "query_str", "=", "parse_url", "(", "$", "url", ",", "PHP_URL_QUERY", ")", ";", "parse_str", "(", "$", "query_str", ",", "$", "parameters", ")", ";", "return", "$", "parameters", ";", "}"], "docstring": "Get the query parameters from the complete URL, used for sign signature for OAuth 1.\n\n@param String  $url  The $url for the request\n@return Array  a list of query paramters.", "docstring_tokens": ["Get", "the", "query", "parameters", "from", "the", "complete", "URL", "used", "for", "sign", "signature", "for", "OAuth", "1", "."], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/Core/HttpClients/SyncRestHandler.php#L400-L404", "partition": "test"}
{"repo": "helionogueir/shell", "path": "core/Environment.class.php", "func_name": "Environment.onShell", "original_string": "public function onShell(): bool {\n    $check = true;\n    if (PHP_SAPI != Environment::SERVER_CLI) {\n      $check = false;\n    }\n    return $check;\n  }", "language": "php", "code": "public function onShell(): bool {\n    $check = true;\n    if (PHP_SAPI != Environment::SERVER_CLI) {\n      $check = false;\n    }\n    return $check;\n  }", "code_tokens": ["public", "function", "onShell", "(", ")", ":", "bool", "{", "$", "check", "=", "true", ";", "if", "(", "PHP_SAPI", "!=", "Environment", "::", "SERVER_CLI", ")", "{", "$", "check", "=", "false", ";", "}", "return", "$", "check", ";", "}"], "docstring": "- Check script execute on shell\n@return bool Case yes return true, or false case other", "docstring_tokens": ["-", "Check", "script", "execute", "on", "shell"], "sha": "208d38d0d1ba046aedb7ca6608c66f8f4d2994b2", "url": "https://github.com/helionogueir/shell/blob/208d38d0d1ba046aedb7ca6608c66f8f4d2994b2/core/Environment.class.php#L18-L24", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-table/src/Table/Internal/MimeReaderWriter.php", "func_name": "MimeReaderWriter.decodeMimeMultipart", "original_string": "public function decodeMimeMultipart($mimeBody)\n    {\n        // Find boundary\n        $boundaryRegex = '~boundary=(changesetresponse_.*)~';\n        preg_match($boundaryRegex, $mimeBody, $matches);\n\n        $boundary = trim($matches[1]);\n\n        // Split the requests\n        $requests = explode('--' . $boundary, $mimeBody);\n\n        // Get the body of each request\n        $result = array();\n\n        // The first and last element are not request\n        for ($i = 1; $i < count($requests) - 1; $i++) {\n            // Split the request header and body\n            preg_match(\"/^.*?\\r?\\n\\r?\\n(.*)/s\", $requests[$i], $matches);\n            $result[] = $matches[1];\n        }\n\n        return $result;\n    }", "language": "php", "code": "public function decodeMimeMultipart($mimeBody)\n    {\n        // Find boundary\n        $boundaryRegex = '~boundary=(changesetresponse_.*)~';\n        preg_match($boundaryRegex, $mimeBody, $matches);\n\n        $boundary = trim($matches[1]);\n\n        // Split the requests\n        $requests = explode('--' . $boundary, $mimeBody);\n\n        // Get the body of each request\n        $result = array();\n\n        // The first and last element are not request\n        for ($i = 1; $i < count($requests) - 1; $i++) {\n            // Split the request header and body\n            preg_match(\"/^.*?\\r?\\n\\r?\\n(.*)/s\", $requests[$i], $matches);\n            $result[] = $matches[1];\n        }\n\n        return $result;\n    }", "code_tokens": ["public", "function", "decodeMimeMultipart", "(", "$", "mimeBody", ")", "{", "// Find boundary", "$", "boundaryRegex", "=", "'~boundary=(changesetresponse_.*)~'", ";", "preg_match", "(", "$", "boundaryRegex", ",", "$", "mimeBody", ",", "$", "matches", ")", ";", "$", "boundary", "=", "trim", "(", "$", "matches", "[", "1", "]", ")", ";", "// Split the requests", "$", "requests", "=", "explode", "(", "'--'", ".", "$", "boundary", ",", "$", "mimeBody", ")", ";", "// Get the body of each request", "$", "result", "=", "array", "(", ")", ";", "// The first and last element are not request", "for", "(", "$", "i", "=", "1", ";", "$", "i", "<", "count", "(", "$", "requests", ")", "-", "1", ";", "$", "i", "++", ")", "{", "// Split the request header and body", "preg_match", "(", "\"/^.*?\\r?\\n\\r?\\n(.*)/s\"", ",", "$", "requests", "[", "$", "i", "]", ",", "$", "matches", ")", ";", "$", "result", "[", "]", "=", "$", "matches", "[", "1", "]", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Parses given mime HTTP response body into array. Each array element\nrepresents a change set result.\n\n@param string $mimeBody The raw MIME body result.\n\n@return array", "docstring_tokens": ["Parses", "given", "mime", "HTTP", "response", "body", "into", "array", ".", "Each", "array", "element", "represents", "a", "change", "set", "result", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-table/src/Table/Internal/MimeReaderWriter.php#L105-L127", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Routes/RouterAbstract.php", "func_name": "RouterAbstract.createControllerInstance", "original_string": "protected function createControllerInstance($controllerName, $actionId = null, $config = [])\n    {\n        if (!isset($controllerName)) {\n            return [null, $actionId];\n        } elseif ($controllerName instanceof ControllerInterface) {\n            $controller = $controllerName;\n            if (!isset($actionId) || !$controller->hasAction($actionId)) {\n                $actionId = $controller->defaultAction;\n            }\n            return [$controller, $actionId];\n        }\n        $controller = null;\n        foreach ($this->controllerNamespaces as $namespace) {\n            $controllerNameFull = $namespace . '\\\\' . $controllerName;\n            if (!class_exists($controllerNameFull)) {\n                continue;\n            }\n            try {\n                /** @var ControllerInterface $controller */\n                $config = Reaction\\Helpers\\ArrayHelper::merge($config, ['class' => $controllerNameFull]);\n                $controller = Reaction::create($config);\n                if (!isset($actionId) || !$controller->hasAction($actionId)) {\n                    $actionId = $controller->defaultAction;\n                }\n                break;\n            } catch (InvalidConfigException $exception) {\n                $controller = null;\n                continue;\n            }\n        }\n        return [$controller, $actionId];\n    }", "language": "php", "code": "protected function createControllerInstance($controllerName, $actionId = null, $config = [])\n    {\n        if (!isset($controllerName)) {\n            return [null, $actionId];\n        } elseif ($controllerName instanceof ControllerInterface) {\n            $controller = $controllerName;\n            if (!isset($actionId) || !$controller->hasAction($actionId)) {\n                $actionId = $controller->defaultAction;\n            }\n            return [$controller, $actionId];\n        }\n        $controller = null;\n        foreach ($this->controllerNamespaces as $namespace) {\n            $controllerNameFull = $namespace . '\\\\' . $controllerName;\n            if (!class_exists($controllerNameFull)) {\n                continue;\n            }\n            try {\n                /** @var ControllerInterface $controller */\n                $config = Reaction\\Helpers\\ArrayHelper::merge($config, ['class' => $controllerNameFull]);\n                $controller = Reaction::create($config);\n                if (!isset($actionId) || !$controller->hasAction($actionId)) {\n                    $actionId = $controller->defaultAction;\n                }\n                break;\n            } catch (InvalidConfigException $exception) {\n                $controller = null;\n                continue;\n            }\n        }\n        return [$controller, $actionId];\n    }", "code_tokens": ["protected", "function", "createControllerInstance", "(", "$", "controllerName", ",", "$", "actionId", "=", "null", ",", "$", "config", "=", "[", "]", ")", "{", "if", "(", "!", "isset", "(", "$", "controllerName", ")", ")", "{", "return", "[", "null", ",", "$", "actionId", "]", ";", "}", "elseif", "(", "$", "controllerName", "instanceof", "ControllerInterface", ")", "{", "$", "controller", "=", "$", "controllerName", ";", "if", "(", "!", "isset", "(", "$", "actionId", ")", "||", "!", "$", "controller", "->", "hasAction", "(", "$", "actionId", ")", ")", "{", "$", "actionId", "=", "$", "controller", "->", "defaultAction", ";", "}", "return", "[", "$", "controller", ",", "$", "actionId", "]", ";", "}", "$", "controller", "=", "null", ";", "foreach", "(", "$", "this", "->", "controllerNamespaces", "as", "$", "namespace", ")", "{", "$", "controllerNameFull", "=", "$", "namespace", ".", "'\\\\'", ".", "$", "controllerName", ";", "if", "(", "!", "class_exists", "(", "$", "controllerNameFull", ")", ")", "{", "continue", ";", "}", "try", "{", "/** @var ControllerInterface $controller */", "$", "config", "=", "Reaction", "\\", "Helpers", "\\", "ArrayHelper", "::", "merge", "(", "$", "config", ",", "[", "'class'", "=>", "$", "controllerNameFull", "]", ")", ";", "$", "controller", "=", "Reaction", "::", "create", "(", "$", "config", ")", ";", "if", "(", "!", "isset", "(", "$", "actionId", ")", "||", "!", "$", "controller", "->", "hasAction", "(", "$", "actionId", ")", ")", "{", "$", "actionId", "=", "$", "controller", "->", "defaultAction", ";", "}", "break", ";", "}", "catch", "(", "InvalidConfigException", "$", "exception", ")", "{", "$", "controller", "=", "null", ";", "continue", ";", "}", "}", "return", "[", "$", "controller", ",", "$", "actionId", "]", ";", "}"], "docstring": "Search controller by name and action ID\n@param string|ControllerInterface $controllerName\n@param string                     $actionId\n@param array                      $config\n@return array", "docstring_tokens": ["Search", "controller", "by", "name", "and", "action", "ID"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Routes/RouterAbstract.php#L159-L190", "partition": "test"}
{"repo": "F21/Paradox", "path": "Paradox/toolbox/GraphManager.php", "func_name": "GraphManager.createGraph", "original_string": "public function createGraph($name)\n    {\n        try {\n            $graph = new \\triagens\\ArangoDb\\Graph($name);\n            $graph->setVerticesCollection($name . 'VertexCollection');\n            $graph->setEdgesCollection($name . 'EdgeCollection');\n\n            return $this->_toolbox->getGraphHandler()->createGraph($graph);\n\n        } catch (\\Exception $e) {\n            $normalised = $this->_toolbox->normaliseDriverExceptions($e);\n            throw new GraphManagerException($normalised['message'], $normalised['code']);\n        }\n    }", "language": "php", "code": "public function createGraph($name)\n    {\n        try {\n            $graph = new \\triagens\\ArangoDb\\Graph($name);\n            $graph->setVerticesCollection($name . 'VertexCollection');\n            $graph->setEdgesCollection($name . 'EdgeCollection');\n\n            return $this->_toolbox->getGraphHandler()->createGraph($graph);\n\n        } catch (\\Exception $e) {\n            $normalised = $this->_toolbox->normaliseDriverExceptions($e);\n            throw new GraphManagerException($normalised['message'], $normalised['code']);\n        }\n    }", "code_tokens": ["public", "function", "createGraph", "(", "$", "name", ")", "{", "try", "{", "$", "graph", "=", "new", "\\", "triagens", "\\", "ArangoDb", "\\", "Graph", "(", "$", "name", ")", ";", "$", "graph", "->", "setVerticesCollection", "(", "$", "name", ".", "'VertexCollection'", ")", ";", "$", "graph", "->", "setEdgesCollection", "(", "$", "name", ".", "'EdgeCollection'", ")", ";", "return", "$", "this", "->", "_toolbox", "->", "getGraphHandler", "(", ")", "->", "createGraph", "(", "$", "graph", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "$", "normalised", "=", "$", "this", "->", "_toolbox", "->", "normaliseDriverExceptions", "(", "$", "e", ")", ";", "throw", "new", "GraphManagerException", "(", "$", "normalised", "[", "'message'", "]", ",", "$", "normalised", "[", "'code'", "]", ")", ";", "}", "}"], "docstring": "Create a graph using the current connection's settings and add it as a connection.\nYou do not need to set the vertex and edge collections. They are automatically named for you.\n@param  string                $name The name of the graph.\n@throws GraphManagerException\n@return boolean", "docstring_tokens": ["Create", "a", "graph", "using", "the", "current", "connection", "s", "settings", "and", "add", "it", "as", "a", "connection", ".", "You", "do", "not", "need", "to", "set", "the", "vertex", "and", "edge", "collections", ".", "They", "are", "automatically", "named", "for", "you", "."], "sha": "d1f47203e743760d8d8d6232bf0ea62920e7eefe", "url": "https://github.com/F21/Paradox/blob/d1f47203e743760d8d8d6232bf0ea62920e7eefe/Paradox/toolbox/GraphManager.php#L45-L58", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/WebhooksService/TokenVerifier.php", "func_name": "TokenVerifier.verifyPayLoad", "original_string": "public function verifyPayLoad($payLoad, $sig, $algo = null)\n    {\n        $encryptedPayload = $this->encryptPayLoadBasedOnToken($payLoad, $algo);\n        if (strcmp($sig, $encryptedPayload) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }", "language": "php", "code": "public function verifyPayLoad($payLoad, $sig, $algo = null)\n    {\n        $encryptedPayload = $this->encryptPayLoadBasedOnToken($payLoad, $algo);\n        if (strcmp($sig, $encryptedPayload) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }", "code_tokens": ["public", "function", "verifyPayLoad", "(", "$", "payLoad", ",", "$", "sig", ",", "$", "algo", "=", "null", ")", "{", "$", "encryptedPayload", "=", "$", "this", "->", "encryptPayLoadBasedOnToken", "(", "$", "payLoad", ",", "$", "algo", ")", ";", "if", "(", "strcmp", "(", "$", "sig", ",", "$", "encryptedPayload", ")", "==", "0", ")", "{", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "docstring": "Using the token to encrypt payload and compare with sig\n\n@param $payLoad\nThe payload to be verified\n@param $sig\nThe signature retrieved from header\n@param null $algo\nThe algo used to encrypt\n@return bool\nTrue if same false otherwise", "docstring_tokens": ["Using", "the", "token", "to", "encrypt", "payload", "and", "compare", "with", "sig"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/WebhooksService/TokenVerifier.php#L41-L49", "partition": "test"}
{"repo": "maniaplanet/manialib", "path": "libraries/ManiaLib/Gui/Component.php", "func_name": "Component.setAlign", "original_string": "function setAlign($halign = null, $valign = null)\n    {\n        $oldHalign = $this->halign;\n        $oldValign = $this->valign;\n        $this->valign = $valign;\n        $this->halign = $halign;\n        $this->onAlign($oldHalign, $oldValign);\n    }", "language": "php", "code": "function setAlign($halign = null, $valign = null)\n    {\n        $oldHalign = $this->halign;\n        $oldValign = $this->valign;\n        $this->valign = $valign;\n        $this->halign = $halign;\n        $this->onAlign($oldHalign, $oldValign);\n    }", "code_tokens": ["function", "setAlign", "(", "$", "halign", "=", "null", ",", "$", "valign", "=", "null", ")", "{", "$", "oldHalign", "=", "$", "this", "->", "halign", ";", "$", "oldValign", "=", "$", "this", "->", "valign", ";", "$", "this", "->", "valign", "=", "$", "valign", ";", "$", "this", "->", "halign", "=", "$", "halign", ";", "$", "this", "->", "onAlign", "(", "$", "oldHalign", ",", "$", "oldValign", ")", ";", "}"], "docstring": "Sets the alignment of the element\n@param string Horizontal alignement can be eithe \"left\", \"center\" or\n\"right\"\n@param string Vertical alignment can be either \"top\", \"center\" or\n\"bottom\"", "docstring_tokens": ["Sets", "the", "alignment", "of", "the", "element"], "sha": "d91491c1614ef3bc3c68fd2928ca370c038dd0ad", "url": "https://github.com/maniaplanet/manialib/blob/d91491c1614ef3bc3c68fd2928ca370c038dd0ad/libraries/ManiaLib/Gui/Component.php#L321-L328", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Service/excelService.php", "func_name": "excelService.getDataTable", "original_string": "protected function getDataTable($objName)\n    {\n        /* @var $formObj EasyForm */\n        $formObj = Openbizx::getObject($objName); // get the existing EasyForm|BizForm object\n\n        // if BizForm, call BizForm::renderTable\n        if ($formObj instanceof BizForm)\n        {\n            $dataTable = $formObj->renderTable();\n        }\n        // if EasyForm, call EasyForm->DataPanel::renderTable\n        if ($formObj instanceof EasyForm)\n        {\n            $recordSet = $formObj->fetchDataSet(); \n            $dataSet = $formObj->dataPanel->renderTable($recordSet);\n            foreach ($dataSet['elems'] as $elem)\n            {\n                $labelRow[] = $elem['label'];\n            }\n            $dataTable = array_merge(array($labelRow), $dataSet['data']);\n        }\n\n        return $dataTable;\n\n    }", "language": "php", "code": "protected function getDataTable($objName)\n    {\n        /* @var $formObj EasyForm */\n        $formObj = Openbizx::getObject($objName); // get the existing EasyForm|BizForm object\n\n        // if BizForm, call BizForm::renderTable\n        if ($formObj instanceof BizForm)\n        {\n            $dataTable = $formObj->renderTable();\n        }\n        // if EasyForm, call EasyForm->DataPanel::renderTable\n        if ($formObj instanceof EasyForm)\n        {\n            $recordSet = $formObj->fetchDataSet(); \n            $dataSet = $formObj->dataPanel->renderTable($recordSet);\n            foreach ($dataSet['elems'] as $elem)\n            {\n                $labelRow[] = $elem['label'];\n            }\n            $dataTable = array_merge(array($labelRow), $dataSet['data']);\n        }\n\n        return $dataTable;\n\n    }", "code_tokens": ["protected", "function", "getDataTable", "(", "$", "objName", ")", "{", "/* @var $formObj EasyForm */", "$", "formObj", "=", "Openbizx", "::", "getObject", "(", "$", "objName", ")", ";", "// get the existing EasyForm|BizForm object", "// if BizForm, call BizForm::renderTable", "if", "(", "$", "formObj", "instanceof", "BizForm", ")", "{", "$", "dataTable", "=", "$", "formObj", "->", "renderTable", "(", ")", ";", "}", "// if EasyForm, call EasyForm->DataPanel::renderTable", "if", "(", "$", "formObj", "instanceof", "EasyForm", ")", "{", "$", "recordSet", "=", "$", "formObj", "->", "fetchDataSet", "(", ")", ";", "$", "dataSet", "=", "$", "formObj", "->", "dataPanel", "->", "renderTable", "(", "$", "recordSet", ")", ";", "foreach", "(", "$", "dataSet", "[", "'elems'", "]", "as", "$", "elem", ")", "{", "$", "labelRow", "[", "]", "=", "$", "elem", "[", "'label'", "]", ";", "}", "$", "dataTable", "=", "array_merge", "(", "array", "(", "$", "labelRow", ")", ",", "$", "dataSet", "[", "'data'", "]", ")", ";", "}", "return", "$", "dataTable", ";", "}"], "docstring": "Get raw data to display in the spreadsheet. header and data table\n\n@param string $objName\n@return array", "docstring_tokens": ["Get", "raw", "data", "to", "display", "in", "the", "spreadsheet", ".", "header", "and", "data", "table"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Service/excelService.php#L227-L251", "partition": "test"}
{"repo": "janhenkgerritsen/codeception-laravel5", "path": "src/Codeception/Module/Laravel5.php", "func_name": "Laravel5.initializeLaravel", "original_string": "protected function initializeLaravel()\n    {\n        $this->app = $this->bootApplication();\n        $this->app->instance('request', new Request());\n        $this->client = new LaravelConnector($this->app);\n        $this->client->followRedirects(true);\n    }", "language": "php", "code": "protected function initializeLaravel()\n    {\n        $this->app = $this->bootApplication();\n        $this->app->instance('request', new Request());\n        $this->client = new LaravelConnector($this->app);\n        $this->client->followRedirects(true);\n    }", "code_tokens": ["protected", "function", "initializeLaravel", "(", ")", "{", "$", "this", "->", "app", "=", "$", "this", "->", "bootApplication", "(", ")", ";", "$", "this", "->", "app", "->", "instance", "(", "'request'", ",", "new", "Request", "(", ")", ")", ";", "$", "this", "->", "client", "=", "new", "LaravelConnector", "(", "$", "this", "->", "app", ")", ";", "$", "this", "->", "client", "->", "followRedirects", "(", "true", ")", ";", "}"], "docstring": "Initialize the Laravel framework.\n\n@throws ModuleConfig", "docstring_tokens": ["Initialize", "the", "Laravel", "framework", "."], "sha": "d8733d7e20c9ed0db3ce571e9741e6c77f61e776", "url": "https://github.com/janhenkgerritsen/codeception-laravel5/blob/d8733d7e20c9ed0db3ce571e9741e6c77f61e776/src/Codeception/Module/Laravel5.php#L155-L161", "partition": "test"}
{"repo": "shumkov/rediska", "path": "examples/ratelimit/ratelimit.php", "func_name": "Ratelimit._setMulitExecGetCountPart", "original_string": "protected function _setMulitExecGetCountPart(Rediska_Transaction $transaction, $subject, $bucket, $count) {\n\t\t$keyName = $this->_getKeyName($subject);\n\t\t// Get the counts from the previous `$count` buckets\n\t\t$transaction->getfromhash($keyName, $bucket);\n\t\tfor ($i = $count; $i > 0; $i--) {\n\t\t\t$transaction->getfromhash($keyName, (--$bucket + $this->_bucketCount) % $this->_bucketCount);\n\t\t}\n\t\treturn $transaction;\n\t}", "language": "php", "code": "protected function _setMulitExecGetCountPart(Rediska_Transaction $transaction, $subject, $bucket, $count) {\n\t\t$keyName = $this->_getKeyName($subject);\n\t\t// Get the counts from the previous `$count` buckets\n\t\t$transaction->getfromhash($keyName, $bucket);\n\t\tfor ($i = $count; $i > 0; $i--) {\n\t\t\t$transaction->getfromhash($keyName, (--$bucket + $this->_bucketCount) % $this->_bucketCount);\n\t\t}\n\t\treturn $transaction;\n\t}", "code_tokens": ["protected", "function", "_setMulitExecGetCountPart", "(", "Rediska_Transaction", "$", "transaction", ",", "$", "subject", ",", "$", "bucket", ",", "$", "count", ")", "{", "$", "keyName", "=", "$", "this", "->", "_getKeyName", "(", "$", "subject", ")", ";", "// Get the counts from the previous `$count` buckets", "$", "transaction", "->", "getfromhash", "(", "$", "keyName", ",", "$", "bucket", ")", ";", "for", "(", "$", "i", "=", "$", "count", ";", "$", "i", ">", "0", ";", "$", "i", "--", ")", "{", "$", "transaction", "->", "getfromhash", "(", "$", "keyName", ",", "(", "--", "$", "bucket", "+", "$", "this", "->", "_bucketCount", ")", "%", "$", "this", "->", "_bucketCount", ")", ";", "}", "return", "$", "transaction", ";", "}"], "docstring": "Adds the commands needed for the count function\n\n@param Rediska_Transaction $transaction\n@param string $subject A unique identifier, for example a session id or an IP\n@param int $bucket\n@param int $count\n@return void", "docstring_tokens": ["Adds", "the", "commands", "needed", "for", "the", "count", "function"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/examples/ratelimit/ratelimit.php#L160-L168", "partition": "test"}
{"repo": "trendwerk/editor-capabilities", "path": "class-tp-editor-capabilities.php", "func_name": "TP_Editor_Capabilities.set_capabilities", "original_string": "function set_capabilities() {\n\t\t$editor = get_role( 'editor' );\n\n\t\t$editor->add_cap( 'list_users' );\n\t\t$editor->add_cap( 'remove_users' );\n\t\t$editor->add_cap( 'add_users' );\n\t\t$editor->add_cap( 'promote_users' );\n\t\t$editor->add_cap( 'create_users' );\n\t\t$editor->add_cap( 'delete_users' );\n\t\t$editor->add_cap( 'edit_users' );\n\n\t\t$editor->add_cap( 'edit_theme_options' );\n\t\t$editor->remove_cap( 'switch_themes' );\n\t}", "language": "php", "code": "function set_capabilities() {\n\t\t$editor = get_role( 'editor' );\n\n\t\t$editor->add_cap( 'list_users' );\n\t\t$editor->add_cap( 'remove_users' );\n\t\t$editor->add_cap( 'add_users' );\n\t\t$editor->add_cap( 'promote_users' );\n\t\t$editor->add_cap( 'create_users' );\n\t\t$editor->add_cap( 'delete_users' );\n\t\t$editor->add_cap( 'edit_users' );\n\n\t\t$editor->add_cap( 'edit_theme_options' );\n\t\t$editor->remove_cap( 'switch_themes' );\n\t}", "code_tokens": ["function", "set_capabilities", "(", ")", "{", "$", "editor", "=", "get_role", "(", "'editor'", ")", ";", "$", "editor", "->", "add_cap", "(", "'list_users'", ")", ";", "$", "editor", "->", "add_cap", "(", "'remove_users'", ")", ";", "$", "editor", "->", "add_cap", "(", "'add_users'", ")", ";", "$", "editor", "->", "add_cap", "(", "'promote_users'", ")", ";", "$", "editor", "->", "add_cap", "(", "'create_users'", ")", ";", "$", "editor", "->", "add_cap", "(", "'delete_users'", ")", ";", "$", "editor", "->", "add_cap", "(", "'edit_users'", ")", ";", "$", "editor", "->", "add_cap", "(", "'edit_theme_options'", ")", ";", "$", "editor", "->", "remove_cap", "(", "'switch_themes'", ")", ";", "}"], "docstring": "Set some of the editors capabilities", "docstring_tokens": ["Set", "some", "of", "the", "editors", "capabilities"], "sha": "5f7d4d3ca3c256b2ec2342a7ff699058b1fa2e03", "url": "https://github.com/trendwerk/editor-capabilities/blob/5f7d4d3ca3c256b2ec2342a7ff699058b1fa2e03/class-tp-editor-capabilities.php#L23-L36", "partition": "test"}
{"repo": "hugodias/cakegallery", "path": "View/Helper/GalleryHelper.php", "func_name": "GalleryHelper._loadScripts", "original_string": "private function _loadScripts($scripts = array('jquery' => true, 'swipebox' => true))\n    {\n        if (!isset($scripts['jquery']) || (isset($scripts['jquery']) && $scripts['jquery'] == true)) {\n            echo $this->_View->Html->script(\n                'http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js',\n                array('block' => 'script'));\n        }\n\n        if (!isset($scripts['swipebox']) || (isset($scripts['swipebox']) && $scripts['swipebox'] == true)) {\n            echo $this->_View->Html->css(\n                'https://cdnjs.cloudflare.com/ajax/libs/jquery.swipebox/1.3.0.2/css/swipebox.min.css',\n                array('block' => 'css'));\n            echo $this->_View->Html->script(array(\n                'https://cdnjs.cloudflare.com/ajax/libs/jquery.swipebox/1.3.0.2/js/jquery.swipebox.min.js',\n                'Gallery.interface'\n            ),\n                array('block' => 'script'));\n        }\n    }", "language": "php", "code": "private function _loadScripts($scripts = array('jquery' => true, 'swipebox' => true))\n    {\n        if (!isset($scripts['jquery']) || (isset($scripts['jquery']) && $scripts['jquery'] == true)) {\n            echo $this->_View->Html->script(\n                'http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js',\n                array('block' => 'script'));\n        }\n\n        if (!isset($scripts['swipebox']) || (isset($scripts['swipebox']) && $scripts['swipebox'] == true)) {\n            echo $this->_View->Html->css(\n                'https://cdnjs.cloudflare.com/ajax/libs/jquery.swipebox/1.3.0.2/css/swipebox.min.css',\n                array('block' => 'css'));\n            echo $this->_View->Html->script(array(\n                'https://cdnjs.cloudflare.com/ajax/libs/jquery.swipebox/1.3.0.2/js/jquery.swipebox.min.js',\n                'Gallery.interface'\n            ),\n                array('block' => 'script'));\n        }\n    }", "code_tokens": ["private", "function", "_loadScripts", "(", "$", "scripts", "=", "array", "(", "'jquery'", "=>", "true", ",", "'swipebox'", "=>", "true", ")", ")", "{", "if", "(", "!", "isset", "(", "$", "scripts", "[", "'jquery'", "]", ")", "||", "(", "isset", "(", "$", "scripts", "[", "'jquery'", "]", ")", "&&", "$", "scripts", "[", "'jquery'", "]", "==", "true", ")", ")", "{", "echo", "$", "this", "->", "_View", "->", "Html", "->", "script", "(", "'http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js'", ",", "array", "(", "'block'", "=>", "'script'", ")", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "scripts", "[", "'swipebox'", "]", ")", "||", "(", "isset", "(", "$", "scripts", "[", "'swipebox'", "]", ")", "&&", "$", "scripts", "[", "'swipebox'", "]", "==", "true", ")", ")", "{", "echo", "$", "this", "->", "_View", "->", "Html", "->", "css", "(", "'https://cdnjs.cloudflare.com/ajax/libs/jquery.swipebox/1.3.0.2/css/swipebox.min.css'", ",", "array", "(", "'block'", "=>", "'css'", ")", ")", ";", "echo", "$", "this", "->", "_View", "->", "Html", "->", "script", "(", "array", "(", "'https://cdnjs.cloudflare.com/ajax/libs/jquery.swipebox/1.3.0.2/js/jquery.swipebox.min.js'", ",", "'Gallery.interface'", ")", ",", "array", "(", "'block'", "=>", "'script'", ")", ")", ";", "}", "}"], "docstring": "Load scripts for using on showroom\n\n@param bool $jquery", "docstring_tokens": ["Load", "scripts", "for", "using", "on", "showroom"], "sha": "5289c7babadaf0981cbbd71825f42f46cbbd7650", "url": "https://github.com/hugodias/cakegallery/blob/5289c7babadaf0981cbbd71825f42f46cbbd7650/View/Helper/GalleryHelper.php#L138-L156", "partition": "test"}
{"repo": "techdivision/import", "path": "src/Adapter/CsvExportAdapterFactory.php", "func_name": "CsvExportAdapterFactory.createExportAdapter", "original_string": "public function createExportAdapter(SubjectConfigurationInterface $subjectConfiguration)\n    {\n\n        // load the export adapter configuration\n        $exportAdapterConfiguration = $subjectConfiguration->getExportAdapter();\n\n        // load the serializer factory instance\n        $serializerFactory = $this->container->get($exportAdapterConfiguration->getSerializer()->getId());\n\n        // create the instance and pass the export adapter configuration instance\n        $exportAdapter = $this->container->get(DependencyInjectionKeys::IMPORT_ADAPTER_EXPORT_CSV);\n        $exportAdapter->init($exportAdapterConfiguration, $serializerFactory);\n\n        // return the initialized export adapter instance\n        return $exportAdapter;\n    }", "language": "php", "code": "public function createExportAdapter(SubjectConfigurationInterface $subjectConfiguration)\n    {\n\n        // load the export adapter configuration\n        $exportAdapterConfiguration = $subjectConfiguration->getExportAdapter();\n\n        // load the serializer factory instance\n        $serializerFactory = $this->container->get($exportAdapterConfiguration->getSerializer()->getId());\n\n        // create the instance and pass the export adapter configuration instance\n        $exportAdapter = $this->container->get(DependencyInjectionKeys::IMPORT_ADAPTER_EXPORT_CSV);\n        $exportAdapter->init($exportAdapterConfiguration, $serializerFactory);\n\n        // return the initialized export adapter instance\n        return $exportAdapter;\n    }", "code_tokens": ["public", "function", "createExportAdapter", "(", "SubjectConfigurationInterface", "$", "subjectConfiguration", ")", "{", "// load the export adapter configuration", "$", "exportAdapterConfiguration", "=", "$", "subjectConfiguration", "->", "getExportAdapter", "(", ")", ";", "// load the serializer factory instance", "$", "serializerFactory", "=", "$", "this", "->", "container", "->", "get", "(", "$", "exportAdapterConfiguration", "->", "getSerializer", "(", ")", "->", "getId", "(", ")", ")", ";", "// create the instance and pass the export adapter configuration instance", "$", "exportAdapter", "=", "$", "this", "->", "container", "->", "get", "(", "DependencyInjectionKeys", "::", "IMPORT_ADAPTER_EXPORT_CSV", ")", ";", "$", "exportAdapter", "->", "init", "(", "$", "exportAdapterConfiguration", ",", "$", "serializerFactory", ")", ";", "// return the initialized export adapter instance", "return", "$", "exportAdapter", ";", "}"], "docstring": "Creates and returns the export adapter for the subject with the passed configuration.\n\n@param \\TechDivision\\Import\\Configuration\\SubjectConfigurationInterface $subjectConfiguration The subject configuration\n\n@return \\TechDivision\\Import\\Adapter\\ExportAdapterInterface The export adapter instance", "docstring_tokens": ["Creates", "and", "returns", "the", "export", "adapter", "for", "the", "subject", "with", "the", "passed", "configuration", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/Adapter/CsvExportAdapterFactory.php#L63-L78", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Debug/Toolbar/Collectors/BaseCollector.php", "func_name": "BaseCollector.getTitle", "original_string": "public function getTitle(bool $safe = false): string\n\t{\n\t\tif ($safe)\n\t\t{\n\t\t\treturn str_replace(' ', '-', strtolower($this->title));\n\t\t}\n\n\t\treturn $this->title;\n\t}", "language": "php", "code": "public function getTitle(bool $safe = false): string\n\t{\n\t\tif ($safe)\n\t\t{\n\t\t\treturn str_replace(' ', '-', strtolower($this->title));\n\t\t}\n\n\t\treturn $this->title;\n\t}", "code_tokens": ["public", "function", "getTitle", "(", "bool", "$", "safe", "=", "false", ")", ":", "string", "{", "if", "(", "$", "safe", ")", "{", "return", "str_replace", "(", "' '", ",", "'-'", ",", "strtolower", "(", "$", "this", "->", "title", ")", ")", ";", "}", "return", "$", "this", "->", "title", ";", "}"], "docstring": "Gets the Collector's title.\n\n@param  boolean $safe\n@return string", "docstring_tokens": ["Gets", "the", "Collector", "s", "title", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Debug/Toolbar/Collectors/BaseCollector.php#L94-L102", "partition": "test"}
{"repo": "anlutro/php-bulk-sms", "path": "src/BulkSmsService.php", "func_name": "BulkSmsService.sendBulkMessages", "original_string": "public function sendBulkMessages(array $messages, array $params = null)\n    {\n        $sender = $this->createBulkSender();\n        v::notEmpty()->setName(\"BulkSms Array\")->check($messages);\n\n        foreach ($messages as $message) {\n            // make sure messages are proper objects\n            v::instance('anlutro\\BulkSms\\Message')->check($message);\n            $sender->addMessage($message);\n        }\n\n        if ($params) {\n            $sender->setParams($params);\n        }\n        $response = $sender->send($this->testMode);\n        $this->validateResponse($response);\n\n        return $sender->extractResponse($response);\n    }", "language": "php", "code": "public function sendBulkMessages(array $messages, array $params = null)\n    {\n        $sender = $this->createBulkSender();\n        v::notEmpty()->setName(\"BulkSms Array\")->check($messages);\n\n        foreach ($messages as $message) {\n            // make sure messages are proper objects\n            v::instance('anlutro\\BulkSms\\Message')->check($message);\n            $sender->addMessage($message);\n        }\n\n        if ($params) {\n            $sender->setParams($params);\n        }\n        $response = $sender->send($this->testMode);\n        $this->validateResponse($response);\n\n        return $sender->extractResponse($response);\n    }", "code_tokens": ["public", "function", "sendBulkMessages", "(", "array", "$", "messages", ",", "array", "$", "params", "=", "null", ")", "{", "$", "sender", "=", "$", "this", "->", "createBulkSender", "(", ")", ";", "v", "::", "notEmpty", "(", ")", "->", "setName", "(", "\"BulkSms Array\"", ")", "->", "check", "(", "$", "messages", ")", ";", "foreach", "(", "$", "messages", "as", "$", "message", ")", "{", "// make sure messages are proper objects", "v", "::", "instance", "(", "'anlutro\\BulkSms\\Message'", ")", "->", "check", "(", "$", "message", ")", ";", "$", "sender", "->", "addMessage", "(", "$", "message", ")", ";", "}", "if", "(", "$", "params", ")", "{", "$", "sender", "->", "setParams", "(", "$", "params", ")", ";", "}", "$", "response", "=", "$", "sender", "->", "send", "(", "$", "this", "->", "testMode", ")", ";", "$", "this", "->", "validateResponse", "(", "$", "response", ")", ";", "return", "$", "sender", "->", "extractResponse", "(", "$", "response", ")", ";", "}"], "docstring": "Send messages in bulk.\n\n@param  Message[] $messages\n@param  array     $params\n\n@return mixed", "docstring_tokens": ["Send", "messages", "in", "bulk", "."], "sha": "0e81484eeb55c5730c1c6651b039733bb34ab2ad", "url": "https://github.com/anlutro/php-bulk-sms/blob/0e81484eeb55c5730c1c6651b039733bb34ab2ad/src/BulkSmsService.php#L192-L210", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Database/DatabaseStrategy.php", "func_name": "DatabaseStrategy.createTable", "original_string": "public function createTable($tableName, $schemaName, array $definition, ...$args)\n    {\n        return $this->uses()->createTable($tableName, $schemaName, $definition, ...$args); }", "language": "php", "code": "public function createTable($tableName, $schemaName, array $definition, ...$args)\n    {\n        return $this->uses()->createTable($tableName, $schemaName, $definition, ...$args); }", "code_tokens": ["public", "function", "createTable", "(", "$", "tableName", ",", "$", "schemaName", ",", "array", "$", "definition", ",", "...", "$", "args", ")", "{", "return", "$", "this", "->", "uses", "(", ")", "->", "createTable", "(", "$", "tableName", ",", "$", "schemaName", ",", "$", "definition", ",", "...", "$", "args", ")", ";", "}"], "docstring": "Creates a table\n\n@param string $tableName\n@param string $schemaName\n@param array $definition\n@param array $args\n@return bool", "docstring_tokens": ["Creates", "a", "table"], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Database/DatabaseStrategy.php#L378-L380", "partition": "test"}
{"repo": "mandango/mondator", "path": "src/Mandango/Mondator/Mondator.php", "func_name": "Mondator.generateContainers", "original_string": "public function generateContainers()\n    {\n        $containers = array();\n        $containers['_global'] = new Container();\n\n        // global extensions\n        $globalExtensions = $this->getExtensions();\n\n        // configClasses\n        $configClasses = new \\ArrayObject();\n        foreach ($this->getConfigClasses() as $class => $configClass) {\n            $configClasses[$class] = new \\ArrayObject($configClass);\n        }\n\n        // classes extensions\n        $classesExtensions = new \\ArrayObject();\n        $this->generateContainersClassesExtensions($globalExtensions, $classesExtensions, $configClasses);\n\n        // config class process\n        foreach ($classesExtensions as $class => $classExtensions) {\n            foreach ($classExtensions as $classExtension) {\n                $classExtension->configClassProcess($class, $configClasses);\n            }\n        }\n\n        // pre global process\n        foreach ($globalExtensions as $globalExtension) {\n            $globalExtension->preGlobalProcess($configClasses, $containers['_global']);\n        }\n\n        // class process\n        foreach ($classesExtensions as $class => $classExtensions) {\n            $containers[$class] = $container = new Container();\n            foreach ($classExtensions as $classExtension) {\n                $classExtension->classProcess($class, $configClasses, $container);\n            }\n        }\n\n        // post global process\n        foreach ($globalExtensions as $globalExtension) {\n            $globalExtension->postGlobalProcess($configClasses, $containers['_global']);\n        }\n\n        return $containers;\n    }", "language": "php", "code": "public function generateContainers()\n    {\n        $containers = array();\n        $containers['_global'] = new Container();\n\n        // global extensions\n        $globalExtensions = $this->getExtensions();\n\n        // configClasses\n        $configClasses = new \\ArrayObject();\n        foreach ($this->getConfigClasses() as $class => $configClass) {\n            $configClasses[$class] = new \\ArrayObject($configClass);\n        }\n\n        // classes extensions\n        $classesExtensions = new \\ArrayObject();\n        $this->generateContainersClassesExtensions($globalExtensions, $classesExtensions, $configClasses);\n\n        // config class process\n        foreach ($classesExtensions as $class => $classExtensions) {\n            foreach ($classExtensions as $classExtension) {\n                $classExtension->configClassProcess($class, $configClasses);\n            }\n        }\n\n        // pre global process\n        foreach ($globalExtensions as $globalExtension) {\n            $globalExtension->preGlobalProcess($configClasses, $containers['_global']);\n        }\n\n        // class process\n        foreach ($classesExtensions as $class => $classExtensions) {\n            $containers[$class] = $container = new Container();\n            foreach ($classExtensions as $classExtension) {\n                $classExtension->classProcess($class, $configClasses, $container);\n            }\n        }\n\n        // post global process\n        foreach ($globalExtensions as $globalExtension) {\n            $globalExtension->postGlobalProcess($configClasses, $containers['_global']);\n        }\n\n        return $containers;\n    }", "code_tokens": ["public", "function", "generateContainers", "(", ")", "{", "$", "containers", "=", "array", "(", ")", ";", "$", "containers", "[", "'_global'", "]", "=", "new", "Container", "(", ")", ";", "// global extensions", "$", "globalExtensions", "=", "$", "this", "->", "getExtensions", "(", ")", ";", "// configClasses", "$", "configClasses", "=", "new", "\\", "ArrayObject", "(", ")", ";", "foreach", "(", "$", "this", "->", "getConfigClasses", "(", ")", "as", "$", "class", "=>", "$", "configClass", ")", "{", "$", "configClasses", "[", "$", "class", "]", "=", "new", "\\", "ArrayObject", "(", "$", "configClass", ")", ";", "}", "// classes extensions", "$", "classesExtensions", "=", "new", "\\", "ArrayObject", "(", ")", ";", "$", "this", "->", "generateContainersClassesExtensions", "(", "$", "globalExtensions", ",", "$", "classesExtensions", ",", "$", "configClasses", ")", ";", "// config class process", "foreach", "(", "$", "classesExtensions", "as", "$", "class", "=>", "$", "classExtensions", ")", "{", "foreach", "(", "$", "classExtensions", "as", "$", "classExtension", ")", "{", "$", "classExtension", "->", "configClassProcess", "(", "$", "class", ",", "$", "configClasses", ")", ";", "}", "}", "// pre global process", "foreach", "(", "$", "globalExtensions", "as", "$", "globalExtension", ")", "{", "$", "globalExtension", "->", "preGlobalProcess", "(", "$", "configClasses", ",", "$", "containers", "[", "'_global'", "]", ")", ";", "}", "// class process", "foreach", "(", "$", "classesExtensions", "as", "$", "class", "=>", "$", "classExtensions", ")", "{", "$", "containers", "[", "$", "class", "]", "=", "$", "container", "=", "new", "Container", "(", ")", ";", "foreach", "(", "$", "classExtensions", "as", "$", "classExtension", ")", "{", "$", "classExtension", "->", "classProcess", "(", "$", "class", ",", "$", "configClasses", ",", "$", "container", ")", ";", "}", "}", "// post global process", "foreach", "(", "$", "globalExtensions", "as", "$", "globalExtension", ")", "{", "$", "globalExtension", "->", "postGlobalProcess", "(", "$", "configClasses", ",", "$", "containers", "[", "'_global'", "]", ")", ";", "}", "return", "$", "containers", ";", "}"], "docstring": "Generate the containers.\n\n@return array The containers.\n\n@api", "docstring_tokens": ["Generate", "the", "containers", "."], "sha": "f4fdddc37e22b2fc2ffcc1d5ce5ff3327982e538", "url": "https://github.com/mandango/mondator/blob/f4fdddc37e22b2fc2ffcc1d5ce5ff3327982e538/src/Mandango/Mondator/Mondator.php#L159-L203", "partition": "test"}
{"repo": "sabre-io/xml", "path": "lib/Writer.php", "func_name": "Writer.writeAttributes", "original_string": "public function writeAttributes(array $attributes)\n    {\n        foreach ($attributes as $name => $value) {\n            $this->writeAttribute($name, $value);\n        }\n    }", "language": "php", "code": "public function writeAttributes(array $attributes)\n    {\n        foreach ($attributes as $name => $value) {\n            $this->writeAttribute($name, $value);\n        }\n    }", "code_tokens": ["public", "function", "writeAttributes", "(", "array", "$", "attributes", ")", "{", "foreach", "(", "$", "attributes", "as", "$", "name", "=>", "$", "value", ")", "{", "$", "this", "->", "writeAttribute", "(", "$", "name", ",", "$", "value", ")", ";", "}", "}"], "docstring": "Writes a list of attributes.\n\nAttributes are specified as a key->value array.\n\nThe key is an attribute name. If the key is a 'localName', the current\nxml namespace is assumed. If it's a 'clark notation key', this namespace\nwill be used instead.", "docstring_tokens": ["Writes", "a", "list", "of", "attributes", "."], "sha": "e8e9bb3e46afe12262ffd0e994ffa7fd5e163893", "url": "https://github.com/sabre-io/xml/blob/e8e9bb3e46afe12262ffd0e994ffa7fd5e163893/lib/Writer.php#L208-L213", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Http/Cookies.php", "func_name": "Cookies.set", "original_string": "public function set(Cookie $cookie): self\n    {\n        $this->cookies[$cookie->getDomain()][$cookie->getPath()][$cookie->getName()] = $cookie;\n\n        return $this;\n    }", "language": "php", "code": "public function set(Cookie $cookie): self\n    {\n        $this->cookies[$cookie->getDomain()][$cookie->getPath()][$cookie->getName()] = $cookie;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "set", "(", "Cookie", "$", "cookie", ")", ":", "self", "{", "$", "this", "->", "cookies", "[", "$", "cookie", "->", "getDomain", "(", ")", "]", "[", "$", "cookie", "->", "getPath", "(", ")", "]", "[", "$", "cookie", "->", "getName", "(", ")", "]", "=", "$", "cookie", ";", "return", "$", "this", ";", "}"], "docstring": "Set a response cookie.\n\n@param Cookie $cookie The cookie object\n\n@return \\Valkyrja\\Http\\Cookies", "docstring_tokens": ["Set", "a", "response", "cookie", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Http/Cookies.php#L68-L73", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Web/ClientProxy.php", "func_name": "ClientProxy.closePopup", "original_string": "public function closePopup()\n    {\n        if ($this->isRpc) {\n            $this->_formsOutput[] = $this->callClientFunction(\"Openbizx.Window.closePopup()\");\n            $this->_otherOutput[] = $this->callClientFunction(\"Openbizx.Window.closePopup()\");\n        }\n    }", "language": "php", "code": "public function closePopup()\n    {\n        if ($this->isRpc) {\n            $this->_formsOutput[] = $this->callClientFunction(\"Openbizx.Window.closePopup()\");\n            $this->_otherOutput[] = $this->callClientFunction(\"Openbizx.Window.closePopup()\");\n        }\n    }", "code_tokens": ["public", "function", "closePopup", "(", ")", "{", "if", "(", "$", "this", "->", "isRpc", ")", "{", "$", "this", "->", "_formsOutput", "[", "]", "=", "$", "this", "->", "callClientFunction", "(", "\"Openbizx.Window.closePopup()\"", ")", ";", "$", "this", "->", "_otherOutput", "[", "]", "=", "$", "this", "->", "callClientFunction", "(", "\"Openbizx.Window.closePopup()\"", ")", ";", "}", "}"], "docstring": "Close popup window\n\n@return void", "docstring_tokens": ["Close", "popup", "window"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Web/ClientProxy.php#L358-L364", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Database/DatabaseStrategy.php", "func_name": "DatabaseStrategy.tableExists", "original_string": "public function tableExists($tableName, $schemaName = null, ...$args)\n    {\n        return $this->uses()->tableExists($tableName, $schemaName, ...$args);\n    }", "language": "php", "code": "public function tableExists($tableName, $schemaName = null, ...$args)\n    {\n        return $this->uses()->tableExists($tableName, $schemaName, ...$args);\n    }", "code_tokens": ["public", "function", "tableExists", "(", "$", "tableName", ",", "$", "schemaName", "=", "null", ",", "...", "$", "args", ")", "{", "return", "$", "this", "->", "uses", "(", ")", "->", "tableExists", "(", "$", "tableName", ",", "$", "schemaName", ",", "...", "$", "args", ")", ";", "}"], "docstring": "Generates SQL checking for the existence of a schema.table\n\n@param string $tableName\n@param string $schemaName\n@param array $args\n@return bool", "docstring_tokens": ["Generates", "SQL", "checking", "for", "the", "existence", "of", "a", "schema", ".", "table"], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Database/DatabaseStrategy.php#L327-L330", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/XSD2PHP/lib/ZF/1.10.7/Zend/Soap/Wsdl.php", "func_name": "Zend_Soap_Wsdl.setUri", "original_string": "public function setUri($uri)\n    {\n        if ($uri instanceof Zend_Uri_Http) {\n            $uri = $uri->getUri();\n        }\n        $oldUri = $this->_uri;\n        $this->_uri = $uri;\n\n        if ($this->_dom !== null) {\n            // @todo: This is the worst hack ever, but its needed due to design and non BC issues of WSDL generation\n            $xml = $this->_dom->saveXML();\n            $xml = str_replace($oldUri, $uri, $xml);\n            $this->_dom = new DOMDocument();\n            $this->_dom->loadXML($xml);\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function setUri($uri)\n    {\n        if ($uri instanceof Zend_Uri_Http) {\n            $uri = $uri->getUri();\n        }\n        $oldUri = $this->_uri;\n        $this->_uri = $uri;\n\n        if ($this->_dom !== null) {\n            // @todo: This is the worst hack ever, but its needed due to design and non BC issues of WSDL generation\n            $xml = $this->_dom->saveXML();\n            $xml = str_replace($oldUri, $uri, $xml);\n            $this->_dom = new DOMDocument();\n            $this->_dom->loadXML($xml);\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setUri", "(", "$", "uri", ")", "{", "if", "(", "$", "uri", "instanceof", "Zend_Uri_Http", ")", "{", "$", "uri", "=", "$", "uri", "->", "getUri", "(", ")", ";", "}", "$", "oldUri", "=", "$", "this", "->", "_uri", ";", "$", "this", "->", "_uri", "=", "$", "uri", ";", "if", "(", "$", "this", "->", "_dom", "!==", "null", ")", "{", "// @todo: This is the worst hack ever, but its needed due to design and non BC issues of WSDL generation", "$", "xml", "=", "$", "this", "->", "_dom", "->", "saveXML", "(", ")", ";", "$", "xml", "=", "str_replace", "(", "$", "oldUri", ",", "$", "uri", ",", "$", "xml", ")", ";", "$", "this", "->", "_dom", "=", "new", "DOMDocument", "(", ")", ";", "$", "this", "->", "_dom", "->", "loadXML", "(", "$", "xml", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Set a new uri for this WSDL\n\n@param  string|Zend_Uri_Http $uri\n@return Zend_Server_Wsdl", "docstring_tokens": ["Set", "a", "new", "uri", "for", "this", "WSDL"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/XSD2PHP/lib/ZF/1.10.7/Zend/Soap/Wsdl.php#L116-L133", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/Driver/Sql/Mysqli.php", "func_name": "QuickBooks_Driver_Sql_Mysqli._escape", "original_string": "protected function _escape($str)\n\t{\n\t\tif (is_array($str))\n\t\t{\n\t\t\terror_log('Param passed to _escape($str) was an array: ' . print_r($str, true));\n\t\t\t$str = '';\n\t\t}\n\n\t\treturn $this->_conn->real_escape_string($str);\n\t}", "language": "php", "code": "protected function _escape($str)\n\t{\n\t\tif (is_array($str))\n\t\t{\n\t\t\terror_log('Param passed to _escape($str) was an array: ' . print_r($str, true));\n\t\t\t$str = '';\n\t\t}\n\n\t\treturn $this->_conn->real_escape_string($str);\n\t}", "code_tokens": ["protected", "function", "_escape", "(", "$", "str", ")", "{", "if", "(", "is_array", "(", "$", "str", ")", ")", "{", "error_log", "(", "'Param passed to _escape($str) was an array: '", ".", "print_r", "(", "$", "str", ",", "true", ")", ")", ";", "$", "str", "=", "''", ";", "}", "return", "$", "this", "->", "_conn", "->", "real_escape_string", "(", "$", "str", ")", ";", "}"], "docstring": "Escape a string for the database\n\n@param string $str\n@return string", "docstring_tokens": ["Escape", "a", "string", "for", "the", "database"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/Driver/Sql/Mysqli.php#L431-L440", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/HTTP/Request2/Adapter/Socket.php", "func_name": "HTTP_Request2_Adapter_Socket.disconnect", "original_string": "protected function disconnect()\r\n    {\r\n        if (!empty($this->socket)) {\r\n            $this->socket = null;\r\n            $this->request->setLastEvent('disconnect');\r\n        }\r\n    }", "language": "php", "code": "protected function disconnect()\r\n    {\r\n        if (!empty($this->socket)) {\r\n            $this->socket = null;\r\n            $this->request->setLastEvent('disconnect');\r\n        }\r\n    }", "code_tokens": ["protected", "function", "disconnect", "(", ")", "{", "if", "(", "!", "empty", "(", "$", "this", "->", "socket", ")", ")", "{", "$", "this", "->", "socket", "=", "null", ";", "$", "this", "->", "request", "->", "setLastEvent", "(", "'disconnect'", ")", ";", "}", "}"], "docstring": "Disconnects from the remote server", "docstring_tokens": ["Disconnects", "from", "the", "remote", "server"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/HTTP/Request2/Adapter/Socket.php#L395-L401", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Valkyrja.php", "func_name": "Valkyrja.config", "original_string": "public function config(string $key = null, $default = null)\n    {\n        // If no key was specified\n        if (null === $key) {\n            // Return all the entire config\n            return self::$config;\n        }\n\n        // Explode the keys on period\n        $keys = explode('.', $key);\n        // Set the config to return\n        $config = self::$config;\n\n        // Iterate through the keys\n        foreach ($keys as $configItem) {\n            // Trying to get the item from the config\n            // or load the default\n            $config = $config[$configItem] ?? $default;\n\n            // If the item was not found, might as well return out from here\n            // instead of continuing to iterate through the remaining keys\n            if ($default === $config) {\n                return $default;\n            }\n        }\n\n        // do while($current !== $default);\n\n        // Return the found config\n        return $config;\n    }", "language": "php", "code": "public function config(string $key = null, $default = null)\n    {\n        // If no key was specified\n        if (null === $key) {\n            // Return all the entire config\n            return self::$config;\n        }\n\n        // Explode the keys on period\n        $keys = explode('.', $key);\n        // Set the config to return\n        $config = self::$config;\n\n        // Iterate through the keys\n        foreach ($keys as $configItem) {\n            // Trying to get the item from the config\n            // or load the default\n            $config = $config[$configItem] ?? $default;\n\n            // If the item was not found, might as well return out from here\n            // instead of continuing to iterate through the remaining keys\n            if ($default === $config) {\n                return $default;\n            }\n        }\n\n        // do while($current !== $default);\n\n        // Return the found config\n        return $config;\n    }", "code_tokens": ["public", "function", "config", "(", "string", "$", "key", "=", "null", ",", "$", "default", "=", "null", ")", "{", "// If no key was specified", "if", "(", "null", "===", "$", "key", ")", "{", "// Return all the entire config", "return", "self", "::", "$", "config", ";", "}", "// Explode the keys on period", "$", "keys", "=", "explode", "(", "'.'", ",", "$", "key", ")", ";", "// Set the config to return", "$", "config", "=", "self", "::", "$", "config", ";", "// Iterate through the keys", "foreach", "(", "$", "keys", "as", "$", "configItem", ")", "{", "// Trying to get the item from the config", "// or load the default", "$", "config", "=", "$", "config", "[", "$", "configItem", "]", "??", "$", "default", ";", "// If the item was not found, might as well return out from here", "// instead of continuing to iterate through the remaining keys", "if", "(", "$", "default", "===", "$", "config", ")", "{", "return", "$", "default", ";", "}", "}", "// do while($current !== $default);", "// Return the found config", "return", "$", "config", ";", "}"], "docstring": "Get the config.\n\n@param string $key     [optional] The key to get\n@param string $default [optional] The default value if the key is not\nfound\n\n@return mixed", "docstring_tokens": ["Get", "the", "config", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Valkyrja.php#L392-L422", "partition": "test"}
{"repo": "MichaelRShelton/middleman", "path": "src/Concerns/ChainsResults.php", "func_name": "ChainsResults.valueIsChainable", "original_string": "protected function valueIsChainable($value): bool\n    {\n        $chainableObjects = $this->getChainableObjects();\n        if (! is_object($value)) {\n            return false;\n        } elseif (in_array('object', $chainableObjects)) {\n            return true;\n        } else {\n            $isInstanceOf = function (string $chainable) use ($value) {\n                return $value instanceof $chainable;\n            };\n            return count(array_filter($chainableObjects, $isInstanceOf)) !== 0;\n        }\n    }", "language": "php", "code": "protected function valueIsChainable($value): bool\n    {\n        $chainableObjects = $this->getChainableObjects();\n        if (! is_object($value)) {\n            return false;\n        } elseif (in_array('object', $chainableObjects)) {\n            return true;\n        } else {\n            $isInstanceOf = function (string $chainable) use ($value) {\n                return $value instanceof $chainable;\n            };\n            return count(array_filter($chainableObjects, $isInstanceOf)) !== 0;\n        }\n    }", "code_tokens": ["protected", "function", "valueIsChainable", "(", "$", "value", ")", ":", "bool", "{", "$", "chainableObjects", "=", "$", "this", "->", "getChainableObjects", "(", ")", ";", "if", "(", "!", "is_object", "(", "$", "value", ")", ")", "{", "return", "false", ";", "}", "elseif", "(", "in_array", "(", "'object'", ",", "$", "chainableObjects", ")", ")", "{", "return", "true", ";", "}", "else", "{", "$", "isInstanceOf", "=", "function", "(", "string", "$", "chainable", ")", "use", "(", "$", "value", ")", "{", "return", "$", "value", "instanceof", "$", "chainable", ";", "}", ";", "return", "count", "(", "array_filter", "(", "$", "chainableObjects", ",", "$", "isInstanceOf", ")", ")", "!==", "0", ";", "}", "}"], "docstring": "Whether or not the given value is a chainable object.\n\n@param mixed $value\n@return bool", "docstring_tokens": ["Whether", "or", "not", "the", "given", "value", "is", "a", "chainable", "object", "."], "sha": "b67140be2f39a32a27f5a0a9b2498ab3444835ba", "url": "https://github.com/MichaelRShelton/middleman/blob/b67140be2f39a32a27f5a0a9b2498ab3444835ba/src/Concerns/ChainsResults.php#L74-L87", "partition": "test"}
{"repo": "CDV-Yami/sheet-fight", "path": "src/Yami/SheetFight/Model/MoveBuilder.php", "func_name": "MoveBuilder.deal", "original_string": "public function deal($damage)\n    {\n        if (null !== $this->damage) {\n            throw new LogicException('Damage already defined');\n        }\n\n        $this->damage = $damage;\n\n        return $this;\n    }", "language": "php", "code": "public function deal($damage)\n    {\n        if (null !== $this->damage) {\n            throw new LogicException('Damage already defined');\n        }\n\n        $this->damage = $damage;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "deal", "(", "$", "damage", ")", "{", "if", "(", "null", "!==", "$", "this", "->", "damage", ")", "{", "throw", "new", "LogicException", "(", "'Damage already defined'", ")", ";", "}", "$", "this", "->", "damage", "=", "$", "damage", ";", "return", "$", "this", ";", "}"], "docstring": "Define the damage.\n\n@param int $damage\n\n@return static", "docstring_tokens": ["Define", "the", "damage", "."], "sha": "d991329f367c1320cd5c38511e52fbd9ff60cb12", "url": "https://github.com/CDV-Yami/sheet-fight/blob/d991329f367c1320cd5c38511e52fbd9ff60cb12/src/Yami/SheetFight/Model/MoveBuilder.php#L100-L109", "partition": "test"}
{"repo": "phpsess/openssl-encryption", "path": "src/OpenSSLEncryption.php", "func_name": "OpenSSLEncryption.setHashAlgorithm", "original_string": "public function setHashAlgorithm(string $algorithm): void\n    {\n        $knownAlgorithms = openssl_get_md_methods(true);\n\n        if (!in_array($algorithm, $knownAlgorithms)) {\n            $errorMessage = \"The hash algorithm \\\"$algorithm\\\" is unknown.\" .\n                'For a list of valid algorithms, see openssl_get_md_methods(true).';\n            throw new UnableToHashException($errorMessage);\n        }\n\n        $this->hashAlgorithm = $algorithm;\n    }", "language": "php", "code": "public function setHashAlgorithm(string $algorithm): void\n    {\n        $knownAlgorithms = openssl_get_md_methods(true);\n\n        if (!in_array($algorithm, $knownAlgorithms)) {\n            $errorMessage = \"The hash algorithm \\\"$algorithm\\\" is unknown.\" .\n                'For a list of valid algorithms, see openssl_get_md_methods(true).';\n            throw new UnableToHashException($errorMessage);\n        }\n\n        $this->hashAlgorithm = $algorithm;\n    }", "code_tokens": ["public", "function", "setHashAlgorithm", "(", "string", "$", "algorithm", ")", ":", "void", "{", "$", "knownAlgorithms", "=", "openssl_get_md_methods", "(", "true", ")", ";", "if", "(", "!", "in_array", "(", "$", "algorithm", ",", "$", "knownAlgorithms", ")", ")", "{", "$", "errorMessage", "=", "\"The hash algorithm \\\"$algorithm\\\" is unknown.\"", ".", "'For a list of valid algorithms, see openssl_get_md_methods(true).'", ";", "throw", "new", "UnableToHashException", "(", "$", "errorMessage", ")", ";", "}", "$", "this", "->", "hashAlgorithm", "=", "$", "algorithm", ";", "}"], "docstring": "Sets the hashing algorithm\n\nTo get a list of valid algorithms, see openssl_get_md_methods(true)\n\n@throws UnableToHashException\n@param string $algorithm For a list of valid algorithms, see openssl_get_md_methods(true).\n@return void", "docstring_tokens": ["Sets", "the", "hashing", "algorithm"], "sha": "a11b355d78cf4f1ffa665472945fad41e22198bb", "url": "https://github.com/phpsess/openssl-encryption/blob/a11b355d78cf4f1ffa665472945fad41e22198bb/src/OpenSSLEncryption.php#L164-L175", "partition": "test"}
{"repo": "upwork/php-upwork", "path": "src/Upwork/API/Routers/Hr/Milestones.php", "func_name": "Milestones.create", "original_string": "public function create($params)\n    {\n        ApiDebug::p(__FUNCTION__);\n\n        $response = $this->_client->post('/hr/v3/fp/milestones', $params);\n        ApiDebug::p('found response info', $response);\n\n        return $response;\n    }", "language": "php", "code": "public function create($params)\n    {\n        ApiDebug::p(__FUNCTION__);\n\n        $response = $this->_client->post('/hr/v3/fp/milestones', $params);\n        ApiDebug::p('found response info', $response);\n\n        return $response;\n    }", "code_tokens": ["public", "function", "create", "(", "$", "params", ")", "{", "ApiDebug", "::", "p", "(", "__FUNCTION__", ")", ";", "$", "response", "=", "$", "this", "->", "_client", "->", "post", "(", "'/hr/v3/fp/milestones'", ",", "$", "params", ")", ";", "ApiDebug", "::", "p", "(", "'found response info'", ",", "$", "response", ")", ";", "return", "$", "response", ";", "}"], "docstring": "Create a new Milestone\n\n@param   array $params Parameters\n@return  object", "docstring_tokens": ["Create", "a", "new", "Milestone"], "sha": "17eb86b22b0fca885a85b55879eaa81c9bc87823", "url": "https://github.com/upwork/php-upwork/blob/17eb86b22b0fca885a85b55879eaa81c9bc87823/src/Upwork/API/Routers/Hr/Milestones.php#L83-L91", "partition": "test"}
{"repo": "googleapis/google-api-php-client", "path": "src/Google/Task/Runner.php", "func_name": "Google_Task_Runner.allowedRetries", "original_string": "public function allowedRetries($code, $errors = array())\n  {\n    if (isset($this->retryMap[$code])) {\n      return $this->retryMap[$code];\n    }\n\n    if (\n        !empty($errors) &&\n        isset($errors[0]['reason'], $this->retryMap[$errors[0]['reason']])\n    ) {\n      return $this->retryMap[$errors[0]['reason']];\n    }\n\n    return 0;\n  }", "language": "php", "code": "public function allowedRetries($code, $errors = array())\n  {\n    if (isset($this->retryMap[$code])) {\n      return $this->retryMap[$code];\n    }\n\n    if (\n        !empty($errors) &&\n        isset($errors[0]['reason'], $this->retryMap[$errors[0]['reason']])\n    ) {\n      return $this->retryMap[$errors[0]['reason']];\n    }\n\n    return 0;\n  }", "code_tokens": ["public", "function", "allowedRetries", "(", "$", "code", ",", "$", "errors", "=", "array", "(", ")", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "retryMap", "[", "$", "code", "]", ")", ")", "{", "return", "$", "this", "->", "retryMap", "[", "$", "code", "]", ";", "}", "if", "(", "!", "empty", "(", "$", "errors", ")", "&&", "isset", "(", "$", "errors", "[", "0", "]", "[", "'reason'", "]", ",", "$", "this", "->", "retryMap", "[", "$", "errors", "[", "0", "]", "[", "'reason'", "]", "]", ")", ")", "{", "return", "$", "this", "->", "retryMap", "[", "$", "errors", "[", "0", "]", "[", "'reason'", "]", "]", ";", "}", "return", "0", ";", "}"], "docstring": "Gets the number of times the associated task can be retried.\n\nNOTE: -1 is returned if the task can be retried indefinitely\n\n@return integer", "docstring_tokens": ["Gets", "the", "number", "of", "times", "the", "associated", "task", "can", "be", "retried", "."], "sha": "1b76fa672c31e4cab58427f413315356682ba68a", "url": "https://github.com/googleapis/google-api-php-client/blob/1b76fa672c31e4cab58427f413315356682ba68a/src/Google/Task/Runner.php#L261-L275", "partition": "test"}
{"repo": "SobanVuex/php-newrelic", "path": "src/Agent.php", "func_name": "Agent.setUserAttributes", "original_string": "public function setUserAttributes(string $user, string $account, string $product): bool\n    {\n        if (!$this->isLoaded()) {\n            return false;\n        }\n\n        return newrelic_set_user_attributes($user, $account, $product);\n    }", "language": "php", "code": "public function setUserAttributes(string $user, string $account, string $product): bool\n    {\n        if (!$this->isLoaded()) {\n            return false;\n        }\n\n        return newrelic_set_user_attributes($user, $account, $product);\n    }", "code_tokens": ["public", "function", "setUserAttributes", "(", "string", "$", "user", ",", "string", "$", "account", ",", "string", "$", "product", ")", ":", "bool", "{", "if", "(", "!", "$", "this", "->", "isLoaded", "(", ")", ")", "{", "return", "false", ";", "}", "return", "newrelic_set_user_attributes", "(", "$", "user", ",", "$", "account", ",", "$", "product", ")", ";", "}"], "docstring": "Create user-related custom attributes. newrelic_add_custom_parameter is more flexible.\n\nAgent version 3.1.5.111 or higher.\n\n@see https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_set_user_attributes\n@see self::addCustomParameter\n\n@param string $user    Specify a name or username to associate with this page view\n@param string $account Specify the name of a user account to associate with this page view\n@param string $product Specify the name of a product to associate with this page view\n\n@return bool", "docstring_tokens": ["Create", "user", "-", "related", "custom", "attributes", ".", "newrelic_add_custom_parameter", "is", "more", "flexible", "."], "sha": "e0b1d22f2d305b5230473288933fb455cb64f6bd", "url": "https://github.com/SobanVuex/php-newrelic/blob/e0b1d22f2d305b5230473288933fb455cb64f6bd/src/Agent.php#L475-L482", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Web/ErrorHandler.php", "func_name": "ErrorHandler.isCoreFile", "original_string": "public function isCoreFile($file)\n    {\n        $corePath = Reaction::getAlias('@reaction');\n        return $file === null || strpos(realpath($file), $corePath . DIRECTORY_SEPARATOR) === 0;\n    }", "language": "php", "code": "public function isCoreFile($file)\n    {\n        $corePath = Reaction::getAlias('@reaction');\n        return $file === null || strpos(realpath($file), $corePath . DIRECTORY_SEPARATOR) === 0;\n    }", "code_tokens": ["public", "function", "isCoreFile", "(", "$", "file", ")", "{", "$", "corePath", "=", "Reaction", "::", "getAlias", "(", "'@reaction'", ")", ";", "return", "$", "file", "===", "null", "||", "strpos", "(", "realpath", "(", "$", "file", ")", ",", "$", "corePath", ".", "DIRECTORY_SEPARATOR", ")", "===", "0", ";", "}"], "docstring": "Determines whether given name of the file belongs to the framework.\n@param string $file name to be checked.\n@return bool whether given name of the file belongs to the framework.", "docstring_tokens": ["Determines", "whether", "given", "name", "of", "the", "file", "belongs", "to", "the", "framework", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Web/ErrorHandler.php#L350-L354", "partition": "test"}
{"repo": "WordPress-Coding-Standards/WordPress-Coding-Standards", "path": "WordPress/Sniff.php", "func_name": "Sniff.find_array_open_close", "original_string": "protected function find_array_open_close( $stackPtr ) {\n\t\t/*\n\t\t * Determine the array opener & closer.\n\t\t */\n\t\tif ( \\T_ARRAY === $this->tokens[ $stackPtr ]['code'] ) {\n\t\t\tif ( isset( $this->tokens[ $stackPtr ]['parenthesis_opener'] ) ) {\n\t\t\t\t$opener = $this->tokens[ $stackPtr ]['parenthesis_opener'];\n\n\t\t\t\tif ( isset( $this->tokens[ $opener ]['parenthesis_closer'] ) ) {\n\t\t\t\t\t$closer = $this->tokens[ $opener ]['parenthesis_closer'];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Short array syntax.\n\t\t\t$opener = $stackPtr;\n\n\t\t\tif ( isset( $this->tokens[ $stackPtr ]['bracket_closer'] ) ) {\n\t\t\t\t$closer = $this->tokens[ $stackPtr ]['bracket_closer'];\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $opener, $closer ) ) {\n\t\t\treturn array(\n\t\t\t\t'opener' => $opener,\n\t\t\t\t'closer' => $closer,\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}", "language": "php", "code": "protected function find_array_open_close( $stackPtr ) {\n\t\t/*\n\t\t * Determine the array opener & closer.\n\t\t */\n\t\tif ( \\T_ARRAY === $this->tokens[ $stackPtr ]['code'] ) {\n\t\t\tif ( isset( $this->tokens[ $stackPtr ]['parenthesis_opener'] ) ) {\n\t\t\t\t$opener = $this->tokens[ $stackPtr ]['parenthesis_opener'];\n\n\t\t\t\tif ( isset( $this->tokens[ $opener ]['parenthesis_closer'] ) ) {\n\t\t\t\t\t$closer = $this->tokens[ $opener ]['parenthesis_closer'];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Short array syntax.\n\t\t\t$opener = $stackPtr;\n\n\t\t\tif ( isset( $this->tokens[ $stackPtr ]['bracket_closer'] ) ) {\n\t\t\t\t$closer = $this->tokens[ $stackPtr ]['bracket_closer'];\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $opener, $closer ) ) {\n\t\t\treturn array(\n\t\t\t\t'opener' => $opener,\n\t\t\t\t'closer' => $closer,\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}", "code_tokens": ["protected", "function", "find_array_open_close", "(", "$", "stackPtr", ")", "{", "/*\n\t\t * Determine the array opener & closer.\n\t\t */", "if", "(", "\\", "T_ARRAY", "===", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'code'", "]", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'parenthesis_opener'", "]", ")", ")", "{", "$", "opener", "=", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'parenthesis_opener'", "]", ";", "if", "(", "isset", "(", "$", "this", "->", "tokens", "[", "$", "opener", "]", "[", "'parenthesis_closer'", "]", ")", ")", "{", "$", "closer", "=", "$", "this", "->", "tokens", "[", "$", "opener", "]", "[", "'parenthesis_closer'", "]", ";", "}", "}", "}", "else", "{", "// Short array syntax.", "$", "opener", "=", "$", "stackPtr", ";", "if", "(", "isset", "(", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'bracket_closer'", "]", ")", ")", "{", "$", "closer", "=", "$", "this", "->", "tokens", "[", "$", "stackPtr", "]", "[", "'bracket_closer'", "]", ";", "}", "}", "if", "(", "isset", "(", "$", "opener", ",", "$", "closer", ")", ")", "{", "return", "array", "(", "'opener'", "=>", "$", "opener", ",", "'closer'", "=>", "$", "closer", ",", ")", ";", "}", "return", "false", ";", "}"], "docstring": "Find the array opener & closer based on a T_ARRAY or T_OPEN_SHORT_ARRAY token.\n\n@since 0.12.0\n\n@param int $stackPtr The stack pointer to the array token.\n\n@return array|bool Array with two keys `opener`, `closer` or false if\neither or these could not be determined.", "docstring_tokens": ["Find", "the", "array", "opener", "&", "closer", "based", "on", "a", "T_ARRAY", "or", "T_OPEN_SHORT_ARRAY", "token", "."], "sha": "04bfa1284ca652e8e9befe82134f440cc31f655d", "url": "https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/blob/04bfa1284ca652e8e9befe82134f440cc31f655d/WordPress/Sniff.php#L2717-L2746", "partition": "test"}
{"repo": "StuartApp/stuart-client-php", "path": "src/Stuart/Job.php", "func_name": "Job.link", "original_string": "public function link($origin, $destination)\n    {\n        $delivery = new Delivery($origin, $destination);\n        $this->deliveries[] = $delivery;\n        return $delivery;\n    }", "language": "php", "code": "public function link($origin, $destination)\n    {\n        $delivery = new Delivery($origin, $destination);\n        $this->deliveries[] = $delivery;\n        return $delivery;\n    }", "code_tokens": ["public", "function", "link", "(", "$", "origin", ",", "$", "destination", ")", "{", "$", "delivery", "=", "new", "Delivery", "(", "$", "origin", ",", "$", "destination", ")", ";", "$", "this", "->", "deliveries", "[", "]", "=", "$", "delivery", ";", "return", "$", "delivery", ";", "}"], "docstring": "This method allows you to create deliveries from two locations. It's only used by the\nJsonToJob converter, you cannot create you own route.\n\n@param Location $origin\n@param Location $destination\n@return Delivery\n\n@see JsonToJob", "docstring_tokens": ["This", "method", "allows", "you", "to", "create", "deliveries", "from", "two", "locations", ".", "It", "s", "only", "used", "by", "the", "JsonToJob", "converter", "you", "cannot", "create", "you", "own", "route", "."], "sha": "34f345b57b38f58fe4b3bcf66af0d9f08875551e", "url": "https://github.com/StuartApp/stuart-client-php/blob/34f345b57b38f58fe4b3bcf66af0d9f08875551e/src/Stuart/Job.php#L58-L63", "partition": "test"}
{"repo": "techdivision/import", "path": "src/Repositories/EavAttributeRepository.php", "func_name": "EavAttributeRepository.findAllByEntityTypeId", "original_string": "public function findAllByEntityTypeId($entityTypeId)\n    {\n\n        // initialize the array for the EAV attributes\n        $eavAttributes = array();\n\n        // execute the prepared statement and return the array with the EAV attributes\n        $this->eavAttributesByEntityTypeIdAndUserDefinedStmt->execute(array(MemberNames::ENTITY_TYPE_ID  => $entityTypeId));\n\n        // load the available EAV attributes\n        $availableEavAttributes = $this->eavAttributesByEntityTypeIdAndUserDefinedStmt->fetchAll(\\PDO::FETCH_ASSOC);\n        foreach ($availableEavAttributes as $eavAttribute) {\n            $eavAttributes[$eavAttribute[MemberNames::ATTRIBUTE_CODE]] = $eavAttribute;\n        }\n\n        // return the array with the EAV attributes\n        return $eavAttributes;\n    }", "language": "php", "code": "public function findAllByEntityTypeId($entityTypeId)\n    {\n\n        // initialize the array for the EAV attributes\n        $eavAttributes = array();\n\n        // execute the prepared statement and return the array with the EAV attributes\n        $this->eavAttributesByEntityTypeIdAndUserDefinedStmt->execute(array(MemberNames::ENTITY_TYPE_ID  => $entityTypeId));\n\n        // load the available EAV attributes\n        $availableEavAttributes = $this->eavAttributesByEntityTypeIdAndUserDefinedStmt->fetchAll(\\PDO::FETCH_ASSOC);\n        foreach ($availableEavAttributes as $eavAttribute) {\n            $eavAttributes[$eavAttribute[MemberNames::ATTRIBUTE_CODE]] = $eavAttribute;\n        }\n\n        // return the array with the EAV attributes\n        return $eavAttributes;\n    }", "code_tokens": ["public", "function", "findAllByEntityTypeId", "(", "$", "entityTypeId", ")", "{", "// initialize the array for the EAV attributes", "$", "eavAttributes", "=", "array", "(", ")", ";", "// execute the prepared statement and return the array with the EAV attributes", "$", "this", "->", "eavAttributesByEntityTypeIdAndUserDefinedStmt", "->", "execute", "(", "array", "(", "MemberNames", "::", "ENTITY_TYPE_ID", "=>", "$", "entityTypeId", ")", ")", ";", "// load the available EAV attributes", "$", "availableEavAttributes", "=", "$", "this", "->", "eavAttributesByEntityTypeIdAndUserDefinedStmt", "->", "fetchAll", "(", "\\", "PDO", "::", "FETCH_ASSOC", ")", ";", "foreach", "(", "$", "availableEavAttributes", "as", "$", "eavAttribute", ")", "{", "$", "eavAttributes", "[", "$", "eavAttribute", "[", "MemberNames", "::", "ATTRIBUTE_CODE", "]", "]", "=", "$", "eavAttribute", ";", "}", "// return the array with the EAV attributes", "return", "$", "eavAttributes", ";", "}"], "docstring": "Return's an array with the available EAV attributes for the passed is entity type.\n\n@param integer $entityTypeId The entity type ID of the EAV attributes to return\n\n@return array The array with the EAV attributes matching the passed entity type", "docstring_tokens": ["Return", "s", "an", "array", "with", "the", "available", "EAV", "attributes", "for", "the", "passed", "is", "entity", "type", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/Repositories/EavAttributeRepository.php#L241-L258", "partition": "test"}
{"repo": "Codeception/robo-paracept", "path": "src/MergeReports.php", "func_name": "MergeHTMLReportsTask.updateButtons", "original_string": "private function updateButtons($dstFile){\n        $nodes = (new \\DOMXPath($dstFile))->query(\"//div[@class='layout']/table/tr[contains(@class, 'scenarioRow')]\");\n        for($i=2;$i<$nodes->length;$i+=2){\n            $n = $i/2 + 1;\n            $p = $nodes->item($i)->childNodes->item(1)->childNodes->item(1);\n            $table = $nodes->item($i+1)->childNodes->item(1)->childNodes->item(1);\n            $p->setAttribute('onclick',\"showHide('$n', this)\");\n            $table->setAttribute('id',\"stepContainer\".$n);\n        }\n    }", "language": "php", "code": "private function updateButtons($dstFile){\n        $nodes = (new \\DOMXPath($dstFile))->query(\"//div[@class='layout']/table/tr[contains(@class, 'scenarioRow')]\");\n        for($i=2;$i<$nodes->length;$i+=2){\n            $n = $i/2 + 1;\n            $p = $nodes->item($i)->childNodes->item(1)->childNodes->item(1);\n            $table = $nodes->item($i+1)->childNodes->item(1)->childNodes->item(1);\n            $p->setAttribute('onclick',\"showHide('$n', this)\");\n            $table->setAttribute('id',\"stepContainer\".$n);\n        }\n    }", "code_tokens": ["private", "function", "updateButtons", "(", "$", "dstFile", ")", "{", "$", "nodes", "=", "(", "new", "\\", "DOMXPath", "(", "$", "dstFile", ")", ")", "->", "query", "(", "\"//div[@class='layout']/table/tr[contains(@class, 'scenarioRow')]\"", ")", ";", "for", "(", "$", "i", "=", "2", ";", "$", "i", "<", "$", "nodes", "->", "length", ";", "$", "i", "+=", "2", ")", "{", "$", "n", "=", "$", "i", "/", "2", "+", "1", ";", "$", "p", "=", "$", "nodes", "->", "item", "(", "$", "i", ")", "->", "childNodes", "->", "item", "(", "1", ")", "->", "childNodes", "->", "item", "(", "1", ")", ";", "$", "table", "=", "$", "nodes", "->", "item", "(", "$", "i", "+", "1", ")", "->", "childNodes", "->", "item", "(", "1", ")", "->", "childNodes", "->", "item", "(", "1", ")", ";", "$", "p", "->", "setAttribute", "(", "'onclick'", ",", "\"showHide('$n', this)\"", ")", ";", "$", "table", "->", "setAttribute", "(", "'id'", ",", "\"stepContainer\"", ".", "$", "n", ")", ";", "}", "}"], "docstring": "This function updates \"+\" and \"-\" button for viewing test steps in final report\n@param $dstFile \\DOMDocument - destination file", "docstring_tokens": ["This", "function", "updates", "+", "and", "-", "button", "for", "viewing", "test", "steps", "in", "final", "report"], "sha": "ff00b078921ddd072122cd5e8267fdb76f92d054", "url": "https://github.com/Codeception/robo-paracept/blob/ff00b078921ddd072122cd5e8267fdb76f92d054/src/MergeReports.php#L315-L324", "partition": "test"}
{"repo": "rollerworks-graveyard/datagrid", "path": "src/Util/StringUtil.php", "func_name": "StringUtil.fqcnToBlockPrefix", "original_string": "public static function fqcnToBlockPrefix(string $fqcn): string\n    {\n        // Non-greedy (\"+?\") to match \"type\" suffix, if present\n        if (preg_match('~([^\\\\\\\\]+?)(type)?$~i', $fqcn, $matches)) {\n            return strtolower(\n                preg_replace(['/([A-Z]+)([A-Z][a-z])/', '/([a-z\\d])([A-Z])/'], ['\\\\1_\\\\2', '\\\\1_\\\\2'], $matches[1])\n            );\n        }\n    }", "language": "php", "code": "public static function fqcnToBlockPrefix(string $fqcn): string\n    {\n        // Non-greedy (\"+?\") to match \"type\" suffix, if present\n        if (preg_match('~([^\\\\\\\\]+?)(type)?$~i', $fqcn, $matches)) {\n            return strtolower(\n                preg_replace(['/([A-Z]+)([A-Z][a-z])/', '/([a-z\\d])([A-Z])/'], ['\\\\1_\\\\2', '\\\\1_\\\\2'], $matches[1])\n            );\n        }\n    }", "code_tokens": ["public", "static", "function", "fqcnToBlockPrefix", "(", "string", "$", "fqcn", ")", ":", "string", "{", "// Non-greedy (\"+?\") to match \"type\" suffix, if present", "if", "(", "preg_match", "(", "'~([^\\\\\\\\]+?)(type)?$~i'", ",", "$", "fqcn", ",", "$", "matches", ")", ")", "{", "return", "strtolower", "(", "preg_replace", "(", "[", "'/([A-Z]+)([A-Z][a-z])/'", ",", "'/([a-z\\d])([A-Z])/'", "]", ",", "[", "'\\\\1_\\\\2'", ",", "'\\\\1_\\\\2'", "]", ",", "$", "matches", "[", "1", "]", ")", ")", ";", "}", "}"], "docstring": "Converts a fully-qualified class name to a block prefix.\n\n@param string $fqcn The fully-qualified class name\n\n@return string|null The block prefix or null if not a valid FQCN", "docstring_tokens": ["Converts", "a", "fully", "-", "qualified", "class", "name", "to", "a", "block", "prefix", "."], "sha": "1b65cf2cf1bb5d3f75c99a309b6cec79d12a9831", "url": "https://github.com/rollerworks-graveyard/datagrid/blob/1b65cf2cf1bb5d3f75c99a309b6cec79d12a9831/src/Util/StringUtil.php#L52-L60", "partition": "test"}
{"repo": "hanneskod/libmergepdf", "path": "src/Pages.php", "func_name": "Pages.addRange", "original_string": "public function addRange(int $start, int $end): void\n    {\n        $this->pages = array_merge($this->pages, range($start, $end));\n    }", "language": "php", "code": "public function addRange(int $start, int $end): void\n    {\n        $this->pages = array_merge($this->pages, range($start, $end));\n    }", "code_tokens": ["public", "function", "addRange", "(", "int", "$", "start", ",", "int", "$", "end", ")", ":", "void", "{", "$", "this", "->", "pages", "=", "array_merge", "(", "$", "this", "->", "pages", ",", "range", "(", "$", "start", ",", "$", "end", ")", ")", ";", "}"], "docstring": "Add a range of pages", "docstring_tokens": ["Add", "a", "range", "of", "pages"], "sha": "338cb450328514cc7340fb029fe416ac0b891dd2", "url": "https://github.com/hanneskod/libmergepdf/blob/338cb450328514cc7340fb029fe416ac0b891dd2/src/Pages.php#L58-L61", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Annotations/NativeAnnotations.php", "func_name": "NativeAnnotations.propertyAnnotationsType", "original_string": "public function propertyAnnotationsType(string $type, string $class, string $property): array\n    {\n        return $this->filterAnnotationsByType(\n            $type,\n            ...$this->propertyAnnotations(\n            $class,\n            $property\n        )\n        );\n    }", "language": "php", "code": "public function propertyAnnotationsType(string $type, string $class, string $property): array\n    {\n        return $this->filterAnnotationsByType(\n            $type,\n            ...$this->propertyAnnotations(\n            $class,\n            $property\n        )\n        );\n    }", "code_tokens": ["public", "function", "propertyAnnotationsType", "(", "string", "$", "type", ",", "string", "$", "class", ",", "string", "$", "property", ")", ":", "array", "{", "return", "$", "this", "->", "filterAnnotationsByType", "(", "$", "type", ",", "...", "$", "this", "->", "propertyAnnotations", "(", "$", "class", ",", "$", "property", ")", ")", ";", "}"], "docstring": "Get a property's annotations by type.\n\n@param string $type     The type\n@param string $class    The class\n@param string $property The property\n\n@throws \\ReflectionException\n\n@return \\Valkyrja\\Annotations\\Annotation[]", "docstring_tokens": ["Get", "a", "property", "s", "annotations", "by", "type", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Annotations/NativeAnnotations.php#L265-L274", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/EventArchive.php", "func_name": "EventArchive.eventFilterWhere", "original_string": "public function eventFilterWhere($where)\n    {\n        $from = null;\n        $to = null;\n\n        if (isset($_GET['from']) && !empty($_GET['from'])) {\n            $from = sanitize_text_field($_GET['from']);\n        }\n\n        if (isset($_GET['to']) && !empty($_GET['to'])) {\n            $to = date('Y-m-d', strtotime(\"+1 day\", strtotime(sanitize_text_field($_GET['to']))));\n        }\n\n        if (!is_null($from) && !is_null($to)) {\n            // USE BETWEEN ON START DATE\n            $where = str_replace(\n                \"{$this->db->posts}.post_date >= '{$from}'\",\n                \"{$this->dbTable}.start_date BETWEEN CAST('{$from}' AS DATE) AND CAST('{$to}' AS DATE)\",\n                $where\n            );\n            $where = str_replace(\n                \"AND {$this->db->posts}.post_date <= '{$to}'\",\n                \"\",\n                $where\n            );\n        } elseif (!is_null($from) || !is_null($to)) {\n            // USE FROM OR TO\n            $where = str_replace(\"{$this->db->posts}.post_date >=\", \"{$this->dbTable}.start_date >=\", $where);\n            $where = str_replace(\"{$this->db->posts}.post_date <=\", \"{$this->dbTable}.end_date <=\", $where);\n        }\n\n        return $where;\n    }", "language": "php", "code": "public function eventFilterWhere($where)\n    {\n        $from = null;\n        $to = null;\n\n        if (isset($_GET['from']) && !empty($_GET['from'])) {\n            $from = sanitize_text_field($_GET['from']);\n        }\n\n        if (isset($_GET['to']) && !empty($_GET['to'])) {\n            $to = date('Y-m-d', strtotime(\"+1 day\", strtotime(sanitize_text_field($_GET['to']))));\n        }\n\n        if (!is_null($from) && !is_null($to)) {\n            // USE BETWEEN ON START DATE\n            $where = str_replace(\n                \"{$this->db->posts}.post_date >= '{$from}'\",\n                \"{$this->dbTable}.start_date BETWEEN CAST('{$from}' AS DATE) AND CAST('{$to}' AS DATE)\",\n                $where\n            );\n            $where = str_replace(\n                \"AND {$this->db->posts}.post_date <= '{$to}'\",\n                \"\",\n                $where\n            );\n        } elseif (!is_null($from) || !is_null($to)) {\n            // USE FROM OR TO\n            $where = str_replace(\"{$this->db->posts}.post_date >=\", \"{$this->dbTable}.start_date >=\", $where);\n            $where = str_replace(\"{$this->db->posts}.post_date <=\", \"{$this->dbTable}.end_date <=\", $where);\n        }\n\n        return $where;\n    }", "code_tokens": ["public", "function", "eventFilterWhere", "(", "$", "where", ")", "{", "$", "from", "=", "null", ";", "$", "to", "=", "null", ";", "if", "(", "isset", "(", "$", "_GET", "[", "'from'", "]", ")", "&&", "!", "empty", "(", "$", "_GET", "[", "'from'", "]", ")", ")", "{", "$", "from", "=", "sanitize_text_field", "(", "$", "_GET", "[", "'from'", "]", ")", ";", "}", "if", "(", "isset", "(", "$", "_GET", "[", "'to'", "]", ")", "&&", "!", "empty", "(", "$", "_GET", "[", "'to'", "]", ")", ")", "{", "$", "to", "=", "date", "(", "'Y-m-d'", ",", "strtotime", "(", "\"+1 day\"", ",", "strtotime", "(", "sanitize_text_field", "(", "$", "_GET", "[", "'to'", "]", ")", ")", ")", ")", ";", "}", "if", "(", "!", "is_null", "(", "$", "from", ")", "&&", "!", "is_null", "(", "$", "to", ")", ")", "{", "// USE BETWEEN ON START DATE", "$", "where", "=", "str_replace", "(", "\"{$this->db->posts}.post_date >= '{$from}'\"", ",", "\"{$this->dbTable}.start_date BETWEEN CAST('{$from}' AS DATE) AND CAST('{$to}' AS DATE)\"", ",", "$", "where", ")", ";", "$", "where", "=", "str_replace", "(", "\"AND {$this->db->posts}.post_date <= '{$to}'\"", ",", "\"\"", ",", "$", "where", ")", ";", "}", "elseif", "(", "!", "is_null", "(", "$", "from", ")", "||", "!", "is_null", "(", "$", "to", ")", ")", "{", "// USE FROM OR TO", "$", "where", "=", "str_replace", "(", "\"{$this->db->posts}.post_date >=\"", ",", "\"{$this->dbTable}.start_date >=\"", ",", "$", "where", ")", ";", "$", "where", "=", "str_replace", "(", "\"{$this->db->posts}.post_date <=\"", ",", "\"{$this->dbTable}.end_date <=\"", ",", "$", "where", ")", ";", "}", "return", "$", "where", ";", "}"], "docstring": "Add where statements\n@param  string $where current where statement\n@return string        updated statement", "docstring_tokens": ["Add", "where", "statements"], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/EventArchive.php#L100-L132", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/properties/class-papi-property-term.php", "func_name": "Papi_Property_Term.get_term_value", "original_string": "protected function get_term_value( $term ) {\n\t\t$meta_key = $this->get_setting( 'meta_key' );\n\n\t\tif ( is_numeric( $term ) ) {\n\t\t\t$term_id = $term;\n\t\t} else {\n\t\t\t$term = get_term( $term );\n\n\t\t\tif ( $term instanceof WP_Term === false ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t$term_id = $term->term_id;\n\t\t}\n\n\t\tif ( ! empty( $meta_key ) ) {\n\t\t\t$value = get_term_meta( $term_id, $meta_key, true );\n\t\t} else {\n\t\t\t$value = $term_id;\n\t\t}\n\n\t\treturn $value;\n\t}", "language": "php", "code": "protected function get_term_value( $term ) {\n\t\t$meta_key = $this->get_setting( 'meta_key' );\n\n\t\tif ( is_numeric( $term ) ) {\n\t\t\t$term_id = $term;\n\t\t} else {\n\t\t\t$term = get_term( $term );\n\n\t\t\tif ( $term instanceof WP_Term === false ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t$term_id = $term->term_id;\n\t\t}\n\n\t\tif ( ! empty( $meta_key ) ) {\n\t\t\t$value = get_term_meta( $term_id, $meta_key, true );\n\t\t} else {\n\t\t\t$value = $term_id;\n\t\t}\n\n\t\treturn $value;\n\t}", "code_tokens": ["protected", "function", "get_term_value", "(", "$", "term", ")", "{", "$", "meta_key", "=", "$", "this", "->", "get_setting", "(", "'meta_key'", ")", ";", "if", "(", "is_numeric", "(", "$", "term", ")", ")", "{", "$", "term_id", "=", "$", "term", ";", "}", "else", "{", "$", "term", "=", "get_term", "(", "$", "term", ")", ";", "if", "(", "$", "term", "instanceof", "WP_Term", "===", "false", ")", "{", "return", "0", ";", "}", "$", "term_id", "=", "$", "term", "->", "term_id", ";", "}", "if", "(", "!", "empty", "(", "$", "meta_key", ")", ")", "{", "$", "value", "=", "get_term_meta", "(", "$", "term_id", ",", "$", "meta_key", ",", "true", ")", ";", "}", "else", "{", "$", "value", "=", "$", "term_id", ";", "}", "return", "$", "value", ";", "}"], "docstring": "Get matching value based on key from a term.\n\n@param  mixed $term\n\n@return mixed", "docstring_tokens": ["Get", "matching", "value", "based", "on", "key", "from", "a", "term", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/properties/class-papi-property-term.php#L140-L162", "partition": "test"}
{"repo": "sleeping-owl/admin", "path": "src/SleepingOwl/Admin/Router.php", "func_name": "Router.registerAuthRoutes", "original_string": "protected function registerAuthRoutes()\n\t{\n\t\t$this->laravelRouter->group([\n\t\t\t'prefix'    => $this->prefix,\n\t\t\t'namespace' => 'SleepingOwl\\Admin\\Controllers'\n\t\t], function ()\n\t\t{\n\t\t\t$this->laravelRouter->get('login', [\n\t\t\t\t'as'   => $this->routePrefix . '.login',\n\t\t\t\t'uses' => 'AuthController@getLogin'\n\t\t\t]);\n\t\t\t$this->laravelRouter->post('login', [\n\t\t\t\t'as'   => $this->routePrefix . '.login.post',\n\t\t\t\t'uses' => 'AuthController@postLogin'\n\t\t\t])->before('csrf');\n\t\t\t$this->laravelRouter->get('logout', [\n\t\t\t\t'as'   => $this->routePrefix . '.logout',\n\t\t\t\t'uses' => 'AuthController@getLogout'\n\t\t\t]);\n\t\t});\n\t}", "language": "php", "code": "protected function registerAuthRoutes()\n\t{\n\t\t$this->laravelRouter->group([\n\t\t\t'prefix'    => $this->prefix,\n\t\t\t'namespace' => 'SleepingOwl\\Admin\\Controllers'\n\t\t], function ()\n\t\t{\n\t\t\t$this->laravelRouter->get('login', [\n\t\t\t\t'as'   => $this->routePrefix . '.login',\n\t\t\t\t'uses' => 'AuthController@getLogin'\n\t\t\t]);\n\t\t\t$this->laravelRouter->post('login', [\n\t\t\t\t'as'   => $this->routePrefix . '.login.post',\n\t\t\t\t'uses' => 'AuthController@postLogin'\n\t\t\t])->before('csrf');\n\t\t\t$this->laravelRouter->get('logout', [\n\t\t\t\t'as'   => $this->routePrefix . '.logout',\n\t\t\t\t'uses' => 'AuthController@getLogout'\n\t\t\t]);\n\t\t});\n\t}", "code_tokens": ["protected", "function", "registerAuthRoutes", "(", ")", "{", "$", "this", "->", "laravelRouter", "->", "group", "(", "[", "'prefix'", "=>", "$", "this", "->", "prefix", ",", "'namespace'", "=>", "'SleepingOwl\\Admin\\Controllers'", "]", ",", "function", "(", ")", "{", "$", "this", "->", "laravelRouter", "->", "get", "(", "'login'", ",", "[", "'as'", "=>", "$", "this", "->", "routePrefix", ".", "'.login'", ",", "'uses'", "=>", "'AuthController@getLogin'", "]", ")", ";", "$", "this", "->", "laravelRouter", "->", "post", "(", "'login'", ",", "[", "'as'", "=>", "$", "this", "->", "routePrefix", ".", "'.login.post'", ",", "'uses'", "=>", "'AuthController@postLogin'", "]", ")", "->", "before", "(", "'csrf'", ")", ";", "$", "this", "->", "laravelRouter", "->", "get", "(", "'logout'", ",", "[", "'as'", "=>", "$", "this", "->", "routePrefix", ".", "'.logout'", ",", "'uses'", "=>", "'AuthController@getLogout'", "]", ")", ";", "}", ")", ";", "}"], "docstring": "Register login and logout routes", "docstring_tokens": ["Register", "login", "and", "logout", "routes"], "sha": "eed0001a84e7e6b6e84aa117403ac11b5c7d227b", "url": "https://github.com/sleeping-owl/admin/blob/eed0001a84e7e6b6e84aa117403ac11b5c7d227b/src/SleepingOwl/Admin/Router.php#L177-L197", "partition": "test"}
{"repo": "wp-cli/i18n-command", "path": "src/IterableCodeExtractor.php", "func_name": "IterableCodeExtractor.containsMatchingChildren", "original_string": "protected static function containsMatchingChildren( SplFileInfo $dir, array $matchers = [] ) {\n\t\tif ( empty( $matchers ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/** @var string $root_relative_path */\n\t\t$root_relative_path = str_replace( static::$dir, '', $dir->getPathname() );\n\n\t\tforeach ( $matchers as $path_or_file ) {\n\t\t\t// If the matcher contains no wildcards and the path matches the start of the matcher.\n\t\t\tif (\n\t\t\t\t'' !== $root_relative_path &&\n\t\t\t\tfalse === strpos( $path_or_file, '*' ) &&\n\t\t\t\t0 === strpos( $path_or_file . '/', $root_relative_path )\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t$base = current( explode( '*', $path_or_file ) );\n\n\t\t\t// If start of the path matches the start of the matcher until the first wildcard.\n\t\t\t// Or the start of the matcher until the first wildcard matches the start of the path.\n\t\t\tif (\n\t\t\t\t( '' !== $root_relative_path && 0 === strpos( $base, $root_relative_path ) ) ||\n\t\t\t\t0 === strpos( $root_relative_path, $base )\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "language": "php", "code": "protected static function containsMatchingChildren( SplFileInfo $dir, array $matchers = [] ) {\n\t\tif ( empty( $matchers ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/** @var string $root_relative_path */\n\t\t$root_relative_path = str_replace( static::$dir, '', $dir->getPathname() );\n\n\t\tforeach ( $matchers as $path_or_file ) {\n\t\t\t// If the matcher contains no wildcards and the path matches the start of the matcher.\n\t\t\tif (\n\t\t\t\t'' !== $root_relative_path &&\n\t\t\t\tfalse === strpos( $path_or_file, '*' ) &&\n\t\t\t\t0 === strpos( $path_or_file . '/', $root_relative_path )\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t$base = current( explode( '*', $path_or_file ) );\n\n\t\t\t// If start of the path matches the start of the matcher until the first wildcard.\n\t\t\t// Or the start of the matcher until the first wildcard matches the start of the path.\n\t\t\tif (\n\t\t\t\t( '' !== $root_relative_path && 0 === strpos( $base, $root_relative_path ) ) ||\n\t\t\t\t0 === strpos( $root_relative_path, $base )\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}", "code_tokens": ["protected", "static", "function", "containsMatchingChildren", "(", "SplFileInfo", "$", "dir", ",", "array", "$", "matchers", "=", "[", "]", ")", "{", "if", "(", "empty", "(", "$", "matchers", ")", ")", "{", "return", "false", ";", "}", "/** @var string $root_relative_path */", "$", "root_relative_path", "=", "str_replace", "(", "static", "::", "$", "dir", ",", "''", ",", "$", "dir", "->", "getPathname", "(", ")", ")", ";", "foreach", "(", "$", "matchers", "as", "$", "path_or_file", ")", "{", "// If the matcher contains no wildcards and the path matches the start of the matcher.", "if", "(", "''", "!==", "$", "root_relative_path", "&&", "false", "===", "strpos", "(", "$", "path_or_file", ",", "'*'", ")", "&&", "0", "===", "strpos", "(", "$", "path_or_file", ".", "'/'", ",", "$", "root_relative_path", ")", ")", "{", "return", "true", ";", "}", "$", "base", "=", "current", "(", "explode", "(", "'*'", ",", "$", "path_or_file", ")", ")", ";", "// If start of the path matches the start of the matcher until the first wildcard.", "// Or the start of the matcher until the first wildcard matches the start of the path.", "if", "(", "(", "''", "!==", "$", "root_relative_path", "&&", "0", "===", "strpos", "(", "$", "base", ",", "$", "root_relative_path", ")", ")", "||", "0", "===", "strpos", "(", "$", "root_relative_path", ",", "$", "base", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Determines whether or not a directory has children that may be matched.\n\n@param SplFileInfo $dir      Directory.\n@param array       $matchers List of files and directories to match.\n@return bool Whether or not there are any matchers for children of this directory.", "docstring_tokens": ["Determines", "whether", "or", "not", "a", "directory", "has", "children", "that", "may", "be", "matched", "."], "sha": "e52a9a602772339a0f844bd5e9a9ac8cc8b490ea", "url": "https://github.com/wp-cli/i18n-command/blob/e52a9a602772339a0f844bd5e9a9ac8cc8b490ea/src/IterableCodeExtractor.php#L155-L186", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/PEAR/ChannelFile.php", "func_name": "PEAR_ChannelFile._validateError", "original_string": "function _validateError($code, $params = array())\n    {\n        $this->_stack->push($code, 'error', $params);\n        $this->_isValid = false;\n    }", "language": "php", "code": "function _validateError($code, $params = array())\n    {\n        $this->_stack->push($code, 'error', $params);\n        $this->_isValid = false;\n    }", "code_tokens": ["function", "_validateError", "(", "$", "code", ",", "$", "params", "=", "array", "(", ")", ")", "{", "$", "this", "->", "_stack", "->", "push", "(", "$", "code", ",", "'error'", ",", "$", "params", ")", ";", "$", "this", "->", "_isValid", "=", "false", ";", "}"], "docstring": "Validation error.  Also marks the object contents as invalid\n@param error code\n@param array error information\n@access private", "docstring_tokens": ["Validation", "error", ".", "Also", "marks", "the", "object", "contents", "as", "invalid"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/PEAR/ChannelFile.php#L572-L576", "partition": "test"}
{"repo": "MichaelRShelton/middleman", "path": "src/Middleware.php", "func_name": "Middleware.handle", "original_string": "public function handle(array &$arguments, string $callType = Caller::TYPE_DEFAULT)\n    {\n        if ($this->isValid()) {\n            $this->callType = $callType;\n            $method = $this->getMethod();\n            $context = $this->getContext();\n            return $context->$method(...$arguments);\n        }\n    }", "language": "php", "code": "public function handle(array &$arguments, string $callType = Caller::TYPE_DEFAULT)\n    {\n        if ($this->isValid()) {\n            $this->callType = $callType;\n            $method = $this->getMethod();\n            $context = $this->getContext();\n            return $context->$method(...$arguments);\n        }\n    }", "code_tokens": ["public", "function", "handle", "(", "array", "&", "$", "arguments", ",", "string", "$", "callType", "=", "Caller", "::", "TYPE_DEFAULT", ")", "{", "if", "(", "$", "this", "->", "isValid", "(", ")", ")", "{", "$", "this", "->", "callType", "=", "$", "callType", ";", "$", "method", "=", "$", "this", "->", "getMethod", "(", ")", ";", "$", "context", "=", "$", "this", "->", "getContext", "(", ")", ";", "return", "$", "context", "->", "$", "method", "(", "...", "$", "arguments", ")", ";", "}", "}"], "docstring": "Handle the arguments passed to the middleware and return the new response.\nBy default, this will automatically try to call a class method that corresponds\nto the method named give to the object.\n\n@param array $arguments\n@return null", "docstring_tokens": ["Handle", "the", "arguments", "passed", "to", "the", "middleware", "and", "return", "the", "new", "response", ".", "By", "default", "this", "will", "automatically", "try", "to", "call", "a", "class", "method", "that", "corresponds", "to", "the", "method", "named", "give", "to", "the", "object", "."], "sha": "b67140be2f39a32a27f5a0a9b2498ab3444835ba", "url": "https://github.com/MichaelRShelton/middleman/blob/b67140be2f39a32a27f5a0a9b2498ab3444835ba/src/Middleware.php#L102-L110", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Config/BaseService.php", "func_name": "BaseService.autoloader", "original_string": "public static function autoloader(bool $getShared = true)\n\t{\n\t\tif ($getShared)\n\t\t{\n\t\t\tif (empty(static::$instances['autoloader']))\n\t\t\t{\n\t\t\t\tstatic::$instances['autoloader'] = new Autoloader();\n\t\t\t}\n\n\t\t\treturn static::$instances['autoloader'];\n\t\t}\n\n\t\treturn new Autoloader();\n\t}", "language": "php", "code": "public static function autoloader(bool $getShared = true)\n\t{\n\t\tif ($getShared)\n\t\t{\n\t\t\tif (empty(static::$instances['autoloader']))\n\t\t\t{\n\t\t\t\tstatic::$instances['autoloader'] = new Autoloader();\n\t\t\t}\n\n\t\t\treturn static::$instances['autoloader'];\n\t\t}\n\n\t\treturn new Autoloader();\n\t}", "code_tokens": ["public", "static", "function", "autoloader", "(", "bool", "$", "getShared", "=", "true", ")", "{", "if", "(", "$", "getShared", ")", "{", "if", "(", "empty", "(", "static", "::", "$", "instances", "[", "'autoloader'", "]", ")", ")", "{", "static", "::", "$", "instances", "[", "'autoloader'", "]", "=", "new", "Autoloader", "(", ")", ";", "}", "return", "static", "::", "$", "instances", "[", "'autoloader'", "]", ";", "}", "return", "new", "Autoloader", "(", ")", ";", "}"], "docstring": "The Autoloader class is the central class that handles our\nspl_autoload_register method, and helper methods.\n\n@param boolean $getShared\n\n@return \\CodeIgniter\\Autoloader\\Autoloader", "docstring_tokens": ["The", "Autoloader", "class", "is", "the", "central", "class", "that", "handles", "our", "spl_autoload_register", "method", "and", "helper", "methods", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Config/BaseService.php#L135-L148", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/UrlQuery.php", "func_name": "UrlQuery.parse", "original_string": "public function parse(string $qs_url_uri): array\n    {\n        $qs = $this->string($qs_url_uri);\n\n        parse_str($qs, $args); // Possible `0`.\n        // Note that `0` becomes `[0 => '']`.\n\n        return $args;\n    }", "language": "php", "code": "public function parse(string $qs_url_uri): array\n    {\n        $qs = $this->string($qs_url_uri);\n\n        parse_str($qs, $args); // Possible `0`.\n        // Note that `0` becomes `[0 => '']`.\n\n        return $args;\n    }", "code_tokens": ["public", "function", "parse", "(", "string", "$", "qs_url_uri", ")", ":", "array", "{", "$", "qs", "=", "$", "this", "->", "string", "(", "$", "qs_url_uri", ")", ";", "parse_str", "(", "$", "qs", ",", "$", "args", ")", ";", "// Possible `0`.", "// Note that `0` becomes `[0 => '']`.", "return", "$", "args", ";", "}"], "docstring": "Array from query vars.\n\n@since 150424 Initial release.\n\n@param string $qs_url_uri A query string (w/ or w/o a leading `?`), a URL, or URI.\n\n@return array An array of args; based on the `$qs_url_uri` value.", "docstring_tokens": ["Array", "from", "query", "vars", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/UrlQuery.php#L66-L74", "partition": "test"}
{"repo": "helsingborg-stad/api-event-manager-integration", "path": "source/php/Api/Events.php", "func_name": "Events.sanitizeEndDate", "original_string": "public function sanitizeEndDate($data)\n    {\n        $data = strtotime($data);\n\n        if ($data == false) {\n            $data = strtotime('today midnight');\n        }\n\n        $data = strtotime('+1 day', $data) - 1;\n\n        return date('Y-m-d H:i:s', $data);\n    }", "language": "php", "code": "public function sanitizeEndDate($data)\n    {\n        $data = strtotime($data);\n\n        if ($data == false) {\n            $data = strtotime('today midnight');\n        }\n\n        $data = strtotime('+1 day', $data) - 1;\n\n        return date('Y-m-d H:i:s', $data);\n    }", "code_tokens": ["public", "function", "sanitizeEndDate", "(", "$", "data", ")", "{", "$", "data", "=", "strtotime", "(", "$", "data", ")", ";", "if", "(", "$", "data", "==", "false", ")", "{", "$", "data", "=", "strtotime", "(", "'today midnight'", ")", ";", "}", "$", "data", "=", "strtotime", "(", "'+1 day'", ",", "$", "data", ")", "-", "1", ";", "return", "date", "(", "'Y-m-d H:i:s'", ",", "$", "data", ")", ";", "}"], "docstring": "Sanitize end date. Add 1 day to include events occurring on end date\n@param $data\n@return int", "docstring_tokens": ["Sanitize", "end", "date", ".", "Add", "1", "day", "to", "include", "events", "occurring", "on", "end", "date"], "sha": "d29a177f3973eaebd506e4356d45462e6f2a712b", "url": "https://github.com/helsingborg-stad/api-event-manager-integration/blob/d29a177f3973eaebd506e4356d45462e6f2a712b/source/php/Api/Events.php#L155-L166", "partition": "test"}
{"repo": "tastyigniter/flame", "path": "src/ActivityLog/Traits/LogsActivity.php", "func_name": "LogsActivity.eventsToBeRecorded", "original_string": "protected static function eventsToBeRecorded()\n    {\n        if (isset(static::$recordEvents)) {\n            return collect(static::$recordEvents);\n        }\n\n        $events = collect([\n            'created',\n            'updated',\n            'deleted',\n        ]);\n\n        if (collect(class_uses(__CLASS__))->contains(SoftDeletes::class)) {\n            $events->push('restored');\n        }\n\n        return $events;\n    }", "language": "php", "code": "protected static function eventsToBeRecorded()\n    {\n        if (isset(static::$recordEvents)) {\n            return collect(static::$recordEvents);\n        }\n\n        $events = collect([\n            'created',\n            'updated',\n            'deleted',\n        ]);\n\n        if (collect(class_uses(__CLASS__))->contains(SoftDeletes::class)) {\n            $events->push('restored');\n        }\n\n        return $events;\n    }", "code_tokens": ["protected", "static", "function", "eventsToBeRecorded", "(", ")", "{", "if", "(", "isset", "(", "static", "::", "$", "recordEvents", ")", ")", "{", "return", "collect", "(", "static", "::", "$", "recordEvents", ")", ";", "}", "$", "events", "=", "collect", "(", "[", "'created'", ",", "'updated'", ",", "'deleted'", ",", "]", ")", ";", "if", "(", "collect", "(", "class_uses", "(", "__CLASS__", ")", ")", "->", "contains", "(", "SoftDeletes", "::", "class", ")", ")", "{", "$", "events", "->", "push", "(", "'restored'", ")", ";", "}", "return", "$", "events", ";", "}"], "docstring": "Get the event names that should be recorded.", "docstring_tokens": ["Get", "the", "event", "names", "that", "should", "be", "recorded", "."], "sha": "3c922ba1c02b3c14ad4adf91c2f37498045fa92a", "url": "https://github.com/tastyigniter/flame/blob/3c922ba1c02b3c14ad4adf91c2f37498045fa92a/src/ActivityLog/Traits/LogsActivity.php#L102-L119", "partition": "test"}
{"repo": "foush/common", "path": "module/FzyCommon/src/FzyCommon/Service/Search/Base/DQL.php", "func_name": "DQL.safeJoin", "original_string": "public function safeJoin(QueryBuilder $qb, $property, $joinedAlias, $autoAlias = true)\n    {\n        if ($autoAlias) {\n            $property = $this->alias($property);\n        }\n        if (!isset($this->joinMap[$property])) {\n            $qb->join($property, $joinedAlias);\n            $this->joinMap[$property] = $joinedAlias;\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function safeJoin(QueryBuilder $qb, $property, $joinedAlias, $autoAlias = true)\n    {\n        if ($autoAlias) {\n            $property = $this->alias($property);\n        }\n        if (!isset($this->joinMap[$property])) {\n            $qb->join($property, $joinedAlias);\n            $this->joinMap[$property] = $joinedAlias;\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "safeJoin", "(", "QueryBuilder", "$", "qb", ",", "$", "property", ",", "$", "joinedAlias", ",", "$", "autoAlias", "=", "true", ")", "{", "if", "(", "$", "autoAlias", ")", "{", "$", "property", "=", "$", "this", "->", "alias", "(", "$", "property", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "this", "->", "joinMap", "[", "$", "property", "]", ")", ")", "{", "$", "qb", "->", "join", "(", "$", "property", ",", "$", "joinedAlias", ")", ";", "$", "this", "->", "joinMap", "[", "$", "property", "]", "=", "$", "joinedAlias", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Allows you to track which tables you have already joined on this query\n\n@param QueryBuilder $qb\n@param $property\n@param $joinedAlias\n@param bool         $autoAlias\n\n@return $this", "docstring_tokens": ["Allows", "you", "to", "track", "which", "tables", "you", "have", "already", "joined", "on", "this", "query"], "sha": "881dd0f487f4a3124f789f4ad3392a2cc350308d", "url": "https://github.com/foush/common/blob/881dd0f487f4a3124f789f4ad3392a2cc350308d/module/FzyCommon/src/FzyCommon/Service/Search/Base/DQL.php#L336-L347", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/admin/class-papi-admin-ajax.php", "func_name": "Papi_Admin_Ajax.get_properties", "original_string": "public function get_properties() {\n\t\tif ( ! papi_get_sanitized_post( 'properties' ) ) {\n\t\t\t$this->render_error( 'No properties found' );\n\n\t\t\treturn;\n\t\t}\n\n\t\t$items = json_decode( stripslashes( $_POST['properties'] ), true );\n\n\t\tif ( empty( $items ) || ! is_array( $items ) ) {\n\t\t\t$this->render_error( 'No properties found' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tforeach ( $items as $key => $item ) {\n\t\t\t$property = papi_property( (array) $item );\n\n\t\t\tif ( ! papi_is_property( $property ) ) {\n\t\t\t\tunset( $items[$key] );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tob_start();\n\n\t\t\t$property->render_ajax_request();\n\n\t\t\t$items[$key] = trim( ob_get_clean() );\n\t\t}\n\n\t\t$items = array_filter( $items );\n\n\t\tif ( empty( $items ) ) {\n\t\t\t$this->render_error( 'No properties found' );\n\n\t\t\treturn;\n\t\t}\n\n\t\twp_send_json( [\n\t\t\t'html' => $items\n\t\t] );\n\t}", "language": "php", "code": "public function get_properties() {\n\t\tif ( ! papi_get_sanitized_post( 'properties' ) ) {\n\t\t\t$this->render_error( 'No properties found' );\n\n\t\t\treturn;\n\t\t}\n\n\t\t$items = json_decode( stripslashes( $_POST['properties'] ), true );\n\n\t\tif ( empty( $items ) || ! is_array( $items ) ) {\n\t\t\t$this->render_error( 'No properties found' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tforeach ( $items as $key => $item ) {\n\t\t\t$property = papi_property( (array) $item );\n\n\t\t\tif ( ! papi_is_property( $property ) ) {\n\t\t\t\tunset( $items[$key] );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tob_start();\n\n\t\t\t$property->render_ajax_request();\n\n\t\t\t$items[$key] = trim( ob_get_clean() );\n\t\t}\n\n\t\t$items = array_filter( $items );\n\n\t\tif ( empty( $items ) ) {\n\t\t\t$this->render_error( 'No properties found' );\n\n\t\t\treturn;\n\t\t}\n\n\t\twp_send_json( [\n\t\t\t'html' => $items\n\t\t] );\n\t}", "code_tokens": ["public", "function", "get_properties", "(", ")", "{", "if", "(", "!", "papi_get_sanitized_post", "(", "'properties'", ")", ")", "{", "$", "this", "->", "render_error", "(", "'No properties found'", ")", ";", "return", ";", "}", "$", "items", "=", "json_decode", "(", "stripslashes", "(", "$", "_POST", "[", "'properties'", "]", ")", ",", "true", ")", ";", "if", "(", "empty", "(", "$", "items", ")", "||", "!", "is_array", "(", "$", "items", ")", ")", "{", "$", "this", "->", "render_error", "(", "'No properties found'", ")", ";", "return", ";", "}", "foreach", "(", "$", "items", "as", "$", "key", "=>", "$", "item", ")", "{", "$", "property", "=", "papi_property", "(", "(", "array", ")", "$", "item", ")", ";", "if", "(", "!", "papi_is_property", "(", "$", "property", ")", ")", "{", "unset", "(", "$", "items", "[", "$", "key", "]", ")", ";", "continue", ";", "}", "ob_start", "(", ")", ";", "$", "property", "->", "render_ajax_request", "(", ")", ";", "$", "items", "[", "$", "key", "]", "=", "trim", "(", "ob_get_clean", "(", ")", ")", ";", "}", "$", "items", "=", "array_filter", "(", "$", "items", ")", ";", "if", "(", "empty", "(", "$", "items", ")", ")", "{", "$", "this", "->", "render_error", "(", "'No properties found'", ")", ";", "return", ";", "}", "wp_send_json", "(", "[", "'html'", "=>", "$", "items", "]", ")", ";", "}"], "docstring": "Get properties via POST.\n\nPOST /papi-ajax/?action=get_properties", "docstring_tokens": ["Get", "properties", "via", "POST", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/admin/class-papi-admin-ajax.php#L181-L222", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Database/Query.php", "func_name": "Query.swapPrefix", "original_string": "public function swapPrefix(string $orig, string $swap)\n\t{\n\t\t$sql = empty($this->finalQueryString) ? $this->originalQueryString : $this->finalQueryString;\n\n\t\t$this->finalQueryString = preg_replace('/(\\W)' . $orig . '(\\S+?)/', '\\\\1' . $swap . '\\\\2', $sql);\n\n\t\treturn $this;\n\t}", "language": "php", "code": "public function swapPrefix(string $orig, string $swap)\n\t{\n\t\t$sql = empty($this->finalQueryString) ? $this->originalQueryString : $this->finalQueryString;\n\n\t\t$this->finalQueryString = preg_replace('/(\\W)' . $orig . '(\\S+?)/', '\\\\1' . $swap . '\\\\2', $sql);\n\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "swapPrefix", "(", "string", "$", "orig", ",", "string", "$", "swap", ")", "{", "$", "sql", "=", "empty", "(", "$", "this", "->", "finalQueryString", ")", "?", "$", "this", "->", "originalQueryString", ":", "$", "this", "->", "finalQueryString", ";", "$", "this", "->", "finalQueryString", "=", "preg_replace", "(", "'/(\\W)'", ".", "$", "orig", ".", "'(\\S+?)/'", ",", "'\\\\1'", ".", "$", "swap", ".", "'\\\\2'", ",", "$", "sql", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Swaps out one table prefix for a new one.\n\n@param string $orig\n@param string $swap\n\n@return $this", "docstring_tokens": ["Swaps", "out", "one", "table", "prefix", "for", "a", "new", "one", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Database/Query.php#L338-L345", "partition": "test"}
{"repo": "mikecao/flight", "path": "flight/Engine.php", "func_name": "Engine.register", "original_string": "public function register($name, $class, array $params = array(), $callback = null) {\n        if (method_exists($this, $name)) {\n            throw new \\Exception('Cannot override an existing framework method.');\n        }\n\n        $this->loader->register($name, $class, $params, $callback);\n    }", "language": "php", "code": "public function register($name, $class, array $params = array(), $callback = null) {\n        if (method_exists($this, $name)) {\n            throw new \\Exception('Cannot override an existing framework method.');\n        }\n\n        $this->loader->register($name, $class, $params, $callback);\n    }", "code_tokens": ["public", "function", "register", "(", "$", "name", ",", "$", "class", ",", "array", "$", "params", "=", "array", "(", ")", ",", "$", "callback", "=", "null", ")", "{", "if", "(", "method_exists", "(", "$", "this", ",", "$", "name", ")", ")", "{", "throw", "new", "\\", "Exception", "(", "'Cannot override an existing framework method.'", ")", ";", "}", "$", "this", "->", "loader", "->", "register", "(", "$", "name", ",", "$", "class", ",", "$", "params", ",", "$", "callback", ")", ";", "}"], "docstring": "Registers a class to a framework method.\n\n@param string $name Method name\n@param string $class Class name\n@param array $params Class initialization parameters\n@param callback $callback Function to call after object instantiation\n@throws \\Exception If trying to map over a framework method", "docstring_tokens": ["Registers", "a", "class", "to", "a", "framework", "method", "."], "sha": "c57ee8cb8d8a4479ce7da28df9538eb8265f67be", "url": "https://github.com/mikecao/flight/blob/c57ee8cb8d8a4479ce7da28df9538eb8265f67be/flight/Engine.php#L212-L218", "partition": "test"}
{"repo": "jelix/inifile", "path": "lib/Util.php", "func_name": "Util.readAndMergeObject", "original_string": "public static function readAndMergeObject($filename, $content, $flags = 0,\n                                              $ignoredSection = array())\n    {\n        if (!file_exists($filename)) {\n            return false;\n        }\n\n        $newContent = @parse_ini_file($filename, true, INI_SCANNER_TYPED);\n        if ($newContent === false) {\n            return false;\n        }\n\n        return self::mergeIniObjectContents($content, $newContent, $flags, $ignoredSection);\n    }", "language": "php", "code": "public static function readAndMergeObject($filename, $content, $flags = 0,\n                                              $ignoredSection = array())\n    {\n        if (!file_exists($filename)) {\n            return false;\n        }\n\n        $newContent = @parse_ini_file($filename, true, INI_SCANNER_TYPED);\n        if ($newContent === false) {\n            return false;\n        }\n\n        return self::mergeIniObjectContents($content, $newContent, $flags, $ignoredSection);\n    }", "code_tokens": ["public", "static", "function", "readAndMergeObject", "(", "$", "filename", ",", "$", "content", ",", "$", "flags", "=", "0", ",", "$", "ignoredSection", "=", "array", "(", ")", ")", "{", "if", "(", "!", "file_exists", "(", "$", "filename", ")", ")", "{", "return", "false", ";", "}", "$", "newContent", "=", "@", "parse_ini_file", "(", "$", "filename", ",", "true", ",", "INI_SCANNER_TYPED", ")", ";", "if", "(", "$", "newContent", "===", "false", ")", "{", "return", "false", ";", "}", "return", "self", "::", "mergeIniObjectContents", "(", "$", "content", ",", "$", "newContent", ",", "$", "flags", ",", "$", "ignoredSection", ")", ";", "}"], "docstring": "read an ini file and merge its parameters to the given object.\nUseful to merge to config files.\nParameters whose name starts with a '_' are not merged.\n\n@param string $filename the path and the name of the file to read\n@param object $content\n@param int    $flags    a combination of constants NOT_MERGE_*, NORMAL_MERGE_*\n@param array  $ignoredSection list of sections or top level parameters that\nshould not be merged\n\n@return object|false the content of the file or false if error during parsing the file\n\n@since 2.0", "docstring_tokens": ["read", "an", "ini", "file", "and", "merge", "its", "parameters", "to", "the", "given", "object", ".", "Useful", "to", "merge", "to", "config", "files", ".", "Parameters", "whose", "name", "starts", "with", "a", "_", "are", "not", "merged", "."], "sha": "003f15245f074cc3a3b6023fae31861a090df832", "url": "https://github.com/jelix/inifile/blob/003f15245f074cc3a3b6023fae31861a090df832/lib/Util.php#L72-L85", "partition": "test"}
{"repo": "maniaplanet/manialive-plugins", "path": "Standard/TeamSpeak/TeamSpeak3/Node/Server.php", "func_name": "Server.permReset", "original_string": "public function permReset()\r\n  {\r\n    $token = $this->request(\"permreset\")->toList();\r\n\r\n    \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Helper\\Signal::getInstance()->emit(\"notifyTokencreated\", $this, $token[\"token\"]);\r\n\r\n    return $token[\"token\"];\r\n  }", "language": "php", "code": "public function permReset()\r\n  {\r\n    $token = $this->request(\"permreset\")->toList();\r\n\r\n    \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Helper\\Signal::getInstance()->emit(\"notifyTokencreated\", $this, $token[\"token\"]);\r\n\r\n    return $token[\"token\"];\r\n  }", "code_tokens": ["public", "function", "permReset", "(", ")", "{", "$", "token", "=", "$", "this", "->", "request", "(", "\"permreset\"", ")", "->", "toList", "(", ")", ";", "\\", "ManiaLivePlugins", "\\", "Standard", "\\", "TeamSpeak", "\\", "TeamSpeak3", "\\", "Helper", "\\", "Signal", "::", "getInstance", "(", ")", "->", "emit", "(", "\"notifyTokencreated\"", ",", "$", "this", ",", "$", "token", "[", "\"token\"", "]", ")", ";", "return", "$", "token", "[", "\"token\"", "]", ";", "}"], "docstring": "Restores the default permission settings on the virtual server and returns a new initial\nadministrator privilege key.\n\n@return \\ManiaLivePlugins\\Standard\\TeamSpeak\\TeamSpeak3\\Helper\\String", "docstring_tokens": ["Restores", "the", "default", "permission", "settings", "on", "the", "virtual", "server", "and", "returns", "a", "new", "initial", "administrator", "privilege", "key", "."], "sha": "f3f37da6836fe3d06fed32e75880caa6e9c0496b", "url": "https://github.com/maniaplanet/manialive-plugins/blob/f3f37da6836fe3d06fed32e75880caa6e9c0496b/Standard/TeamSpeak/TeamSpeak3/Node/Server.php#L1447-L1454", "partition": "test"}
{"repo": "jasny/dotkey", "path": "src/DotKey.php", "func_name": "DotKey.get", "original_string": "public function get($key)\n    {\n        $index = explode('.', $key);\n        $ret = self::getValue($this->item, $index, true, $err);\n        \n        if ($err) {\n            $invalidPath = join('.', array_slice($index, 0, -1 * $err->incomplete));\n            trigger_error(\"Unable to get '$key': '$invalidPath' is a {$err->var}\", E_USER_WARNING);\n        } // @codeCoverageIgnore\n        \n        return $ret;\n    }", "language": "php", "code": "public function get($key)\n    {\n        $index = explode('.', $key);\n        $ret = self::getValue($this->item, $index, true, $err);\n        \n        if ($err) {\n            $invalidPath = join('.', array_slice($index, 0, -1 * $err->incomplete));\n            trigger_error(\"Unable to get '$key': '$invalidPath' is a {$err->var}\", E_USER_WARNING);\n        } // @codeCoverageIgnore\n        \n        return $ret;\n    }", "code_tokens": ["public", "function", "get", "(", "$", "key", ")", "{", "$", "index", "=", "explode", "(", "'.'", ",", "$", "key", ")", ";", "$", "ret", "=", "self", "::", "getValue", "(", "$", "this", "->", "item", ",", "$", "index", ",", "true", ",", "$", "err", ")", ";", "if", "(", "$", "err", ")", "{", "$", "invalidPath", "=", "join", "(", "'.'", ",", "array_slice", "(", "$", "index", ",", "0", ",", "-", "1", "*", "$", "err", "->", "incomplete", ")", ")", ";", "trigger_error", "(", "\"Unable to get '$key': '$invalidPath' is a {$err->var}\"", ",", "E_USER_WARNING", ")", ";", "}", "// @codeCoverageIgnore", "return", "$", "ret", ";", "}"], "docstring": "Get a value\n\n@param string $key The index to fetch in dot notation\n@return mixed", "docstring_tokens": ["Get", "a", "value"], "sha": "2ad4ff1bb784460ff601f5d25e992b630768b17f", "url": "https://github.com/jasny/dotkey/blob/2ad4ff1bb784460ff601f5d25e992b630768b17f/src/DotKey.php#L54-L65", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Database/Migrations/MigrationCreator.php", "func_name": "MigrationCreator.ensureMigrationDoesntAlreadyExist", "original_string": "protected function ensureMigrationDoesntAlreadyExist($name, $path)\n    {\n        if (class_exists($className = $this->getClassName($name))) {\n            throw new InvalidArgumentException(\"A {$className} class already exists.\");\n        }\n\n        // TODO Review check for version 2.0\n        if(!empty($files = glob($path . '/*_*.php'))){\n            foreach ($files as $file) {\n                $file = str_replace('.php', '', basename($file));\n\n                $migration = $this->prefix->deletePrefix($file);\n\n                if($className === $this->getClassName($migration)){\n                    throw new InvalidArgumentException(\"A {$className} class already exists.\");\n                }\n            }\n        }\n    }", "language": "php", "code": "protected function ensureMigrationDoesntAlreadyExist($name, $path)\n    {\n        if (class_exists($className = $this->getClassName($name))) {\n            throw new InvalidArgumentException(\"A {$className} class already exists.\");\n        }\n\n        // TODO Review check for version 2.0\n        if(!empty($files = glob($path . '/*_*.php'))){\n            foreach ($files as $file) {\n                $file = str_replace('.php', '', basename($file));\n\n                $migration = $this->prefix->deletePrefix($file);\n\n                if($className === $this->getClassName($migration)){\n                    throw new InvalidArgumentException(\"A {$className} class already exists.\");\n                }\n            }\n        }\n    }", "code_tokens": ["protected", "function", "ensureMigrationDoesntAlreadyExist", "(", "$", "name", ",", "$", "path", ")", "{", "if", "(", "class_exists", "(", "$", "className", "=", "$", "this", "->", "getClassName", "(", "$", "name", ")", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "\"A {$className} class already exists.\"", ")", ";", "}", "// TODO Review check for version 2.0", "if", "(", "!", "empty", "(", "$", "files", "=", "glob", "(", "$", "path", ".", "'/*_*.php'", ")", ")", ")", "{", "foreach", "(", "$", "files", "as", "$", "file", ")", "{", "$", "file", "=", "str_replace", "(", "'.php'", ",", "''", ",", "basename", "(", "$", "file", ")", ")", ";", "$", "migration", "=", "$", "this", "->", "prefix", "->", "deletePrefix", "(", "$", "file", ")", ";", "if", "(", "$", "className", "===", "$", "this", "->", "getClassName", "(", "$", "migration", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "\"A {$className} class already exists.\"", ")", ";", "}", "}", "}", "}"], "docstring": "Ensure that a migration with the given name doesn't already exist.\n\n@param  string $name\n@param  string $path\n\n@return void\n\n@throws \\InvalidArgumentException", "docstring_tokens": ["Ensure", "that", "a", "migration", "with", "the", "given", "name", "doesn", "t", "already", "exist", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Database/Migrations/MigrationCreator.php#L67-L85", "partition": "test"}
{"repo": "php-carteblanche/core", "path": "src/CarteBlanche/App/Kernel.php", "func_name": "Kernel.__loadDefaultConfig", "original_string": "private function __loadDefaultConfig()\n    {\n        $app_cfgfile = __DIR__.'/../../../config/'.self::CARTE_BLANCHE_CONFIG_FILE;\n        if (!file_exists($app_cfgfile)) {\n            throw new ErrorException( \n                sprintf('Default application configuration file not found in \"%s\" [%s]!', $this->getPath('config_dir'), $app_cfgfile)\n            );\n        }\n        $this->getContainer()->get('config')->load($app_cfgfile);\n    }", "language": "php", "code": "private function __loadDefaultConfig()\n    {\n        $app_cfgfile = __DIR__.'/../../../config/'.self::CARTE_BLANCHE_CONFIG_FILE;\n        if (!file_exists($app_cfgfile)) {\n            throw new ErrorException( \n                sprintf('Default application configuration file not found in \"%s\" [%s]!', $this->getPath('config_dir'), $app_cfgfile)\n            );\n        }\n        $this->getContainer()->get('config')->load($app_cfgfile);\n    }", "code_tokens": ["private", "function", "__loadDefaultConfig", "(", ")", "{", "$", "app_cfgfile", "=", "__DIR__", ".", "'/../../../config/'", ".", "self", "::", "CARTE_BLANCHE_CONFIG_FILE", ";", "if", "(", "!", "file_exists", "(", "$", "app_cfgfile", ")", ")", "{", "throw", "new", "ErrorException", "(", "sprintf", "(", "'Default application configuration file not found in \"%s\" [%s]!'", ",", "$", "this", "->", "getPath", "(", "'config_dir'", ")", ",", "$", "app_cfgfile", ")", ")", ";", "}", "$", "this", "->", "getContainer", "(", ")", "->", "get", "(", "'config'", ")", "->", "load", "(", "$", "app_cfgfile", ")", ";", "}"], "docstring": "Load the default configuration file\n\n@throws \\CarteBlanche\\Exception\\ErrorException", "docstring_tokens": ["Load", "the", "default", "configuration", "file"], "sha": "b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343", "url": "https://github.com/php-carteblanche/core/blob/b55de6ac4d7c9ba09f8d0fbcc3cc1866713ac343/src/CarteBlanche/App/Kernel.php#L812-L821", "partition": "test"}
{"repo": "koolkode/process", "path": "src/Execution.php", "func_name": "Execution.createExecution", "original_string": "public function createExecution($concurrent = true)\n    {\n        $execution = new static(UUID::createRandom(), $this->engine, $this->model, $this);\n        $execution->setNode($this->node);\n        \n        if ($concurrent) {\n            $execution->state |= self::STATE_CONCURRENT;\n        }\n        \n        $this->engine->registerExecution($execution);\n        \n        $this->engine->debug(sprintf('Created %s{execution} from {parent}', $concurrent ? 'concurrent ' : ''), [\n            'execution' => (string) $execution,\n            'parent' => (string) $this\n        ]);\n        \n        return $execution;\n    }", "language": "php", "code": "public function createExecution($concurrent = true)\n    {\n        $execution = new static(UUID::createRandom(), $this->engine, $this->model, $this);\n        $execution->setNode($this->node);\n        \n        if ($concurrent) {\n            $execution->state |= self::STATE_CONCURRENT;\n        }\n        \n        $this->engine->registerExecution($execution);\n        \n        $this->engine->debug(sprintf('Created %s{execution} from {parent}', $concurrent ? 'concurrent ' : ''), [\n            'execution' => (string) $execution,\n            'parent' => (string) $this\n        ]);\n        \n        return $execution;\n    }", "code_tokens": ["public", "function", "createExecution", "(", "$", "concurrent", "=", "true", ")", "{", "$", "execution", "=", "new", "static", "(", "UUID", "::", "createRandom", "(", ")", ",", "$", "this", "->", "engine", ",", "$", "this", "->", "model", ",", "$", "this", ")", ";", "$", "execution", "->", "setNode", "(", "$", "this", "->", "node", ")", ";", "if", "(", "$", "concurrent", ")", "{", "$", "execution", "->", "state", "|=", "self", "::", "STATE_CONCURRENT", ";", "}", "$", "this", "->", "engine", "->", "registerExecution", "(", "$", "execution", ")", ";", "$", "this", "->", "engine", "->", "debug", "(", "sprintf", "(", "'Created %s{execution} from {parent}'", ",", "$", "concurrent", "?", "'concurrent '", ":", "''", ")", ",", "[", "'execution'", "=>", "(", "string", ")", "$", "execution", ",", "'parent'", "=>", "(", "string", ")", "$", "this", "]", ")", ";", "return", "$", "execution", ";", "}"], "docstring": "Create a new child execution and register it with the process engine.\n\nCreated executions are unscoped by default.\n\n@param boolean $concurrent\n@return Execution", "docstring_tokens": ["Create", "a", "new", "child", "execution", "and", "register", "it", "with", "the", "process", "engine", "."], "sha": "f9500482103360c1cbe6a12fe8aa03c25e6aad6a", "url": "https://github.com/koolkode/process/blob/f9500482103360c1cbe6a12fe8aa03c25e6aad6a/src/Execution.php#L560-L577", "partition": "test"}
{"repo": "marvinlabs/laravel-html-bootstrap-4", "path": "src/Bootstrap/Elements/FormGroup.php", "func_name": "FormGroup.showAsRow", "original_string": "public function showAsRow($rowConfig = 'default')\n    {\n        $rowConfig = app('config')->get(\"bs4.form_rows.$rowConfig\", null);\n        if ($rowConfig === null)\n        {\n            throw new \\InvalidArgumentException(\"Unknown configuration entry: bs4.form_rows.$rowConfig\");\n        }\n\n        $element = clone $this;\n\n        // Add a class to ourselves, to the control wrapper and to the label\n        $element = $element->addClass('row');\n\n        $element->controlWrapper = $element->controlWrapper ?? Div::create();\n        $element->controlWrapper = $element->controlWrapper->addClass($rowConfig['control_wrapper'] ?? []);\n\n        $element->label = $element->label ?? $element->label('', true)->label;\n        $element->label = $element->label->addClass($rowConfig['label'] ?? []);\n\n        return $element;\n    }", "language": "php", "code": "public function showAsRow($rowConfig = 'default')\n    {\n        $rowConfig = app('config')->get(\"bs4.form_rows.$rowConfig\", null);\n        if ($rowConfig === null)\n        {\n            throw new \\InvalidArgumentException(\"Unknown configuration entry: bs4.form_rows.$rowConfig\");\n        }\n\n        $element = clone $this;\n\n        // Add a class to ourselves, to the control wrapper and to the label\n        $element = $element->addClass('row');\n\n        $element->controlWrapper = $element->controlWrapper ?? Div::create();\n        $element->controlWrapper = $element->controlWrapper->addClass($rowConfig['control_wrapper'] ?? []);\n\n        $element->label = $element->label ?? $element->label('', true)->label;\n        $element->label = $element->label->addClass($rowConfig['label'] ?? []);\n\n        return $element;\n    }", "code_tokens": ["public", "function", "showAsRow", "(", "$", "rowConfig", "=", "'default'", ")", "{", "$", "rowConfig", "=", "app", "(", "'config'", ")", "->", "get", "(", "\"bs4.form_rows.$rowConfig\"", ",", "null", ")", ";", "if", "(", "$", "rowConfig", "===", "null", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"Unknown configuration entry: bs4.form_rows.$rowConfig\"", ")", ";", "}", "$", "element", "=", "clone", "$", "this", ";", "// Add a class to ourselves, to the control wrapper and to the label", "$", "element", "=", "$", "element", "->", "addClass", "(", "'row'", ")", ";", "$", "element", "->", "controlWrapper", "=", "$", "element", "->", "controlWrapper", "??", "Div", "::", "create", "(", ")", ";", "$", "element", "->", "controlWrapper", "=", "$", "element", "->", "controlWrapper", "->", "addClass", "(", "$", "rowConfig", "[", "'control_wrapper'", "]", "??", "[", "]", ")", ";", "$", "element", "->", "label", "=", "$", "element", "->", "label", "??", "$", "element", "->", "label", "(", "''", ",", "true", ")", "->", "label", ";", "$", "element", "->", "label", "=", "$", "element", "->", "label", "->", "addClass", "(", "$", "rowConfig", "[", "'label'", "]", "??", "[", "]", ")", ";", "return", "$", "element", ";", "}"], "docstring": "Show the group as an horizontal row, using the specified configuration. This method should be called last\nwhen the label and controls are all initialized.\n\nThe row configuration will be taken from config(\"bs4.form_rows.$rowConfig\")\n\n@param string $rowConfig The reference to the configuration (without prefix).\n\n@return \\MarvinLabs\\Html\\Bootstrap\\Elements\\FormGroup|static\n\n@throws \\InvalidArgumentException When the configuration does not exist\n@throws \\Psr\\Container\\NotFoundExceptionInterface Problem in dependency retrieval for 'config'\n@throws \\Psr\\Container\\ContainerExceptionInterface Problem in dependency retrieval for 'config'", "docstring_tokens": ["Show", "the", "group", "as", "an", "horizontal", "row", "using", "the", "specified", "configuration", ".", "This", "method", "should", "be", "called", "last", "when", "the", "label", "and", "controls", "are", "all", "initialized", "."], "sha": "77e1823cb3b5b395a2d30ad5a8cee82b21cffb33", "url": "https://github.com/marvinlabs/laravel-html-bootstrap-4/blob/77e1823cb3b5b395a2d30ad5a8cee82b21cffb33/src/Bootstrap/Elements/FormGroup.php#L107-L127", "partition": "test"}
{"repo": "FriendsOfSymfony/FOSElasticaBundle", "path": "src/DependencyInjection/FOSElasticaExtension.php", "func_name": "FOSElasticaExtension.loadIndexTemplateManager", "original_string": "private function loadIndexTemplateManager(ContainerBuilder $container)\n    {\n        $indexTemplateRefs = array_map(function ($index) {\n            return $index['reference'];\n        }, $this->indexTemplateConfigs);\n\n        $managerDef = $container->getDefinition('fos_elastica.index_template_manager');\n        $managerDef->replaceArgument(0, $indexTemplateRefs);\n    }", "language": "php", "code": "private function loadIndexTemplateManager(ContainerBuilder $container)\n    {\n        $indexTemplateRefs = array_map(function ($index) {\n            return $index['reference'];\n        }, $this->indexTemplateConfigs);\n\n        $managerDef = $container->getDefinition('fos_elastica.index_template_manager');\n        $managerDef->replaceArgument(0, $indexTemplateRefs);\n    }", "code_tokens": ["private", "function", "loadIndexTemplateManager", "(", "ContainerBuilder", "$", "container", ")", "{", "$", "indexTemplateRefs", "=", "array_map", "(", "function", "(", "$", "index", ")", "{", "return", "$", "index", "[", "'reference'", "]", ";", "}", ",", "$", "this", "->", "indexTemplateConfigs", ")", ";", "$", "managerDef", "=", "$", "container", "->", "getDefinition", "(", "'fos_elastica.index_template_manager'", ")", ";", "$", "managerDef", "->", "replaceArgument", "(", "0", ",", "$", "indexTemplateRefs", ")", ";", "}"], "docstring": "Load index template manager\n\n@param ContainerBuilder $container\n\n@return void", "docstring_tokens": ["Load", "index", "template", "manager"], "sha": "3f2707d1d606a59527f74e88808b820a170d3f42", "url": "https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/3f2707d1d606a59527f74e88808b820a170d3f42/src/DependencyInjection/FOSElasticaExtension.php#L796-L804", "partition": "test"}
{"repo": "wp-cli/widget-command", "path": "src/Widget_Command.php", "func_name": "Widget_Command.get_widget_obj", "original_string": "private function get_widget_obj( $id_base ) {\n\t\tglobal $wp_widget_factory;\n\n\t\t$widget = wp_filter_object_list( $wp_widget_factory->widgets, array( 'id_base' => $id_base ) );\n\t\tif ( empty( $widget ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn array_pop( $widget );\n\t}", "language": "php", "code": "private function get_widget_obj( $id_base ) {\n\t\tglobal $wp_widget_factory;\n\n\t\t$widget = wp_filter_object_list( $wp_widget_factory->widgets, array( 'id_base' => $id_base ) );\n\t\tif ( empty( $widget ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn array_pop( $widget );\n\t}", "code_tokens": ["private", "function", "get_widget_obj", "(", "$", "id_base", ")", "{", "global", "$", "wp_widget_factory", ";", "$", "widget", "=", "wp_filter_object_list", "(", "$", "wp_widget_factory", "->", "widgets", ",", "array", "(", "'id_base'", "=>", "$", "id_base", ")", ")", ";", "if", "(", "empty", "(", "$", "widget", ")", ")", "{", "return", "false", ";", "}", "return", "array_pop", "(", "$", "widget", ")", ";", "}"], "docstring": "Gets a widget's instantiated object based on its name\n\n@param string $id_base Name of the widget\n@return WP_Widget|false", "docstring_tokens": ["Gets", "a", "widget", "s", "instantiated", "object", "based", "on", "its", "name"], "sha": "58a1b2d2221cee852eb8a589535aaadb1217bb74", "url": "https://github.com/wp-cli/widget-command/blob/58a1b2d2221cee852eb8a589535aaadb1217bb74/src/Widget_Command.php#L624-L633", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Events/NativeEvents.php", "func_name": "NativeEvents.add", "original_string": "public function add(string $event): void\n    {\n        if (! $this->has($event)) {\n            self::$events[$event] = [];\n        }\n    }", "language": "php", "code": "public function add(string $event): void\n    {\n        if (! $this->has($event)) {\n            self::$events[$event] = [];\n        }\n    }", "code_tokens": ["public", "function", "add", "(", "string", "$", "event", ")", ":", "void", "{", "if", "(", "!", "$", "this", "->", "has", "(", "$", "event", ")", ")", "{", "self", "::", "$", "events", "[", "$", "event", "]", "=", "[", "]", ";", "}", "}"], "docstring": "Add a new event.\n\n@param string $event The event\n\n@return void", "docstring_tokens": ["Add", "a", "new", "event", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Events/NativeEvents.php#L172-L177", "partition": "test"}
{"repo": "pear/Crypt_GPG", "path": "Crypt/GPG.php", "func_name": "Crypt_GPG.encryptAndSignFile", "original_string": "public function encryptAndSignFile(\n        $filename,\n        $signedFile = null,\n        $armor = self::ARMOR_ASCII\n    ) {\n        return $this->_encryptAndSign($filename, true, $signedFile, $armor);\n    }", "language": "php", "code": "public function encryptAndSignFile(\n        $filename,\n        $signedFile = null,\n        $armor = self::ARMOR_ASCII\n    ) {\n        return $this->_encryptAndSign($filename, true, $signedFile, $armor);\n    }", "code_tokens": ["public", "function", "encryptAndSignFile", "(", "$", "filename", ",", "$", "signedFile", "=", "null", ",", "$", "armor", "=", "self", "::", "ARMOR_ASCII", ")", "{", "return", "$", "this", "->", "_encryptAndSign", "(", "$", "filename", ",", "true", ",", "$", "signedFile", ",", "$", "armor", ")", ";", "}"], "docstring": "Encrypts and signs a file\n\nThe file is encrypted and signed in a single pass.\n\nNOTE: Until GnuPG version 1.4.10, it was not possible to verify\nencrypted-signed files without decrypting them at the same time. If you\ntry to use {@link Crypt_GPG::verify()} method on encrypted-signed files\nwith earlier GnuPG versions, you will get an error. Please use\n{@link Crypt_GPG::decryptAndVerifyFile()} to verify encrypted-signed\nfiles.\n\n@param string  $filename   the name of the file containing the data to\nbe encrypted and signed.\n@param string  $signedFile optional. The name of the file in which the\nencrypted, signed data should be stored. If\nnull or unspecified, the encrypted, signed\ndata is returned as a string.\n@param boolean $armor      optional. If true, ASCII armored data is\nreturned; otherwise, binary data is returned.\nDefaults to true.\n\n@return void|string if the <kbd>$signedFile</kbd> parameter is null, a\nstring containing the encrypted, signed data is\nreturned.\n\n@throws Crypt_GPG_KeyNotFoundException if no encryption key is specified\nor if no signing key is specified. See\n{@link Crypt_GPG::addEncryptKey()} and\n{@link Crypt_GPG::addSignKey()}.\n\n@throws Crypt_GPG_BadPassphraseException if a specified passphrase is\nincorrect or if a required passphrase is not specified.\n\n@throws Crypt_GPG_FileException if the output file is not writeable or\nif the input file is not readable.\n\n@throws Crypt_GPG_Exception if an unknown or unexpected error occurs.\nUse the <kbd>debug</kbd> option and file a bug report if these\nexceptions occur.\n\n@see Crypt_GPG::decryptAndVerifyFile()", "docstring_tokens": ["Encrypts", "and", "signs", "a", "file"], "sha": "bf07ab51207446ed33ea0075083df9bbc2358617", "url": "https://github.com/pear/Crypt_GPG/blob/bf07ab51207446ed33ea0075083df9bbc2358617/Crypt/GPG.php#L794-L800", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/properties/class-papi-property-repeater.php", "func_name": "Papi_Property_Repeater.remove_repeater_rows", "original_string": "protected function remove_repeater_rows( $post_id, $repeater_slug ) {\n\t\tglobal $wpdb;\n\n\t\t$is_option     = $this->get_meta_type() === 'option';\n\t\t$repeater_slug = $repeater_slug . '_%';\n\n\t\tif ( $is_option ) {\n\t\t\t$table = $wpdb->prefix . 'options';\n\n\t\t\t// @codingStandardsIgnoreStart\n\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\"SELECT * FROM `$table` WHERE (`option_name` LIKE %s OR `option_name` LIKE %s AND NOT `option_name` = %s)\",\n\t\t\t\t$repeater_slug,\n\t\t\t\tpapi_f( $repeater_slug ),\n\t\t\t\tpapi_get_property_type_key_f( $repeater_slug )\n\t\t\t);\n\t\t\t// @codingStandardsIgnoreEnd\n\t\t} else {\n\t\t\t$table = $wpdb->prefix . 'postmeta';\n\t\t\t// @codingStandardsIgnoreStart\n\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\"SELECT * FROM `$table` WHERE `post_id` = %d AND (`meta_key` LIKE %s OR `meta_key` LIKE %s AND NOT `meta_key` = %s)\",\n\t\t\t\t$post_id,\n\t\t\t\t$repeater_slug,\n\t\t\t\tpapi_f( $repeater_slug ),\n\t\t\t\tpapi_get_property_type_key_f( $repeater_slug )\n\t\t\t);\n\t\t\t// @codingStandardsIgnoreEnd\n\t\t}\n\n\t\t$results = $wpdb->get_results( $query ); // WPCS: unprepared sql\n\n\t\tforeach ( $results as $res ) {\n\t\t\tif ( $is_option ) {\n\t\t\t\t$key = $res->option_name;\n\t\t\t} else {\n\t\t\t\t$key = $res->meta_key;\n\t\t\t}\n\n\t\t\tpapi_data_delete( $post_id, $key, $this->get_meta_type() );\n\t\t}\n\t}", "language": "php", "code": "protected function remove_repeater_rows( $post_id, $repeater_slug ) {\n\t\tglobal $wpdb;\n\n\t\t$is_option     = $this->get_meta_type() === 'option';\n\t\t$repeater_slug = $repeater_slug . '_%';\n\n\t\tif ( $is_option ) {\n\t\t\t$table = $wpdb->prefix . 'options';\n\n\t\t\t// @codingStandardsIgnoreStart\n\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\"SELECT * FROM `$table` WHERE (`option_name` LIKE %s OR `option_name` LIKE %s AND NOT `option_name` = %s)\",\n\t\t\t\t$repeater_slug,\n\t\t\t\tpapi_f( $repeater_slug ),\n\t\t\t\tpapi_get_property_type_key_f( $repeater_slug )\n\t\t\t);\n\t\t\t// @codingStandardsIgnoreEnd\n\t\t} else {\n\t\t\t$table = $wpdb->prefix . 'postmeta';\n\t\t\t// @codingStandardsIgnoreStart\n\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\"SELECT * FROM `$table` WHERE `post_id` = %d AND (`meta_key` LIKE %s OR `meta_key` LIKE %s AND NOT `meta_key` = %s)\",\n\t\t\t\t$post_id,\n\t\t\t\t$repeater_slug,\n\t\t\t\tpapi_f( $repeater_slug ),\n\t\t\t\tpapi_get_property_type_key_f( $repeater_slug )\n\t\t\t);\n\t\t\t// @codingStandardsIgnoreEnd\n\t\t}\n\n\t\t$results = $wpdb->get_results( $query ); // WPCS: unprepared sql\n\n\t\tforeach ( $results as $res ) {\n\t\t\tif ( $is_option ) {\n\t\t\t\t$key = $res->option_name;\n\t\t\t} else {\n\t\t\t\t$key = $res->meta_key;\n\t\t\t}\n\n\t\t\tpapi_data_delete( $post_id, $key, $this->get_meta_type() );\n\t\t}\n\t}", "code_tokens": ["protected", "function", "remove_repeater_rows", "(", "$", "post_id", ",", "$", "repeater_slug", ")", "{", "global", "$", "wpdb", ";", "$", "is_option", "=", "$", "this", "->", "get_meta_type", "(", ")", "===", "'option'", ";", "$", "repeater_slug", "=", "$", "repeater_slug", ".", "'_%'", ";", "if", "(", "$", "is_option", ")", "{", "$", "table", "=", "$", "wpdb", "->", "prefix", ".", "'options'", ";", "// @codingStandardsIgnoreStart", "$", "query", "=", "$", "wpdb", "->", "prepare", "(", "\"SELECT * FROM `$table` WHERE (`option_name` LIKE %s OR `option_name` LIKE %s AND NOT `option_name` = %s)\"", ",", "$", "repeater_slug", ",", "papi_f", "(", "$", "repeater_slug", ")", ",", "papi_get_property_type_key_f", "(", "$", "repeater_slug", ")", ")", ";", "// @codingStandardsIgnoreEnd", "}", "else", "{", "$", "table", "=", "$", "wpdb", "->", "prefix", ".", "'postmeta'", ";", "// @codingStandardsIgnoreStart", "$", "query", "=", "$", "wpdb", "->", "prepare", "(", "\"SELECT * FROM `$table` WHERE `post_id` = %d AND (`meta_key` LIKE %s OR `meta_key` LIKE %s AND NOT `meta_key` = %s)\"", ",", "$", "post_id", ",", "$", "repeater_slug", ",", "papi_f", "(", "$", "repeater_slug", ")", ",", "papi_get_property_type_key_f", "(", "$", "repeater_slug", ")", ")", ";", "// @codingStandardsIgnoreEnd", "}", "$", "results", "=", "$", "wpdb", "->", "get_results", "(", "$", "query", ")", ";", "// WPCS: unprepared sql", "foreach", "(", "$", "results", "as", "$", "res", ")", "{", "if", "(", "$", "is_option", ")", "{", "$", "key", "=", "$", "res", "->", "option_name", ";", "}", "else", "{", "$", "key", "=", "$", "res", "->", "meta_key", ";", "}", "papi_data_delete", "(", "$", "post_id", ",", "$", "key", ",", "$", "this", "->", "get_meta_type", "(", ")", ")", ";", "}", "}"], "docstring": "Remove all repeater rows from the database.\n\n@param int    $post_id\n@param string $repeater_slug", "docstring_tokens": ["Remove", "all", "repeater", "rows", "from", "the", "database", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/properties/class-papi-property-repeater.php#L520-L561", "partition": "test"}
{"repo": "slickframework/http", "path": "src/Message/Server/BodyParser.php", "func_name": "BodyParser.createParserWith", "original_string": "private function createParserWith(StreamInterface $body)\n    {\n        $class = NullParser::class;\n        foreach (self::$parsers as $parser => $contentTypes) {\n            foreach ($contentTypes as $contentType) {\n                if (stripos($this->contentType, $contentType) !== false) {\n                    $class = $parser;\n                }\n            }\n        }\n        return new $class($body);\n    }", "language": "php", "code": "private function createParserWith(StreamInterface $body)\n    {\n        $class = NullParser::class;\n        foreach (self::$parsers as $parser => $contentTypes) {\n            foreach ($contentTypes as $contentType) {\n                if (stripos($this->contentType, $contentType) !== false) {\n                    $class = $parser;\n                }\n            }\n        }\n        return new $class($body);\n    }", "code_tokens": ["private", "function", "createParserWith", "(", "StreamInterface", "$", "body", ")", "{", "$", "class", "=", "NullParser", "::", "class", ";", "foreach", "(", "self", "::", "$", "parsers", "as", "$", "parser", "=>", "$", "contentTypes", ")", "{", "foreach", "(", "$", "contentTypes", "as", "$", "contentType", ")", "{", "if", "(", "stripos", "(", "$", "this", "->", "contentType", ",", "$", "contentType", ")", "!==", "false", ")", "{", "$", "class", "=", "$", "parser", ";", "}", "}", "}", "return", "new", "$", "class", "(", "$", "body", ")", ";", "}"], "docstring": "Creates the parser based on the parsers map with provided stream\n\n@param StreamInterface $body\n\n@return BodyParserInterface", "docstring_tokens": ["Creates", "the", "parser", "based", "on", "the", "parsers", "map", "with", "provided", "stream"], "sha": "9da14b618e0f75d3d565e0ce928a35d992755e75", "url": "https://github.com/slickframework/http/blob/9da14b618e0f75d3d565e0ce928a35d992755e75/src/Message/Server/BodyParser.php#L67-L78", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/admin/class-papi-admin-entry-taxonomy.php", "func_name": "Papi_Admin_Entry_Taxonomy.prepare_taxonomy_types", "original_string": "protected function prepare_taxonomy_types( array $taxonomy_types ) {\n\t\t$taxonomy = papi_get_qs( 'taxonomy' );\n\n\t\tif ( papi_filter_settings_show_standard_taxonomy_type( $taxonomy ) ) {\n\t\t\t$id                      = sprintf( 'papi-standard-%s-type', $taxonomy );\n\t\t\t$taxonomy_type           = new Papi_Taxonomy_Type( $id );\n\t\t\t$taxonomy_type->id       = $id;\n\t\t\t$taxonomy_type->name     = papi_filter_settings_standard_taxonomy_type_name( $taxonomy );\n\t\t\t$taxonomy_type->taxonomy = [$taxonomy];\n\t\t\t$taxonomy_types[]        = $taxonomy_type;\n\t\t}\n\n\t\tusort( $taxonomy_types, function ( $a, $b ) {\n\t\t\treturn strcmp( $a->name, $b->name );\n\t\t} );\n\n\t\treturn papi_sort_order( array_reverse( $taxonomy_types ) );\n\t}", "language": "php", "code": "protected function prepare_taxonomy_types( array $taxonomy_types ) {\n\t\t$taxonomy = papi_get_qs( 'taxonomy' );\n\n\t\tif ( papi_filter_settings_show_standard_taxonomy_type( $taxonomy ) ) {\n\t\t\t$id                      = sprintf( 'papi-standard-%s-type', $taxonomy );\n\t\t\t$taxonomy_type           = new Papi_Taxonomy_Type( $id );\n\t\t\t$taxonomy_type->id       = $id;\n\t\t\t$taxonomy_type->name     = papi_filter_settings_standard_taxonomy_type_name( $taxonomy );\n\t\t\t$taxonomy_type->taxonomy = [$taxonomy];\n\t\t\t$taxonomy_types[]        = $taxonomy_type;\n\t\t}\n\n\t\tusort( $taxonomy_types, function ( $a, $b ) {\n\t\t\treturn strcmp( $a->name, $b->name );\n\t\t} );\n\n\t\treturn papi_sort_order( array_reverse( $taxonomy_types ) );\n\t}", "code_tokens": ["protected", "function", "prepare_taxonomy_types", "(", "array", "$", "taxonomy_types", ")", "{", "$", "taxonomy", "=", "papi_get_qs", "(", "'taxonomy'", ")", ";", "if", "(", "papi_filter_settings_show_standard_taxonomy_type", "(", "$", "taxonomy", ")", ")", "{", "$", "id", "=", "sprintf", "(", "'papi-standard-%s-type'", ",", "$", "taxonomy", ")", ";", "$", "taxonomy_type", "=", "new", "Papi_Taxonomy_Type", "(", "$", "id", ")", ";", "$", "taxonomy_type", "->", "id", "=", "$", "id", ";", "$", "taxonomy_type", "->", "name", "=", "papi_filter_settings_standard_taxonomy_type_name", "(", "$", "taxonomy", ")", ";", "$", "taxonomy_type", "->", "taxonomy", "=", "[", "$", "taxonomy", "]", ";", "$", "taxonomy_types", "[", "]", "=", "$", "taxonomy_type", ";", "}", "usort", "(", "$", "taxonomy_types", ",", "function", "(", "$", "a", ",", "$", "b", ")", "{", "return", "strcmp", "(", "$", "a", "->", "name", ",", "$", "b", "->", "name", ")", ";", "}", ")", ";", "return", "papi_sort_order", "(", "array_reverse", "(", "$", "taxonomy_types", ")", ")", ";", "}"], "docstring": "Prepare taxonomy types, add standard taxonomy if it should be added.\n\n@param  array $taxonomy_types\n\n@return array", "docstring_tokens": ["Prepare", "taxonomy", "types", "add", "standard", "taxonomy", "if", "it", "should", "be", "added", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/admin/class-papi-admin-entry-taxonomy.php#L83-L100", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/XSD2PHP/lib/ZF/1.10.7/Zend/Console/Getopt.php", "func_name": "Zend_Console_Getopt.getOption", "original_string": "public function getOption($flag)\n    {\n        $this->parse();\n        if ($this->_getoptConfig[self::CONFIG_IGNORECASE]) {\n            $flag = strtolower($flag);\n        }\n        if (isset($this->_ruleMap[$flag])) {\n            $flag = $this->_ruleMap[$flag];\n            if (isset($this->_options[$flag])) {\n                return $this->_options[$flag];\n            }\n        }\n        return null;\n    }", "language": "php", "code": "public function getOption($flag)\n    {\n        $this->parse();\n        if ($this->_getoptConfig[self::CONFIG_IGNORECASE]) {\n            $flag = strtolower($flag);\n        }\n        if (isset($this->_ruleMap[$flag])) {\n            $flag = $this->_ruleMap[$flag];\n            if (isset($this->_options[$flag])) {\n                return $this->_options[$flag];\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "function", "getOption", "(", "$", "flag", ")", "{", "$", "this", "->", "parse", "(", ")", ";", "if", "(", "$", "this", "->", "_getoptConfig", "[", "self", "::", "CONFIG_IGNORECASE", "]", ")", "{", "$", "flag", "=", "strtolower", "(", "$", "flag", ")", ";", "}", "if", "(", "isset", "(", "$", "this", "->", "_ruleMap", "[", "$", "flag", "]", ")", ")", "{", "$", "flag", "=", "$", "this", "->", "_ruleMap", "[", "$", "flag", "]", ";", "if", "(", "isset", "(", "$", "this", "->", "_options", "[", "$", "flag", "]", ")", ")", "{", "return", "$", "this", "->", "_options", "[", "$", "flag", "]", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Return the state of the option seen on the command line of the\ncurrent application invocation.\n\nThis function returns true, or the parameter value to the option, if any.\nIf the option was not given, this function returns false.\n\n@param  string $flag\n@return mixed", "docstring_tokens": ["Return", "the", "state", "of", "the", "option", "seen", "on", "the", "command", "line", "of", "the", "current", "application", "invocation", "."], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/XSD2PHP/lib/ZF/1.10.7/Zend/Console/Getopt.php#L558-L571", "partition": "test"}
{"repo": "zulucrypto/stellar-api", "path": "src/Transaction/TransactionBuilder.php", "func_name": "TransactionBuilder.authorizeTrustline", "original_string": "public function authorizeTrustline(Asset $asset, $trustorId, $sourceAccountId = null)\n    {\n        if ($trustorId instanceof Keypair) {\n            $trustorId = $trustorId->getPublicKey();\n        }\n\n        $op = new AllowTrustOp($asset, new AccountId($trustorId), $sourceAccountId);\n        $op->setIsAuthorized(true);\n\n        return $this->addOperation($op);\n    }", "language": "php", "code": "public function authorizeTrustline(Asset $asset, $trustorId, $sourceAccountId = null)\n    {\n        if ($trustorId instanceof Keypair) {\n            $trustorId = $trustorId->getPublicKey();\n        }\n\n        $op = new AllowTrustOp($asset, new AccountId($trustorId), $sourceAccountId);\n        $op->setIsAuthorized(true);\n\n        return $this->addOperation($op);\n    }", "code_tokens": ["public", "function", "authorizeTrustline", "(", "Asset", "$", "asset", ",", "$", "trustorId", ",", "$", "sourceAccountId", "=", "null", ")", "{", "if", "(", "$", "trustorId", "instanceof", "Keypair", ")", "{", "$", "trustorId", "=", "$", "trustorId", "->", "getPublicKey", "(", ")", ";", "}", "$", "op", "=", "new", "AllowTrustOp", "(", "$", "asset", ",", "new", "AccountId", "(", "$", "trustorId", ")", ",", "$", "sourceAccountId", ")", ";", "$", "op", "->", "setIsAuthorized", "(", "true", ")", ";", "return", "$", "this", "->", "addOperation", "(", "$", "op", ")", ";", "}"], "docstring": "This is called by asset issuers to authorize a trustline established by\na client account\n\n@param Asset $asset\n@param       $trustorId\n@param null  $sourceAccountId\n@return TransactionBuilder", "docstring_tokens": ["This", "is", "called", "by", "asset", "issuers", "to", "authorize", "a", "trustline", "established", "by", "a", "client", "account"], "sha": "b73df4f262bf7e1d18ed2157ec10d0634515ed16", "url": "https://github.com/zulucrypto/stellar-api/blob/b73df4f262bf7e1d18ed2157ec10d0634515ed16/src/Transaction/TransactionBuilder.php#L297-L307", "partition": "test"}
{"repo": "Intervention/gif", "path": "src/Intervention/Gif/Decoder.php", "func_name": "Decoder.decodeImageDescriptor", "original_string": "private function decodeImageDescriptor(Decoded $gif)\n    {\n        $descriptor = $this->getNextBytes(9);\n\n        // determine if descriptor has local color table\n        $flag = substr($descriptor, 8, 1);\n        $flag = unpack('C', $flag)[1];\n        $flag = (bool) ($flag & bindec('10000000'));\n        if ($flag) {\n            // read local color table\n            $byte = substr($descriptor, 8, 1);\n            $byte = unpack('C', $byte)[1];\n            $size = (int) ($byte & bindec('00000111'));\n            $size = 3 * pow(2, $size + 1);\n            \n            $gif->addLocalColorTable($this->getNextBytes($size));\n\n        } else {\n            $gif->addLocalColorTable(null);\n        }\n\n        // determine if image is marked as interlaced\n        $interlaced = substr($descriptor, 8, 1);\n        $interlaced = unpack('C', $interlaced)[1];\n        $interlaced = (bool) ($interlaced & bindec('01000000'));\n        $gif->addInterlaced($interlaced);\n\n        // decode image offsets\n        $left = substr($descriptor, 0, 2);\n        $left = unpack('C', $left)[1];\n        $top = substr($descriptor, 2, 2);\n        $top = unpack('C', $top)[1];\n        $gif->addOffset($left, $top);\n\n        // decode image dimensions\n        $width = substr($descriptor, 4, 2);\n        $width = unpack('v', $width)[1];\n        $height = substr($descriptor, 6, 2);\n        $height = unpack('v', $height)[1];\n        $gif->addSize($width, $height);\n\n        $gif->addImageDescriptors($descriptor);\n    }", "language": "php", "code": "private function decodeImageDescriptor(Decoded $gif)\n    {\n        $descriptor = $this->getNextBytes(9);\n\n        // determine if descriptor has local color table\n        $flag = substr($descriptor, 8, 1);\n        $flag = unpack('C', $flag)[1];\n        $flag = (bool) ($flag & bindec('10000000'));\n        if ($flag) {\n            // read local color table\n            $byte = substr($descriptor, 8, 1);\n            $byte = unpack('C', $byte)[1];\n            $size = (int) ($byte & bindec('00000111'));\n            $size = 3 * pow(2, $size + 1);\n            \n            $gif->addLocalColorTable($this->getNextBytes($size));\n\n        } else {\n            $gif->addLocalColorTable(null);\n        }\n\n        // determine if image is marked as interlaced\n        $interlaced = substr($descriptor, 8, 1);\n        $interlaced = unpack('C', $interlaced)[1];\n        $interlaced = (bool) ($interlaced & bindec('01000000'));\n        $gif->addInterlaced($interlaced);\n\n        // decode image offsets\n        $left = substr($descriptor, 0, 2);\n        $left = unpack('C', $left)[1];\n        $top = substr($descriptor, 2, 2);\n        $top = unpack('C', $top)[1];\n        $gif->addOffset($left, $top);\n\n        // decode image dimensions\n        $width = substr($descriptor, 4, 2);\n        $width = unpack('v', $width)[1];\n        $height = substr($descriptor, 6, 2);\n        $height = unpack('v', $height)[1];\n        $gif->addSize($width, $height);\n\n        $gif->addImageDescriptors($descriptor);\n    }", "code_tokens": ["private", "function", "decodeImageDescriptor", "(", "Decoded", "$", "gif", ")", "{", "$", "descriptor", "=", "$", "this", "->", "getNextBytes", "(", "9", ")", ";", "// determine if descriptor has local color table", "$", "flag", "=", "substr", "(", "$", "descriptor", ",", "8", ",", "1", ")", ";", "$", "flag", "=", "unpack", "(", "'C'", ",", "$", "flag", ")", "[", "1", "]", ";", "$", "flag", "=", "(", "bool", ")", "(", "$", "flag", "&", "bindec", "(", "'10000000'", ")", ")", ";", "if", "(", "$", "flag", ")", "{", "// read local color table", "$", "byte", "=", "substr", "(", "$", "descriptor", ",", "8", ",", "1", ")", ";", "$", "byte", "=", "unpack", "(", "'C'", ",", "$", "byte", ")", "[", "1", "]", ";", "$", "size", "=", "(", "int", ")", "(", "$", "byte", "&", "bindec", "(", "'00000111'", ")", ")", ";", "$", "size", "=", "3", "*", "pow", "(", "2", ",", "$", "size", "+", "1", ")", ";", "$", "gif", "->", "addLocalColorTable", "(", "$", "this", "->", "getNextBytes", "(", "$", "size", ")", ")", ";", "}", "else", "{", "$", "gif", "->", "addLocalColorTable", "(", "null", ")", ";", "}", "// determine if image is marked as interlaced", "$", "interlaced", "=", "substr", "(", "$", "descriptor", ",", "8", ",", "1", ")", ";", "$", "interlaced", "=", "unpack", "(", "'C'", ",", "$", "interlaced", ")", "[", "1", "]", ";", "$", "interlaced", "=", "(", "bool", ")", "(", "$", "interlaced", "&", "bindec", "(", "'01000000'", ")", ")", ";", "$", "gif", "->", "addInterlaced", "(", "$", "interlaced", ")", ";", "// decode image offsets", "$", "left", "=", "substr", "(", "$", "descriptor", ",", "0", ",", "2", ")", ";", "$", "left", "=", "unpack", "(", "'C'", ",", "$", "left", ")", "[", "1", "]", ";", "$", "top", "=", "substr", "(", "$", "descriptor", ",", "2", ",", "2", ")", ";", "$", "top", "=", "unpack", "(", "'C'", ",", "$", "top", ")", "[", "1", "]", ";", "$", "gif", "->", "addOffset", "(", "$", "left", ",", "$", "top", ")", ";", "// decode image dimensions", "$", "width", "=", "substr", "(", "$", "descriptor", ",", "4", ",", "2", ")", ";", "$", "width", "=", "unpack", "(", "'v'", ",", "$", "width", ")", "[", "1", "]", ";", "$", "height", "=", "substr", "(", "$", "descriptor", ",", "6", ",", "2", ")", ";", "$", "height", "=", "unpack", "(", "'v'", ",", "$", "height", ")", "[", "1", "]", ";", "$", "gif", "->", "addSize", "(", "$", "width", ",", "$", "height", ")", ";", "$", "gif", "->", "addImageDescriptors", "(", "$", "descriptor", ")", ";", "}"], "docstring": "Decode Image Descriptor from image stream\n\n@param  Decoded $gif\n@return void", "docstring_tokens": ["Decode", "Image", "Descriptor", "from", "image", "stream"], "sha": "7f7e747f26b8362f18384f67a9765290523f607a", "url": "https://github.com/Intervention/gif/blob/7f7e747f26b8362f18384f67a9765290523f607a/src/Intervention/Gif/Decoder.php#L196-L238", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Exception/ErrorHandler.php", "func_name": "ErrorHandler.registerShutdownHandler", "original_string": "protected function registerShutdownHandler(): void\n    {\n        if ($this->reservedMemory === null) {\n            $this->reservedMemory = \\str_repeat('x', 10240);\n            \\register_shutdown_function([$this, 'handleShutdown']);\n        }\n    }", "language": "php", "code": "protected function registerShutdownHandler(): void\n    {\n        if ($this->reservedMemory === null) {\n            $this->reservedMemory = \\str_repeat('x', 10240);\n            \\register_shutdown_function([$this, 'handleShutdown']);\n        }\n    }", "code_tokens": ["protected", "function", "registerShutdownHandler", "(", ")", ":", "void", "{", "if", "(", "$", "this", "->", "reservedMemory", "===", "null", ")", "{", "$", "this", "->", "reservedMemory", "=", "\\", "str_repeat", "(", "'x'", ",", "10240", ")", ";", "\\", "register_shutdown_function", "(", "[", "$", "this", ",", "'handleShutdown'", "]", ")", ";", "}", "}"], "docstring": "Register the PHP shutdown handler.\n\n@return void", "docstring_tokens": ["Register", "the", "PHP", "shutdown", "handler", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Exception/ErrorHandler.php#L367-L373", "partition": "test"}
{"repo": "belgattitude/solublecomponents", "path": "src/Soluble/Normalist/Driver/ZeroConfDriver.php", "func_name": "ZeroConfDriver.getModelsDefinition", "original_string": "public function getModelsDefinition()\n    {\n        $file = $this->getModelsConfigFile();\n        if (!file_exists($file) || !is_readable($file)) {\n            throw new Exception\\ModelFileNotFoundException(__METHOD__ . \" Model configuration file '$file' does not exists or not readable\");\n        }\n\n        if (defined('HHVM_VERSION')) {\n            // As an 'evil' workaround, waiting for hhvm to comply\n            // see https://github.com/facebook/hhvm/issues/1447\n            $definition = false;\n            $file_content = file_get_contents($file);\n            $file_content = trim(str_replace('<?php', '', $file_content));\n            $file_content = trim(str_replace('return array(', '$definition = array(', $file_content));\n            eval($file_content);\n        } else {\n            $definition = include $file;\n        }\n\n        if (!$definition) {\n            throw new Exception\\ModelFileCorruptedException(__METHOD__ . \" Model configuration file '$file' cannot be included\");\n        }\n        if (!is_array($definition)) {\n            throw new Exception\\ModelFileCorruptedException(__METHOD__ . \" Model configuration file '$file' was included but is not a valid array\");\n        }\n\n        return $definition;\n    }", "language": "php", "code": "public function getModelsDefinition()\n    {\n        $file = $this->getModelsConfigFile();\n        if (!file_exists($file) || !is_readable($file)) {\n            throw new Exception\\ModelFileNotFoundException(__METHOD__ . \" Model configuration file '$file' does not exists or not readable\");\n        }\n\n        if (defined('HHVM_VERSION')) {\n            // As an 'evil' workaround, waiting for hhvm to comply\n            // see https://github.com/facebook/hhvm/issues/1447\n            $definition = false;\n            $file_content = file_get_contents($file);\n            $file_content = trim(str_replace('<?php', '', $file_content));\n            $file_content = trim(str_replace('return array(', '$definition = array(', $file_content));\n            eval($file_content);\n        } else {\n            $definition = include $file;\n        }\n\n        if (!$definition) {\n            throw new Exception\\ModelFileCorruptedException(__METHOD__ . \" Model configuration file '$file' cannot be included\");\n        }\n        if (!is_array($definition)) {\n            throw new Exception\\ModelFileCorruptedException(__METHOD__ . \" Model configuration file '$file' was included but is not a valid array\");\n        }\n\n        return $definition;\n    }", "code_tokens": ["public", "function", "getModelsDefinition", "(", ")", "{", "$", "file", "=", "$", "this", "->", "getModelsConfigFile", "(", ")", ";", "if", "(", "!", "file_exists", "(", "$", "file", ")", "||", "!", "is_readable", "(", "$", "file", ")", ")", "{", "throw", "new", "Exception", "\\", "ModelFileNotFoundException", "(", "__METHOD__", ".", "\" Model configuration file '$file' does not exists or not readable\"", ")", ";", "}", "if", "(", "defined", "(", "'HHVM_VERSION'", ")", ")", "{", "// As an 'evil' workaround, waiting for hhvm to comply", "// see https://github.com/facebook/hhvm/issues/1447", "$", "definition", "=", "false", ";", "$", "file_content", "=", "file_get_contents", "(", "$", "file", ")", ";", "$", "file_content", "=", "trim", "(", "str_replace", "(", "'<?php'", ",", "''", ",", "$", "file_content", ")", ")", ";", "$", "file_content", "=", "trim", "(", "str_replace", "(", "'return array('", ",", "'$definition = array('", ",", "$", "file_content", ")", ")", ";", "eval", "(", "$", "file_content", ")", ";", "}", "else", "{", "$", "definition", "=", "include", "$", "file", ";", "}", "if", "(", "!", "$", "definition", ")", "{", "throw", "new", "Exception", "\\", "ModelFileCorruptedException", "(", "__METHOD__", ".", "\" Model configuration file '$file' cannot be included\"", ")", ";", "}", "if", "(", "!", "is_array", "(", "$", "definition", ")", ")", "{", "throw", "new", "Exception", "\\", "ModelFileCorruptedException", "(", "__METHOD__", ".", "\" Model configuration file '$file' was included but is not a valid array\"", ")", ";", "}", "return", "$", "definition", ";", "}"], "docstring": "Get models definition according to options\n\n@throws Exception\\ModelFileNotFoundException\n@throws Exception\\ModelFileCorruptedException\n@return array", "docstring_tokens": ["Get", "models", "definition", "according", "to", "options"], "sha": "f045b3967e42d352d8e70fb2c1f8a427df62599f", "url": "https://github.com/belgattitude/solublecomponents/blob/f045b3967e42d352d8e70fb2c1f8a427df62599f/src/Soluble/Normalist/Driver/ZeroConfDriver.php#L124-L151", "partition": "test"}
{"repo": "velkuns/eureka-package-money", "path": "src/Money/Module/Category/Controller/CategoryComponent.php", "func_name": "CategoryComponent.accountCategories", "original_string": "public function accountCategories(Account $account)\n    {\n        $this->dataCollection->add('account', $account);\n\n        $categoryMapper = new CategoryMapper(Database::get('money'));\n        $categories     = $categoryMapper->findAllByAccountId($account->getId());\n\n        $this->dataCollection->add('categories', $categories);\n\n        return $this->render('Categories');\n    }", "language": "php", "code": "public function accountCategories(Account $account)\n    {\n        $this->dataCollection->add('account', $account);\n\n        $categoryMapper = new CategoryMapper(Database::get('money'));\n        $categories     = $categoryMapper->findAllByAccountId($account->getId());\n\n        $this->dataCollection->add('categories', $categories);\n\n        return $this->render('Categories');\n    }", "code_tokens": ["public", "function", "accountCategories", "(", "Account", "$", "account", ")", "{", "$", "this", "->", "dataCollection", "->", "add", "(", "'account'", ",", "$", "account", ")", ";", "$", "categoryMapper", "=", "new", "CategoryMapper", "(", "Database", "::", "get", "(", "'money'", ")", ")", ";", "$", "categories", "=", "$", "categoryMapper", "->", "findAllByAccountId", "(", "$", "account", "->", "getId", "(", ")", ")", ";", "$", "this", "->", "dataCollection", "->", "add", "(", "'categories'", ",", "$", "categories", ")", ";", "return", "$", "this", "->", "render", "(", "'Categories'", ")", ";", "}"], "docstring": "Category component for account categories list.\n\n@param  Account $account\n@return string", "docstring_tokens": ["Category", "component", "for", "account", "categories", "list", "."], "sha": "6a7954ebd228b400c8922f66fbd390711f27c23b", "url": "https://github.com/velkuns/eureka-package-money/blob/6a7954ebd228b400c8922f66fbd390711f27c23b/src/Money/Module/Category/Controller/CategoryComponent.php#L54-L64", "partition": "test"}
{"repo": "techdivision/import", "path": "src/Repositories/CategoryVarcharRepository.php", "func_name": "CategoryVarcharRepository.findByEntityId", "original_string": "public function findByEntityId($entityId)\n    {\n\n        // prepare the cache key\n        $sql = str_replace('?', $entityId, $this->loadStatement(SqlStatementKeys::CATEGORY_VARCHARS_BY_ENTITY_IDS));\n\n        // load the categories with the passed values and return them\n        if ($stmt = $this->getConnection()->query($sql)) {\n            return $stmt->fetch();\n        }\n    }", "language": "php", "code": "public function findByEntityId($entityId)\n    {\n\n        // prepare the cache key\n        $sql = str_replace('?', $entityId, $this->loadStatement(SqlStatementKeys::CATEGORY_VARCHARS_BY_ENTITY_IDS));\n\n        // load the categories with the passed values and return them\n        if ($stmt = $this->getConnection()->query($sql)) {\n            return $stmt->fetch();\n        }\n    }", "code_tokens": ["public", "function", "findByEntityId", "(", "$", "entityId", ")", "{", "// prepare the cache key", "$", "sql", "=", "str_replace", "(", "'?'", ",", "$", "entityId", ",", "$", "this", "->", "loadStatement", "(", "SqlStatementKeys", "::", "CATEGORY_VARCHARS_BY_ENTITY_IDS", ")", ")", ";", "// load the categories with the passed values and return them", "if", "(", "$", "stmt", "=", "$", "this", "->", "getConnection", "(", ")", "->", "query", "(", "$", "sql", ")", ")", "{", "return", "$", "stmt", "->", "fetch", "(", ")", ";", "}", "}"], "docstring": "Returns the category varchar values for the categories with\nthe passed with the passed entity ID.\n\n@param int $entityId The category ID\n\n@return array The category varchar values", "docstring_tokens": ["Returns", "the", "category", "varchar", "values", "for", "the", "categories", "with", "the", "passed", "with", "the", "passed", "entity", "ID", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/Repositories/CategoryVarcharRepository.php#L75-L85", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/admin/class-papi-admin-columns.php", "func_name": "Papi_Admin_Columns.manage_page_type_posts_custom_column", "original_string": "public function manage_page_type_posts_custom_column( $column_name, $post_id, $term_id = null ) {\n\t\tif ( ! in_array( $this->post_type, papi_get_post_types(), true ) && ! in_array( $this->taxonomy, papi_get_taxonomies(), true ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Hide column for post type. Default is false.\n\t\t *\n\t\t * @param string $post_type\n\t\t */\n\t\tif ( apply_filters( 'papi/settings/column_hide_' . $this->get_meta_type_value(), false ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Column name most be `entry_type`. On taxomy the column name is `post_id` variable.\n\t\tif ( $column_name !== 'entry_type' && $post_id !== 'entry_type' ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the entry type for the post or term.\n\t\t$entry_type = papi_get_entry_type_by_meta_id(\n\t\t\tis_numeric( $post_id ) ? $post_id : $term_id,\n\t\t\tpapi_get_meta_type()\n\t\t);\n\n\t\t$post = ! empty( $this->post_type ) && empty( $this->taxonomy );\n\t\t$type = $post ? 'page' : 'taxonomy';\n\t\t$arg  = $post ? papi_get_post_type() : papi_get_taxonomy();\n\t\t$show = call_user_func_array( \"papi_filter_settings_show_standard_{$type}_type\", [$arg] );\n\n\t\tif ( ! is_null( $entry_type ) && ( $show === false || get_metadata( papi_get_meta_type( $type ), ( is_numeric( $post_id ) ? $post_id : $term_id ), papi_get_page_type_key(), true ) === $entry_type->get_id() ) ) {\n\t\t\techo esc_html( $entry_type->name );\n\t\t} else {\n\t\t\techo esc_html( call_user_func_array( \"papi_filter_settings_standard_{$type}_type_name\", [$arg] ) );\n\t\t}\n\t}", "language": "php", "code": "public function manage_page_type_posts_custom_column( $column_name, $post_id, $term_id = null ) {\n\t\tif ( ! in_array( $this->post_type, papi_get_post_types(), true ) && ! in_array( $this->taxonomy, papi_get_taxonomies(), true ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Hide column for post type. Default is false.\n\t\t *\n\t\t * @param string $post_type\n\t\t */\n\t\tif ( apply_filters( 'papi/settings/column_hide_' . $this->get_meta_type_value(), false ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Column name most be `entry_type`. On taxomy the column name is `post_id` variable.\n\t\tif ( $column_name !== 'entry_type' && $post_id !== 'entry_type' ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the entry type for the post or term.\n\t\t$entry_type = papi_get_entry_type_by_meta_id(\n\t\t\tis_numeric( $post_id ) ? $post_id : $term_id,\n\t\t\tpapi_get_meta_type()\n\t\t);\n\n\t\t$post = ! empty( $this->post_type ) && empty( $this->taxonomy );\n\t\t$type = $post ? 'page' : 'taxonomy';\n\t\t$arg  = $post ? papi_get_post_type() : papi_get_taxonomy();\n\t\t$show = call_user_func_array( \"papi_filter_settings_show_standard_{$type}_type\", [$arg] );\n\n\t\tif ( ! is_null( $entry_type ) && ( $show === false || get_metadata( papi_get_meta_type( $type ), ( is_numeric( $post_id ) ? $post_id : $term_id ), papi_get_page_type_key(), true ) === $entry_type->get_id() ) ) {\n\t\t\techo esc_html( $entry_type->name );\n\t\t} else {\n\t\t\techo esc_html( call_user_func_array( \"papi_filter_settings_standard_{$type}_type_name\", [$arg] ) );\n\t\t}\n\t}", "code_tokens": ["public", "function", "manage_page_type_posts_custom_column", "(", "$", "column_name", ",", "$", "post_id", ",", "$", "term_id", "=", "null", ")", "{", "if", "(", "!", "in_array", "(", "$", "this", "->", "post_type", ",", "papi_get_post_types", "(", ")", ",", "true", ")", "&&", "!", "in_array", "(", "$", "this", "->", "taxonomy", ",", "papi_get_taxonomies", "(", ")", ",", "true", ")", ")", "{", "return", ";", "}", "/**\n\t\t * Hide column for post type. Default is false.\n\t\t *\n\t\t * @param string $post_type\n\t\t */", "if", "(", "apply_filters", "(", "'papi/settings/column_hide_'", ".", "$", "this", "->", "get_meta_type_value", "(", ")", ",", "false", ")", ")", "{", "return", ";", "}", "// Column name most be `entry_type`. On taxomy the column name is `post_id` variable.", "if", "(", "$", "column_name", "!==", "'entry_type'", "&&", "$", "post_id", "!==", "'entry_type'", ")", "{", "return", ";", "}", "// Get the entry type for the post or term.", "$", "entry_type", "=", "papi_get_entry_type_by_meta_id", "(", "is_numeric", "(", "$", "post_id", ")", "?", "$", "post_id", ":", "$", "term_id", ",", "papi_get_meta_type", "(", ")", ")", ";", "$", "post", "=", "!", "empty", "(", "$", "this", "->", "post_type", ")", "&&", "empty", "(", "$", "this", "->", "taxonomy", ")", ";", "$", "type", "=", "$", "post", "?", "'page'", ":", "'taxonomy'", ";", "$", "arg", "=", "$", "post", "?", "papi_get_post_type", "(", ")", ":", "papi_get_taxonomy", "(", ")", ";", "$", "show", "=", "call_user_func_array", "(", "\"papi_filter_settings_show_standard_{$type}_type\"", ",", "[", "$", "arg", "]", ")", ";", "if", "(", "!", "is_null", "(", "$", "entry_type", ")", "&&", "(", "$", "show", "===", "false", "||", "get_metadata", "(", "papi_get_meta_type", "(", "$", "type", ")", ",", "(", "is_numeric", "(", "$", "post_id", ")", "?", "$", "post_id", ":", "$", "term_id", ")", ",", "papi_get_page_type_key", "(", ")", ",", "true", ")", "===", "$", "entry_type", "->", "get_id", "(", ")", ")", ")", "{", "echo", "esc_html", "(", "$", "entry_type", "->", "name", ")", ";", "}", "else", "{", "echo", "esc_html", "(", "call_user_func_array", "(", "\"papi_filter_settings_standard_{$type}_type_name\"", ",", "[", "$", "arg", "]", ")", ")", ";", "}", "}"], "docstring": "Add custom table column to page or taxonomy type.\n\n@param string $column_name\n@param int    $post_id\n@param int    $term_id", "docstring_tokens": ["Add", "custom", "table", "column", "to", "page", "or", "taxonomy", "type", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/admin/class-papi-admin-columns.php#L81-L116", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-table/src/Table/TableRestProxy.php", "func_name": "TableRestProxy.deleteEntityAsync", "original_string": "public function deleteEntityAsync(\n        $table,\n        $partitionKey,\n        $rowKey,\n        DeleteEntityOptions $options = null\n    ) {\n        $context = $this->constructDeleteEntityContext(\n            $table,\n            $partitionKey,\n            $rowKey,\n            $options\n        );\n\n        return $this->sendContextAsync($context);\n    }", "language": "php", "code": "public function deleteEntityAsync(\n        $table,\n        $partitionKey,\n        $rowKey,\n        DeleteEntityOptions $options = null\n    ) {\n        $context = $this->constructDeleteEntityContext(\n            $table,\n            $partitionKey,\n            $rowKey,\n            $options\n        );\n\n        return $this->sendContextAsync($context);\n    }", "code_tokens": ["public", "function", "deleteEntityAsync", "(", "$", "table", ",", "$", "partitionKey", ",", "$", "rowKey", ",", "DeleteEntityOptions", "$", "options", "=", "null", ")", "{", "$", "context", "=", "$", "this", "->", "constructDeleteEntityContext", "(", "$", "table", ",", "$", "partitionKey", ",", "$", "rowKey", ",", "$", "options", ")", ";", "return", "$", "this", "->", "sendContextAsync", "(", "$", "context", ")", ";", "}"], "docstring": "Creates promise to delete an existing entity in a table.\n\n@param string              $table        The name of the table.\n@param string              $partitionKey The entity partition key.\n@param string              $rowKey       The entity row key.\n@param DeleteEntityOptions $options      The optional parameters.\n\n@return \\GuzzleHttp\\Promise\\PromiseInterface\n\n@see http://msdn.microsoft.com/en-us/library/windowsazure/dd135727.aspx", "docstring_tokens": ["Creates", "promise", "to", "delete", "an", "existing", "entity", "in", "a", "table", "."], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-table/src/Table/TableRestProxy.php#L1476-L1490", "partition": "test"}
{"repo": "ekyna/CoreBundle", "path": "Twig/UiExtension.php", "func_name": "UiExtension.renderLocaleSwitcher", "original_string": "public function renderLocaleSwitcher($attributes = [])\n    {\n        // TODO Check if this is a (esi) sub request, as this must never be used in a esi fragment.\n        if (null === $request = $this->requestStack->getCurrentRequest()) {\n            return '';\n        }\n\n        if (!array_key_exists('class', $attributes)) {\n            $attributes['class'] = 'list-inline locale-switcher';\n        }\n\n        return $this->controlsTemplate->renderBlock('locale_switcher', [\n            'locales' => $this->config['locales'],\n            'request' => $request,\n            'attr' => $attributes,\n        ]);\n    }", "language": "php", "code": "public function renderLocaleSwitcher($attributes = [])\n    {\n        // TODO Check if this is a (esi) sub request, as this must never be used in a esi fragment.\n        if (null === $request = $this->requestStack->getCurrentRequest()) {\n            return '';\n        }\n\n        if (!array_key_exists('class', $attributes)) {\n            $attributes['class'] = 'list-inline locale-switcher';\n        }\n\n        return $this->controlsTemplate->renderBlock('locale_switcher', [\n            'locales' => $this->config['locales'],\n            'request' => $request,\n            'attr' => $attributes,\n        ]);\n    }", "code_tokens": ["public", "function", "renderLocaleSwitcher", "(", "$", "attributes", "=", "[", "]", ")", "{", "// TODO Check if this is a (esi) sub request, as this must never be used in a esi fragment.", "if", "(", "null", "===", "$", "request", "=", "$", "this", "->", "requestStack", "->", "getCurrentRequest", "(", ")", ")", "{", "return", "''", ";", "}", "if", "(", "!", "array_key_exists", "(", "'class'", ",", "$", "attributes", ")", ")", "{", "$", "attributes", "[", "'class'", "]", "=", "'list-inline locale-switcher'", ";", "}", "return", "$", "this", "->", "controlsTemplate", "->", "renderBlock", "(", "'locale_switcher'", ",", "[", "'locales'", "=>", "$", "this", "->", "config", "[", "'locales'", "]", ",", "'request'", "=>", "$", "request", ",", "'attr'", "=>", "$", "attributes", ",", "]", ")", ";", "}"], "docstring": "Renders the locale switcher.\n\n@param array $attributes\n@return string", "docstring_tokens": ["Renders", "the", "locale", "switcher", "."], "sha": "a471324311591489e7cebdb805921dd85ba104ec", "url": "https://github.com/ekyna/CoreBundle/blob/a471324311591489e7cebdb805921dd85ba104ec/Twig/UiExtension.php#L209-L225", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Services/Geocoding/GeocoderProvider.php", "func_name": "GeocoderProvider.buildGeocoderResponse", "original_string": "protected function buildGeocoderResponse(\\stdClass $geocoderResponse)\n    {\n        $results = array();\n        foreach ($geocoderResponse->results as $geocoderResult) {\n            $results[] = $this->buildGeocoderResult($geocoderResult);\n        }\n\n        $status = $geocoderResponse->status;\n\n        return new GeocoderResponse($results, $status);\n    }", "language": "php", "code": "protected function buildGeocoderResponse(\\stdClass $geocoderResponse)\n    {\n        $results = array();\n        foreach ($geocoderResponse->results as $geocoderResult) {\n            $results[] = $this->buildGeocoderResult($geocoderResult);\n        }\n\n        $status = $geocoderResponse->status;\n\n        return new GeocoderResponse($results, $status);\n    }", "code_tokens": ["protected", "function", "buildGeocoderResponse", "(", "\\", "stdClass", "$", "geocoderResponse", ")", "{", "$", "results", "=", "array", "(", ")", ";", "foreach", "(", "$", "geocoderResponse", "->", "results", "as", "$", "geocoderResult", ")", "{", "$", "results", "[", "]", "=", "$", "this", "->", "buildGeocoderResult", "(", "$", "geocoderResult", ")", ";", "}", "$", "status", "=", "$", "geocoderResponse", "->", "status", ";", "return", "new", "GeocoderResponse", "(", "$", "results", ",", "$", "status", ")", ";", "}"], "docstring": "Builds the geocoder results accordint to a normalized geocoding results.\n\n@param \\stdClass $geocoderResponse The normalized geocder response.\n\n@return \\Ivory\\GoogleMap\\Services\\Geocoding\\Result\\GeocoderResponse The builded geocoder response.", "docstring_tokens": ["Builds", "the", "geocoder", "results", "accordint", "to", "a", "normalized", "geocoding", "results", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Services/Geocoding/GeocoderProvider.php#L360-L370", "partition": "test"}
{"repo": "hassankhan/Sonic", "path": "src/Sonic/Routing/Router.php", "func_name": "Router.route", "original_string": "public function route(Route $route, $http_method = self::METHOD_GET)\n    {\n        // Is this a valid HTTP method?\n        if (!in_array($http_method, array(\n            self::METHOD_HEAD,\n            self::METHOD_GET,\n            self::METHOD_POST,\n            self::METHOD_PUT,\n            self::METHOD_PATCH,\n            self::METHOD_DELETE\n        ))) {\n            throw new \\InvalidArgumentException(\"The method {$http_method} is invalid\");\n        }\n\n        // Does this URL already exist in the routing table?\n        if (isset($this->routes[$http_method][$route->pattern()])) {\n            // Trigger a new error and exception if errors are on\n            throw new \\LogicException(\"The URI {$route->url()} already exists in the routing table\");\n        }\n\n        // Add the route to the routing table\n        $this->routes[$http_method][$route->pattern()] = $route;\n    }", "language": "php", "code": "public function route(Route $route, $http_method = self::METHOD_GET)\n    {\n        // Is this a valid HTTP method?\n        if (!in_array($http_method, array(\n            self::METHOD_HEAD,\n            self::METHOD_GET,\n            self::METHOD_POST,\n            self::METHOD_PUT,\n            self::METHOD_PATCH,\n            self::METHOD_DELETE\n        ))) {\n            throw new \\InvalidArgumentException(\"The method {$http_method} is invalid\");\n        }\n\n        // Does this URL already exist in the routing table?\n        if (isset($this->routes[$http_method][$route->pattern()])) {\n            // Trigger a new error and exception if errors are on\n            throw new \\LogicException(\"The URI {$route->url()} already exists in the routing table\");\n        }\n\n        // Add the route to the routing table\n        $this->routes[$http_method][$route->pattern()] = $route;\n    }", "code_tokens": ["public", "function", "route", "(", "Route", "$", "route", ",", "$", "http_method", "=", "self", "::", "METHOD_GET", ")", "{", "// Is this a valid HTTP method?", "if", "(", "!", "in_array", "(", "$", "http_method", ",", "array", "(", "self", "::", "METHOD_HEAD", ",", "self", "::", "METHOD_GET", ",", "self", "::", "METHOD_POST", ",", "self", "::", "METHOD_PUT", ",", "self", "::", "METHOD_PATCH", ",", "self", "::", "METHOD_DELETE", ")", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"The method {$http_method} is invalid\"", ")", ";", "}", "// Does this URL already exist in the routing table?", "if", "(", "isset", "(", "$", "this", "->", "routes", "[", "$", "http_method", "]", "[", "$", "route", "->", "pattern", "(", ")", "]", ")", ")", "{", "// Trigger a new error and exception if errors are on", "throw", "new", "\\", "LogicException", "(", "\"The URI {$route->url()} already exists in the routing table\"", ")", ";", "}", "// Add the route to the routing table", "$", "this", "->", "routes", "[", "$", "http_method", "]", "[", "$", "route", "->", "pattern", "(", ")", "]", "=", "$", "route", ";", "}"], "docstring": "Adds a new URL routing rule to the routing table, after converting any of\nour special tokens into proper regular expressions.\n\n@param  Route  $route\n@param  string $http_method\n@throws \\InvalidArgumentException If an invalid HTTP method is specified\n@throws \\LogicException           If the route already exists in the routing table", "docstring_tokens": ["Adds", "a", "new", "URL", "routing", "rule", "to", "the", "routing", "table", "after", "converting", "any", "of", "our", "special", "tokens", "into", "proper", "regular", "expressions", "."], "sha": "8c842343f6bddc063bf6aa9de460d48bc113af64", "url": "https://github.com/hassankhan/Sonic/blob/8c842343f6bddc063bf6aa9de460d48bc113af64/src/Sonic/Routing/Router.php#L178-L200", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Web/Sessions/CachedSessionHandler.php", "func_name": "CachedSessionHandler.destroy", "original_string": "public function destroy($id, $archiveRemove = false)\n    {\n        if (isset($this->keys[$id])) {\n            unset($this->keys[$id]);\n        }\n        $key = $this->getSessionKey($id);\n        return $this->cache->delete($key)->then(\n            function() use ($id) { return $id; },\n            function($error = null) use ($id) {\n                $message = sprintf('Failed to destroy session \"%s\"', $id);\n                throw new SessionException($message, 0, $error);\n            }\n        )->always(function() use ($id, $archiveRemove) {\n            return $archiveRemove ? $this->archive->remove($id) : true;\n        });\n    }", "language": "php", "code": "public function destroy($id, $archiveRemove = false)\n    {\n        if (isset($this->keys[$id])) {\n            unset($this->keys[$id]);\n        }\n        $key = $this->getSessionKey($id);\n        return $this->cache->delete($key)->then(\n            function() use ($id) { return $id; },\n            function($error = null) use ($id) {\n                $message = sprintf('Failed to destroy session \"%s\"', $id);\n                throw new SessionException($message, 0, $error);\n            }\n        )->always(function() use ($id, $archiveRemove) {\n            return $archiveRemove ? $this->archive->remove($id) : true;\n        });\n    }", "code_tokens": ["public", "function", "destroy", "(", "$", "id", ",", "$", "archiveRemove", "=", "false", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "keys", "[", "$", "id", "]", ")", ")", "{", "unset", "(", "$", "this", "->", "keys", "[", "$", "id", "]", ")", ";", "}", "$", "key", "=", "$", "this", "->", "getSessionKey", "(", "$", "id", ")", ";", "return", "$", "this", "->", "cache", "->", "delete", "(", "$", "key", ")", "->", "then", "(", "function", "(", ")", "use", "(", "$", "id", ")", "{", "return", "$", "id", ";", "}", ",", "function", "(", "$", "error", "=", "null", ")", "use", "(", "$", "id", ")", "{", "$", "message", "=", "sprintf", "(", "'Failed to destroy session \"%s\"'", ",", "$", "id", ")", ";", "throw", "new", "SessionException", "(", "$", "message", ",", "0", ",", "$", "error", ")", ";", "}", ")", "->", "always", "(", "function", "(", ")", "use", "(", "$", "id", ",", "$", "archiveRemove", ")", "{", "return", "$", "archiveRemove", "?", "$", "this", "->", "archive", "->", "remove", "(", "$", "id", ")", ":", "true", ";", "}", ")", ";", "}"], "docstring": "Destroy a session\n@param string $id The session ID being destroyed.\n@param bool   $archiveRemove Remove data from archive or no\n@return ExtendedPromiseInterface with bool when finished", "docstring_tokens": ["Destroy", "a", "session"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Web/Sessions/CachedSessionHandler.php#L107-L122", "partition": "test"}
{"repo": "thephpleague/omnipay-common", "path": "src/Common/Message/AbstractRequest.php", "func_name": "AbstractRequest.getAmount", "original_string": "public function getAmount()\n    {\n        $money = $this->getMoney();\n\n        if ($money !== null) {\n            $moneyFormatter = new DecimalMoneyFormatter($this->getCurrencies());\n\n            return $moneyFormatter->format($money);\n        }\n    }", "language": "php", "code": "public function getAmount()\n    {\n        $money = $this->getMoney();\n\n        if ($money !== null) {\n            $moneyFormatter = new DecimalMoneyFormatter($this->getCurrencies());\n\n            return $moneyFormatter->format($money);\n        }\n    }", "code_tokens": ["public", "function", "getAmount", "(", ")", "{", "$", "money", "=", "$", "this", "->", "getMoney", "(", ")", ";", "if", "(", "$", "money", "!==", "null", ")", "{", "$", "moneyFormatter", "=", "new", "DecimalMoneyFormatter", "(", "$", "this", "->", "getCurrencies", "(", ")", ")", ";", "return", "$", "moneyFormatter", "->", "format", "(", "$", "money", ")", ";", "}", "}"], "docstring": "Validates and returns the formatted amount.\n\n@throws InvalidRequestException on any validation failure.\n@return string The amount formatted to the correct number of decimal places for the selected currency.", "docstring_tokens": ["Validates", "and", "returns", "the", "formatted", "amount", "."], "sha": "c4567f786d283851be12319214ac7be7a0a0ee69", "url": "https://github.com/thephpleague/omnipay-common/blob/c4567f786d283851be12319214ac7be7a0a0ee69/src/Common/Message/AbstractRequest.php#L313-L322", "partition": "test"}
{"repo": "flugger/laravel-responder", "path": "src/Resources/ResourceFactory.php", "func_name": "ResourceFactory.resolveResourceKey", "original_string": "protected function resolveResourceKey($data, string $resourceKey = null)\n    {\n        return isset($resourceKey) ? $resourceKey : $this->resourceKeyResolver->resolve($data);\n    }", "language": "php", "code": "protected function resolveResourceKey($data, string $resourceKey = null)\n    {\n        return isset($resourceKey) ? $resourceKey : $this->resourceKeyResolver->resolve($data);\n    }", "code_tokens": ["protected", "function", "resolveResourceKey", "(", "$", "data", ",", "string", "$", "resourceKey", "=", "null", ")", "{", "return", "isset", "(", "$", "resourceKey", ")", "?", "$", "resourceKey", ":", "$", "this", "->", "resourceKeyResolver", "->", "resolve", "(", "$", "data", ")", ";", "}"], "docstring": "Resolve a resource key.\n\n@param  mixed       $data\n@param  string|null $resourceKey\n@return null|string", "docstring_tokens": ["Resolve", "a", "resource", "key", "."], "sha": "4baadabc9087d73927cf13b65a253f9e7ddef15c", "url": "https://github.com/flugger/laravel-responder/blob/4baadabc9087d73927cf13b65a253f9e7ddef15c/src/Resources/ResourceFactory.php#L157-L160", "partition": "test"}
{"repo": "BerliozFramework/HttpMessage", "path": "src/Uri.php", "func_name": "Uri.createFromString", "original_string": "public static function createFromString(string $str): self\n    {\n        $parsedUrl = parse_url($str);\n\n        return new self($parsedUrl['scheme'] ?? '',\n                        $parsedUrl['host'] ?? null,\n                        $parsedUrl['port'] ?? null,\n                        $parsedUrl['path'] ?? '/',\n                        $parsedUrl['query'] ?? '',\n                        $parsedUrl['fragment'] ?? '',\n                        $parsedUrl['user'] ?? '',\n                        $parsedUrl['pass'] ?? '');\n    }", "language": "php", "code": "public static function createFromString(string $str): self\n    {\n        $parsedUrl = parse_url($str);\n\n        return new self($parsedUrl['scheme'] ?? '',\n                        $parsedUrl['host'] ?? null,\n                        $parsedUrl['port'] ?? null,\n                        $parsedUrl['path'] ?? '/',\n                        $parsedUrl['query'] ?? '',\n                        $parsedUrl['fragment'] ?? '',\n                        $parsedUrl['user'] ?? '',\n                        $parsedUrl['pass'] ?? '');\n    }", "code_tokens": ["public", "static", "function", "createFromString", "(", "string", "$", "str", ")", ":", "self", "{", "$", "parsedUrl", "=", "parse_url", "(", "$", "str", ")", ";", "return", "new", "self", "(", "$", "parsedUrl", "[", "'scheme'", "]", "??", "''", ",", "$", "parsedUrl", "[", "'host'", "]", "??", "null", ",", "$", "parsedUrl", "[", "'port'", "]", "??", "null", ",", "$", "parsedUrl", "[", "'path'", "]", "??", "'/'", ",", "$", "parsedUrl", "[", "'query'", "]", "??", "''", ",", "$", "parsedUrl", "[", "'fragment'", "]", "??", "''", ",", "$", "parsedUrl", "[", "'user'", "]", "??", "''", ",", "$", "parsedUrl", "[", "'pass'", "]", "??", "''", ")", ";", "}"], "docstring": "Create Uri object with string\n\n@param string $str\n\n@return \\Berlioz\\Http\\Message\\Uri", "docstring_tokens": ["Create", "Uri", "object", "with", "string"], "sha": "e3edc07ae48e33dbb06a23685c811a72a033c98b", "url": "https://github.com/BerliozFramework/HttpMessage/blob/e3edc07ae48e33dbb06a23685c811a72a033c98b/src/Uri.php#L69-L81", "partition": "test"}
{"repo": "philipnewcomer/wp-ajax-helper", "path": "src/components/Responder.php", "func_name": "Responder.send_response_body", "original_string": "protected function send_response_body() {\n\n\t\tif ( 'json' === $this->response_type ) {\n\n\t\t\t$response_json = wp_json_encode( $this->callback_response );\n\n\t\t\tif ( false !== $response_json ) {\n\t\t\t\techo $response_json;\n\t\t\t}\n\n\t\t} elseif ( 'plain' === $this->response_type ) {\n\t\t\techo $this->callback_response;\n\t\t}\n\t}", "language": "php", "code": "protected function send_response_body() {\n\n\t\tif ( 'json' === $this->response_type ) {\n\n\t\t\t$response_json = wp_json_encode( $this->callback_response );\n\n\t\t\tif ( false !== $response_json ) {\n\t\t\t\techo $response_json;\n\t\t\t}\n\n\t\t} elseif ( 'plain' === $this->response_type ) {\n\t\t\techo $this->callback_response;\n\t\t}\n\t}", "code_tokens": ["protected", "function", "send_response_body", "(", ")", "{", "if", "(", "'json'", "===", "$", "this", "->", "response_type", ")", "{", "$", "response_json", "=", "wp_json_encode", "(", "$", "this", "->", "callback_response", ")", ";", "if", "(", "false", "!==", "$", "response_json", ")", "{", "echo", "$", "response_json", ";", "}", "}", "elseif", "(", "'plain'", "===", "$", "this", "->", "response_type", ")", "{", "echo", "$", "this", "->", "callback_response", ";", "}", "}"], "docstring": "Sends the response body in the appropriate format.", "docstring_tokens": ["Sends", "the", "response", "body", "in", "the", "appropriate", "format", "."], "sha": "3416943af039cbca4eba1efbf4d9f728860e3a5e", "url": "https://github.com/philipnewcomer/wp-ajax-helper/blob/3416943af039cbca4eba1efbf4d9f728860e3a5e/src/components/Responder.php#L90-L103", "partition": "test"}
{"repo": "locomotivemtl/charcoal-object", "path": "src/Charcoal/Object/HierarchicalTrait.php", "func_name": "HierarchicalTrait.addObjectToCache", "original_string": "private function addObjectToCache(ModelInterface $obj)\n    {\n        static::$objectCache[$this->objType()][$obj->id()] = $obj;\n\n        return $this;\n    }", "language": "php", "code": "private function addObjectToCache(ModelInterface $obj)\n    {\n        static::$objectCache[$this->objType()][$obj->id()] = $obj;\n\n        return $this;\n    }", "code_tokens": ["private", "function", "addObjectToCache", "(", "ModelInterface", "$", "obj", ")", "{", "static", "::", "$", "objectCache", "[", "$", "this", "->", "objType", "(", ")", "]", "[", "$", "obj", "->", "id", "(", ")", "]", "=", "$", "obj", ";", "return", "$", "this", ";", "}"], "docstring": "Add an object to the cache store.\n\n@param ModelInterface $obj The object to store.\n@return HierarchicalInterface Chainable", "docstring_tokens": ["Add", "an", "object", "to", "the", "cache", "store", "."], "sha": "11c459d0e1519de215ca1c18301ee8f5e8d1e09b", "url": "https://github.com/locomotivemtl/charcoal-object/blob/11c459d0e1519de215ca1c18301ee8f5e8d1e09b/src/Charcoal/Object/HierarchicalTrait.php#L479-L484", "partition": "test"}
{"repo": "sheadawson/silverstripe-editlock", "path": "code/extensions/EditLockControllerExtension.php", "func_name": "EditLockControllerExtension.updateForm", "original_string": "public function updateForm($form, $record)\n    {\n        if (!$record) {\n            return;\n        }\n        // if the current user can't edit the record anyway, we don't need to do anything\n        if ($record && !$record->canEdit()) {\n            return $form;\n        }\n        \n        // check if all classes should be locked by default or a certain list\n        $lockedClasses = Config::inst()->get('EditLockControllerExtension', 'lockedClasses');\n        if (!empty($lockedClasses)) {\n            if (!in_array($record->ClassName, $lockedClasses)) {\n                return $form;\n            }\n        }\n\n        // check if this record is being edited by another user\n        $beingEdited = RecordBeingEdited::get()->filter(array(\n            'RecordID' => $record->ID,\n            'RecordClass' => $record->ClassName,\n            'EditorID:not' => Member::currentUserID()\n        ))->first();\n\n        if ($beingEdited) {\n            if ($this->owner->getRequest()->getVar('editanyway') == '1') {\n                $beingEdited->isEditingAnyway();\n                return Controller::curr()->redirectBack();\n            }\n            // if the RecordBeingEdited record has not been updated in the last 15 seconds (via ping)\n            // the person editing it must have left the edit form, so delete the RecordBeingEdited\n            if (strtotime($beingEdited->LastEdited) < (time() - 15)) {\n                $beingEdited->delete();\n            // otherwise, there must be someone currently editing this record, so make the form readonly\n            // unless they have permission to, and have chosen to edit anyway\n            } else {\n                if (!$beingEdited->isEditingAnyway()) {\n                    $readonlyFields = $form->Fields()->makeReadonly();\n                    $form->setFields($readonlyFields);\n                    $form->addExtraClass('edit-locked');\n                    $form->setAttribute('data-lockedmessage', $beingEdited->getLockedMessage());\n                    return;\n                }\n            }\n        }\n\n        $form->setAttribute('data-recordclass', $record->ClassName);\n        $form->setAttribute('data-recordid', $record->ID);\n        $form->setAttribute('data-lockurl', $this->owner->link('lock'));\n        return $form;\n    }", "language": "php", "code": "public function updateForm($form, $record)\n    {\n        if (!$record) {\n            return;\n        }\n        // if the current user can't edit the record anyway, we don't need to do anything\n        if ($record && !$record->canEdit()) {\n            return $form;\n        }\n        \n        // check if all classes should be locked by default or a certain list\n        $lockedClasses = Config::inst()->get('EditLockControllerExtension', 'lockedClasses');\n        if (!empty($lockedClasses)) {\n            if (!in_array($record->ClassName, $lockedClasses)) {\n                return $form;\n            }\n        }\n\n        // check if this record is being edited by another user\n        $beingEdited = RecordBeingEdited::get()->filter(array(\n            'RecordID' => $record->ID,\n            'RecordClass' => $record->ClassName,\n            'EditorID:not' => Member::currentUserID()\n        ))->first();\n\n        if ($beingEdited) {\n            if ($this->owner->getRequest()->getVar('editanyway') == '1') {\n                $beingEdited->isEditingAnyway();\n                return Controller::curr()->redirectBack();\n            }\n            // if the RecordBeingEdited record has not been updated in the last 15 seconds (via ping)\n            // the person editing it must have left the edit form, so delete the RecordBeingEdited\n            if (strtotime($beingEdited->LastEdited) < (time() - 15)) {\n                $beingEdited->delete();\n            // otherwise, there must be someone currently editing this record, so make the form readonly\n            // unless they have permission to, and have chosen to edit anyway\n            } else {\n                if (!$beingEdited->isEditingAnyway()) {\n                    $readonlyFields = $form->Fields()->makeReadonly();\n                    $form->setFields($readonlyFields);\n                    $form->addExtraClass('edit-locked');\n                    $form->setAttribute('data-lockedmessage', $beingEdited->getLockedMessage());\n                    return;\n                }\n            }\n        }\n\n        $form->setAttribute('data-recordclass', $record->ClassName);\n        $form->setAttribute('data-recordid', $record->ID);\n        $form->setAttribute('data-lockurl', $this->owner->link('lock'));\n        return $form;\n    }", "code_tokens": ["public", "function", "updateForm", "(", "$", "form", ",", "$", "record", ")", "{", "if", "(", "!", "$", "record", ")", "{", "return", ";", "}", "// if the current user can't edit the record anyway, we don't need to do anything", "if", "(", "$", "record", "&&", "!", "$", "record", "->", "canEdit", "(", ")", ")", "{", "return", "$", "form", ";", "}", "// check if all classes should be locked by default or a certain list", "$", "lockedClasses", "=", "Config", "::", "inst", "(", ")", "->", "get", "(", "'EditLockControllerExtension'", ",", "'lockedClasses'", ")", ";", "if", "(", "!", "empty", "(", "$", "lockedClasses", ")", ")", "{", "if", "(", "!", "in_array", "(", "$", "record", "->", "ClassName", ",", "$", "lockedClasses", ")", ")", "{", "return", "$", "form", ";", "}", "}", "// check if this record is being edited by another user", "$", "beingEdited", "=", "RecordBeingEdited", "::", "get", "(", ")", "->", "filter", "(", "array", "(", "'RecordID'", "=>", "$", "record", "->", "ID", ",", "'RecordClass'", "=>", "$", "record", "->", "ClassName", ",", "'EditorID:not'", "=>", "Member", "::", "currentUserID", "(", ")", ")", ")", "->", "first", "(", ")", ";", "if", "(", "$", "beingEdited", ")", "{", "if", "(", "$", "this", "->", "owner", "->", "getRequest", "(", ")", "->", "getVar", "(", "'editanyway'", ")", "==", "'1'", ")", "{", "$", "beingEdited", "->", "isEditingAnyway", "(", ")", ";", "return", "Controller", "::", "curr", "(", ")", "->", "redirectBack", "(", ")", ";", "}", "// if the RecordBeingEdited record has not been updated in the last 15 seconds (via ping)", "// the person editing it must have left the edit form, so delete the RecordBeingEdited", "if", "(", "strtotime", "(", "$", "beingEdited", "->", "LastEdited", ")", "<", "(", "time", "(", ")", "-", "15", ")", ")", "{", "$", "beingEdited", "->", "delete", "(", ")", ";", "// otherwise, there must be someone currently editing this record, so make the form readonly", "// unless they have permission to, and have chosen to edit anyway", "}", "else", "{", "if", "(", "!", "$", "beingEdited", "->", "isEditingAnyway", "(", ")", ")", "{", "$", "readonlyFields", "=", "$", "form", "->", "Fields", "(", ")", "->", "makeReadonly", "(", ")", ";", "$", "form", "->", "setFields", "(", "$", "readonlyFields", ")", ";", "$", "form", "->", "addExtraClass", "(", "'edit-locked'", ")", ";", "$", "form", "->", "setAttribute", "(", "'data-lockedmessage'", ",", "$", "beingEdited", "->", "getLockedMessage", "(", ")", ")", ";", "return", ";", "}", "}", "}", "$", "form", "->", "setAttribute", "(", "'data-recordclass'", ",", "$", "record", "->", "ClassName", ")", ";", "$", "form", "->", "setAttribute", "(", "'data-recordid'", ",", "$", "record", "->", "ID", ")", ";", "$", "form", "->", "setAttribute", "(", "'data-lockurl'", ",", "$", "this", "->", "owner", "->", "link", "(", "'lock'", ")", ")", ";", "return", "$", "form", ";", "}"], "docstring": "Updtes the edit form based on whether it is being edited or not", "docstring_tokens": ["Updtes", "the", "edit", "form", "based", "on", "whether", "it", "is", "being", "edited", "or", "not"], "sha": "d9223fd5999b9ebc5582d7ee22f1674308358629", "url": "https://github.com/sheadawson/silverstripe-editlock/blob/d9223fd5999b9ebc5582d7ee22f1674308358629/code/extensions/EditLockControllerExtension.php#L22-L73", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Data/BizField.php", "func_name": "BizField.checkRequired", "original_string": "public function checkRequired()\n    {\n        if (!$this->required || $this->required == \"\") {\n            return false;\n        } elseif ($this->required == \"Y\") {\n            $required = true;\n        } elseif ($required != \"N\") {\n            $required = false;\n        } else {\n            $required = Expression::evaluateExpression($this->required, $this->getDataObj());\n        }\n        return $required;\n    }", "language": "php", "code": "public function checkRequired()\n    {\n        if (!$this->required || $this->required == \"\") {\n            return false;\n        } elseif ($this->required == \"Y\") {\n            $required = true;\n        } elseif ($required != \"N\") {\n            $required = false;\n        } else {\n            $required = Expression::evaluateExpression($this->required, $this->getDataObj());\n        }\n        return $required;\n    }", "code_tokens": ["public", "function", "checkRequired", "(", ")", "{", "if", "(", "!", "$", "this", "->", "required", "||", "$", "this", "->", "required", "==", "\"\"", ")", "{", "return", "false", ";", "}", "elseif", "(", "$", "this", "->", "required", "==", "\"Y\"", ")", "{", "$", "required", "=", "true", ";", "}", "elseif", "(", "$", "required", "!=", "\"N\"", ")", "{", "$", "required", "=", "false", ";", "}", "else", "{", "$", "required", "=", "Expression", "::", "evaluateExpression", "(", "$", "this", "->", "required", ",", "$", "this", "->", "getDataObj", "(", ")", ")", ";", "}", "return", "$", "required", ";", "}"], "docstring": "Check if the field is a required field\n\n@return boolean true if the field is a required field", "docstring_tokens": ["Check", "if", "the", "field", "is", "a", "required", "field"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Data/BizField.php#L370-L382", "partition": "test"}
{"repo": "3rdpartyeve/perry", "path": "src/Perry/Cache/File/FilePool.php", "func_name": "FilePool.getItems", "original_string": "public function getItems(array $keys)\n    {\n        $result = array();\n\n        foreach ($keys as $key) {\n            $result[$key] = $this->getItem($key);\n        }\n\n        return $result;\n    }", "language": "php", "code": "public function getItems(array $keys)\n    {\n        $result = array();\n\n        foreach ($keys as $key) {\n            $result[$key] = $this->getItem($key);\n        }\n\n        return $result;\n    }", "code_tokens": ["public", "function", "getItems", "(", "array", "$", "keys", ")", "{", "$", "result", "=", "array", "(", ")", ";", "foreach", "(", "$", "keys", "as", "$", "key", ")", "{", "$", "result", "[", "$", "key", "]", "=", "$", "this", "->", "getItem", "(", "$", "key", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Returns a traversable set of cache items.\n\n@param array $keys\nAn indexed array of keys of items to retrieve.\n@return \\Traversable\nA traversable collection of Cache Items in the same order as the $keys\nparameter, keyed by the cache keys of each item. If no items are found\nan empty Traversable collection will be returned.", "docstring_tokens": ["Returns", "a", "traversable", "set", "of", "cache", "items", "."], "sha": "921f024eeb6bebc3dc6be8be3497aef72fe5a17a", "url": "https://github.com/3rdpartyeve/perry/blob/921f024eeb6bebc3dc6be8be3497aef72fe5a17a/src/Perry/Cache/File/FilePool.php#L69-L78", "partition": "test"}
{"repo": "RichardTMiles/CarbonPHP", "path": "Session.php", "func_name": "Session.gc", "original_string": "public function gc($maxLife)\n    {\n        $db = Database::database();\n        return $db->prepare('DELETE FROM sessions WHERE (UNIX_TIMESTAMP(session_expires) + ? ) < UNIX_TIMESTAMP(?)')->execute([$maxLife, date('Y-m-d H:i:s')]) ?\n            true : false;\n    }", "language": "php", "code": "public function gc($maxLife)\n    {\n        $db = Database::database();\n        return $db->prepare('DELETE FROM sessions WHERE (UNIX_TIMESTAMP(session_expires) + ? ) < UNIX_TIMESTAMP(?)')->execute([$maxLife, date('Y-m-d H:i:s')]) ?\n            true : false;\n    }", "code_tokens": ["public", "function", "gc", "(", "$", "maxLife", ")", "{", "$", "db", "=", "Database", "::", "database", "(", ")", ";", "return", "$", "db", "->", "prepare", "(", "'DELETE FROM sessions WHERE (UNIX_TIMESTAMP(session_expires) + ? ) < UNIX_TIMESTAMP(?)'", ")", "->", "execute", "(", "[", "$", "maxLife", ",", "date", "(", "'Y-m-d H:i:s'", ")", "]", ")", "?", "true", ":", "false", ";", "}"], "docstring": "This is our garbage collector. If a session is expired attempt to remove it.\nThis function is executed via a probability. See link for more details.\n@link http://php.net/manual/en/features.gc.php\n@param int $maxLife\n@return bool", "docstring_tokens": ["This", "is", "our", "garbage", "collector", ".", "If", "a", "session", "is", "expired", "attempt", "to", "remove", "it", ".", "This", "function", "is", "executed", "via", "a", "probability", ".", "See", "link", "for", "more", "details", "."], "sha": "22a403db161482f19a91771f62b930b8243a04c6", "url": "https://github.com/RichardTMiles/CarbonPHP/blob/22a403db161482f19a91771f62b930b8243a04c6/Session.php#L282-L287", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/HttpClient/Request.php", "func_name": "Request.setOptions", "original_string": "public function setOptions($options, $merge = false)\n    {\n        if ($merge) {\n            $this->options = array_merge($this->options, $options);\n        } else {\n            $this->options = $options;\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function setOptions($options, $merge = false)\n    {\n        if ($merge) {\n            $this->options = array_merge($this->options, $options);\n        } else {\n            $this->options = $options;\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setOptions", "(", "$", "options", ",", "$", "merge", "=", "false", ")", "{", "if", "(", "$", "merge", ")", "{", "$", "this", "->", "options", "=", "array_merge", "(", "$", "this", "->", "options", ",", "$", "options", ")", ";", "}", "else", "{", "$", "this", "->", "options", "=", "$", "options", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Define the options\n\n@param array $options\n@param bool $merge Est-ce que l'on ajoute les options aux options existantes, ou les ecrases\n\n@return $this", "docstring_tokens": ["Define", "the", "options"], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/HttpClient/Request.php#L394-L403", "partition": "test"}
{"repo": "Azure/azure-storage-php", "path": "azure-storage-table/src/Table/TableRestProxy.php", "func_name": "TableRestProxy.addOptionalQuery", "original_string": "private function addOptionalQuery(array $queryParam, Query $query)\n    {\n        if (!is_null($query)) {\n            $selectedFields = $query->getSelectFields();\n            if (!empty($selectedFields)) {\n                $final = $this->encodeODataUriValues($selectedFields);\n\n                $this->addOptionalQueryParam(\n                    $queryParam,\n                    Resources::QP_SELECT,\n                    implode(',', $final)\n                );\n            }\n\n            if (!is_null($query->getTop())) {\n                $final = strval($this->encodeODataUriValue($query->getTop()));\n\n                $this->addOptionalQueryParam(\n                    $queryParam,\n                    Resources::QP_TOP,\n                    $final\n                );\n            }\n\n            if (!is_null($query->getFilter())) {\n                $final = $this->buildFilterExpression($query->getFilter());\n                $this->addOptionalQueryParam(\n                    $queryParam,\n                    Resources::QP_FILTER,\n                    $final\n                );\n            }\n        }\n\n        return $queryParam;\n    }", "language": "php", "code": "private function addOptionalQuery(array $queryParam, Query $query)\n    {\n        if (!is_null($query)) {\n            $selectedFields = $query->getSelectFields();\n            if (!empty($selectedFields)) {\n                $final = $this->encodeODataUriValues($selectedFields);\n\n                $this->addOptionalQueryParam(\n                    $queryParam,\n                    Resources::QP_SELECT,\n                    implode(',', $final)\n                );\n            }\n\n            if (!is_null($query->getTop())) {\n                $final = strval($this->encodeODataUriValue($query->getTop()));\n\n                $this->addOptionalQueryParam(\n                    $queryParam,\n                    Resources::QP_TOP,\n                    $final\n                );\n            }\n\n            if (!is_null($query->getFilter())) {\n                $final = $this->buildFilterExpression($query->getFilter());\n                $this->addOptionalQueryParam(\n                    $queryParam,\n                    Resources::QP_FILTER,\n                    $final\n                );\n            }\n        }\n\n        return $queryParam;\n    }", "code_tokens": ["private", "function", "addOptionalQuery", "(", "array", "$", "queryParam", ",", "Query", "$", "query", ")", "{", "if", "(", "!", "is_null", "(", "$", "query", ")", ")", "{", "$", "selectedFields", "=", "$", "query", "->", "getSelectFields", "(", ")", ";", "if", "(", "!", "empty", "(", "$", "selectedFields", ")", ")", "{", "$", "final", "=", "$", "this", "->", "encodeODataUriValues", "(", "$", "selectedFields", ")", ";", "$", "this", "->", "addOptionalQueryParam", "(", "$", "queryParam", ",", "Resources", "::", "QP_SELECT", ",", "implode", "(", "','", ",", "$", "final", ")", ")", ";", "}", "if", "(", "!", "is_null", "(", "$", "query", "->", "getTop", "(", ")", ")", ")", "{", "$", "final", "=", "strval", "(", "$", "this", "->", "encodeODataUriValue", "(", "$", "query", "->", "getTop", "(", ")", ")", ")", ";", "$", "this", "->", "addOptionalQueryParam", "(", "$", "queryParam", ",", "Resources", "::", "QP_TOP", ",", "$", "final", ")", ";", "}", "if", "(", "!", "is_null", "(", "$", "query", "->", "getFilter", "(", ")", ")", ")", "{", "$", "final", "=", "$", "this", "->", "buildFilterExpression", "(", "$", "query", "->", "getFilter", "(", ")", ")", ";", "$", "this", "->", "addOptionalQueryParam", "(", "$", "queryParam", ",", "Resources", "::", "QP_FILTER", ",", "$", "final", ")", ";", "}", "}", "return", "$", "queryParam", ";", "}"], "docstring": "Adds query object to the query parameter array\n\n@param array $queryParam The URI query parameters\n@param Query $query      The query object\n\n@return array", "docstring_tokens": ["Adds", "query", "object", "to", "the", "query", "parameter", "array"], "sha": "9e53aa6e447e2260a29d54b96fab9fe18b665afa", "url": "https://github.com/Azure/azure-storage-php/blob/9e53aa6e447e2260a29d54b96fab9fe18b665afa/azure-storage-table/src/Table/TableRestProxy.php#L668-L703", "partition": "test"}
{"repo": "jcalderonzumba/gastonjs", "path": "src/NetworkTraffic/Request.php", "func_name": "Request.createResponseParts", "original_string": "protected function createResponseParts($responseParts) {\n    if ($responseParts === null) {\n      return array();\n    }\n    $responses = array();\n    foreach ($responseParts as $responsePart) {\n      $responses[] = new Response($responsePart);\n    }\n    return $responses;\n  }", "language": "php", "code": "protected function createResponseParts($responseParts) {\n    if ($responseParts === null) {\n      return array();\n    }\n    $responses = array();\n    foreach ($responseParts as $responsePart) {\n      $responses[] = new Response($responsePart);\n    }\n    return $responses;\n  }", "code_tokens": ["protected", "function", "createResponseParts", "(", "$", "responseParts", ")", "{", "if", "(", "$", "responseParts", "===", "null", ")", "{", "return", "array", "(", ")", ";", "}", "$", "responses", "=", "array", "(", ")", ";", "foreach", "(", "$", "responseParts", "as", "$", "responsePart", ")", "{", "$", "responses", "[", "]", "=", "new", "Response", "(", "$", "responsePart", ")", ";", "}", "return", "$", "responses", ";", "}"], "docstring": "Creates an array of Response objects from a given response array\n@param $responseParts\n@return array", "docstring_tokens": ["Creates", "an", "array", "of", "Response", "objects", "from", "a", "given", "response", "array"], "sha": "fe5f2506264343ce74db4a7ab1c0bb3f9b8bc35a", "url": "https://github.com/jcalderonzumba/gastonjs/blob/fe5f2506264343ce74db4a7ab1c0bb3f9b8bc35a/src/NetworkTraffic/Request.php#L30-L39", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/PEAR/Registry.php", "func_name": "PEAR_Registry.isAlias", "original_string": "function isAlias($alias)\n    {\n        if (PEAR::isError($e = $this->_lock(LOCK_SH))) {\n            return $e;\n        }\n        $ret = $this->_isChannelAlias($alias);\n        $this->_unlock();\n        return $ret;\n    }", "language": "php", "code": "function isAlias($alias)\n    {\n        if (PEAR::isError($e = $this->_lock(LOCK_SH))) {\n            return $e;\n        }\n        $ret = $this->_isChannelAlias($alias);\n        $this->_unlock();\n        return $ret;\n    }", "code_tokens": ["function", "isAlias", "(", "$", "alias", ")", "{", "if", "(", "PEAR", "::", "isError", "(", "$", "e", "=", "$", "this", "->", "_lock", "(", "LOCK_SH", ")", ")", ")", "{", "return", "$", "e", ";", "}", "$", "ret", "=", "$", "this", "->", "_isChannelAlias", "(", "$", "alias", ")", ";", "$", "this", "->", "_unlock", "(", ")", ";", "return", "$", "ret", ";", "}"], "docstring": "Determines whether the parameter is an alias of a channel\n@param string\n@return bool", "docstring_tokens": ["Determines", "whether", "the", "parameter", "is", "an", "alias", "of", "a", "channel"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/PEAR/Registry.php#L1624-L1632", "partition": "test"}
{"repo": "shumkov/rediska", "path": "library/Rediska/Key.php", "func_name": "Rediska_Key.setBit", "original_string": "public function setBit($offset, $bit)\n    {\n        return $this->_getRediskaOn()->setBit($this->getName(), $offset, $bit);\n    }", "language": "php", "code": "public function setBit($offset, $bit)\n    {\n        return $this->_getRediskaOn()->setBit($this->getName(), $offset, $bit);\n    }", "code_tokens": ["public", "function", "setBit", "(", "$", "offset", ",", "$", "bit", ")", "{", "return", "$", "this", "->", "_getRediskaOn", "(", ")", "->", "setBit", "(", "$", "this", "->", "getName", "(", ")", ",", "$", "offset", ",", "$", "bit", ")", ";", "}"], "docstring": "Returns the bit value at offset in the string value stored at key\n\n@param integer $offset Offset\n@param integer $bit    Bit (0 or 1)\n@return integer", "docstring_tokens": ["Returns", "the", "bit", "value", "at", "offset", "in", "the", "string", "value", "stored", "at", "key"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/library/Rediska/Key.php#L101-L104", "partition": "test"}
{"repo": "laravie/html", "path": "src/FormBuilder.php", "func_name": "FormBuilder.formatLabel", "original_string": "protected function formatLabel(string $name, ?string $value): string\n    {\n        return $value ?? \\ucwords(\\str_replace('_', ' ', $name));\n    }", "language": "php", "code": "protected function formatLabel(string $name, ?string $value): string\n    {\n        return $value ?? \\ucwords(\\str_replace('_', ' ', $name));\n    }", "code_tokens": ["protected", "function", "formatLabel", "(", "string", "$", "name", ",", "?", "string", "$", "value", ")", ":", "string", "{", "return", "$", "value", "??", "\\", "ucwords", "(", "\\", "str_replace", "(", "'_'", ",", "' '", ",", "$", "name", ")", ")", ";", "}"], "docstring": "Format the label value.\n\n@param  string  $name\n@param  string|null  $value\n\n@return string", "docstring_tokens": ["Format", "the", "label", "value", "."], "sha": "b5428277451b00d54abc6d31307a45c8999e197b", "url": "https://github.com/laravie/html/blob/b5428277451b00d54abc6d31307a45c8999e197b/src/FormBuilder.php#L168-L171", "partition": "test"}
{"repo": "ElfSundae/laravel-api", "path": "src/ApiResponse.php", "func_name": "ApiResponse.convertObjectToArray", "original_string": "protected function convertObjectToArray($object)\n    {\n        if (method_exists($object, 'toArray')) {\n            return $object->toArray();\n        }\n\n        return json_decode(json_encode($object, true), true);\n    }", "language": "php", "code": "protected function convertObjectToArray($object)\n    {\n        if (method_exists($object, 'toArray')) {\n            return $object->toArray();\n        }\n\n        return json_decode(json_encode($object, true), true);\n    }", "code_tokens": ["protected", "function", "convertObjectToArray", "(", "$", "object", ")", "{", "if", "(", "method_exists", "(", "$", "object", ",", "'toArray'", ")", ")", "{", "return", "$", "object", "->", "toArray", "(", ")", ";", "}", "return", "json_decode", "(", "json_encode", "(", "$", "object", ",", "true", ")", ",", "true", ")", ";", "}"], "docstring": "Convert an object to array.\n\n@param  mixed  $object\n@return array", "docstring_tokens": ["Convert", "an", "object", "to", "array", "."], "sha": "bb9f771cdd324855c6d7b18ad4c0b74c59b67bd6", "url": "https://github.com/ElfSundae/laravel-api/blob/bb9f771cdd324855c6d7b18ad4c0b74c59b67bd6/src/ApiResponse.php#L127-L134", "partition": "test"}
{"repo": "openbizx/openbizx", "path": "src/Data/BizDataObj.php", "func_name": "BizDataObj.getJoinFields", "original_string": "public function getJoinFields($joinDataObj)\n    {\n        // get the maintable of the joindataobj\n        $joinTable = $joinDataObj->mainTableName;\n        $returnRecord = array();\n\n        // find the proper join according to the maintable\n        foreach ($this->tableJoins as $tableJoin) {\n            if ($tableJoin->table == $joinTable) {\n                // populate the column-fieldvalue to columnRef-fieldvalue\n                // get the field mapping to the column, then get the field value\n                $joinFieldName = $joinDataObj->bizRecord->getFieldByColumn($tableJoin->column); // joined-main table\n\n                if (!$joinFieldName) {\n                    continue;\n                }\n\n                $refFieldName = $this->bizRecord->getFieldByColumn($tableJoin->columnRef); // join table\n                $returnRecord[$refFieldName] = $joinFieldName;\n\n                // populate joinRecord's field to current record\n                foreach ($this->bizRecord as $field) {\n                    if ($field->join == $tableJoin->objectName) {\n                        // use join column to match joinRecord field's column\n                        $jFieldName = $joinDataObj->bizRecord->getFieldByColumn($field->column); // joined-main table\n                        $returnRecord[$field->objectName] = $jFieldName;\n                    }\n                }\n                break;\n            }\n        }\n        return $returnRecord;\n    }", "language": "php", "code": "public function getJoinFields($joinDataObj)\n    {\n        // get the maintable of the joindataobj\n        $joinTable = $joinDataObj->mainTableName;\n        $returnRecord = array();\n\n        // find the proper join according to the maintable\n        foreach ($this->tableJoins as $tableJoin) {\n            if ($tableJoin->table == $joinTable) {\n                // populate the column-fieldvalue to columnRef-fieldvalue\n                // get the field mapping to the column, then get the field value\n                $joinFieldName = $joinDataObj->bizRecord->getFieldByColumn($tableJoin->column); // joined-main table\n\n                if (!$joinFieldName) {\n                    continue;\n                }\n\n                $refFieldName = $this->bizRecord->getFieldByColumn($tableJoin->columnRef); // join table\n                $returnRecord[$refFieldName] = $joinFieldName;\n\n                // populate joinRecord's field to current record\n                foreach ($this->bizRecord as $field) {\n                    if ($field->join == $tableJoin->objectName) {\n                        // use join column to match joinRecord field's column\n                        $jFieldName = $joinDataObj->bizRecord->getFieldByColumn($field->column); // joined-main table\n                        $returnRecord[$field->objectName] = $jFieldName;\n                    }\n                }\n                break;\n            }\n        }\n        return $returnRecord;\n    }", "code_tokens": ["public", "function", "getJoinFields", "(", "$", "joinDataObj", ")", "{", "// get the maintable of the joindataobj", "$", "joinTable", "=", "$", "joinDataObj", "->", "mainTableName", ";", "$", "returnRecord", "=", "array", "(", ")", ";", "// find the proper join according to the maintable", "foreach", "(", "$", "this", "->", "tableJoins", "as", "$", "tableJoin", ")", "{", "if", "(", "$", "tableJoin", "->", "table", "==", "$", "joinTable", ")", "{", "// populate the column-fieldvalue to columnRef-fieldvalue", "// get the field mapping to the column, then get the field value", "$", "joinFieldName", "=", "$", "joinDataObj", "->", "bizRecord", "->", "getFieldByColumn", "(", "$", "tableJoin", "->", "column", ")", ";", "// joined-main table", "if", "(", "!", "$", "joinFieldName", ")", "{", "continue", ";", "}", "$", "refFieldName", "=", "$", "this", "->", "bizRecord", "->", "getFieldByColumn", "(", "$", "tableJoin", "->", "columnRef", ")", ";", "// join table", "$", "returnRecord", "[", "$", "refFieldName", "]", "=", "$", "joinFieldName", ";", "// populate joinRecord's field to current record", "foreach", "(", "$", "this", "->", "bizRecord", "as", "$", "field", ")", "{", "if", "(", "$", "field", "->", "join", "==", "$", "tableJoin", "->", "objectName", ")", "{", "// use join column to match joinRecord field's column", "$", "jFieldName", "=", "$", "joinDataObj", "->", "bizRecord", "->", "getFieldByColumn", "(", "$", "field", "->", "column", ")", ";", "// joined-main table", "$", "returnRecord", "[", "$", "field", "->", "objectName", "]", "=", "$", "jFieldName", ";", "}", "}", "break", ";", "}", "}", "return", "$", "returnRecord", ";", "}"], "docstring": "Get all fields that belong to the same join of the input field\n\n@param BizDataObj $joinDataObj the join data object\n@return array joined fields array", "docstring_tokens": ["Get", "all", "fields", "that", "belong", "to", "the", "same", "join", "of", "the", "input", "field"], "sha": "573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc", "url": "https://github.com/openbizx/openbizx/blob/573dcaf9664e16b1f6f17091e4623cd9f2eb4bdc/src/Data/BizDataObj.php#L750-L782", "partition": "test"}
{"repo": "Cecilapp/PHPoole", "path": "src/Renderer/Twig/Extension.php", "func_name": "Extension.createUrl", "original_string": "public function createUrl(\\Twig_Environment $env, $value = null, $options = null)\n    {\n        $base = '';\n        $baseurl = $env->getGlobals()['site']['baseurl'];\n        $hash = md5($env->getGlobals()['site']['time']);\n        $canonical = null;\n        $addhash = true;\n\n        if (isset($options['canonical'])) {\n            $canonical = $options['canonical'];\n        }\n        if (is_bool($options)) { // backward compatibility\n            $canonical = $options;\n        }\n        if (isset($options['addhash'])) {\n            $addhash = $options['addhash'];\n        }\n\n        if ($env->getGlobals()['site']['canonicalurl'] === true || $canonical === true) {\n            $base = rtrim($baseurl, '/');\n        }\n        if ($canonical === false) {\n            $base = '';\n        }\n\n        if ($value instanceof Page) {\n            $value = $value->getPermalink();\n            if (false !== strpos($value, '.')) { // file URL (with a dot for extension)\n                $url = $base.'/'.ltrim($value, '/');\n            } else {\n                $url = $base.'/'.ltrim(rtrim($value, '/').'/', '/');\n            }\n        } else {\n            if (preg_match('~^(?:f|ht)tps?://~i', $value)) { // external URL\n                $url = $value;\n            } elseif (false !== strpos($value, '.')) { // file URL (with a dot for extension)\n                $url = $base.'/'.ltrim($value, '/');\n                if ($addhash) {\n                    $url .= '?'.$hash;\n                }\n            } else {\n                $value = $this->slugifyFilter($value);\n                $url = $base.'/'.ltrim(rtrim($value, '/').'/', '/');\n            }\n        }\n\n        return $url;\n    }", "language": "php", "code": "public function createUrl(\\Twig_Environment $env, $value = null, $options = null)\n    {\n        $base = '';\n        $baseurl = $env->getGlobals()['site']['baseurl'];\n        $hash = md5($env->getGlobals()['site']['time']);\n        $canonical = null;\n        $addhash = true;\n\n        if (isset($options['canonical'])) {\n            $canonical = $options['canonical'];\n        }\n        if (is_bool($options)) { // backward compatibility\n            $canonical = $options;\n        }\n        if (isset($options['addhash'])) {\n            $addhash = $options['addhash'];\n        }\n\n        if ($env->getGlobals()['site']['canonicalurl'] === true || $canonical === true) {\n            $base = rtrim($baseurl, '/');\n        }\n        if ($canonical === false) {\n            $base = '';\n        }\n\n        if ($value instanceof Page) {\n            $value = $value->getPermalink();\n            if (false !== strpos($value, '.')) { // file URL (with a dot for extension)\n                $url = $base.'/'.ltrim($value, '/');\n            } else {\n                $url = $base.'/'.ltrim(rtrim($value, '/').'/', '/');\n            }\n        } else {\n            if (preg_match('~^(?:f|ht)tps?://~i', $value)) { // external URL\n                $url = $value;\n            } elseif (false !== strpos($value, '.')) { // file URL (with a dot for extension)\n                $url = $base.'/'.ltrim($value, '/');\n                if ($addhash) {\n                    $url .= '?'.$hash;\n                }\n            } else {\n                $value = $this->slugifyFilter($value);\n                $url = $base.'/'.ltrim(rtrim($value, '/').'/', '/');\n            }\n        }\n\n        return $url;\n    }", "code_tokens": ["public", "function", "createUrl", "(", "\\", "Twig_Environment", "$", "env", ",", "$", "value", "=", "null", ",", "$", "options", "=", "null", ")", "{", "$", "base", "=", "''", ";", "$", "baseurl", "=", "$", "env", "->", "getGlobals", "(", ")", "[", "'site'", "]", "[", "'baseurl'", "]", ";", "$", "hash", "=", "md5", "(", "$", "env", "->", "getGlobals", "(", ")", "[", "'site'", "]", "[", "'time'", "]", ")", ";", "$", "canonical", "=", "null", ";", "$", "addhash", "=", "true", ";", "if", "(", "isset", "(", "$", "options", "[", "'canonical'", "]", ")", ")", "{", "$", "canonical", "=", "$", "options", "[", "'canonical'", "]", ";", "}", "if", "(", "is_bool", "(", "$", "options", ")", ")", "{", "// backward compatibility", "$", "canonical", "=", "$", "options", ";", "}", "if", "(", "isset", "(", "$", "options", "[", "'addhash'", "]", ")", ")", "{", "$", "addhash", "=", "$", "options", "[", "'addhash'", "]", ";", "}", "if", "(", "$", "env", "->", "getGlobals", "(", ")", "[", "'site'", "]", "[", "'canonicalurl'", "]", "===", "true", "||", "$", "canonical", "===", "true", ")", "{", "$", "base", "=", "rtrim", "(", "$", "baseurl", ",", "'/'", ")", ";", "}", "if", "(", "$", "canonical", "===", "false", ")", "{", "$", "base", "=", "''", ";", "}", "if", "(", "$", "value", "instanceof", "Page", ")", "{", "$", "value", "=", "$", "value", "->", "getPermalink", "(", ")", ";", "if", "(", "false", "!==", "strpos", "(", "$", "value", ",", "'.'", ")", ")", "{", "// file URL (with a dot for extension)", "$", "url", "=", "$", "base", ".", "'/'", ".", "ltrim", "(", "$", "value", ",", "'/'", ")", ";", "}", "else", "{", "$", "url", "=", "$", "base", ".", "'/'", ".", "ltrim", "(", "rtrim", "(", "$", "value", ",", "'/'", ")", ".", "'/'", ",", "'/'", ")", ";", "}", "}", "else", "{", "if", "(", "preg_match", "(", "'~^(?:f|ht)tps?://~i'", ",", "$", "value", ")", ")", "{", "// external URL", "$", "url", "=", "$", "value", ";", "}", "elseif", "(", "false", "!==", "strpos", "(", "$", "value", ",", "'.'", ")", ")", "{", "// file URL (with a dot for extension)", "$", "url", "=", "$", "base", ".", "'/'", ".", "ltrim", "(", "$", "value", ",", "'/'", ")", ";", "if", "(", "$", "addhash", ")", "{", "$", "url", ".=", "'?'", ".", "$", "hash", ";", "}", "}", "else", "{", "$", "value", "=", "$", "this", "->", "slugifyFilter", "(", "$", "value", ")", ";", "$", "url", "=", "$", "base", ".", "'/'", ".", "ltrim", "(", "rtrim", "(", "$", "value", ",", "'/'", ")", ".", "'/'", ",", "'/'", ")", ";", "}", "}", "return", "$", "url", ";", "}"], "docstring": "Create an URL.\n\n$options[\n'canonical' => null,\n'addhash'   => true,\n];\n\n@param \\Twig_Environment         $env\n@param string|\\PHPoole\\Page\\Page $value\n@param array|null                $options\n\n@return string", "docstring_tokens": ["Create", "an", "URL", "."], "sha": "ac921557e4c61ef649bf5c41011f72dc890a2e9f", "url": "https://github.com/Cecilapp/PHPoole/blob/ac921557e4c61ef649bf5c41011f72dc890a2e9f/src/Renderer/Twig/Extension.php#L233-L280", "partition": "test"}
{"repo": "AbuseIO/notification-common", "path": "src/Notification.php", "func_name": "Notification.startup", "original_string": "protected function startup($notification)\n    {\n        $reflect = new ReflectionClass($notification);\n\n        $this->configBase = 'notifications.' . $reflect->getShortName();\n\n        if (empty(config(\"{$this->configBase}.notification.name\"))) {\n            $this->failed(\"Required notification.name is missing in notification configuration\");\n        }\n\n        Log::info(\n            get_class($this) . ': ' .\n            'A notification module has been called: ' .\n            config(\"{$this->configBase}.notification.name\")\n        );\n\n    }", "language": "php", "code": "protected function startup($notification)\n    {\n        $reflect = new ReflectionClass($notification);\n\n        $this->configBase = 'notifications.' . $reflect->getShortName();\n\n        if (empty(config(\"{$this->configBase}.notification.name\"))) {\n            $this->failed(\"Required notification.name is missing in notification configuration\");\n        }\n\n        Log::info(\n            get_class($this) . ': ' .\n            'A notification module has been called: ' .\n            config(\"{$this->configBase}.notification.name\")\n        );\n\n    }", "code_tokens": ["protected", "function", "startup", "(", "$", "notification", ")", "{", "$", "reflect", "=", "new", "ReflectionClass", "(", "$", "notification", ")", ";", "$", "this", "->", "configBase", "=", "'notifications.'", ".", "$", "reflect", "->", "getShortName", "(", ")", ";", "if", "(", "empty", "(", "config", "(", "\"{$this->configBase}.notification.name\"", ")", ")", ")", "{", "$", "this", "->", "failed", "(", "\"Required notification.name is missing in notification configuration\"", ")", ";", "}", "Log", "::", "info", "(", "get_class", "(", "$", "this", ")", ".", "': '", ".", "'A notification module has been called: '", ".", "config", "(", "\"{$this->configBase}.notification.name\"", ")", ")", ";", "}"], "docstring": "Generalize the local config based on the parser class object.\n\n@param object $notification instance class\n@return void", "docstring_tokens": ["Generalize", "the", "local", "config", "based", "on", "the", "parser", "class", "object", "."], "sha": "f9e9ed6c9f1de0c249e030da4d102799ee4399e8", "url": "https://github.com/AbuseIO/notification-common/blob/f9e9ed6c9f1de0c249e030da4d102799ee4399e8/src/Notification.php#L36-L52", "partition": "test"}
{"repo": "AlcyZ/PHP-Image-Magick", "path": "src/Options/Channel.php", "func_name": "Channel._validateValuesArrayArgument", "original_string": "private function _validateValuesArrayArgument(array $values)\n\t{\n\t\tforeach($values as $value)\n\t\t{\n\t\t\tif(!in_array($value, $this->allowedOptions))\n\t\t\t{\n\t\t\t\t$msg = 'Invalid element in $value array: \"' . $value . '\", allowed values: ' . implode(', ',\n\t\t\t\t                                                                                       $this->allowedOptions);\n\n\t\t\t\t$this->_optionValueException($msg);\n\t\t\t}\n\t\t}\n\t}", "language": "php", "code": "private function _validateValuesArrayArgument(array $values)\n\t{\n\t\tforeach($values as $value)\n\t\t{\n\t\t\tif(!in_array($value, $this->allowedOptions))\n\t\t\t{\n\t\t\t\t$msg = 'Invalid element in $value array: \"' . $value . '\", allowed values: ' . implode(', ',\n\t\t\t\t                                                                                       $this->allowedOptions);\n\n\t\t\t\t$this->_optionValueException($msg);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "function", "_validateValuesArrayArgument", "(", "array", "$", "values", ")", "{", "foreach", "(", "$", "values", "as", "$", "value", ")", "{", "if", "(", "!", "in_array", "(", "$", "value", ",", "$", "this", "->", "allowedOptions", ")", ")", "{", "$", "msg", "=", "'Invalid element in $value array: \"'", ".", "$", "value", ".", "'\", allowed values: '", ".", "implode", "(", "', '", ",", "$", "this", "->", "allowedOptions", ")", ";", "$", "this", "->", "_optionValueException", "(", "$", "msg", ")", ";", "}", "}", "}"], "docstring": "Validates the values array and throw an exception if it contains invalid elements.\n\n@param array $values Array to be validated.\n\n@throws InvalidOptionValueException When the values array contains invalid elements.", "docstring_tokens": ["Validates", "the", "values", "array", "and", "throw", "an", "exception", "if", "it", "contains", "invalid", "elements", "."], "sha": "4a432f89c3829f10a9078df801da4a98b988f06d", "url": "https://github.com/AlcyZ/PHP-Image-Magick/blob/4a432f89c3829f10a9078df801da4a98b988f06d/src/Options/Channel.php#L96-L108", "partition": "test"}
{"repo": "cloudcreativity/json-api-testing", "path": "src/Document.php", "func_name": "Document.assertExists", "original_string": "public function assertExists($pointers, string $message = ''): self\n    {\n        $missing = collect((array) $pointers)->reject(function ($pointer) {\n            return $this->has($pointer);\n        })->implode(', ');\n\n        PHPUnitAssert::assertEmpty($missing, $message ?: \"Members [{$missing}] do not exist.\");\n\n        return $this;\n    }", "language": "php", "code": "public function assertExists($pointers, string $message = ''): self\n    {\n        $missing = collect((array) $pointers)->reject(function ($pointer) {\n            return $this->has($pointer);\n        })->implode(', ');\n\n        PHPUnitAssert::assertEmpty($missing, $message ?: \"Members [{$missing}] do not exist.\");\n\n        return $this;\n    }", "code_tokens": ["public", "function", "assertExists", "(", "$", "pointers", ",", "string", "$", "message", "=", "''", ")", ":", "self", "{", "$", "missing", "=", "collect", "(", "(", "array", ")", "$", "pointers", ")", "->", "reject", "(", "function", "(", "$", "pointer", ")", "{", "return", "$", "this", "->", "has", "(", "$", "pointer", ")", ";", "}", ")", "->", "implode", "(", "', '", ")", ";", "PHPUnitAssert", "::", "assertEmpty", "(", "$", "missing", ",", "$", "message", "?", ":", "\"Members [{$missing}] do not exist.\"", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Assert that all the provided members exist.\n\n@param string|string[] $pointers\n@param string $message\n@return $this", "docstring_tokens": ["Assert", "that", "all", "the", "provided", "members", "exist", "."], "sha": "0243fa0a9b6ac0955beeb82af43b8eb5cc5f1917", "url": "https://github.com/cloudcreativity/json-api-testing/blob/0243fa0a9b6ac0955beeb82af43b8eb5cc5f1917/src/Document.php#L231-L240", "partition": "test"}
{"repo": "mamasu/mama-framework", "path": "src/Model/PDO.php", "func_name": "PDO.openConnection", "original_string": "public function openConnection($name='db_default') {\n        foreach ($this->connections as $connection) {\n            if($connection['name'] == $name) {\n                return $connection['lynk'];\n            }\n        }\n        //Open new connection\n        try {\n            //Get the configuration of the connection.\n            $dbConfig = $this->config->get($name);\n            //Create the new connection.\n            $connection = new \\PDO('mysql:host=' . $dbConfig['host'] .\n                                       ';port=' . $dbConfig['port'] .\n                                       ';dbname=' . $dbConfig['name'],\n                                   $dbConfig['user'],\n                                   $dbConfig['pass'],\n                                   array(\\PDO::MYSQL_ATTR_FOUND_ROWS => true, \\PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES utf8\"));\n\n            $connection->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n\n            $this->connections[] = array('name'=>$name,'lynk'=>$connection);\n\n            return $connection;\n\n        } catch (\\Exception $e) {\n            throw new ModelException('Error trying to connect to db');\n        }\n    }", "language": "php", "code": "public function openConnection($name='db_default') {\n        foreach ($this->connections as $connection) {\n            if($connection['name'] == $name) {\n                return $connection['lynk'];\n            }\n        }\n        //Open new connection\n        try {\n            //Get the configuration of the connection.\n            $dbConfig = $this->config->get($name);\n            //Create the new connection.\n            $connection = new \\PDO('mysql:host=' . $dbConfig['host'] .\n                                       ';port=' . $dbConfig['port'] .\n                                       ';dbname=' . $dbConfig['name'],\n                                   $dbConfig['user'],\n                                   $dbConfig['pass'],\n                                   array(\\PDO::MYSQL_ATTR_FOUND_ROWS => true, \\PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES utf8\"));\n\n            $connection->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n\n            $this->connections[] = array('name'=>$name,'lynk'=>$connection);\n\n            return $connection;\n\n        } catch (\\Exception $e) {\n            throw new ModelException('Error trying to connect to db');\n        }\n    }", "code_tokens": ["public", "function", "openConnection", "(", "$", "name", "=", "'db_default'", ")", "{", "foreach", "(", "$", "this", "->", "connections", "as", "$", "connection", ")", "{", "if", "(", "$", "connection", "[", "'name'", "]", "==", "$", "name", ")", "{", "return", "$", "connection", "[", "'lynk'", "]", ";", "}", "}", "//Open new connection", "try", "{", "//Get the configuration of the connection.", "$", "dbConfig", "=", "$", "this", "->", "config", "->", "get", "(", "$", "name", ")", ";", "//Create the new connection.", "$", "connection", "=", "new", "\\", "PDO", "(", "'mysql:host='", ".", "$", "dbConfig", "[", "'host'", "]", ".", "';port='", ".", "$", "dbConfig", "[", "'port'", "]", ".", "';dbname='", ".", "$", "dbConfig", "[", "'name'", "]", ",", "$", "dbConfig", "[", "'user'", "]", ",", "$", "dbConfig", "[", "'pass'", "]", ",", "array", "(", "\\", "PDO", "::", "MYSQL_ATTR_FOUND_ROWS", "=>", "true", ",", "\\", "PDO", "::", "MYSQL_ATTR_INIT_COMMAND", "=>", "\"SET NAMES utf8\"", ")", ")", ";", "$", "connection", "->", "setAttribute", "(", "\\", "PDO", "::", "ATTR_ERRMODE", ",", "\\", "PDO", "::", "ERRMODE_EXCEPTION", ")", ";", "$", "this", "->", "connections", "[", "]", "=", "array", "(", "'name'", "=>", "$", "name", ",", "'lynk'", "=>", "$", "connection", ")", ";", "return", "$", "connection", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "throw", "new", "ModelException", "(", "'Error trying to connect to db'", ")", ";", "}", "}"], "docstring": "Open connection if is not already open.\n\n@param string $name optional parameter if nothing is send it gets\nthe default connection.\n\n@return \\PDO\n@throws \\ModelException", "docstring_tokens": ["Open", "connection", "if", "is", "not", "already", "open", "."], "sha": "105a4980b56f1fdaad095a32189ee47d39203a7a", "url": "https://github.com/mamasu/mama-framework/blob/105a4980b56f1fdaad095a32189ee47d39203a7a/src/Model/PDO.php#L49-L76", "partition": "test"}
{"repo": "FriendsOfSymfony/FOSElasticaBundle", "path": "src/Doctrine/Listener.php", "func_name": "Listener.postUpdate", "original_string": "public function postUpdate(LifecycleEventArgs $eventArgs)\n    {\n        $entity = $eventArgs->getObject();\n\n        if ($this->objectPersister->handlesObject($entity)) {\n            if ($this->isObjectIndexable($entity)) {\n                $this->scheduledForUpdate[] = $entity;\n            } else {\n                // Delete if no longer indexable\n                $this->scheduleForDeletion($entity);\n            }\n        }\n    }", "language": "php", "code": "public function postUpdate(LifecycleEventArgs $eventArgs)\n    {\n        $entity = $eventArgs->getObject();\n\n        if ($this->objectPersister->handlesObject($entity)) {\n            if ($this->isObjectIndexable($entity)) {\n                $this->scheduledForUpdate[] = $entity;\n            } else {\n                // Delete if no longer indexable\n                $this->scheduleForDeletion($entity);\n            }\n        }\n    }", "code_tokens": ["public", "function", "postUpdate", "(", "LifecycleEventArgs", "$", "eventArgs", ")", "{", "$", "entity", "=", "$", "eventArgs", "->", "getObject", "(", ")", ";", "if", "(", "$", "this", "->", "objectPersister", "->", "handlesObject", "(", "$", "entity", ")", ")", "{", "if", "(", "$", "this", "->", "isObjectIndexable", "(", "$", "entity", ")", ")", "{", "$", "this", "->", "scheduledForUpdate", "[", "]", "=", "$", "entity", ";", "}", "else", "{", "// Delete if no longer indexable", "$", "this", "->", "scheduleForDeletion", "(", "$", "entity", ")", ";", "}", "}", "}"], "docstring": "Looks for objects being updated that should be indexed or removed from the index.\n\n@param LifecycleEventArgs $eventArgs", "docstring_tokens": ["Looks", "for", "objects", "being", "updated", "that", "should", "be", "indexed", "or", "removed", "from", "the", "index", "."], "sha": "3f2707d1d606a59527f74e88808b820a170d3f42", "url": "https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/3f2707d1d606a59527f74e88808b820a170d3f42/src/Doctrine/Listener.php#L132-L144", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "docs/web_connector/example_codeigniter_web_connector/controllers/quickbooks.php", "func_name": "QuickBooks._addCustomerResponse", "original_string": "public function _addCustomerResponse($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents)\n\t{\n\t\t// Do something here to record that the data was added to QuickBooks successfully \n\t\t\n\t\treturn true; \n\t}", "language": "php", "code": "public function _addCustomerResponse($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents)\n\t{\n\t\t// Do something here to record that the data was added to QuickBooks successfully \n\t\t\n\t\treturn true; \n\t}", "code_tokens": ["public", "function", "_addCustomerResponse", "(", "$", "requestID", ",", "$", "user", ",", "$", "action", ",", "$", "ID", ",", "$", "extra", ",", "&", "$", "err", ",", "$", "last_action_time", ",", "$", "last_actionident_time", ",", "$", "xml", ",", "$", "idents", ")", "{", "// Do something here to record that the data was added to QuickBooks successfully ", "return", "true", ";", "}"], "docstring": "Handle a response from QuickBooks indicating a new customer has been added", "docstring_tokens": ["Handle", "a", "response", "from", "QuickBooks", "indicating", "a", "new", "customer", "has", "been", "added"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/docs/web_connector/example_codeigniter_web_connector/controllers/quickbooks.php#L200-L205", "partition": "test"}
{"repo": "makinacorpus/generated-hydrator", "path": "src/GeneratedHydrator/Factory/HydratorFactory.php", "func_name": "HydratorFactory.getHydratorClass", "original_string": "public function getHydratorClass() : string\n    {\n        $originalClassName = $this->configuration->getHydratedClassName();\n        $realClassName = $this->generateClassName($originalClassName);\n\n        if (!class_exists($realClassName)) {\n\n            $directory = $directory = $this->configuration->getGeneratedClassesTargetDir();\n            $targetFile = $directory . '/' . \\str_replace(\"\\\\\", \"_\", $realClassName) . '.php';\n\n            if (@include_once $targetFile) {\n                return $realClassName;\n            }\n\n            $generator = $this->configuration->getHydratorGenerator();\n            $phpClassCode = $generator->generate(new \\ReflectionClass($originalClassName), $realClassName, $originalClassName);\n            $this->writeFile($targetFile, $phpClassCode);\n\n            require_once $targetFile;\n        }\n\n        return $realClassName;\n    }", "language": "php", "code": "public function getHydratorClass() : string\n    {\n        $originalClassName = $this->configuration->getHydratedClassName();\n        $realClassName = $this->generateClassName($originalClassName);\n\n        if (!class_exists($realClassName)) {\n\n            $directory = $directory = $this->configuration->getGeneratedClassesTargetDir();\n            $targetFile = $directory . '/' . \\str_replace(\"\\\\\", \"_\", $realClassName) . '.php';\n\n            if (@include_once $targetFile) {\n                return $realClassName;\n            }\n\n            $generator = $this->configuration->getHydratorGenerator();\n            $phpClassCode = $generator->generate(new \\ReflectionClass($originalClassName), $realClassName, $originalClassName);\n            $this->writeFile($targetFile, $phpClassCode);\n\n            require_once $targetFile;\n        }\n\n        return $realClassName;\n    }", "code_tokens": ["public", "function", "getHydratorClass", "(", ")", ":", "string", "{", "$", "originalClassName", "=", "$", "this", "->", "configuration", "->", "getHydratedClassName", "(", ")", ";", "$", "realClassName", "=", "$", "this", "->", "generateClassName", "(", "$", "originalClassName", ")", ";", "if", "(", "!", "class_exists", "(", "$", "realClassName", ")", ")", "{", "$", "directory", "=", "$", "directory", "=", "$", "this", "->", "configuration", "->", "getGeneratedClassesTargetDir", "(", ")", ";", "$", "targetFile", "=", "$", "directory", ".", "'/'", ".", "\\", "str_replace", "(", "\"\\\\\"", ",", "\"_\"", ",", "$", "realClassName", ")", ".", "'.php'", ";", "if", "(", "@", "include_once", "$", "targetFile", ")", "{", "return", "$", "realClassName", ";", "}", "$", "generator", "=", "$", "this", "->", "configuration", "->", "getHydratorGenerator", "(", ")", ";", "$", "phpClassCode", "=", "$", "generator", "->", "generate", "(", "new", "\\", "ReflectionClass", "(", "$", "originalClassName", ")", ",", "$", "realClassName", ",", "$", "originalClassName", ")", ";", "$", "this", "->", "writeFile", "(", "$", "targetFile", ",", "$", "phpClassCode", ")", ";", "require_once", "$", "targetFile", ";", "}", "return", "$", "realClassName", ";", "}"], "docstring": "Retrieves the generated hydrator FQCN\n\n@return string", "docstring_tokens": ["Retrieves", "the", "generated", "hydrator", "FQCN"], "sha": "d6a9597548fd3137cebdfa7ae69e763bc5576654", "url": "https://github.com/makinacorpus/generated-hydrator/blob/d6a9597548fd3137cebdfa7ae69e763bc5576654/src/GeneratedHydrator/Factory/HydratorFactory.php#L87-L109", "partition": "test"}
{"repo": "nimbly/Limber", "path": "src/Application.php", "func_name": "Application.bootstrap", "original_string": "public function bootstrap(): void\n    {\n        foreach( $this->config('bootstrap', []) as $file ){\n            $bootstrap = require_once(path($file));\n            $bootstrap($this);\n        }\n    }", "language": "php", "code": "public function bootstrap(): void\n    {\n        foreach( $this->config('bootstrap', []) as $file ){\n            $bootstrap = require_once(path($file));\n            $bootstrap($this);\n        }\n    }", "code_tokens": ["public", "function", "bootstrap", "(", ")", ":", "void", "{", "foreach", "(", "$", "this", "->", "config", "(", "'bootstrap'", ",", "[", "]", ")", "as", "$", "file", ")", "{", "$", "bootstrap", "=", "require_once", "(", "path", "(", "$", "file", ")", ")", ";", "$", "bootstrap", "(", "$", "this", ")", ";", "}", "}"], "docstring": "Bootstrap the application\n\n@return void", "docstring_tokens": ["Bootstrap", "the", "application"], "sha": "f5d4656e5b6ae8da479456f3e642e38d841d7b94", "url": "https://github.com/nimbly/Limber/blob/f5d4656e5b6ae8da479456f3e642e38d841d7b94/src/Application.php#L44-L50", "partition": "test"}
{"repo": "groovel/newsletter-mailchimp", "path": "src/services/MailChimpClient.php", "func_name": "MailChimpClient.subscribeNewUser", "original_string": "public static function subscribeNewUser($email,$listid,$confirm = false){\n    \t$data = [\n    \t\t\t'email_address' => $email,\n    \t\t\t'status' => ($confirm ? 'pending' : 'subscribed'),\n    \t];\n    \tif (!empty($merge_fields)) $data['merge_fields'] = $merge_fields;\n    \t$action = self::$api_version.'/lists/'.$listid.'/members/';\n    \t \n    \treturn self::send($action, 'POST', $data);\n    \t\n    }", "language": "php", "code": "public static function subscribeNewUser($email,$listid,$confirm = false){\n    \t$data = [\n    \t\t\t'email_address' => $email,\n    \t\t\t'status' => ($confirm ? 'pending' : 'subscribed'),\n    \t];\n    \tif (!empty($merge_fields)) $data['merge_fields'] = $merge_fields;\n    \t$action = self::$api_version.'/lists/'.$listid.'/members/';\n    \t \n    \treturn self::send($action, 'POST', $data);\n    \t\n    }", "code_tokens": ["public", "static", "function", "subscribeNewUser", "(", "$", "email", ",", "$", "listid", ",", "$", "confirm", "=", "false", ")", "{", "$", "data", "=", "[", "'email_address'", "=>", "$", "email", ",", "'status'", "=>", "(", "$", "confirm", "?", "'pending'", ":", "'subscribed'", ")", ",", "]", ";", "if", "(", "!", "empty", "(", "$", "merge_fields", ")", ")", "$", "data", "[", "'merge_fields'", "]", "=", "$", "merge_fields", ";", "$", "action", "=", "self", "::", "$", "api_version", ".", "'/lists/'", ".", "$", "listid", ".", "'/members/'", ";", "return", "self", "::", "send", "(", "$", "action", ",", "'POST'", ",", "$", "data", ")", ";", "}"], "docstring": "subscribe new user to a given listid\n@param $email\n@param $listid\n@return mixed", "docstring_tokens": ["subscribe", "new", "user", "to", "a", "given", "listid"], "sha": "bc21a7df65f1001a1126f4962917eb2604f898c2", "url": "https://github.com/groovel/newsletter-mailchimp/blob/bc21a7df65f1001a1126f4962917eb2604f898c2/src/services/MailChimpClient.php#L112-L122", "partition": "test"}
{"repo": "DevGroup-ru/yii2-extensions-manager", "path": "src/helpers/ExtensionDataHelper.php", "func_name": "ExtensionDataHelper.getLocalizedVersionedDataField", "original_string": "public static function getLocalizedVersionedDataField($data, $type, $field)\n    {\n        $string = '';\n        $langId = Yii::$app->language;\n        if (false === empty($data['package']['versions'][self::$currentVersion]['extra'][$type][$field . '_' . $langId])) {\n            $string = $data['package']['versions'][self::$currentVersion]['extra'][$type][$field . '_' . $langId];\n        } elseif (false === empty($data['package']['versions'][self::$currentVersion]['extra'][$type][$field])) {\n            $string = $data['package']['versions'][self::$currentVersion]['extra'][$type][$field];\n        } elseif (false === empty($data['package']['versions'][self::$currentVersion][$field])) {\n            $string = $data['package']['versions'][self::$currentVersion][$field];\n        } elseif (false === empty($data['package'][$field])) {\n            $string = $data['package'][$field];\n        }\n        return $string;\n    }", "language": "php", "code": "public static function getLocalizedVersionedDataField($data, $type, $field)\n    {\n        $string = '';\n        $langId = Yii::$app->language;\n        if (false === empty($data['package']['versions'][self::$currentVersion]['extra'][$type][$field . '_' . $langId])) {\n            $string = $data['package']['versions'][self::$currentVersion]['extra'][$type][$field . '_' . $langId];\n        } elseif (false === empty($data['package']['versions'][self::$currentVersion]['extra'][$type][$field])) {\n            $string = $data['package']['versions'][self::$currentVersion]['extra'][$type][$field];\n        } elseif (false === empty($data['package']['versions'][self::$currentVersion][$field])) {\n            $string = $data['package']['versions'][self::$currentVersion][$field];\n        } elseif (false === empty($data['package'][$field])) {\n            $string = $data['package'][$field];\n        }\n        return $string;\n    }", "code_tokens": ["public", "static", "function", "getLocalizedVersionedDataField", "(", "$", "data", ",", "$", "type", ",", "$", "field", ")", "{", "$", "string", "=", "''", ";", "$", "langId", "=", "Yii", "::", "$", "app", "->", "language", ";", "if", "(", "false", "===", "empty", "(", "$", "data", "[", "'package'", "]", "[", "'versions'", "]", "[", "self", "::", "$", "currentVersion", "]", "[", "'extra'", "]", "[", "$", "type", "]", "[", "$", "field", ".", "'_'", ".", "$", "langId", "]", ")", ")", "{", "$", "string", "=", "$", "data", "[", "'package'", "]", "[", "'versions'", "]", "[", "self", "::", "$", "currentVersion", "]", "[", "'extra'", "]", "[", "$", "type", "]", "[", "$", "field", ".", "'_'", ".", "$", "langId", "]", ";", "}", "elseif", "(", "false", "===", "empty", "(", "$", "data", "[", "'package'", "]", "[", "'versions'", "]", "[", "self", "::", "$", "currentVersion", "]", "[", "'extra'", "]", "[", "$", "type", "]", "[", "$", "field", "]", ")", ")", "{", "$", "string", "=", "$", "data", "[", "'package'", "]", "[", "'versions'", "]", "[", "self", "::", "$", "currentVersion", "]", "[", "'extra'", "]", "[", "$", "type", "]", "[", "$", "field", "]", ";", "}", "elseif", "(", "false", "===", "empty", "(", "$", "data", "[", "'package'", "]", "[", "'versions'", "]", "[", "self", "::", "$", "currentVersion", "]", "[", "$", "field", "]", ")", ")", "{", "$", "string", "=", "$", "data", "[", "'package'", "]", "[", "'versions'", "]", "[", "self", "::", "$", "currentVersion", "]", "[", "$", "field", "]", ";", "}", "elseif", "(", "false", "===", "empty", "(", "$", "data", "[", "'package'", "]", "[", "$", "field", "]", ")", ")", "{", "$", "string", "=", "$", "data", "[", "'package'", "]", "[", "$", "field", "]", ";", "}", "return", "$", "string", ";", "}"], "docstring": "Fetching localized data from defined field according to package current version\n@param $data\n@param $type\n@param string $field\n@return string", "docstring_tokens": ["Fetching", "localized", "data", "from", "defined", "field", "according", "to", "package", "current", "version"], "sha": "25bce89ee085af217c07b779db9fbcd87172b75e", "url": "https://github.com/DevGroup-ru/yii2-extensions-manager/blob/25bce89ee085af217c07b779db9fbcd87172b75e/src/helpers/ExtensionDataHelper.php#L65-L79", "partition": "test"}
{"repo": "wp-cli/package-command", "path": "src/Package_Command.php", "func_name": "Package_Command.path", "original_string": "public function path( $args ) {\n\t\t$packages_dir = WP_CLI::get_runner()->get_packages_dir_path();\n\t\tif ( ! empty( $args ) ) {\n\t\t\t$packages_dir .= 'vendor/' . $args[0];\n\t\t\tif ( ! is_dir( $packages_dir ) ) {\n\t\t\t\tWP_CLI::error( 'Invalid package name.' );\n\t\t\t}\n\t\t}\n\t\tWP_CLI::line( $packages_dir );\n\t}", "language": "php", "code": "public function path( $args ) {\n\t\t$packages_dir = WP_CLI::get_runner()->get_packages_dir_path();\n\t\tif ( ! empty( $args ) ) {\n\t\t\t$packages_dir .= 'vendor/' . $args[0];\n\t\t\tif ( ! is_dir( $packages_dir ) ) {\n\t\t\t\tWP_CLI::error( 'Invalid package name.' );\n\t\t\t}\n\t\t}\n\t\tWP_CLI::line( $packages_dir );\n\t}", "code_tokens": ["public", "function", "path", "(", "$", "args", ")", "{", "$", "packages_dir", "=", "WP_CLI", "::", "get_runner", "(", ")", "->", "get_packages_dir_path", "(", ")", ";", "if", "(", "!", "empty", "(", "$", "args", ")", ")", "{", "$", "packages_dir", ".=", "'vendor/'", ".", "$", "args", "[", "0", "]", ";", "if", "(", "!", "is_dir", "(", "$", "packages_dir", ")", ")", "{", "WP_CLI", "::", "error", "(", "'Invalid package name.'", ")", ";", "}", "}", "WP_CLI", "::", "line", "(", "$", "packages_dir", ")", ";", "}"], "docstring": "Gets the path to an installed WP-CLI package, or the package directory.\n\nIf you want to contribute to a package, this is a great way to jump to it.\n\n## OPTIONS\n\n[<name>]\n: Name of the package to get the directory for.\n\n## EXAMPLES\n\n# Get package path\n$ wp package path\n/home/person/.wp-cli/packages/\n\n# Change directory to package path\n$ cd $(wp package path) && pwd\n/home/vagrant/.wp-cli/packages", "docstring_tokens": ["Gets", "the", "path", "to", "an", "installed", "WP", "-", "CLI", "package", "or", "the", "package", "directory", "."], "sha": "52fea16f3cec0577b9c417a19ebc0f328c38d853", "url": "https://github.com/wp-cli/package-command/blob/52fea16f3cec0577b9c417a19ebc0f328c38d853/src/Package_Command.php#L471-L480", "partition": "test"}
{"repo": "yajra/laravel-datatables-editor", "path": "src/Generators/DataTablesEditorCommand.php", "func_name": "DataTablesEditorCommand.qualifyClass", "original_string": "protected function qualifyClass($name)\n    {\n        $rootNamespace = $this->laravel->getNamespace();\n\n        if (Str::startsWith($name, $rootNamespace)) {\n            return $name;\n        }\n\n        if (Str::contains($name, '/')) {\n            $name = str_replace('/', '\\\\', $name);\n        }\n\n        if (! Str::contains(Str::lower($name), 'datatable')) {\n            $name .= $this->type;\n        }\n\n        return $this->getDefaultNamespace(trim($rootNamespace, '\\\\')) . '\\\\' . $name;\n    }", "language": "php", "code": "protected function qualifyClass($name)\n    {\n        $rootNamespace = $this->laravel->getNamespace();\n\n        if (Str::startsWith($name, $rootNamespace)) {\n            return $name;\n        }\n\n        if (Str::contains($name, '/')) {\n            $name = str_replace('/', '\\\\', $name);\n        }\n\n        if (! Str::contains(Str::lower($name), 'datatable')) {\n            $name .= $this->type;\n        }\n\n        return $this->getDefaultNamespace(trim($rootNamespace, '\\\\')) . '\\\\' . $name;\n    }", "code_tokens": ["protected", "function", "qualifyClass", "(", "$", "name", ")", "{", "$", "rootNamespace", "=", "$", "this", "->", "laravel", "->", "getNamespace", "(", ")", ";", "if", "(", "Str", "::", "startsWith", "(", "$", "name", ",", "$", "rootNamespace", ")", ")", "{", "return", "$", "name", ";", "}", "if", "(", "Str", "::", "contains", "(", "$", "name", ",", "'/'", ")", ")", "{", "$", "name", "=", "str_replace", "(", "'/'", ",", "'\\\\'", ",", "$", "name", ")", ";", "}", "if", "(", "!", "Str", "::", "contains", "(", "Str", "::", "lower", "(", "$", "name", ")", ",", "'datatable'", ")", ")", "{", "$", "name", ".=", "$", "this", "->", "type", ";", "}", "return", "$", "this", "->", "getDefaultNamespace", "(", "trim", "(", "$", "rootNamespace", ",", "'\\\\'", ")", ")", ".", "'\\\\'", ".", "$", "name", ";", "}"], "docstring": "Parse the name and format according to the root namespace.\n\n@param  string $name\n@return string", "docstring_tokens": ["Parse", "the", "name", "and", "format", "according", "to", "the", "root", "namespace", "."], "sha": "03327c5330e83723ac5dc119e5e1263108abcb98", "url": "https://github.com/yajra/laravel-datatables-editor/blob/03327c5330e83723ac5dc119e5e1263108abcb98/src/Generators/DataTablesEditorCommand.php#L123-L140", "partition": "test"}
{"repo": "morphatic/laravel-auto-deploy", "path": "src/Controllers/DeployController.php", "func_name": "DeployController.copyEnv", "original_string": "private function copyEnv()\n    {\n        $cmd = new Command('cp');\n        $cmd->addParam($this->webroot.'./env')\n            ->addParam($this->installDir.'/.env');\n\n        return $this->ex($cmd);\n    }", "language": "php", "code": "private function copyEnv()\n    {\n        $cmd = new Command('cp');\n        $cmd->addParam($this->webroot.'./env')\n            ->addParam($this->installDir.'/.env');\n\n        return $this->ex($cmd);\n    }", "code_tokens": ["private", "function", "copyEnv", "(", ")", "{", "$", "cmd", "=", "new", "Command", "(", "'cp'", ")", ";", "$", "cmd", "->", "addParam", "(", "$", "this", "->", "webroot", ".", "'./env'", ")", "->", "addParam", "(", "$", "this", "->", "installDir", ".", "'/.env'", ")", ";", "return", "$", "this", "->", "ex", "(", "$", "cmd", ")", ";", "}"], "docstring": "Copy the .env file from the new deploy directory.\n\n@return bool True if the update is successful. False otherwise.", "docstring_tokens": ["Copy", "the", ".", "env", "file", "from", "the", "new", "deploy", "directory", "."], "sha": "1ed33ae58d2b16a88ce31166e65989c6d39169f0", "url": "https://github.com/morphatic/laravel-auto-deploy/blob/1ed33ae58d2b16a88ce31166e65989c6d39169f0/src/Controllers/DeployController.php#L241-L248", "partition": "test"}
{"repo": "wp-papi/papi", "path": "src/admin/class-papi-admin-ajax.php", "func_name": "Papi_Admin_Ajax.handle_papi_ajax", "original_string": "public function handle_papi_ajax() {\n\t\tif ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$ajax_action = '';\n\n\t\tif ( ! empty( $_GET['action'] ) ) {\n\t\t\t$ajax_action = sanitize_text_field( $_GET['action'] );\n\t\t}\n\n\t\tif ( is_user_logged_in() && has_action( $this->action_prefix . $ajax_action ) !== false ) {\n\t\t\tif ( ! defined( 'DOING_AJAX' ) ) {\n\t\t\t\tdefine( 'DOING_AJAX', true );\n\t\t\t}\n\n\t\t\tif ( ! defined( 'DOING_PAPI_AJAX' ) ) {\n\t\t\t\tdefine( 'DOING_PAPI_AJAX', true );\n\t\t\t}\n\n\t\t\tstatus_header( 200 );\n\t\t\tdo_action( $this->action_prefix . $ajax_action );\n\t\t\twp_die();\n\t\t}\n\t}", "language": "php", "code": "public function handle_papi_ajax() {\n\t\tif ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$ajax_action = '';\n\n\t\tif ( ! empty( $_GET['action'] ) ) {\n\t\t\t$ajax_action = sanitize_text_field( $_GET['action'] );\n\t\t}\n\n\t\tif ( is_user_logged_in() && has_action( $this->action_prefix . $ajax_action ) !== false ) {\n\t\t\tif ( ! defined( 'DOING_AJAX' ) ) {\n\t\t\t\tdefine( 'DOING_AJAX', true );\n\t\t\t}\n\n\t\t\tif ( ! defined( 'DOING_PAPI_AJAX' ) ) {\n\t\t\t\tdefine( 'DOING_PAPI_AJAX', true );\n\t\t\t}\n\n\t\t\tstatus_header( 200 );\n\t\t\tdo_action( $this->action_prefix . $ajax_action );\n\t\t\twp_die();\n\t\t}\n\t}", "code_tokens": ["public", "function", "handle_papi_ajax", "(", ")", "{", "if", "(", "defined", "(", "'DOING_AJAX'", ")", "&&", "DOING_AJAX", ")", "{", "return", ";", "}", "$", "ajax_action", "=", "''", ";", "if", "(", "!", "empty", "(", "$", "_GET", "[", "'action'", "]", ")", ")", "{", "$", "ajax_action", "=", "sanitize_text_field", "(", "$", "_GET", "[", "'action'", "]", ")", ";", "}", "if", "(", "is_user_logged_in", "(", ")", "&&", "has_action", "(", "$", "this", "->", "action_prefix", ".", "$", "ajax_action", ")", "!==", "false", ")", "{", "if", "(", "!", "defined", "(", "'DOING_AJAX'", ")", ")", "{", "define", "(", "'DOING_AJAX'", ",", "true", ")", ";", "}", "if", "(", "!", "defined", "(", "'DOING_PAPI_AJAX'", ")", ")", "{", "define", "(", "'DOING_PAPI_AJAX'", ",", "true", ")", ";", "}", "status_header", "(", "200", ")", ";", "do_action", "(", "$", "this", "->", "action_prefix", ".", "$", "ajax_action", ")", ";", "wp_die", "(", ")", ";", "}", "}"], "docstring": "Handle Papi ajax.", "docstring_tokens": ["Handle", "Papi", "ajax", "."], "sha": "444960585ed761447b7886ff4cc31be91b4e8302", "url": "https://github.com/wp-papi/papi/blob/444960585ed761447b7886ff4cc31be91b4e8302/src/admin/class-papi-admin-ajax.php#L62-L86", "partition": "test"}
{"repo": "nails/module-admin", "path": "src/Controller/DefaultController.php", "func_name": "DefaultController.restore", "original_string": "public function restore(): void\n    {\n        $aConfig = $this->getConfig();\n        if (!$aConfig['CAN_RESTORE']) {\n            show404();\n        } elseif (!static::userCan('restore')) {\n            unauthorised();\n        }\n\n        $oUri     = Factory::service('Uri');\n        $oDb      = Factory::service('Database');\n        $oSession = Factory::service('Session', 'nails/module-auth');\n        $oModel   = $this->getModel();\n        $oItem    = $this->getItem([], null, true);\n\n        try {\n\n            $oDb->trans_begin();\n            if (classUses($oModel, Localised::class)) {\n                $bResult = $oModel->restore($oItem->id, $oItem->locale);\n            } else {\n                $bResult = $oModel->restore($oItem->id);\n            }\n\n            if (!$bResult) {\n                throw new NailsException(static::RESTORE_ERROR_MESSAGE . ' ' . $oModel->lastError());\n            }\n\n            $oDb->trans_commit();\n            $oSession->setFlashData('success', static::RESTORE_SUCCESS_MESSAGE);\n            $this->returnToIndex();\n\n        } catch (\\Exception $e) {\n            $oDb->trans_rollback();\n            $oSession->setFlashData('error', static::RESTORE_ERROR_MESSAGE . ' ' . $e->getMessage());\n            $this->returnToIndex();\n        }\n    }", "language": "php", "code": "public function restore(): void\n    {\n        $aConfig = $this->getConfig();\n        if (!$aConfig['CAN_RESTORE']) {\n            show404();\n        } elseif (!static::userCan('restore')) {\n            unauthorised();\n        }\n\n        $oUri     = Factory::service('Uri');\n        $oDb      = Factory::service('Database');\n        $oSession = Factory::service('Session', 'nails/module-auth');\n        $oModel   = $this->getModel();\n        $oItem    = $this->getItem([], null, true);\n\n        try {\n\n            $oDb->trans_begin();\n            if (classUses($oModel, Localised::class)) {\n                $bResult = $oModel->restore($oItem->id, $oItem->locale);\n            } else {\n                $bResult = $oModel->restore($oItem->id);\n            }\n\n            if (!$bResult) {\n                throw new NailsException(static::RESTORE_ERROR_MESSAGE . ' ' . $oModel->lastError());\n            }\n\n            $oDb->trans_commit();\n            $oSession->setFlashData('success', static::RESTORE_SUCCESS_MESSAGE);\n            $this->returnToIndex();\n\n        } catch (\\Exception $e) {\n            $oDb->trans_rollback();\n            $oSession->setFlashData('error', static::RESTORE_ERROR_MESSAGE . ' ' . $e->getMessage());\n            $this->returnToIndex();\n        }\n    }", "code_tokens": ["public", "function", "restore", "(", ")", ":", "void", "{", "$", "aConfig", "=", "$", "this", "->", "getConfig", "(", ")", ";", "if", "(", "!", "$", "aConfig", "[", "'CAN_RESTORE'", "]", ")", "{", "show404", "(", ")", ";", "}", "elseif", "(", "!", "static", "::", "userCan", "(", "'restore'", ")", ")", "{", "unauthorised", "(", ")", ";", "}", "$", "oUri", "=", "Factory", "::", "service", "(", "'Uri'", ")", ";", "$", "oDb", "=", "Factory", "::", "service", "(", "'Database'", ")", ";", "$", "oSession", "=", "Factory", "::", "service", "(", "'Session'", ",", "'nails/module-auth'", ")", ";", "$", "oModel", "=", "$", "this", "->", "getModel", "(", ")", ";", "$", "oItem", "=", "$", "this", "->", "getItem", "(", "[", "]", ",", "null", ",", "true", ")", ";", "try", "{", "$", "oDb", "->", "trans_begin", "(", ")", ";", "if", "(", "classUses", "(", "$", "oModel", ",", "Localised", "::", "class", ")", ")", "{", "$", "bResult", "=", "$", "oModel", "->", "restore", "(", "$", "oItem", "->", "id", ",", "$", "oItem", "->", "locale", ")", ";", "}", "else", "{", "$", "bResult", "=", "$", "oModel", "->", "restore", "(", "$", "oItem", "->", "id", ")", ";", "}", "if", "(", "!", "$", "bResult", ")", "{", "throw", "new", "NailsException", "(", "static", "::", "RESTORE_ERROR_MESSAGE", ".", "' '", ".", "$", "oModel", "->", "lastError", "(", ")", ")", ";", "}", "$", "oDb", "->", "trans_commit", "(", ")", ";", "$", "oSession", "->", "setFlashData", "(", "'success'", ",", "static", "::", "RESTORE_SUCCESS_MESSAGE", ")", ";", "$", "this", "->", "returnToIndex", "(", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "$", "oDb", "->", "trans_rollback", "(", ")", ";", "$", "oSession", "->", "setFlashData", "(", "'error'", ",", "static", "::", "RESTORE_ERROR_MESSAGE", ".", "' '", ".", "$", "e", "->", "getMessage", "(", ")", ")", ";", "$", "this", "->", "returnToIndex", "(", ")", ";", "}", "}"], "docstring": "Restore an item\n\n@return void", "docstring_tokens": ["Restore", "an", "item"], "sha": "2ed8a91b5f05c86fcde21feb621cfafe391ee0c3", "url": "https://github.com/nails/module-admin/blob/2ed8a91b5f05c86fcde21feb621cfafe391ee0c3/src/Controller/DefaultController.php#L785-L822", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Http/Controllers/WorkOrder/WorkOrderAttachmentController.php", "func_name": "WorkOrderAttachmentController.store", "original_string": "public function store(AttachmentRequest $request, $workOrderId)\n    {\n        if ($uploaded = $this->processor->store($request, $workOrderId)) {\n            $count = (is_array($uploaded) ? count($uploaded) : 0);\n\n            flash()->success('Success!', \"Successfully uploaded $count file(s).\");\n\n            return redirect()->route('maintenance.work-orders.attachments.index', [$workOrderId]);\n        } else {\n            flash()->error('Error!', 'There was an issue uploading the files you selected. Please try again.');\n\n            return redirect()->route('maintenance.work-orders.attachments.create', [$workOrderId]);\n        }\n    }", "language": "php", "code": "public function store(AttachmentRequest $request, $workOrderId)\n    {\n        if ($uploaded = $this->processor->store($request, $workOrderId)) {\n            $count = (is_array($uploaded) ? count($uploaded) : 0);\n\n            flash()->success('Success!', \"Successfully uploaded $count file(s).\");\n\n            return redirect()->route('maintenance.work-orders.attachments.index', [$workOrderId]);\n        } else {\n            flash()->error('Error!', 'There was an issue uploading the files you selected. Please try again.');\n\n            return redirect()->route('maintenance.work-orders.attachments.create', [$workOrderId]);\n        }\n    }", "code_tokens": ["public", "function", "store", "(", "AttachmentRequest", "$", "request", ",", "$", "workOrderId", ")", "{", "if", "(", "$", "uploaded", "=", "$", "this", "->", "processor", "->", "store", "(", "$", "request", ",", "$", "workOrderId", ")", ")", "{", "$", "count", "=", "(", "is_array", "(", "$", "uploaded", ")", "?", "count", "(", "$", "uploaded", ")", ":", "0", ")", ";", "flash", "(", ")", "->", "success", "(", "'Success!'", ",", "\"Successfully uploaded $count file(s).\"", ")", ";", "return", "redirect", "(", ")", "->", "route", "(", "'maintenance.work-orders.attachments.index'", ",", "[", "$", "workOrderId", "]", ")", ";", "}", "else", "{", "flash", "(", ")", "->", "error", "(", "'Error!'", ",", "'There was an issue uploading the files you selected. Please try again.'", ")", ";", "return", "redirect", "(", ")", "->", "route", "(", "'maintenance.work-orders.attachments.create'", ",", "[", "$", "workOrderId", "]", ")", ";", "}", "}"], "docstring": "Processes storing the attachment record.\n\n@param AttachmentRequest $request\n@param int|string        $workOrderId\n\n@return \\Illuminate\\Http\\RedirectResponse", "docstring_tokens": ["Processes", "storing", "the", "attachment", "record", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Http/Controllers/WorkOrder/WorkOrderAttachmentController.php#L59-L72", "partition": "test"}
{"repo": "graste/environaut", "path": "src/Environaut/Config/Reader/Dom/DomElement.php", "func_name": "DomElement.getLiteralValue", "original_string": "protected function getLiteralValue($element)\n    {\n        $value = $element->getValue();\n        $trimmed_value = trim($value);\n\n        $preserve_whitespace = $element->getAttributeValue('space', 'default') === 'preserve';\n        $literalize_value = self::literalize($element->getAttributeValue('literalize')) !== false;\n\n        if ($literalize_value) {\n            if ($preserve_whitespace && ($trimmed_value === '' || $value !== $trimmed_value)) {\n                $value = $value;\n            } else {\n                $value = self::literalize($trimmed_value);\n            }\n        } elseif (!$preserve_whitespace) {\n            $value = $trimmed_value;\n            if ($value === '') {\n                $value = null;\n            }\n        }\n\n        return $value;\n    }", "language": "php", "code": "protected function getLiteralValue($element)\n    {\n        $value = $element->getValue();\n        $trimmed_value = trim($value);\n\n        $preserve_whitespace = $element->getAttributeValue('space', 'default') === 'preserve';\n        $literalize_value = self::literalize($element->getAttributeValue('literalize')) !== false;\n\n        if ($literalize_value) {\n            if ($preserve_whitespace && ($trimmed_value === '' || $value !== $trimmed_value)) {\n                $value = $value;\n            } else {\n                $value = self::literalize($trimmed_value);\n            }\n        } elseif (!$preserve_whitespace) {\n            $value = $trimmed_value;\n            if ($value === '') {\n                $value = null;\n            }\n        }\n\n        return $value;\n    }", "code_tokens": ["protected", "function", "getLiteralValue", "(", "$", "element", ")", "{", "$", "value", "=", "$", "element", "->", "getValue", "(", ")", ";", "$", "trimmed_value", "=", "trim", "(", "$", "value", ")", ";", "$", "preserve_whitespace", "=", "$", "element", "->", "getAttributeValue", "(", "'space'", ",", "'default'", ")", "===", "'preserve'", ";", "$", "literalize_value", "=", "self", "::", "literalize", "(", "$", "element", "->", "getAttributeValue", "(", "'literalize'", ")", ")", "!==", "false", ";", "if", "(", "$", "literalize_value", ")", "{", "if", "(", "$", "preserve_whitespace", "&&", "(", "$", "trimmed_value", "===", "''", "||", "$", "value", "!==", "$", "trimmed_value", ")", ")", "{", "$", "value", "=", "$", "value", ";", "}", "else", "{", "$", "value", "=", "self", "::", "literalize", "(", "$", "trimmed_value", ")", ";", "}", "}", "elseif", "(", "!", "$", "preserve_whitespace", ")", "{", "$", "value", "=", "$", "trimmed_value", ";", "if", "(", "$", "value", "===", "''", ")", "{", "$", "value", "=", "null", ";", "}", "}", "return", "$", "value", ";", "}"], "docstring": "Depending on the values of the 'literalize' and 'space' attributes of the element\nthe transformed or literal value of the value is returned\n\n@param \\DOMNode $element element to get a value for\n\n@return mixed literalized and/or whitespace preserved value or null if value is empty", "docstring_tokens": ["Depending", "on", "the", "values", "of", "the", "literalize", "and", "space", "attributes", "of", "the", "element", "the", "transformed", "or", "literal", "value", "of", "the", "value", "is", "returned"], "sha": "e40b498c31214fdbdd529f334f6ce5e6138bb5fb", "url": "https://github.com/graste/environaut/blob/e40b498c31214fdbdd529f334f6ce5e6138bb5fb/src/Environaut/Config/Reader/Dom/DomElement.php#L325-L347", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Debug/Timer.php", "func_name": "Timer.stop", "original_string": "public function stop(string $name)\n\t{\n\t\t$name = strtolower($name);\n\n\t\tif (empty($this->timers[$name]))\n\t\t{\n\t\t\tthrow new \\RuntimeException('Cannot stop timer: invalid name given.');\n\t\t}\n\n\t\t$this->timers[$name]['end'] = microtime(true);\n\n\t\treturn $this;\n\t}", "language": "php", "code": "public function stop(string $name)\n\t{\n\t\t$name = strtolower($name);\n\n\t\tif (empty($this->timers[$name]))\n\t\t{\n\t\t\tthrow new \\RuntimeException('Cannot stop timer: invalid name given.');\n\t\t}\n\n\t\t$this->timers[$name]['end'] = microtime(true);\n\n\t\treturn $this;\n\t}", "code_tokens": ["public", "function", "stop", "(", "string", "$", "name", ")", "{", "$", "name", "=", "strtolower", "(", "$", "name", ")", ";", "if", "(", "empty", "(", "$", "this", "->", "timers", "[", "$", "name", "]", ")", ")", "{", "throw", "new", "\\", "RuntimeException", "(", "'Cannot stop timer: invalid name given.'", ")", ";", "}", "$", "this", "->", "timers", "[", "$", "name", "]", "[", "'end'", "]", "=", "microtime", "(", "true", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Stops a running timer.\n\nIf the timer is not stopped before the timers() method is called,\nit will be automatically stopped at that point.\n\n@param string $name The name of this timer.\n\n@return Timer", "docstring_tokens": ["Stops", "a", "running", "timer", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Debug/Timer.php#L97-L109", "partition": "test"}
{"repo": "ttmdear/labi", "path": "src/Labi/Database/Remover.php", "func_name": "Remover.remove", "original_string": "public function remove($params = array())\r\n    {\r\n        $this->adapter->execute($this->toSql(), array_merge($this->params(), $this->params(true), $params));\r\n\r\n        return true;\r\n    }", "language": "php", "code": "public function remove($params = array())\r\n    {\r\n        $this->adapter->execute($this->toSql(), array_merge($this->params(), $this->params(true), $params));\r\n\r\n        return true;\r\n    }", "code_tokens": ["public", "function", "remove", "(", "$", "params", "=", "array", "(", ")", ")", "{", "$", "this", "->", "adapter", "->", "execute", "(", "$", "this", "->", "toSql", "(", ")", ",", "array_merge", "(", "$", "this", "->", "params", "(", ")", ",", "$", "this", "->", "params", "(", "true", ")", ",", "$", "params", ")", ")", ";", "return", "true", ";", "}"], "docstring": "+ \\Labi\\Operators\\RemoverInterface", "docstring_tokens": ["+", "\\", "Labi", "\\", "Operators", "\\", "RemoverInterface"], "sha": "b3789fe49f886581056d873a73e9e57e09b9d8b3", "url": "https://github.com/ttmdear/labi/blob/b3789fe49f886581056d873a73e9e57e09b9d8b3/src/Labi/Database/Remover.php#L130-L135", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/Pgsql/PgClient.php", "func_name": "PgClient.getPool", "original_string": "public function getPool()\n    {\n        if (!isset($this->_pool)) {\n            $poolConfig = [\n                'loop' => $this->loop,\n                'clientConfig' => [\n                    ['class' => pgConnection::class],\n                    [\n                        $this->connectionParams,\n                        $this->loop,\n                        $this->connector\n                    ]\n                ]\n            ];\n            $poolConfig = ArrayHelper::merge($this->poolConfigDefault, $this->poolConfig, $poolConfig);\n            $this->_pool = new Pool($poolConfig);\n        }\n        return $this->_pool;\n    }", "language": "php", "code": "public function getPool()\n    {\n        if (!isset($this->_pool)) {\n            $poolConfig = [\n                'loop' => $this->loop,\n                'clientConfig' => [\n                    ['class' => pgConnection::class],\n                    [\n                        $this->connectionParams,\n                        $this->loop,\n                        $this->connector\n                    ]\n                ]\n            ];\n            $poolConfig = ArrayHelper::merge($this->poolConfigDefault, $this->poolConfig, $poolConfig);\n            $this->_pool = new Pool($poolConfig);\n        }\n        return $this->_pool;\n    }", "code_tokens": ["public", "function", "getPool", "(", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "_pool", ")", ")", "{", "$", "poolConfig", "=", "[", "'loop'", "=>", "$", "this", "->", "loop", ",", "'clientConfig'", "=>", "[", "[", "'class'", "=>", "pgConnection", "::", "class", "]", ",", "[", "$", "this", "->", "connectionParams", ",", "$", "this", "->", "loop", ",", "$", "this", "->", "connector", "]", "]", "]", ";", "$", "poolConfig", "=", "ArrayHelper", "::", "merge", "(", "$", "this", "->", "poolConfigDefault", ",", "$", "this", "->", "poolConfig", ",", "$", "poolConfig", ")", ";", "$", "this", "->", "_pool", "=", "new", "Pool", "(", "$", "poolConfig", ")", ";", "}", "return", "$", "this", "->", "_pool", ";", "}"], "docstring": "Get pool of connections\n@return Pool|null", "docstring_tokens": ["Get", "pool", "of", "connections"], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/Pgsql/PgClient.php#L96-L114", "partition": "test"}
{"repo": "locomotivemtl/charcoal-object", "path": "src/Charcoal/Object/ObjectRoute.php", "func_name": "ObjectRoute.isSlugUnique", "original_string": "public function isSlugUnique()\n    {\n        $proto = $this->modelFactory()->get(self::class);\n        $loader = $this->collectionLoader();\n        $loader\n            ->reset()\n            ->setModel($proto)\n            ->addFilter('active', true)\n            ->addFilter('slug', $this->slug())\n            ->addFilter('lang', $this->lang())\n            ->addOrder('creation_date', 'desc')\n            ->setPage(1)\n            ->setNumPerPage(1);\n\n        $routes = $loader->load()->objects();\n        if (!$routes) {\n            return true;\n        }\n        $obj = reset($routes);\n        if (!$obj->id()) {\n            return true;\n        }\n        if ($obj->id() === $this->id()) {\n            return true;\n        }\n        if ($obj->routeObjId() === $this->routeObjId() &&\n            $obj->routeObjType() === $this->routeObjType() &&\n            $obj->lang() === $this->lang()\n        ) {\n            $this->setId($obj->id());\n\n            return true;\n        }\n\n        return false;\n    }", "language": "php", "code": "public function isSlugUnique()\n    {\n        $proto = $this->modelFactory()->get(self::class);\n        $loader = $this->collectionLoader();\n        $loader\n            ->reset()\n            ->setModel($proto)\n            ->addFilter('active', true)\n            ->addFilter('slug', $this->slug())\n            ->addFilter('lang', $this->lang())\n            ->addOrder('creation_date', 'desc')\n            ->setPage(1)\n            ->setNumPerPage(1);\n\n        $routes = $loader->load()->objects();\n        if (!$routes) {\n            return true;\n        }\n        $obj = reset($routes);\n        if (!$obj->id()) {\n            return true;\n        }\n        if ($obj->id() === $this->id()) {\n            return true;\n        }\n        if ($obj->routeObjId() === $this->routeObjId() &&\n            $obj->routeObjType() === $this->routeObjType() &&\n            $obj->lang() === $this->lang()\n        ) {\n            $this->setId($obj->id());\n\n            return true;\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "isSlugUnique", "(", ")", "{", "$", "proto", "=", "$", "this", "->", "modelFactory", "(", ")", "->", "get", "(", "self", "::", "class", ")", ";", "$", "loader", "=", "$", "this", "->", "collectionLoader", "(", ")", ";", "$", "loader", "->", "reset", "(", ")", "->", "setModel", "(", "$", "proto", ")", "->", "addFilter", "(", "'active'", ",", "true", ")", "->", "addFilter", "(", "'slug'", ",", "$", "this", "->", "slug", "(", ")", ")", "->", "addFilter", "(", "'lang'", ",", "$", "this", "->", "lang", "(", ")", ")", "->", "addOrder", "(", "'creation_date'", ",", "'desc'", ")", "->", "setPage", "(", "1", ")", "->", "setNumPerPage", "(", "1", ")", ";", "$", "routes", "=", "$", "loader", "->", "load", "(", ")", "->", "objects", "(", ")", ";", "if", "(", "!", "$", "routes", ")", "{", "return", "true", ";", "}", "$", "obj", "=", "reset", "(", "$", "routes", ")", ";", "if", "(", "!", "$", "obj", "->", "id", "(", ")", ")", "{", "return", "true", ";", "}", "if", "(", "$", "obj", "->", "id", "(", ")", "===", "$", "this", "->", "id", "(", ")", ")", "{", "return", "true", ";", "}", "if", "(", "$", "obj", "->", "routeObjId", "(", ")", "===", "$", "this", "->", "routeObjId", "(", ")", "&&", "$", "obj", "->", "routeObjType", "(", ")", "===", "$", "this", "->", "routeObjType", "(", ")", "&&", "$", "obj", "->", "lang", "(", ")", "===", "$", "this", "->", "lang", "(", ")", ")", "{", "$", "this", "->", "setId", "(", "$", "obj", "->", "id", "(", ")", ")", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Determine if the current slug is unique.\n\n@return boolean", "docstring_tokens": ["Determine", "if", "the", "current", "slug", "is", "unique", "."], "sha": "11c459d0e1519de215ca1c18301ee8f5e8d1e09b", "url": "https://github.com/locomotivemtl/charcoal-object/blob/11c459d0e1519de215ca1c18301ee8f5e8d1e09b/src/Charcoal/Object/ObjectRoute.php#L187-L222", "partition": "test"}
{"repo": "vanilla/garden", "path": "src/SecureString.php", "func_name": "SecureString.popString", "original_string": "protected function popString(&$str) {\n        if ($str === '') {\n            return null;\n        }\n\n        $pos = strrpos($str, '.');\n        if ($pos !== false) {\n            $result = substr($str, $pos + 1);\n            $str = substr($str, 0, $pos);\n        } else {\n            $result = $str;\n            $str = '';\n        }\n        return $result;\n    }", "language": "php", "code": "protected function popString(&$str) {\n        if ($str === '') {\n            return null;\n        }\n\n        $pos = strrpos($str, '.');\n        if ($pos !== false) {\n            $result = substr($str, $pos + 1);\n            $str = substr($str, 0, $pos);\n        } else {\n            $result = $str;\n            $str = '';\n        }\n        return $result;\n    }", "code_tokens": ["protected", "function", "popString", "(", "&", "$", "str", ")", "{", "if", "(", "$", "str", "===", "''", ")", "{", "return", "null", ";", "}", "$", "pos", "=", "strrpos", "(", "$", "str", ",", "'.'", ")", ";", "if", "(", "$", "pos", "!==", "false", ")", "{", "$", "result", "=", "substr", "(", "$", "str", ",", "$", "pos", "+", "1", ")", ";", "$", "str", "=", "substr", "(", "$", "str", ",", "0", ",", "$", "pos", ")", ";", "}", "else", "{", "$", "result", "=", "$", "str", ";", "$", "str", "=", "''", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Pop a string off of the end of an encoded secure string.\n\n@param string &$str The main string to pop.\n@return string|null Returns the popped string or null if {@link $str} is empty.", "docstring_tokens": ["Pop", "a", "string", "off", "of", "the", "end", "of", "an", "encoded", "secure", "string", "."], "sha": "ad9af189da98d57dc990eb3e6c0524f32e5e7e01", "url": "https://github.com/vanilla/garden/blob/ad9af189da98d57dc990eb3e6c0524f32e5e7e01/src/SecureString.php#L373-L387", "partition": "test"}
{"repo": "yetanotherape/diff-match-patch", "path": "src/Diff.php", "func_name": "Diff.lineMode", "original_string": "protected function lineMode($text1, $text2, $deadline)\n    {\n        // Scan the text on a line-by-line basis first.\n        list($text1, $text2, $lineArray) = $this->getToolkit()->linesToChars($text1, $text2);\n\n        $diff = new Diff();\n        $diff->main($text1, $text2, false, $deadline);\n        $diffs = $diff->getChanges();\n\n        // Convert the diff back to original text.\n        $this->getToolkit()->charsToLines($diffs, $lineArray);\n        $diff->setChanges($diffs);\n\n        // Eliminate freak matches (e.g. blank lines)\n        $diff->cleanupSemantic();\n        $diffs = $diff->getChanges();\n\n        // Rediff any replacement blocks, this time character-by-character.\n        // Add a dummy entry at the end.\n        array_push($diffs, array(self::EQUAL, ''));\n        $pointer = 0;\n        $countDelete = 0;\n        $countInsert = 0;\n        $textDelete = '';\n        $textInsert = '';\n\n        while ($pointer < count($diffs)) {\n            switch ($diffs[$pointer][0]) {\n                case self::DELETE:\n                    $countDelete++;\n                    $textDelete .= $diffs[$pointer][1];\n                    break;\n                case self::INSERT:\n                $countInsert++;\n                    $textInsert .= $diffs[$pointer][1];\n                    break;\n                case self::EQUAL:\n                    // Upon reaching an equality, check for prior redundancies.\n                    if ($countDelete > 0 && $countInsert > 0) {\n                        // Delete the offending records and add the merged ones.\n                        $subDiff = new Diff();\n                        $subDiff->main($textDelete, $textInsert, false, $deadline);\n                        array_splice($diffs, $pointer - $countDelete - $countInsert, $countDelete + $countInsert, $subDiff->getChanges());\n                        $pointer = $pointer - $countDelete - $countInsert + count($subDiff->getChanges());\n                    }\n                    $countDelete = 0;\n                    $countInsert = 0;\n                    $textDelete = '';\n                    $textInsert = '';\n                    break;\n            }\n            $pointer++;\n        }\n\n        // Remove the dummy entry at the end.\n        array_pop($diffs);\n\n        return $diffs;\n    }", "language": "php", "code": "protected function lineMode($text1, $text2, $deadline)\n    {\n        // Scan the text on a line-by-line basis first.\n        list($text1, $text2, $lineArray) = $this->getToolkit()->linesToChars($text1, $text2);\n\n        $diff = new Diff();\n        $diff->main($text1, $text2, false, $deadline);\n        $diffs = $diff->getChanges();\n\n        // Convert the diff back to original text.\n        $this->getToolkit()->charsToLines($diffs, $lineArray);\n        $diff->setChanges($diffs);\n\n        // Eliminate freak matches (e.g. blank lines)\n        $diff->cleanupSemantic();\n        $diffs = $diff->getChanges();\n\n        // Rediff any replacement blocks, this time character-by-character.\n        // Add a dummy entry at the end.\n        array_push($diffs, array(self::EQUAL, ''));\n        $pointer = 0;\n        $countDelete = 0;\n        $countInsert = 0;\n        $textDelete = '';\n        $textInsert = '';\n\n        while ($pointer < count($diffs)) {\n            switch ($diffs[$pointer][0]) {\n                case self::DELETE:\n                    $countDelete++;\n                    $textDelete .= $diffs[$pointer][1];\n                    break;\n                case self::INSERT:\n                $countInsert++;\n                    $textInsert .= $diffs[$pointer][1];\n                    break;\n                case self::EQUAL:\n                    // Upon reaching an equality, check for prior redundancies.\n                    if ($countDelete > 0 && $countInsert > 0) {\n                        // Delete the offending records and add the merged ones.\n                        $subDiff = new Diff();\n                        $subDiff->main($textDelete, $textInsert, false, $deadline);\n                        array_splice($diffs, $pointer - $countDelete - $countInsert, $countDelete + $countInsert, $subDiff->getChanges());\n                        $pointer = $pointer - $countDelete - $countInsert + count($subDiff->getChanges());\n                    }\n                    $countDelete = 0;\n                    $countInsert = 0;\n                    $textDelete = '';\n                    $textInsert = '';\n                    break;\n            }\n            $pointer++;\n        }\n\n        // Remove the dummy entry at the end.\n        array_pop($diffs);\n\n        return $diffs;\n    }", "code_tokens": ["protected", "function", "lineMode", "(", "$", "text1", ",", "$", "text2", ",", "$", "deadline", ")", "{", "// Scan the text on a line-by-line basis first.", "list", "(", "$", "text1", ",", "$", "text2", ",", "$", "lineArray", ")", "=", "$", "this", "->", "getToolkit", "(", ")", "->", "linesToChars", "(", "$", "text1", ",", "$", "text2", ")", ";", "$", "diff", "=", "new", "Diff", "(", ")", ";", "$", "diff", "->", "main", "(", "$", "text1", ",", "$", "text2", ",", "false", ",", "$", "deadline", ")", ";", "$", "diffs", "=", "$", "diff", "->", "getChanges", "(", ")", ";", "// Convert the diff back to original text.", "$", "this", "->", "getToolkit", "(", ")", "->", "charsToLines", "(", "$", "diffs", ",", "$", "lineArray", ")", ";", "$", "diff", "->", "setChanges", "(", "$", "diffs", ")", ";", "// Eliminate freak matches (e.g. blank lines)", "$", "diff", "->", "cleanupSemantic", "(", ")", ";", "$", "diffs", "=", "$", "diff", "->", "getChanges", "(", ")", ";", "// Rediff any replacement blocks, this time character-by-character.", "// Add a dummy entry at the end.", "array_push", "(", "$", "diffs", ",", "array", "(", "self", "::", "EQUAL", ",", "''", ")", ")", ";", "$", "pointer", "=", "0", ";", "$", "countDelete", "=", "0", ";", "$", "countInsert", "=", "0", ";", "$", "textDelete", "=", "''", ";", "$", "textInsert", "=", "''", ";", "while", "(", "$", "pointer", "<", "count", "(", "$", "diffs", ")", ")", "{", "switch", "(", "$", "diffs", "[", "$", "pointer", "]", "[", "0", "]", ")", "{", "case", "self", "::", "DELETE", ":", "$", "countDelete", "++", ";", "$", "textDelete", ".=", "$", "diffs", "[", "$", "pointer", "]", "[", "1", "]", ";", "break", ";", "case", "self", "::", "INSERT", ":", "$", "countInsert", "++", ";", "$", "textInsert", ".=", "$", "diffs", "[", "$", "pointer", "]", "[", "1", "]", ";", "break", ";", "case", "self", "::", "EQUAL", ":", "// Upon reaching an equality, check for prior redundancies.", "if", "(", "$", "countDelete", ">", "0", "&&", "$", "countInsert", ">", "0", ")", "{", "// Delete the offending records and add the merged ones.", "$", "subDiff", "=", "new", "Diff", "(", ")", ";", "$", "subDiff", "->", "main", "(", "$", "textDelete", ",", "$", "textInsert", ",", "false", ",", "$", "deadline", ")", ";", "array_splice", "(", "$", "diffs", ",", "$", "pointer", "-", "$", "countDelete", "-", "$", "countInsert", ",", "$", "countDelete", "+", "$", "countInsert", ",", "$", "subDiff", "->", "getChanges", "(", ")", ")", ";", "$", "pointer", "=", "$", "pointer", "-", "$", "countDelete", "-", "$", "countInsert", "+", "count", "(", "$", "subDiff", "->", "getChanges", "(", ")", ")", ";", "}", "$", "countDelete", "=", "0", ";", "$", "countInsert", "=", "0", ";", "$", "textDelete", "=", "''", ";", "$", "textInsert", "=", "''", ";", "break", ";", "}", "$", "pointer", "++", ";", "}", "// Remove the dummy entry at the end.", "array_pop", "(", "$", "diffs", ")", ";", "return", "$", "diffs", ";", "}"], "docstring": "Do a quick line-level diff on both strings, then rediff the parts for greater accuracy.\nThis speedup can produce non-minimal diffs.\n\n@param string $text1    Old string to be diffed.\n@param string $text2    New string to be diffed.\n@param int    $deadline Time when the diff should be complete by.\n\n@return array Array of changes.", "docstring_tokens": ["Do", "a", "quick", "line", "-", "level", "diff", "on", "both", "strings", "then", "rediff", "the", "parts", "for", "greater", "accuracy", ".", "This", "speedup", "can", "produce", "non", "-", "minimal", "diffs", "."], "sha": "ddbf7c0c021b970533a161f8078f675dcd7e5372", "url": "https://github.com/yetanotherape/diff-match-patch/blob/ddbf7c0c021b970533a161f8078f675dcd7e5372/src/Diff.php#L1143-L1201", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Language/Language.php", "func_name": "Language.formatMessage", "original_string": "protected function formatMessage($message, array $args = [])\n\t{\n\t\tif (! $this->intlSupport || ! $args)\n\t\t{\n\t\t\treturn $message;\n\t\t}\n\n\t\tif (is_array($message))\n\t\t{\n\t\t\tforeach ($message as $index => $value)\n\t\t\t{\n\t\t\t\t$message[$index] = $this->formatMessage($value, $args);\n\t\t\t}\n\t\t\treturn $message;\n\t\t}\n\n\t\treturn \\MessageFormatter::formatMessage($this->locale, $message, $args);\n\t}", "language": "php", "code": "protected function formatMessage($message, array $args = [])\n\t{\n\t\tif (! $this->intlSupport || ! $args)\n\t\t{\n\t\t\treturn $message;\n\t\t}\n\n\t\tif (is_array($message))\n\t\t{\n\t\t\tforeach ($message as $index => $value)\n\t\t\t{\n\t\t\t\t$message[$index] = $this->formatMessage($value, $args);\n\t\t\t}\n\t\t\treturn $message;\n\t\t}\n\n\t\treturn \\MessageFormatter::formatMessage($this->locale, $message, $args);\n\t}", "code_tokens": ["protected", "function", "formatMessage", "(", "$", "message", ",", "array", "$", "args", "=", "[", "]", ")", "{", "if", "(", "!", "$", "this", "->", "intlSupport", "||", "!", "$", "args", ")", "{", "return", "$", "message", ";", "}", "if", "(", "is_array", "(", "$", "message", ")", ")", "{", "foreach", "(", "$", "message", "as", "$", "index", "=>", "$", "value", ")", "{", "$", "message", "[", "$", "index", "]", "=", "$", "this", "->", "formatMessage", "(", "$", "value", ",", "$", "args", ")", ";", "}", "return", "$", "message", ";", "}", "return", "\\", "MessageFormatter", "::", "formatMessage", "(", "$", "this", "->", "locale", ",", "$", "message", ",", "$", "args", ")", ";", "}"], "docstring": "Advanced message formatting.\n\n@param string|array $message Message.\n@param array\t       $args    Arguments.\n\n@return string|array Returns formatted message.", "docstring_tokens": ["Advanced", "message", "formatting", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Language/Language.php#L219-L236", "partition": "test"}
{"repo": "miladrahimi/phprouter", "path": "src/Router.php", "func_name": "Router.regexParameter", "original_string": "private function regexParameter(string $name): string\n    {\n        if ($name[-1] == '?') {\n            $name = substr($name, 0, -1);\n            $suffix = '?';\n        } else {\n            $suffix = '';\n        }\n\n        $pattern = $this->parameters[$name] ?? '[^/]+';\n\n        return '(?<'.$name.'>'.$pattern.')'.$suffix;\n    }", "language": "php", "code": "private function regexParameter(string $name): string\n    {\n        if ($name[-1] == '?') {\n            $name = substr($name, 0, -1);\n            $suffix = '?';\n        } else {\n            $suffix = '';\n        }\n\n        $pattern = $this->parameters[$name] ?? '[^/]+';\n\n        return '(?<'.$name.'>'.$pattern.')'.$suffix;\n    }", "code_tokens": ["private", "function", "regexParameter", "(", "string", "$", "name", ")", ":", "string", "{", "if", "(", "$", "name", "[", "-", "1", "]", "==", "'?'", ")", "{", "$", "name", "=", "substr", "(", "$", "name", ",", "0", ",", "-", "1", ")", ";", "$", "suffix", "=", "'?'", ";", "}", "else", "{", "$", "suffix", "=", "''", ";", "}", "$", "pattern", "=", "$", "this", "->", "parameters", "[", "$", "name", "]", "??", "'[^/]+'", ";", "return", "'(?<'", ".", "$", "name", ".", "'>'", ".", "$", "pattern", ".", "')'", ".", "$", "suffix", ";", "}"], "docstring": "Convert route parameter to regex\n\n@param string $name\n@return string", "docstring_tokens": ["Convert", "route", "parameter", "to", "regex"], "sha": "7036181516b1cfa77bdd323cc3f2a6a8af95cee8", "url": "https://github.com/miladrahimi/phprouter/blob/7036181516b1cfa77bdd323cc3f2a6a8af95cee8/src/Router.php#L470-L482", "partition": "test"}
{"repo": "crevillo/payum-redsys", "path": "Api.php", "func_name": "Api.sign", "original_string": "public function sign(array $params)\n    {\n        $base64DecodedKey = base64_decode($this->options['secret_key']);\n        $key = $this->encrypt_3DES($params['Ds_Merchant_Order'],\n            $base64DecodedKey);\n\n        $res = $this->mac256(\n            $this->createMerchantParameters($params),\n            $key\n        );\n\n        return base64_encode($res);\n    }", "language": "php", "code": "public function sign(array $params)\n    {\n        $base64DecodedKey = base64_decode($this->options['secret_key']);\n        $key = $this->encrypt_3DES($params['Ds_Merchant_Order'],\n            $base64DecodedKey);\n\n        $res = $this->mac256(\n            $this->createMerchantParameters($params),\n            $key\n        );\n\n        return base64_encode($res);\n    }", "code_tokens": ["public", "function", "sign", "(", "array", "$", "params", ")", "{", "$", "base64DecodedKey", "=", "base64_decode", "(", "$", "this", "->", "options", "[", "'secret_key'", "]", ")", ";", "$", "key", "=", "$", "this", "->", "encrypt_3DES", "(", "$", "params", "[", "'Ds_Merchant_Order'", "]", ",", "$", "base64DecodedKey", ")", ";", "$", "res", "=", "$", "this", "->", "mac256", "(", "$", "this", "->", "createMerchantParameters", "(", "$", "params", ")", ",", "$", "key", ")", ";", "return", "base64_encode", "(", "$", "res", ")", ";", "}"], "docstring": "Sing request sent to Gateway\n\n@param array $params\n\n@return string", "docstring_tokens": ["Sing", "request", "sent", "to", "Gateway"], "sha": "c256c4796424efb9212408177525c3a8b971b44e", "url": "https://github.com/crevillo/payum-redsys/blob/c256c4796424efb9212408177525c3a8b971b44e/Api.php#L302-L314", "partition": "test"}
{"repo": "shumkov/rediska", "path": "library/Rediska.php", "func_name": "Rediska.subscribe", "original_string": "public function subscribe($channelOrChannels, $timeout = null)\n    {\n        return new Rediska_PubSub_Channel($channelOrChannels, array(\n            'rediska'       => $this,\n            'timeout'       => $timeout,\n            'serverAlias'   => $this->_specifiedConnection->getConnection()\n        ));\n    }", "language": "php", "code": "public function subscribe($channelOrChannels, $timeout = null)\n    {\n        return new Rediska_PubSub_Channel($channelOrChannels, array(\n            'rediska'       => $this,\n            'timeout'       => $timeout,\n            'serverAlias'   => $this->_specifiedConnection->getConnection()\n        ));\n    }", "code_tokens": ["public", "function", "subscribe", "(", "$", "channelOrChannels", ",", "$", "timeout", "=", "null", ")", "{", "return", "new", "Rediska_PubSub_Channel", "(", "$", "channelOrChannels", ",", "array", "(", "'rediska'", "=>", "$", "this", ",", "'timeout'", "=>", "$", "timeout", ",", "'serverAlias'", "=>", "$", "this", "->", "_specifiedConnection", "->", "getConnection", "(", ")", ")", ")", ";", "}"], "docstring": "Subscribe to PubSub channel or channels\n\n@param string|array      $channelOrChannels\n@param integer[optional] $timeout\n@return Rediska_PubSub_Channel", "docstring_tokens": ["Subscribe", "to", "PubSub", "channel", "or", "channels"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/library/Rediska.php#L412-L419", "partition": "test"}
{"repo": "kiwi-suite/admin42", "path": "src/Authentication/AuthenticationService.php", "func_name": "AuthenticationService.getIdentity", "original_string": "public function getIdentity()\n    {\n        if ($this->identity instanceof User) {\n            return $this->identity;\n        }\n\n        $identity = parent::getIdentity();\n\n        if (empty($identity)) {\n            $this->clearIdentity();\n\n            return;\n        }\n\n        $identity = $this->tableGateway->selectByPrimary($identity);\n        if (!($identity instanceof User)) {\n            $this->clearIdentity();\n\n            return;\n        }\n\n        if (!\\in_array($identity->getStatus(), [User::STATUS_ACTIVE])) {\n            $this->clearIdentity();\n\n            return;\n        }\n\n        $this->identity = $identity;\n\n        return $identity;\n    }", "language": "php", "code": "public function getIdentity()\n    {\n        if ($this->identity instanceof User) {\n            return $this->identity;\n        }\n\n        $identity = parent::getIdentity();\n\n        if (empty($identity)) {\n            $this->clearIdentity();\n\n            return;\n        }\n\n        $identity = $this->tableGateway->selectByPrimary($identity);\n        if (!($identity instanceof User)) {\n            $this->clearIdentity();\n\n            return;\n        }\n\n        if (!\\in_array($identity->getStatus(), [User::STATUS_ACTIVE])) {\n            $this->clearIdentity();\n\n            return;\n        }\n\n        $this->identity = $identity;\n\n        return $identity;\n    }", "code_tokens": ["public", "function", "getIdentity", "(", ")", "{", "if", "(", "$", "this", "->", "identity", "instanceof", "User", ")", "{", "return", "$", "this", "->", "identity", ";", "}", "$", "identity", "=", "parent", "::", "getIdentity", "(", ")", ";", "if", "(", "empty", "(", "$", "identity", ")", ")", "{", "$", "this", "->", "clearIdentity", "(", ")", ";", "return", ";", "}", "$", "identity", "=", "$", "this", "->", "tableGateway", "->", "selectByPrimary", "(", "$", "identity", ")", ";", "if", "(", "!", "(", "$", "identity", "instanceof", "User", ")", ")", "{", "$", "this", "->", "clearIdentity", "(", ")", ";", "return", ";", "}", "if", "(", "!", "\\", "in_array", "(", "$", "identity", "->", "getStatus", "(", ")", ",", "[", "User", "::", "STATUS_ACTIVE", "]", ")", ")", "{", "$", "this", "->", "clearIdentity", "(", ")", ";", "return", ";", "}", "$", "this", "->", "identity", "=", "$", "identity", ";", "return", "$", "identity", ";", "}"], "docstring": "Returns the authenticated identity or null if no identity is available\n\n@return User|null", "docstring_tokens": ["Returns", "the", "authenticated", "identity", "or", "null", "if", "no", "identity", "is", "available"], "sha": "c2b635eda83eb392a17223840b847c7bcc44f0cf", "url": "https://github.com/kiwi-suite/admin42/blob/c2b635eda83eb392a17223840b847c7bcc44f0cf/src/Authentication/AuthenticationService.php#L61-L91", "partition": "test"}
{"repo": "kamaln7/toastr", "path": "src/Kamaln7/Toastr/Toastr.php", "func_name": "Toastr.render", "original_string": "public function render() {\n        $notifications = $this->session->get('toastr::notifications');\n        if(!$notifications) $notifications = array();\n\n        $output = '<script type=\"text/javascript\">';\n        $lastConfig = [];\n        foreach($notifications as $notification) {\n\n            $config = $this->config->get('toastr::options');\n           \n            if(count($notification['options']) > 0) {\n                // Merge user supplied options with default options\n                $config = array_merge($config, $notification['options']);\n            }\n\n            // Config persists between toasts\n            if($config != $lastConfig) {\n                $output .= 'toastr.options = ' . json_encode($config) . ';';   \n                $lastConfig = $config;\n            }\n\n            // Toastr output\n            $output .= 'toastr.' . $notification['type'] . \"('\" . str_replace(\"'\", \"\\\\'\", htmlentities($notification['message'])) . \"'\" . (isset($notification['title']) ? \", '\" . str_replace(\"'\", \"\\\\'\", htmlentities($notification['title'])) . \"'\" : null) . ');';\n        }\n        $output .= '</script>';\n\n        return $output;\n    }", "language": "php", "code": "public function render() {\n        $notifications = $this->session->get('toastr::notifications');\n        if(!$notifications) $notifications = array();\n\n        $output = '<script type=\"text/javascript\">';\n        $lastConfig = [];\n        foreach($notifications as $notification) {\n\n            $config = $this->config->get('toastr::options');\n           \n            if(count($notification['options']) > 0) {\n                // Merge user supplied options with default options\n                $config = array_merge($config, $notification['options']);\n            }\n\n            // Config persists between toasts\n            if($config != $lastConfig) {\n                $output .= 'toastr.options = ' . json_encode($config) . ';';   \n                $lastConfig = $config;\n            }\n\n            // Toastr output\n            $output .= 'toastr.' . $notification['type'] . \"('\" . str_replace(\"'\", \"\\\\'\", htmlentities($notification['message'])) . \"'\" . (isset($notification['title']) ? \", '\" . str_replace(\"'\", \"\\\\'\", htmlentities($notification['title'])) . \"'\" : null) . ');';\n        }\n        $output .= '</script>';\n\n        return $output;\n    }", "code_tokens": ["public", "function", "render", "(", ")", "{", "$", "notifications", "=", "$", "this", "->", "session", "->", "get", "(", "'toastr::notifications'", ")", ";", "if", "(", "!", "$", "notifications", ")", "$", "notifications", "=", "array", "(", ")", ";", "$", "output", "=", "'<script type=\"text/javascript\">'", ";", "$", "lastConfig", "=", "[", "]", ";", "foreach", "(", "$", "notifications", "as", "$", "notification", ")", "{", "$", "config", "=", "$", "this", "->", "config", "->", "get", "(", "'toastr::options'", ")", ";", "if", "(", "count", "(", "$", "notification", "[", "'options'", "]", ")", ">", "0", ")", "{", "// Merge user supplied options with default options", "$", "config", "=", "array_merge", "(", "$", "config", ",", "$", "notification", "[", "'options'", "]", ")", ";", "}", "// Config persists between toasts", "if", "(", "$", "config", "!=", "$", "lastConfig", ")", "{", "$", "output", ".=", "'toastr.options = '", ".", "json_encode", "(", "$", "config", ")", ".", "';'", ";", "$", "lastConfig", "=", "$", "config", ";", "}", "// Toastr output", "$", "output", ".=", "'toastr.'", ".", "$", "notification", "[", "'type'", "]", ".", "\"('\"", ".", "str_replace", "(", "\"'\"", ",", "\"\\\\'\"", ",", "htmlentities", "(", "$", "notification", "[", "'message'", "]", ")", ")", ".", "\"'\"", ".", "(", "isset", "(", "$", "notification", "[", "'title'", "]", ")", "?", "\", '\"", ".", "str_replace", "(", "\"'\"", ",", "\"\\\\'\"", ",", "htmlentities", "(", "$", "notification", "[", "'title'", "]", ")", ")", ".", "\"'\"", ":", "null", ")", ".", "');'", ";", "}", "$", "output", ".=", "'</script>'", ";", "return", "$", "output", ";", "}"], "docstring": "Render the notifications' script tag\n\n@param bool $flashed Whether to get the\n\n@return string", "docstring_tokens": ["Render", "the", "notifications", "script", "tag"], "sha": "bf555883de08191b82b753d176048cb696036e97", "url": "https://github.com/kamaln7/toastr/blob/bf555883de08191b82b753d176048cb696036e97/src/Kamaln7/Toastr/Toastr.php#L47-L74", "partition": "test"}
{"repo": "wpsharks/core", "path": "src/includes/classes/Core/Utils/Image.php", "func_name": "Image.changeFormatExt", "original_string": "protected function changeFormatExt(string $file, string $format): string\n    {\n        return $this->c::changeFileExt($file, $this->formatToExt($format));\n    }", "language": "php", "code": "protected function changeFormatExt(string $file, string $format): string\n    {\n        return $this->c::changeFileExt($file, $this->formatToExt($format));\n    }", "code_tokens": ["protected", "function", "changeFormatExt", "(", "string", "$", "file", ",", "string", "$", "format", ")", ":", "string", "{", "return", "$", "this", "->", "c", "::", "changeFileExt", "(", "$", "file", ",", "$", "this", "->", "formatToExt", "(", "$", "format", ")", ")", ";", "}"], "docstring": "Change format extension.\n\n@since 17xxxx Imagick utils.\n\n@param string $file   Image file.\n@param string $format Image format.\n\n@return string File w/ possible format extension.", "docstring_tokens": ["Change", "format", "extension", "."], "sha": "7a086f144d15ba2587c348744b75f811b9dd6625", "url": "https://github.com/wpsharks/core/blob/7a086f144d15ba2587c348744b75f811b9dd6625/src/includes/classes/Core/Utils/Image.php#L788-L791", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/PEAR/Dependency2.php", "func_name": "PEAR_Dependency2.validatePackage", "original_string": "function validatePackage($pkg, &$dl, $params = array())\n    {\n        if (is_array($pkg) && isset($pkg['info'])) {\n            $deps = $this->_dependencydb->getDependentPackageDependencies($pkg['info']);\n        } else {\n            $deps = $this->_dependencydb->getDependentPackageDependencies($pkg);\n        }\n\n        $fail = false;\n        if ($deps) {\n            if (!class_exists('PEAR_Downloader_Package')) {\n                require_once 'PEAR/Downloader/Package.php';\n            }\n\n            $dp = &new PEAR_Downloader_Package($dl);\n            if (is_object($pkg)) {\n                $dp->setPackageFile($pkg);\n            } else {\n                $dp->setDownloadURL($pkg);\n            }\n\n            PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n            foreach ($deps as $channel => $info) {\n                foreach ($info as $package => $ds) {\n                    foreach ($params as $packd) {\n                        if (strtolower($packd->getPackage()) == strtolower($package) &&\n                              $packd->getChannel() == $channel) {\n                            $dl->log(3, 'skipping installed package check of \"' .\n                                        $this->_registry->parsedPackageNameToString(\n                                            array('channel' => $channel, 'package' => $package),\n                                            true) .\n                                        '\", version \"' . $packd->getVersion() . '\" will be ' .\n                                        'downloaded and installed');\n                            continue 2; // jump to next package\n                        }\n                    }\n\n                    foreach ($ds as $d) {\n                        $checker = &new PEAR_Dependency2($this->_config, $this->_options,\n                            array('channel' => $channel, 'package' => $package), $this->_state);\n                        $dep = $d['dep'];\n                        $required = $d['type'] == 'required';\n                        $ret = $checker->_validatePackageDownload($dep, $required, array(&$dp));\n                        if (is_array($ret)) {\n                            $dl->log(0, $ret[0]);\n                        } elseif (PEAR::isError($ret)) {\n                            $dl->log(0, $ret->getMessage());\n                            $fail = true;\n                        }\n                    }\n                }\n            }\n            PEAR::popErrorHandling();\n        }\n\n        if ($fail) {\n            return $this->raiseError(\n                '%s cannot be installed, conflicts with installed packages');\n        }\n\n        return true;\n    }", "language": "php", "code": "function validatePackage($pkg, &$dl, $params = array())\n    {\n        if (is_array($pkg) && isset($pkg['info'])) {\n            $deps = $this->_dependencydb->getDependentPackageDependencies($pkg['info']);\n        } else {\n            $deps = $this->_dependencydb->getDependentPackageDependencies($pkg);\n        }\n\n        $fail = false;\n        if ($deps) {\n            if (!class_exists('PEAR_Downloader_Package')) {\n                require_once 'PEAR/Downloader/Package.php';\n            }\n\n            $dp = &new PEAR_Downloader_Package($dl);\n            if (is_object($pkg)) {\n                $dp->setPackageFile($pkg);\n            } else {\n                $dp->setDownloadURL($pkg);\n            }\n\n            PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n            foreach ($deps as $channel => $info) {\n                foreach ($info as $package => $ds) {\n                    foreach ($params as $packd) {\n                        if (strtolower($packd->getPackage()) == strtolower($package) &&\n                              $packd->getChannel() == $channel) {\n                            $dl->log(3, 'skipping installed package check of \"' .\n                                        $this->_registry->parsedPackageNameToString(\n                                            array('channel' => $channel, 'package' => $package),\n                                            true) .\n                                        '\", version \"' . $packd->getVersion() . '\" will be ' .\n                                        'downloaded and installed');\n                            continue 2; // jump to next package\n                        }\n                    }\n\n                    foreach ($ds as $d) {\n                        $checker = &new PEAR_Dependency2($this->_config, $this->_options,\n                            array('channel' => $channel, 'package' => $package), $this->_state);\n                        $dep = $d['dep'];\n                        $required = $d['type'] == 'required';\n                        $ret = $checker->_validatePackageDownload($dep, $required, array(&$dp));\n                        if (is_array($ret)) {\n                            $dl->log(0, $ret[0]);\n                        } elseif (PEAR::isError($ret)) {\n                            $dl->log(0, $ret->getMessage());\n                            $fail = true;\n                        }\n                    }\n                }\n            }\n            PEAR::popErrorHandling();\n        }\n\n        if ($fail) {\n            return $this->raiseError(\n                '%s cannot be installed, conflicts with installed packages');\n        }\n\n        return true;\n    }", "code_tokens": ["function", "validatePackage", "(", "$", "pkg", ",", "&", "$", "dl", ",", "$", "params", "=", "array", "(", ")", ")", "{", "if", "(", "is_array", "(", "$", "pkg", ")", "&&", "isset", "(", "$", "pkg", "[", "'info'", "]", ")", ")", "{", "$", "deps", "=", "$", "this", "->", "_dependencydb", "->", "getDependentPackageDependencies", "(", "$", "pkg", "[", "'info'", "]", ")", ";", "}", "else", "{", "$", "deps", "=", "$", "this", "->", "_dependencydb", "->", "getDependentPackageDependencies", "(", "$", "pkg", ")", ";", "}", "$", "fail", "=", "false", ";", "if", "(", "$", "deps", ")", "{", "if", "(", "!", "class_exists", "(", "'PEAR_Downloader_Package'", ")", ")", "{", "require_once", "'PEAR/Downloader/Package.php'", ";", "}", "$", "dp", "=", "&", "new", "PEAR_Downloader_Package", "(", "$", "dl", ")", ";", "if", "(", "is_object", "(", "$", "pkg", ")", ")", "{", "$", "dp", "->", "setPackageFile", "(", "$", "pkg", ")", ";", "}", "else", "{", "$", "dp", "->", "setDownloadURL", "(", "$", "pkg", ")", ";", "}", "PEAR", "::", "pushErrorHandling", "(", "PEAR_ERROR_RETURN", ")", ";", "foreach", "(", "$", "deps", "as", "$", "channel", "=>", "$", "info", ")", "{", "foreach", "(", "$", "info", "as", "$", "package", "=>", "$", "ds", ")", "{", "foreach", "(", "$", "params", "as", "$", "packd", ")", "{", "if", "(", "strtolower", "(", "$", "packd", "->", "getPackage", "(", ")", ")", "==", "strtolower", "(", "$", "package", ")", "&&", "$", "packd", "->", "getChannel", "(", ")", "==", "$", "channel", ")", "{", "$", "dl", "->", "log", "(", "3", ",", "'skipping installed package check of \"'", ".", "$", "this", "->", "_registry", "->", "parsedPackageNameToString", "(", "array", "(", "'channel'", "=>", "$", "channel", ",", "'package'", "=>", "$", "package", ")", ",", "true", ")", ".", "'\", version \"'", ".", "$", "packd", "->", "getVersion", "(", ")", ".", "'\" will be '", ".", "'downloaded and installed'", ")", ";", "continue", "2", ";", "// jump to next package", "}", "}", "foreach", "(", "$", "ds", "as", "$", "d", ")", "{", "$", "checker", "=", "&", "new", "PEAR_Dependency2", "(", "$", "this", "->", "_config", ",", "$", "this", "->", "_options", ",", "array", "(", "'channel'", "=>", "$", "channel", ",", "'package'", "=>", "$", "package", ")", ",", "$", "this", "->", "_state", ")", ";", "$", "dep", "=", "$", "d", "[", "'dep'", "]", ";", "$", "required", "=", "$", "d", "[", "'type'", "]", "==", "'required'", ";", "$", "ret", "=", "$", "checker", "->", "_validatePackageDownload", "(", "$", "dep", ",", "$", "required", ",", "array", "(", "&", "$", "dp", ")", ")", ";", "if", "(", "is_array", "(", "$", "ret", ")", ")", "{", "$", "dl", "->", "log", "(", "0", ",", "$", "ret", "[", "0", "]", ")", ";", "}", "elseif", "(", "PEAR", "::", "isError", "(", "$", "ret", ")", ")", "{", "$", "dl", "->", "log", "(", "0", ",", "$", "ret", "->", "getMessage", "(", ")", ")", ";", "$", "fail", "=", "true", ";", "}", "}", "}", "}", "PEAR", "::", "popErrorHandling", "(", ")", ";", "}", "if", "(", "$", "fail", ")", "{", "return", "$", "this", "->", "raiseError", "(", "'%s cannot be installed, conflicts with installed packages'", ")", ";", "}", "return", "true", ";", "}"], "docstring": "validate a downloaded package against installed packages\n\nAs of PEAR 1.4.3, this will only validate\n\n@param array|PEAR_Downloader_Package|PEAR_PackageFile_v1|PEAR_PackageFile_v2\n$pkg package identifier (either\narray('package' => blah, 'channel' => blah) or an array with\nindex 'info' referencing an object)\n@param PEAR_Downloader $dl\n@param array $params full list of packages to install\n@return true|PEAR_Error", "docstring_tokens": ["validate", "a", "downloaded", "package", "against", "installed", "packages"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/PEAR/Dependency2.php#L1164-L1225", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Processors/WorkOrder/WorkOrderSessionProcessor.php", "func_name": "WorkOrderSessionProcessor.start", "original_string": "public function start($workOrderId)\n    {\n        $workOrder = $this->workOrder->findOrFail($workOrderId);\n\n        return $this->dispatch(new Start($workOrder));\n    }", "language": "php", "code": "public function start($workOrderId)\n    {\n        $workOrder = $this->workOrder->findOrFail($workOrderId);\n\n        return $this->dispatch(new Start($workOrder));\n    }", "code_tokens": ["public", "function", "start", "(", "$", "workOrderId", ")", "{", "$", "workOrder", "=", "$", "this", "->", "workOrder", "->", "findOrFail", "(", "$", "workOrderId", ")", ";", "return", "$", "this", "->", "dispatch", "(", "new", "Start", "(", "$", "workOrder", ")", ")", ";", "}"], "docstring": "Starts the current users session for the specified work order.\n\n@param int|string $workOrderId\n\n@return mixed", "docstring_tokens": ["Starts", "the", "current", "users", "session", "for", "the", "specified", "work", "order", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Processors/WorkOrder/WorkOrderSessionProcessor.php#L60-L65", "partition": "test"}
{"repo": "RevisionTen/forms", "path": "Controller/FormController.php", "func_name": "FormController.createFormAggregate", "original_string": "public function createFormAggregate(Request $request)\n    {\n        /** @var \\Symfony\\Component\\Security\\Core\\User\\UserInterface $user */\n        $user = $this->getUser();\n\n        $form = $this->createForm(FormType::class);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $data = $form->getData();\n            $aggregateUuid = Uuid::uuid1()->toString();\n\n            // Execute Command.\n            $success = false;\n            $this->commandBus->dispatch(new FormCreateCommand($user->getId(), Uuid::uuid1()->toString(), $aggregateUuid, 0, $data, function ($commandBus, $event) use (&$success) {\n                // Callback.\n                $success = true;\n            }));\n\n            if ($success) {\n                $this->addFlash(\n                    'success',\n                    'Form created'\n                );\n\n                return $this->redirectToForm($aggregateUuid);\n            }\n\n            return $this->errorResponse($aggregateUuid);\n        }\n\n        return $this->render('@forms/Form/form.html.twig', [\n            'title' => 'Add Form',\n            'form' => $form->createView(),\n        ]);\n    }", "language": "php", "code": "public function createFormAggregate(Request $request)\n    {\n        /** @var \\Symfony\\Component\\Security\\Core\\User\\UserInterface $user */\n        $user = $this->getUser();\n\n        $form = $this->createForm(FormType::class);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $data = $form->getData();\n            $aggregateUuid = Uuid::uuid1()->toString();\n\n            // Execute Command.\n            $success = false;\n            $this->commandBus->dispatch(new FormCreateCommand($user->getId(), Uuid::uuid1()->toString(), $aggregateUuid, 0, $data, function ($commandBus, $event) use (&$success) {\n                // Callback.\n                $success = true;\n            }));\n\n            if ($success) {\n                $this->addFlash(\n                    'success',\n                    'Form created'\n                );\n\n                return $this->redirectToForm($aggregateUuid);\n            }\n\n            return $this->errorResponse($aggregateUuid);\n        }\n\n        return $this->render('@forms/Form/form.html.twig', [\n            'title' => 'Add Form',\n            'form' => $form->createView(),\n        ]);\n    }", "code_tokens": ["public", "function", "createFormAggregate", "(", "Request", "$", "request", ")", "{", "/** @var \\Symfony\\Component\\Security\\Core\\User\\UserInterface $user */", "$", "user", "=", "$", "this", "->", "getUser", "(", ")", ";", "$", "form", "=", "$", "this", "->", "createForm", "(", "FormType", "::", "class", ")", ";", "$", "form", "->", "handleRequest", "(", "$", "request", ")", ";", "if", "(", "$", "form", "->", "isSubmitted", "(", ")", "&&", "$", "form", "->", "isValid", "(", ")", ")", "{", "$", "data", "=", "$", "form", "->", "getData", "(", ")", ";", "$", "aggregateUuid", "=", "Uuid", "::", "uuid1", "(", ")", "->", "toString", "(", ")", ";", "// Execute Command.", "$", "success", "=", "false", ";", "$", "this", "->", "commandBus", "->", "dispatch", "(", "new", "FormCreateCommand", "(", "$", "user", "->", "getId", "(", ")", ",", "Uuid", "::", "uuid1", "(", ")", "->", "toString", "(", ")", ",", "$", "aggregateUuid", ",", "0", ",", "$", "data", ",", "function", "(", "$", "commandBus", ",", "$", "event", ")", "use", "(", "&", "$", "success", ")", "{", "// Callback.", "$", "success", "=", "true", ";", "}", ")", ")", ";", "if", "(", "$", "success", ")", "{", "$", "this", "->", "addFlash", "(", "'success'", ",", "'Form created'", ")", ";", "return", "$", "this", "->", "redirectToForm", "(", "$", "aggregateUuid", ")", ";", "}", "return", "$", "this", "->", "errorResponse", "(", "$", "aggregateUuid", ")", ";", "}", "return", "$", "this", "->", "render", "(", "'@forms/Form/form.html.twig'", ",", "[", "'title'", "=>", "'Add Form'", ",", "'form'", "=>", "$", "form", "->", "createView", "(", ")", ",", "]", ")", ";", "}"], "docstring": "Displays the Form Aggregate create form.\n\n@Route(\"/create-form\", name=\"forms_create_form\")\n\n@param Request $request\n\n@return JsonResponse|RedirectResponse|Response\n@throws \\Exception", "docstring_tokens": ["Displays", "the", "Form", "Aggregate", "create", "form", "."], "sha": "248fdd562a3d1744d05a4f955ac759fa24389ef7", "url": "https://github.com/RevisionTen/forms/blob/248fdd562a3d1744d05a4f955ac759fa24389ef7/Controller/FormController.php#L183-L218", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/System.php", "func_name": "System.rm", "original_string": "function rm($args)\n    {\n        $opts = System::_parseArgs($args, 'rf'); // \"f\" does nothing but I like it :-)\n        if (PEAR::isError($opts)) {\n            return System::raiseError($opts);\n        }\n        foreach ($opts[0] as $opt) {\n            if ($opt[0] == 'r') {\n                $do_recursive = true;\n            }\n        }\n        $ret = true;\n        if (isset($do_recursive)) {\n            $struct = System::_multipleToStruct($opts[1]);\n            foreach ($struct['files'] as $file) {\n                if (!@unlink($file)) {\n                    $ret = false;\n                }\n            }\n\n            rsort($struct['dirs']);\n            foreach ($struct['dirs'] as $dir) {\n                if (!@rmdir($dir)) {\n                    $ret = false;\n                }\n            }\n        } else {\n            foreach ($opts[1] as $file) {\n                $delete = (is_dir($file)) ? 'rmdir' : 'unlink';\n                if (!@$delete($file)) {\n                    $ret = false;\n                }\n            }\n        }\n        return $ret;\n    }", "language": "php", "code": "function rm($args)\n    {\n        $opts = System::_parseArgs($args, 'rf'); // \"f\" does nothing but I like it :-)\n        if (PEAR::isError($opts)) {\n            return System::raiseError($opts);\n        }\n        foreach ($opts[0] as $opt) {\n            if ($opt[0] == 'r') {\n                $do_recursive = true;\n            }\n        }\n        $ret = true;\n        if (isset($do_recursive)) {\n            $struct = System::_multipleToStruct($opts[1]);\n            foreach ($struct['files'] as $file) {\n                if (!@unlink($file)) {\n                    $ret = false;\n                }\n            }\n\n            rsort($struct['dirs']);\n            foreach ($struct['dirs'] as $dir) {\n                if (!@rmdir($dir)) {\n                    $ret = false;\n                }\n            }\n        } else {\n            foreach ($opts[1] as $file) {\n                $delete = (is_dir($file)) ? 'rmdir' : 'unlink';\n                if (!@$delete($file)) {\n                    $ret = false;\n                }\n            }\n        }\n        return $ret;\n    }", "code_tokens": ["function", "rm", "(", "$", "args", ")", "{", "$", "opts", "=", "System", "::", "_parseArgs", "(", "$", "args", ",", "'rf'", ")", ";", "// \"f\" does nothing but I like it :-)", "if", "(", "PEAR", "::", "isError", "(", "$", "opts", ")", ")", "{", "return", "System", "::", "raiseError", "(", "$", "opts", ")", ";", "}", "foreach", "(", "$", "opts", "[", "0", "]", "as", "$", "opt", ")", "{", "if", "(", "$", "opt", "[", "0", "]", "==", "'r'", ")", "{", "$", "do_recursive", "=", "true", ";", "}", "}", "$", "ret", "=", "true", ";", "if", "(", "isset", "(", "$", "do_recursive", ")", ")", "{", "$", "struct", "=", "System", "::", "_multipleToStruct", "(", "$", "opts", "[", "1", "]", ")", ";", "foreach", "(", "$", "struct", "[", "'files'", "]", "as", "$", "file", ")", "{", "if", "(", "!", "@", "unlink", "(", "$", "file", ")", ")", "{", "$", "ret", "=", "false", ";", "}", "}", "rsort", "(", "$", "struct", "[", "'dirs'", "]", ")", ";", "foreach", "(", "$", "struct", "[", "'dirs'", "]", "as", "$", "dir", ")", "{", "if", "(", "!", "@", "rmdir", "(", "$", "dir", ")", ")", "{", "$", "ret", "=", "false", ";", "}", "}", "}", "else", "{", "foreach", "(", "$", "opts", "[", "1", "]", "as", "$", "file", ")", "{", "$", "delete", "=", "(", "is_dir", "(", "$", "file", ")", ")", "?", "'rmdir'", ":", "'unlink'", ";", "if", "(", "!", "@", "$", "delete", "(", "$", "file", ")", ")", "{", "$", "ret", "=", "false", ";", "}", "}", "}", "return", "$", "ret", ";", "}"], "docstring": "The rm command for removing files.\nSupports multiple files and dirs and also recursive deletes\n\n@param    string  $args   the arguments for rm\n@return   mixed   PEAR_Error or true for success\n@static\n@access   public", "docstring_tokens": ["The", "rm", "command", "for", "removing", "files", ".", "Supports", "multiple", "files", "and", "dirs", "and", "also", "recursive", "deletes"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/System.php#L199-L234", "partition": "test"}
{"repo": "FriendsOfSymfony/FOSElasticaBundle", "path": "src/Doctrine/AbstractElasticaToModelTransformer.php", "func_name": "AbstractElasticaToModelTransformer.transform", "original_string": "public function transform(array $elasticaObjects)\n    {\n        $ids = $highlights = [];\n        foreach ($elasticaObjects as $elasticaObject) {\n            $ids[] = $elasticaObject->getId();\n            $highlights[$elasticaObject->getId()] = $elasticaObject->getHighlights();\n        }\n\n        $objects = $this->findByIdentifiers($ids, $this->options['hydrate']);\n        $objectsCnt = count($objects);\n        $elasticaObjectsCnt = count($elasticaObjects);\n        if (!$this->options['ignore_missing'] && $objectsCnt < $elasticaObjectsCnt) {\n            throw new \\RuntimeException(sprintf('Cannot find corresponding Doctrine objects (%d) for all Elastica results (%d). IDs: %s', $objectsCnt, $elasticaObjectsCnt, implode(', ', $ids)));\n        }\n\n        $propertyAccessor = $this->propertyAccessor;\n        $identifier = $this->options['identifier'];\n        foreach ($objects as $object) {\n            if ($object instanceof HighlightableModelInterface) {\n                $id = $propertyAccessor->getValue($object, $identifier);\n                $object->setElasticHighlights($highlights[(string) $id]);\n            }\n        }\n\n        // sort objects in the order of ids\n        $idPos = array_flip($ids);\n        usort(\n            $objects,\n            function ($a, $b) use ($idPos, $identifier, $propertyAccessor) {\n                if ($this->options['hydrate']) {\n                    return $idPos[(string) $propertyAccessor->getValue(\n                        $a,\n                        $identifier\n                    )] > $idPos[(string) $propertyAccessor->getValue($b, $identifier)];\n                }\n\n                return $idPos[$a[$identifier]] > $idPos[$b[$identifier]];\n            }\n        );\n\n        return $objects;\n    }", "language": "php", "code": "public function transform(array $elasticaObjects)\n    {\n        $ids = $highlights = [];\n        foreach ($elasticaObjects as $elasticaObject) {\n            $ids[] = $elasticaObject->getId();\n            $highlights[$elasticaObject->getId()] = $elasticaObject->getHighlights();\n        }\n\n        $objects = $this->findByIdentifiers($ids, $this->options['hydrate']);\n        $objectsCnt = count($objects);\n        $elasticaObjectsCnt = count($elasticaObjects);\n        if (!$this->options['ignore_missing'] && $objectsCnt < $elasticaObjectsCnt) {\n            throw new \\RuntimeException(sprintf('Cannot find corresponding Doctrine objects (%d) for all Elastica results (%d). IDs: %s', $objectsCnt, $elasticaObjectsCnt, implode(', ', $ids)));\n        }\n\n        $propertyAccessor = $this->propertyAccessor;\n        $identifier = $this->options['identifier'];\n        foreach ($objects as $object) {\n            if ($object instanceof HighlightableModelInterface) {\n                $id = $propertyAccessor->getValue($object, $identifier);\n                $object->setElasticHighlights($highlights[(string) $id]);\n            }\n        }\n\n        // sort objects in the order of ids\n        $idPos = array_flip($ids);\n        usort(\n            $objects,\n            function ($a, $b) use ($idPos, $identifier, $propertyAccessor) {\n                if ($this->options['hydrate']) {\n                    return $idPos[(string) $propertyAccessor->getValue(\n                        $a,\n                        $identifier\n                    )] > $idPos[(string) $propertyAccessor->getValue($b, $identifier)];\n                }\n\n                return $idPos[$a[$identifier]] > $idPos[$b[$identifier]];\n            }\n        );\n\n        return $objects;\n    }", "code_tokens": ["public", "function", "transform", "(", "array", "$", "elasticaObjects", ")", "{", "$", "ids", "=", "$", "highlights", "=", "[", "]", ";", "foreach", "(", "$", "elasticaObjects", "as", "$", "elasticaObject", ")", "{", "$", "ids", "[", "]", "=", "$", "elasticaObject", "->", "getId", "(", ")", ";", "$", "highlights", "[", "$", "elasticaObject", "->", "getId", "(", ")", "]", "=", "$", "elasticaObject", "->", "getHighlights", "(", ")", ";", "}", "$", "objects", "=", "$", "this", "->", "findByIdentifiers", "(", "$", "ids", ",", "$", "this", "->", "options", "[", "'hydrate'", "]", ")", ";", "$", "objectsCnt", "=", "count", "(", "$", "objects", ")", ";", "$", "elasticaObjectsCnt", "=", "count", "(", "$", "elasticaObjects", ")", ";", "if", "(", "!", "$", "this", "->", "options", "[", "'ignore_missing'", "]", "&&", "$", "objectsCnt", "<", "$", "elasticaObjectsCnt", ")", "{", "throw", "new", "\\", "RuntimeException", "(", "sprintf", "(", "'Cannot find corresponding Doctrine objects (%d) for all Elastica results (%d). IDs: %s'", ",", "$", "objectsCnt", ",", "$", "elasticaObjectsCnt", ",", "implode", "(", "', '", ",", "$", "ids", ")", ")", ")", ";", "}", "$", "propertyAccessor", "=", "$", "this", "->", "propertyAccessor", ";", "$", "identifier", "=", "$", "this", "->", "options", "[", "'identifier'", "]", ";", "foreach", "(", "$", "objects", "as", "$", "object", ")", "{", "if", "(", "$", "object", "instanceof", "HighlightableModelInterface", ")", "{", "$", "id", "=", "$", "propertyAccessor", "->", "getValue", "(", "$", "object", ",", "$", "identifier", ")", ";", "$", "object", "->", "setElasticHighlights", "(", "$", "highlights", "[", "(", "string", ")", "$", "id", "]", ")", ";", "}", "}", "// sort objects in the order of ids", "$", "idPos", "=", "array_flip", "(", "$", "ids", ")", ";", "usort", "(", "$", "objects", ",", "function", "(", "$", "a", ",", "$", "b", ")", "use", "(", "$", "idPos", ",", "$", "identifier", ",", "$", "propertyAccessor", ")", "{", "if", "(", "$", "this", "->", "options", "[", "'hydrate'", "]", ")", "{", "return", "$", "idPos", "[", "(", "string", ")", "$", "propertyAccessor", "->", "getValue", "(", "$", "a", ",", "$", "identifier", ")", "]", ">", "$", "idPos", "[", "(", "string", ")", "$", "propertyAccessor", "->", "getValue", "(", "$", "b", ",", "$", "identifier", ")", "]", ";", "}", "return", "$", "idPos", "[", "$", "a", "[", "$", "identifier", "]", "]", ">", "$", "idPos", "[", "$", "b", "[", "$", "identifier", "]", "]", ";", "}", ")", ";", "return", "$", "objects", ";", "}"], "docstring": "Transforms an array of elastica objects into an array of\nmodel objects fetched from the doctrine repository.\n\n@param array $elasticaObjects of elastica objects\n\n@throws \\RuntimeException\n\n@return array", "docstring_tokens": ["Transforms", "an", "array", "of", "elastica", "objects", "into", "an", "array", "of", "model", "objects", "fetched", "from", "the", "doctrine", "repository", "."], "sha": "3f2707d1d606a59527f74e88808b820a170d3f42", "url": "https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/3f2707d1d606a59527f74e88808b820a170d3f42/src/Doctrine/AbstractElasticaToModelTransformer.php#L87-L128", "partition": "test"}
{"repo": "qranio-com/azure-sdk-pear-deps", "path": "src/PEAR/Frontend.php", "func_name": "PEAR_Frontend.&", "original_string": "function &singleton($type = null)\n    {\n        if ($type === null) {\n            if (!isset($GLOBALS['_PEAR_FRONTEND_SINGLETON'])) {\n                $a = false;\n                return $a;\n            }\n            return $GLOBALS['_PEAR_FRONTEND_SINGLETON'];\n        }\n\n        $a = PEAR_Frontend::setFrontendClass($type);\n        return $a;\n    }", "language": "php", "code": "function &singleton($type = null)\n    {\n        if ($type === null) {\n            if (!isset($GLOBALS['_PEAR_FRONTEND_SINGLETON'])) {\n                $a = false;\n                return $a;\n            }\n            return $GLOBALS['_PEAR_FRONTEND_SINGLETON'];\n        }\n\n        $a = PEAR_Frontend::setFrontendClass($type);\n        return $a;\n    }", "code_tokens": ["function", "&", "singleton", "(", "$", "type", "=", "null", ")", "{", "if", "(", "$", "type", "===", "null", ")", "{", "if", "(", "!", "isset", "(", "$", "GLOBALS", "[", "'_PEAR_FRONTEND_SINGLETON'", "]", ")", ")", "{", "$", "a", "=", "false", ";", "return", "$", "a", ";", "}", "return", "$", "GLOBALS", "[", "'_PEAR_FRONTEND_SINGLETON'", "]", ";", "}", "$", "a", "=", "PEAR_Frontend", "::", "setFrontendClass", "(", "$", "type", ")", ";", "return", "$", "a", ";", "}"], "docstring": "Retrieve the frontend object\n@return PEAR_Frontend_CLI|PEAR_Frontend_Web|PEAR_Frontend_Gtk\n@static", "docstring_tokens": ["Retrieve", "the", "frontend", "object"], "sha": "6609eab8623759b5e23345ded80d832278a7b680", "url": "https://github.com/qranio-com/azure-sdk-pear-deps/blob/6609eab8623759b5e23345ded80d832278a7b680/src/PEAR/Frontend.php#L53-L65", "partition": "test"}
{"repo": "shumkov/rediska", "path": "library/Rediska/Key/SortedSet.php", "func_name": "Rediska_Key_SortedSet.add", "original_string": "public function add($value, $score)\n    {\n        $result = $this->_getRediskaOn()->addToSortedSet($this->getName(), $value, $score);\n\n        if (!is_null($this->getExpire()) && $result) {\n            $this->expire($this->getExpire(), $this->isExpireTimestamp());\n        }\n\n        return $result;\n    }", "language": "php", "code": "public function add($value, $score)\n    {\n        $result = $this->_getRediskaOn()->addToSortedSet($this->getName(), $value, $score);\n\n        if (!is_null($this->getExpire()) && $result) {\n            $this->expire($this->getExpire(), $this->isExpireTimestamp());\n        }\n\n        return $result;\n    }", "code_tokens": ["public", "function", "add", "(", "$", "value", ",", "$", "score", ")", "{", "$", "result", "=", "$", "this", "->", "_getRediskaOn", "(", ")", "->", "addToSortedSet", "(", "$", "this", "->", "getName", "(", ")", ",", "$", "value", ",", "$", "score", ")", ";", "if", "(", "!", "is_null", "(", "$", "this", "->", "getExpire", "(", ")", ")", "&&", "$", "result", ")", "{", "$", "this", "->", "expire", "(", "$", "this", "->", "getExpire", "(", ")", ",", "$", "this", "->", "isExpireTimestamp", "(", ")", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Add the specified member to the Sorted set\n\n@param mixed $value Value\n@param numeric $score Score\n@return boolean", "docstring_tokens": ["Add", "the", "specified", "member", "to", "the", "Sorted", "set"], "sha": "220afbfc4095e90aa050a5dfc00ce7413147ce45", "url": "https://github.com/shumkov/rediska/blob/220afbfc4095e90aa050a5dfc00ce7413147ce45/library/Rediska/Key/SortedSet.php#L25-L34", "partition": "test"}
{"repo": "stone-lab/Dynamicfield", "path": "Utility/Fields/FieldBase.php", "func_name": "FieldBase.getModel", "original_string": "public function getModel()\n    {\n        if (is_a($this->field, 'Modules\\Dynamicfield\\Entities\\Field')) {\n            $entity = Entity::getEntity($this->entityId, $this->entityType, $this->fieldId);\n            $model = $entity->getFieldByLocale($this->locale);\n        } else {\n            $model = new RepeaterValue();\n            if (is_numeric($this->translationId)) {\n                $repeaterTranslate = RepeaterTranslation::firstOrNew(array('id' => $this->translationId));\n                $model = $repeaterTranslate->getFieldValue($this->fieldId);\n            }\n        }\n\n        return $model;\n    }", "language": "php", "code": "public function getModel()\n    {\n        if (is_a($this->field, 'Modules\\Dynamicfield\\Entities\\Field')) {\n            $entity = Entity::getEntity($this->entityId, $this->entityType, $this->fieldId);\n            $model = $entity->getFieldByLocale($this->locale);\n        } else {\n            $model = new RepeaterValue();\n            if (is_numeric($this->translationId)) {\n                $repeaterTranslate = RepeaterTranslation::firstOrNew(array('id' => $this->translationId));\n                $model = $repeaterTranslate->getFieldValue($this->fieldId);\n            }\n        }\n\n        return $model;\n    }", "code_tokens": ["public", "function", "getModel", "(", ")", "{", "if", "(", "is_a", "(", "$", "this", "->", "field", ",", "'Modules\\Dynamicfield\\Entities\\Field'", ")", ")", "{", "$", "entity", "=", "Entity", "::", "getEntity", "(", "$", "this", "->", "entityId", ",", "$", "this", "->", "entityType", ",", "$", "this", "->", "fieldId", ")", ";", "$", "model", "=", "$", "entity", "->", "getFieldByLocale", "(", "$", "this", "->", "locale", ")", ";", "}", "else", "{", "$", "model", "=", "new", "RepeaterValue", "(", ")", ";", "if", "(", "is_numeric", "(", "$", "this", "->", "translationId", ")", ")", "{", "$", "repeaterTranslate", "=", "RepeaterTranslation", "::", "firstOrNew", "(", "array", "(", "'id'", "=>", "$", "this", "->", "translationId", ")", ")", ";", "$", "model", "=", "$", "repeaterTranslate", "->", "getFieldValue", "(", "$", "this", "->", "fieldId", ")", ";", "}", "}", "return", "$", "model", ";", "}"], "docstring": "Get Entity or RepeaterTranslation model by locale.\n\n@return RepeaterValue", "docstring_tokens": ["Get", "Entity", "or", "RepeaterTranslation", "model", "by", "locale", "."], "sha": "7d25050180000b482d5efe301f54b9ce78963181", "url": "https://github.com/stone-lab/Dynamicfield/blob/7d25050180000b482d5efe301f54b9ce78963181/Utility/Fields/FieldBase.php#L67-L81", "partition": "test"}
{"repo": "EliuFlorez/google-map", "path": "src/Controls/MapTypeControl.php", "func_name": "MapTypeControl.setMapTypeIds", "original_string": "public function setMapTypeIds($mapTypeIds)\n    {\n        $this->mapTypeIds = array();\n\n        foreach ($mapTypeIds as $mapTypeId) {\n            $this->addMapTypeId($mapTypeId);\n        }\n    }", "language": "php", "code": "public function setMapTypeIds($mapTypeIds)\n    {\n        $this->mapTypeIds = array();\n\n        foreach ($mapTypeIds as $mapTypeId) {\n            $this->addMapTypeId($mapTypeId);\n        }\n    }", "code_tokens": ["public", "function", "setMapTypeIds", "(", "$", "mapTypeIds", ")", "{", "$", "this", "->", "mapTypeIds", "=", "array", "(", ")", ";", "foreach", "(", "$", "mapTypeIds", "as", "$", "mapTypeId", ")", "{", "$", "this", "->", "addMapTypeId", "(", "$", "mapTypeId", ")", ";", "}", "}"], "docstring": "Sets the map type IDs.\n\n@param array $mapTypeIds The map type IDs.", "docstring_tokens": ["Sets", "the", "map", "type", "IDs", "."], "sha": "b96e3975314a83f806ed86623f7b219d2c96ee9f", "url": "https://github.com/EliuFlorez/google-map/blob/b96e3975314a83f806ed86623f7b219d2c96ee9f/src/Controls/MapTypeControl.php#L66-L73", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Pagination/AbstractPaginator.php", "func_name": "AbstractPaginator.resolveCurrentPage", "original_string": "protected function resolveCurrentPage(): int\n    {\n        $query = $this->request->getQueryParams();\n\n        if (\\array_key_exists($this->pageName, $query)) {\n            $query = $this->secureInput($query);\n            $page  = $query[$this->pageName];\n\n            if ((int) $page >= 1 && \\filter_var($page, \\FILTER_VALIDATE_INT) !== false) {\n                return (int) $page;\n            }\n        }\n\n        return 1;\n    }", "language": "php", "code": "protected function resolveCurrentPage(): int\n    {\n        $query = $this->request->getQueryParams();\n\n        if (\\array_key_exists($this->pageName, $query)) {\n            $query = $this->secureInput($query);\n            $page  = $query[$this->pageName];\n\n            if ((int) $page >= 1 && \\filter_var($page, \\FILTER_VALIDATE_INT) !== false) {\n                return (int) $page;\n            }\n        }\n\n        return 1;\n    }", "code_tokens": ["protected", "function", "resolveCurrentPage", "(", ")", ":", "int", "{", "$", "query", "=", "$", "this", "->", "request", "->", "getQueryParams", "(", ")", ";", "if", "(", "\\", "array_key_exists", "(", "$", "this", "->", "pageName", ",", "$", "query", ")", ")", "{", "$", "query", "=", "$", "this", "->", "secureInput", "(", "$", "query", ")", ";", "$", "page", "=", "$", "query", "[", "$", "this", "->", "pageName", "]", ";", "if", "(", "(", "int", ")", "$", "page", ">=", "1", "&&", "\\", "filter_var", "(", "$", "page", ",", "\\", "FILTER_VALIDATE_INT", ")", "!==", "false", ")", "{", "return", "(", "int", ")", "$", "page", ";", "}", "}", "return", "1", ";", "}"], "docstring": "Resolve the current page or return the default value.\n\n@return int", "docstring_tokens": ["Resolve", "the", "current", "page", "or", "return", "the", "default", "value", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Pagination/AbstractPaginator.php#L480-L494", "partition": "test"}
{"repo": "FriendsOfSymfony/FOSElasticaBundle", "path": "src/Manager/RepositoryManager.php", "func_name": "RepositoryManager.getRepository", "original_string": "public function getRepository($typeName)\n    {\n        if (isset($this->repositories[$typeName])) {\n            return $this->repositories[$typeName];\n        }\n\n        if (!isset($this->types[$typeName])) {\n            throw new RuntimeException(sprintf('No search finder configured for %s', $typeName));\n        }\n\n        $repository = $this->createRepository($typeName);\n        $this->repositories[$typeName] = $repository;\n\n        return $repository;\n    }", "language": "php", "code": "public function getRepository($typeName)\n    {\n        if (isset($this->repositories[$typeName])) {\n            return $this->repositories[$typeName];\n        }\n\n        if (!isset($this->types[$typeName])) {\n            throw new RuntimeException(sprintf('No search finder configured for %s', $typeName));\n        }\n\n        $repository = $this->createRepository($typeName);\n        $this->repositories[$typeName] = $repository;\n\n        return $repository;\n    }", "code_tokens": ["public", "function", "getRepository", "(", "$", "typeName", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "repositories", "[", "$", "typeName", "]", ")", ")", "{", "return", "$", "this", "->", "repositories", "[", "$", "typeName", "]", ";", "}", "if", "(", "!", "isset", "(", "$", "this", "->", "types", "[", "$", "typeName", "]", ")", ")", "{", "throw", "new", "RuntimeException", "(", "sprintf", "(", "'No search finder configured for %s'", ",", "$", "typeName", ")", ")", ";", "}", "$", "repository", "=", "$", "this", "->", "createRepository", "(", "$", "typeName", ")", ";", "$", "this", "->", "repositories", "[", "$", "typeName", "]", "=", "$", "repository", ";", "return", "$", "repository", ";", "}"], "docstring": "Return repository for entity.\n\nReturns custom repository if one specified otherwise\nreturns a basic repository.\n\n@param string $typeName\n\n@return Repository", "docstring_tokens": ["Return", "repository", "for", "entity", "."], "sha": "3f2707d1d606a59527f74e88808b820a170d3f42", "url": "https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/3f2707d1d606a59527f74e88808b820a170d3f42/src/Manager/RepositoryManager.php#L60-L74", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Session/Session.php", "func_name": "Session.getFlashKeys", "original_string": "public function getFlashKeys(): array\n\t{\n\t\tif (! isset($_SESSION['__ci_vars']))\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\t$keys = [];\n\t\tforeach (array_keys($_SESSION['__ci_vars']) as $key)\n\t\t{\n\t\t\tis_int($_SESSION['__ci_vars'][$key]) || $keys[] = $key;\n\t\t}\n\n\t\treturn $keys;\n\t}", "language": "php", "code": "public function getFlashKeys(): array\n\t{\n\t\tif (! isset($_SESSION['__ci_vars']))\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\t$keys = [];\n\t\tforeach (array_keys($_SESSION['__ci_vars']) as $key)\n\t\t{\n\t\t\tis_int($_SESSION['__ci_vars'][$key]) || $keys[] = $key;\n\t\t}\n\n\t\treturn $keys;\n\t}", "code_tokens": ["public", "function", "getFlashKeys", "(", ")", ":", "array", "{", "if", "(", "!", "isset", "(", "$", "_SESSION", "[", "'__ci_vars'", "]", ")", ")", "{", "return", "[", "]", ";", "}", "$", "keys", "=", "[", "]", ";", "foreach", "(", "array_keys", "(", "$", "_SESSION", "[", "'__ci_vars'", "]", ")", "as", "$", "key", ")", "{", "is_int", "(", "$", "_SESSION", "[", "'__ci_vars'", "]", "[", "$", "key", "]", ")", "||", "$", "keys", "[", "]", "=", "$", "key", ";", "}", "return", "$", "keys", ";", "}"], "docstring": "Retrieve all of the keys for session data marked as flashdata.\n\n@return array\tThe property names of all flashdata", "docstring_tokens": ["Retrieve", "all", "of", "the", "keys", "for", "session", "data", "marked", "as", "flashdata", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Session/Session.php#L768-L782", "partition": "test"}
{"repo": "ClanCats/Container", "path": "src/ContainerNamespace.php", "func_name": "ContainerNamespace.importFromVendor", "original_string": "public function importFromVendor(string $vendorDir)\n    {\n        $mappingFile = $vendorDir . '/container_map.php';\n\n        if (!(file_exists($mappingFile) && is_readable($mappingFile)))\n        {\n            throw new ContainerNamespaceException(\"Could not find the the container map file at: \" . $mappingFile);\n        }\n\n        $vendorPaths = require $mappingFile;\n        $this->paths = array_merge($vendorPaths, $this->paths);\n    }", "language": "php", "code": "public function importFromVendor(string $vendorDir)\n    {\n        $mappingFile = $vendorDir . '/container_map.php';\n\n        if (!(file_exists($mappingFile) && is_readable($mappingFile)))\n        {\n            throw new ContainerNamespaceException(\"Could not find the the container map file at: \" . $mappingFile);\n        }\n\n        $vendorPaths = require $mappingFile;\n        $this->paths = array_merge($vendorPaths, $this->paths);\n    }", "code_tokens": ["public", "function", "importFromVendor", "(", "string", "$", "vendorDir", ")", "{", "$", "mappingFile", "=", "$", "vendorDir", ".", "'/container_map.php'", ";", "if", "(", "!", "(", "file_exists", "(", "$", "mappingFile", ")", "&&", "is_readable", "(", "$", "mappingFile", ")", ")", ")", "{", "throw", "new", "ContainerNamespaceException", "(", "\"Could not find the the container map file at: \"", ".", "$", "mappingFile", ")", ";", "}", "$", "vendorPaths", "=", "require", "$", "mappingFile", ";", "$", "this", "->", "paths", "=", "array_merge", "(", "$", "vendorPaths", ",", "$", "this", "->", "paths", ")", ";", "}"], "docstring": "Import paths from vendor container map\n\n@param string                $vendorDir\n@return void", "docstring_tokens": ["Import", "paths", "from", "vendor", "container", "map"], "sha": "95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12", "url": "https://github.com/ClanCats/Container/blob/95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12/src/ContainerNamespace.php#L74-L85", "partition": "test"}
{"repo": "delboy1978uk/session", "path": "src/SessionManager.php", "func_name": "SessionManager.regenerateSession", "original_string": "private static function  regenerateSession()\n    {\n        // If this session is obsolete it means there already is a new id\n        if (isset($_SESSION['OBSOLETE']) && $_SESSION['OBSOLETE'] == true) {\n            return;\n        }\n\n        // Set current session to expire in 10 seconds\n        $_SESSION['OBSOLETE'] = true;\n        $_SESSION['EXPIRES'] = time() + 10;\n\n        // Create new session without destroying the old one\n        session_regenerate_id(false);\n\n        // Grab current session ID and close both sessions to allow other scripts to use them\n        $newSession = session_id();\n        session_write_close();\n\n        // Set session ID to the new one, and start it back up again\n        session_id($newSession);\n        session_start();\n\n        // Now we unset the obsolete and expiration values for the session we want to keep\n        unset($_SESSION['OBSOLETE']);\n        unset($_SESSION['EXPIRES']);\n    }", "language": "php", "code": "private static function  regenerateSession()\n    {\n        // If this session is obsolete it means there already is a new id\n        if (isset($_SESSION['OBSOLETE']) && $_SESSION['OBSOLETE'] == true) {\n            return;\n        }\n\n        // Set current session to expire in 10 seconds\n        $_SESSION['OBSOLETE'] = true;\n        $_SESSION['EXPIRES'] = time() + 10;\n\n        // Create new session without destroying the old one\n        session_regenerate_id(false);\n\n        // Grab current session ID and close both sessions to allow other scripts to use them\n        $newSession = session_id();\n        session_write_close();\n\n        // Set session ID to the new one, and start it back up again\n        session_id($newSession);\n        session_start();\n\n        // Now we unset the obsolete and expiration values for the session we want to keep\n        unset($_SESSION['OBSOLETE']);\n        unset($_SESSION['EXPIRES']);\n    }", "code_tokens": ["private", "static", "function", "regenerateSession", "(", ")", "{", "// If this session is obsolete it means there already is a new id", "if", "(", "isset", "(", "$", "_SESSION", "[", "'OBSOLETE'", "]", ")", "&&", "$", "_SESSION", "[", "'OBSOLETE'", "]", "==", "true", ")", "{", "return", ";", "}", "// Set current session to expire in 10 seconds", "$", "_SESSION", "[", "'OBSOLETE'", "]", "=", "true", ";", "$", "_SESSION", "[", "'EXPIRES'", "]", "=", "time", "(", ")", "+", "10", ";", "// Create new session without destroying the old one", "session_regenerate_id", "(", "false", ")", ";", "// Grab current session ID and close both sessions to allow other scripts to use them", "$", "newSession", "=", "session_id", "(", ")", ";", "session_write_close", "(", ")", ";", "// Set session ID to the new one, and start it back up again", "session_id", "(", "$", "newSession", ")", ";", "session_start", "(", ")", ";", "// Now we unset the obsolete and expiration values for the session we want to keep", "unset", "(", "$", "_SESSION", "[", "'OBSOLETE'", "]", ")", ";", "unset", "(", "$", "_SESSION", "[", "'EXPIRES'", "]", ")", ";", "}"], "docstring": "Creates a fresh session Id to make it harder to hack\nIf the site is very slow in parts increase the expiry time\n10 seconds is a good default which allows ajax calls to work\nwithout losing the session", "docstring_tokens": ["Creates", "a", "fresh", "session", "Id", "to", "make", "it", "harder", "to", "hack", "If", "the", "site", "is", "very", "slow", "in", "parts", "increase", "the", "expiry", "time", "10", "seconds", "is", "a", "good", "default", "which", "allows", "ajax", "calls", "to", "work", "without", "losing", "the", "session"], "sha": "fe33ea2ba6892ebac8d15c7af71383a54a129f38", "url": "https://github.com/delboy1978uk/session/blob/fe33ea2ba6892ebac8d15c7af71383a54a129f38/src/SessionManager.php#L86-L111", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Events/Annotations/NativeListenerAnnotations.php", "func_name": "NativeListenerAnnotations.getListenerFromAnnotation", "original_string": "protected function getListenerFromAnnotation(Listener $listener): EventListener\n    {\n        $eventListener = new EventListener();\n\n        $eventListener\n            ->setEvent($listener->getEvent())\n            ->setId($listener->getId())\n            ->setName($listener->getName())\n            ->setClass($listener->getClass())\n            ->setProperty($listener->getProperty())\n            ->setMethod($listener->getMethod())\n            ->setStatic($listener->isStatic())\n            ->setFunction($listener->getFunction())\n            ->setMatches($listener->getMatches())\n            ->setDependencies($listener->getDependencies())\n            ->setArguments($listener->getArguments());\n\n        return $eventListener;\n    }", "language": "php", "code": "protected function getListenerFromAnnotation(Listener $listener): EventListener\n    {\n        $eventListener = new EventListener();\n\n        $eventListener\n            ->setEvent($listener->getEvent())\n            ->setId($listener->getId())\n            ->setName($listener->getName())\n            ->setClass($listener->getClass())\n            ->setProperty($listener->getProperty())\n            ->setMethod($listener->getMethod())\n            ->setStatic($listener->isStatic())\n            ->setFunction($listener->getFunction())\n            ->setMatches($listener->getMatches())\n            ->setDependencies($listener->getDependencies())\n            ->setArguments($listener->getArguments());\n\n        return $eventListener;\n    }", "code_tokens": ["protected", "function", "getListenerFromAnnotation", "(", "Listener", "$", "listener", ")", ":", "EventListener", "{", "$", "eventListener", "=", "new", "EventListener", "(", ")", ";", "$", "eventListener", "->", "setEvent", "(", "$", "listener", "->", "getEvent", "(", ")", ")", "->", "setId", "(", "$", "listener", "->", "getId", "(", ")", ")", "->", "setName", "(", "$", "listener", "->", "getName", "(", ")", ")", "->", "setClass", "(", "$", "listener", "->", "getClass", "(", ")", ")", "->", "setProperty", "(", "$", "listener", "->", "getProperty", "(", ")", ")", "->", "setMethod", "(", "$", "listener", "->", "getMethod", "(", ")", ")", "->", "setStatic", "(", "$", "listener", "->", "isStatic", "(", ")", ")", "->", "setFunction", "(", "$", "listener", "->", "getFunction", "(", ")", ")", "->", "setMatches", "(", "$", "listener", "->", "getMatches", "(", ")", ")", "->", "setDependencies", "(", "$", "listener", "->", "getDependencies", "(", ")", ")", "->", "setArguments", "(", "$", "listener", "->", "getArguments", "(", ")", ")", ";", "return", "$", "eventListener", ";", "}"], "docstring": "Get a listener from a listener annotation.\n\n@param Listener $listener The listener annotation\n\n@return \\Valkyrja\\Events\\Listener", "docstring_tokens": ["Get", "a", "listener", "from", "a", "listener", "annotation", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Events/Annotations/NativeListenerAnnotations.php#L95-L113", "partition": "test"}
{"repo": "AliceWonderMiscreations/FileWrapper", "path": "lib/FileWrapper.php", "func_name": "FileWrapper.serveText", "original_string": "protected function serveText(): bool\n    {\n        // move this to a class property in future FIXME\n        $vary = array();\n        if (is_null($this->request)) {\n            $this->sendInternalError();\n            return false;\n        }\n        if (is_null($this->etag)) {\n            $this->sendInternalError();\n            return false;\n        }\n        if ($this->attachment) {\n            header('Content-Description: File Transfer');\n            header('Content-Disposition: attachment; filename=\"' . $this->request . '\"');\n        }\n        if ($this->maxage == 0) {\n            header('Cache-Control: must-revalidate');\n        } else {\n            header('Cache-Control: max-age=' . $this->maxage);\n        }\n        header('Last-Modified: ' . $this->lastmod);\n        header('ETag: \"' . $this->etag . '\"');\n        if (ini_get('zlib.output_compression')) {\n            $vary[] = 'Accept-Encoding';\n        }\n        if (! is_null($this->allowOrigin)) {\n            if ($this->allowOrigin !== '*') {\n                $vary[] = 'Origin';\n            }\n        }\n        if (count($vary) > 0) {\n            $string = 'Vary: ' . implode(',', $vary);\n            header($string);\n        }\n        if (! is_null($this->allowOrigin)) {\n            header('access-control-allow-origin: ' . $this->allowOrigin);\n        }\n        return $this->getTextContent();\n    }", "language": "php", "code": "protected function serveText(): bool\n    {\n        // move this to a class property in future FIXME\n        $vary = array();\n        if (is_null($this->request)) {\n            $this->sendInternalError();\n            return false;\n        }\n        if (is_null($this->etag)) {\n            $this->sendInternalError();\n            return false;\n        }\n        if ($this->attachment) {\n            header('Content-Description: File Transfer');\n            header('Content-Disposition: attachment; filename=\"' . $this->request . '\"');\n        }\n        if ($this->maxage == 0) {\n            header('Cache-Control: must-revalidate');\n        } else {\n            header('Cache-Control: max-age=' . $this->maxage);\n        }\n        header('Last-Modified: ' . $this->lastmod);\n        header('ETag: \"' . $this->etag . '\"');\n        if (ini_get('zlib.output_compression')) {\n            $vary[] = 'Accept-Encoding';\n        }\n        if (! is_null($this->allowOrigin)) {\n            if ($this->allowOrigin !== '*') {\n                $vary[] = 'Origin';\n            }\n        }\n        if (count($vary) > 0) {\n            $string = 'Vary: ' . implode(',', $vary);\n            header($string);\n        }\n        if (! is_null($this->allowOrigin)) {\n            header('access-control-allow-origin: ' . $this->allowOrigin);\n        }\n        return $this->getTextContent();\n    }", "code_tokens": ["protected", "function", "serveText", "(", ")", ":", "bool", "{", "// move this to a class property in future FIXME", "$", "vary", "=", "array", "(", ")", ";", "if", "(", "is_null", "(", "$", "this", "->", "request", ")", ")", "{", "$", "this", "->", "sendInternalError", "(", ")", ";", "return", "false", ";", "}", "if", "(", "is_null", "(", "$", "this", "->", "etag", ")", ")", "{", "$", "this", "->", "sendInternalError", "(", ")", ";", "return", "false", ";", "}", "if", "(", "$", "this", "->", "attachment", ")", "{", "header", "(", "'Content-Description: File Transfer'", ")", ";", "header", "(", "'Content-Disposition: attachment; filename=\"'", ".", "$", "this", "->", "request", ".", "'\"'", ")", ";", "}", "if", "(", "$", "this", "->", "maxage", "==", "0", ")", "{", "header", "(", "'Cache-Control: must-revalidate'", ")", ";", "}", "else", "{", "header", "(", "'Cache-Control: max-age='", ".", "$", "this", "->", "maxage", ")", ";", "}", "header", "(", "'Last-Modified: '", ".", "$", "this", "->", "lastmod", ")", ";", "header", "(", "'ETag: \"'", ".", "$", "this", "->", "etag", ".", "'\"'", ")", ";", "if", "(", "ini_get", "(", "'zlib.output_compression'", ")", ")", "{", "$", "vary", "[", "]", "=", "'Accept-Encoding'", ";", "}", "if", "(", "!", "is_null", "(", "$", "this", "->", "allowOrigin", ")", ")", "{", "if", "(", "$", "this", "->", "allowOrigin", "!==", "'*'", ")", "{", "$", "vary", "[", "]", "=", "'Origin'", ";", "}", "}", "if", "(", "count", "(", "$", "vary", ")", ">", "0", ")", "{", "$", "string", "=", "'Vary: '", ".", "implode", "(", "','", ",", "$", "vary", ")", ";", "header", "(", "$", "string", ")", ";", "}", "if", "(", "!", "is_null", "(", "$", "this", "->", "allowOrigin", ")", ")", "{", "header", "(", "'access-control-allow-origin: '", ".", "$", "this", "->", "allowOrigin", ")", ";", "}", "return", "$", "this", "->", "getTextContent", "(", ")", ";", "}"], "docstring": "Serves text content.\n\n@return bool True on success, False on failure.", "docstring_tokens": ["Serves", "text", "content", "."], "sha": "3f9fb52d31764ed0ebbc5d2e850fbef9ef205fd5", "url": "https://github.com/AliceWonderMiscreations/FileWrapper/blob/3f9fb52d31764ed0ebbc5d2e850fbef9ef205fd5/lib/FileWrapper.php#L1085-L1124", "partition": "test"}
{"repo": "slickframework/http", "path": "src/Message/Server/Request.php", "func_name": "Request.loadHeaders", "original_string": "private function loadHeaders()\n    {\n        foreach ($_SERVER as $key => $value) {\n            $subset = substr($key, 0, 5);\n            if ($subset <> 'HTTP_' && $subset <> 'CONTE') {\n                continue;\n            }\n            $header = str_replace(\n                ' ',\n                '-',\n                ucwords(\n                    str_replace(['http_', '_'], ['', ' '], strtolower($key))\n                )\n            );\n            $this->headers[$this->headerKey($header)] = [$value];\n        }\n    }", "language": "php", "code": "private function loadHeaders()\n    {\n        foreach ($_SERVER as $key => $value) {\n            $subset = substr($key, 0, 5);\n            if ($subset <> 'HTTP_' && $subset <> 'CONTE') {\n                continue;\n            }\n            $header = str_replace(\n                ' ',\n                '-',\n                ucwords(\n                    str_replace(['http_', '_'], ['', ' '], strtolower($key))\n                )\n            );\n            $this->headers[$this->headerKey($header)] = [$value];\n        }\n    }", "code_tokens": ["private", "function", "loadHeaders", "(", ")", "{", "foreach", "(", "$", "_SERVER", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "subset", "=", "substr", "(", "$", "key", ",", "0", ",", "5", ")", ";", "if", "(", "$", "subset", "<>", "'HTTP_'", "&&", "$", "subset", "<>", "'CONTE'", ")", "{", "continue", ";", "}", "$", "header", "=", "str_replace", "(", "' '", ",", "'-'", ",", "ucwords", "(", "str_replace", "(", "[", "'http_'", ",", "'_'", "]", ",", "[", "''", ",", "' '", "]", ",", "strtolower", "(", "$", "key", ")", ")", ")", ")", ";", "$", "this", "->", "headers", "[", "$", "this", "->", "headerKey", "(", "$", "header", ")", "]", "=", "[", "$", "value", "]", ";", "}", "}"], "docstring": "Loads the headers form request", "docstring_tokens": ["Loads", "the", "headers", "form", "request"], "sha": "9da14b618e0f75d3d565e0ce928a35d992755e75", "url": "https://github.com/slickframework/http/blob/9da14b618e0f75d3d565e0ce928a35d992755e75/src/Message/Server/Request.php#L244-L260", "partition": "test"}
{"repo": "mamasu/mama-framework", "path": "src/Language/LanguageModel.php", "func_name": "LanguageModel.getUserLanguage", "original_string": "public function getUserLanguage($userId) {\n        $sql = 'SELECT language.id_language,\n                       language.name,\n                       language.code,\n                       language.default\n                FROM user\n                INNER JOIN language ON language.id_language = user.id_language\n                WHERE user.id_user=\\''.$userId.'\\'';\n\n        $language = $this->select($sql);\n        if (count($language)>0) {\n            return $language[0];\n        } else {\n            return false;\n        }\n    }", "language": "php", "code": "public function getUserLanguage($userId) {\n        $sql = 'SELECT language.id_language,\n                       language.name,\n                       language.code,\n                       language.default\n                FROM user\n                INNER JOIN language ON language.id_language = user.id_language\n                WHERE user.id_user=\\''.$userId.'\\'';\n\n        $language = $this->select($sql);\n        if (count($language)>0) {\n            return $language[0];\n        } else {\n            return false;\n        }\n    }", "code_tokens": ["public", "function", "getUserLanguage", "(", "$", "userId", ")", "{", "$", "sql", "=", "'SELECT language.id_language,\n                       language.name,\n                       language.code,\n                       language.default\n                FROM user\n                INNER JOIN language ON language.id_language = user.id_language\n                WHERE user.id_user=\\''", ".", "$", "userId", ".", "'\\''", ";", "$", "language", "=", "$", "this", "->", "select", "(", "$", "sql", ")", ";", "if", "(", "count", "(", "$", "language", ")", ">", "0", ")", "{", "return", "$", "language", "[", "0", "]", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "docstring": "Return the user language properties.\n\n@param int $userId\n@return boolean", "docstring_tokens": ["Return", "the", "user", "language", "properties", "."], "sha": "105a4980b56f1fdaad095a32189ee47d39203a7a", "url": "https://github.com/mamasu/mama-framework/blob/105a4980b56f1fdaad095a32189ee47d39203a7a/src/Language/LanguageModel.php#L27-L42", "partition": "test"}
{"repo": "estebanmatias92/RestGalleries", "path": "src/RestGalleries/Http/Guzzle/GuzzleResponse.php", "func_name": "GuzzleResponse.processResponseData", "original_string": "protected function processResponseData($raw)\n    {\n        $this->body = $raw->getBody()->__toString();\n        $rawHeaders = $raw->getHeaders();\n\n        foreach ($rawHeaders as $key => $value) {\n            $this->headers[$key] = implode(', ', $value);\n        }\n\n        $this->statusCode = $raw->getStatusCode();\n\n    }", "language": "php", "code": "protected function processResponseData($raw)\n    {\n        $this->body = $raw->getBody()->__toString();\n        $rawHeaders = $raw->getHeaders();\n\n        foreach ($rawHeaders as $key => $value) {\n            $this->headers[$key] = implode(', ', $value);\n        }\n\n        $this->statusCode = $raw->getStatusCode();\n\n    }", "code_tokens": ["protected", "function", "processResponseData", "(", "$", "raw", ")", "{", "$", "this", "->", "body", "=", "$", "raw", "->", "getBody", "(", ")", "->", "__toString", "(", ")", ";", "$", "rawHeaders", "=", "$", "raw", "->", "getHeaders", "(", ")", ";", "foreach", "(", "$", "rawHeaders", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "this", "->", "headers", "[", "$", "key", "]", "=", "implode", "(", "', '", ",", "$", "value", ")", ";", "}", "$", "this", "->", "statusCode", "=", "$", "raw", "->", "getStatusCode", "(", ")", ";", "}"], "docstring": "Receives the Http client response, it is processed and stores it into the object properties.\n\n@param  \\Guzzle\\Http\\Client $raw\n@return void", "docstring_tokens": ["Receives", "the", "Http", "client", "response", "it", "is", "processed", "and", "stores", "it", "into", "the", "object", "properties", "."], "sha": "09bbaf351e1ec330f075aa96b7c2aed407534a57", "url": "https://github.com/estebanmatias92/RestGalleries/blob/09bbaf351e1ec330f075aa96b7c2aed407534a57/src/RestGalleries/Http/Guzzle/GuzzleResponse.php#L16-L27", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/Core/CoreHelper.php", "func_name": "CoreHelper.GetSerializer", "original_string": "public static function GetSerializer($serviceContext, $isRequest)\n    {\n        $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer\");\n\n        $serializer = null;\n        if ($isRequest) {\n            switch ($serviceContext->IppConfiguration->Message->Request->SerializationFormat) {\n                case SerializationFormat::Xml:\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Request): Xml\");\n                    $serializer = new XmlObjectSerializer();\n                    break;\n                case SerializationFormat::Json:\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Request): JSON\");\n                    $serializer = new JsonObjectSerializer();\n                    break;\n                case SerializationFormat::Custom:\n                    // TODO: check whtether this is possible\n                    // $this->serializer = $serviceContext->IppConfiguration->Message->Request->CustomSerializer;\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Request): Custom\");\n                    break;\n            }\n        } else {\n            switch ($serviceContext->IppConfiguration->Message->Response->SerializationFormat) {\n                case SerializationFormat::Xml:\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Response): XML\");\n                    $serializer = new XmlObjectSerializer();\n                    break;\n                case SerializationFormat::Json:\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Response): JSON\");\n                    $serializer = new JsonObjectSerializer();\n                    break;\n                case SerializationFormat::Custom:\n                    // TODO: check whtether this is possible\n                    // $this->serializer = $serviceContext->IppConfiguration->Message->Response->CustomSerializer;\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Response): Custom\");\n                    break;\n            }\n        }\n\n        return $serializer;\n    }", "language": "php", "code": "public static function GetSerializer($serviceContext, $isRequest)\n    {\n        $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer\");\n\n        $serializer = null;\n        if ($isRequest) {\n            switch ($serviceContext->IppConfiguration->Message->Request->SerializationFormat) {\n                case SerializationFormat::Xml:\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Request): Xml\");\n                    $serializer = new XmlObjectSerializer();\n                    break;\n                case SerializationFormat::Json:\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Request): JSON\");\n                    $serializer = new JsonObjectSerializer();\n                    break;\n                case SerializationFormat::Custom:\n                    // TODO: check whtether this is possible\n                    // $this->serializer = $serviceContext->IppConfiguration->Message->Request->CustomSerializer;\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Request): Custom\");\n                    break;\n            }\n        } else {\n            switch ($serviceContext->IppConfiguration->Message->Response->SerializationFormat) {\n                case SerializationFormat::Xml:\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Response): XML\");\n                    $serializer = new XmlObjectSerializer();\n                    break;\n                case SerializationFormat::Json:\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Response): JSON\");\n                    $serializer = new JsonObjectSerializer();\n                    break;\n                case SerializationFormat::Custom:\n                    // TODO: check whtether this is possible\n                    // $this->serializer = $serviceContext->IppConfiguration->Message->Response->CustomSerializer;\n                              $serviceContext->IppConfiguration->Logger->RequestLog->Log(TraceLevel::Info, \"GetSerializer(Response): Custom\");\n                    break;\n            }\n        }\n\n        return $serializer;\n    }", "code_tokens": ["public", "static", "function", "GetSerializer", "(", "$", "serviceContext", ",", "$", "isRequest", ")", "{", "$", "serviceContext", "->", "IppConfiguration", "->", "Logger", "->", "RequestLog", "->", "Log", "(", "TraceLevel", "::", "Info", ",", "\"GetSerializer\"", ")", ";", "$", "serializer", "=", "null", ";", "if", "(", "$", "isRequest", ")", "{", "switch", "(", "$", "serviceContext", "->", "IppConfiguration", "->", "Message", "->", "Request", "->", "SerializationFormat", ")", "{", "case", "SerializationFormat", "::", "Xml", ":", "$", "serviceContext", "->", "IppConfiguration", "->", "Logger", "->", "RequestLog", "->", "Log", "(", "TraceLevel", "::", "Info", ",", "\"GetSerializer(Request): Xml\"", ")", ";", "$", "serializer", "=", "new", "XmlObjectSerializer", "(", ")", ";", "break", ";", "case", "SerializationFormat", "::", "Json", ":", "$", "serviceContext", "->", "IppConfiguration", "->", "Logger", "->", "RequestLog", "->", "Log", "(", "TraceLevel", "::", "Info", ",", "\"GetSerializer(Request): JSON\"", ")", ";", "$", "serializer", "=", "new", "JsonObjectSerializer", "(", ")", ";", "break", ";", "case", "SerializationFormat", "::", "Custom", ":", "// TODO: check whtether this is possible", "// $this->serializer = $serviceContext->IppConfiguration->Message->Request->CustomSerializer;", "$", "serviceContext", "->", "IppConfiguration", "->", "Logger", "->", "RequestLog", "->", "Log", "(", "TraceLevel", "::", "Info", ",", "\"GetSerializer(Request): Custom\"", ")", ";", "break", ";", "}", "}", "else", "{", "switch", "(", "$", "serviceContext", "->", "IppConfiguration", "->", "Message", "->", "Response", "->", "SerializationFormat", ")", "{", "case", "SerializationFormat", "::", "Xml", ":", "$", "serviceContext", "->", "IppConfiguration", "->", "Logger", "->", "RequestLog", "->", "Log", "(", "TraceLevel", "::", "Info", ",", "\"GetSerializer(Response): XML\"", ")", ";", "$", "serializer", "=", "new", "XmlObjectSerializer", "(", ")", ";", "break", ";", "case", "SerializationFormat", "::", "Json", ":", "$", "serviceContext", "->", "IppConfiguration", "->", "Logger", "->", "RequestLog", "->", "Log", "(", "TraceLevel", "::", "Info", ",", "\"GetSerializer(Response): JSON\"", ")", ";", "$", "serializer", "=", "new", "JsonObjectSerializer", "(", ")", ";", "break", ";", "case", "SerializationFormat", "::", "Custom", ":", "// TODO: check whtether this is possible", "// $this->serializer = $serviceContext->IppConfiguration->Message->Response->CustomSerializer;", "$", "serviceContext", "->", "IppConfiguration", "->", "Logger", "->", "RequestLog", "->", "Log", "(", "TraceLevel", "::", "Info", ",", "\"GetSerializer(Response): Custom\"", ")", ";", "break", ";", "}", "}", "return", "$", "serializer", ";", "}"], "docstring": "Gets the serializer mechanism using the service context and the depending on the request and response.\n@param ServiceContext serviceContext The service context object.\n@param bool isRequest Specifies whether to return serializer mechanism for request or response.\n@return IEntitySerializer The Serializer mechanism.", "docstring_tokens": ["Gets", "the", "serializer", "mechanism", "using", "the", "service", "context", "and", "the", "depending", "on", "the", "request", "and", "response", "."], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/Core/CoreHelper.php#L28-L68", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Helpers/Request/Inflector.php", "func_name": "Inflector.slug", "original_string": "public function slug($string, $replacement = '-', $lowercase = true)\n    {\n        return $this->proxy(__FUNCTION__, [$string, $replacement, $lowercase]);\n    }", "language": "php", "code": "public function slug($string, $replacement = '-', $lowercase = true)\n    {\n        return $this->proxy(__FUNCTION__, [$string, $replacement, $lowercase]);\n    }", "code_tokens": ["public", "function", "slug", "(", "$", "string", ",", "$", "replacement", "=", "'-'", ",", "$", "lowercase", "=", "true", ")", "{", "return", "$", "this", "->", "proxy", "(", "__FUNCTION__", ",", "[", "$", "string", ",", "$", "replacement", ",", "$", "lowercase", "]", ")", ";", "}"], "docstring": "Returns a string with all spaces converted to given replacement,\nnon word characters removed and the rest of characters transliterated.\n\nIf intl extension isn't available uses fallback that converts latin characters only\nand removes the rest. You may customize characters map via $transliteration property\nof the helper.\n\n@param string $string An arbitrary string to convert\n@param string $replacement The replacement to use for spaces\n@param bool $lowercase whether to return the string in lowercase or not. Defaults to `true`.\n@return string The converted string.\n@see \\Reaction\\Helpers\\Inflector::slug()", "docstring_tokens": ["Returns", "a", "string", "with", "all", "spaces", "converted", "to", "given", "replacement", "non", "word", "characters", "removed", "and", "the", "rest", "of", "characters", "transliterated", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Helpers/Request/Inflector.php#L173-L176", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Http/Presenters/WorkOrder/WorkOrderPriorityPresenter.php", "func_name": "WorkOrderPriorityPresenter.form", "original_string": "public function form(Priority $priority)\n    {\n        return $this->form->of('work-orders.priorities', function (FormGrid $form) use ($priority) {\n            if ($priority->exists) {\n                $url = route('maintenance.work-orders.priorities.update', [$priority->getKey()]);\n                $method = 'PATCH';\n                $form->submit = 'Save';\n            } else {\n                $url = route('maintenance.work-orders.priorities.store');\n                $method = 'POST';\n                $form->submit = 'Create';\n            }\n\n            $colors = config('maintenance.colors', []);\n\n            $form->attributes(compact('method', 'url'));\n\n            $form->with($priority);\n\n            $form->fieldset(function (Fieldset $fieldset) use ($colors) {\n                $fieldset\n                    ->control('input:text', 'name')\n                    ->attributes([\n                        'placeholder' => 'ex. High / Low',\n                    ]);\n\n                $fieldset\n                    ->control('select', 'color')\n                    ->options($colors)\n                    ->value(function (Priority $priority) {\n                        return $priority->color;\n                    })\n                    ->attributes([\n                        'class' => 'select2-color',\n                    ]);\n            });\n        });\n    }", "language": "php", "code": "public function form(Priority $priority)\n    {\n        return $this->form->of('work-orders.priorities', function (FormGrid $form) use ($priority) {\n            if ($priority->exists) {\n                $url = route('maintenance.work-orders.priorities.update', [$priority->getKey()]);\n                $method = 'PATCH';\n                $form->submit = 'Save';\n            } else {\n                $url = route('maintenance.work-orders.priorities.store');\n                $method = 'POST';\n                $form->submit = 'Create';\n            }\n\n            $colors = config('maintenance.colors', []);\n\n            $form->attributes(compact('method', 'url'));\n\n            $form->with($priority);\n\n            $form->fieldset(function (Fieldset $fieldset) use ($colors) {\n                $fieldset\n                    ->control('input:text', 'name')\n                    ->attributes([\n                        'placeholder' => 'ex. High / Low',\n                    ]);\n\n                $fieldset\n                    ->control('select', 'color')\n                    ->options($colors)\n                    ->value(function (Priority $priority) {\n                        return $priority->color;\n                    })\n                    ->attributes([\n                        'class' => 'select2-color',\n                    ]);\n            });\n        });\n    }", "code_tokens": ["public", "function", "form", "(", "Priority", "$", "priority", ")", "{", "return", "$", "this", "->", "form", "->", "of", "(", "'work-orders.priorities'", ",", "function", "(", "FormGrid", "$", "form", ")", "use", "(", "$", "priority", ")", "{", "if", "(", "$", "priority", "->", "exists", ")", "{", "$", "url", "=", "route", "(", "'maintenance.work-orders.priorities.update'", ",", "[", "$", "priority", "->", "getKey", "(", ")", "]", ")", ";", "$", "method", "=", "'PATCH'", ";", "$", "form", "->", "submit", "=", "'Save'", ";", "}", "else", "{", "$", "url", "=", "route", "(", "'maintenance.work-orders.priorities.store'", ")", ";", "$", "method", "=", "'POST'", ";", "$", "form", "->", "submit", "=", "'Create'", ";", "}", "$", "colors", "=", "config", "(", "'maintenance.colors'", ",", "[", "]", ")", ";", "$", "form", "->", "attributes", "(", "compact", "(", "'method'", ",", "'url'", ")", ")", ";", "$", "form", "->", "with", "(", "$", "priority", ")", ";", "$", "form", "->", "fieldset", "(", "function", "(", "Fieldset", "$", "fieldset", ")", "use", "(", "$", "colors", ")", "{", "$", "fieldset", "->", "control", "(", "'input:text'", ",", "'name'", ")", "->", "attributes", "(", "[", "'placeholder'", "=>", "'ex. High / Low'", ",", "]", ")", ";", "$", "fieldset", "->", "control", "(", "'select'", ",", "'color'", ")", "->", "options", "(", "$", "colors", ")", "->", "value", "(", "function", "(", "Priority", "$", "priority", ")", "{", "return", "$", "priority", "->", "color", ";", "}", ")", "->", "attributes", "(", "[", "'class'", "=>", "'select2-color'", ",", "]", ")", ";", "}", ")", ";", "}", ")", ";", "}"], "docstring": "Returns a new form for priorities.\n\n@param Priority $priority\n\n@return \\Orchestra\\Contracts\\Html\\Builder", "docstring_tokens": ["Returns", "a", "new", "form", "for", "priorities", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Http/Presenters/WorkOrder/WorkOrderPriorityPresenter.php#L55-L92", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Cookie/ResponseCookies.php", "func_name": "ResponseCookies.renderIntoSetCookieHeader", "original_string": "public function renderIntoSetCookieHeader(ResponseInterface $response): ResponseInterface\n    {\n        $response = $response->withoutHeader('set-cookie');\n\n        foreach ($this->cookies as $cookies) {\n            $response = $response->withAddedHeader('set-cookie', (string) $cookies);\n        }\n\n        return $response;\n    }", "language": "php", "code": "public function renderIntoSetCookieHeader(ResponseInterface $response): ResponseInterface\n    {\n        $response = $response->withoutHeader('set-cookie');\n\n        foreach ($this->cookies as $cookies) {\n            $response = $response->withAddedHeader('set-cookie', (string) $cookies);\n        }\n\n        return $response;\n    }", "code_tokens": ["public", "function", "renderIntoSetCookieHeader", "(", "ResponseInterface", "$", "response", ")", ":", "ResponseInterface", "{", "$", "response", "=", "$", "response", "->", "withoutHeader", "(", "'set-cookie'", ")", ";", "foreach", "(", "$", "this", "->", "cookies", "as", "$", "cookies", ")", "{", "$", "response", "=", "$", "response", "->", "withAddedHeader", "(", "'set-cookie'", ",", "(", "string", ")", "$", "cookies", ")", ";", "}", "return", "$", "response", ";", "}"], "docstring": "Render Cookies into a response.\n\n@param \\Psr\\Http\\Message\\ResponseInterface $response\n\n@return \\Psr\\Http\\Message\\ResponseInterface", "docstring_tokens": ["Render", "Cookies", "into", "a", "response", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Cookie/ResponseCookies.php#L57-L66", "partition": "test"}
{"repo": "digit-soft/re-action", "path": "src/Db/Query.php", "func_name": "Query.count", "original_string": "public function count($q = '*', $db = null)\n    {\n        if ($this->emulateExecution) {\n            return new LazyPromise(function() { return resolve(0); });\n        }\n\n        return $this->queryScalar(\"COUNT($q)\", $db);\n    }", "language": "php", "code": "public function count($q = '*', $db = null)\n    {\n        if ($this->emulateExecution) {\n            return new LazyPromise(function() { return resolve(0); });\n        }\n\n        return $this->queryScalar(\"COUNT($q)\", $db);\n    }", "code_tokens": ["public", "function", "count", "(", "$", "q", "=", "'*'", ",", "$", "db", "=", "null", ")", "{", "if", "(", "$", "this", "->", "emulateExecution", ")", "{", "return", "new", "LazyPromise", "(", "function", "(", ")", "{", "return", "resolve", "(", "0", ")", ";", "}", ")", ";", "}", "return", "$", "this", "->", "queryScalar", "(", "\"COUNT($q)\"", ",", "$", "db", ")", ";", "}"], "docstring": "Returns the number of records.\n@param string $q the COUNT expression. Defaults to '*'.\nMake sure you properly [quote](guide:db-dao#quoting-table-and-column-names) column names in the expression.\n@param DatabaseInterface|DbConnectionGetterInterface $db the database connection used to generate the SQL statement.\nIf this parameter is not given (or null), the `db` application component will be used.\n@return LazyPromiseInterface with int|string number of records. The result may be a string depending on the\nunderlying database engine and to support integer values higher than a 32bit PHP integer can handle.", "docstring_tokens": ["Returns", "the", "number", "of", "records", "."], "sha": "13b79b5778b8bb841af8be458552b4c52f451a29", "url": "https://github.com/digit-soft/re-action/blob/13b79b5778b8bb841af8be458552b4c52f451a29/src/Db/Query.php#L282-L289", "partition": "test"}
{"repo": "Gelembjuk/templating", "path": "src/Gelembjuk/Templating/TwigTemplating.php", "func_name": "TwigTemplating.fetchFromString", "original_string": "protected function fetchFromString() {\n\t\t// loader is created each time as value of index can be changed\n\t\t// maybe there is way to do this without creating new loader each time\n\t\t$loader = new \\Twig_Loader_Array(array('index' => $this->template_data));\n\t\t$this->setLoader($loader);\n\t\t\n\t\treturn $this->render('index', $this->template_vars);\n\t}", "language": "php", "code": "protected function fetchFromString() {\n\t\t// loader is created each time as value of index can be changed\n\t\t// maybe there is way to do this without creating new loader each time\n\t\t$loader = new \\Twig_Loader_Array(array('index' => $this->template_data));\n\t\t$this->setLoader($loader);\n\t\t\n\t\treturn $this->render('index', $this->template_vars);\n\t}", "code_tokens": ["protected", "function", "fetchFromString", "(", ")", "{", "// loader is created each time as value of index can be changed", "// maybe there is way to do this without creating new loader each time", "$", "loader", "=", "new", "\\", "Twig_Loader_Array", "(", "array", "(", "'index'", "=>", "$", "this", "->", "template_data", ")", ")", ";", "$", "this", "->", "setLoader", "(", "$", "loader", ")", ";", "return", "$", "this", "->", "render", "(", "'index'", ",", "$", "this", "->", "template_vars", ")", ";", "}"], "docstring": "Fetch prepared string template and return complete html document\n\n@return string HTML document with all data included", "docstring_tokens": ["Fetch", "prepared", "string", "template", "and", "return", "complete", "html", "document"], "sha": "5efa66410f02325b5e41cd962f35a07813e859df", "url": "https://github.com/Gelembjuk/templating/blob/5efa66410f02325b5e41cd962f35a07813e859df/src/Gelembjuk/Templating/TwigTemplating.php#L136-L143", "partition": "test"}
{"repo": "praxigento/mobi_mod_accounting", "path": "Service/Account/Balance/Reset.php", "func_name": "Reset.quote", "original_string": "private function quote($data)\n    {\n        $conn = $this->resource->getConnection();\n        $result = $conn->quote($data);\n        return $result;\n    }", "language": "php", "code": "private function quote($data)\n    {\n        $conn = $this->resource->getConnection();\n        $result = $conn->quote($data);\n        return $result;\n    }", "code_tokens": ["private", "function", "quote", "(", "$", "data", ")", "{", "$", "conn", "=", "$", "this", "->", "resource", "->", "getConnection", "(", ")", ";", "$", "result", "=", "$", "conn", "->", "quote", "(", "$", "data", ")", ";", "return", "$", "result", ";", "}"], "docstring": "Quotes string data to use inside SQL queries.\n\n@param string $data\n@return string", "docstring_tokens": ["Quotes", "string", "data", "to", "use", "inside", "SQL", "queries", "."], "sha": "87ebe278cb3f89387ee6c88a1ee902b4dd7fe68f", "url": "https://github.com/praxigento/mobi_mod_accounting/blob/87ebe278cb3f89387ee6c88a1ee902b4dd7fe68f/Service/Account/Balance/Reset.php#L72-L77", "partition": "test"}
{"repo": "yawik/organizations", "path": "src/Repository/Event/InjectOrganizationReferenceListener.php", "func_name": "InjectOrganizationReferenceListener.postLoad", "original_string": "public function postLoad(LifecycleEventArgs $args)\n    {\n        $document = $args->getDocument();\n\n        if ($document instanceof UserInterface) {\n            $repository = $args->getDocumentManager()->getRepository('Organizations\\Entity\\Organization');\n            $userId  = $document->getId();\n            $reference = new OrganizationReference($userId, $repository);\n\n            $document->setOrganization($reference);\n        }\n    }", "language": "php", "code": "public function postLoad(LifecycleEventArgs $args)\n    {\n        $document = $args->getDocument();\n\n        if ($document instanceof UserInterface) {\n            $repository = $args->getDocumentManager()->getRepository('Organizations\\Entity\\Organization');\n            $userId  = $document->getId();\n            $reference = new OrganizationReference($userId, $repository);\n\n            $document->setOrganization($reference);\n        }\n    }", "code_tokens": ["public", "function", "postLoad", "(", "LifecycleEventArgs", "$", "args", ")", "{", "$", "document", "=", "$", "args", "->", "getDocument", "(", ")", ";", "if", "(", "$", "document", "instanceof", "UserInterface", ")", "{", "$", "repository", "=", "$", "args", "->", "getDocumentManager", "(", ")", "->", "getRepository", "(", "'Organizations\\Entity\\Organization'", ")", ";", "$", "userId", "=", "$", "document", "->", "getId", "(", ")", ";", "$", "reference", "=", "new", "OrganizationReference", "(", "$", "userId", ",", "$", "repository", ")", ";", "$", "document", "->", "setOrganization", "(", "$", "reference", ")", ";", "}", "}"], "docstring": "Creates and injects the organization reference to an user entity.\n\n@param LifecycleEventArgs $args", "docstring_tokens": ["Creates", "and", "injects", "the", "organization", "reference", "to", "an", "user", "entity", "."], "sha": "a5d982212be5f445c067656aeb0aa3ca7daf0251", "url": "https://github.com/yawik/organizations/blob/a5d982212be5f445c067656aeb0aa3ca7daf0251/src/Repository/Event/InjectOrganizationReferenceListener.php#L37-L48", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/WebhooksService/WebhooksService.php", "func_name": "WebhooksService.verifyPayload", "original_string": "public static function verifyPayload($token, $payload, $intuitHeaderSignature)\n    {\n        $verifier = new TokenVerifier($token);\n        return $verifier->verifyPayLoad($payload, $intuitHeaderSignature);\n    }", "language": "php", "code": "public static function verifyPayload($token, $payload, $intuitHeaderSignature)\n    {\n        $verifier = new TokenVerifier($token);\n        return $verifier->verifyPayLoad($payload, $intuitHeaderSignature);\n    }", "code_tokens": ["public", "static", "function", "verifyPayload", "(", "$", "token", ",", "$", "payload", ",", "$", "intuitHeaderSignature", ")", "{", "$", "verifier", "=", "new", "TokenVerifier", "(", "$", "token", ")", ";", "return", "$", "verifier", "->", "verifyPayLoad", "(", "$", "payload", ",", "$", "intuitHeaderSignature", ")", ";", "}"], "docstring": "use Token to verifier the payload is sent from Intuit\n\n@param $token\nThe webhook Token get from Intuit\n@param $payload\nThe payload for the webhook events\n@param $intuitHeaderSignature\nThe header signature\n@return bool\nTrue if it is valid; otherwise return false;", "docstring_tokens": ["use", "Token", "to", "verifier", "the", "payload", "is", "sent", "from", "Intuit"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/WebhooksService/WebhooksService.php#L41-L45", "partition": "test"}
{"repo": "codeigniter4/CodeIgniter4", "path": "system/Events/Events.php", "func_name": "Events.initialize", "original_string": "public static function initialize()\n\t{\n\t\t// Don't overwrite anything....\n\t\tif (static::$initialized)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$config = config('Modules');\n\n\t\t$files = [APPPATH . 'Config/Events.php'];\n\n\t\tif ($config->shouldDiscover('events'))\n\t\t{\n\t\t\t$locator = Services::locator();\n\t\t\t$files   = $locator->search('Config/Events.php');\n\t\t}\n\n\t\tstatic::$files = $files;\n\n\t\tforeach (static::$files as $file)\n\t\t{\n\t\t\tif (is_file($file))\n\t\t\t{\n\t\t\t\tinclude $file;\n\t\t\t}\n\t\t}\n\n\t\tstatic::$initialized = true;\n\t}", "language": "php", "code": "public static function initialize()\n\t{\n\t\t// Don't overwrite anything....\n\t\tif (static::$initialized)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$config = config('Modules');\n\n\t\t$files = [APPPATH . 'Config/Events.php'];\n\n\t\tif ($config->shouldDiscover('events'))\n\t\t{\n\t\t\t$locator = Services::locator();\n\t\t\t$files   = $locator->search('Config/Events.php');\n\t\t}\n\n\t\tstatic::$files = $files;\n\n\t\tforeach (static::$files as $file)\n\t\t{\n\t\t\tif (is_file($file))\n\t\t\t{\n\t\t\t\tinclude $file;\n\t\t\t}\n\t\t}\n\n\t\tstatic::$initialized = true;\n\t}", "code_tokens": ["public", "static", "function", "initialize", "(", ")", "{", "// Don't overwrite anything....", "if", "(", "static", "::", "$", "initialized", ")", "{", "return", ";", "}", "$", "config", "=", "config", "(", "'Modules'", ")", ";", "$", "files", "=", "[", "APPPATH", ".", "'Config/Events.php'", "]", ";", "if", "(", "$", "config", "->", "shouldDiscover", "(", "'events'", ")", ")", "{", "$", "locator", "=", "Services", "::", "locator", "(", ")", ";", "$", "files", "=", "$", "locator", "->", "search", "(", "'Config/Events.php'", ")", ";", "}", "static", "::", "$", "files", "=", "$", "files", ";", "foreach", "(", "static", "::", "$", "files", "as", "$", "file", ")", "{", "if", "(", "is_file", "(", "$", "file", ")", ")", "{", "include", "$", "file", ";", "}", "}", "static", "::", "$", "initialized", "=", "true", ";", "}"], "docstring": "Ensures that we have a events file ready.", "docstring_tokens": ["Ensures", "that", "we", "have", "a", "events", "file", "ready", "."], "sha": "a31039291ff627150b0e3304d191b2a51b16271d", "url": "https://github.com/codeigniter4/CodeIgniter4/blob/a31039291ff627150b0e3304d191b2a51b16271d/system/Events/Events.php#L96-L125", "partition": "test"}
{"repo": "ClanCats/Container", "path": "src/ContainerBuilder.php", "func_name": "ContainerBuilder.generateMetaData", "original_string": "private function generateMetaData() : string\n    {\n        $metaData = [];\n        $metaDataService = [];\n\n        foreach($this->services as $serviceName => $serviceDefinition)\n        {\n            foreach($serviceDefinition->getMetaData() as $key => $serviceMetaData)\n            {\n                if (!isset($metaData[$key])) {\n                    $metaData[$key] = [];\n                }\n\n                $metaData[$key][$serviceName] = $serviceMetaData;\n\n                // mapping for the service centered\n                if (!isset($metaDataService[$serviceName])) {\n                    $metaDataService[$serviceName] = [];\n                }\n\n                if (!in_array($key, $metaDataService[$serviceName])) {\n                    $metaDataService[$serviceName][] = $key;\n                }\n            }\n        }\n\n        return \"protected \\$metadata = \" . var_export($metaData, true) . \";\\nprotected \\$metadataService = \" . var_export($metaDataService, true) . \";\\n\";\n    }", "language": "php", "code": "private function generateMetaData() : string\n    {\n        $metaData = [];\n        $metaDataService = [];\n\n        foreach($this->services as $serviceName => $serviceDefinition)\n        {\n            foreach($serviceDefinition->getMetaData() as $key => $serviceMetaData)\n            {\n                if (!isset($metaData[$key])) {\n                    $metaData[$key] = [];\n                }\n\n                $metaData[$key][$serviceName] = $serviceMetaData;\n\n                // mapping for the service centered\n                if (!isset($metaDataService[$serviceName])) {\n                    $metaDataService[$serviceName] = [];\n                }\n\n                if (!in_array($key, $metaDataService[$serviceName])) {\n                    $metaDataService[$serviceName][] = $key;\n                }\n            }\n        }\n\n        return \"protected \\$metadata = \" . var_export($metaData, true) . \";\\nprotected \\$metadataService = \" . var_export($metaDataService, true) . \";\\n\";\n    }", "code_tokens": ["private", "function", "generateMetaData", "(", ")", ":", "string", "{", "$", "metaData", "=", "[", "]", ";", "$", "metaDataService", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "services", "as", "$", "serviceName", "=>", "$", "serviceDefinition", ")", "{", "foreach", "(", "$", "serviceDefinition", "->", "getMetaData", "(", ")", "as", "$", "key", "=>", "$", "serviceMetaData", ")", "{", "if", "(", "!", "isset", "(", "$", "metaData", "[", "$", "key", "]", ")", ")", "{", "$", "metaData", "[", "$", "key", "]", "=", "[", "]", ";", "}", "$", "metaData", "[", "$", "key", "]", "[", "$", "serviceName", "]", "=", "$", "serviceMetaData", ";", "// mapping for the service centered", "if", "(", "!", "isset", "(", "$", "metaDataService", "[", "$", "serviceName", "]", ")", ")", "{", "$", "metaDataService", "[", "$", "serviceName", "]", "=", "[", "]", ";", "}", "if", "(", "!", "in_array", "(", "$", "key", ",", "$", "metaDataService", "[", "$", "serviceName", "]", ")", ")", "{", "$", "metaDataService", "[", "$", "serviceName", "]", "[", "]", "=", "$", "key", ";", "}", "}", "}", "return", "\"protected \\$metadata = \"", ".", "var_export", "(", "$", "metaData", ",", "true", ")", ".", "\";\\nprotected \\$metadataService = \"", ".", "var_export", "(", "$", "metaDataService", ",", "true", ")", ".", "\";\\n\"", ";", "}"], "docstring": "Generate the containers parameter property\n\n@return string", "docstring_tokens": ["Generate", "the", "containers", "parameter", "property"], "sha": "95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12", "url": "https://github.com/ClanCats/Container/blob/95e3e3ecb8bb61aae891e2590a1c5dcf6c734b12/src/ContainerBuilder.php#L425-L452", "partition": "test"}
{"repo": "pressbooks/pb-cli", "path": "inc/CloneCommand.php", "func_name": "CloneCommand.clone", "original_string": "public function clone( $args, $assoc_args ) {\n\t\tif ( count( $args ) < 2 ) {\n\t\t\tWP_CLI::error( 'Expects 3 parameters: <source> <dest> --user=<user> ' );\n\t\t}\n\t\tif ( ! get_current_user_id() ) {\n\t\t\tWP_CLI::error( 'Missing --user parameter (sets request to a specific WordPress user)' );\n\t\t}\n\n\t\t$success = false;\n\t\ttry {\n\t\t\t$source = esc_url( $args[0] );\n\n\t\t\t$dest = Cloner::validateNewBookName( $args[1] );\n\t\t\tif ( is_wp_error( $dest ) ) {\n\t\t\t\tWP_CLI::error( '<dest> ' . $dest->get_error_message() );\n\t\t\t}\n\n\t\t\tWP_CLI::log( \"Cloning {$source} into {$dest}\" );\n\n\t\t\t\\Pressbooks\\Metadata\\init_book_data_models();\n\t\t\t\\Pressbooks\\Api\\init_book();\n\t\t\t$cloner = new Cloner( $source, $dest );\n\t\t\t$success = $cloner->cloneBook();\n\n\t\t} catch ( \\Exception $e ) {\n\t\t\t// Do nothing, look at $_SESSION['pb_errors'] instead\n\t\t}\n\n\t\tif ( ! empty( $_SESSION['pb_errors'] ) ) {\n\t\t\tforeach ( $_SESSION['pb_errors'] as $error ) {\n\t\t\t\t$error = wp_strip_all_tags( $error, true );\n\t\t\t\t$error = html_entity_decode( $error );\n\t\t\t\tWP_CLI::warning( $error );\n\t\t\t}\n\t\t}\n\t\tif ( ! $success ) {\n\t\t\tWP_CLI::error( 'Cloning failed!' );\n\t\t} else {\n\t\t\tWP_CLI::success( 'Cloning succeeded!' );\n\t\t}\n\t}", "language": "php", "code": "public function clone( $args, $assoc_args ) {\n\t\tif ( count( $args ) < 2 ) {\n\t\t\tWP_CLI::error( 'Expects 3 parameters: <source> <dest> --user=<user> ' );\n\t\t}\n\t\tif ( ! get_current_user_id() ) {\n\t\t\tWP_CLI::error( 'Missing --user parameter (sets request to a specific WordPress user)' );\n\t\t}\n\n\t\t$success = false;\n\t\ttry {\n\t\t\t$source = esc_url( $args[0] );\n\n\t\t\t$dest = Cloner::validateNewBookName( $args[1] );\n\t\t\tif ( is_wp_error( $dest ) ) {\n\t\t\t\tWP_CLI::error( '<dest> ' . $dest->get_error_message() );\n\t\t\t}\n\n\t\t\tWP_CLI::log( \"Cloning {$source} into {$dest}\" );\n\n\t\t\t\\Pressbooks\\Metadata\\init_book_data_models();\n\t\t\t\\Pressbooks\\Api\\init_book();\n\t\t\t$cloner = new Cloner( $source, $dest );\n\t\t\t$success = $cloner->cloneBook();\n\n\t\t} catch ( \\Exception $e ) {\n\t\t\t// Do nothing, look at $_SESSION['pb_errors'] instead\n\t\t}\n\n\t\tif ( ! empty( $_SESSION['pb_errors'] ) ) {\n\t\t\tforeach ( $_SESSION['pb_errors'] as $error ) {\n\t\t\t\t$error = wp_strip_all_tags( $error, true );\n\t\t\t\t$error = html_entity_decode( $error );\n\t\t\t\tWP_CLI::warning( $error );\n\t\t\t}\n\t\t}\n\t\tif ( ! $success ) {\n\t\t\tWP_CLI::error( 'Cloning failed!' );\n\t\t} else {\n\t\t\tWP_CLI::success( 'Cloning succeeded!' );\n\t\t}\n\t}", "code_tokens": ["public", "function", "clone", "(", "$", "args", ",", "$", "assoc_args", ")", "{", "if", "(", "count", "(", "$", "args", ")", "<", "2", ")", "{", "WP_CLI", "::", "error", "(", "'Expects 3 parameters: <source> <dest> --user=<user> '", ")", ";", "}", "if", "(", "!", "get_current_user_id", "(", ")", ")", "{", "WP_CLI", "::", "error", "(", "'Missing --user parameter (sets request to a specific WordPress user)'", ")", ";", "}", "$", "success", "=", "false", ";", "try", "{", "$", "source", "=", "esc_url", "(", "$", "args", "[", "0", "]", ")", ";", "$", "dest", "=", "Cloner", "::", "validateNewBookName", "(", "$", "args", "[", "1", "]", ")", ";", "if", "(", "is_wp_error", "(", "$", "dest", ")", ")", "{", "WP_CLI", "::", "error", "(", "'<dest> '", ".", "$", "dest", "->", "get_error_message", "(", ")", ")", ";", "}", "WP_CLI", "::", "log", "(", "\"Cloning {$source} into {$dest}\"", ")", ";", "\\", "Pressbooks", "\\", "Metadata", "\\", "init_book_data_models", "(", ")", ";", "\\", "Pressbooks", "\\", "Api", "\\", "init_book", "(", ")", ";", "$", "cloner", "=", "new", "Cloner", "(", "$", "source", ",", "$", "dest", ")", ";", "$", "success", "=", "$", "cloner", "->", "cloneBook", "(", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "// Do nothing, look at $_SESSION['pb_errors'] instead", "}", "if", "(", "!", "empty", "(", "$", "_SESSION", "[", "'pb_errors'", "]", ")", ")", "{", "foreach", "(", "$", "_SESSION", "[", "'pb_errors'", "]", "as", "$", "error", ")", "{", "$", "error", "=", "wp_strip_all_tags", "(", "$", "error", ",", "true", ")", ";", "$", "error", "=", "html_entity_decode", "(", "$", "error", ")", ";", "WP_CLI", "::", "warning", "(", "$", "error", ")", ";", "}", "}", "if", "(", "!", "$", "success", ")", "{", "WP_CLI", "::", "error", "(", "'Cloning failed!'", ")", ";", "}", "else", "{", "WP_CLI", "::", "success", "(", "'Cloning succeeded!'", ")", ";", "}", "}"], "docstring": "Clone a book.\n\n## OPTIONS\n\n<source>\n: URL\n\n<destination>\n: Book slug on the current network\n\n--user=<user>\n: sets request to a specific WordPress user\n\n@when after_wp_load\n\n@param array $args\n@param array $assoc_args\n\n@throws \\WP_CLI\\ExitException", "docstring_tokens": ["Clone", "a", "book", "."], "sha": "e907c95299221a55f7c713e65a29e579031674ff", "url": "https://github.com/pressbooks/pb-cli/blob/e907c95299221a55f7c713e65a29e579031674ff/inc/CloneCommand.php#L31-L71", "partition": "test"}
{"repo": "heiglandreas/Org_Heigl_Hyphenator", "path": "src/Hyphenator.php", "func_name": "Hyphenator.getTokenizers", "original_string": "public function getTokenizers()\n    {\n        if (0 == $this->tokenizers->count()) {\n            foreach ($this->getOptions()->getTokenizers() as $tokenizer) {\n                $this->addTokenizer($tokenizer);\n            }\n        }\n\n        return $this->tokenizers;\n    }", "language": "php", "code": "public function getTokenizers()\n    {\n        if (0 == $this->tokenizers->count()) {\n            foreach ($this->getOptions()->getTokenizers() as $tokenizer) {\n                $this->addTokenizer($tokenizer);\n            }\n        }\n\n        return $this->tokenizers;\n    }", "code_tokens": ["public", "function", "getTokenizers", "(", ")", "{", "if", "(", "0", "==", "$", "this", "->", "tokenizers", "->", "count", "(", ")", ")", "{", "foreach", "(", "$", "this", "->", "getOptions", "(", ")", "->", "getTokenizers", "(", ")", "as", "$", "tokenizer", ")", "{", "$", "this", "->", "addTokenizer", "(", "$", "tokenizer", ")", ";", "}", "}", "return", "$", "this", "->", "tokenizers", ";", "}"], "docstring": "Get the tokenizers\n\n@return Tokenizer\\TokenizerRegistry", "docstring_tokens": ["Get", "the", "tokenizers"], "sha": "24f49328d3f89c6ac803c83f1217c8cf8548118b", "url": "https://github.com/heiglandreas/Org_Heigl_Hyphenator/blob/24f49328d3f89c6ac803c83f1217c8cf8548118b/src/Hyphenator.php#L290-L299", "partition": "test"}
{"repo": "TYPO3-Console/TYPO3-Console", "path": "Resources/Private/ExtensionArtifacts/Classes/Console/Hook/ExtensionInstallation.php", "func_name": "ExtensionInstallation.afterInstallation", "original_string": "public function afterInstallation($keyOfInstalledExtension)\n    {\n        if (self::EXTKEY !== $keyOfInstalledExtension) {\n            return;\n        }\n        $scriptName = $this->isWindowsOs() ? 'Scripts/' . Application::COMMAND_NAME . '.bat' : Application::COMMAND_NAME;\n        $success = $this->safeCopy(PATH_site . self::BINARY_PATH . $scriptName, PATH_site . basename($scriptName));\n        if (!$success) {\n            self::addFlashMessage(sprintf(self::COPY_FAILED_MESSAGE, $scriptName), sprintf(self::COPY_FAILED_MESSAGE_TITLE, $scriptName, PATH_site), AbstractMessage::WARNING);\n        } else {\n            self::addFlashMessage(sprintf(self::COPY_SUCCESS_MESSAGE, $scriptName));\n        }\n    }", "language": "php", "code": "public function afterInstallation($keyOfInstalledExtension)\n    {\n        if (self::EXTKEY !== $keyOfInstalledExtension) {\n            return;\n        }\n        $scriptName = $this->isWindowsOs() ? 'Scripts/' . Application::COMMAND_NAME . '.bat' : Application::COMMAND_NAME;\n        $success = $this->safeCopy(PATH_site . self::BINARY_PATH . $scriptName, PATH_site . basename($scriptName));\n        if (!$success) {\n            self::addFlashMessage(sprintf(self::COPY_FAILED_MESSAGE, $scriptName), sprintf(self::COPY_FAILED_MESSAGE_TITLE, $scriptName, PATH_site), AbstractMessage::WARNING);\n        } else {\n            self::addFlashMessage(sprintf(self::COPY_SUCCESS_MESSAGE, $scriptName));\n        }\n    }", "code_tokens": ["public", "function", "afterInstallation", "(", "$", "keyOfInstalledExtension", ")", "{", "if", "(", "self", "::", "EXTKEY", "!==", "$", "keyOfInstalledExtension", ")", "{", "return", ";", "}", "$", "scriptName", "=", "$", "this", "->", "isWindowsOs", "(", ")", "?", "'Scripts/'", ".", "Application", "::", "COMMAND_NAME", ".", "'.bat'", ":", "Application", "::", "COMMAND_NAME", ";", "$", "success", "=", "$", "this", "->", "safeCopy", "(", "PATH_site", ".", "self", "::", "BINARY_PATH", ".", "$", "scriptName", ",", "PATH_site", ".", "basename", "(", "$", "scriptName", ")", ")", ";", "if", "(", "!", "$", "success", ")", "{", "self", "::", "addFlashMessage", "(", "sprintf", "(", "self", "::", "COPY_FAILED_MESSAGE", ",", "$", "scriptName", ")", ",", "sprintf", "(", "self", "::", "COPY_FAILED_MESSAGE_TITLE", ",", "$", "scriptName", ",", "PATH_site", ")", ",", "AbstractMessage", "::", "WARNING", ")", ";", "}", "else", "{", "self", "::", "addFlashMessage", "(", "sprintf", "(", "self", "::", "COPY_SUCCESS_MESSAGE", ",", "$", "scriptName", ")", ")", ";", "}", "}"], "docstring": "Actions to take after extension has been installed\n\n@param string $keyOfInstalledExtension", "docstring_tokens": ["Actions", "to", "take", "after", "extension", "has", "been", "installed"], "sha": "a8983d65aa5e2b7495082059cd72b6403b14abfd", "url": "https://github.com/TYPO3-Console/TYPO3-Console/blob/a8983d65aa5e2b7495082059cd72b6403b14abfd/Resources/Private/ExtensionArtifacts/Classes/Console/Hook/ExtensionInstallation.php#L38-L50", "partition": "test"}
{"repo": "alekitto/function-mock", "path": "lib/NamespaceProphecy.php", "func_name": "NamespaceProphecy.checkPredictions", "original_string": "public function checkPredictions()\n    {\n        $exception = new AggregateException(sprintf(\"%s:\\n\", $this->name));\n\n        foreach ($this->prophecies as $prophecy) {\n            try {\n                $prophecy->checkPrediction();\n            } catch (PredictionException $e) {\n                $exception->append($e);\n            }\n        }\n\n        if (count($exception->getExceptions())) {\n            throw $exception;\n        }\n    }", "language": "php", "code": "public function checkPredictions()\n    {\n        $exception = new AggregateException(sprintf(\"%s:\\n\", $this->name));\n\n        foreach ($this->prophecies as $prophecy) {\n            try {\n                $prophecy->checkPrediction();\n            } catch (PredictionException $e) {\n                $exception->append($e);\n            }\n        }\n\n        if (count($exception->getExceptions())) {\n            throw $exception;\n        }\n    }", "code_tokens": ["public", "function", "checkPredictions", "(", ")", "{", "$", "exception", "=", "new", "AggregateException", "(", "sprintf", "(", "\"%s:\\n\"", ",", "$", "this", "->", "name", ")", ")", ";", "foreach", "(", "$", "this", "->", "prophecies", "as", "$", "prophecy", ")", "{", "try", "{", "$", "prophecy", "->", "checkPrediction", "(", ")", ";", "}", "catch", "(", "PredictionException", "$", "e", ")", "{", "$", "exception", "->", "append", "(", "$", "e", ")", ";", "}", "}", "if", "(", "count", "(", "$", "exception", "->", "getExceptions", "(", ")", ")", ")", "{", "throw", "$", "exception", ";", "}", "}"], "docstring": "Checks that registered method predictions do not fail.\n\n@throws \\Prophecy\\Exception\\Prediction\\AggregateException If any of registered predictions fail", "docstring_tokens": ["Checks", "that", "registered", "method", "predictions", "do", "not", "fail", "."], "sha": "cd920d7e5da05df8df38b349169cb8adac5e6b27", "url": "https://github.com/alekitto/function-mock/blob/cd920d7e5da05df8df38b349169cb8adac5e6b27/lib/NamespaceProphecy.php#L78-L93", "partition": "test"}
{"repo": "APY/APYDataGridBundle", "path": "Grid/Grid.php", "func_name": "Grid.processMassActions", "original_string": "protected function processMassActions($actionId)\n    {\n        if ($actionId > -1 && '' !== $actionId) {\n            if (array_key_exists($actionId, $this->massActions)) {\n                $action = $this->massActions[$actionId];\n                $actionAllKeys = (boolean) $this->getFromRequest(self::REQUEST_QUERY_MASS_ACTION_ALL_KEYS_SELECTED);\n                $actionKeys = $actionAllKeys === false ? array_keys((array) $this->getFromRequest(MassActionColumn::ID)) : [];\n\n                $this->processSessionData();\n                if ($actionAllKeys) {\n                    $this->page = 0;\n                    $this->limit = 0;\n                }\n\n                $this->prepare();\n\n                if ($actionAllKeys === true) {\n                    foreach ($this->rows as $row) {\n                        $actionKeys[] = $row->getPrimaryFieldValue();\n                    }\n                }\n\n                if (is_callable($action->getCallback())) {\n                    $this->massActionResponse = call_user_func($action->getCallback(), $actionKeys, $actionAllKeys, $this->session, $action->getParameters());\n                } elseif (strpos($action->getCallback(), ':') !== false) {\n                    $path = array_merge(\n                        [\n                            'primaryKeys'    => $actionKeys,\n                            'allPrimaryKeys' => $actionAllKeys,\n                            '_controller'    => $action->getCallback(),\n                        ],\n                        $action->getParameters()\n                    );\n\n                    $subRequest = $this->request->duplicate([], null, $path);\n\n                    $this->massActionResponse = $this->container->get('http_kernel')->handle($subRequest, \\Symfony\\Component\\HttpKernel\\HttpKernelInterface::SUB_REQUEST);\n                } else {\n                    throw new \\RuntimeException(sprintf(self::MASS_ACTION_CALLBACK_NOT_VALID_EX_MSG, $action->getCallback()));\n                }\n            } else {\n                throw new \\OutOfBoundsException(sprintf(self::MASS_ACTION_NOT_DEFINED_EX_MSG, $actionId));\n            }\n        }\n    }", "language": "php", "code": "protected function processMassActions($actionId)\n    {\n        if ($actionId > -1 && '' !== $actionId) {\n            if (array_key_exists($actionId, $this->massActions)) {\n                $action = $this->massActions[$actionId];\n                $actionAllKeys = (boolean) $this->getFromRequest(self::REQUEST_QUERY_MASS_ACTION_ALL_KEYS_SELECTED);\n                $actionKeys = $actionAllKeys === false ? array_keys((array) $this->getFromRequest(MassActionColumn::ID)) : [];\n\n                $this->processSessionData();\n                if ($actionAllKeys) {\n                    $this->page = 0;\n                    $this->limit = 0;\n                }\n\n                $this->prepare();\n\n                if ($actionAllKeys === true) {\n                    foreach ($this->rows as $row) {\n                        $actionKeys[] = $row->getPrimaryFieldValue();\n                    }\n                }\n\n                if (is_callable($action->getCallback())) {\n                    $this->massActionResponse = call_user_func($action->getCallback(), $actionKeys, $actionAllKeys, $this->session, $action->getParameters());\n                } elseif (strpos($action->getCallback(), ':') !== false) {\n                    $path = array_merge(\n                        [\n                            'primaryKeys'    => $actionKeys,\n                            'allPrimaryKeys' => $actionAllKeys,\n                            '_controller'    => $action->getCallback(),\n                        ],\n                        $action->getParameters()\n                    );\n\n                    $subRequest = $this->request->duplicate([], null, $path);\n\n                    $this->massActionResponse = $this->container->get('http_kernel')->handle($subRequest, \\Symfony\\Component\\HttpKernel\\HttpKernelInterface::SUB_REQUEST);\n                } else {\n                    throw new \\RuntimeException(sprintf(self::MASS_ACTION_CALLBACK_NOT_VALID_EX_MSG, $action->getCallback()));\n                }\n            } else {\n                throw new \\OutOfBoundsException(sprintf(self::MASS_ACTION_NOT_DEFINED_EX_MSG, $actionId));\n            }\n        }\n    }", "code_tokens": ["protected", "function", "processMassActions", "(", "$", "actionId", ")", "{", "if", "(", "$", "actionId", ">", "-", "1", "&&", "''", "!==", "$", "actionId", ")", "{", "if", "(", "array_key_exists", "(", "$", "actionId", ",", "$", "this", "->", "massActions", ")", ")", "{", "$", "action", "=", "$", "this", "->", "massActions", "[", "$", "actionId", "]", ";", "$", "actionAllKeys", "=", "(", "boolean", ")", "$", "this", "->", "getFromRequest", "(", "self", "::", "REQUEST_QUERY_MASS_ACTION_ALL_KEYS_SELECTED", ")", ";", "$", "actionKeys", "=", "$", "actionAllKeys", "===", "false", "?", "array_keys", "(", "(", "array", ")", "$", "this", "->", "getFromRequest", "(", "MassActionColumn", "::", "ID", ")", ")", ":", "[", "]", ";", "$", "this", "->", "processSessionData", "(", ")", ";", "if", "(", "$", "actionAllKeys", ")", "{", "$", "this", "->", "page", "=", "0", ";", "$", "this", "->", "limit", "=", "0", ";", "}", "$", "this", "->", "prepare", "(", ")", ";", "if", "(", "$", "actionAllKeys", "===", "true", ")", "{", "foreach", "(", "$", "this", "->", "rows", "as", "$", "row", ")", "{", "$", "actionKeys", "[", "]", "=", "$", "row", "->", "getPrimaryFieldValue", "(", ")", ";", "}", "}", "if", "(", "is_callable", "(", "$", "action", "->", "getCallback", "(", ")", ")", ")", "{", "$", "this", "->", "massActionResponse", "=", "call_user_func", "(", "$", "action", "->", "getCallback", "(", ")", ",", "$", "actionKeys", ",", "$", "actionAllKeys", ",", "$", "this", "->", "session", ",", "$", "action", "->", "getParameters", "(", ")", ")", ";", "}", "elseif", "(", "strpos", "(", "$", "action", "->", "getCallback", "(", ")", ",", "':'", ")", "!==", "false", ")", "{", "$", "path", "=", "array_merge", "(", "[", "'primaryKeys'", "=>", "$", "actionKeys", ",", "'allPrimaryKeys'", "=>", "$", "actionAllKeys", ",", "'_controller'", "=>", "$", "action", "->", "getCallback", "(", ")", ",", "]", ",", "$", "action", "->", "getParameters", "(", ")", ")", ";", "$", "subRequest", "=", "$", "this", "->", "request", "->", "duplicate", "(", "[", "]", ",", "null", ",", "$", "path", ")", ";", "$", "this", "->", "massActionResponse", "=", "$", "this", "->", "container", "->", "get", "(", "'http_kernel'", ")", "->", "handle", "(", "$", "subRequest", ",", "\\", "Symfony", "\\", "Component", "\\", "HttpKernel", "\\", "HttpKernelInterface", "::", "SUB_REQUEST", ")", ";", "}", "else", "{", "throw", "new", "\\", "RuntimeException", "(", "sprintf", "(", "self", "::", "MASS_ACTION_CALLBACK_NOT_VALID_EX_MSG", ",", "$", "action", "->", "getCallback", "(", ")", ")", ")", ";", "}", "}", "else", "{", "throw", "new", "\\", "OutOfBoundsException", "(", "sprintf", "(", "self", "::", "MASS_ACTION_NOT_DEFINED_EX_MSG", ",", "$", "actionId", ")", ")", ";", "}", "}", "}"], "docstring": "Process mass actions.\n\n@param int $actionId\n\n@throws \\RuntimeException\n@throws \\OutOfBoundsException", "docstring_tokens": ["Process", "mass", "actions", "."], "sha": "03050b366a79553b014aa4297d31b585a84622a3", "url": "https://github.com/APY/APYDataGridBundle/blob/03050b366a79553b014aa4297d31b585a84622a3/Grid/Grid.php#L628-L672", "partition": "test"}
{"repo": "sminnee/phpcrawl", "path": "libs/PHPCrawlerRobotsTxtParser.class.php", "func_name": "PHPCrawlerRobotsTxtParser.getRobotsTxtContent", "original_string": "protected function getRobotsTxtContent(PHPCrawlerURLDescriptor $Url)\r\n  {\r\n    // Request robots-txt\r\n    $this->PageRequest->setUrl($Url);\r\n    $PageInfo = $this->PageRequest->sendRequest();\r\n\r\n    // Return content of the robots.txt-file if it was found, otherwie\r\n    // reutrn NULL\r\n    if ($PageInfo->http_status_code == 200)\r\n    {\r\n      return $PageInfo->content;\r\n    }\r\n    else\r\n    {\r\n      return null;\r\n    }\r\n  }", "language": "php", "code": "protected function getRobotsTxtContent(PHPCrawlerURLDescriptor $Url)\r\n  {\r\n    // Request robots-txt\r\n    $this->PageRequest->setUrl($Url);\r\n    $PageInfo = $this->PageRequest->sendRequest();\r\n\r\n    // Return content of the robots.txt-file if it was found, otherwie\r\n    // reutrn NULL\r\n    if ($PageInfo->http_status_code == 200)\r\n    {\r\n      return $PageInfo->content;\r\n    }\r\n    else\r\n    {\r\n      return null;\r\n    }\r\n  }", "code_tokens": ["protected", "function", "getRobotsTxtContent", "(", "PHPCrawlerURLDescriptor", "$", "Url", ")", "{", "// Request robots-txt\r", "$", "this", "->", "PageRequest", "->", "setUrl", "(", "$", "Url", ")", ";", "$", "PageInfo", "=", "$", "this", "->", "PageRequest", "->", "sendRequest", "(", ")", ";", "// Return content of the robots.txt-file if it was found, otherwie\r", "// reutrn NULL\r", "if", "(", "$", "PageInfo", "->", "http_status_code", "==", "200", ")", "{", "return", "$", "PageInfo", "->", "content", ";", "}", "else", "{", "return", "null", ";", "}", "}"], "docstring": "Retreives the content of a robots.txt-file\n\n@param PHPCrawlerURLDescriptor $Url The URL of the robots.txt-file\n@return string The content of the robots.txt or NULL if no robots.txt was found.", "docstring_tokens": ["Retreives", "the", "content", "of", "a", "robots", ".", "txt", "-", "file"], "sha": "025c2ce86e5056c09de5a0eb4d76e8cf775dae36", "url": "https://github.com/sminnee/phpcrawl/blob/025c2ce86e5056c09de5a0eb4d76e8cf775dae36/libs/PHPCrawlerRobotsTxtParser.class.php#L194-L210", "partition": "test"}
{"repo": "peridot-php/webdriver-manager", "path": "src/Manager.php", "func_name": "Manager.registerBinaries", "original_string": "protected function registerBinaries(SeleniumProcessInterface $process, SeleniumStandalone $selenium)\n    {\n        $drivers = $this->getDrivers();\n        foreach ($drivers as $driver) {\n            $process->addBinary($driver, $this->getInstallPath());\n        }\n        $process->addBinary($selenium, $this->getInstallPath());\n    }", "language": "php", "code": "protected function registerBinaries(SeleniumProcessInterface $process, SeleniumStandalone $selenium)\n    {\n        $drivers = $this->getDrivers();\n        foreach ($drivers as $driver) {\n            $process->addBinary($driver, $this->getInstallPath());\n        }\n        $process->addBinary($selenium, $this->getInstallPath());\n    }", "code_tokens": ["protected", "function", "registerBinaries", "(", "SeleniumProcessInterface", "$", "process", ",", "SeleniumStandalone", "$", "selenium", ")", "{", "$", "drivers", "=", "$", "this", "->", "getDrivers", "(", ")", ";", "foreach", "(", "$", "drivers", "as", "$", "driver", ")", "{", "$", "process", "->", "addBinary", "(", "$", "driver", ",", "$", "this", "->", "getInstallPath", "(", ")", ")", ";", "}", "$", "process", "->", "addBinary", "(", "$", "selenium", ",", "$", "this", "->", "getInstallPath", "(", ")", ")", ";", "}"], "docstring": "Register selenium binary and drivers with the process.\n\n@param SeleniumProcessInterface $process\n@param SeleniumStandalone $selenium\n@return void", "docstring_tokens": ["Register", "selenium", "binary", "and", "drivers", "with", "the", "process", "."], "sha": "d4a1290f9201adc3dc84f2091142803b99c00c4e", "url": "https://github.com/peridot-php/webdriver-manager/blob/d4a1290f9201adc3dc84f2091142803b99c00c4e/src/Manager.php#L310-L317", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/QBXML/Object/Customer.php", "func_name": "QuickBooks_QBXML_Object_Customer.setCreditCardInfo", "original_string": "public function setCreditCardInfo($cardno, $expmonth, $expyear, $name, $address, $postalcode)\n\t{\n\t\t// should probably do better checking here for failed sets.\n\t\t$b = FALSE;\n\t\t$b = $this->set('CreditCardInfo CreditCardNumber', $cardno);\n\t\t$b = $this->set('CreditCardInfo ExpirationMonth', $expmonth);\n\t\t$b = $this->set('CreditCardInfo ExpirationYear', $expyear);\n\t\t$b = $this->set('CreditCardInfo NameOnCard', $name);\n\t\t$b = $this->set('CreditCardInfo CreditCardAddress', $address);\n\t\t$b = $this->set('CreditCardInfo CreditCardPostalCode', $postalcode);\n\t\t\n\t\treturn $b;\n\t}", "language": "php", "code": "public function setCreditCardInfo($cardno, $expmonth, $expyear, $name, $address, $postalcode)\n\t{\n\t\t// should probably do better checking here for failed sets.\n\t\t$b = FALSE;\n\t\t$b = $this->set('CreditCardInfo CreditCardNumber', $cardno);\n\t\t$b = $this->set('CreditCardInfo ExpirationMonth', $expmonth);\n\t\t$b = $this->set('CreditCardInfo ExpirationYear', $expyear);\n\t\t$b = $this->set('CreditCardInfo NameOnCard', $name);\n\t\t$b = $this->set('CreditCardInfo CreditCardAddress', $address);\n\t\t$b = $this->set('CreditCardInfo CreditCardPostalCode', $postalcode);\n\t\t\n\t\treturn $b;\n\t}", "code_tokens": ["public", "function", "setCreditCardInfo", "(", "$", "cardno", ",", "$", "expmonth", ",", "$", "expyear", ",", "$", "name", ",", "$", "address", ",", "$", "postalcode", ")", "{", "// should probably do better checking here for failed sets.", "$", "b", "=", "FALSE", ";", "$", "b", "=", "$", "this", "->", "set", "(", "'CreditCardInfo CreditCardNumber'", ",", "$", "cardno", ")", ";", "$", "b", "=", "$", "this", "->", "set", "(", "'CreditCardInfo ExpirationMonth'", ",", "$", "expmonth", ")", ";", "$", "b", "=", "$", "this", "->", "set", "(", "'CreditCardInfo ExpirationYear'", ",", "$", "expyear", ")", ";", "$", "b", "=", "$", "this", "->", "set", "(", "'CreditCardInfo NameOnCard'", ",", "$", "name", ")", ";", "$", "b", "=", "$", "this", "->", "set", "(", "'CreditCardInfo CreditCardAddress'", ",", "$", "address", ")", ";", "$", "b", "=", "$", "this", "->", "set", "(", "'CreditCardInfo CreditCardPostalCode'", ",", "$", "postalcode", ")", ";", "return", "$", "b", ";", "}"], "docstring": "Set the credit card information for this customer\n\n@param string $cardno\t\tThe credit card number\n@param integer $expmonth\t\tThe expiration month (1 is January, 2 is February, etc.)\n@param integer $expyear\t\tThe expiration year\n@param string $name\t\t\tThe name on the credit card\n@param string $address\t\tThe billing address for the credit card\n@param string $postalcode\tThe postal code for the credit card\n@return boolean", "docstring_tokens": ["Set", "the", "credit", "card", "information", "for", "this", "customer"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/QBXML/Object/Customer.php#L699-L711", "partition": "test"}
{"repo": "bradcornford/Bootstrapper", "path": "src/Cornford/Bootstrapper/Bootstrap.php", "func_name": "Bootstrap.file", "original_string": "public function file($name, $label = null, $errors = null, array $options = array())\n\t{\n\t\treturn $this->input('file', $name, $label, null, $errors, $options);\n\t}", "language": "php", "code": "public function file($name, $label = null, $errors = null, array $options = array())\n\t{\n\t\treturn $this->input('file', $name, $label, null, $errors, $options);\n\t}", "code_tokens": ["public", "function", "file", "(", "$", "name", ",", "$", "label", "=", "null", ",", "$", "errors", "=", "null", ",", "array", "$", "options", "=", "array", "(", ")", ")", "{", "return", "$", "this", "->", "input", "(", "'file'", ",", "$", "name", ",", "$", "label", ",", "null", ",", "$", "errors", ",", "$", "options", ")", ";", "}"], "docstring": "Create a form file field.\n\n@param string                         $name\n@param string                         $label\n@param \\Illuminate\\Support\\MessageBag $errors\n@param array                          $options\n\n@return string", "docstring_tokens": ["Create", "a", "form", "file", "field", "."], "sha": "93045a96c0d431aaad177d61ecec9e718c13ce82", "url": "https://github.com/bradcornford/Bootstrapper/blob/93045a96c0d431aaad177d61ecec9e718c13ce82/src/Cornford/Bootstrapper/Bootstrap.php#L201-L204", "partition": "test"}
{"repo": "iron-bound-designs/IronBound-DB", "path": "src/Model.php", "func_name": "Model.do_save_as_update", "original_string": "protected function do_save_as_update() {\n\n\t\t$dirty = $this->get_dirty();\n\n\t\tif ( ! $dirty ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( static::table() instanceof TimestampedTable ) {\n\t\t\t$this->set_attribute( static::table()->get_updated_at_column(), $this->fresh_timestamp() );\n\t\t\t$dirty = $this->get_dirty();\n\t\t}\n\n\t\t$columns = static::table()->get_columns();\n\n\t\t$previous = array();\n\t\t$update   = array();\n\n\t\tforeach ( $dirty as $column => $value ) {\n\n\t\t\tif ( array_key_exists( $column, $this->_original ) ) {\n\t\t\t\t$previous[ $column ] = $this->_original[ $column ];\n\t\t\t}\n\n\t\t\t$update[ $column ] = $columns[ $column ]->prepare_for_storage( $value );\n\t\t}\n\n\t\t$this->fire_model_event( 'updating', array(\n\t\t\t'changed' => $dirty,\n\t\t\t'from'    => $previous\n\t\t) );\n\n\t\t$result = static::make_query_object()->update( $this->get_pk(), $update );\n\n\t\tif ( $result ) {\n\n\t\t\tif ( static::$_cache ) {\n\t\t\t\tCache::update( $this );\n\t\t\t}\n\n\t\t\t$this->fire_model_event( 'updated', array(\n\t\t\t\t'changed' => $dirty,\n\t\t\t\t'from'    => $previous\n\t\t\t) );\n\t\t}\n\n\t\treturn $result;\n\t}", "language": "php", "code": "protected function do_save_as_update() {\n\n\t\t$dirty = $this->get_dirty();\n\n\t\tif ( ! $dirty ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( static::table() instanceof TimestampedTable ) {\n\t\t\t$this->set_attribute( static::table()->get_updated_at_column(), $this->fresh_timestamp() );\n\t\t\t$dirty = $this->get_dirty();\n\t\t}\n\n\t\t$columns = static::table()->get_columns();\n\n\t\t$previous = array();\n\t\t$update   = array();\n\n\t\tforeach ( $dirty as $column => $value ) {\n\n\t\t\tif ( array_key_exists( $column, $this->_original ) ) {\n\t\t\t\t$previous[ $column ] = $this->_original[ $column ];\n\t\t\t}\n\n\t\t\t$update[ $column ] = $columns[ $column ]->prepare_for_storage( $value );\n\t\t}\n\n\t\t$this->fire_model_event( 'updating', array(\n\t\t\t'changed' => $dirty,\n\t\t\t'from'    => $previous\n\t\t) );\n\n\t\t$result = static::make_query_object()->update( $this->get_pk(), $update );\n\n\t\tif ( $result ) {\n\n\t\t\tif ( static::$_cache ) {\n\t\t\t\tCache::update( $this );\n\t\t\t}\n\n\t\t\t$this->fire_model_event( 'updated', array(\n\t\t\t\t'changed' => $dirty,\n\t\t\t\t'from'    => $previous\n\t\t\t) );\n\t\t}\n\n\t\treturn $result;\n\t}", "code_tokens": ["protected", "function", "do_save_as_update", "(", ")", "{", "$", "dirty", "=", "$", "this", "->", "get_dirty", "(", ")", ";", "if", "(", "!", "$", "dirty", ")", "{", "return", "true", ";", "}", "if", "(", "static", "::", "table", "(", ")", "instanceof", "TimestampedTable", ")", "{", "$", "this", "->", "set_attribute", "(", "static", "::", "table", "(", ")", "->", "get_updated_at_column", "(", ")", ",", "$", "this", "->", "fresh_timestamp", "(", ")", ")", ";", "$", "dirty", "=", "$", "this", "->", "get_dirty", "(", ")", ";", "}", "$", "columns", "=", "static", "::", "table", "(", ")", "->", "get_columns", "(", ")", ";", "$", "previous", "=", "array", "(", ")", ";", "$", "update", "=", "array", "(", ")", ";", "foreach", "(", "$", "dirty", "as", "$", "column", "=>", "$", "value", ")", "{", "if", "(", "array_key_exists", "(", "$", "column", ",", "$", "this", "->", "_original", ")", ")", "{", "$", "previous", "[", "$", "column", "]", "=", "$", "this", "->", "_original", "[", "$", "column", "]", ";", "}", "$", "update", "[", "$", "column", "]", "=", "$", "columns", "[", "$", "column", "]", "->", "prepare_for_storage", "(", "$", "value", ")", ";", "}", "$", "this", "->", "fire_model_event", "(", "'updating'", ",", "array", "(", "'changed'", "=>", "$", "dirty", ",", "'from'", "=>", "$", "previous", ")", ")", ";", "$", "result", "=", "static", "::", "make_query_object", "(", ")", "->", "update", "(", "$", "this", "->", "get_pk", "(", ")", ",", "$", "update", ")", ";", "if", "(", "$", "result", ")", "{", "if", "(", "static", "::", "$", "_cache", ")", "{", "Cache", "::", "update", "(", "$", "this", ")", ";", "}", "$", "this", "->", "fire_model_event", "(", "'updated'", ",", "array", "(", "'changed'", "=>", "$", "dirty", ",", "'from'", "=>", "$", "previous", ")", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Save this model as an update query.\n\n@since 2.0\n\n@return bool\n\n@throws Exception", "docstring_tokens": ["Save", "this", "model", "as", "an", "update", "query", "."], "sha": "98511870a333aa930d6f9fd19796dff6a383d594", "url": "https://github.com/iron-bound-designs/IronBound-DB/blob/98511870a333aa930d6f9fd19796dff6a383d594/src/Model.php#L1187-L1234", "partition": "test"}
{"repo": "marklogic-community/mlphp", "path": "api/MarkLogic/MLPHP/Values.php", "func_name": "Values.getValuesAsElem", "original_string": "public function getValuesAsElem($dom)\n    {\n        $valsElem = $dom->createElement('values');\n        $valsElem->setAttribute('name', $this->name);\n\n        switch ($this->type) {\n            case 'range':\n                $rangeElem = $dom->createElement('range');\n                $rangeElem->setAttribute('type', $this->datatype);\n                $elemElem = $dom->createElement('element');\n                $elemElem->setAttribute('ns', $this->ns);\n                $elemElem->setAttribute('name', $this->elem);\n                $rangeElem->appendChild($elemElem);\n                if($this->attr) {\n                    $attrElem = $dom->createElement('attribute');\n                    $attrElem->setAttribute('ns', $this->attrNs);\n                    $attrElem->setAttribute('name', $this->attr);\n                    $rangeElem->appendChild($attrElem);\n                }\n                $valsElem->appendChild($rangeElem);\n                break;\n                /* <values name='example'>\n                    <range type='xs:integer'>\n                        <element ns='' name='game'/>\n                        <attribute ns='' name='runs'/>\n                    </range>\n                    <aggregate apply='sum'/>\n                </values> */\n            case 'uri':\n                $uriElem = $dom->createElement('uri');\n                $valsElem->appendChild($uriElem);\n\n                break;\n               /* <values name='uri'>\n                      <uri/>\n                      <values-option>limit=10</values-option>\n                    </values> */\n            case 'collection':\n                $collectionElem = $dom->createElement('collection');\n                $valsElem->appendChild($collectionElem);\n                break;\n               /* <values name=\"coll\">\n                      <collection/>\n                      <values-option>limit=10</values-option>\n                    </values> */\n        }\n        $this->addAggregate($dom, $valsElem);\n        $this->addValuesOptions($dom, $valsElem);\n        return $valsElem;\n    }", "language": "php", "code": "public function getValuesAsElem($dom)\n    {\n        $valsElem = $dom->createElement('values');\n        $valsElem->setAttribute('name', $this->name);\n\n        switch ($this->type) {\n            case 'range':\n                $rangeElem = $dom->createElement('range');\n                $rangeElem->setAttribute('type', $this->datatype);\n                $elemElem = $dom->createElement('element');\n                $elemElem->setAttribute('ns', $this->ns);\n                $elemElem->setAttribute('name', $this->elem);\n                $rangeElem->appendChild($elemElem);\n                if($this->attr) {\n                    $attrElem = $dom->createElement('attribute');\n                    $attrElem->setAttribute('ns', $this->attrNs);\n                    $attrElem->setAttribute('name', $this->attr);\n                    $rangeElem->appendChild($attrElem);\n                }\n                $valsElem->appendChild($rangeElem);\n                break;\n                /* <values name='example'>\n                    <range type='xs:integer'>\n                        <element ns='' name='game'/>\n                        <attribute ns='' name='runs'/>\n                    </range>\n                    <aggregate apply='sum'/>\n                </values> */\n            case 'uri':\n                $uriElem = $dom->createElement('uri');\n                $valsElem->appendChild($uriElem);\n\n                break;\n               /* <values name='uri'>\n                      <uri/>\n                      <values-option>limit=10</values-option>\n                    </values> */\n            case 'collection':\n                $collectionElem = $dom->createElement('collection');\n                $valsElem->appendChild($collectionElem);\n                break;\n               /* <values name=\"coll\">\n                      <collection/>\n                      <values-option>limit=10</values-option>\n                    </values> */\n        }\n        $this->addAggregate($dom, $valsElem);\n        $this->addValuesOptions($dom, $valsElem);\n        return $valsElem;\n    }", "code_tokens": ["public", "function", "getValuesAsElem", "(", "$", "dom", ")", "{", "$", "valsElem", "=", "$", "dom", "->", "createElement", "(", "'values'", ")", ";", "$", "valsElem", "->", "setAttribute", "(", "'name'", ",", "$", "this", "->", "name", ")", ";", "switch", "(", "$", "this", "->", "type", ")", "{", "case", "'range'", ":", "$", "rangeElem", "=", "$", "dom", "->", "createElement", "(", "'range'", ")", ";", "$", "rangeElem", "->", "setAttribute", "(", "'type'", ",", "$", "this", "->", "datatype", ")", ";", "$", "elemElem", "=", "$", "dom", "->", "createElement", "(", "'element'", ")", ";", "$", "elemElem", "->", "setAttribute", "(", "'ns'", ",", "$", "this", "->", "ns", ")", ";", "$", "elemElem", "->", "setAttribute", "(", "'name'", ",", "$", "this", "->", "elem", ")", ";", "$", "rangeElem", "->", "appendChild", "(", "$", "elemElem", ")", ";", "if", "(", "$", "this", "->", "attr", ")", "{", "$", "attrElem", "=", "$", "dom", "->", "createElement", "(", "'attribute'", ")", ";", "$", "attrElem", "->", "setAttribute", "(", "'ns'", ",", "$", "this", "->", "attrNs", ")", ";", "$", "attrElem", "->", "setAttribute", "(", "'name'", ",", "$", "this", "->", "attr", ")", ";", "$", "rangeElem", "->", "appendChild", "(", "$", "attrElem", ")", ";", "}", "$", "valsElem", "->", "appendChild", "(", "$", "rangeElem", ")", ";", "break", ";", "/* <values name='example'>\n                    <range type='xs:integer'>\n                        <element ns='' name='game'/>\n                        <attribute ns='' name='runs'/>\n                    </range>\n                    <aggregate apply='sum'/>\n                </values> */", "case", "'uri'", ":", "$", "uriElem", "=", "$", "dom", "->", "createElement", "(", "'uri'", ")", ";", "$", "valsElem", "->", "appendChild", "(", "$", "uriElem", ")", ";", "break", ";", "/* <values name='uri'>\n                      <uri/>\n                      <values-option>limit=10</values-option>\n                    </values> */", "case", "'collection'", ":", "$", "collectionElem", "=", "$", "dom", "->", "createElement", "(", "'collection'", ")", ";", "$", "valsElem", "->", "appendChild", "(", "$", "collectionElem", ")", ";", "break", ";", "/* <values name=\"coll\">\n                      <collection/>\n                      <values-option>limit=10</values-option>\n                    </values> */", "}", "$", "this", "->", "addAggregate", "(", "$", "dom", ",", "$", "valsElem", ")", ";", "$", "this", "->", "addValuesOptions", "(", "$", "dom", ",", "$", "valsElem", ")", ";", "return", "$", "valsElem", ";", "}"], "docstring": "Get the values setting as a DOMElement object.\n\n@param DOMDocument $dom The DOMDocument object in which to create the element.", "docstring_tokens": ["Get", "the", "values", "setting", "as", "a", "DOMElement", "object", "."], "sha": "c3aa3de82525cc5c3404e348e4d5069c0eee3277", "url": "https://github.com/marklogic-community/mlphp/blob/c3aa3de82525cc5c3404e348e4d5069c0eee3277/api/MarkLogic/MLPHP/Values.php#L115-L164", "partition": "test"}
{"repo": "consolibyte/quickbooks-php", "path": "QuickBooks/Driver/Sql.php", "func_name": "QuickBooks_Driver_Sql._recurEnqueue", "original_string": "protected function _recurEnqueue($user, $run_every, $action, $ident, $replace = true, $priority = 0, $extra = null, $qbxml = null)\n\t{\n\t\t$errnum = 0;\n\t\t$errmsg = '';\n\n\t\t// By default, it has *never* occured\n\t\t$recur_lasttime = (time() - $run_every - 60);\n\n\t\tif ($replace)\n\t\t{\n\t\t\tif ($existing = $this->_fetch($this->_query(\"\n\t\t\t\t\tSELECT\n\t\t\t\t\t\trecur_lasttime\n\t\t\t\t\tFROM\n\t\t\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \"\n\t\t\t\t\tWHERE\n\t\t\t\t\t\tqb_username = '\" . $this->_escape($user) . \"' AND\n\t\t\t\t\t\tqb_action = '\" . $this->_escape($action) . \"' AND\n\t\t\t\t\t\tident = '\" . $this->_escape($ident) . \"' \", $errnum, $errmsg)))\n\t\t\t{\n\t\t\t\t$this->_query(\"\n\t\t\t\t\tDELETE FROM\n\t\t\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \"\n\t\t\t\t\tWHERE\n\t\t\t\t\t\tqb_username = '\" . $this->_escape($user) . \"' AND\n\t\t\t\t\t\tqb_action = '\" . $this->_escape($action) . \"' AND\n\t\t\t\t\t\tident = '\" . $this->_escape($ident) . \"' \", $errnum, $errmsg);\n\n\t\t\t\t$recur_lasttime = $existing['recur_lasttime'];\n\t\t\t}\n\t\t}\n\n\t\tif ($extra)\n\t\t{\n\t\t\t$extra = serialize($extra);\n\t\t}\n\n\t\treturn $this->_query(\"\n\t\t\tINSERT INTO\n\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \"\n\t\t\t(\n\t\t\t\tqb_username,\n\t\t\t\tqb_action,\n\t\t\t\tident,\n\t\t\t\textra,\n\t\t\t\tqbxml,\n\t\t\t\tpriority,\n\t\t\t\trun_every,\n\t\t\t\trecur_lasttime,\n\t\t\t\tenqueue_datetime\n\t\t\t) VALUES (\n\t\t\t\t'\" . $this->_escape($user) . \"',\n\t\t\t\t'\" . $this->_escape($action) . \"',\n\t\t\t\t'\" . $this->_escape($ident) . \"',\n\t\t\t\t'\" . $this->_escape($extra) . \"',\n\t\t\t\t'\" . $this->_escape($qbxml) . \"',\n\t\t\t\t\" . (int) $priority . \",\n\t\t\t\t\" . (int) $run_every . \",\n\t\t\t\t\" . $recur_lasttime . \",\n\t\t\t\t'\" . date('Y-m-d H:i:s') . \"'\n\t\t\t) \", $errnum, $errmsg);\n\t}", "language": "php", "code": "protected function _recurEnqueue($user, $run_every, $action, $ident, $replace = true, $priority = 0, $extra = null, $qbxml = null)\n\t{\n\t\t$errnum = 0;\n\t\t$errmsg = '';\n\n\t\t// By default, it has *never* occured\n\t\t$recur_lasttime = (time() - $run_every - 60);\n\n\t\tif ($replace)\n\t\t{\n\t\t\tif ($existing = $this->_fetch($this->_query(\"\n\t\t\t\t\tSELECT\n\t\t\t\t\t\trecur_lasttime\n\t\t\t\t\tFROM\n\t\t\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \"\n\t\t\t\t\tWHERE\n\t\t\t\t\t\tqb_username = '\" . $this->_escape($user) . \"' AND\n\t\t\t\t\t\tqb_action = '\" . $this->_escape($action) . \"' AND\n\t\t\t\t\t\tident = '\" . $this->_escape($ident) . \"' \", $errnum, $errmsg)))\n\t\t\t{\n\t\t\t\t$this->_query(\"\n\t\t\t\t\tDELETE FROM\n\t\t\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \"\n\t\t\t\t\tWHERE\n\t\t\t\t\t\tqb_username = '\" . $this->_escape($user) . \"' AND\n\t\t\t\t\t\tqb_action = '\" . $this->_escape($action) . \"' AND\n\t\t\t\t\t\tident = '\" . $this->_escape($ident) . \"' \", $errnum, $errmsg);\n\n\t\t\t\t$recur_lasttime = $existing['recur_lasttime'];\n\t\t\t}\n\t\t}\n\n\t\tif ($extra)\n\t\t{\n\t\t\t$extra = serialize($extra);\n\t\t}\n\n\t\treturn $this->_query(\"\n\t\t\tINSERT INTO\n\t\t\t\t\" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . \"\n\t\t\t(\n\t\t\t\tqb_username,\n\t\t\t\tqb_action,\n\t\t\t\tident,\n\t\t\t\textra,\n\t\t\t\tqbxml,\n\t\t\t\tpriority,\n\t\t\t\trun_every,\n\t\t\t\trecur_lasttime,\n\t\t\t\tenqueue_datetime\n\t\t\t) VALUES (\n\t\t\t\t'\" . $this->_escape($user) . \"',\n\t\t\t\t'\" . $this->_escape($action) . \"',\n\t\t\t\t'\" . $this->_escape($ident) . \"',\n\t\t\t\t'\" . $this->_escape($extra) . \"',\n\t\t\t\t'\" . $this->_escape($qbxml) . \"',\n\t\t\t\t\" . (int) $priority . \",\n\t\t\t\t\" . (int) $run_every . \",\n\t\t\t\t\" . $recur_lasttime . \",\n\t\t\t\t'\" . date('Y-m-d H:i:s') . \"'\n\t\t\t) \", $errnum, $errmsg);\n\t}", "code_tokens": ["protected", "function", "_recurEnqueue", "(", "$", "user", ",", "$", "run_every", ",", "$", "action", ",", "$", "ident", ",", "$", "replace", "=", "true", ",", "$", "priority", "=", "0", ",", "$", "extra", "=", "null", ",", "$", "qbxml", "=", "null", ")", "{", "$", "errnum", "=", "0", ";", "$", "errmsg", "=", "''", ";", "// By default, it has *never* occured", "$", "recur_lasttime", "=", "(", "time", "(", ")", "-", "$", "run_every", "-", "60", ")", ";", "if", "(", "$", "replace", ")", "{", "if", "(", "$", "existing", "=", "$", "this", "->", "_fetch", "(", "$", "this", "->", "_query", "(", "\"\n\t\t\t\t\tSELECT\n\t\t\t\t\t\trecur_lasttime\n\t\t\t\t\tFROM\n\t\t\t\t\t\t\"", ".", "$", "this", "->", "_mapTableName", "(", "QUICKBOOKS_DRIVER_SQL_RECURTABLE", ")", ".", "\"\n\t\t\t\t\tWHERE\n\t\t\t\t\t\tqb_username = '\"", ".", "$", "this", "->", "_escape", "(", "$", "user", ")", ".", "\"' AND\n\t\t\t\t\t\tqb_action = '\"", ".", "$", "this", "->", "_escape", "(", "$", "action", ")", ".", "\"' AND\n\t\t\t\t\t\tident = '\"", ".", "$", "this", "->", "_escape", "(", "$", "ident", ")", ".", "\"' \"", ",", "$", "errnum", ",", "$", "errmsg", ")", ")", ")", "{", "$", "this", "->", "_query", "(", "\"\n\t\t\t\t\tDELETE FROM\n\t\t\t\t\t\t\"", ".", "$", "this", "->", "_mapTableName", "(", "QUICKBOOKS_DRIVER_SQL_RECURTABLE", ")", ".", "\"\n\t\t\t\t\tWHERE\n\t\t\t\t\t\tqb_username = '\"", ".", "$", "this", "->", "_escape", "(", "$", "user", ")", ".", "\"' AND\n\t\t\t\t\t\tqb_action = '\"", ".", "$", "this", "->", "_escape", "(", "$", "action", ")", ".", "\"' AND\n\t\t\t\t\t\tident = '\"", ".", "$", "this", "->", "_escape", "(", "$", "ident", ")", ".", "\"' \"", ",", "$", "errnum", ",", "$", "errmsg", ")", ";", "$", "recur_lasttime", "=", "$", "existing", "[", "'recur_lasttime'", "]", ";", "}", "}", "if", "(", "$", "extra", ")", "{", "$", "extra", "=", "serialize", "(", "$", "extra", ")", ";", "}", "return", "$", "this", "->", "_query", "(", "\"\n\t\t\tINSERT INTO\n\t\t\t\t\"", ".", "$", "this", "->", "_mapTableName", "(", "QUICKBOOKS_DRIVER_SQL_RECURTABLE", ")", ".", "\"\n\t\t\t(\n\t\t\t\tqb_username,\n\t\t\t\tqb_action,\n\t\t\t\tident,\n\t\t\t\textra,\n\t\t\t\tqbxml,\n\t\t\t\tpriority,\n\t\t\t\trun_every,\n\t\t\t\trecur_lasttime,\n\t\t\t\tenqueue_datetime\n\t\t\t) VALUES (\n\t\t\t\t'\"", ".", "$", "this", "->", "_escape", "(", "$", "user", ")", ".", "\"',\n\t\t\t\t'\"", ".", "$", "this", "->", "_escape", "(", "$", "action", ")", ".", "\"',\n\t\t\t\t'\"", ".", "$", "this", "->", "_escape", "(", "$", "ident", ")", ".", "\"',\n\t\t\t\t'\"", ".", "$", "this", "->", "_escape", "(", "$", "extra", ")", ".", "\"',\n\t\t\t\t'\"", ".", "$", "this", "->", "_escape", "(", "$", "qbxml", ")", ".", "\"',\n\t\t\t\t\"", ".", "(", "int", ")", "$", "priority", ".", "\",\n\t\t\t\t\"", ".", "(", "int", ")", "$", "run_every", ".", "\",\n\t\t\t\t\"", ".", "$", "recur_lasttime", ".", "\",\n\t\t\t\t'\"", ".", "date", "(", "'Y-m-d H:i:s'", ")", ".", "\"'\n\t\t\t) \"", ",", "$", "errnum", ",", "$", "errmsg", ")", ";", "}"], "docstring": "Register a recurring event for a particular user\n\n@param string $user\n@param integer $run_every\n@param string $action\n@param mixed $ident\n@param boolean $replace\n@param integer $priority\n@param mixed $extra\n@return boolean", "docstring_tokens": ["Register", "a", "recurring", "event", "for", "a", "particular", "user"], "sha": "3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1", "url": "https://github.com/consolibyte/quickbooks-php/blob/3df0d35e2fc04c1fe04c63dbdb3c11a501c305a1/QuickBooks/Driver/Sql.php#L1022-L1083", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/Support/Str.php", "func_name": "Str.replaceFirst", "original_string": "public static function replaceFirst(string $search, string $replace, string $subject): string\n    {\n        if ($search === '') {\n            return $subject;\n        }\n\n        $position = \\mb_strpos($subject, $search);\n\n        return self::replaceByPosition($subject, $replace, $position, $search);\n    }", "language": "php", "code": "public static function replaceFirst(string $search, string $replace, string $subject): string\n    {\n        if ($search === '') {\n            return $subject;\n        }\n\n        $position = \\mb_strpos($subject, $search);\n\n        return self::replaceByPosition($subject, $replace, $position, $search);\n    }", "code_tokens": ["public", "static", "function", "replaceFirst", "(", "string", "$", "search", ",", "string", "$", "replace", ",", "string", "$", "subject", ")", ":", "string", "{", "if", "(", "$", "search", "===", "''", ")", "{", "return", "$", "subject", ";", "}", "$", "position", "=", "\\", "mb_strpos", "(", "$", "subject", ",", "$", "search", ")", ";", "return", "self", "::", "replaceByPosition", "(", "$", "subject", ",", "$", "replace", ",", "$", "position", ",", "$", "search", ")", ";", "}"], "docstring": "Replace the first occurrence of a given value in the string.\n\n@param string $search\n@param string $replace\n@param string $subject\n\n@return string", "docstring_tokens": ["Replace", "the", "first", "occurrence", "of", "a", "given", "value", "in", "the", "string", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/Support/Str.php#L238-L247", "partition": "test"}
{"repo": "techdivision/import", "path": "src/Repositories/EavAttributeRepository.php", "func_name": "EavAttributeRepository.findOneByOptionValueAndStoreId", "original_string": "public function findOneByOptionValueAndStoreId($optionValue, $storeId)\n    {\n\n        // execute the prepared statement and return the array with the fail EAV attributes\n        if (sizeof($eavAttributes = $this->findAllByOptionValueAndStoreId($optionValue, $storeId)) > 0) {\n            return reset($eavAttributes);\n        }\n    }", "language": "php", "code": "public function findOneByOptionValueAndStoreId($optionValue, $storeId)\n    {\n\n        // execute the prepared statement and return the array with the fail EAV attributes\n        if (sizeof($eavAttributes = $this->findAllByOptionValueAndStoreId($optionValue, $storeId)) > 0) {\n            return reset($eavAttributes);\n        }\n    }", "code_tokens": ["public", "function", "findOneByOptionValueAndStoreId", "(", "$", "optionValue", ",", "$", "storeId", ")", "{", "// execute the prepared statement and return the array with the fail EAV attributes", "if", "(", "sizeof", "(", "$", "eavAttributes", "=", "$", "this", "->", "findAllByOptionValueAndStoreId", "(", "$", "optionValue", ",", "$", "storeId", ")", ")", ">", "0", ")", "{", "return", "reset", "(", "$", "eavAttributes", ")", ";", "}", "}"], "docstring": "Return's the first EAV attribute for the passed option value and store ID.\n\n@param string $optionValue The option value of the EAV attributes\n@param string $storeId     The store ID of the EAV attribues\n\n@return array The array with the EAV attribute", "docstring_tokens": ["Return", "s", "the", "first", "EAV", "attribute", "for", "the", "passed", "option", "value", "and", "store", "ID", "."], "sha": "66d3eb967cbbd2d248942044fa8ede1192e48fd4", "url": "https://github.com/techdivision/import/blob/66d3eb967cbbd2d248942044fa8ede1192e48fd4/src/Repositories/EavAttributeRepository.php#L268-L275", "partition": "test"}
{"repo": "txthinking/Mailer", "path": "src/Mailer/SMTP.php", "func_name": "SMTP.authXOAuth2", "original_string": "protected function authXOAuth2()\n    {\n        $authStr = sprintf(\"user=%s%sauth=Bearer %s%s%s\",\n            $this->message->getFromEmail(),\n            chr(1),\n            $this->oauthToken,\n            chr(1),\n            chr(1)\n        );\n        $authStr = base64_encode($authStr);\n        $in = \"AUTH XOAUTH2 $authStr\" . $this->CRLF;\n        $code = $this->pushStack($in);\n        if ($code !== '235'){\n            throw new CodeException('235', $code, array_pop($this->resultStack));\n        }\n        return $this;\n    }", "language": "php", "code": "protected function authXOAuth2()\n    {\n        $authStr = sprintf(\"user=%s%sauth=Bearer %s%s%s\",\n            $this->message->getFromEmail(),\n            chr(1),\n            $this->oauthToken,\n            chr(1),\n            chr(1)\n        );\n        $authStr = base64_encode($authStr);\n        $in = \"AUTH XOAUTH2 $authStr\" . $this->CRLF;\n        $code = $this->pushStack($in);\n        if ($code !== '235'){\n            throw new CodeException('235', $code, array_pop($this->resultStack));\n        }\n        return $this;\n    }", "code_tokens": ["protected", "function", "authXOAuth2", "(", ")", "{", "$", "authStr", "=", "sprintf", "(", "\"user=%s%sauth=Bearer %s%s%s\"", ",", "$", "this", "->", "message", "->", "getFromEmail", "(", ")", ",", "chr", "(", "1", ")", ",", "$", "this", "->", "oauthToken", ",", "chr", "(", "1", ")", ",", "chr", "(", "1", ")", ")", ";", "$", "authStr", "=", "base64_encode", "(", "$", "authStr", ")", ";", "$", "in", "=", "\"AUTH XOAUTH2 $authStr\"", ".", "$", "this", "->", "CRLF", ";", "$", "code", "=", "$", "this", "->", "pushStack", "(", "$", "in", ")", ";", "if", "(", "$", "code", "!==", "'235'", ")", "{", "throw", "new", "CodeException", "(", "'235'", ",", "$", "code", ",", "array_pop", "(", "$", "this", "->", "resultStack", ")", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "SMTP AUTH XOAUTH2\nSUCCESS 235\n@return $this\n@throws CodeException\n@throws SMTPException", "docstring_tokens": ["SMTP", "AUTH", "XOAUTH2", "SUCCESS", "235"], "sha": "49cd4e555a926bb4668c946c92691b88e0870b51", "url": "https://github.com/txthinking/Mailer/blob/49cd4e555a926bb4668c946c92691b88e0870b51/src/Mailer/SMTP.php#L336-L352", "partition": "test"}
{"repo": "chrisbarr/AmazonSNS-PHP-API", "path": "lib/AmazonSNS.php", "func_name": "AmazonSNS.subscribe", "original_string": "public function subscribe($topicArn, $protocol, $endpoint) {\n\t\tif(empty($topicArn) || empty($protocol) || empty($endpoint)) {\n\t\t\tthrow new InvalidArgumentException('Must supply a TopicARN, Protocol and Endpoint to subscribe to a topic');\n\t\t}\n\n\t\t$response = $this->_request('Subscribe', array(\n\t\t\t'TopicArn' => $topicArn,\n\t\t\t'Protocol' => $protocol,\n\t\t\t'Endpoint' => $endpoint\n\t\t));\n\n\t\treturn strval($response->SubscribeResult->SubscriptionArn);\n\t}", "language": "php", "code": "public function subscribe($topicArn, $protocol, $endpoint) {\n\t\tif(empty($topicArn) || empty($protocol) || empty($endpoint)) {\n\t\t\tthrow new InvalidArgumentException('Must supply a TopicARN, Protocol and Endpoint to subscribe to a topic');\n\t\t}\n\n\t\t$response = $this->_request('Subscribe', array(\n\t\t\t'TopicArn' => $topicArn,\n\t\t\t'Protocol' => $protocol,\n\t\t\t'Endpoint' => $endpoint\n\t\t));\n\n\t\treturn strval($response->SubscribeResult->SubscriptionArn);\n\t}", "code_tokens": ["public", "function", "subscribe", "(", "$", "topicArn", ",", "$", "protocol", ",", "$", "endpoint", ")", "{", "if", "(", "empty", "(", "$", "topicArn", ")", "||", "empty", "(", "$", "protocol", ")", "||", "empty", "(", "$", "endpoint", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Must supply a TopicARN, Protocol and Endpoint to subscribe to a topic'", ")", ";", "}", "$", "response", "=", "$", "this", "->", "_request", "(", "'Subscribe'", ",", "array", "(", "'TopicArn'", "=>", "$", "topicArn", ",", "'Protocol'", "=>", "$", "protocol", ",", "'Endpoint'", "=>", "$", "endpoint", ")", ")", ";", "return", "strval", "(", "$", "response", "->", "SubscribeResult", "->", "SubscriptionArn", ")", ";", "}"], "docstring": "Subscribe to a topic\n\n@link http://docs.amazonwebservices.com/sns/latest/api/API_Subscribe.html\n@param string $topicArn\n@param string $protocol - http/https/email/email-json/sms/sqs\n@param string $endpoint\n@return string $SubscriptionArn\n@throws InvalidArgumentException", "docstring_tokens": ["Subscribe", "to", "a", "topic"], "sha": "df3c6ae499088cc7be5be9058cbff1e660c2bc2d", "url": "https://github.com/chrisbarr/AmazonSNS-PHP-API/blob/df3c6ae499088cc7be5be9058cbff1e660c2bc2d/lib/AmazonSNS.php#L422-L434", "partition": "test"}
{"repo": "webignition/internet-media-type", "path": "src/Parser/Parser.php", "func_name": "Parser.getParameters", "original_string": "private function getParameters($parameterStrings): array\n    {\n        $parameters = array();\n        foreach ($parameterStrings as $parameterString) {\n            $parameters[] = $this->parameterParser->parse($parameterString);\n        }\n\n        return $parameters;\n    }", "language": "php", "code": "private function getParameters($parameterStrings): array\n    {\n        $parameters = array();\n        foreach ($parameterStrings as $parameterString) {\n            $parameters[] = $this->parameterParser->parse($parameterString);\n        }\n\n        return $parameters;\n    }", "code_tokens": ["private", "function", "getParameters", "(", "$", "parameterStrings", ")", ":", "array", "{", "$", "parameters", "=", "array", "(", ")", ";", "foreach", "(", "$", "parameterStrings", "as", "$", "parameterString", ")", "{", "$", "parameters", "[", "]", "=", "$", "this", "->", "parameterParser", "->", "parse", "(", "$", "parameterString", ")", ";", "}", "return", "$", "parameters", ";", "}"], "docstring": "Get a collection of Parameter objects from a collection of string\nrepresentations of the same\n\n@param array $parameterStrings\n\n@return ParameterInterface[]\n\n@throws AttributeParserException", "docstring_tokens": ["Get", "a", "collection", "of", "Parameter", "objects", "from", "a", "collection", "of", "string", "representations", "of", "the", "same"], "sha": "cd797dfc3a43099d3caf2feee7ff8c000bb121af", "url": "https://github.com/webignition/internet-media-type/blob/cd797dfc3a43099d3caf2feee7ff8c000bb121af/src/Parser/Parser.php#L156-L164", "partition": "test"}
{"repo": "valkyrjaio/valkyrja", "path": "src/Valkyrja/Console/NativeConsole.php", "func_name": "NativeConsole.addCommand", "original_string": "public function addCommand(Command $command): void\n    {\n        $command->setMethod($command->getMethod() ?? static::RUN_METHOD);\n        $dispatcher = $this->app->dispatcher();\n\n        $dispatcher->verifyClassMethod($command);\n        $dispatcher->verifyFunction($command);\n        $dispatcher->verifyClosure($command);\n\n        $this->addParsedCommand(\n            $command,\n            $this->app->pathParser()->parse(\n                $command->getPath()\n            )\n        );\n    }", "language": "php", "code": "public function addCommand(Command $command): void\n    {\n        $command->setMethod($command->getMethod() ?? static::RUN_METHOD);\n        $dispatcher = $this->app->dispatcher();\n\n        $dispatcher->verifyClassMethod($command);\n        $dispatcher->verifyFunction($command);\n        $dispatcher->verifyClosure($command);\n\n        $this->addParsedCommand(\n            $command,\n            $this->app->pathParser()->parse(\n                $command->getPath()\n            )\n        );\n    }", "code_tokens": ["public", "function", "addCommand", "(", "Command", "$", "command", ")", ":", "void", "{", "$", "command", "->", "setMethod", "(", "$", "command", "->", "getMethod", "(", ")", "??", "static", "::", "RUN_METHOD", ")", ";", "$", "dispatcher", "=", "$", "this", "->", "app", "->", "dispatcher", "(", ")", ";", "$", "dispatcher", "->", "verifyClassMethod", "(", "$", "command", ")", ";", "$", "dispatcher", "->", "verifyFunction", "(", "$", "command", ")", ";", "$", "dispatcher", "->", "verifyClosure", "(", "$", "command", ")", ";", "$", "this", "->", "addParsedCommand", "(", "$", "command", ",", "$", "this", "->", "app", "->", "pathParser", "(", ")", "->", "parse", "(", "$", "command", "->", "getPath", "(", ")", ")", ")", ";", "}"], "docstring": "Add a new command.\n\n@param Command $command The command\n\n@throws \\Valkyrja\\Dispatcher\\Exceptions\\InvalidClosureException\n@throws \\Valkyrja\\Dispatcher\\Exceptions\\InvalidDispatchCapabilityException\n@throws \\Valkyrja\\Dispatcher\\Exceptions\\InvalidFunctionException\n@throws \\Valkyrja\\Dispatcher\\Exceptions\\InvalidMethodException\n@throws \\Valkyrja\\Dispatcher\\Exceptions\\InvalidPropertyException\n\n@return void", "docstring_tokens": ["Add", "a", "new", "command", "."], "sha": "3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe", "url": "https://github.com/valkyrjaio/valkyrja/blob/3b4ad998d96c3ab08e36a11c76ce8d9d48759ffe/src/Valkyrja/Console/NativeConsole.php#L97-L112", "partition": "test"}
{"repo": "FriendsOfSymfony/FOSElasticaBundle", "path": "src/DependencyInjection/FOSElasticaExtension.php", "func_name": "FOSElasticaExtension.createDefaultManagerAlias", "original_string": "private function createDefaultManagerAlias($defaultManager, ContainerBuilder $container)\n    {\n        if (0 == count($this->loadedDrivers)) {\n            return;\n        }\n\n        if (count($this->loadedDrivers) > 1\n            && in_array($defaultManager, $this->loadedDrivers)\n        ) {\n            $defaultManagerService = $defaultManager;\n        } else {\n            $defaultManagerService = $this->loadedDrivers[0];\n        }\n\n        $container->setAlias('fos_elastica.manager', sprintf('fos_elastica.manager.%s', $defaultManagerService));\n        $container->getAlias('fos_elastica.manager')->setPublic(true);\n        $container->setAlias(RepositoryManagerInterface::class, 'fos_elastica.manager');\n        $container->getAlias(RepositoryManagerInterface::class)->setPublic(false);\n    }", "language": "php", "code": "private function createDefaultManagerAlias($defaultManager, ContainerBuilder $container)\n    {\n        if (0 == count($this->loadedDrivers)) {\n            return;\n        }\n\n        if (count($this->loadedDrivers) > 1\n            && in_array($defaultManager, $this->loadedDrivers)\n        ) {\n            $defaultManagerService = $defaultManager;\n        } else {\n            $defaultManagerService = $this->loadedDrivers[0];\n        }\n\n        $container->setAlias('fos_elastica.manager', sprintf('fos_elastica.manager.%s', $defaultManagerService));\n        $container->getAlias('fos_elastica.manager')->setPublic(true);\n        $container->setAlias(RepositoryManagerInterface::class, 'fos_elastica.manager');\n        $container->getAlias(RepositoryManagerInterface::class)->setPublic(false);\n    }", "code_tokens": ["private", "function", "createDefaultManagerAlias", "(", "$", "defaultManager", ",", "ContainerBuilder", "$", "container", ")", "{", "if", "(", "0", "==", "count", "(", "$", "this", "->", "loadedDrivers", ")", ")", "{", "return", ";", "}", "if", "(", "count", "(", "$", "this", "->", "loadedDrivers", ")", ">", "1", "&&", "in_array", "(", "$", "defaultManager", ",", "$", "this", "->", "loadedDrivers", ")", ")", "{", "$", "defaultManagerService", "=", "$", "defaultManager", ";", "}", "else", "{", "$", "defaultManagerService", "=", "$", "this", "->", "loadedDrivers", "[", "0", "]", ";", "}", "$", "container", "->", "setAlias", "(", "'fos_elastica.manager'", ",", "sprintf", "(", "'fos_elastica.manager.%s'", ",", "$", "defaultManagerService", ")", ")", ";", "$", "container", "->", "getAlias", "(", "'fos_elastica.manager'", ")", "->", "setPublic", "(", "true", ")", ";", "$", "container", "->", "setAlias", "(", "RepositoryManagerInterface", "::", "class", ",", "'fos_elastica.manager'", ")", ";", "$", "container", "->", "getAlias", "(", "RepositoryManagerInterface", "::", "class", ")", "->", "setPublic", "(", "false", ")", ";", "}"], "docstring": "Creates a default manager alias for defined default manager or the first loaded driver.\n\n@param string           $defaultManager\n@param ContainerBuilder $container", "docstring_tokens": ["Creates", "a", "default", "manager", "alias", "for", "defined", "default", "manager", "or", "the", "first", "loaded", "driver", "."], "sha": "3f2707d1d606a59527f74e88808b820a170d3f42", "url": "https://github.com/FriendsOfSymfony/FOSElasticaBundle/blob/3f2707d1d606a59527f74e88808b820a170d3f42/src/DependencyInjection/FOSElasticaExtension.php#L847-L865", "partition": "test"}
{"repo": "WordPress-Coding-Standards/WordPress-Coding-Standards", "path": "WordPress/PHPCSHelper.php", "func_name": "PHPCSHelper.get_tab_width", "original_string": "public static function get_tab_width( File $phpcsFile ) {\n\t\t$tab_width = 4;\n\n\t\tif ( isset( $phpcsFile->config->tabWidth ) && $phpcsFile->config->tabWidth > 0 ) {\n\t\t\t$tab_width = $phpcsFile->config->tabWidth;\n\t\t}\n\n\t\treturn $tab_width;\n\t}", "language": "php", "code": "public static function get_tab_width( File $phpcsFile ) {\n\t\t$tab_width = 4;\n\n\t\tif ( isset( $phpcsFile->config->tabWidth ) && $phpcsFile->config->tabWidth > 0 ) {\n\t\t\t$tab_width = $phpcsFile->config->tabWidth;\n\t\t}\n\n\t\treturn $tab_width;\n\t}", "code_tokens": ["public", "static", "function", "get_tab_width", "(", "File", "$", "phpcsFile", ")", "{", "$", "tab_width", "=", "4", ";", "if", "(", "isset", "(", "$", "phpcsFile", "->", "config", "->", "tabWidth", ")", "&&", "$", "phpcsFile", "->", "config", "->", "tabWidth", ">", "0", ")", "{", "$", "tab_width", "=", "$", "phpcsFile", "->", "config", "->", "tabWidth", ";", "}", "return", "$", "tab_width", ";", "}"], "docstring": "Get the tab width as passed to PHPCS from the command-line or the ruleset.\n\n@since 0.13.0\n\n@param \\PHP_CodeSniffer\\Files\\File $phpcsFile The file being processed.\n\n@return int Tab width. Defaults to 4.", "docstring_tokens": ["Get", "the", "tab", "width", "as", "passed", "to", "PHPCS", "from", "the", "command", "-", "line", "or", "the", "ruleset", "."], "sha": "04bfa1284ca652e8e9befe82134f440cc31f655d", "url": "https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/blob/04bfa1284ca652e8e9befe82134f440cc31f655d/WordPress/PHPCSHelper.php#L79-L87", "partition": "test"}
{"repo": "intuit/QuickBooks-V3-PHP-SDK", "path": "src/DataService/DataService.php", "func_name": "DataService.SendEmail", "original_string": "public function SendEmail($entity, $email = null)\n    {\n        $this->validateEntityId($entity);\n        $this->verifyOperationAccess($entity, __FUNCTION__);\n\n        $entityId=$this->getIDString($entity->Id);\n        $uri = implode(CoreConstants::SLASH_CHAR, array('company',\n                $this->serviceContext->realmId,\n                self::getEntityResourceName($entity),\n                $entityId,\n                'send'));\n\n        if (is_null($email)) {\n            $this->logInfo(\"Entity \" . get_class($entity) . \" with id=\" . $entityId . \" is using default email\");\n        } else {\n            $this->logInfo(\"Entity \" . get_class($entity) . \" with id=\" . $entityId . \" is using $email\");\n            if (!$this->verifyEmailAddress($email)) {\n                $this->logError(\"Valid email is expected, but received $email\");\n                throw new SdkException(\"Valid email is expected, but received $email\");\n            }\n        }\n\n        return $this->sendRequestParseResponseBodyAndHandleHttpError($entity, $uri, null, DataService::SENDEMAIL, null, $email);\n    }", "language": "php", "code": "public function SendEmail($entity, $email = null)\n    {\n        $this->validateEntityId($entity);\n        $this->verifyOperationAccess($entity, __FUNCTION__);\n\n        $entityId=$this->getIDString($entity->Id);\n        $uri = implode(CoreConstants::SLASH_CHAR, array('company',\n                $this->serviceContext->realmId,\n                self::getEntityResourceName($entity),\n                $entityId,\n                'send'));\n\n        if (is_null($email)) {\n            $this->logInfo(\"Entity \" . get_class($entity) . \" with id=\" . $entityId . \" is using default email\");\n        } else {\n            $this->logInfo(\"Entity \" . get_class($entity) . \" with id=\" . $entityId . \" is using $email\");\n            if (!$this->verifyEmailAddress($email)) {\n                $this->logError(\"Valid email is expected, but received $email\");\n                throw new SdkException(\"Valid email is expected, but received $email\");\n            }\n        }\n\n        return $this->sendRequestParseResponseBodyAndHandleHttpError($entity, $uri, null, DataService::SENDEMAIL, null, $email);\n    }", "code_tokens": ["public", "function", "SendEmail", "(", "$", "entity", ",", "$", "email", "=", "null", ")", "{", "$", "this", "->", "validateEntityId", "(", "$", "entity", ")", ";", "$", "this", "->", "verifyOperationAccess", "(", "$", "entity", ",", "__FUNCTION__", ")", ";", "$", "entityId", "=", "$", "this", "->", "getIDString", "(", "$", "entity", "->", "Id", ")", ";", "$", "uri", "=", "implode", "(", "CoreConstants", "::", "SLASH_CHAR", ",", "array", "(", "'company'", ",", "$", "this", "->", "serviceContext", "->", "realmId", ",", "self", "::", "getEntityResourceName", "(", "$", "entity", ")", ",", "$", "entityId", ",", "'send'", ")", ")", ";", "if", "(", "is_null", "(", "$", "email", ")", ")", "{", "$", "this", "->", "logInfo", "(", "\"Entity \"", ".", "get_class", "(", "$", "entity", ")", ".", "\" with id=\"", ".", "$", "entityId", ".", "\" is using default email\"", ")", ";", "}", "else", "{", "$", "this", "->", "logInfo", "(", "\"Entity \"", ".", "get_class", "(", "$", "entity", ")", ".", "\" with id=\"", ".", "$", "entityId", ".", "\" is using $email\"", ")", ";", "if", "(", "!", "$", "this", "->", "verifyEmailAddress", "(", "$", "email", ")", ")", "{", "$", "this", "->", "logError", "(", "\"Valid email is expected, but received $email\"", ")", ";", "throw", "new", "SdkException", "(", "\"Valid email is expected, but received $email\"", ")", ";", "}", "}", "return", "$", "this", "->", "sendRequestParseResponseBodyAndHandleHttpError", "(", "$", "entity", ",", "$", "uri", ",", "null", ",", "DataService", "::", "SENDEMAIL", ",", "null", ",", "$", "email", ")", ";", "}"], "docstring": "Sends entity by email for entities that have this operation\n\n@param IPPIntuitEntity $entity\n@param string|null $email\n@return boolean\n@throws IdsException, SdkException", "docstring_tokens": ["Sends", "entity", "by", "email", "for", "entities", "that", "have", "this", "operation"], "sha": "09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5", "url": "https://github.com/intuit/QuickBooks-V3-PHP-SDK/blob/09f9f42e4cf49a7d6e0aa4d2c15e15eba245bfd5/src/DataService/DataService.php#L932-L955", "partition": "test"}
{"repo": "phalcon-nucleon/framework", "path": "src/Neutrino/Support/Obj.php", "func_name": "Obj.get", "original_string": "public static function get($target, $key, $default = null)\n    {\n        if (is_null($key) || !is_object($target)) {\n            return self::value($default);\n        }\n\n        if (!is_array($key)) {\n            if (isset($target->{$key}) || property_exists($target, $key)) {\n                return $target->{$key};\n            }\n\n            $keys = explode('.', $key);\n        } else {\n            $keys = $key;\n        }\n        foreach ($keys as $segment) {\n            if (is_object($target) && isset($target->{$segment})) {\n                $target = $target->{$segment};\n            } else {\n                return self::value($default);\n            }\n        }\n\n        return $target;\n    }", "language": "php", "code": "public static function get($target, $key, $default = null)\n    {\n        if (is_null($key) || !is_object($target)) {\n            return self::value($default);\n        }\n\n        if (!is_array($key)) {\n            if (isset($target->{$key}) || property_exists($target, $key)) {\n                return $target->{$key};\n            }\n\n            $keys = explode('.', $key);\n        } else {\n            $keys = $key;\n        }\n        foreach ($keys as $segment) {\n            if (is_object($target) && isset($target->{$segment})) {\n                $target = $target->{$segment};\n            } else {\n                return self::value($default);\n            }\n        }\n\n        return $target;\n    }", "code_tokens": ["public", "static", "function", "get", "(", "$", "target", ",", "$", "key", ",", "$", "default", "=", "null", ")", "{", "if", "(", "is_null", "(", "$", "key", ")", "||", "!", "is_object", "(", "$", "target", ")", ")", "{", "return", "self", "::", "value", "(", "$", "default", ")", ";", "}", "if", "(", "!", "is_array", "(", "$", "key", ")", ")", "{", "if", "(", "isset", "(", "$", "target", "->", "{", "$", "key", "}", ")", "||", "property_exists", "(", "$", "target", ",", "$", "key", ")", ")", "{", "return", "$", "target", "->", "{", "$", "key", "}", ";", "}", "$", "keys", "=", "explode", "(", "'.'", ",", "$", "key", ")", ";", "}", "else", "{", "$", "keys", "=", "$", "key", ";", "}", "foreach", "(", "$", "keys", "as", "$", "segment", ")", "{", "if", "(", "is_object", "(", "$", "target", ")", "&&", "isset", "(", "$", "target", "->", "{", "$", "segment", "}", ")", ")", "{", "$", "target", "=", "$", "target", "->", "{", "$", "segment", "}", ";", "}", "else", "{", "return", "self", "::", "value", "(", "$", "default", ")", ";", "}", "}", "return", "$", "target", ";", "}"], "docstring": "Get an item from an array or object using \"dot\" notation.\n\n@param  mixed        $target\n@param  string|array $key\n@param  mixed        $default\n\n@return mixed", "docstring_tokens": ["Get", "an", "item", "from", "an", "array", "or", "object", "using", "dot", "notation", "."], "sha": "f50fe76387bb623497f066c86f58fa70bfa613ef", "url": "https://github.com/phalcon-nucleon/framework/blob/f50fe76387bb623497f066c86f58fa70bfa613ef/src/Neutrino/Support/Obj.php#L70-L94", "partition": "test"}
{"repo": "narrowspark/framework", "path": "src/Viserio/Component/WebServer/WebServer.php", "func_name": "WebServer.createServerProcess", "original_string": "private static function createServerProcess(WebServerConfig $config): Process\n    {\n        $finder = new PhpExecutableFinder();\n\n        if (($binary = $finder->find(false)) === false) {\n            throw new RuntimeException('Unable to find the PHP binary.');\n        }\n\n        $xdebugArgs = [];\n\n        if ($config->hasXdebug() && \\extension_loaded('xdebug')) {\n            $xdebugArgs = ['-dxdebug.profiler_enable_trigger=1'];\n        }\n\n        $process = new Process(\\array_merge([$binary], $finder->findArguments(), $xdebugArgs, ['-dvariables_order=EGPCS', '-S', $config->getAddress(), $config->getRouter()]));\n        $process->setWorkingDirectory($config->getDocumentRoot());\n        $process->setTimeout(null);\n\n        return $process;\n    }", "language": "php", "code": "private static function createServerProcess(WebServerConfig $config): Process\n    {\n        $finder = new PhpExecutableFinder();\n\n        if (($binary = $finder->find(false)) === false) {\n            throw new RuntimeException('Unable to find the PHP binary.');\n        }\n\n        $xdebugArgs = [];\n\n        if ($config->hasXdebug() && \\extension_loaded('xdebug')) {\n            $xdebugArgs = ['-dxdebug.profiler_enable_trigger=1'];\n        }\n\n        $process = new Process(\\array_merge([$binary], $finder->findArguments(), $xdebugArgs, ['-dvariables_order=EGPCS', '-S', $config->getAddress(), $config->getRouter()]));\n        $process->setWorkingDirectory($config->getDocumentRoot());\n        $process->setTimeout(null);\n\n        return $process;\n    }", "code_tokens": ["private", "static", "function", "createServerProcess", "(", "WebServerConfig", "$", "config", ")", ":", "Process", "{", "$", "finder", "=", "new", "PhpExecutableFinder", "(", ")", ";", "if", "(", "(", "$", "binary", "=", "$", "finder", "->", "find", "(", "false", ")", ")", "===", "false", ")", "{", "throw", "new", "RuntimeException", "(", "'Unable to find the PHP binary.'", ")", ";", "}", "$", "xdebugArgs", "=", "[", "]", ";", "if", "(", "$", "config", "->", "hasXdebug", "(", ")", "&&", "\\", "extension_loaded", "(", "'xdebug'", ")", ")", "{", "$", "xdebugArgs", "=", "[", "'-dxdebug.profiler_enable_trigger=1'", "]", ";", "}", "$", "process", "=", "new", "Process", "(", "\\", "array_merge", "(", "[", "$", "binary", "]", ",", "$", "finder", "->", "findArguments", "(", ")", ",", "$", "xdebugArgs", ",", "[", "'-dvariables_order=EGPCS'", ",", "'-S'", ",", "$", "config", "->", "getAddress", "(", ")", ",", "$", "config", "->", "getRouter", "(", ")", "]", ")", ")", ";", "$", "process", "->", "setWorkingDirectory", "(", "$", "config", "->", "getDocumentRoot", "(", ")", ")", ";", "$", "process", "->", "setTimeout", "(", "null", ")", ";", "return", "$", "process", ";", "}"], "docstring": "Create a new server command process.\n\n@param \\Viserio\\Component\\WebServer\\WebServerConfig $config\n\n@return \\Symfony\\Component\\Process\\Process", "docstring_tokens": ["Create", "a", "new", "server", "command", "process", "."], "sha": "6b45d64668f8551c1c3116bd4526a7060e121795", "url": "https://github.com/narrowspark/framework/blob/6b45d64668f8551c1c3116bd4526a7060e121795/src/Viserio/Component/WebServer/WebServer.php#L189-L208", "partition": "test"}
{"repo": "stevebauman/maintenance", "path": "app/Processors/Inventory/InventoryVariantProcessor.php", "func_name": "InventoryVariantProcessor.store", "original_string": "public function store(InventoryRequest $request, $itemId)\n    {\n        $item = $this->inventory->findOrFail($itemId);\n\n        $variant = $item->newVariant();\n\n        $variant->name = $request->input('name', $item->name);\n        $variant->category_id = $request->input('category', $item->category_id);\n        $variant->metric_id = $request->input('metric', $item->metric_id);\n\n        return $variant->save();\n    }", "language": "php", "code": "public function store(InventoryRequest $request, $itemId)\n    {\n        $item = $this->inventory->findOrFail($itemId);\n\n        $variant = $item->newVariant();\n\n        $variant->name = $request->input('name', $item->name);\n        $variant->category_id = $request->input('category', $item->category_id);\n        $variant->metric_id = $request->input('metric', $item->metric_id);\n\n        return $variant->save();\n    }", "code_tokens": ["public", "function", "store", "(", "InventoryRequest", "$", "request", ",", "$", "itemId", ")", "{", "$", "item", "=", "$", "this", "->", "inventory", "->", "findOrFail", "(", "$", "itemId", ")", ";", "$", "variant", "=", "$", "item", "->", "newVariant", "(", ")", ";", "$", "variant", "->", "name", "=", "$", "request", "->", "input", "(", "'name'", ",", "$", "item", "->", "name", ")", ";", "$", "variant", "->", "category_id", "=", "$", "request", "->", "input", "(", "'category'", ",", "$", "item", "->", "category_id", ")", ";", "$", "variant", "->", "metric_id", "=", "$", "request", "->", "input", "(", "'metric'", ",", "$", "item", "->", "metric_id", ")", ";", "return", "$", "variant", "->", "save", "(", ")", ";", "}"], "docstring": "Creates a variant of the specified inventory item.\n\n@param InventoryRequest $request\n@param int|string       $itemId\n\n@return bool", "docstring_tokens": ["Creates", "a", "variant", "of", "the", "specified", "inventory", "item", "."], "sha": "3a205c7e809da015cbf978aeb7d11af54e65084a", "url": "https://github.com/stevebauman/maintenance/blob/3a205c7e809da015cbf978aeb7d11af54e65084a/app/Processors/Inventory/InventoryVariantProcessor.php#L58-L69", "partition": "test"}
{"repo": "tomahawkphp/framework", "path": "src/Tomahawk/HttpCore/Response/Cookies.php", "func_name": "Cookies.get", "original_string": "public function get($name, $default = null)\n    {\n        if (null !== ($value = $this->request->cookies->get($name))) {\n            return $value ?: $default;\n        }\n\n        return $default;\n    }", "language": "php", "code": "public function get($name, $default = null)\n    {\n        if (null !== ($value = $this->request->cookies->get($name))) {\n            return $value ?: $default;\n        }\n\n        return $default;\n    }", "code_tokens": ["public", "function", "get", "(", "$", "name", ",", "$", "default", "=", "null", ")", "{", "if", "(", "null", "!==", "(", "$", "value", "=", "$", "this", "->", "request", "->", "cookies", "->", "get", "(", "$", "name", ")", ")", ")", "{", "return", "$", "value", "?", ":", "$", "default", ";", "}", "return", "$", "default", ";", "}"], "docstring": "Get cookie value\n\n@param $name\n@param null $default\n@return mixed|null", "docstring_tokens": ["Get", "cookie", "value"], "sha": "087ee2d362fe70a9020d32c00f7a48cb11b9c04f", "url": "https://github.com/tomahawkphp/framework/blob/087ee2d362fe70a9020d32c00f7a48cb11b9c04f/src/Tomahawk/HttpCore/Response/Cookies.php#L82-L89", "partition": "test"}
{"repo": "didww/php-sdk", "path": "src/Didww/API2/ServerPaginatedCollection.php", "func_name": "ServerPaginatedCollection.setOrderDir", "original_string": "public function setOrderDir($orderDir = CDRCollection::ORDER_ASC)\n    {\n        if ($orderDir != self::ORDER_ASC && $orderDir != self::ORDER_DESC) {\n            throw new CDRCollectionException(\"Unknown order direction\");\n        }\n        $this->orderDir = $orderDir;\n    }", "language": "php", "code": "public function setOrderDir($orderDir = CDRCollection::ORDER_ASC)\n    {\n        if ($orderDir != self::ORDER_ASC && $orderDir != self::ORDER_DESC) {\n            throw new CDRCollectionException(\"Unknown order direction\");\n        }\n        $this->orderDir = $orderDir;\n    }", "code_tokens": ["public", "function", "setOrderDir", "(", "$", "orderDir", "=", "CDRCollection", "::", "ORDER_ASC", ")", "{", "if", "(", "$", "orderDir", "!=", "self", "::", "ORDER_ASC", "&&", "$", "orderDir", "!=", "self", "::", "ORDER_DESC", ")", "{", "throw", "new", "CDRCollectionException", "(", "\"Unknown order direction\"", ")", ";", "}", "$", "this", "->", "orderDir", "=", "$", "orderDir", ";", "}"], "docstring": "set orderDir property\n@param string $orderDir\n@throws CDRCollectionException", "docstring_tokens": ["set", "orderDir", "property"], "sha": "ee406862bceeb67bc6796f52f2bd60e103cd8de3", "url": "https://github.com/didww/php-sdk/blob/ee406862bceeb67bc6796f52f2bd60e103cd8de3/src/Didww/API2/ServerPaginatedCollection.php#L209-L215", "partition": "test"}
{"repo": "mcamara/laravel-localization", "path": "src/Mcamara/LaravelLocalization/Traits/LoadsTranslatedCachedRoutes.php", "func_name": "LoadsTranslatedCachedRoutes.loadCachedRoutes", "original_string": "protected function loadCachedRoutes()\n    {\n        $localization = $this->getLaravelLocalization();\n\n        $localization->setLocale();\n\n        $locale = $localization->getCurrentLocale();\n\n        $localeKeys = $localization->getSupportedLanguagesKeys();\n\n        // First, try to load the routes specifically cached for this locale\n        // if they do not exist, write a warning to the log and load the default\n        // routes instead. Note that this is guaranteed to exist, because the\n        // 'cached routes' check in the Application checks its existence.\n\n        $path = $this->makeLocaleRoutesPath($locale, $localeKeys);\n\n        if ( ! file_exists($path)) {\n\n            Log::warning(\"Routes cached, but no cached routes found for locale '{$locale}'!\");\n\n            $path = $this->getDefaultCachedRoutePath();\n        }\n\n        $this->app->booted(function () use ($path) {\n            require $path;\n        });\n    }", "language": "php", "code": "protected function loadCachedRoutes()\n    {\n        $localization = $this->getLaravelLocalization();\n\n        $localization->setLocale();\n\n        $locale = $localization->getCurrentLocale();\n\n        $localeKeys = $localization->getSupportedLanguagesKeys();\n\n        // First, try to load the routes specifically cached for this locale\n        // if they do not exist, write a warning to the log and load the default\n        // routes instead. Note that this is guaranteed to exist, because the\n        // 'cached routes' check in the Application checks its existence.\n\n        $path = $this->makeLocaleRoutesPath($locale, $localeKeys);\n\n        if ( ! file_exists($path)) {\n\n            Log::warning(\"Routes cached, but no cached routes found for locale '{$locale}'!\");\n\n            $path = $this->getDefaultCachedRoutePath();\n        }\n\n        $this->app->booted(function () use ($path) {\n            require $path;\n        });\n    }", "code_tokens": ["protected", "function", "loadCachedRoutes", "(", ")", "{", "$", "localization", "=", "$", "this", "->", "getLaravelLocalization", "(", ")", ";", "$", "localization", "->", "setLocale", "(", ")", ";", "$", "locale", "=", "$", "localization", "->", "getCurrentLocale", "(", ")", ";", "$", "localeKeys", "=", "$", "localization", "->", "getSupportedLanguagesKeys", "(", ")", ";", "// First, try to load the routes specifically cached for this locale", "// if they do not exist, write a warning to the log and load the default", "// routes instead. Note that this is guaranteed to exist, because the", "// 'cached routes' check in the Application checks its existence.", "$", "path", "=", "$", "this", "->", "makeLocaleRoutesPath", "(", "$", "locale", ",", "$", "localeKeys", ")", ";", "if", "(", "!", "file_exists", "(", "$", "path", ")", ")", "{", "Log", "::", "warning", "(", "\"Routes cached, but no cached routes found for locale '{$locale}'!\"", ")", ";", "$", "path", "=", "$", "this", "->", "getDefaultCachedRoutePath", "(", ")", ";", "}", "$", "this", "->", "app", "->", "booted", "(", "function", "(", ")", "use", "(", "$", "path", ")", "{", "require", "$", "path", ";", "}", ")", ";", "}"], "docstring": "Load the cached routes for the application.\n\n@return void", "docstring_tokens": ["Load", "the", "cached", "routes", "for", "the", "application", "."], "sha": "cf89d2515d576292e65bfa5893a0efd1cc5a4064", "url": "https://github.com/mcamara/laravel-localization/blob/cf89d2515d576292e65bfa5893a0efd1cc5a4064/src/Mcamara/LaravelLocalization/Traits/LoadsTranslatedCachedRoutes.php#L21-L48", "partition": "test"}
{"repo": "allebb/executioner", "path": "src/Executioner.php", "func_name": "Executioner.generateArguments", "original_string": "protected function generateArguments()\n    {\n        $arguments = '';\n        if (!$this->applicationArguments->isEmpty()) {\n            $arguments = ' ' . $this->applicationArguments->implode();\n        }\n        return $arguments;\n    }", "language": "php", "code": "protected function generateArguments()\n    {\n        $arguments = '';\n        if (!$this->applicationArguments->isEmpty()) {\n            $arguments = ' ' . $this->applicationArguments->implode();\n        }\n        return $arguments;\n    }", "code_tokens": ["protected", "function", "generateArguments", "(", ")", "{", "$", "arguments", "=", "''", ";", "if", "(", "!", "$", "this", "->", "applicationArguments", "->", "isEmpty", "(", ")", ")", "{", "$", "arguments", "=", "' '", ".", "$", "this", "->", "applicationArguments", "->", "implode", "(", ")", ";", "}", "return", "$", "arguments", ";", "}"], "docstring": "Generates a list of arguments to be appended onto the executed path.\n\n@return string The generated list of arguments.", "docstring_tokens": ["Generates", "a", "list", "of", "arguments", "to", "be", "appended", "onto", "the", "executed", "path", "."], "sha": "2d3cbc3b402f4dcc7cd1abcab1f3d2e09451abe8", "url": "https://github.com/allebb/executioner/blob/2d3cbc3b402f4dcc7cd1abcab1f3d2e09451abe8/src/Executioner.php#L142-L149", "partition": "test"}
