{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/ProfileSpecificationComponentImpl.java", "func_name": "ProfileSpecificationComponentImpl.buildProfileAttributeMap", "original_string": "private void buildProfileAttributeMap() throws DeploymentException {\r\n\t\t HashMap<String, ProfileAttribute> map = new HashMap<String, ProfileAttribute>();\r\n\t\t Class<?> cmpInterface = getProfileCmpInterfaceClass();\r\n\t\t String attributeGetterMethodPrefix = \"get\";\r\n\t\t for (Method method : cmpInterface.getMethods()) {\r\n\t\t\t if (!method.getDeclaringClass().equals(Object.class) && method.getName().startsWith(attributeGetterMethodPrefix)) {\r\n\t\t\t\t String attributeName = method.getName().substring(attributeGetterMethodPrefix.length());\r\n\t\t\t\t switch (attributeName.length()) {\r\n\t\t\t\t case 0:\r\n\t\t\t\t\tthrow new DeploymentException(\"the profile cmp interface class has an invalid attribute getter method name > \"+method.getName());\t\t\t\t\t\r\n\t\t\t\t case 1:\r\n\t\t\t\t\tattributeName = attributeName.toLowerCase();\r\n\t\t\t\t\tbreak;\t\t\t\t\t\r\n\t\t\t\t default:\r\n\t\t\t\t\tattributeName = attributeName.substring(0, 1).toLowerCase() + attributeName.substring(1);\r\n\t\t\t\t \tbreak;\r\n\t\t\t\t }\t\t\t\r\n\t\t\t\t ProfileAttributeImpl profileAttribute = null;\r\n\t\t\t\t try {\r\n\t\t\t\t\tprofileAttribute = new ProfileAttributeImpl(attributeName,method.getReturnType());\r\n\t\t\t\t } catch (Throwable e) {\r\n\t\t\t\t\tthrow new DeploymentException(\"Invalid profile cmp interface attribute getter method definition ( name = \"+attributeName+\" , type = \"+method.getReturnType()+\" )\",e);\r\n\t\t\t\t }\r\n\t\t\t\t if (isSlee11()) {\r\n\t\t\t\t\t for (ProfileCMPFieldDescriptor cmpField : getDescriptor().getProfileCMPInterface().getCmpFields()) {\r\n\t\t\t\t\t\t if (cmpField.getCmpFieldName().equals(attributeName)) {\r\n\t\t\t\t\t\t\t // TODO add index hints ?\r\n\t\t\t\t\t\t\t profileAttribute.setUnique(cmpField.isUnique());\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\t\t\t\t else {\r\n\t\t\t\t\t for (ProfileIndexDescriptor profileIndex : getDescriptor().getIndexedAttributes()) {\r\n\t\t\t\t\t\t if (profileIndex.getName().equals(attributeName)) {\r\n\t\t\t\t\t\t\t profileAttribute.setIndex(true);\r\n\t\t\t\t\t\t\t profileAttribute.setUnique(profileIndex.getUnique());\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\t\t\t\t map.put(attributeName, profileAttribute);\r\n\t\t\t }\r\n\t\t }\r\n\t\t profileAttributeMap = Collections.unmodifiableMap(map);\t\t\r\n\t}", "language": "java", "code": "private void buildProfileAttributeMap() throws DeploymentException {\r\n\t\t HashMap<String, ProfileAttribute> map = new HashMap<String, ProfileAttribute>();\r\n\t\t Class<?> cmpInterface = getProfileCmpInterfaceClass();\r\n\t\t String attributeGetterMethodPrefix = \"get\";\r\n\t\t for (Method method : cmpInterface.getMethods()) {\r\n\t\t\t if (!method.getDeclaringClass().equals(Object.class) && method.getName().startsWith(attributeGetterMethodPrefix)) {\r\n\t\t\t\t String attributeName = method.getName().substring(attributeGetterMethodPrefix.length());\r\n\t\t\t\t switch (attributeName.length()) {\r\n\t\t\t\t case 0:\r\n\t\t\t\t\tthrow new DeploymentException(\"the profile cmp interface class has an invalid attribute getter method name > \"+method.getName());\t\t\t\t\t\r\n\t\t\t\t case 1:\r\n\t\t\t\t\tattributeName = attributeName.toLowerCase();\r\n\t\t\t\t\tbreak;\t\t\t\t\t\r\n\t\t\t\t default:\r\n\t\t\t\t\tattributeName = attributeName.substring(0, 1).toLowerCase() + attributeName.substring(1);\r\n\t\t\t\t \tbreak;\r\n\t\t\t\t }\t\t\t\r\n\t\t\t\t ProfileAttributeImpl profileAttribute = null;\r\n\t\t\t\t try {\r\n\t\t\t\t\tprofileAttribute = new ProfileAttributeImpl(attributeName,method.getReturnType());\r\n\t\t\t\t } catch (Throwable e) {\r\n\t\t\t\t\tthrow new DeploymentException(\"Invalid profile cmp interface attribute getter method definition ( name = \"+attributeName+\" , type = \"+method.getReturnType()+\" )\",e);\r\n\t\t\t\t }\r\n\t\t\t\t if (isSlee11()) {\r\n\t\t\t\t\t for (ProfileCMPFieldDescriptor cmpField : getDescriptor().getProfileCMPInterface().getCmpFields()) {\r\n\t\t\t\t\t\t if (cmpField.getCmpFieldName().equals(attributeName)) {\r\n\t\t\t\t\t\t\t // TODO add index hints ?\r\n\t\t\t\t\t\t\t profileAttribute.setUnique(cmpField.isUnique());\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\t\t\t\t else {\r\n\t\t\t\t\t for (ProfileIndexDescriptor profileIndex : getDescriptor().getIndexedAttributes()) {\r\n\t\t\t\t\t\t if (profileIndex.getName().equals(attributeName)) {\r\n\t\t\t\t\t\t\t profileAttribute.setIndex(true);\r\n\t\t\t\t\t\t\t profileAttribute.setUnique(profileIndex.getUnique());\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t }\r\n\t\t\t\t }\r\n\t\t\t\t map.put(attributeName, profileAttribute);\r\n\t\t\t }\r\n\t\t }\r\n\t\t profileAttributeMap = Collections.unmodifiableMap(map);\t\t\r\n\t}", "code_tokens": ["private", "void", "buildProfileAttributeMap", "(", ")", "throws", "DeploymentException", "{", "HashMap", "<", "String", ",", "ProfileAttribute", ">", "map", "=", "new", "HashMap", "<", "String", ",", "ProfileAttribute", ">", "(", ")", ";", "Class", "<", "?", ">", "cmpInterface", "=", "getProfileCmpInterfaceClass", "(", ")", ";", "String", "attributeGetterMethodPrefix", "=", "\"get\"", ";", "for", "(", "Method", "method", ":", "cmpInterface", ".", "getMethods", "(", ")", ")", "{", "if", "(", "!", "method", ".", "getDeclaringClass", "(", ")", ".", "equals", "(", "Object", ".", "class", ")", "&&", "method", ".", "getName", "(", ")", ".", "startsWith", "(", "attributeGetterMethodPrefix", ")", ")", "{", "String", "attributeName", "=", "method", ".", "getName", "(", ")", ".", "substring", "(", "attributeGetterMethodPrefix", ".", "length", "(", ")", ")", ";", "switch", "(", "attributeName", ".", "length", "(", ")", ")", "{", "case", "0", ":", "throw", "new", "DeploymentException", "(", "\"the profile cmp interface class has an invalid attribute getter method name > \"", "+", "method", ".", "getName", "(", ")", ")", ";", "case", "1", ":", "attributeName", "=", "attributeName", ".", "toLowerCase", "(", ")", ";", "break", ";", "default", ":", "attributeName", "=", "attributeName", ".", "substring", "(", "0", ",", "1", ")", ".", "toLowerCase", "(", ")", "+", "attributeName", ".", "substring", "(", "1", ")", ";", "break", ";", "}", "ProfileAttributeImpl", "profileAttribute", "=", "null", ";", "try", "{", "profileAttribute", "=", "new", "ProfileAttributeImpl", "(", "attributeName", ",", "method", ".", "getReturnType", "(", ")", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "DeploymentException", "(", "\"Invalid profile cmp interface attribute getter method definition ( name = \"", "+", "attributeName", "+", "\" , type = \"", "+", "method", ".", "getReturnType", "(", ")", "+", "\" )\"", ",", "e", ")", ";", "}", "if", "(", "isSlee11", "(", ")", ")", "{", "for", "(", "ProfileCMPFieldDescriptor", "cmpField", ":", "getDescriptor", "(", ")", ".", "getProfileCMPInterface", "(", ")", ".", "getCmpFields", "(", ")", ")", "{", "if", "(", "cmpField", ".", "getCmpFieldName", "(", ")", ".", "equals", "(", "attributeName", ")", ")", "{", "// TODO add index hints ?\r", "profileAttribute", ".", "setUnique", "(", "cmpField", ".", "isUnique", "(", ")", ")", ";", "}", "}", "}", "else", "{", "for", "(", "ProfileIndexDescriptor", "profileIndex", ":", "getDescriptor", "(", ")", ".", "getIndexedAttributes", "(", ")", ")", "{", "if", "(", "profileIndex", ".", "getName", "(", ")", ".", "equals", "(", "attributeName", ")", ")", "{", "profileAttribute", ".", "setIndex", "(", "true", ")", ";", "profileAttribute", ".", "setUnique", "(", "profileIndex", ".", "getUnique", "(", ")", ")", ";", "}", "}", "}", "map", ".", "put", "(", "attributeName", ",", "profileAttribute", ")", ";", "}", "}", "profileAttributeMap", "=", "Collections", ".", "unmodifiableMap", "(", "map", ")", ";", "}"], "docstring": "Builds the profile attribute map using the cmp interface class\n@throws DeploymentException", "docstring_tokens": ["Builds", "the", "profile", "attribute", "map", "using", "the", "cmp", "interface", "class"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/ProfileSpecificationComponentImpl.java#L181-L224", "partition": "test", "index": 7018, "time": "2009-02-02 14:55:27"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/validator/ClassUtils.java", "func_name": "ClassUtils.getAllInterfacesMethods", "original_string": "public static Map<String, Method> getAllInterfacesMethods(Class xInterfaceClass, Set<String> ignore) {\n\t\tHashMap<String, Method> abstractMethods = new HashMap<String, Method>();\n\t\tMethod[] methods = null;\n\t\tClass[] superInterfaces;\n\n\t\tsuperInterfaces = xInterfaceClass.getInterfaces();\n\n\t\tfor (Class superInterface : superInterfaces) {\n\t\t\tif (!ignore.contains(superInterface.getName()))\n\t\t\t\tabstractMethods.putAll(getAllInterfacesMethods(superInterface, ignore));\n\t\t}\n\n\t\tmethods = xInterfaceClass.getDeclaredMethods();\n\t\tfor (int i = 0; i < methods.length; i++) {\n\t\t\tabstractMethods.put(getMethodKey(methods[i]), methods[i]);\n\t\t}\n\n\t\treturn abstractMethods;\n\t}", "language": "java", "code": "public static Map<String, Method> getAllInterfacesMethods(Class xInterfaceClass, Set<String> ignore) {\n\t\tHashMap<String, Method> abstractMethods = new HashMap<String, Method>();\n\t\tMethod[] methods = null;\n\t\tClass[] superInterfaces;\n\n\t\tsuperInterfaces = xInterfaceClass.getInterfaces();\n\n\t\tfor (Class superInterface : superInterfaces) {\n\t\t\tif (!ignore.contains(superInterface.getName()))\n\t\t\t\tabstractMethods.putAll(getAllInterfacesMethods(superInterface, ignore));\n\t\t}\n\n\t\tmethods = xInterfaceClass.getDeclaredMethods();\n\t\tfor (int i = 0; i < methods.length; i++) {\n\t\t\tabstractMethods.put(getMethodKey(methods[i]), methods[i]);\n\t\t}\n\n\t\treturn abstractMethods;\n\t}", "code_tokens": ["public", "static", "Map", "<", "String", ",", "Method", ">", "getAllInterfacesMethods", "(", "Class", "xInterfaceClass", ",", "Set", "<", "String", ">", "ignore", ")", "{", "HashMap", "<", "String", ",", "Method", ">", "abstractMethods", "=", "new", "HashMap", "<", "String", ",", "Method", ">", "(", ")", ";", "Method", "[", "]", "methods", "=", "null", ";", "Class", "[", "]", "superInterfaces", ";", "superInterfaces", "=", "xInterfaceClass", ".", "getInterfaces", "(", ")", ";", "for", "(", "Class", "superInterface", ":", "superInterfaces", ")", "{", "if", "(", "!", "ignore", ".", "contains", "(", "superInterface", ".", "getName", "(", ")", ")", ")", "abstractMethods", ".", "putAll", "(", "getAllInterfacesMethods", "(", "superInterface", ",", "ignore", ")", ")", ";", "}", "methods", "=", "xInterfaceClass", ".", "getDeclaredMethods", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "methods", ".", "length", ";", "i", "++", ")", "{", "abstractMethods", ".", "put", "(", "getMethodKey", "(", "methods", "[", "i", "]", ")", ",", "methods", "[", "i", "]", ")", ";", "}", "return", "abstractMethods", ";", "}"], "docstring": "Returns methods of this interface and all super interfaces\n\n@param ctInterfaceClass\n@return", "docstring_tokens": ["Returns", "methods", "of", "this", "interface", "and", "all", "super", "interfaces"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/validator/ClassUtils.java#L151-L169", "partition": "test", "index": 7131, "time": "2009-02-02 14:55:27"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/validator/ClassUtils.java", "func_name": "ClassUtils.checkInterfaces", "original_string": "public static Class checkInterfaces(Class classOrInterfaceWithInterfaces, String interfaceSearched) {\n\t\tClass returnValue = null;\n\n\t\tif (classOrInterfaceWithInterfaces.getName().compareTo(interfaceSearched) == 0) {\n\t\t\treturn classOrInterfaceWithInterfaces;\n\n\t\t}\n\t\t// we do check only on get interfaces\n\t\tfor (Class iface : classOrInterfaceWithInterfaces.getInterfaces()) {\n\t\t\tif (iface.getName().compareTo(interfaceSearched) == 0) {\n\t\t\t\treturnValue = iface;\n\n\t\t\t} else {\n\t\t\t\treturnValue = checkInterfaces(iface, interfaceSearched);\n\t\t\t}\n\n\t\t\tif (returnValue != null)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!classOrInterfaceWithInterfaces.isInterface() && returnValue == null) {\n\t\t\tClass superClass = classOrInterfaceWithInterfaces.getSuperclass();\n\t\t\tif (superClass != null) {\n\t\t\t\treturnValue = checkInterfaces(superClass, interfaceSearched);\n\t\t\t}\n\t\t}\n\n\t\treturn returnValue;\n\t}", "language": "java", "code": "public static Class checkInterfaces(Class classOrInterfaceWithInterfaces, String interfaceSearched) {\n\t\tClass returnValue = null;\n\n\t\tif (classOrInterfaceWithInterfaces.getName().compareTo(interfaceSearched) == 0) {\n\t\t\treturn classOrInterfaceWithInterfaces;\n\n\t\t}\n\t\t// we do check only on get interfaces\n\t\tfor (Class iface : classOrInterfaceWithInterfaces.getInterfaces()) {\n\t\t\tif (iface.getName().compareTo(interfaceSearched) == 0) {\n\t\t\t\treturnValue = iface;\n\n\t\t\t} else {\n\t\t\t\treturnValue = checkInterfaces(iface, interfaceSearched);\n\t\t\t}\n\n\t\t\tif (returnValue != null)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!classOrInterfaceWithInterfaces.isInterface() && returnValue == null) {\n\t\t\tClass superClass = classOrInterfaceWithInterfaces.getSuperclass();\n\t\t\tif (superClass != null) {\n\t\t\t\treturnValue = checkInterfaces(superClass, interfaceSearched);\n\t\t\t}\n\t\t}\n\n\t\treturn returnValue;\n\t}", "code_tokens": ["public", "static", "Class", "checkInterfaces", "(", "Class", "classOrInterfaceWithInterfaces", ",", "String", "interfaceSearched", ")", "{", "Class", "returnValue", "=", "null", ";", "if", "(", "classOrInterfaceWithInterfaces", ".", "getName", "(", ")", ".", "compareTo", "(", "interfaceSearched", ")", "==", "0", ")", "{", "return", "classOrInterfaceWithInterfaces", ";", "}", "// we do check only on get interfaces", "for", "(", "Class", "iface", ":", "classOrInterfaceWithInterfaces", ".", "getInterfaces", "(", ")", ")", "{", "if", "(", "iface", ".", "getName", "(", ")", ".", "compareTo", "(", "interfaceSearched", ")", "==", "0", ")", "{", "returnValue", "=", "iface", ";", "}", "else", "{", "returnValue", "=", "checkInterfaces", "(", "iface", ",", "interfaceSearched", ")", ";", "}", "if", "(", "returnValue", "!=", "null", ")", "break", ";", "}", "if", "(", "!", "classOrInterfaceWithInterfaces", ".", "isInterface", "(", ")", "&&", "returnValue", "==", "null", ")", "{", "Class", "superClass", "=", "classOrInterfaceWithInterfaces", ".", "getSuperclass", "(", ")", ";", "if", "(", "superClass", "!=", "null", ")", "{", "returnValue", "=", "checkInterfaces", "(", "superClass", ",", "interfaceSearched", ")", ";", "}", "}", "return", "returnValue", ";", "}"], "docstring": "Searches for provided interface in passed Class object - it can be class\nor interface. If it finds, it return instance of it.\n\n@param classOrInterfaceWithInterfaces\n@param interfaceSearched\n@return", "docstring_tokens": ["Searches", "for", "provided", "interface", "in", "passed", "Class", "object", "-", "it", "can", "be", "class", "or", "interface", ".", "If", "it", "finds", "it", "return", "instance", "of", "it", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/validator/ClassUtils.java#L70-L98", "partition": "test", "index": 7130, "time": "2009-02-03 19:07:13"}
{"repo": "RestComm/jain-slee", "path": "container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java", "func_name": "SleeTransactionImpl.beforeAsyncOperation", "original_string": "private void beforeAsyncOperation() throws IllegalStateException,\n\t\t\tSecurityException {\n\t\ttry {\n\t\t\tint status = transaction.getStatus();\n\t\t\tif (asyncOperationInitiated.getAndSet(true) || (status != Status.STATUS_ACTIVE\n\t\t\t\t\t&& status != Status.STATUS_MARKED_ROLLBACK)) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"There is no active tx, tx is in state: \" + status);\n\t\t\t}\n\t\t\tsuspendIfAssoaciatedWithThread();\n\t\t} catch (SystemException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}", "language": "java", "code": "private void beforeAsyncOperation() throws IllegalStateException,\n\t\t\tSecurityException {\n\t\ttry {\n\t\t\tint status = transaction.getStatus();\n\t\t\tif (asyncOperationInitiated.getAndSet(true) || (status != Status.STATUS_ACTIVE\n\t\t\t\t\t&& status != Status.STATUS_MARKED_ROLLBACK)) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"There is no active tx, tx is in state: \" + status);\n\t\t\t}\n\t\t\tsuspendIfAssoaciatedWithThread();\n\t\t} catch (SystemException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}", "code_tokens": ["private", "void", "beforeAsyncOperation", "(", ")", "throws", "IllegalStateException", ",", "SecurityException", "{", "try", "{", "int", "status", "=", "transaction", ".", "getStatus", "(", ")", ";", "if", "(", "asyncOperationInitiated", ".", "getAndSet", "(", "true", ")", "||", "(", "status", "!=", "Status", ".", "STATUS_ACTIVE", "&&", "status", "!=", "Status", ".", "STATUS_MARKED_ROLLBACK", ")", ")", "{", "throw", "new", "IllegalStateException", "(", "\"There is no active tx, tx is in state: \"", "+", "status", ")", ";", "}", "suspendIfAssoaciatedWithThread", "(", ")", ";", "}", "catch", "(", "SystemException", "e", ")", "{", "throw", "new", "IllegalStateException", "(", "e", ")", ";", "}", "}"], "docstring": "Verifies if the wrapped transaction is active and if dissociates it from\nthe thread if needed\n\n@throws IllegalStateException\n@throws SecurityException", "docstring_tokens": ["Verifies", "if", "the", "wrapped", "transaction", "is", "active", "and", "if", "dissociates", "it", "from", "the", "thread", "if", "needed"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java#L127-L140", "partition": "test", "index": 6939, "time": "2009-02-04 00:10:11"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/AbstractSleeComponent.java", "func_name": "AbstractSleeComponent.setDeployableUnit", "original_string": "public void setDeployableUnit(DeployableUnit deployableUnit)\n\t\t\tthrows AlreadyDeployedException {\n\t\tif (this.deployableUnit != null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"deployable unit already set. du = \" + this.deployableUnit);\n\t\t}\n\t\tthis.deployableUnit = deployableUnit;\n\t\tif (!addToDeployableUnit()) {\n\t\t\tthrow new AlreadyDeployedException(\n\t\t\t\t\t\"unable to install du having multiple components with id \"\n\t\t\t\t\t\t\t+ getComponentID());\n\t\t}\n\t}", "language": "java", "code": "public void setDeployableUnit(DeployableUnit deployableUnit)\n\t\t\tthrows AlreadyDeployedException {\n\t\tif (this.deployableUnit != null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"deployable unit already set. du = \" + this.deployableUnit);\n\t\t}\n\t\tthis.deployableUnit = deployableUnit;\n\t\tif (!addToDeployableUnit()) {\n\t\t\tthrow new AlreadyDeployedException(\n\t\t\t\t\t\"unable to install du having multiple components with id \"\n\t\t\t\t\t\t\t+ getComponentID());\n\t\t}\n\t}", "code_tokens": ["public", "void", "setDeployableUnit", "(", "DeployableUnit", "deployableUnit", ")", "throws", "AlreadyDeployedException", "{", "if", "(", "this", ".", "deployableUnit", "!=", "null", ")", "{", "throw", "new", "IllegalStateException", "(", "\"deployable unit already set. du = \"", "+", "this", ".", "deployableUnit", ")", ";", "}", "this", ".", "deployableUnit", "=", "deployableUnit", ";", "if", "(", "!", "addToDeployableUnit", "(", ")", ")", "{", "throw", "new", "AlreadyDeployedException", "(", "\"unable to install du having multiple components with id \"", "+", "getComponentID", "(", ")", ")", ";", "}", "}"], "docstring": "Specifies the the Deployable Unit this component belongs. This method\nalso sets the reverse relation, adding the component to the deployable\nunit\n\n@param deployableUnit\n@throws AlreadyDeployedException\nif a component with same id already exists in the du\n@throws IllegalStateException\nif this method is invoked and the deployable unit was already\nset before", "docstring_tokens": ["Specifies", "the", "the", "Deployable", "Unit", "this", "component", "belongs", ".", "This", "method", "also", "sets", "the", "reverse", "relation", "adding", "the", "component", "to", "the", "deployable", "unit"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/AbstractSleeComponent.java#L203-L215", "partition": "test", "index": 7127, "time": "2009-02-11 12:26:09"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitJarComponentBuilder.java", "func_name": "DeployableUnitJarComponentBuilder.pipeStream", "original_string": "private void pipeStream(InputStream is, OutputStream os) throws IOException {\n\t\tsynchronized (buffer) {\n\t\t\ttry {\n\t\t\t\tfor (int bytesRead = is.read(buffer); bytesRead != -1; bytesRead = is\n\t\t\t\t\t\t.read(buffer))\n\t\t\t\t\tos.write(buffer, 0, bytesRead);\n\t\t\t\tis.close();\n\t\t\t\tos.close();\n\t\t\t} catch (IOException ioe) {\n\t\t\t\ttry {\n\t\t\t\t\tis.close();\n\t\t\t\t} catch (Exception ioexc) {/* do sth? */\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tos.close();\n\t\t\t\t} catch (Exception ioexc) {/* do sth? */\n\t\t\t\t}\n\t\t\t\tthrow ioe;\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private void pipeStream(InputStream is, OutputStream os) throws IOException {\n\t\tsynchronized (buffer) {\n\t\t\ttry {\n\t\t\t\tfor (int bytesRead = is.read(buffer); bytesRead != -1; bytesRead = is\n\t\t\t\t\t\t.read(buffer))\n\t\t\t\t\tos.write(buffer, 0, bytesRead);\n\t\t\t\tis.close();\n\t\t\t\tos.close();\n\t\t\t} catch (IOException ioe) {\n\t\t\t\ttry {\n\t\t\t\t\tis.close();\n\t\t\t\t} catch (Exception ioexc) {/* do sth? */\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tos.close();\n\t\t\t\t} catch (Exception ioexc) {/* do sth? */\n\t\t\t\t}\n\t\t\t\tthrow ioe;\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "void", "pipeStream", "(", "InputStream", "is", ",", "OutputStream", "os", ")", "throws", "IOException", "{", "synchronized", "(", "buffer", ")", "{", "try", "{", "for", "(", "int", "bytesRead", "=", "is", ".", "read", "(", "buffer", ")", ";", "bytesRead", "!=", "-", "1", ";", "bytesRead", "=", "is", ".", "read", "(", "buffer", ")", ")", "os", ".", "write", "(", "buffer", ",", "0", ",", "bytesRead", ")", ";", "is", ".", "close", "(", ")", ";", "os", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "ioe", ")", "{", "try", "{", "is", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "ioexc", ")", "{", "/* do sth? */", "}", "try", "{", "os", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "ioexc", ")", "{", "/* do sth? */", "}", "throw", "ioe", ";", "}", "}", "}"], "docstring": "Pipes data from the input stream into the output stream.\n\n@param is\nThe InputStream where the data is coming from.\n@param os\nThe OutputStream where the data is going to.\n@throws IOException\nif reading or writing the data fails.", "docstring_tokens": ["Pipes", "data", "from", "the", "input", "stream", "into", "the", "output", "stream", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitJarComponentBuilder.java#L470-L490", "partition": "test", "index": 6967, "time": "2009-02-12 19:08:30"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitJarComponentBuilder.java", "func_name": "DeployableUnitJarComponentBuilder.extractJar", "original_string": "private void extractJar(JarFile jarFile, File dstDir)\n\t\t\tthrows DeploymentException {\n\n\t\t// Extract jar contents to a classpath location\n\t\tJarInputStream jarIs = null;\n\t\ttry {\n\t\t\tjarIs = new JarInputStream(new BufferedInputStream(\n\t\t\t\t\tnew FileInputStream(jarFile.getName())));\n\n\t\t\tfor (JarEntry entry = jarIs.getNextJarEntry(); jarIs.available() > 0\n\t\t\t\t\t&& entry != null; entry = jarIs.getNextJarEntry()) {\n\t\t\t\tlogger.trace(\"jar entry = \" + entry.getName());\n\n\t\t\t\tif (entry.isDirectory()) {\n\t\t\t\t\t// Create jar directories.\n\t\t\t\t\tFile dir = new File(dstDir, entry.getName());\n\t\t\t\t\tif (!dir.exists()) {\n\t\t\t\t\t\tif (!dir.mkdirs()) {\n\t\t\t\t\t\t\tlogger.debug(\"Failed to create directory \"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t\t\tthrow new IOException(\"Failed to create directory \"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tlogger.trace(\"Created directory\"\n\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t} else // unzip files\n\t\t\t\t{\n\t\t\t\t\tFile file = new File(dstDir, entry.getName());\n\t\t\t\t\tFile dir = file.getParentFile();\n\t\t\t\t\tif (!dir.exists()) {\n\t\t\t\t\t\tif (!dir.mkdirs()) {\n\t\t\t\t\t\t\tlogger.debug(\"Failed to create directory \"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t\t\tthrow new IOException(\"Failed to create directory \"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tlogger.trace(\"Created directory\"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t}\n\t\t\t\t\tpipeStream(jarFile.getInputStream(entry),\n\t\t\t\t\t\t\tnew FileOutputStream(file));\n\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new DeploymentException(\"failed to extract jar file \"\n\t\t\t\t\t+ jarFile.getName());\n\t\t} finally {\n\t\t\tif (jarIs != null) {\n\t\t\t\ttry {\n\t\t\t\t\tjarIs.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlogger.error(\"failed to close jar input stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}", "language": "java", "code": "private void extractJar(JarFile jarFile, File dstDir)\n\t\t\tthrows DeploymentException {\n\n\t\t// Extract jar contents to a classpath location\n\t\tJarInputStream jarIs = null;\n\t\ttry {\n\t\t\tjarIs = new JarInputStream(new BufferedInputStream(\n\t\t\t\t\tnew FileInputStream(jarFile.getName())));\n\n\t\t\tfor (JarEntry entry = jarIs.getNextJarEntry(); jarIs.available() > 0\n\t\t\t\t\t&& entry != null; entry = jarIs.getNextJarEntry()) {\n\t\t\t\tlogger.trace(\"jar entry = \" + entry.getName());\n\n\t\t\t\tif (entry.isDirectory()) {\n\t\t\t\t\t// Create jar directories.\n\t\t\t\t\tFile dir = new File(dstDir, entry.getName());\n\t\t\t\t\tif (!dir.exists()) {\n\t\t\t\t\t\tif (!dir.mkdirs()) {\n\t\t\t\t\t\t\tlogger.debug(\"Failed to create directory \"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t\t\tthrow new IOException(\"Failed to create directory \"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tlogger.trace(\"Created directory\"\n\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t} else // unzip files\n\t\t\t\t{\n\t\t\t\t\tFile file = new File(dstDir, entry.getName());\n\t\t\t\t\tFile dir = file.getParentFile();\n\t\t\t\t\tif (!dir.exists()) {\n\t\t\t\t\t\tif (!dir.mkdirs()) {\n\t\t\t\t\t\t\tlogger.debug(\"Failed to create directory \"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t\t\tthrow new IOException(\"Failed to create directory \"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tlogger.trace(\"Created directory\"\n\t\t\t\t\t\t\t\t\t+ dir.getAbsolutePath());\n\t\t\t\t\t}\n\t\t\t\t\tpipeStream(jarFile.getInputStream(entry),\n\t\t\t\t\t\t\tnew FileOutputStream(file));\n\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new DeploymentException(\"failed to extract jar file \"\n\t\t\t\t\t+ jarFile.getName());\n\t\t} finally {\n\t\t\tif (jarIs != null) {\n\t\t\t\ttry {\n\t\t\t\t\tjarIs.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tlogger.error(\"failed to close jar input stream\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}", "code_tokens": ["private", "void", "extractJar", "(", "JarFile", "jarFile", ",", "File", "dstDir", ")", "throws", "DeploymentException", "{", "// Extract jar contents to a classpath location", "JarInputStream", "jarIs", "=", "null", ";", "try", "{", "jarIs", "=", "new", "JarInputStream", "(", "new", "BufferedInputStream", "(", "new", "FileInputStream", "(", "jarFile", ".", "getName", "(", ")", ")", ")", ")", ";", "for", "(", "JarEntry", "entry", "=", "jarIs", ".", "getNextJarEntry", "(", ")", ";", "jarIs", ".", "available", "(", ")", ">", "0", "&&", "entry", "!=", "null", ";", "entry", "=", "jarIs", ".", "getNextJarEntry", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"jar entry = \"", "+", "entry", ".", "getName", "(", ")", ")", ";", "if", "(", "entry", ".", "isDirectory", "(", ")", ")", "{", "// Create jar directories.", "File", "dir", "=", "new", "File", "(", "dstDir", ",", "entry", ".", "getName", "(", ")", ")", ";", "if", "(", "!", "dir", ".", "exists", "(", ")", ")", "{", "if", "(", "!", "dir", ".", "mkdirs", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Failed to create directory \"", "+", "dir", ".", "getAbsolutePath", "(", ")", ")", ";", "throw", "new", "IOException", "(", "\"Failed to create directory \"", "+", "dir", ".", "getAbsolutePath", "(", ")", ")", ";", "}", "}", "else", "logger", ".", "trace", "(", "\"Created directory\"", "+", "dir", ".", "getAbsolutePath", "(", ")", ")", ";", "}", "else", "// unzip files", "{", "File", "file", "=", "new", "File", "(", "dstDir", ",", "entry", ".", "getName", "(", ")", ")", ";", "File", "dir", "=", "file", ".", "getParentFile", "(", ")", ";", "if", "(", "!", "dir", ".", "exists", "(", ")", ")", "{", "if", "(", "!", "dir", ".", "mkdirs", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Failed to create directory \"", "+", "dir", ".", "getAbsolutePath", "(", ")", ")", ";", "throw", "new", "IOException", "(", "\"Failed to create directory \"", "+", "dir", ".", "getAbsolutePath", "(", ")", ")", ";", "}", "else", "logger", ".", "trace", "(", "\"Created directory\"", "+", "dir", ".", "getAbsolutePath", "(", ")", ")", ";", "}", "pipeStream", "(", "jarFile", ".", "getInputStream", "(", "entry", ")", ",", "new", "FileOutputStream", "(", "file", ")", ")", ";", "}", "}", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "DeploymentException", "(", "\"failed to extract jar file \"", "+", "jarFile", ".", "getName", "(", ")", ")", ";", "}", "finally", "{", "if", "(", "jarIs", "!=", "null", ")", "{", "try", "{", "jarIs", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "logger", ".", "error", "(", "\"failed to close jar input stream\"", ",", "e", ")", ";", "}", "}", "}", "}"], "docstring": "This method will extract all the files in the jar file\n\n@param jarFile\nthe jar file\n@param dstDir\nthe destination where files in the jar file be extracted\n@param deployableUnitID\n@return\n@throws DeploymentException\nfailed to extract files", "docstring_tokens": ["This", "method", "will", "extract", "all", "the", "files", "in", "the", "jar", "file"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitJarComponentBuilder.java#L398-L456", "partition": "test", "index": 6966, "time": "2009-02-12 19:08:30"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitServiceComponentBuilder.java", "func_name": "DeployableUnitServiceComponentBuilder.buildComponents", "original_string": "public List<ServiceComponentImpl> buildComponents(String serviceDescriptorFileName, JarFile deployableUnitJar) throws DeploymentException {\n    \t\n\t\t// make component jar entry\n\t\tJarEntry componentDescriptor = deployableUnitJar.getJarEntry(serviceDescriptorFileName);\n\t\tInputStream componentDescriptorInputStream = null;\n\t\tList<ServiceComponentImpl> result = new ArrayList<ServiceComponentImpl>();\n    \ttry {\n    \t\tcomponentDescriptorInputStream = deployableUnitJar.getInputStream(componentDescriptor);\n    \t\tServiceDescriptorFactoryImpl descriptorFactory = componentManagement.getComponentDescriptorFactory().getServiceDescriptorFactory();\n    \t\tfor (ServiceDescriptorImpl descriptor : descriptorFactory.parse(componentDescriptorInputStream)) {\n    \t\t\tresult.add(new ServiceComponentImpl(descriptor));\n    \t\t}\n    \t} catch (IOException e) {\n    \t\tthrow new DeploymentException(\"failed to parse service descriptor from \"+componentDescriptor.getName(),e);\n    \t}\n    \tfinally {\n    \t\tif (componentDescriptorInputStream != null) {\n    \t\t\ttry {\n    \t\t\t\tcomponentDescriptorInputStream.close();\n    \t\t\t} catch (IOException e) {\n    \t\t\t\tlogger.error(\"failed to close inputstream of descriptor for jar \"+componentDescriptor.getName());\n    \t\t\t}\n    \t\t}\n    \t}        \n    \treturn result;\n    }", "language": "java", "code": "public List<ServiceComponentImpl> buildComponents(String serviceDescriptorFileName, JarFile deployableUnitJar) throws DeploymentException {\n    \t\n\t\t// make component jar entry\n\t\tJarEntry componentDescriptor = deployableUnitJar.getJarEntry(serviceDescriptorFileName);\n\t\tInputStream componentDescriptorInputStream = null;\n\t\tList<ServiceComponentImpl> result = new ArrayList<ServiceComponentImpl>();\n    \ttry {\n    \t\tcomponentDescriptorInputStream = deployableUnitJar.getInputStream(componentDescriptor);\n    \t\tServiceDescriptorFactoryImpl descriptorFactory = componentManagement.getComponentDescriptorFactory().getServiceDescriptorFactory();\n    \t\tfor (ServiceDescriptorImpl descriptor : descriptorFactory.parse(componentDescriptorInputStream)) {\n    \t\t\tresult.add(new ServiceComponentImpl(descriptor));\n    \t\t}\n    \t} catch (IOException e) {\n    \t\tthrow new DeploymentException(\"failed to parse service descriptor from \"+componentDescriptor.getName(),e);\n    \t}\n    \tfinally {\n    \t\tif (componentDescriptorInputStream != null) {\n    \t\t\ttry {\n    \t\t\t\tcomponentDescriptorInputStream.close();\n    \t\t\t} catch (IOException e) {\n    \t\t\t\tlogger.error(\"failed to close inputstream of descriptor for jar \"+componentDescriptor.getName());\n    \t\t\t}\n    \t\t}\n    \t}        \n    \treturn result;\n    }", "code_tokens": ["public", "List", "<", "ServiceComponentImpl", ">", "buildComponents", "(", "String", "serviceDescriptorFileName", ",", "JarFile", "deployableUnitJar", ")", "throws", "DeploymentException", "{", "// make component jar entry", "JarEntry", "componentDescriptor", "=", "deployableUnitJar", ".", "getJarEntry", "(", "serviceDescriptorFileName", ")", ";", "InputStream", "componentDescriptorInputStream", "=", "null", ";", "List", "<", "ServiceComponentImpl", ">", "result", "=", "new", "ArrayList", "<", "ServiceComponentImpl", ">", "(", ")", ";", "try", "{", "componentDescriptorInputStream", "=", "deployableUnitJar", ".", "getInputStream", "(", "componentDescriptor", ")", ";", "ServiceDescriptorFactoryImpl", "descriptorFactory", "=", "componentManagement", ".", "getComponentDescriptorFactory", "(", ")", ".", "getServiceDescriptorFactory", "(", ")", ";", "for", "(", "ServiceDescriptorImpl", "descriptor", ":", "descriptorFactory", ".", "parse", "(", "componentDescriptorInputStream", ")", ")", "{", "result", ".", "add", "(", "new", "ServiceComponentImpl", "(", "descriptor", ")", ")", ";", "}", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "DeploymentException", "(", "\"failed to parse service descriptor from \"", "+", "componentDescriptor", ".", "getName", "(", ")", ",", "e", ")", ";", "}", "finally", "{", "if", "(", "componentDescriptorInputStream", "!=", "null", ")", "{", "try", "{", "componentDescriptorInputStream", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "logger", ".", "error", "(", "\"failed to close inputstream of descriptor for jar \"", "+", "componentDescriptor", ".", "getName", "(", ")", ")", ";", "}", "}", "}", "return", "result", ";", "}"], "docstring": "Builds a service component contained in the specified du jar file, with the specified and adds it to the specified deployable unit.\n\n@param serviceDescriptorFileName\n@param deployableUnitJar\n@param deployableUnit\n@param documentBuilder\n@throws DeploymentException", "docstring_tokens": ["Builds", "a", "service", "component", "contained", "in", "the", "specified", "du", "jar", "file", "with", "the", "specified", "and", "adds", "it", "to", "the", "specified", "deployable", "unit", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitServiceComponentBuilder.java#L67-L92", "partition": "test", "index": 6940, "time": "2009-02-12 19:08:30"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitBuilderImpl.java", "func_name": "DeployableUnitBuilderImpl.checkDependencies", "original_string": "private void checkDependencies(SleeComponent sleeComponent,\r\n\t\t\tDeployableUnitImpl deployableUnit) throws DependencyException {\r\n\t\tfor (ComponentID componentID : sleeComponent.getDependenciesSet()) {\r\n\t\t\tif (componentID instanceof EventTypeID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((EventTypeID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof LibraryID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((LibraryID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof ProfileSpecificationID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((ProfileSpecificationID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof ResourceAdaptorID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((ResourceAdaptorID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof ResourceAdaptorTypeID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((ResourceAdaptorTypeID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof SbbID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((SbbID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof ServiceID) {\r\n\t\t\t\tthrow new SLEEException(\r\n\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t+ \" depends on a service component \"\r\n\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t}\r\n\t\t}\r\n\t}", "language": "java", "code": "private void checkDependencies(SleeComponent sleeComponent,\r\n\t\t\tDeployableUnitImpl deployableUnit) throws DependencyException {\r\n\t\tfor (ComponentID componentID : sleeComponent.getDependenciesSet()) {\r\n\t\t\tif (componentID instanceof EventTypeID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((EventTypeID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof LibraryID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((LibraryID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof ProfileSpecificationID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((ProfileSpecificationID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof ResourceAdaptorID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((ResourceAdaptorID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof ResourceAdaptorTypeID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((ResourceAdaptorTypeID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof SbbID) {\r\n\t\t\t\tif (deployableUnit.getDeployableUnitRepository()\r\n\t\t\t\t\t\t.getComponentByID((SbbID) componentID) == null) {\r\n\t\t\t\t\tthrow new DependencyException(\r\n\t\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t\t+ \" depends on \"\r\n\t\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t\t}\r\n\t\t\t} else if (componentID instanceof ServiceID) {\r\n\t\t\t\tthrow new SLEEException(\r\n\t\t\t\t\t\t\"Component \"\r\n\t\t\t\t\t\t\t\t+ sleeComponent.getComponentID()\r\n\t\t\t\t\t\t\t\t+ \" depends on a service component \"\r\n\t\t\t\t\t\t\t\t+ componentID\r\n\t\t\t\t\t\t\t\t+ \" which is not available in the component repository or in the deployable unit\");\r\n\t\t\t}\r\n\t\t}\r\n\t}", "code_tokens": ["private", "void", "checkDependencies", "(", "SleeComponent", "sleeComponent", ",", "DeployableUnitImpl", "deployableUnit", ")", "throws", "DependencyException", "{", "for", "(", "ComponentID", "componentID", ":", "sleeComponent", ".", "getDependenciesSet", "(", ")", ")", "{", "if", "(", "componentID", "instanceof", "EventTypeID", ")", "{", "if", "(", "deployableUnit", ".", "getDeployableUnitRepository", "(", ")", ".", "getComponentByID", "(", "(", "EventTypeID", ")", "componentID", ")", "==", "null", ")", "{", "throw", "new", "DependencyException", "(", "\"Component \"", "+", "sleeComponent", ".", "getComponentID", "(", ")", "+", "\" depends on \"", "+", "componentID", "+", "\" which is not available in the component repository or in the deployable unit\"", ")", ";", "}", "}", "else", "if", "(", "componentID", "instanceof", "LibraryID", ")", "{", "if", "(", "deployableUnit", ".", "getDeployableUnitRepository", "(", ")", ".", "getComponentByID", "(", "(", "LibraryID", ")", "componentID", ")", "==", "null", ")", "{", "throw", "new", "DependencyException", "(", "\"Component \"", "+", "sleeComponent", ".", "getComponentID", "(", ")", "+", "\" depends on \"", "+", "componentID", "+", "\" which is not available in the component repository or in the deployable unit\"", ")", ";", "}", "}", "else", "if", "(", "componentID", "instanceof", "ProfileSpecificationID", ")", "{", "if", "(", "deployableUnit", ".", "getDeployableUnitRepository", "(", ")", ".", "getComponentByID", "(", "(", "ProfileSpecificationID", ")", "componentID", ")", "==", "null", ")", "{", "throw", "new", "DependencyException", "(", "\"Component \"", "+", "sleeComponent", ".", "getComponentID", "(", ")", "+", "\" depends on \"", "+", "componentID", "+", "\" which is not available in the component repository or in the deployable unit\"", ")", ";", "}", "}", "else", "if", "(", "componentID", "instanceof", "ResourceAdaptorID", ")", "{", "if", "(", "deployableUnit", ".", "getDeployableUnitRepository", "(", ")", ".", "getComponentByID", "(", "(", "ResourceAdaptorID", ")", "componentID", ")", "==", "null", ")", "{", "throw", "new", "DependencyException", "(", "\"Component \"", "+", "sleeComponent", ".", "getComponentID", "(", ")", "+", "\" depends on \"", "+", "componentID", "+", "\" which is not available in the component repository or in the deployable unit\"", ")", ";", "}", "}", "else", "if", "(", "componentID", "instanceof", "ResourceAdaptorTypeID", ")", "{", "if", "(", "deployableUnit", ".", "getDeployableUnitRepository", "(", ")", ".", "getComponentByID", "(", "(", "ResourceAdaptorTypeID", ")", "componentID", ")", "==", "null", ")", "{", "throw", "new", "DependencyException", "(", "\"Component \"", "+", "sleeComponent", ".", "getComponentID", "(", ")", "+", "\" depends on \"", "+", "componentID", "+", "\" which is not available in the component repository or in the deployable unit\"", ")", ";", "}", "}", "else", "if", "(", "componentID", "instanceof", "SbbID", ")", "{", "if", "(", "deployableUnit", ".", "getDeployableUnitRepository", "(", ")", ".", "getComponentByID", "(", "(", "SbbID", ")", "componentID", ")", "==", "null", ")", "{", "throw", "new", "DependencyException", "(", "\"Component \"", "+", "sleeComponent", ".", "getComponentID", "(", ")", "+", "\" depends on \"", "+", "componentID", "+", "\" which is not available in the component repository or in the deployable unit\"", ")", ";", "}", "}", "else", "if", "(", "componentID", "instanceof", "ServiceID", ")", "{", "throw", "new", "SLEEException", "(", "\"Component \"", "+", "sleeComponent", ".", "getComponentID", "(", ")", "+", "\" depends on a service component \"", "+", "componentID", "+", "\" which is not available in the component repository or in the deployable unit\"", ")", ";", "}", "}", "}"], "docstring": "Checks if all dependencies of a DU component exists\n\n@param sleeComponent\n@param deployableUnit\n@throws DependencyException\nif a dependency is missing", "docstring_tokens": ["Checks", "if", "all", "dependencies", "of", "a", "DU", "component", "exists"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitBuilderImpl.java#L544-L616", "partition": "test", "index": 7135, "time": "2009-02-18 16:56:29"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitBuilderImpl.java", "func_name": "DeployableUnitBuilderImpl.createTempDUDeploymentDir", "original_string": "private File createTempDUDeploymentDir(File deploymentRoot,\r\n\t\t\tDeployableUnitID deployableUnitID) {\r\n\t\ttry {\r\n\t\t\t// first create a dummy file to gurantee uniqueness. I would have\r\n\t\t\t// been nice if the File class had a createTempDir() method\r\n\t\t\t// IVELIN -- do not use jarName here because windows cannot see the\r\n\t\t\t// path (exceeds system limit)\r\n\t\t\tFile tempFile = File.createTempFile(\"restcomm-slee-du-\", \"\",\r\n\t\t\t\t\tdeploymentRoot);\r\n\t\t\tFile tempDUDeploymentDir = new File(tempFile.getAbsolutePath()\r\n\t\t\t\t\t+ \"-contents\");\r\n\t\t\tif (!tempDUDeploymentDir.exists()) {\r\n\t\t\t\ttempDUDeploymentDir.mkdirs();\r\n\t\t\t} else {\r\n\t\t\t\tthrow new SLEEException(\r\n\t\t\t\t\t\t\"Dir \"\r\n\t\t\t\t\t\t\t\t+ tempDUDeploymentDir\r\n\t\t\t\t\t\t\t\t+ \" already exists, unable to create deployment dir for DU \"\r\n\t\t\t\t\t\t\t\t+ deployableUnitID);\r\n\t\t\t}\r\n\t\t\ttempFile.delete();\r\n\t\t\treturn tempDUDeploymentDir;\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new SLEEException(\"Failed to create deployment dir for DU \"\r\n\t\t\t\t\t+ deployableUnitID, e);\r\n\t\t}\r\n\t}", "language": "java", "code": "private File createTempDUDeploymentDir(File deploymentRoot,\r\n\t\t\tDeployableUnitID deployableUnitID) {\r\n\t\ttry {\r\n\t\t\t// first create a dummy file to gurantee uniqueness. I would have\r\n\t\t\t// been nice if the File class had a createTempDir() method\r\n\t\t\t// IVELIN -- do not use jarName here because windows cannot see the\r\n\t\t\t// path (exceeds system limit)\r\n\t\t\tFile tempFile = File.createTempFile(\"restcomm-slee-du-\", \"\",\r\n\t\t\t\t\tdeploymentRoot);\r\n\t\t\tFile tempDUDeploymentDir = new File(tempFile.getAbsolutePath()\r\n\t\t\t\t\t+ \"-contents\");\r\n\t\t\tif (!tempDUDeploymentDir.exists()) {\r\n\t\t\t\ttempDUDeploymentDir.mkdirs();\r\n\t\t\t} else {\r\n\t\t\t\tthrow new SLEEException(\r\n\t\t\t\t\t\t\"Dir \"\r\n\t\t\t\t\t\t\t\t+ tempDUDeploymentDir\r\n\t\t\t\t\t\t\t\t+ \" already exists, unable to create deployment dir for DU \"\r\n\t\t\t\t\t\t\t\t+ deployableUnitID);\r\n\t\t\t}\r\n\t\t\ttempFile.delete();\r\n\t\t\treturn tempDUDeploymentDir;\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new SLEEException(\"Failed to create deployment dir for DU \"\r\n\t\t\t\t\t+ deployableUnitID, e);\r\n\t\t}\r\n\t}", "code_tokens": ["private", "File", "createTempDUDeploymentDir", "(", "File", "deploymentRoot", ",", "DeployableUnitID", "deployableUnitID", ")", "{", "try", "{", "// first create a dummy file to gurantee uniqueness. I would have\r", "// been nice if the File class had a createTempDir() method\r", "// IVELIN -- do not use jarName here because windows cannot see the\r", "// path (exceeds system limit)\r", "File", "tempFile", "=", "File", ".", "createTempFile", "(", "\"restcomm-slee-du-\"", ",", "\"\"", ",", "deploymentRoot", ")", ";", "File", "tempDUDeploymentDir", "=", "new", "File", "(", "tempFile", ".", "getAbsolutePath", "(", ")", "+", "\"-contents\"", ")", ";", "if", "(", "!", "tempDUDeploymentDir", ".", "exists", "(", ")", ")", "{", "tempDUDeploymentDir", ".", "mkdirs", "(", ")", ";", "}", "else", "{", "throw", "new", "SLEEException", "(", "\"Dir \"", "+", "tempDUDeploymentDir", "+", "\" already exists, unable to create deployment dir for DU \"", "+", "deployableUnitID", ")", ";", "}", "tempFile", ".", "delete", "(", ")", ";", "return", "tempDUDeploymentDir", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "SLEEException", "(", "\"Failed to create deployment dir for DU \"", "+", "deployableUnitID", ",", "e", ")", ";", "}", "}"], "docstring": "Creates the directory that will be used for unpacking the child jars for\na given DU.\n\n@param rootDir\n@param sourceUrl\n@throws SLEEException\nif the dir can't be created\n@return", "docstring_tokens": ["Creates", "the", "directory", "that", "will", "be", "used", "for", "unpacking", "the", "child", "jars", "for", "a", "given", "DU", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitBuilderImpl.java#L628-L654", "partition": "test", "index": 7136, "time": "2009-02-18 16:56:29"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/ComponentRepositoryImpl.java", "func_name": "ComponentRepositoryImpl.getReferringComponents", "original_string": "public Set<SleeComponent> getReferringComponents(SleeComponent component) {\n\n\t\tSet<SleeComponent> result = new HashSet<SleeComponent>();\n\t\tfor (EventTypeComponent otherComponent : eventTypeComponents.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (LibraryComponent otherComponent : libraryComponents.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (ProfileSpecificationComponent otherComponent : profileSpecificationComponents\n\t\t\t\t.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (ResourceAdaptorComponent otherComponent : resourceAdaptorComponents\n\t\t\t\t.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (ResourceAdaptorTypeComponent otherComponent : resourceAdaptorTypeComponents\n\t\t\t\t.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (SbbComponent otherComponent : sbbComponents.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (ServiceComponent otherComponent : serviceComponents.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public Set<SleeComponent> getReferringComponents(SleeComponent component) {\n\n\t\tSet<SleeComponent> result = new HashSet<SleeComponent>();\n\t\tfor (EventTypeComponent otherComponent : eventTypeComponents.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (LibraryComponent otherComponent : libraryComponents.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (ProfileSpecificationComponent otherComponent : profileSpecificationComponents\n\t\t\t\t.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (ResourceAdaptorComponent otherComponent : resourceAdaptorComponents\n\t\t\t\t.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (ResourceAdaptorTypeComponent otherComponent : resourceAdaptorTypeComponents\n\t\t\t\t.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (SbbComponent otherComponent : sbbComponents.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (ServiceComponent otherComponent : serviceComponents.values()) {\n\t\t\tif (!otherComponent.getComponentID().equals(\n\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\tif (otherComponent.getDependenciesSet().contains(\n\t\t\t\t\t\tcomponent.getComponentID())) {\n\t\t\t\t\tresult.add(otherComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "Set", "<", "SleeComponent", ">", "getReferringComponents", "(", "SleeComponent", "component", ")", "{", "Set", "<", "SleeComponent", ">", "result", "=", "new", "HashSet", "<", "SleeComponent", ">", "(", ")", ";", "for", "(", "EventTypeComponent", "otherComponent", ":", "eventTypeComponents", ".", "values", "(", ")", ")", "{", "if", "(", "!", "otherComponent", ".", "getComponentID", "(", ")", ".", "equals", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "if", "(", "otherComponent", ".", "getDependenciesSet", "(", ")", ".", "contains", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "result", ".", "add", "(", "otherComponent", ")", ";", "}", "}", "}", "for", "(", "LibraryComponent", "otherComponent", ":", "libraryComponents", ".", "values", "(", ")", ")", "{", "if", "(", "!", "otherComponent", ".", "getComponentID", "(", ")", ".", "equals", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "if", "(", "otherComponent", ".", "getDependenciesSet", "(", ")", ".", "contains", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "result", ".", "add", "(", "otherComponent", ")", ";", "}", "}", "}", "for", "(", "ProfileSpecificationComponent", "otherComponent", ":", "profileSpecificationComponents", ".", "values", "(", ")", ")", "{", "if", "(", "!", "otherComponent", ".", "getComponentID", "(", ")", ".", "equals", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "if", "(", "otherComponent", ".", "getDependenciesSet", "(", ")", ".", "contains", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "result", ".", "add", "(", "otherComponent", ")", ";", "}", "}", "}", "for", "(", "ResourceAdaptorComponent", "otherComponent", ":", "resourceAdaptorComponents", ".", "values", "(", ")", ")", "{", "if", "(", "!", "otherComponent", ".", "getComponentID", "(", ")", ".", "equals", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "if", "(", "otherComponent", ".", "getDependenciesSet", "(", ")", ".", "contains", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "result", ".", "add", "(", "otherComponent", ")", ";", "}", "}", "}", "for", "(", "ResourceAdaptorTypeComponent", "otherComponent", ":", "resourceAdaptorTypeComponents", ".", "values", "(", ")", ")", "{", "if", "(", "!", "otherComponent", ".", "getComponentID", "(", ")", ".", "equals", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "if", "(", "otherComponent", ".", "getDependenciesSet", "(", ")", ".", "contains", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "result", ".", "add", "(", "otherComponent", ")", ";", "}", "}", "}", "for", "(", "SbbComponent", "otherComponent", ":", "sbbComponents", ".", "values", "(", ")", ")", "{", "if", "(", "!", "otherComponent", ".", "getComponentID", "(", ")", ".", "equals", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "if", "(", "otherComponent", ".", "getDependenciesSet", "(", ")", ".", "contains", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "result", ".", "add", "(", "otherComponent", ")", ";", "}", "}", "}", "for", "(", "ServiceComponent", "otherComponent", ":", "serviceComponents", ".", "values", "(", ")", ")", "{", "if", "(", "!", "otherComponent", ".", "getComponentID", "(", ")", ".", "equals", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "if", "(", "otherComponent", ".", "getDependenciesSet", "(", ")", ".", "contains", "(", "component", ".", "getComponentID", "(", ")", ")", ")", "{", "result", ".", "add", "(", "otherComponent", ")", ";", "}", "}", "}", "return", "result", ";", "}"], "docstring": "Retrieves the component ids for components that refers the specified component", "docstring_tokens": ["Retrieves", "the", "component", "ids", "for", "components", "that", "refers", "the", "specified", "component"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/ComponentRepositoryImpl.java#L229-L299", "partition": "test", "index": 6994, "time": "2009-02-23 16:39:57"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/EventTypeComponentImpl.java", "func_name": "EventTypeComponentImpl.getSpecsDescriptor", "original_string": "public javax.slee.management.EventTypeDescriptor getSpecsDescriptor() {\r\n\t\tif (specsDescriptor == null) {\r\n\t\t\tspecsDescriptor = new javax.slee.management.EventTypeDescriptor(getEventTypeID(),getDeployableUnit().getDeployableUnitID(),getDeploymentUnitSource(),descriptor.getLibraryRefs().toArray(new LibraryID[descriptor.getLibraryRefs().size()]),getDescriptor().getEventClassName());\r\n\t\t}\r\n\t\treturn specsDescriptor;\r\n\t}", "language": "java", "code": "public javax.slee.management.EventTypeDescriptor getSpecsDescriptor() {\r\n\t\tif (specsDescriptor == null) {\r\n\t\t\tspecsDescriptor = new javax.slee.management.EventTypeDescriptor(getEventTypeID(),getDeployableUnit().getDeployableUnitID(),getDeploymentUnitSource(),descriptor.getLibraryRefs().toArray(new LibraryID[descriptor.getLibraryRefs().size()]),getDescriptor().getEventClassName());\r\n\t\t}\r\n\t\treturn specsDescriptor;\r\n\t}", "code_tokens": ["public", "javax", ".", "slee", ".", "management", ".", "EventTypeDescriptor", "getSpecsDescriptor", "(", ")", "{", "if", "(", "specsDescriptor", "==", "null", ")", "{", "specsDescriptor", "=", "new", "javax", ".", "slee", ".", "management", ".", "EventTypeDescriptor", "(", "getEventTypeID", "(", ")", ",", "getDeployableUnit", "(", ")", ".", "getDeployableUnitID", "(", ")", ",", "getDeploymentUnitSource", "(", ")", ",", "descriptor", ".", "getLibraryRefs", "(", ")", ".", "toArray", "(", "new", "LibraryID", "[", "descriptor", ".", "getLibraryRefs", "(", ")", ".", "size", "(", ")", "]", ")", ",", "getDescriptor", "(", ")", ".", "getEventClassName", "(", ")", ")", ";", "}", "return", "specsDescriptor", ";", "}"], "docstring": "Retrieves the JAIN SLEE specs event type descriptor\n@return", "docstring_tokens": ["Retrieves", "the", "JAIN", "SLEE", "specs", "event", "type", "descriptor"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/EventTypeComponentImpl.java#L167-L172", "partition": "test", "index": 7035, "time": "2009-02-23 16:39:57"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/AbstractSleeComponent.java", "func_name": "AbstractSleeComponent.getClassPool", "original_string": "public ClassPool getClassPool() {\n\t\tif (classPool == null) {\n\t\t\tif (classLoader == null) {\n\t\t\t\tthrow new IllegalStateException(\"can't init javassit classpool, there is no class loader set for the component\");\n\t\t\t}\n\t\t\tclassPool = new ClassPool();\n\t\t\t// add class path for domain and dependencies\n\t\t\tclassPool.appendClassPath(new LoaderClassPath(classLoaderDomain));\n\t\t\tfor(ClassLoader domainDependencies : classLoaderDomain.getAllDependencies()) {\n\t\t\t\tclassPool.appendClassPath(new LoaderClassPath(domainDependencies));\n\t\t\t}\n\t\t\t// add class path also for slee \n\t\t\tclassPool.appendClassPath(new LoaderClassPath(classLoaderDomain.getParent()));\n\t\t}\t\t\n\t\treturn classPool;\n\t}", "language": "java", "code": "public ClassPool getClassPool() {\n\t\tif (classPool == null) {\n\t\t\tif (classLoader == null) {\n\t\t\t\tthrow new IllegalStateException(\"can't init javassit classpool, there is no class loader set for the component\");\n\t\t\t}\n\t\t\tclassPool = new ClassPool();\n\t\t\t// add class path for domain and dependencies\n\t\t\tclassPool.appendClassPath(new LoaderClassPath(classLoaderDomain));\n\t\t\tfor(ClassLoader domainDependencies : classLoaderDomain.getAllDependencies()) {\n\t\t\t\tclassPool.appendClassPath(new LoaderClassPath(domainDependencies));\n\t\t\t}\n\t\t\t// add class path also for slee \n\t\t\tclassPool.appendClassPath(new LoaderClassPath(classLoaderDomain.getParent()));\n\t\t}\t\t\n\t\treturn classPool;\n\t}", "code_tokens": ["public", "ClassPool", "getClassPool", "(", ")", "{", "if", "(", "classPool", "==", "null", ")", "{", "if", "(", "classLoader", "==", "null", ")", "{", "throw", "new", "IllegalStateException", "(", "\"can't init javassit classpool, there is no class loader set for the component\"", ")", ";", "}", "classPool", "=", "new", "ClassPool", "(", ")", ";", "// add class path for domain and dependencies", "classPool", ".", "appendClassPath", "(", "new", "LoaderClassPath", "(", "classLoaderDomain", ")", ")", ";", "for", "(", "ClassLoader", "domainDependencies", ":", "classLoaderDomain", ".", "getAllDependencies", "(", ")", ")", "{", "classPool", ".", "appendClassPath", "(", "new", "LoaderClassPath", "(", "domainDependencies", ")", ")", ";", "}", "// add class path also for slee ", "classPool", ".", "appendClassPath", "(", "new", "LoaderClassPath", "(", "classLoaderDomain", ".", "getParent", "(", ")", ")", ")", ";", "}", "return", "classPool", ";", "}"], "docstring": "Retrieves the component javassist class pool\n\n@return", "docstring_tokens": ["Retrieves", "the", "component", "javassist", "class", "pool"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/AbstractSleeComponent.java#L127-L142", "partition": "test", "index": 7126, "time": "2009-02-26 15:19:02"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/ClassPool.java", "func_name": "ClassPool.clean", "original_string": "public void clean() {\n\t\tfor (ClassPath classPath : classPaths) {\n\t\t\tclassPool.removeClassPath(classPath);\n\t\t}\t\t\n\t\tfor (String classMade : classesMade) {\n\t\t\ttry {\n\t\t\t\tclassPool.get(classMade).detach();\n\t\t\t} catch (NotFoundException e) {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Failed to detach class \" + classMade\n\t\t\t\t\t\t+ \" from class pool\", e);\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void clean() {\n\t\tfor (ClassPath classPath : classPaths) {\n\t\t\tclassPool.removeClassPath(classPath);\n\t\t}\t\t\n\t\tfor (String classMade : classesMade) {\n\t\t\ttry {\n\t\t\t\tclassPool.get(classMade).detach();\n\t\t\t} catch (NotFoundException e) {\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Failed to detach class \" + classMade\n\t\t\t\t\t\t+ \" from class pool\", e);\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "clean", "(", ")", "{", "for", "(", "ClassPath", "classPath", ":", "classPaths", ")", "{", "classPool", ".", "removeClassPath", "(", "classPath", ")", ";", "}", "for", "(", "String", "classMade", ":", "classesMade", ")", "{", "try", "{", "classPool", ".", "get", "(", "classMade", ")", ".", "detach", "(", ")", ";", "}", "catch", "(", "NotFoundException", "e", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Failed to detach class \"", "+", "classMade", "+", "\" from class pool\"", ",", "e", ")", ";", "}", "}", "}", "}"], "docstring": "cleans up the class pool cache", "docstring_tokens": ["cleans", "up", "the", "class", "pool", "cache"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/ClassPool.java#L127-L141", "partition": "test", "index": 7068, "time": "2009-02-26 15:19:02"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/ServiceComponentImpl.java", "func_name": "ServiceComponentImpl.getSbbIDs", "original_string": "public Set<SbbID> getSbbIDs(ComponentRepository componentRepository) {\r\n\t\tSet<SbbID> result = new HashSet<SbbID>();\r\n\t\tbuildSbbTree(descriptor.getRootSbbID(), result,\r\n\t\t\t\tcomponentRepository);\r\n\t\treturn result;\r\n\t}", "language": "java", "code": "public Set<SbbID> getSbbIDs(ComponentRepository componentRepository) {\r\n\t\tSet<SbbID> result = new HashSet<SbbID>();\r\n\t\tbuildSbbTree(descriptor.getRootSbbID(), result,\r\n\t\t\t\tcomponentRepository);\r\n\t\treturn result;\r\n\t}", "code_tokens": ["public", "Set", "<", "SbbID", ">", "getSbbIDs", "(", "ComponentRepository", "componentRepository", ")", "{", "Set", "<", "SbbID", ">", "result", "=", "new", "HashSet", "<", "SbbID", ">", "(", ")", ";", "buildSbbTree", "(", "descriptor", ".", "getRootSbbID", "(", ")", ",", "result", ",", "componentRepository", ")", ";", "return", "result", ";", "}"], "docstring": "Retrieves the set of sbbs used by this service\n\n@param componentRepository\n@return", "docstring_tokens": ["Retrieves", "the", "set", "of", "sbbs", "used", "by", "this", "service"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/ServiceComponentImpl.java#L191-L196", "partition": "test", "index": 7166, "time": "2009-03-04 12:43:43"}
{"repo": "RestComm/jain-slee", "path": "container/jmx-property-editors/src/main/java/org/mobicents/slee/container/management/jmx/editors/ComponentIDArrayPropertyEditor.java", "func_name": "ComponentIDArrayPropertyEditor.setAsText", "original_string": "public void setAsText(String text ) {\r\n        if ( text == null || text.equals(\"\")) {\r\n            super.setValue( new ComponentID[0]);\r\n        } else {\r\n            java.util.ArrayList results = new java.util.ArrayList();\r\n            // the format for component ID is name vendor version.\r\n            java.util.StringTokenizer st = new java.util.StringTokenizer(text,CID_SEPARATOR,true);\r\n            ComponentIDPropertyEditor cidPropEditor = new ComponentIDPropertyEditor();\r\n            while (st.hasMoreTokens()) {\r\n                cidPropEditor.setAsText(st.nextToken());\r\n                if (st.hasMoreTokens()) {\r\n                \tst.nextToken();\r\n                }\r\n                results.add(cidPropEditor.getValue());\r\n            }\r\n            ComponentID[] cid = new ComponentID[results.size()];\r\n            results.toArray(cid);\r\n            this.setValue(cid);\r\n        }\r\n        \r\n    }", "language": "java", "code": "public void setAsText(String text ) {\r\n        if ( text == null || text.equals(\"\")) {\r\n            super.setValue( new ComponentID[0]);\r\n        } else {\r\n            java.util.ArrayList results = new java.util.ArrayList();\r\n            // the format for component ID is name vendor version.\r\n            java.util.StringTokenizer st = new java.util.StringTokenizer(text,CID_SEPARATOR,true);\r\n            ComponentIDPropertyEditor cidPropEditor = new ComponentIDPropertyEditor();\r\n            while (st.hasMoreTokens()) {\r\n                cidPropEditor.setAsText(st.nextToken());\r\n                if (st.hasMoreTokens()) {\r\n                \tst.nextToken();\r\n                }\r\n                results.add(cidPropEditor.getValue());\r\n            }\r\n            ComponentID[] cid = new ComponentID[results.size()];\r\n            results.toArray(cid);\r\n            this.setValue(cid);\r\n        }\r\n        \r\n    }", "code_tokens": ["public", "void", "setAsText", "(", "String", "text", ")", "{", "if", "(", "text", "==", "null", "||", "text", ".", "equals", "(", "\"\"", ")", ")", "{", "super", ".", "setValue", "(", "new", "ComponentID", "[", "0", "]", ")", ";", "}", "else", "{", "java", ".", "util", ".", "ArrayList", "results", "=", "new", "java", ".", "util", ".", "ArrayList", "(", ")", ";", "// the format for component ID is name vendor version.\r", "java", ".", "util", ".", "StringTokenizer", "st", "=", "new", "java", ".", "util", ".", "StringTokenizer", "(", "text", ",", "CID_SEPARATOR", ",", "true", ")", ";", "ComponentIDPropertyEditor", "cidPropEditor", "=", "new", "ComponentIDPropertyEditor", "(", ")", ";", "while", "(", "st", ".", "hasMoreTokens", "(", ")", ")", "{", "cidPropEditor", ".", "setAsText", "(", "st", ".", "nextToken", "(", ")", ")", ";", "if", "(", "st", ".", "hasMoreTokens", "(", ")", ")", "{", "st", ".", "nextToken", "(", ")", ";", "}", "results", ".", "add", "(", "cidPropEditor", ".", "getValue", "(", ")", ")", ";", "}", "ComponentID", "[", "]", "cid", "=", "new", "ComponentID", "[", "results", ".", "size", "(", ")", "]", ";", "results", ".", "toArray", "(", "cid", ")", ";", "this", ".", "setValue", "(", "cid", ")", ";", "}", "}"], "docstring": "Set the element as text value, parse it and setValue.\nThe separator is CID_SEPARATOR", "docstring_tokens": ["Set", "the", "element", "as", "text", "value", "parse", "it", "and", "setValue", ".", "The", "separator", "is", "CID_SEPARATOR"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/jmx-property-editors/src/main/java/org/mobicents/slee/container/management/jmx/editors/ComponentIDArrayPropertyEditor.java#L55-L75", "partition": "test", "index": 7072, "time": "2009-03-13 01:10:42"}
{"repo": "RestComm/jain-slee", "path": "container/jmx-property-editors/src/main/java/org/mobicents/slee/container/management/jmx/editors/SleePropertyEditorRegistrator.java", "func_name": "SleePropertyEditorRegistrator.register", "original_string": "public void register() {\n\t\t\n\t\tPropertyEditorManager.registerEditor(ComponentID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(EventTypeID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(LibraryID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ProfileSpecificationID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorTypeID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(SbbID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ServiceID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(ComponentID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(EventTypeID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(LibraryID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ProfileSpecificationID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorTypeID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(SbbID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ServiceID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(DeployableUnitID.class,\n\t\t\t\tDeployableUnitIDPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(Level.class,\n\t\t\t\tLevelPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(TraceLevel.class,\n\t\t\t\tTraceLevelPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(ConfigProperties.class,\n\t\t\t\tConfigPropertiesPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(NotificationSource.class,\n\t\t\t\tNotificationSourcePropertyEditor.class);\n\t\t\t\t\n\t\tPropertyEditorManager.registerEditor(Object.class,\n\t\t\t\tObjectPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(ServiceState.class,\n\t\t\t\tServiceStatePropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorEntityState.class,\n\t\t\t\tResourceAdaptorEntityStatePropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(Address.class,\n\t\t\t\tAddressPropertyEditor.class);\n\t\t\n\t}", "language": "java", "code": "public void register() {\n\t\t\n\t\tPropertyEditorManager.registerEditor(ComponentID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(EventTypeID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(LibraryID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ProfileSpecificationID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorTypeID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(SbbID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ServiceID.class,\n\t\t\t\tComponentIDPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(ComponentID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(EventTypeID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(LibraryID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ProfileSpecificationID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorTypeID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(SbbID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ServiceID[].class,\n\t\t\t\tComponentIDArrayPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(DeployableUnitID.class,\n\t\t\t\tDeployableUnitIDPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(Level.class,\n\t\t\t\tLevelPropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(TraceLevel.class,\n\t\t\t\tTraceLevelPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(ConfigProperties.class,\n\t\t\t\tConfigPropertiesPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(NotificationSource.class,\n\t\t\t\tNotificationSourcePropertyEditor.class);\n\t\t\t\t\n\t\tPropertyEditorManager.registerEditor(Object.class,\n\t\t\t\tObjectPropertyEditor.class);\n\t\t\n\t\tPropertyEditorManager.registerEditor(ServiceState.class,\n\t\t\t\tServiceStatePropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(ResourceAdaptorEntityState.class,\n\t\t\t\tResourceAdaptorEntityStatePropertyEditor.class);\n\t\tPropertyEditorManager.registerEditor(Address.class,\n\t\t\t\tAddressPropertyEditor.class);\n\t\t\n\t}", "code_tokens": ["public", "void", "register", "(", ")", "{", "PropertyEditorManager", ".", "registerEditor", "(", "ComponentID", ".", "class", ",", "ComponentIDPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "EventTypeID", ".", "class", ",", "ComponentIDPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "LibraryID", ".", "class", ",", "ComponentIDPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ProfileSpecificationID", ".", "class", ",", "ComponentIDPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ResourceAdaptorID", ".", "class", ",", "ComponentIDPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ResourceAdaptorTypeID", ".", "class", ",", "ComponentIDPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "SbbID", ".", "class", ",", "ComponentIDPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ServiceID", ".", "class", ",", "ComponentIDPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ComponentID", "[", "]", ".", "class", ",", "ComponentIDArrayPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "EventTypeID", "[", "]", ".", "class", ",", "ComponentIDArrayPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "LibraryID", "[", "]", ".", "class", ",", "ComponentIDArrayPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ProfileSpecificationID", "[", "]", ".", "class", ",", "ComponentIDArrayPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ResourceAdaptorID", "[", "]", ".", "class", ",", "ComponentIDArrayPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ResourceAdaptorTypeID", "[", "]", ".", "class", ",", "ComponentIDArrayPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "SbbID", "[", "]", ".", "class", ",", "ComponentIDArrayPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ServiceID", "[", "]", ".", "class", ",", "ComponentIDArrayPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "DeployableUnitID", ".", "class", ",", "DeployableUnitIDPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "Level", ".", "class", ",", "LevelPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "TraceLevel", ".", "class", ",", "TraceLevelPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ConfigProperties", ".", "class", ",", "ConfigPropertiesPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "NotificationSource", ".", "class", ",", "NotificationSourcePropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "Object", ".", "class", ",", "ObjectPropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ServiceState", ".", "class", ",", "ServiceStatePropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "ResourceAdaptorEntityState", ".", "class", ",", "ResourceAdaptorEntityStatePropertyEditor", ".", "class", ")", ";", "PropertyEditorManager", ".", "registerEditor", "(", "Address", ".", "class", ",", "AddressPropertyEditor", ".", "class", ")", ";", "}"], "docstring": "Register the property editors for jboss jmx console, so non string SLEE api types can be used in specs mbeans methods as args", "docstring_tokens": ["Register", "the", "property", "editors", "for", "jboss", "jmx", "console", "so", "non", "string", "SLEE", "api", "types", "can", "be", "used", "in", "specs", "mbeans", "methods", "as", "args"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/jmx-property-editors/src/main/java/org/mobicents/slee/container/management/jmx/editors/SleePropertyEditorRegistrator.java#L56-L116", "partition": "test", "index": 7049, "time": "2009-03-13 01:10:42"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitImpl.java", "func_name": "DeployableUnitImpl.deletePath", "original_string": "private void deletePath(File path) {\r\n\t\tif (path.isDirectory()) {\r\n\t\t\tFile[] files = path.listFiles();\r\n\t\t\tif (files != null) {\r\n\t\t\t\tfor (File file : files) {\r\n\t\t\t\t\tdeletePath(file);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tpath.delete();\r\n\t}", "language": "java", "code": "private void deletePath(File path) {\r\n\t\tif (path.isDirectory()) {\r\n\t\t\tFile[] files = path.listFiles();\r\n\t\t\tif (files != null) {\r\n\t\t\t\tfor (File file : files) {\r\n\t\t\t\t\tdeletePath(file);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tpath.delete();\r\n\t}", "code_tokens": ["private", "void", "deletePath", "(", "File", "path", ")", "{", "if", "(", "path", ".", "isDirectory", "(", ")", ")", "{", "File", "[", "]", "files", "=", "path", ".", "listFiles", "(", ")", ";", "if", "(", "files", "!=", "null", ")", "{", "for", "(", "File", "file", ":", "files", ")", "{", "deletePath", "(", "file", ")", ";", "}", "}", "}", "path", ".", "delete", "(", ")", ";", "}"], "docstring": "deletes the whole path, going through directories\n\n@param path", "docstring_tokens": ["deletes", "the", "whole", "path", "going", "through", "directories"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/DeployableUnitImpl.java#L307-L317", "partition": "test", "index": 7101, "time": "2009-04-03 16:32:36"}
{"repo": "RestComm/jain-slee", "path": "container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java", "func_name": "SleeTransactionImpl.suspendIfAssoaciatedWithThread", "original_string": "private void suspendIfAssoaciatedWithThread() throws SystemException {\n\t\t// if there is a tx associated with this thread and it is this one\n\t\t// then suspend it to dissociate the thread (dumb feature?!?! of jboss ts)\n\t\tfinal SleeTransaction currentThreadTransaction = transactionManager\n\t\t\t\t.getSleeTransaction();\n\t\tif (currentThreadTransaction != null\n\t\t\t\t&& currentThreadTransaction.equals(this)) {\n\t\t\t// lets use the real tx manager directly, to avoid any other procedures\n\t\t\ttransactionManager.getRealTransactionManager().suspend();\n\t\t}\t\t\n\t}", "language": "java", "code": "private void suspendIfAssoaciatedWithThread() throws SystemException {\n\t\t// if there is a tx associated with this thread and it is this one\n\t\t// then suspend it to dissociate the thread (dumb feature?!?! of jboss ts)\n\t\tfinal SleeTransaction currentThreadTransaction = transactionManager\n\t\t\t\t.getSleeTransaction();\n\t\tif (currentThreadTransaction != null\n\t\t\t\t&& currentThreadTransaction.equals(this)) {\n\t\t\t// lets use the real tx manager directly, to avoid any other procedures\n\t\t\ttransactionManager.getRealTransactionManager().suspend();\n\t\t}\t\t\n\t}", "code_tokens": ["private", "void", "suspendIfAssoaciatedWithThread", "(", ")", "throws", "SystemException", "{", "// if there is a tx associated with this thread and it is this one", "// then suspend it to dissociate the thread (dumb feature?!?! of jboss ts)", "final", "SleeTransaction", "currentThreadTransaction", "=", "transactionManager", ".", "getSleeTransaction", "(", ")", ";", "if", "(", "currentThreadTransaction", "!=", "null", "&&", "currentThreadTransaction", ".", "equals", "(", "this", ")", ")", "{", "// lets use the real tx manager directly, to avoid any other procedures", "transactionManager", ".", "getRealTransactionManager", "(", ")", ".", "suspend", "(", ")", ";", "}", "}"], "docstring": "Some operations require that the transaction be suspended\n@throws SystemException", "docstring_tokens": ["Some", "operations", "require", "that", "the", "transaction", "be", "suspended"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/SleeTransactionImpl.java#L108-L118", "partition": "test", "index": 6938, "time": "2009-04-17 13:09:09"}
{"repo": "RestComm/jain-slee", "path": "container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/TransactionContextImpl.java", "func_name": "TransactionContextImpl.executeBeforeCommitPriorityActions", "original_string": "protected void executeBeforeCommitPriorityActions() {\t\t\r\n\t\tif (beforeCommitPriorityActions != null) {\r\n\t\t\tif (trace) {\r\n\t\t\t\tlogger.trace(\"Executing before commit priority actions\");\r\n\t\t\t}\r\n\t\t\texecuteActions(beforeCommitPriorityActions,trace);\r\n\t\t\tbeforeCommitPriorityActions = null;\r\n\t\t} \r\n\t}", "language": "java", "code": "protected void executeBeforeCommitPriorityActions() {\t\t\r\n\t\tif (beforeCommitPriorityActions != null) {\r\n\t\t\tif (trace) {\r\n\t\t\t\tlogger.trace(\"Executing before commit priority actions\");\r\n\t\t\t}\r\n\t\t\texecuteActions(beforeCommitPriorityActions,trace);\r\n\t\t\tbeforeCommitPriorityActions = null;\r\n\t\t} \r\n\t}", "code_tokens": ["protected", "void", "executeBeforeCommitPriorityActions", "(", ")", "{", "if", "(", "beforeCommitPriorityActions", "!=", "null", ")", "{", "if", "(", "trace", ")", "{", "logger", ".", "trace", "(", "\"Executing before commit priority actions\"", ")", ";", "}", "executeActions", "(", "beforeCommitPriorityActions", ",", "trace", ")", ";", "beforeCommitPriorityActions", "=", "null", ";", "}", "}"], "docstring": "Executes actions scheduled for before commit at first", "docstring_tokens": ["Executes", "actions", "scheduled", "for", "before", "commit", "at", "first"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/transaction/src/main/java/org/mobicents/slee/runtime/transaction/TransactionContextImpl.java#L225-L233", "partition": "test", "index": 7045, "time": "2009-05-08 16:42:03"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/ProfileAbstractClassDecorator.java", "func_name": "ProfileAbstractClassDecorator.decorateAbstractClass", "original_string": "public boolean decorateAbstractClass() throws DeploymentException {\r\n       \r\n    \tClassPool pool = component.getClassPool();\r\n    \tProfileAbstractClassDescriptor abstractClass = component.getDescriptor().getProfileAbstractClass();\r\n    \tif (abstractClass == null) {\r\n    \t\treturn false;\r\n    \t}\r\n    \tString abstractClassName = abstractClass.getProfileAbstractClassName();\r\n        try {\r\n            ctClass = pool.get(abstractClassName);\r\n        } catch (NotFoundException nfe) {\r\n            throw new DeploymentException(\"Could not find Abstract Class: \"\r\n                    + abstractClassName, nfe);\r\n        }\r\n\r\n        decorateClassJNDIAddToEnvironmentCalls();\r\n        \r\n        if (isAbstractClassDecorated) {\r\n        \ttry {\r\n        \t\tString deployDir = component.getDeploymentDir().getAbsolutePath();\r\n        \t\tctClass.writeFile(deployDir);\r\n        \t\tctClass.detach();\r\n        \t\t// the file on disk is now in sync with the latest in-memory version\r\n        \t\tif (logger.isDebugEnabled()) {\r\n        \t\t\tlogger.debug(\"Modified Abstract Class \"\r\n        \t\t\t\t\t+ ctClass.getName()\r\n        \t\t\t\t\t+ \" generated in the following path \"\r\n        \t\t\t\t\t+ deployDir);\r\n        \t\t}        \t\t\r\n        \t} catch (Throwable e) {\r\n        \t\tthrow new SLEEException ( e.getMessage(), e);                \r\n        \t} finally { \r\n        \t\tctClass.defrost();\r\n        \t}\r\n        \treturn true;\r\n        }\r\n        else {\r\n        \treturn false;\r\n        }\r\n    }", "language": "java", "code": "public boolean decorateAbstractClass() throws DeploymentException {\r\n       \r\n    \tClassPool pool = component.getClassPool();\r\n    \tProfileAbstractClassDescriptor abstractClass = component.getDescriptor().getProfileAbstractClass();\r\n    \tif (abstractClass == null) {\r\n    \t\treturn false;\r\n    \t}\r\n    \tString abstractClassName = abstractClass.getProfileAbstractClassName();\r\n        try {\r\n            ctClass = pool.get(abstractClassName);\r\n        } catch (NotFoundException nfe) {\r\n            throw new DeploymentException(\"Could not find Abstract Class: \"\r\n                    + abstractClassName, nfe);\r\n        }\r\n\r\n        decorateClassJNDIAddToEnvironmentCalls();\r\n        \r\n        if (isAbstractClassDecorated) {\r\n        \ttry {\r\n        \t\tString deployDir = component.getDeploymentDir().getAbsolutePath();\r\n        \t\tctClass.writeFile(deployDir);\r\n        \t\tctClass.detach();\r\n        \t\t// the file on disk is now in sync with the latest in-memory version\r\n        \t\tif (logger.isDebugEnabled()) {\r\n        \t\t\tlogger.debug(\"Modified Abstract Class \"\r\n        \t\t\t\t\t+ ctClass.getName()\r\n        \t\t\t\t\t+ \" generated in the following path \"\r\n        \t\t\t\t\t+ deployDir);\r\n        \t\t}        \t\t\r\n        \t} catch (Throwable e) {\r\n        \t\tthrow new SLEEException ( e.getMessage(), e);                \r\n        \t} finally { \r\n        \t\tctClass.defrost();\r\n        \t}\r\n        \treturn true;\r\n        }\r\n        else {\r\n        \treturn false;\r\n        }\r\n    }", "code_tokens": ["public", "boolean", "decorateAbstractClass", "(", ")", "throws", "DeploymentException", "{", "ClassPool", "pool", "=", "component", ".", "getClassPool", "(", ")", ";", "ProfileAbstractClassDescriptor", "abstractClass", "=", "component", ".", "getDescriptor", "(", ")", ".", "getProfileAbstractClass", "(", ")", ";", "if", "(", "abstractClass", "==", "null", ")", "{", "return", "false", ";", "}", "String", "abstractClassName", "=", "abstractClass", ".", "getProfileAbstractClassName", "(", ")", ";", "try", "{", "ctClass", "=", "pool", ".", "get", "(", "abstractClassName", ")", ";", "}", "catch", "(", "NotFoundException", "nfe", ")", "{", "throw", "new", "DeploymentException", "(", "\"Could not find Abstract Class: \"", "+", "abstractClassName", ",", "nfe", ")", ";", "}", "decorateClassJNDIAddToEnvironmentCalls", "(", ")", ";", "if", "(", "isAbstractClassDecorated", ")", "{", "try", "{", "String", "deployDir", "=", "component", ".", "getDeploymentDir", "(", ")", ".", "getAbsolutePath", "(", ")", ";", "ctClass", ".", "writeFile", "(", "deployDir", ")", ";", "ctClass", ".", "detach", "(", ")", ";", "// the file on disk is now in sync with the latest in-memory version\r", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Modified Abstract Class \"", "+", "ctClass", ".", "getName", "(", ")", "+", "\" generated in the following path \"", "+", "deployDir", ")", ";", "}", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "finally", "{", "ctClass", ".", "defrost", "(", ")", ";", "}", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "docstring": "Decorate the abstract Class\n\n@return true is the class was decorated", "docstring_tokens": ["Decorate", "the", "abstract", "Class"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/ProfileAbstractClassDecorator.java#L70-L109", "partition": "test", "index": 7023, "time": "2009-06-02 12:29:56"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/security/PolicyFileImpl.java", "func_name": "PolicyFileImpl.getCodeSources", "original_string": "public String getCodeSources() {\n\n\t\tList<String> css = new ArrayList<String>();\n\t\tfor (PolicyHolderEntry phe : this.currentPolicy.get().policyHolderEntries) {\n\t\t\tcss.add(phe.getCodeSource().getLocation() == null ? \"default\" : phe.getCodeSource().getLocation().toString());\n\t\t}\n\n\t\treturn Arrays.toString(css.toArray());\n\t}", "language": "java", "code": "public String getCodeSources() {\n\n\t\tList<String> css = new ArrayList<String>();\n\t\tfor (PolicyHolderEntry phe : this.currentPolicy.get().policyHolderEntries) {\n\t\t\tcss.add(phe.getCodeSource().getLocation() == null ? \"default\" : phe.getCodeSource().getLocation().toString());\n\t\t}\n\n\t\treturn Arrays.toString(css.toArray());\n\t}", "code_tokens": ["public", "String", "getCodeSources", "(", ")", "{", "List", "<", "String", ">", "css", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "for", "(", "PolicyHolderEntry", "phe", ":", "this", ".", "currentPolicy", ".", "get", "(", ")", ".", "policyHolderEntries", ")", "{", "css", ".", "add", "(", "phe", ".", "getCodeSource", "(", ")", ".", "getLocation", "(", ")", "==", "null", "?", "\"default\"", ":", "phe", ".", "getCodeSource", "(", ")", ".", "getLocation", "(", ")", ".", "toString", "(", ")", ")", ";", "}", "return", "Arrays", ".", "toString", "(", "css", ".", "toArray", "(", ")", ")", ";", "}"], "docstring": "Some methods to expose info about what is goign on.", "docstring_tokens": ["Some", "methods", "to", "expose", "info", "about", "what", "is", "goign", "on", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/security/PolicyFileImpl.java#L883-L891", "partition": "test", "index": 6997, "time": "2009-06-25 19:09:55"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/security/PolicyFileImpl.java", "func_name": "PolicyFileImpl.getPermissions", "original_string": "private Permissions getPermissions(Permissions permissions, final CodeSource cs, Principal[] principals) {\n\n\t\tList<PolicyHolderEntry> entries = this.currentPolicy.get().policyHolderEntries;\n\n\t\tfor (PolicyHolderEntry phe : entries) {\n\n\t\t\t// general\n\t\t\tselectPermissions(permissions, cs, principals, phe);\n\n\t\t\t// FIXME: certs?\n\n\t\t}\n\n\t\treturn permissions;\n\t}", "language": "java", "code": "private Permissions getPermissions(Permissions permissions, final CodeSource cs, Principal[] principals) {\n\n\t\tList<PolicyHolderEntry> entries = this.currentPolicy.get().policyHolderEntries;\n\n\t\tfor (PolicyHolderEntry phe : entries) {\n\n\t\t\t// general\n\t\t\tselectPermissions(permissions, cs, principals, phe);\n\n\t\t\t// FIXME: certs?\n\n\t\t}\n\n\t\treturn permissions;\n\t}", "code_tokens": ["private", "Permissions", "getPermissions", "(", "Permissions", "permissions", ",", "final", "CodeSource", "cs", ",", "Principal", "[", "]", "principals", ")", "{", "List", "<", "PolicyHolderEntry", ">", "entries", "=", "this", ".", "currentPolicy", ".", "get", "(", ")", ".", "policyHolderEntries", ";", "for", "(", "PolicyHolderEntry", "phe", ":", "entries", ")", "{", "// general", "selectPermissions", "(", "permissions", ",", "cs", ",", "principals", ",", "phe", ")", ";", "// FIXME: certs?", "}", "return", "permissions", ";", "}"], "docstring": "generic, for all calls", "docstring_tokens": ["generic", "for", "all", "calls"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/security/PolicyFileImpl.java#L179-L193", "partition": "test", "index": 6996, "time": "2009-06-25 19:09:55"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/AbstractSleeComponent.java", "func_name": "AbstractSleeComponent.undeployed", "original_string": "public void undeployed() {\n\t\t\n\t\tclassLoader = null;\n\t\t\n\t\tif (classLoaderDomain != null) {\t\t\t\t\n\t\t\tclassLoaderDomain.clear();\n\t\t\tclassLoaderDomain = null;\t\t\t\t\n\t\t}\n\t\t\n\t\tif (classPool != null) {\n\t\t\tclassPool.clean();\n\t\t\tclassPool = null;\n\t\t}\n\t\t\n\t\tif (permissions != null) {\n\t\t\tpermissions.clear();\n\t\t\tpermissions = null;\n\t\t}\n\t}", "language": "java", "code": "public void undeployed() {\n\t\t\n\t\tclassLoader = null;\n\t\t\n\t\tif (classLoaderDomain != null) {\t\t\t\t\n\t\t\tclassLoaderDomain.clear();\n\t\t\tclassLoaderDomain = null;\t\t\t\t\n\t\t}\n\t\t\n\t\tif (classPool != null) {\n\t\t\tclassPool.clean();\n\t\t\tclassPool = null;\n\t\t}\n\t\t\n\t\tif (permissions != null) {\n\t\t\tpermissions.clear();\n\t\t\tpermissions = null;\n\t\t}\n\t}", "code_tokens": ["public", "void", "undeployed", "(", ")", "{", "classLoader", "=", "null", ";", "if", "(", "classLoaderDomain", "!=", "null", ")", "{", "classLoaderDomain", ".", "clear", "(", ")", ";", "classLoaderDomain", "=", "null", ";", "}", "if", "(", "classPool", "!=", "null", ")", "{", "classPool", ".", "clean", "(", ")", ";", "classPool", "=", "null", ";", "}", "if", "(", "permissions", "!=", "null", ")", "{", "permissions", ".", "clear", "(", ")", ";", "permissions", "=", "null", ";", "}", "}"], "docstring": "Indicates that the component was undeployed and thus should clean up any resources", "docstring_tokens": ["Indicates", "that", "the", "component", "was", "undeployed", "and", "thus", "should", "clean", "up", "any", "resources"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/AbstractSleeComponent.java#L299-L317", "partition": "test", "index": 7128, "time": "2009-06-30 16:54:45"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/ServiceComponentImpl.java", "func_name": "ServiceComponentImpl.getResourceAdaptorEntityLinks", "original_string": "public Set<String> getResourceAdaptorEntityLinks(ComponentRepository componentRepository) {\r\n\t\tSet<String> result = new HashSet<String>();\r\n\t\tfor (SbbID sbbID : getSbbIDs(componentRepository)) {\r\n\t\t\tSbbComponent sbbComponent = componentRepository.getComponentByID(sbbID);\r\n\t\t\tfor (ResourceAdaptorTypeBindingDescriptor raTypeBinding : sbbComponent.getDescriptor().getResourceAdaptorTypeBindings()) {\r\n\t\t\t\tfor (ResourceAdaptorEntityBindingDescriptor raEntityBinding : raTypeBinding.getResourceAdaptorEntityBinding()) {\r\n\t\t\t\t\tresult.add(raEntityBinding.getResourceAdaptorEntityLink());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}", "language": "java", "code": "public Set<String> getResourceAdaptorEntityLinks(ComponentRepository componentRepository) {\r\n\t\tSet<String> result = new HashSet<String>();\r\n\t\tfor (SbbID sbbID : getSbbIDs(componentRepository)) {\r\n\t\t\tSbbComponent sbbComponent = componentRepository.getComponentByID(sbbID);\r\n\t\t\tfor (ResourceAdaptorTypeBindingDescriptor raTypeBinding : sbbComponent.getDescriptor().getResourceAdaptorTypeBindings()) {\r\n\t\t\t\tfor (ResourceAdaptorEntityBindingDescriptor raEntityBinding : raTypeBinding.getResourceAdaptorEntityBinding()) {\r\n\t\t\t\t\tresult.add(raEntityBinding.getResourceAdaptorEntityLink());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}", "code_tokens": ["public", "Set", "<", "String", ">", "getResourceAdaptorEntityLinks", "(", "ComponentRepository", "componentRepository", ")", "{", "Set", "<", "String", ">", "result", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "for", "(", "SbbID", "sbbID", ":", "getSbbIDs", "(", "componentRepository", ")", ")", "{", "SbbComponent", "sbbComponent", "=", "componentRepository", ".", "getComponentByID", "(", "sbbID", ")", ";", "for", "(", "ResourceAdaptorTypeBindingDescriptor", "raTypeBinding", ":", "sbbComponent", ".", "getDescriptor", "(", ")", ".", "getResourceAdaptorTypeBindings", "(", ")", ")", "{", "for", "(", "ResourceAdaptorEntityBindingDescriptor", "raEntityBinding", ":", "raTypeBinding", ".", "getResourceAdaptorEntityBinding", "(", ")", ")", "{", "result", ".", "add", "(", "raEntityBinding", ".", "getResourceAdaptorEntityLink", "(", ")", ")", ";", "}", "}", "}", "return", "result", ";", "}"], "docstring": "Retrieves the set of ra entity links referenced by the sbbs related with the service.\n@param componentRepository\n@return", "docstring_tokens": ["Retrieves", "the", "set", "of", "ra", "entity", "links", "referenced", "by", "the", "sbbs", "related", "with", "the", "service", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/ServiceComponentImpl.java#L217-L228", "partition": "test", "index": 7167, "time": "2009-08-03 10:32:20"}
{"repo": "RestComm/jain-slee", "path": "container/fault-tolerant-ra/impl/src/main/java/org/mobicents/slee/resource/cluster/FaultTolerantResourceAdaptorContextImpl.java", "func_name": "FaultTolerantResourceAdaptorContextImpl.removeReplicateData", "original_string": "public void removeReplicateData() {\n\t\tif (replicatedDataWithFailover != null) {\n\t\t\treplicatedDataWithFailover.remove();\n\t\t\treplicatedDataWithFailover = null;\n\t\t}\n\t\tif (replicatedData != null) {\n\t\t\treplicatedData.remove();\n\t\t\treplicatedData = null;\n\t\t}\n\t}", "language": "java", "code": "public void removeReplicateData() {\n\t\tif (replicatedDataWithFailover != null) {\n\t\t\treplicatedDataWithFailover.remove();\n\t\t\treplicatedDataWithFailover = null;\n\t\t}\n\t\tif (replicatedData != null) {\n\t\t\treplicatedData.remove();\n\t\t\treplicatedData = null;\n\t\t}\n\t}", "code_tokens": ["public", "void", "removeReplicateData", "(", ")", "{", "if", "(", "replicatedDataWithFailover", "!=", "null", ")", "{", "replicatedDataWithFailover", ".", "remove", "(", ")", ";", "replicatedDataWithFailover", "=", "null", ";", "}", "if", "(", "replicatedData", "!=", "null", ")", "{", "replicatedData", ".", "remove", "(", ")", ";", "replicatedData", "=", "null", ";", "}", "}"], "docstring": "Removes all replicated data", "docstring_tokens": ["Removes", "all", "replicated", "data"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/fault-tolerant-ra/impl/src/main/java/org/mobicents/slee/resource/cluster/FaultTolerantResourceAdaptorContextImpl.java#L165-L174", "partition": "test", "index": 7048, "time": "2009-10-02 07:00:11"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.endActivity", "original_string": "public void endActivity() {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Ending activity context with handle \"\n\t\t\t\t\t+ getActivityContextHandle());\n\t\t}\n\t\tif (cacheData.setEnding(true)) {\n\t\t\tfireEvent(\n\t\t\t\t\tsleeContainer\n\t\t\t\t\t\t\t.getEventContextFactory()\n\t\t\t\t\t\t\t.createActivityEndEventContext(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\tnew ActivityEndEventUnreferencedCallback(\n\t\t\t\t\t\t\t\t\t\t\tgetActivityContextHandle(), factory)),\n\t\t\t\t\tsleeContainer.getTransactionManager()\n\t\t\t\t\t\t\t.getTransactionContext());\n\t\t}\n\t}", "language": "java", "code": "public void endActivity() {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Ending activity context with handle \"\n\t\t\t\t\t+ getActivityContextHandle());\n\t\t}\n\t\tif (cacheData.setEnding(true)) {\n\t\t\tfireEvent(\n\t\t\t\t\tsleeContainer\n\t\t\t\t\t\t\t.getEventContextFactory()\n\t\t\t\t\t\t\t.createActivityEndEventContext(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\tnew ActivityEndEventUnreferencedCallback(\n\t\t\t\t\t\t\t\t\t\t\tgetActivityContextHandle(), factory)),\n\t\t\t\t\tsleeContainer.getTransactionManager()\n\t\t\t\t\t\t\t.getTransactionContext());\n\t\t}\n\t}", "code_tokens": ["public", "void", "endActivity", "(", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Ending activity context with handle \"", "+", "getActivityContextHandle", "(", ")", ")", ";", "}", "if", "(", "cacheData", ".", "setEnding", "(", "true", ")", ")", "{", "fireEvent", "(", "sleeContainer", ".", "getEventContextFactory", "(", ")", ".", "createActivityEndEventContext", "(", "this", ",", "new", "ActivityEndEventUnreferencedCallback", "(", "getActivityContextHandle", "(", ")", ",", "factory", ")", ")", ",", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "getTransactionContext", "(", ")", ")", ";", "}", "}"], "docstring": "Ends the activity context.", "docstring_tokens": ["Ends", "the", "activity", "context", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L554-L570", "partition": "test", "index": 7084, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.getSortedSbbAttachmentSet", "original_string": "public Set<SbbEntityID> getSortedSbbAttachmentSet(\n\t\t\tSet<SbbEntityID> excludeSet) {\n\t\tfinal Set<SbbEntityID> sbbAttachementSet = cacheData\n\t\t\t\t.getSbbEntitiesAttached();\n\t\tSet<SbbEntityID> result = new HashSet<SbbEntityID>();\n\t\tfor (SbbEntityID sbbEntityId : sbbAttachementSet) {\n\t\t\tif (!excludeSet.contains(sbbEntityId)) {\n\t\t\t\tresult.add(sbbEntityId);\n\t\t\t}\n\t\t}\n\t\tif (result.size() > 1) {\n\t\t\tresult = sleeContainer.getSbbEntityFactory().sortByPriority(result);\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public Set<SbbEntityID> getSortedSbbAttachmentSet(\n\t\t\tSet<SbbEntityID> excludeSet) {\n\t\tfinal Set<SbbEntityID> sbbAttachementSet = cacheData\n\t\t\t\t.getSbbEntitiesAttached();\n\t\tSet<SbbEntityID> result = new HashSet<SbbEntityID>();\n\t\tfor (SbbEntityID sbbEntityId : sbbAttachementSet) {\n\t\t\tif (!excludeSet.contains(sbbEntityId)) {\n\t\t\t\tresult.add(sbbEntityId);\n\t\t\t}\n\t\t}\n\t\tif (result.size() > 1) {\n\t\t\tresult = sleeContainer.getSbbEntityFactory().sortByPriority(result);\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "Set", "<", "SbbEntityID", ">", "getSortedSbbAttachmentSet", "(", "Set", "<", "SbbEntityID", ">", "excludeSet", ")", "{", "final", "Set", "<", "SbbEntityID", ">", "sbbAttachementSet", "=", "cacheData", ".", "getSbbEntitiesAttached", "(", ")", ";", "Set", "<", "SbbEntityID", ">", "result", "=", "new", "HashSet", "<", "SbbEntityID", ">", "(", ")", ";", "for", "(", "SbbEntityID", "sbbEntityId", ":", "sbbAttachementSet", ")", "{", "if", "(", "!", "excludeSet", ".", "contains", "(", "sbbEntityId", ")", ")", "{", "result", ".", "add", "(", "sbbEntityId", ")", ";", "}", "}", "if", "(", "result", ".", "size", "(", ")", ">", "1", ")", "{", "result", "=", "sleeContainer", ".", "getSbbEntityFactory", "(", ")", ".", "sortByPriority", "(", "result", ")", ";", "}", "return", "result", ";", "}"], "docstring": "get an ordered copy of the set of SBBs attached to this ac. The ordering\nis by SBB priority.\n\n@return list of SbbEIDs", "docstring_tokens": ["get", "an", "ordered", "copy", "of", "the", "set", "of", "SBBs", "attached", "to", "this", "ac", ".", "The", "ordering", "is", "by", "SBB", "priority", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L396-L410", "partition": "test", "index": 7083, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.detachSbbEntity", "original_string": "public void detachSbbEntity(SbbEntityID sbbEntityId)\n\t\t\tthrows javax.slee.TransactionRequiredLocalException {\n\n\t\tboolean detached = cacheData.detachSbbEntity(sbbEntityId);\n\n\t\tif (detached && acReferencesHandler != null && !isEnding()) {\n\t\t\tacReferencesHandler.sbbeReferenceRemoved();\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Detached sbb entity \" + sbbEntityId\n\t\t\t\t\t\t+ \" from AC with handle \" + getActivityContextHandle());\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void detachSbbEntity(SbbEntityID sbbEntityId)\n\t\t\tthrows javax.slee.TransactionRequiredLocalException {\n\n\t\tboolean detached = cacheData.detachSbbEntity(sbbEntityId);\n\n\t\tif (detached && acReferencesHandler != null && !isEnding()) {\n\t\t\tacReferencesHandler.sbbeReferenceRemoved();\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Detached sbb entity \" + sbbEntityId\n\t\t\t\t\t\t+ \" from AC with handle \" + getActivityContextHandle());\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "detachSbbEntity", "(", "SbbEntityID", "sbbEntityId", ")", "throws", "javax", ".", "slee", ".", "TransactionRequiredLocalException", "{", "boolean", "detached", "=", "cacheData", ".", "detachSbbEntity", "(", "sbbEntityId", ")", ";", "if", "(", "detached", "&&", "acReferencesHandler", "!=", "null", "&&", "!", "isEnding", "(", ")", ")", "{", "acReferencesHandler", ".", "sbbeReferenceRemoved", "(", ")", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Detached sbb entity \"", "+", "sbbEntityId", "+", "\" from AC with handle \"", "+", "getActivityContextHandle", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Detach the sbb entity\n\n@param sbbEntityId", "docstring_tokens": ["Detach", "the", "sbb", "entity"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L375-L387", "partition": "test", "index": 7082, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.putObject", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic Object putObject(Object key, Object value) {\n\t\treturn getNode().put(key, value);\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic Object putObject(Object key, Object value) {\n\t\treturn getNode().put(key, value);\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "Object", "putObject", "(", "Object", "key", ",", "Object", "value", ")", "{", "return", "getNode", "(", ")", ".", "put", "(", "key", ",", "value", ")", ";", "}"], "docstring": "Puts an object in cache data\n\n@param key\n@param value\n@return the old object for the specified key, null if key was not mapped", "docstring_tokens": ["Puts", "an", "object", "in", "cache", "data"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L150-L153", "partition": "test", "index": 6968, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.attachSbbEntity", "original_string": "public boolean attachSbbEntity(SbbEntityID sbbEntityId) {\n\t\tfinal Node node = getAttachedSbbsNode(true);\n\t\tif (!node.hasChild(sbbEntityId)) {\n\t\t\tnode.addChild(Fqn.fromElements(sbbEntityId));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "language": "java", "code": "public boolean attachSbbEntity(SbbEntityID sbbEntityId) {\n\t\tfinal Node node = getAttachedSbbsNode(true);\n\t\tif (!node.hasChild(sbbEntityId)) {\n\t\t\tnode.addChild(Fqn.fromElements(sbbEntityId));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "code_tokens": ["public", "boolean", "attachSbbEntity", "(", "SbbEntityID", "sbbEntityId", ")", "{", "final", "Node", "node", "=", "getAttachedSbbsNode", "(", "true", ")", ";", "if", "(", "!", "node", ".", "hasChild", "(", "sbbEntityId", ")", ")", "{", "node", ".", "addChild", "(", "Fqn", ".", "fromElements", "(", "sbbEntityId", ")", ")", ";", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "docstring": "Tries to attaches an sbb entity\n\n@param sbbEntityId\n@return true if it was attached, false if already was attached", "docstring_tokens": ["Tries", "to", "attaches", "an", "sbb", "entity"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L209-L217", "partition": "test", "index": 6969, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.attachTimer", "original_string": "public boolean attachTimer(TimerID timerID) {\n\t\tif (cacheData.attachTimer(timerID)) {\n\t\t\tif (acReferencesHandler != null) {\n\t\t\t\tacReferencesHandler.timerReferenceCreated();\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "language": "java", "code": "public boolean attachTimer(TimerID timerID) {\n\t\tif (cacheData.attachTimer(timerID)) {\n\t\t\tif (acReferencesHandler != null) {\n\t\t\t\tacReferencesHandler.timerReferenceCreated();\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "code_tokens": ["public", "boolean", "attachTimer", "(", "TimerID", "timerID", ")", "{", "if", "(", "cacheData", ".", "attachTimer", "(", "timerID", ")", ")", "{", "if", "(", "acReferencesHandler", "!=", "null", ")", "{", "acReferencesHandler", ".", "timerReferenceCreated", "(", ")", ";", "}", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "docstring": "attach the given timer to the current activity context.\n\n@param timerID\n-- timer id to attach.", "docstring_tokens": ["attach", "the", "given", "timer", "to", "the", "current", "activity", "context", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L288-L297", "partition": "test", "index": 7079, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.removeNamingBindings", "original_string": "private void removeNamingBindings() {\n\t\tActivityContextNamingFacility acf = sleeContainer\n\t\t\t\t.getActivityContextNamingFacility();\n\t\tfor (Object obj : cacheData.getNamesBoundCopy()) {\n\t\t\tString aciName = (String) obj;\n\t\t\ttry {\n\t\t\t\tacf.removeName(aciName);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warn(\"failed to unbind name: \" + aciName + \" from ac:\"\n\t\t\t\t\t\t+ getActivityContextHandle(), e);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private void removeNamingBindings() {\n\t\tActivityContextNamingFacility acf = sleeContainer\n\t\t\t\t.getActivityContextNamingFacility();\n\t\tfor (Object obj : cacheData.getNamesBoundCopy()) {\n\t\t\tString aciName = (String) obj;\n\t\t\ttry {\n\t\t\t\tacf.removeName(aciName);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warn(\"failed to unbind name: \" + aciName + \" from ac:\"\n\t\t\t\t\t\t+ getActivityContextHandle(), e);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "void", "removeNamingBindings", "(", ")", "{", "ActivityContextNamingFacility", "acf", "=", "sleeContainer", ".", "getActivityContextNamingFacility", "(", ")", ";", "for", "(", "Object", "obj", ":", "cacheData", ".", "getNamesBoundCopy", "(", ")", ")", "{", "String", "aciName", "=", "(", "String", ")", "obj", ";", "try", "{", "acf", ".", "removeName", "(", "aciName", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warn", "(", "\"failed to unbind name: \"", "+", "aciName", "+", "\" from ac:\"", "+", "getActivityContextHandle", "(", ")", ",", "e", ")", ";", "}", "}", "}"], "docstring": "This is called to release all the name bindings after the activity end\nevent is delivered to the sbb.", "docstring_tokens": ["This", "is", "called", "to", "release", "all", "the", "name", "bindings", "after", "the", "activity", "end", "event", "is", "delivered", "to", "the", "sbb", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L239-L251", "partition": "test", "index": 7077, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.addNameBinding", "original_string": "public void addNameBinding(String aciName) {\n\t\tcacheData.nameBound(aciName);\n\t\tif (acReferencesHandler != null) {\n\t\t\tacReferencesHandler.nameReferenceCreated();\n\t\t}\n\t}", "language": "java", "code": "public void addNameBinding(String aciName) {\n\t\tcacheData.nameBound(aciName);\n\t\tif (acReferencesHandler != null) {\n\t\t\tacReferencesHandler.nameReferenceCreated();\n\t\t}\n\t}", "code_tokens": ["public", "void", "addNameBinding", "(", "String", "aciName", ")", "{", "cacheData", ".", "nameBound", "(", "aciName", ")", ";", "if", "(", "acReferencesHandler", "!=", "null", ")", "{", "acReferencesHandler", ".", "nameReferenceCreated", "(", ")", ";", "}", "}"], "docstring": "add a naming binding to this activity context.\n\n@param aciName\n- new name binding to be added.", "docstring_tokens": ["add", "a", "naming", "binding", "to", "this", "activity", "context", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L227-L232", "partition": "test", "index": 7076, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.setDataAttribute", "original_string": "public void setDataAttribute(String key, Object newValue) {\n\t\tcacheData.setCmpAttribute(key, newValue);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Activity context with handle \"\n\t\t\t\t\t+ getActivityContextHandle() + \" set cmp attribute named \"\n\t\t\t\t\t+ key + \" to value \" + newValue);\n\t\t}\n\t}", "language": "java", "code": "public void setDataAttribute(String key, Object newValue) {\n\t\tcacheData.setCmpAttribute(key, newValue);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Activity context with handle \"\n\t\t\t\t\t+ getActivityContextHandle() + \" set cmp attribute named \"\n\t\t\t\t\t+ key + \" to value \" + newValue);\n\t\t}\n\t}", "code_tokens": ["public", "void", "setDataAttribute", "(", "String", "key", ",", "Object", "newValue", ")", "{", "cacheData", ".", "setCmpAttribute", "(", "key", ",", "newValue", ")", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Activity context with handle \"", "+", "getActivityContextHandle", "(", ")", "+", "\" set cmp attribute named \"", "+", "key", "+", "\" to value \"", "+", "newValue", ")", ";", "}", "}"], "docstring": "Set a shared data item for the ACI\n\n@param key\n-- name of the shared data item.\n@param newValue\n-- value of the shared data item.", "docstring_tokens": ["Set", "a", "shared", "data", "item", "for", "the", "ACI"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L194-L201", "partition": "test", "index": 7075, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextFactoryCacheData.java", "func_name": "ActivityContextFactoryCacheData.getActivityContextHandles", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic Set<ActivityContextHandle> getActivityContextHandles() {\n\t\tfinal Node node = getNode();\n\t\treturn node != null ? node.getChildrenNames() : Collections.emptySet();\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic Set<ActivityContextHandle> getActivityContextHandles() {\n\t\tfinal Node node = getNode();\n\t\treturn node != null ? node.getChildrenNames() : Collections.emptySet();\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "Set", "<", "ActivityContextHandle", ">", "getActivityContextHandles", "(", ")", "{", "final", "Node", "node", "=", "getNode", "(", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "getChildrenNames", "(", ")", ":", "Collections", ".", "emptySet", "(", ")", ";", "}"], "docstring": "Retrieves a set containing all activity context handles in the factory's\ncache data\n\n@return", "docstring_tokens": ["Retrieves", "a", "set", "containing", "all", "activity", "context", "handles", "in", "the", "factory", "s", "cache", "data"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextFactoryCacheData.java#L64-L68", "partition": "test", "index": 7020, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.removeFromTimers", "original_string": "private void removeFromTimers() {\n\t\tTimerFacility timerFacility = sleeContainer.getTimerFacility();\n\t\t// Iterate through the attached timers, telling the timer facility to\n\t\t// remove them\n\t\tfor (Object obj : cacheData.getAttachedTimers()) {\n\t\t\ttimerFacility.cancelTimer((TimerID) obj, false);\n\t\t}\n\t}", "language": "java", "code": "private void removeFromTimers() {\n\t\tTimerFacility timerFacility = sleeContainer.getTimerFacility();\n\t\t// Iterate through the attached timers, telling the timer facility to\n\t\t// remove them\n\t\tfor (Object obj : cacheData.getAttachedTimers()) {\n\t\t\ttimerFacility.cancelTimer((TimerID) obj, false);\n\t\t}\n\t}", "code_tokens": ["private", "void", "removeFromTimers", "(", ")", "{", "TimerFacility", "timerFacility", "=", "sleeContainer", ".", "getTimerFacility", "(", ")", ";", "// Iterate through the attached timers, telling the timer facility to", "// remove them", "for", "(", "Object", "obj", ":", "cacheData", ".", "getAttachedTimers", "(", ")", ")", "{", "timerFacility", ".", "cancelTimer", "(", "(", "TimerID", ")", "obj", ",", "false", ")", ";", "}", "}"], "docstring": "End Event has been delivered on the Activity Context.", "docstring_tokens": ["End", "Event", "has", "been", "delivered", "on", "the", "Activity", "Context", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L327-L334", "partition": "test", "index": 7080, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.removeNameBinding", "original_string": "public boolean removeNameBinding(String aciName) {\n\t\tboolean removed = cacheData.nameUnbound(aciName);\n\t\tif (removed && acReferencesHandler != null) {\n\t\t\tacReferencesHandler.nameReferenceRemoved();\n\t\t}\n\t\treturn removed;\n\t}", "language": "java", "code": "public boolean removeNameBinding(String aciName) {\n\t\tboolean removed = cacheData.nameUnbound(aciName);\n\t\tif (removed && acReferencesHandler != null) {\n\t\t\tacReferencesHandler.nameReferenceRemoved();\n\t\t}\n\t\treturn removed;\n\t}", "code_tokens": ["public", "boolean", "removeNameBinding", "(", "String", "aciName", ")", "{", "boolean", "removed", "=", "cacheData", ".", "nameUnbound", "(", "aciName", ")", ";", "if", "(", "removed", "&&", "acReferencesHandler", "!=", "null", ")", "{", "acReferencesHandler", ".", "nameReferenceRemoved", "(", ")", ";", "}", "return", "removed", ";", "}"], "docstring": "Add the given name to the set of activity context names that we are bound\nto. The AC Naming facility implicitly ends the activity after all names\nare unbound.\n\n@param aciName\n-- name to which we are bound.\n@return true if name bind was removed; false otherwise", "docstring_tokens": ["Add", "the", "given", "name", "to", "the", "set", "of", "activity", "context", "names", "that", "we", "are", "bound", "to", ".", "The", "AC", "Naming", "facility", "implicitly", "ends", "the", "activity", "after", "all", "names", "are", "unbound", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L273-L279", "partition": "test", "index": 7078, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java", "func_name": "ActivityContextImpl.attachSbbEntity", "original_string": "public boolean attachSbbEntity(SbbEntityID sbbEntityId) {\n\n\t\tboolean attached = cacheData.attachSbbEntity(sbbEntityId);\n\t\tif (attached) {\n\t\t\tif (acReferencesHandler != null) {\n\t\t\t\tacReferencesHandler.sbbeReferenceCreated(false);\n\t\t\t}\n\t\t}\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Attachement from sbb entity \" + sbbEntityId\n\t\t\t\t\t+ \" to AC \" + getActivityContextHandle() + \" result: \"\n\t\t\t\t\t+ attached);\n\t\t}\n\t\treturn attached;\n\t}", "language": "java", "code": "public boolean attachSbbEntity(SbbEntityID sbbEntityId) {\n\n\t\tboolean attached = cacheData.attachSbbEntity(sbbEntityId);\n\t\tif (attached) {\n\t\t\tif (acReferencesHandler != null) {\n\t\t\t\tacReferencesHandler.sbbeReferenceCreated(false);\n\t\t\t}\n\t\t}\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Attachement from sbb entity \" + sbbEntityId\n\t\t\t\t\t+ \" to AC \" + getActivityContextHandle() + \" result: \"\n\t\t\t\t\t+ attached);\n\t\t}\n\t\treturn attached;\n\t}", "code_tokens": ["public", "boolean", "attachSbbEntity", "(", "SbbEntityID", "sbbEntityId", ")", "{", "boolean", "attached", "=", "cacheData", ".", "attachSbbEntity", "(", "sbbEntityId", ")", ";", "if", "(", "attached", ")", "{", "if", "(", "acReferencesHandler", "!=", "null", ")", "{", "acReferencesHandler", ".", "sbbeReferenceCreated", "(", "false", ")", ";", "}", "}", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Attachement from sbb entity \"", "+", "sbbEntityId", "+", "\" to AC \"", "+", "getActivityContextHandle", "(", ")", "+", "\" result: \"", "+", "attached", ")", ";", "}", "return", "attached", ";", "}"], "docstring": "attach an sbb entity to this AC.\n\n@param sbbEntityId\n-- sbb entity to attach.\n@return true if the SBB Entity is attached successfully, otherwise when\nthe SBB Entitiy has already been attached before, return false", "docstring_tokens": ["attach", "an", "sbb", "entity", "to", "this", "AC", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextImpl.java#L354-L368", "partition": "test", "index": 7081, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.getCmpAttributesCopy", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic Map getCmpAttributesCopy() {\n\t\tfinal Node node = getCmpAttributesNode(false);\n\t\tif(node == null) {\n\t\t\treturn Collections.emptyMap();\n\t\t}\n\t\telse {\n\t\t\tMap result = new HashMap();\n\t\t\tNode cmpNode = null;\n\t\t\tfor (Object obj : node.getChildren()) {\n\t\t\t\tcmpNode = (Node) obj;\n\t\t\t\tresult.put(cmpNode.getFqn().getLastElement(), cmpNode\n\t\t\t\t\t\t.get(CMP_ATTRIBUTES_NODE_MAP_KEY));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic Map getCmpAttributesCopy() {\n\t\tfinal Node node = getCmpAttributesNode(false);\n\t\tif(node == null) {\n\t\t\treturn Collections.emptyMap();\n\t\t}\n\t\telse {\n\t\t\tMap result = new HashMap();\n\t\t\tNode cmpNode = null;\n\t\t\tfor (Object obj : node.getChildren()) {\n\t\t\t\tcmpNode = (Node) obj;\n\t\t\t\tresult.put(cmpNode.getFqn().getLastElement(), cmpNode\n\t\t\t\t\t\t.get(CMP_ATTRIBUTES_NODE_MAP_KEY));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "Map", "getCmpAttributesCopy", "(", ")", "{", "final", "Node", "node", "=", "getCmpAttributesNode", "(", "false", ")", ";", "if", "(", "node", "==", "null", ")", "{", "return", "Collections", ".", "emptyMap", "(", ")", ";", "}", "else", "{", "Map", "result", "=", "new", "HashMap", "(", ")", ";", "Node", "cmpNode", "=", "null", ";", "for", "(", "Object", "obj", ":", "node", ".", "getChildren", "(", ")", ")", "{", "cmpNode", "=", "(", "Node", ")", "obj", ";", "result", ".", "put", "(", "cmpNode", ".", "getFqn", "(", ")", ".", "getLastElement", "(", ")", ",", "cmpNode", ".", "get", "(", "CMP_ATTRIBUTES_NODE_MAP_KEY", ")", ")", ";", "}", "return", "result", ";", "}", "}"], "docstring": "Retrieves a map copy of the aci attributes set\n\n@return", "docstring_tokens": ["Retrieves", "a", "map", "copy", "of", "the", "aci", "attributes", "set"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L382-L398", "partition": "test", "index": 6983, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.attachTimer", "original_string": "public boolean attachTimer(TimerID timerID) {\n\t\tfinal Node node = getAttachedTimersNode(true);\n\t\tif (!node.hasChild(timerID)) {\n\t\t\tnode.addChild(Fqn.fromElements(timerID));\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}", "language": "java", "code": "public boolean attachTimer(TimerID timerID) {\n\t\tfinal Node node = getAttachedTimersNode(true);\n\t\tif (!node.hasChild(timerID)) {\n\t\t\tnode.addChild(Fqn.fromElements(timerID));\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}", "code_tokens": ["public", "boolean", "attachTimer", "(", "TimerID", "timerID", ")", "{", "final", "Node", "node", "=", "getAttachedTimersNode", "(", "true", ")", ";", "if", "(", "!", "node", ".", "hasChild", "(", "timerID", ")", ")", "{", "node", ".", "addChild", "(", "Fqn", ".", "fromElements", "(", "timerID", ")", ")", ";", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "docstring": "Attaches a timer\n\n@param timerID", "docstring_tokens": ["Attaches", "a", "timer"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L255-L264", "partition": "test", "index": 6973, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.noTimersAttached", "original_string": "public boolean noTimersAttached() {\n\t\tfinal Node node = getAttachedTimersNode(false);\n\t\treturn node != null ? node.getChildrenNames().isEmpty() : true;\n\t}", "language": "java", "code": "public boolean noTimersAttached() {\n\t\tfinal Node node = getAttachedTimersNode(false);\n\t\treturn node != null ? node.getChildrenNames().isEmpty() : true;\n\t}", "code_tokens": ["public", "boolean", "noTimersAttached", "(", ")", "{", "final", "Node", "node", "=", "getAttachedTimersNode", "(", "false", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "getChildrenNames", "(", ")", ".", "isEmpty", "(", ")", ":", "true", ";", "}"], "docstring": "Verifies if there at least one timer attached\n\n@return false is there are no timers attached, true otherwise", "docstring_tokens": ["Verifies", "if", "there", "at", "least", "one", "timer", "attached"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L281-L284", "partition": "test", "index": 6975, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.getAttachedTimers", "original_string": "public Set getAttachedTimers() {\n\t\tfinal Node node = getAttachedTimersNode(false);\n\t\treturn node != null ? node.getChildrenNames() : Collections.emptySet();\t\t\t\t\t\t\t\t\n\t}", "language": "java", "code": "public Set getAttachedTimers() {\n\t\tfinal Node node = getAttachedTimersNode(false);\n\t\treturn node != null ? node.getChildrenNames() : Collections.emptySet();\t\t\t\t\t\t\t\t\n\t}", "code_tokens": ["public", "Set", "getAttachedTimers", "(", ")", "{", "final", "Node", "node", "=", "getAttachedTimersNode", "(", "false", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "getChildrenNames", "(", ")", ":", "Collections", ".", "emptySet", "(", ")", ";", "}"], "docstring": "Returns the set of timers attached to the ac\n\n@return", "docstring_tokens": ["Returns", "the", "set", "of", "timers", "attached", "to", "the", "ac"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L291-L294", "partition": "test", "index": 6976, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.nameBound", "original_string": "public void nameBound(String name) {\n\t\tfinal Node node = getNamesBoundNode(true);\n\t\tif (!node.hasChild(name)) {\n\t\t\tnode.addChild(Fqn.fromElements(name));\n\t\t}\n\t}", "language": "java", "code": "public void nameBound(String name) {\n\t\tfinal Node node = getNamesBoundNode(true);\n\t\tif (!node.hasChild(name)) {\n\t\t\tnode.addChild(Fqn.fromElements(name));\n\t\t}\n\t}", "code_tokens": ["public", "void", "nameBound", "(", "String", "name", ")", "{", "final", "Node", "node", "=", "getNamesBoundNode", "(", "true", ")", ";", "if", "(", "!", "node", ".", "hasChild", "(", "name", ")", ")", "{", "node", ".", "addChild", "(", "Fqn", ".", "fromElements", "(", "name", ")", ")", ";", "}", "}"], "docstring": "Adds the specified name to the set of names bound to the ac\n\n@param name", "docstring_tokens": ["Adds", "the", "specified", "name", "to", "the", "set", "of", "names", "bound", "to", "the", "ac"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L301-L306", "partition": "test", "index": 6977, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.nameUnbound", "original_string": "public boolean nameUnbound(String name) {\n\t\tfinal Node node = getNamesBoundNode(false);\n\t\treturn node != null ? node.removeChild(name) : false;\n\t}", "language": "java", "code": "public boolean nameUnbound(String name) {\n\t\tfinal Node node = getNamesBoundNode(false);\n\t\treturn node != null ? node.removeChild(name) : false;\n\t}", "code_tokens": ["public", "boolean", "nameUnbound", "(", "String", "name", ")", "{", "final", "Node", "node", "=", "getNamesBoundNode", "(", "false", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "removeChild", "(", "name", ")", ":", "false", ";", "}"], "docstring": "Removes the specified name from the set of names bound to the ac\n\n@param name", "docstring_tokens": ["Removes", "the", "specified", "name", "from", "the", "set", "of", "names", "bound", "to", "the", "ac"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L313-L316", "partition": "test", "index": 6978, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.noNamesBound", "original_string": "public boolean noNamesBound() {\n\t\tfinal Node node = getNamesBoundNode(false);\n\t\treturn node != null ? node.getChildrenNames().isEmpty() : true;\n\t}", "language": "java", "code": "public boolean noNamesBound() {\n\t\tfinal Node node = getNamesBoundNode(false);\n\t\treturn node != null ? node.getChildrenNames().isEmpty() : true;\n\t}", "code_tokens": ["public", "boolean", "noNamesBound", "(", ")", "{", "final", "Node", "node", "=", "getNamesBoundNode", "(", "false", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "getChildrenNames", "(", ")", ".", "isEmpty", "(", ")", ":", "true", ";", "}"], "docstring": "Verifies if there at least one name bound to the ac\n\n@return false is there are no names bound, true otherwise", "docstring_tokens": ["Verifies", "if", "there", "at", "least", "one", "name", "bound", "to", "the", "ac"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L323-L326", "partition": "test", "index": 6979, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.getNamesBoundCopy", "original_string": "public Set getNamesBoundCopy() {\n\t\tfinal Node node = getNamesBoundNode(false);\n\t\treturn node != null ? node.getChildrenNames() : Collections.emptySet();\n\t}", "language": "java", "code": "public Set getNamesBoundCopy() {\n\t\tfinal Node node = getNamesBoundNode(false);\n\t\treturn node != null ? node.getChildrenNames() : Collections.emptySet();\n\t}", "code_tokens": ["public", "Set", "getNamesBoundCopy", "(", ")", "{", "final", "Node", "node", "=", "getNamesBoundNode", "(", "false", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "getChildrenNames", "(", ")", ":", "Collections", ".", "emptySet", "(", ")", ";", "}"], "docstring": "Returns the set of names bound to the ac\n\n@return", "docstring_tokens": ["Returns", "the", "set", "of", "names", "bound", "to", "the", "ac"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L333-L336", "partition": "test", "index": 6980, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.setCmpAttribute", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic void setCmpAttribute(String attrName, Object attrValue) {\n\t\tfinal Node node = getCmpAttributesNode(true);\n\t\tNode cmpNode = node.getChild(attrName);\n\t\tif (cmpNode == null) {\n\t\t\tcmpNode = node.addChild(Fqn.fromElements(attrName));\n\t\t}\n\t\tcmpNode.put(CMP_ATTRIBUTES_NODE_MAP_KEY, attrValue);\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic void setCmpAttribute(String attrName, Object attrValue) {\n\t\tfinal Node node = getCmpAttributesNode(true);\n\t\tNode cmpNode = node.getChild(attrName);\n\t\tif (cmpNode == null) {\n\t\t\tcmpNode = node.addChild(Fqn.fromElements(attrName));\n\t\t}\n\t\tcmpNode.put(CMP_ATTRIBUTES_NODE_MAP_KEY, attrValue);\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "void", "setCmpAttribute", "(", "String", "attrName", ",", "Object", "attrValue", ")", "{", "final", "Node", "node", "=", "getCmpAttributesNode", "(", "true", ")", ";", "Node", "cmpNode", "=", "node", ".", "getChild", "(", "attrName", ")", ";", "if", "(", "cmpNode", "==", "null", ")", "{", "cmpNode", "=", "node", ".", "addChild", "(", "Fqn", ".", "fromElements", "(", "attrName", ")", ")", ";", "}", "cmpNode", ".", "put", "(", "CMP_ATTRIBUTES_NODE_MAP_KEY", ",", "attrValue", ")", ";", "}"], "docstring": "Sets the aci cmp attribute\n\n@param attrName\n@param attrValue", "docstring_tokens": ["Sets", "the", "aci", "cmp", "attribute"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L344-L352", "partition": "test", "index": 6981, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.getCmpAttribute", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic Object getCmpAttribute(String attrName) {\n\t\tfinal Node node = getCmpAttributesNode(false);\n\t\tif(node == null) {\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\tfinal Node cmpNode = node.getChild(attrName);\n\t\t\tif (cmpNode != null) {\n\t\t\t\treturn cmpNode.get(CMP_ATTRIBUTES_NODE_MAP_KEY);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn null;\n\t\t\t}\t\t\n\t\t}\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic Object getCmpAttribute(String attrName) {\n\t\tfinal Node node = getCmpAttributesNode(false);\n\t\tif(node == null) {\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\tfinal Node cmpNode = node.getChild(attrName);\n\t\t\tif (cmpNode != null) {\n\t\t\t\treturn cmpNode.get(CMP_ATTRIBUTES_NODE_MAP_KEY);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn null;\n\t\t\t}\t\t\n\t\t}\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "Object", "getCmpAttribute", "(", "String", "attrName", ")", "{", "final", "Node", "node", "=", "getCmpAttributesNode", "(", "false", ")", ";", "if", "(", "node", "==", "null", ")", "{", "return", "null", ";", "}", "else", "{", "final", "Node", "cmpNode", "=", "node", ".", "getChild", "(", "attrName", ")", ";", "if", "(", "cmpNode", "!=", "null", ")", "{", "return", "cmpNode", ".", "get", "(", "CMP_ATTRIBUTES_NODE_MAP_KEY", ")", ";", "}", "else", "{", "return", "null", ";", "}", "}", "}"], "docstring": "Retrieves the aci cmp attribute\n\n@param attrName\n@return", "docstring_tokens": ["Retrieves", "the", "aci", "cmp", "attribute"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L360-L375", "partition": "test", "index": 6982, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.detachTimer", "original_string": "public boolean detachTimer(TimerID timerID) {\n\t\tfinal Node node = getAttachedTimersNode(false);\n\t\treturn node != null ? node.removeChild(timerID) : false;\t\t\t\n\t}", "language": "java", "code": "public boolean detachTimer(TimerID timerID) {\n\t\tfinal Node node = getAttachedTimersNode(false);\n\t\treturn node != null ? node.removeChild(timerID) : false;\t\t\t\n\t}", "code_tokens": ["public", "boolean", "detachTimer", "(", "TimerID", "timerID", ")", "{", "final", "Node", "node", "=", "getAttachedTimersNode", "(", "false", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "removeChild", "(", "timerID", ")", ":", "false", ";", "}"], "docstring": "Detaches a timer\n\n@param timerID", "docstring_tokens": ["Detaches", "a", "timer"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L271-L274", "partition": "test", "index": 6974, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.detachSbbEntity", "original_string": "public boolean detachSbbEntity(SbbEntityID sbbEntityId) {\n\t\tfinal Node node  = getAttachedSbbsNode(false);\n\t\treturn node != null ? node.removeChild(sbbEntityId) : false;\t\t\n\t}", "language": "java", "code": "public boolean detachSbbEntity(SbbEntityID sbbEntityId) {\n\t\tfinal Node node  = getAttachedSbbsNode(false);\n\t\treturn node != null ? node.removeChild(sbbEntityId) : false;\t\t\n\t}", "code_tokens": ["public", "boolean", "detachSbbEntity", "(", "SbbEntityID", "sbbEntityId", ")", "{", "final", "Node", "node", "=", "getAttachedSbbsNode", "(", "false", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "removeChild", "(", "sbbEntityId", ")", ":", "false", ";", "}"], "docstring": "Detaches an sbb entity\n\n@param sbbEntityId", "docstring_tokens": ["Detaches", "an", "sbb", "entity"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L224-L227", "partition": "test", "index": 6970, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.getSbbEntitiesAttached", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic Set<SbbEntityID> getSbbEntitiesAttached() {\n\t\tfinal Node node  = getAttachedSbbsNode(false);\n\t\treturn node != null ? node.getChildrenNames() : Collections.emptySet();\t\t\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic Set<SbbEntityID> getSbbEntitiesAttached() {\n\t\tfinal Node node  = getAttachedSbbsNode(false);\n\t\treturn node != null ? node.getChildrenNames() : Collections.emptySet();\t\t\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "Set", "<", "SbbEntityID", ">", "getSbbEntitiesAttached", "(", ")", "{", "final", "Node", "node", "=", "getAttachedSbbsNode", "(", "false", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "getChildrenNames", "(", ")", ":", "Collections", ".", "emptySet", "(", ")", ";", "}"], "docstring": "Return a set with all sbb entities attached.\n\n@return", "docstring_tokens": ["Return", "a", "set", "with", "all", "sbb", "entities", "attached", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L244-L248", "partition": "test", "index": 6972, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java", "func_name": "ActivityContextCacheData.noSbbEntitiesAttached", "original_string": "public boolean noSbbEntitiesAttached() {\n\t\tfinal Node node  = getAttachedSbbsNode(false);\n\t\treturn node != null ? node.getChildrenNames().isEmpty() : true;\n\t}", "language": "java", "code": "public boolean noSbbEntitiesAttached() {\n\t\tfinal Node node  = getAttachedSbbsNode(false);\n\t\treturn node != null ? node.getChildrenNames().isEmpty() : true;\n\t}", "code_tokens": ["public", "boolean", "noSbbEntitiesAttached", "(", ")", "{", "final", "Node", "node", "=", "getAttachedSbbsNode", "(", "false", ")", ";", "return", "node", "!=", "null", "?", "node", ".", "getChildrenNames", "(", ")", ".", "isEmpty", "(", ")", ":", "true", ";", "}"], "docstring": "Verifies if there at least one sbb entity attached\n\n@return false is there are no sbb entities attached, true otherwise", "docstring_tokens": ["Verifies", "if", "there", "at", "least", "one", "sbb", "entity", "attached"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/activities/src/main/java/org/mobicents/slee/runtime/activity/ActivityContextCacheData.java#L234-L237", "partition": "test", "index": 6971, "time": "2010-04-26 15:31:50"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbObjectPoolManagementImpl.java", "func_name": "SbbObjectPoolManagementImpl.createObjectPool", "original_string": "public void createObjectPool(final ServiceID serviceID, final SbbComponent sbbComponent,\n\t\t\tfinal SleeTransactionManager sleeTransactionManager) {\n\n\t\tif (logger.isTraceEnabled()) {\n            logger.trace(\"Creating Pool for  \" + serviceID +\" and \"+ sbbComponent);\n\t\t}\n\n\t\tcreateObjectPool(serviceID,sbbComponent);\n\n\t\tif (sleeTransactionManager != null && sleeTransactionManager.getTransactionContext() != null) {\n\t\t\t// add a rollback action to remove sbb object pool\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger\n\t\t\t\t\t\t\t\t.debug(\"Due to tx rollback, removing pool for \" + serviceID +\" and \"+ sbbComponent);\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tremoveObjectPool(serviceID,sbbComponent.getSbbID());\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tlogger.error(\"Failed to remove \" + serviceID +\" and \"+ sbbComponent + \" object pool\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tsleeTransactionManager.getTransactionContext().getAfterRollbackActions().add(action);\t\t\t\n\t\t}\n\t}", "language": "java", "code": "public void createObjectPool(final ServiceID serviceID, final SbbComponent sbbComponent,\n\t\t\tfinal SleeTransactionManager sleeTransactionManager) {\n\n\t\tif (logger.isTraceEnabled()) {\n            logger.trace(\"Creating Pool for  \" + serviceID +\" and \"+ sbbComponent);\n\t\t}\n\n\t\tcreateObjectPool(serviceID,sbbComponent);\n\n\t\tif (sleeTransactionManager != null && sleeTransactionManager.getTransactionContext() != null) {\n\t\t\t// add a rollback action to remove sbb object pool\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger\n\t\t\t\t\t\t\t\t.debug(\"Due to tx rollback, removing pool for \" + serviceID +\" and \"+ sbbComponent);\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tremoveObjectPool(serviceID,sbbComponent.getSbbID());\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tlogger.error(\"Failed to remove \" + serviceID +\" and \"+ sbbComponent + \" object pool\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tsleeTransactionManager.getTransactionContext().getAfterRollbackActions().add(action);\t\t\t\n\t\t}\n\t}", "code_tokens": ["public", "void", "createObjectPool", "(", "final", "ServiceID", "serviceID", ",", "final", "SbbComponent", "sbbComponent", ",", "final", "SleeTransactionManager", "sleeTransactionManager", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Creating Pool for  \"", "+", "serviceID", "+", "\" and \"", "+", "sbbComponent", ")", ";", "}", "createObjectPool", "(", "serviceID", ",", "sbbComponent", ")", ";", "if", "(", "sleeTransactionManager", "!=", "null", "&&", "sleeTransactionManager", ".", "getTransactionContext", "(", ")", "!=", "null", ")", "{", "// add a rollback action to remove sbb object pool", "TransactionalAction", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Due to tx rollback, removing pool for \"", "+", "serviceID", "+", "\" and \"", "+", "sbbComponent", ")", ";", "}", "try", "{", "removeObjectPool", "(", "serviceID", ",", "sbbComponent", ".", "getSbbID", "(", ")", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "\"Failed to remove \"", "+", "serviceID", "+", "\" and \"", "+", "sbbComponent", "+", "\" object pool\"", ",", "e", ")", ";", "}", "}", "}", ";", "sleeTransactionManager", ".", "getTransactionContext", "(", ")", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "action", ")", ";", "}", "}"], "docstring": "Creates an object pool for the specified service and sbb. If a\ntransaction manager is used then, and if the tx rollbacks, the pool will\nbe removed.\n\n@param\n@param sleeTransactionManager", "docstring_tokens": ["Creates", "an", "object", "pool", "for", "the", "specified", "service", "and", "sbb", ".", "If", "a", "transaction", "manager", "is", "used", "then", "and", "if", "the", "tx", "rollbacks", "the", "pool", "will", "be", "removed", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbObjectPoolManagementImpl.java#L111-L137", "partition": "test", "index": 7052, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/ChildRelationImpl.java", "func_name": "ChildRelationImpl.contains", "original_string": "public boolean contains(Object object) {\n        \n    \tif (!(object instanceof SbbLocalObject))\n            return false;\n        \n    \tfinal SbbLocalObjectImpl sbblocal = (SbbLocalObjectImpl) object;\n        final SbbEntityID sbbEntityId = sbblocal.getSbbEntityId();\n        if(!idBelongsToChildRelation(sbbEntityId)) {\n        \treturn false;\n        }\n        \n        return new SbbEntityCacheData(sbbEntityId,sleeContainer.getCluster().getMobicentsCache()).exists();\n    }", "language": "java", "code": "public boolean contains(Object object) {\n        \n    \tif (!(object instanceof SbbLocalObject))\n            return false;\n        \n    \tfinal SbbLocalObjectImpl sbblocal = (SbbLocalObjectImpl) object;\n        final SbbEntityID sbbEntityId = sbblocal.getSbbEntityId();\n        if(!idBelongsToChildRelation(sbbEntityId)) {\n        \treturn false;\n        }\n        \n        return new SbbEntityCacheData(sbbEntityId,sleeContainer.getCluster().getMobicentsCache()).exists();\n    }", "code_tokens": ["public", "boolean", "contains", "(", "Object", "object", ")", "{", "if", "(", "!", "(", "object", "instanceof", "SbbLocalObject", ")", ")", "return", "false", ";", "final", "SbbLocalObjectImpl", "sbblocal", "=", "(", "SbbLocalObjectImpl", ")", "object", ";", "final", "SbbEntityID", "sbbEntityId", "=", "sbblocal", ".", "getSbbEntityId", "(", ")", ";", "if", "(", "!", "idBelongsToChildRelation", "(", "sbbEntityId", ")", ")", "{", "return", "false", ";", "}", "return", "new", "SbbEntityCacheData", "(", "sbbEntityId", ",", "sleeContainer", ".", "getCluster", "(", ")", ".", "getMobicentsCache", "(", ")", ")", ".", "exists", "(", ")", ";", "}"], "docstring": "The contains method. This method returns true if the SBB entity\nrepresented by the SBB local object specified by the input argument is a\nmember of this child relation. If the method argument is not an SBB local\nobject, is an invalid SBB local object, or is an SBB local object whose\nunderlying SBB entity is not a member of this child relation, then this\nmethod returns false.", "docstring_tokens": ["The", "contains", "method", ".", "This", "method", "returns", "true", "if", "the", "SBB", "entity", "represented", "by", "the", "SBB", "local", "object", "specified", "by", "the", "input", "argument", "is", "a", "member", "of", "this", "child", "relation", ".", "If", "the", "method", "argument", "is", "not", "an", "SBB", "local", "object", "is", "an", "invalid", "SBB", "local", "object", "or", "is", "an", "SBB", "local", "object", "whose", "underlying", "SBB", "entity", "is", "not", "a", "member", "of", "this", "child", "relation", "then", "this", "method", "returns", "false", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/ChildRelationImpl.java#L123-L135", "partition": "test", "index": 7063, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java", "func_name": "TracerImpl.tracerNameToLog4JLoggerName", "original_string": "private String tracerNameToLog4JLoggerName(String tracerName, NotificationSource notificationSource) {\r\n\t\tfinal StringBuilder sb = new StringBuilder(\"javax.slee.\").append(notificationSource.toString());\r\n\t\tif(!tracerName.equals(ROOT_TRACER_NAME)) {\r\n\t\t\tsb.append('.').append(tracerName);\r\n\t\t}\r\n\t\treturn sb.toString();\r\n\t}", "language": "java", "code": "private String tracerNameToLog4JLoggerName(String tracerName, NotificationSource notificationSource) {\r\n\t\tfinal StringBuilder sb = new StringBuilder(\"javax.slee.\").append(notificationSource.toString());\r\n\t\tif(!tracerName.equals(ROOT_TRACER_NAME)) {\r\n\t\t\tsb.append('.').append(tracerName);\r\n\t\t}\r\n\t\treturn sb.toString();\r\n\t}", "code_tokens": ["private", "String", "tracerNameToLog4JLoggerName", "(", "String", "tracerName", ",", "NotificationSource", "notificationSource", ")", "{", "final", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", "\"javax.slee.\"", ")", ".", "append", "(", "notificationSource", ".", "toString", "(", ")", ")", ";", "if", "(", "!", "tracerName", ".", "equals", "(", "ROOT_TRACER_NAME", ")", ")", "{", "sb", ".", "append", "(", "'", "'", ")", ".", "append", "(", "tracerName", ")", ";", "}", "return", "sb", ".", "toString", "(", ")", ";", "}"], "docstring": "Generates the log4j logger name for the tracer with specified named and notification source.\n\n@param tracerName\n@param notificationSource\n@return", "docstring_tokens": ["Generates", "the", "log4j", "logger", "name", "for", "the", "tracer", "with", "specified", "named", "and", "notification", "source", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java#L102-L108", "partition": "test", "index": 7151, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbLocalObjectGenerator.java", "func_name": "ConcreteSbbLocalObjectGenerator.generateSbbLocalObjectConcreteClass", "original_string": "public Class generateSbbLocalObjectConcreteClass() {\n        //Generates the implements link\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"generateSbbLocalObjectConcreteClass: sbbLocalObjectInterface = \"\n                            + sbbLocalObjectName\n                            + \" deployPath = \"\n                            + deployPath);\n        }\n\n        try {\n        \t\n        \tconcreteSbbLocalObject = pool.makeClass(ConcreteClassGeneratorUtils.SBB_LOCAL_OBJECT_CLASS_NAME_PREFIX + sbbLocalObjectName + ConcreteClassGeneratorUtils.SBB_LOCAL_OBJECT_CLASS_NAME_SUFFIX);\n    \t\t\n            try {\n                sleeSbbLocalObject = pool.get(SbbLocalObjectImpl.class\n                        .getName());\n                sbbLocalObjectInterface = pool.get(sbbLocalObjectName);\n            } catch (NotFoundException nfe) {\n                nfe.printStackTrace();\n                String s = \"Problem with pool \";\n                logger.error(s, nfe);\n                throw new RuntimeException(s, nfe);\n            }\n            // This is our implementation interface.\n            CtClass concreteClassInterface;\n            try {\n                concreteClassInterface = pool.get(SbbLocalObjectConcrete.class\n                        .getName());\n            } catch (NotFoundException nfe) {\n                nfe.printStackTrace();\n                String s = \"Problem with the pool! \";\n                logger.error(s, nfe);\n                throw new RuntimeException(s, nfe);\n            }\n\n            ConcreteClassGeneratorUtils.createInterfaceLinks(\n                    concreteSbbLocalObject, new CtClass[] {\n                            sbbLocalObjectInterface, concreteClassInterface });\n            //Generates an inheritance link to the slee implementation of the\n            // SbbLocalObject interface\n            ConcreteClassGeneratorUtils.createInheritanceLink(\n                    concreteSbbLocalObject, sleeSbbLocalObject);\n            \n            //Generates the methods to implement from the interface\n\n            Map interfaceMethods = ClassUtils\n                    .getInterfaceMethodsFromInterface(sbbLocalObjectInterface);\n\n            generateConcreteMethods(interfaceMethods, sbbAbstractClassName);           \n\n            try {\n            \tconcreteSbbLocalObject.writeFile(deployPath);\n            \tif (logger.isDebugEnabled()) {\n                    logger\n                        .debug(\"Concrete Class \"\n                                + concreteSbbLocalObject.getName()\n                                + \" generated in the following path \"\n                                + deployPath);\n                }            \n            } catch (CannotCompileException e) {\n\n                String s = \" Unexpected exception ! \";\n                logger.fatal(s, e);\n                throw new RuntimeException(s, e);\n\n            } catch (IOException e) {\n                String s = \"IO Exception!\";\n                logger.error(s, e);\n                return null;\n\n            }\n            //load the class\n            try {\n\t\t\t\treturn Thread.currentThread().getContextClassLoader().loadClass(concreteSbbLocalObject.getName());\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tlogger.error(\"unable to load sbb local object impl class\", e);\n\t\t\t\treturn null;\n\t\t\t}\n            \n        } finally {\n            if (this.concreteSbbLocalObject != null)\n                this.concreteSbbLocalObject.defrost();\n        }\n    }", "language": "java", "code": "public Class generateSbbLocalObjectConcreteClass() {\n        //Generates the implements link\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"generateSbbLocalObjectConcreteClass: sbbLocalObjectInterface = \"\n                            + sbbLocalObjectName\n                            + \" deployPath = \"\n                            + deployPath);\n        }\n\n        try {\n        \t\n        \tconcreteSbbLocalObject = pool.makeClass(ConcreteClassGeneratorUtils.SBB_LOCAL_OBJECT_CLASS_NAME_PREFIX + sbbLocalObjectName + ConcreteClassGeneratorUtils.SBB_LOCAL_OBJECT_CLASS_NAME_SUFFIX);\n    \t\t\n            try {\n                sleeSbbLocalObject = pool.get(SbbLocalObjectImpl.class\n                        .getName());\n                sbbLocalObjectInterface = pool.get(sbbLocalObjectName);\n            } catch (NotFoundException nfe) {\n                nfe.printStackTrace();\n                String s = \"Problem with pool \";\n                logger.error(s, nfe);\n                throw new RuntimeException(s, nfe);\n            }\n            // This is our implementation interface.\n            CtClass concreteClassInterface;\n            try {\n                concreteClassInterface = pool.get(SbbLocalObjectConcrete.class\n                        .getName());\n            } catch (NotFoundException nfe) {\n                nfe.printStackTrace();\n                String s = \"Problem with the pool! \";\n                logger.error(s, nfe);\n                throw new RuntimeException(s, nfe);\n            }\n\n            ConcreteClassGeneratorUtils.createInterfaceLinks(\n                    concreteSbbLocalObject, new CtClass[] {\n                            sbbLocalObjectInterface, concreteClassInterface });\n            //Generates an inheritance link to the slee implementation of the\n            // SbbLocalObject interface\n            ConcreteClassGeneratorUtils.createInheritanceLink(\n                    concreteSbbLocalObject, sleeSbbLocalObject);\n            \n            //Generates the methods to implement from the interface\n\n            Map interfaceMethods = ClassUtils\n                    .getInterfaceMethodsFromInterface(sbbLocalObjectInterface);\n\n            generateConcreteMethods(interfaceMethods, sbbAbstractClassName);           \n\n            try {\n            \tconcreteSbbLocalObject.writeFile(deployPath);\n            \tif (logger.isDebugEnabled()) {\n                    logger\n                        .debug(\"Concrete Class \"\n                                + concreteSbbLocalObject.getName()\n                                + \" generated in the following path \"\n                                + deployPath);\n                }            \n            } catch (CannotCompileException e) {\n\n                String s = \" Unexpected exception ! \";\n                logger.fatal(s, e);\n                throw new RuntimeException(s, e);\n\n            } catch (IOException e) {\n                String s = \"IO Exception!\";\n                logger.error(s, e);\n                return null;\n\n            }\n            //load the class\n            try {\n\t\t\t\treturn Thread.currentThread().getContextClassLoader().loadClass(concreteSbbLocalObject.getName());\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tlogger.error(\"unable to load sbb local object impl class\", e);\n\t\t\t\treturn null;\n\t\t\t}\n            \n        } finally {\n            if (this.concreteSbbLocalObject != null)\n                this.concreteSbbLocalObject.defrost();\n        }\n    }", "code_tokens": ["public", "Class", "generateSbbLocalObjectConcreteClass", "(", ")", "{", "//Generates the implements link", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"generateSbbLocalObjectConcreteClass: sbbLocalObjectInterface = \"", "+", "sbbLocalObjectName", "+", "\" deployPath = \"", "+", "deployPath", ")", ";", "}", "try", "{", "concreteSbbLocalObject", "=", "pool", ".", "makeClass", "(", "ConcreteClassGeneratorUtils", ".", "SBB_LOCAL_OBJECT_CLASS_NAME_PREFIX", "+", "sbbLocalObjectName", "+", "ConcreteClassGeneratorUtils", ".", "SBB_LOCAL_OBJECT_CLASS_NAME_SUFFIX", ")", ";", "try", "{", "sleeSbbLocalObject", "=", "pool", ".", "get", "(", "SbbLocalObjectImpl", ".", "class", ".", "getName", "(", ")", ")", ";", "sbbLocalObjectInterface", "=", "pool", ".", "get", "(", "sbbLocalObjectName", ")", ";", "}", "catch", "(", "NotFoundException", "nfe", ")", "{", "nfe", ".", "printStackTrace", "(", ")", ";", "String", "s", "=", "\"Problem with pool \"", ";", "logger", ".", "error", "(", "s", ",", "nfe", ")", ";", "throw", "new", "RuntimeException", "(", "s", ",", "nfe", ")", ";", "}", "// This is our implementation interface.", "CtClass", "concreteClassInterface", ";", "try", "{", "concreteClassInterface", "=", "pool", ".", "get", "(", "SbbLocalObjectConcrete", ".", "class", ".", "getName", "(", ")", ")", ";", "}", "catch", "(", "NotFoundException", "nfe", ")", "{", "nfe", ".", "printStackTrace", "(", ")", ";", "String", "s", "=", "\"Problem with the pool! \"", ";", "logger", ".", "error", "(", "s", ",", "nfe", ")", ";", "throw", "new", "RuntimeException", "(", "s", ",", "nfe", ")", ";", "}", "ConcreteClassGeneratorUtils", ".", "createInterfaceLinks", "(", "concreteSbbLocalObject", ",", "new", "CtClass", "[", "]", "{", "sbbLocalObjectInterface", ",", "concreteClassInterface", "}", ")", ";", "//Generates an inheritance link to the slee implementation of the", "// SbbLocalObject interface", "ConcreteClassGeneratorUtils", ".", "createInheritanceLink", "(", "concreteSbbLocalObject", ",", "sleeSbbLocalObject", ")", ";", "//Generates the methods to implement from the interface", "Map", "interfaceMethods", "=", "ClassUtils", ".", "getInterfaceMethodsFromInterface", "(", "sbbLocalObjectInterface", ")", ";", "generateConcreteMethods", "(", "interfaceMethods", ",", "sbbAbstractClassName", ")", ";", "try", "{", "concreteSbbLocalObject", ".", "writeFile", "(", "deployPath", ")", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Concrete Class \"", "+", "concreteSbbLocalObject", ".", "getName", "(", ")", "+", "\" generated in the following path \"", "+", "deployPath", ")", ";", "}", "}", "catch", "(", "CannotCompileException", "e", ")", "{", "String", "s", "=", "\" Unexpected exception ! \"", ";", "logger", ".", "fatal", "(", "s", ",", "e", ")", ";", "throw", "new", "RuntimeException", "(", "s", ",", "e", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "String", "s", "=", "\"IO Exception!\"", ";", "logger", ".", "error", "(", "s", ",", "e", ")", ";", "return", "null", ";", "}", "//load the class", "try", "{", "return", "Thread", ".", "currentThread", "(", ")", ".", "getContextClassLoader", "(", ")", ".", "loadClass", "(", "concreteSbbLocalObject", ".", "getName", "(", ")", ")", ";", "}", "catch", "(", "ClassNotFoundException", "e", ")", "{", "logger", ".", "error", "(", "\"unable to load sbb local object impl class\"", ",", "e", ")", ";", "return", "null", ";", "}", "}", "finally", "{", "if", "(", "this", ".", "concreteSbbLocalObject", "!=", "null", ")", "this", ".", "concreteSbbLocalObject", ".", "defrost", "(", ")", ";", "}", "}"], "docstring": "Generate the Sbb Local Object Class\n\n@param sbbLocalObjectName\nthe name of the Sbb Local Object\n@return the concrete Sbb Local Object class implementing the Sbb Local\nObject", "docstring_tokens": ["Generate", "the", "Sbb", "Local", "Object", "Class"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbLocalObjectGenerator.java#L98-L181", "partition": "test", "index": 7058, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointImpl.java", "func_name": "SleeEndpointImpl._fireEvent", "original_string": "void _fireEvent(ActivityHandle realHandle, ActivityHandle refHandle,\n\t\t\tFireableEventType eventType, Object event, Address address,\n\t\t\tReceivableService receivableService, int eventFlags, final SleeTransaction barrierTx)\n\t\t\tthrows ActivityIsEndingException, SLEEException {\n\t\tfinal ActivityContextHandle ach = new ResourceAdaptorActivityContextHandleImpl(\n\t\t\t\traEntity, refHandle);\n\t\t// get ac\n\t\tfinal ActivityContext ac = acFactory.getActivityContext(ach);\n\t\tif (ac == null) {\n\t\t\tthrow new UnrecognizedActivityHandleException(\"Unable to fire \"\n\t\t\t\t\t+ eventType.getEventType() + \" on activity handle \"\n\t\t\t\t\t+ realHandle\n\t\t\t\t\t+ \" , the handle is not mapped to an activity context\");\n\t\t} else {\n\t\t\t// suspend activity if needed\n\t\t\tif (barrierTx != null) {\n\t\t\t\tfinal ActivityEventQueueManager aeqm = ac.getLocalActivityContext().getEventQueueManager();\n\t\t\t\taeqm.createBarrier(barrierTx);\n\t\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\taeqm.removeBarrier(barrierTx);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal TransactionContext tc = barrierTx.getTransactionContext();\n\t\t\t\ttc.getAfterCommitActions().add(action);\n\t\t\t\ttc.getAfterRollbackActions().add(action);\n\t\t\t}\n\t\t\tfinal EventProcessingCallbacks callbacks = new EventProcessingCallbacks(\n\t\t\t\t\trealHandle, eventType, event, address, receivableService,\n\t\t\t\t\teventFlags, raEntity);\n\t\t\tfinal EventProcessingSucceedCallback succeedCallback = EventFlags\n\t\t\t\t\t.hasRequestProcessingSuccessfulCallback(eventFlags) ? callbacks\n\t\t\t\t\t: null;\n\t\t\tfinal EventProcessingFailedCallback failedCallback = EventFlags\n\t\t\t\t\t.hasRequestProcessingFailedCallback(eventFlags) ? callbacks\n\t\t\t\t\t: null;\n\t\t\tfinal EventUnreferencedCallback unreferencedCallback = EventFlags\n\t\t\t\t\t.hasRequestEventReferenceReleasedCallback(eventFlags) ? callbacks\n\t\t\t\t\t: null;\n\t\t\tac.fireEvent(eventType.getEventType(), event, address,\n\t\t\t\t\treceivableService == null ? null : receivableService\n\t\t\t\t\t\t\t.getService(), succeedCallback, failedCallback,\n\t\t\t\t\tunreferencedCallback);\n\t\t}\n\t}", "language": "java", "code": "void _fireEvent(ActivityHandle realHandle, ActivityHandle refHandle,\n\t\t\tFireableEventType eventType, Object event, Address address,\n\t\t\tReceivableService receivableService, int eventFlags, final SleeTransaction barrierTx)\n\t\t\tthrows ActivityIsEndingException, SLEEException {\n\t\tfinal ActivityContextHandle ach = new ResourceAdaptorActivityContextHandleImpl(\n\t\t\t\traEntity, refHandle);\n\t\t// get ac\n\t\tfinal ActivityContext ac = acFactory.getActivityContext(ach);\n\t\tif (ac == null) {\n\t\t\tthrow new UnrecognizedActivityHandleException(\"Unable to fire \"\n\t\t\t\t\t+ eventType.getEventType() + \" on activity handle \"\n\t\t\t\t\t+ realHandle\n\t\t\t\t\t+ \" , the handle is not mapped to an activity context\");\n\t\t} else {\n\t\t\t// suspend activity if needed\n\t\t\tif (barrierTx != null) {\n\t\t\t\tfinal ActivityEventQueueManager aeqm = ac.getLocalActivityContext().getEventQueueManager();\n\t\t\t\taeqm.createBarrier(barrierTx);\n\t\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\taeqm.removeBarrier(barrierTx);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal TransactionContext tc = barrierTx.getTransactionContext();\n\t\t\t\ttc.getAfterCommitActions().add(action);\n\t\t\t\ttc.getAfterRollbackActions().add(action);\n\t\t\t}\n\t\t\tfinal EventProcessingCallbacks callbacks = new EventProcessingCallbacks(\n\t\t\t\t\trealHandle, eventType, event, address, receivableService,\n\t\t\t\t\teventFlags, raEntity);\n\t\t\tfinal EventProcessingSucceedCallback succeedCallback = EventFlags\n\t\t\t\t\t.hasRequestProcessingSuccessfulCallback(eventFlags) ? callbacks\n\t\t\t\t\t: null;\n\t\t\tfinal EventProcessingFailedCallback failedCallback = EventFlags\n\t\t\t\t\t.hasRequestProcessingFailedCallback(eventFlags) ? callbacks\n\t\t\t\t\t: null;\n\t\t\tfinal EventUnreferencedCallback unreferencedCallback = EventFlags\n\t\t\t\t\t.hasRequestEventReferenceReleasedCallback(eventFlags) ? callbacks\n\t\t\t\t\t: null;\n\t\t\tac.fireEvent(eventType.getEventType(), event, address,\n\t\t\t\t\treceivableService == null ? null : receivableService\n\t\t\t\t\t\t\t.getService(), succeedCallback, failedCallback,\n\t\t\t\t\tunreferencedCallback);\n\t\t}\n\t}", "code_tokens": ["void", "_fireEvent", "(", "ActivityHandle", "realHandle", ",", "ActivityHandle", "refHandle", ",", "FireableEventType", "eventType", ",", "Object", "event", ",", "Address", "address", ",", "ReceivableService", "receivableService", ",", "int", "eventFlags", ",", "final", "SleeTransaction", "barrierTx", ")", "throws", "ActivityIsEndingException", ",", "SLEEException", "{", "final", "ActivityContextHandle", "ach", "=", "new", "ResourceAdaptorActivityContextHandleImpl", "(", "raEntity", ",", "refHandle", ")", ";", "// get ac", "final", "ActivityContext", "ac", "=", "acFactory", ".", "getActivityContext", "(", "ach", ")", ";", "if", "(", "ac", "==", "null", ")", "{", "throw", "new", "UnrecognizedActivityHandleException", "(", "\"Unable to fire \"", "+", "eventType", ".", "getEventType", "(", ")", "+", "\" on activity handle \"", "+", "realHandle", "+", "\" , the handle is not mapped to an activity context\"", ")", ";", "}", "else", "{", "// suspend activity if needed", "if", "(", "barrierTx", "!=", "null", ")", "{", "final", "ActivityEventQueueManager", "aeqm", "=", "ac", ".", "getLocalActivityContext", "(", ")", ".", "getEventQueueManager", "(", ")", ";", "aeqm", ".", "createBarrier", "(", "barrierTx", ")", ";", "TransactionalAction", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "aeqm", ".", "removeBarrier", "(", "barrierTx", ")", ";", "}", "}", ";", "final", "TransactionContext", "tc", "=", "barrierTx", ".", "getTransactionContext", "(", ")", ";", "tc", ".", "getAfterCommitActions", "(", ")", ".", "add", "(", "action", ")", ";", "tc", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "action", ")", ";", "}", "final", "EventProcessingCallbacks", "callbacks", "=", "new", "EventProcessingCallbacks", "(", "realHandle", ",", "eventType", ",", "event", ",", "address", ",", "receivableService", ",", "eventFlags", ",", "raEntity", ")", ";", "final", "EventProcessingSucceedCallback", "succeedCallback", "=", "EventFlags", ".", "hasRequestProcessingSuccessfulCallback", "(", "eventFlags", ")", "?", "callbacks", ":", "null", ";", "final", "EventProcessingFailedCallback", "failedCallback", "=", "EventFlags", ".", "hasRequestProcessingFailedCallback", "(", "eventFlags", ")", "?", "callbacks", ":", "null", ";", "final", "EventUnreferencedCallback", "unreferencedCallback", "=", "EventFlags", ".", "hasRequestEventReferenceReleasedCallback", "(", "eventFlags", ")", "?", "callbacks", ":", "null", ";", "ac", ".", "fireEvent", "(", "eventType", ".", "getEventType", "(", ")", ",", "event", ",", "address", ",", "receivableService", "==", "null", "?", "null", ":", "receivableService", ".", "getService", "(", ")", ",", "succeedCallback", ",", "failedCallback", ",", "unreferencedCallback", ")", ";", "}", "}"], "docstring": "Event firing logic independent of transaction management.\n\n@param realHandle\n@param refHandle\n@param eventType\n@param event\n@param address\n@param receivableService\n@param eventFlags\n@param barrierTx\n@throws ActivityIsEndingException\n@throws SLEEException", "docstring_tokens": ["Event", "firing", "logic", "independent", "of", "transaction", "management", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointImpl.java#L731-L775", "partition": "test", "index": 7057, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointImpl.java", "func_name": "SleeEndpointImpl.checkFireEventPreconditions", "original_string": "private void checkFireEventPreconditions(ActivityHandle handle,\n\t\t\tFireableEventType eventType, Object event)\n\t\t\tthrows NullPointerException, IllegalEventException,\n\t\t\tIllegalStateException {\n\n\t\tif (event == null)\n\t\t\tthrow new NullPointerException(\"event is null\");\n\n\t\tif (handle == null)\n\t\t\tthrow new NullPointerException(\"handle is null\");\n\n\t\tif (eventType == null) {\n\t\t\tthrow new NullPointerException(\"eventType is null\");\n\t\t}\n\t\tfinal EventTypeComponent eventTypeComponent = componentRepository\n\t\t\t\t.getComponentByID(eventType.getEventType());\n\t\tif (eventTypeComponent == null) {\n\t\t\tthrow new IllegalEventException(\n\t\t\t\t\t\"event type not installed (more on SLEE 1.1 specs 15.14.8)\");\n\t\t}\n\n\t\tif (!eventTypeComponent.getEventTypeClass().isAssignableFrom(\n\t\t\t\tevent.getClass())) {\n\t\t\tthrow new IllegalEventException(\n\t\t\t\t\t\"the class of the event object fired is not assignable to the event class of the event type (more on SLEE 1.1 specs 15.14.8) \");\n\t\t}\n\n\t\tif (eventType.getClass() != FireableEventTypeImpl.class) {\n\t\t\tthrow new IllegalEventException(\n\t\t\t\t\t\"unknown implementation of FireableEventType\");\n\t\t}\n\n\t\tif (raEntity.getAllowedEventTypes() != null\n\t\t\t\t&& !raEntity.getAllowedEventTypes().contains(\n\t\t\t\t\t\teventType.getEventType())) {\n\t\t\tthrow new IllegalEventException(\n\t\t\t\t\t\"Resource Adaptor configured to not ignore ra type event checking and the event \"\n\t\t\t\t\t\t\t+ eventType.getEventType()\n\t\t\t\t\t\t\t+ \" does not belongs to any of the ra types implemented by the resource adaptor\");\n\t\t}\n\t}", "language": "java", "code": "private void checkFireEventPreconditions(ActivityHandle handle,\n\t\t\tFireableEventType eventType, Object event)\n\t\t\tthrows NullPointerException, IllegalEventException,\n\t\t\tIllegalStateException {\n\n\t\tif (event == null)\n\t\t\tthrow new NullPointerException(\"event is null\");\n\n\t\tif (handle == null)\n\t\t\tthrow new NullPointerException(\"handle is null\");\n\n\t\tif (eventType == null) {\n\t\t\tthrow new NullPointerException(\"eventType is null\");\n\t\t}\n\t\tfinal EventTypeComponent eventTypeComponent = componentRepository\n\t\t\t\t.getComponentByID(eventType.getEventType());\n\t\tif (eventTypeComponent == null) {\n\t\t\tthrow new IllegalEventException(\n\t\t\t\t\t\"event type not installed (more on SLEE 1.1 specs 15.14.8)\");\n\t\t}\n\n\t\tif (!eventTypeComponent.getEventTypeClass().isAssignableFrom(\n\t\t\t\tevent.getClass())) {\n\t\t\tthrow new IllegalEventException(\n\t\t\t\t\t\"the class of the event object fired is not assignable to the event class of the event type (more on SLEE 1.1 specs 15.14.8) \");\n\t\t}\n\n\t\tif (eventType.getClass() != FireableEventTypeImpl.class) {\n\t\t\tthrow new IllegalEventException(\n\t\t\t\t\t\"unknown implementation of FireableEventType\");\n\t\t}\n\n\t\tif (raEntity.getAllowedEventTypes() != null\n\t\t\t\t&& !raEntity.getAllowedEventTypes().contains(\n\t\t\t\t\t\teventType.getEventType())) {\n\t\t\tthrow new IllegalEventException(\n\t\t\t\t\t\"Resource Adaptor configured to not ignore ra type event checking and the event \"\n\t\t\t\t\t\t\t+ eventType.getEventType()\n\t\t\t\t\t\t\t+ \" does not belongs to any of the ra types implemented by the resource adaptor\");\n\t\t}\n\t}", "code_tokens": ["private", "void", "checkFireEventPreconditions", "(", "ActivityHandle", "handle", ",", "FireableEventType", "eventType", ",", "Object", "event", ")", "throws", "NullPointerException", ",", "IllegalEventException", ",", "IllegalStateException", "{", "if", "(", "event", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"event is null\"", ")", ";", "if", "(", "handle", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"handle is null\"", ")", ";", "if", "(", "eventType", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"eventType is null\"", ")", ";", "}", "final", "EventTypeComponent", "eventTypeComponent", "=", "componentRepository", ".", "getComponentByID", "(", "eventType", ".", "getEventType", "(", ")", ")", ";", "if", "(", "eventTypeComponent", "==", "null", ")", "{", "throw", "new", "IllegalEventException", "(", "\"event type not installed (more on SLEE 1.1 specs 15.14.8)\"", ")", ";", "}", "if", "(", "!", "eventTypeComponent", ".", "getEventTypeClass", "(", ")", ".", "isAssignableFrom", "(", "event", ".", "getClass", "(", ")", ")", ")", "{", "throw", "new", "IllegalEventException", "(", "\"the class of the event object fired is not assignable to the event class of the event type (more on SLEE 1.1 specs 15.14.8) \"", ")", ";", "}", "if", "(", "eventType", ".", "getClass", "(", ")", "!=", "FireableEventTypeImpl", ".", "class", ")", "{", "throw", "new", "IllegalEventException", "(", "\"unknown implementation of FireableEventType\"", ")", ";", "}", "if", "(", "raEntity", ".", "getAllowedEventTypes", "(", ")", "!=", "null", "&&", "!", "raEntity", ".", "getAllowedEventTypes", "(", ")", ".", "contains", "(", "eventType", ".", "getEventType", "(", ")", ")", ")", "{", "throw", "new", "IllegalEventException", "(", "\"Resource Adaptor configured to not ignore ra type event checking and the event \"", "+", "eventType", ".", "getEventType", "(", ")", "+", "\" does not belongs to any of the ra types implemented by the resource adaptor\"", ")", ";", "}", "}"], "docstring": "Checks that fire event methods can be invoked\n\n@param handle\n@param eventType\n@param event\n@throws NullPointerException\n@throws IllegalEventException\n@throws IllegalStateException", "docstring_tokens": ["Checks", "that", "fire", "event", "methods", "can", "be", "invoked"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointImpl.java#L675-L715", "partition": "test", "index": 7056, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointOperationNotTransactedExecutor.java", "func_name": "SleeEndpointOperationNotTransactedExecutor.resumeTransaction", "original_string": "void resumeTransaction(SleeTransaction transaction) throws SLEEException {\r\n\t\tif (transaction != null) {\r\n\t\t\ttry {\r\n\t\t\t\ttxManager.resume(transaction);\r\n\t\t\t} catch (Throwable e) {\r\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "language": "java", "code": "void resumeTransaction(SleeTransaction transaction) throws SLEEException {\r\n\t\tif (transaction != null) {\r\n\t\t\ttry {\r\n\t\t\t\ttxManager.resume(transaction);\r\n\t\t\t} catch (Throwable e) {\r\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "code_tokens": ["void", "resumeTransaction", "(", "SleeTransaction", "transaction", ")", "throws", "SLEEException", "{", "if", "(", "transaction", "!=", "null", ")", "{", "try", "{", "txManager", ".", "resume", "(", "transaction", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}"], "docstring": "Resumes the specified tx. If it is null nothing is done.\n@param transaction\n@throws SLEEException if there is a system error in tx manager", "docstring_tokens": ["Resumes", "the", "specified", "tx", ".", "If", "it", "is", "null", "nothing", "is", "done", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointOperationNotTransactedExecutor.java#L89-L97", "partition": "test", "index": 7165, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerStorage.java", "func_name": "TracerStorage.getDefinedTracerNames", "original_string": "public String[] getDefinedTracerNames() {\n\t\tSet<String> names = new HashSet<String>();\n\t\tfor (TracerImpl t : this.tracers.values()) {\n\t\t\tif (t.isExplicitlySetTracerLevel())\n\t\t\t\tnames.add(t.getTracerName());\n\t\t}\n\t\tif(names.isEmpty())\n\t\t\treturn new String[0];\n\t\treturn names.toArray(new String[names.size()]);\n\t}", "language": "java", "code": "public String[] getDefinedTracerNames() {\n\t\tSet<String> names = new HashSet<String>();\n\t\tfor (TracerImpl t : this.tracers.values()) {\n\t\t\tif (t.isExplicitlySetTracerLevel())\n\t\t\t\tnames.add(t.getTracerName());\n\t\t}\n\t\tif(names.isEmpty())\n\t\t\treturn new String[0];\n\t\treturn names.toArray(new String[names.size()]);\n\t}", "code_tokens": ["public", "String", "[", "]", "getDefinedTracerNames", "(", ")", "{", "Set", "<", "String", ">", "names", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "for", "(", "TracerImpl", "t", ":", "this", ".", "tracers", ".", "values", "(", ")", ")", "{", "if", "(", "t", ".", "isExplicitlySetTracerLevel", "(", ")", ")", "names", ".", "add", "(", "t", ".", "getTracerName", "(", ")", ")", ";", "}", "if", "(", "names", ".", "isEmpty", "(", ")", ")", "return", "new", "String", "[", "0", "]", ";", "return", "names", ".", "toArray", "(", "new", "String", "[", "names", ".", "size", "(", ")", "]", ")", ";", "}"], "docstring": "This method returns tracer names that have been defined explicitly via\nsetTraceLevel from TraceMBean\n\n@return", "docstring_tokens": ["This", "method", "returns", "tracer", "names", "that", "have", "been", "defined", "explicitly", "via", "setTraceLevel", "from", "TraceMBean"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerStorage.java#L127-L136", "partition": "test", "index": 7046, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerStorage.java", "func_name": "TracerStorage.createTracer", "original_string": "public Tracer createTracer(String tracerName, boolean requestedBySource) {\n\t\n\t\tTracerImpl tparent = null;\n\t\tTracerImpl t = tracers.get(tracerName);\n\t\tif (t == null) {\n\t\t\tString[] split = tracerName.split(\"\\\\.\");\n\t\t\tString currentName = \"\";\n\t\t\tfor (String s : split) {\n\t\t\t\tif (tparent == null) {\n\t\t\t\t\t// first loop\n\t\t\t\t\ttparent = rootTracer;\n\t\t\t\t\tcurrentName = s;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentName = currentName + \".\" + s;\n\t\t\t\t}\n\t\t\t\tt = tracers.get(currentName);\n\t\t\t\tif (t == null) {\n\t\t\t\t\tt = new TracerImpl(currentName, tparent, this.notificationSource, this.traceFacility);\n\t\t\t\t\tfinal TracerImpl u = tracers.putIfAbsent(t.getTracerName(), t);\n\t\t\t\t\tif (u != null) {\n\t\t\t\t\t\tt = u;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttparent = t;\n\t\t\t}\n\t\t}\n\n\t\tif (requestedBySource)\n\t\t\tt.setRequestedBySource(requestedBySource);\n\t\treturn t;\n\t}", "language": "java", "code": "public Tracer createTracer(String tracerName, boolean requestedBySource) {\n\t\n\t\tTracerImpl tparent = null;\n\t\tTracerImpl t = tracers.get(tracerName);\n\t\tif (t == null) {\n\t\t\tString[] split = tracerName.split(\"\\\\.\");\n\t\t\tString currentName = \"\";\n\t\t\tfor (String s : split) {\n\t\t\t\tif (tparent == null) {\n\t\t\t\t\t// first loop\n\t\t\t\t\ttparent = rootTracer;\n\t\t\t\t\tcurrentName = s;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentName = currentName + \".\" + s;\n\t\t\t\t}\n\t\t\t\tt = tracers.get(currentName);\n\t\t\t\tif (t == null) {\n\t\t\t\t\tt = new TracerImpl(currentName, tparent, this.notificationSource, this.traceFacility);\n\t\t\t\t\tfinal TracerImpl u = tracers.putIfAbsent(t.getTracerName(), t);\n\t\t\t\t\tif (u != null) {\n\t\t\t\t\t\tt = u;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttparent = t;\n\t\t\t}\n\t\t}\n\n\t\tif (requestedBySource)\n\t\t\tt.setRequestedBySource(requestedBySource);\n\t\treturn t;\n\t}", "code_tokens": ["public", "Tracer", "createTracer", "(", "String", "tracerName", ",", "boolean", "requestedBySource", ")", "{", "TracerImpl", "tparent", "=", "null", ";", "TracerImpl", "t", "=", "tracers", ".", "get", "(", "tracerName", ")", ";", "if", "(", "t", "==", "null", ")", "{", "String", "[", "]", "split", "=", "tracerName", ".", "split", "(", "\"\\\\.\"", ")", ";", "String", "currentName", "=", "\"\"", ";", "for", "(", "String", "s", ":", "split", ")", "{", "if", "(", "tparent", "==", "null", ")", "{", "// first loop", "tparent", "=", "rootTracer", ";", "currentName", "=", "s", ";", "}", "else", "{", "currentName", "=", "currentName", "+", "\".\"", "+", "s", ";", "}", "t", "=", "tracers", ".", "get", "(", "currentName", ")", ";", "if", "(", "t", "==", "null", ")", "{", "t", "=", "new", "TracerImpl", "(", "currentName", ",", "tparent", ",", "this", ".", "notificationSource", ",", "this", ".", "traceFacility", ")", ";", "final", "TracerImpl", "u", "=", "tracers", ".", "putIfAbsent", "(", "t", ".", "getTracerName", "(", ")", ",", "t", ")", ";", "if", "(", "u", "!=", "null", ")", "{", "t", "=", "u", ";", "}", "}", "tparent", "=", "t", ";", "}", "}", "if", "(", "requestedBySource", ")", "t", ".", "setRequestedBySource", "(", "requestedBySource", ")", ";", "return", "t", ";", "}"], "docstring": "This method can be called multiple times.\n\n@param tracerName\n@param requestedBySource\n@return", "docstring_tokens": ["This", "method", "can", "be", "called", "multiple", "times", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerStorage.java#L145-L175", "partition": "test", "index": 7047, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java", "func_name": "TracerImpl.checkTracerName", "original_string": "public static void checkTracerName(String tracerName, NotificationSource notificationSource) throws NullPointerException,InvalidArgumentException {\r\n\r\n\t\tif (tracerName.equals(\"\")) {\r\n\t\t\t// This is root\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tStringTokenizer stringTokenizer = new StringTokenizer(tracerName, \".\", true);\r\n\r\n\t\tString lastToken = null;\r\n\r\n\t\twhile (stringTokenizer.hasMoreTokens()) {\r\n\t\t\tString token = stringTokenizer.nextToken();\r\n\t\t\tif (lastToken == null) {\r\n\t\t\t\t// this is start\r\n\t\t\t\tlastToken = token;\r\n\t\t\t}\r\n\r\n\t\t\tif (lastToken.equals(token) && token.equals(\".\")) {\r\n\t\t\t\tthrow new InvalidArgumentException(\"Passed tracer:\" + tracerName + \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t\t}\r\n\r\n\t\t\tlastToken = token;\r\n\r\n\t\t}\r\n\r\n\t\tif (lastToken.equals(\".\")) {\r\n\t\t\tthrow new IllegalArgumentException(\"Passed tracer:\" + tracerName + \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t}\r\n\r\n\t}", "language": "java", "code": "public static void checkTracerName(String tracerName, NotificationSource notificationSource) throws NullPointerException,InvalidArgumentException {\r\n\r\n\t\tif (tracerName.equals(\"\")) {\r\n\t\t\t// This is root\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tStringTokenizer stringTokenizer = new StringTokenizer(tracerName, \".\", true);\r\n\r\n\t\tString lastToken = null;\r\n\r\n\t\twhile (stringTokenizer.hasMoreTokens()) {\r\n\t\t\tString token = stringTokenizer.nextToken();\r\n\t\t\tif (lastToken == null) {\r\n\t\t\t\t// this is start\r\n\t\t\t\tlastToken = token;\r\n\t\t\t}\r\n\r\n\t\t\tif (lastToken.equals(token) && token.equals(\".\")) {\r\n\t\t\t\tthrow new InvalidArgumentException(\"Passed tracer:\" + tracerName + \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t\t}\r\n\r\n\t\t\tlastToken = token;\r\n\r\n\t\t}\r\n\r\n\t\tif (lastToken.equals(\".\")) {\r\n\t\t\tthrow new IllegalArgumentException(\"Passed tracer:\" + tracerName + \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t}\r\n\r\n\t}", "code_tokens": ["public", "static", "void", "checkTracerName", "(", "String", "tracerName", ",", "NotificationSource", "notificationSource", ")", "throws", "NullPointerException", ",", "InvalidArgumentException", "{", "if", "(", "tracerName", ".", "equals", "(", "\"\"", ")", ")", "{", "// This is root\r", "return", ";", "}", "StringTokenizer", "stringTokenizer", "=", "new", "StringTokenizer", "(", "tracerName", ",", "\".\"", ",", "true", ")", ";", "String", "lastToken", "=", "null", ";", "while", "(", "stringTokenizer", ".", "hasMoreTokens", "(", ")", ")", "{", "String", "token", "=", "stringTokenizer", ".", "nextToken", "(", ")", ";", "if", "(", "lastToken", "==", "null", ")", "{", "// this is start\r", "lastToken", "=", "token", ";", "}", "if", "(", "lastToken", ".", "equals", "(", "token", ")", "&&", "token", ".", "equals", "(", "\".\"", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "\"Passed tracer:\"", "+", "tracerName", "+", "\", name for source: \"", "+", "notificationSource", "+", "\", is illegal\"", ")", ";", "}", "lastToken", "=", "token", ";", "}", "if", "(", "lastToken", ".", "equals", "(", "\".\"", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Passed tracer:\"", "+", "tracerName", "+", "\", name for source: \"", "+", "notificationSource", "+", "\", is illegal\"", ")", ";", "}", "}"], "docstring": "This checks if the specified tracer name is ok.\n\n@param tracerName\n@param notificationSource\n@throws InvalidArgumentException", "docstring_tokens": ["This", "checks", "if", "the", "specified", "tracer", "name", "is", "ok", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java#L470-L500", "partition": "test", "index": 7156, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java", "func_name": "TracerImpl.sendNotification", "original_string": "void sendNotification(javax.slee.facilities.TraceLevel level, String message, Throwable t) {\r\n\t\tif (!isTraceable(level)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttraceMBean.sendNotification(new TraceNotification(notificationSource.getNotificationSource().getTraceNotificationType(), traceMBean, notificationSource.getNotificationSource(), getTracerName(), level, message, t, notificationSource.getNextSequence(), System.currentTimeMillis()));\r\n\t}", "language": "java", "code": "void sendNotification(javax.slee.facilities.TraceLevel level, String message, Throwable t) {\r\n\t\tif (!isTraceable(level)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttraceMBean.sendNotification(new TraceNotification(notificationSource.getNotificationSource().getTraceNotificationType(), traceMBean, notificationSource.getNotificationSource(), getTracerName(), level, message, t, notificationSource.getNextSequence(), System.currentTimeMillis()));\r\n\t}", "code_tokens": ["void", "sendNotification", "(", "javax", ".", "slee", ".", "facilities", ".", "TraceLevel", "level", ",", "String", "message", ",", "Throwable", "t", ")", "{", "if", "(", "!", "isTraceable", "(", "level", ")", ")", "{", "return", ";", "}", "traceMBean", ".", "sendNotification", "(", "new", "TraceNotification", "(", "notificationSource", ".", "getNotificationSource", "(", ")", ".", "getTraceNotificationType", "(", ")", ",", "traceMBean", ",", "notificationSource", ".", "getNotificationSource", "(", ")", ",", "getTracerName", "(", ")", ",", "level", ",", "message", ",", "t", ",", "notificationSource", ".", "getNextSequence", "(", ")", ",", "System", ".", "currentTimeMillis", "(", ")", ")", ")", ";", "}"], "docstring": "THis is internaly called, by 1.1 tracers\n\n@param src", "docstring_tokens": ["THis", "is", "internaly", "called", "by", "1", ".", "1", "tracers"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java#L456-L461", "partition": "test", "index": 7155, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/usage/src/main/java/org/mobicents/slee/container/deployment/SleeComponentWithUsageParametersClassCodeGenerator.java", "func_name": "SleeComponentWithUsageParametersClassCodeGenerator.process", "original_string": "public void process(SleeComponentWithUsageParametersInterface component) throws DeploymentException {\n\t\t\n\t\tClassPool classPool = component.getClassPool();\n\t\tString deploymentDir = component.getDeploymentDir().getAbsolutePath();\n\t\tClass<?> usageParametersInterface = component\n\t\t\t\t.getUsageParametersInterface();\n\t\tif (usageParametersInterface != null) {\n\t\t\ttry {\n\t\t\t\t// generate the concrete usage param set class\n\t\t\t\tcomponent\n\t\t\t\t\t\t.setUsageParametersConcreteClass(new ConcreteUsageParameterClassGenerator(\n\t\t\t\t\t\t\t\tusageParametersInterface.getName(),\n\t\t\t\t\t\t\t\tdeploymentDir, classPool)\n\t\t\t\t\t\t\t\t.generateConcreteUsageParameterClass());\n\t\t\t\tif (LOGGER.isDebugEnabled()) {\n\t\t\t\t\tLOGGER.debug(\"Generated usage parameter impl class for \"+component);\n\t\t        }\n\t\t\t\t// generate the mbeans\n\t\t\t\tnew ConcreteUsageParameterMBeanGenerator(component)\n\t\t\t\t\t\t.generateConcreteUsageParameterMBean();\n\t\t\t\t\n\t\t\t\tif (LOGGER.isDebugEnabled()) {\n\t\t\t\t\tLOGGER.debug(\"Generated usage mbean (interface and impl) for \"+component);\n\t\t        }\n\t\t\t\t\n\t\t\t} catch (DeploymentException ex) {\n\t\t\t\tthrow ex;\n\t\t\t} catch (Exception ex) {\n\t\t\t\tthrow new DeploymentException(\n\t\t\t\t\t\t\"Failed to generate \"+component+\" usage parameter class\", ex);\n\t\t\t}\n\t\t}\n\t\t\n\t}", "language": "java", "code": "public void process(SleeComponentWithUsageParametersInterface component) throws DeploymentException {\n\t\t\n\t\tClassPool classPool = component.getClassPool();\n\t\tString deploymentDir = component.getDeploymentDir().getAbsolutePath();\n\t\tClass<?> usageParametersInterface = component\n\t\t\t\t.getUsageParametersInterface();\n\t\tif (usageParametersInterface != null) {\n\t\t\ttry {\n\t\t\t\t// generate the concrete usage param set class\n\t\t\t\tcomponent\n\t\t\t\t\t\t.setUsageParametersConcreteClass(new ConcreteUsageParameterClassGenerator(\n\t\t\t\t\t\t\t\tusageParametersInterface.getName(),\n\t\t\t\t\t\t\t\tdeploymentDir, classPool)\n\t\t\t\t\t\t\t\t.generateConcreteUsageParameterClass());\n\t\t\t\tif (LOGGER.isDebugEnabled()) {\n\t\t\t\t\tLOGGER.debug(\"Generated usage parameter impl class for \"+component);\n\t\t        }\n\t\t\t\t// generate the mbeans\n\t\t\t\tnew ConcreteUsageParameterMBeanGenerator(component)\n\t\t\t\t\t\t.generateConcreteUsageParameterMBean();\n\t\t\t\t\n\t\t\t\tif (LOGGER.isDebugEnabled()) {\n\t\t\t\t\tLOGGER.debug(\"Generated usage mbean (interface and impl) for \"+component);\n\t\t        }\n\t\t\t\t\n\t\t\t} catch (DeploymentException ex) {\n\t\t\t\tthrow ex;\n\t\t\t} catch (Exception ex) {\n\t\t\t\tthrow new DeploymentException(\n\t\t\t\t\t\t\"Failed to generate \"+component+\" usage parameter class\", ex);\n\t\t\t}\n\t\t}\n\t\t\n\t}", "code_tokens": ["public", "void", "process", "(", "SleeComponentWithUsageParametersInterface", "component", ")", "throws", "DeploymentException", "{", "ClassPool", "classPool", "=", "component", ".", "getClassPool", "(", ")", ";", "String", "deploymentDir", "=", "component", ".", "getDeploymentDir", "(", ")", ".", "getAbsolutePath", "(", ")", ";", "Class", "<", "?", ">", "usageParametersInterface", "=", "component", ".", "getUsageParametersInterface", "(", ")", ";", "if", "(", "usageParametersInterface", "!=", "null", ")", "{", "try", "{", "// generate the concrete usage param set class", "component", ".", "setUsageParametersConcreteClass", "(", "new", "ConcreteUsageParameterClassGenerator", "(", "usageParametersInterface", ".", "getName", "(", ")", ",", "deploymentDir", ",", "classPool", ")", ".", "generateConcreteUsageParameterClass", "(", ")", ")", ";", "if", "(", "LOGGER", ".", "isDebugEnabled", "(", ")", ")", "{", "LOGGER", ".", "debug", "(", "\"Generated usage parameter impl class for \"", "+", "component", ")", ";", "}", "// generate the mbeans", "new", "ConcreteUsageParameterMBeanGenerator", "(", "component", ")", ".", "generateConcreteUsageParameterMBean", "(", ")", ";", "if", "(", "LOGGER", ".", "isDebugEnabled", "(", ")", ")", "{", "LOGGER", ".", "debug", "(", "\"Generated usage mbean (interface and impl) for \"", "+", "component", ")", ";", "}", "}", "catch", "(", "DeploymentException", "ex", ")", "{", "throw", "ex", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "throw", "new", "DeploymentException", "(", "\"Failed to generate \"", "+", "component", "+", "\" usage parameter class\"", ",", "ex", ")", ";", "}", "}", "}"], "docstring": "Generates classes for a slee component, which defines usage parameters\n@param component\n@throws DeploymentException", "docstring_tokens": ["Generates", "classes", "for", "a", "slee", "component", "which", "defines", "usage", "parameters"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/usage/src/main/java/org/mobicents/slee/container/deployment/SleeComponentWithUsageParametersClassCodeGenerator.java#L45-L78", "partition": "test", "index": 7050, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/ChildRelationImpl.java", "func_name": "ChildRelationImpl.containsAll", "original_string": "@SuppressWarnings(\"rawtypes\")\n    public boolean containsAll(Collection c) {\n        \n    \tif (c == null)\n            throw new NullPointerException(\"null collection!\");\n        \n        for (Iterator it = c.iterator(); it.hasNext(); ) {\n            if (!contains(it.next())) {                        \t\n            \treturn false;\n            }\n        }\n        \n        if(logger.isDebugEnabled()) {\n        \tlogger.debug(\"containsAll : collection = \" + c + \" > all in child relation\");\n        }\n        return true;\n    }", "language": "java", "code": "@SuppressWarnings(\"rawtypes\")\n    public boolean containsAll(Collection c) {\n        \n    \tif (c == null)\n            throw new NullPointerException(\"null collection!\");\n        \n        for (Iterator it = c.iterator(); it.hasNext(); ) {\n            if (!contains(it.next())) {                        \t\n            \treturn false;\n            }\n        }\n        \n        if(logger.isDebugEnabled()) {\n        \tlogger.debug(\"containsAll : collection = \" + c + \" > all in child relation\");\n        }\n        return true;\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"rawtypes\"", ")", "public", "boolean", "containsAll", "(", "Collection", "c", ")", "{", "if", "(", "c", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"null collection!\"", ")", ";", "for", "(", "Iterator", "it", "=", "c", ".", "iterator", "(", ")", ";", "it", ".", "hasNext", "(", ")", ";", ")", "{", "if", "(", "!", "contains", "(", "it", ".", "next", "(", ")", ")", ")", "{", "return", "false", ";", "}", "}", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"containsAll : collection = \"", "+", "c", "+", "\" > all in child relation\"", ")", ";", "}", "return", "true", ";", "}"], "docstring": "This method returns true if all SBB entities represented by the SBB local\nobjects in the collection specified by the input argument are members of\nthis child relation. If the collection contains an object that is not an\nSBB local object, an SBB local object that is invalid, or an SBB local\nobject whose underlying SBB entity is not a member of this child\nrelation, then this method returns false.", "docstring_tokens": ["This", "method", "returns", "true", "if", "all", "SBB", "entities", "represented", "by", "the", "SBB", "local", "objects", "in", "the", "collection", "specified", "by", "the", "input", "argument", "are", "members", "of", "this", "child", "relation", ".", "If", "the", "collection", "contains", "an", "object", "that", "is", "not", "an", "SBB", "local", "object", "an", "SBB", "local", "object", "that", "is", "invalid", "or", "an", "SBB", "local", "object", "whose", "underlying", "SBB", "entity", "is", "not", "a", "member", "of", "this", "child", "relation", "then", "this", "method", "returns", "false", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/ChildRelationImpl.java#L289-L305", "partition": "test", "index": 7064, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointImpl.java", "func_name": "SleeEndpointImpl._endActivity", "original_string": "void _endActivity(ActivityHandle handle, final SleeTransaction barrierTx)\n\t\t\tthrows UnrecognizedActivityHandleException {\n\t\tfinal ActivityContextHandle ach = new ResourceAdaptorActivityContextHandleImpl(\n\t\t\t\traEntity, handle);\n\t\t// get ac\n\t\tfinal ActivityContext ac = acFactory.getActivityContext(ach);\n\t\tif (ac != null) {\n\t\t\t// suspend activity if needed\n\t\t\tif (barrierTx != null) {\n\t\t\t\tfinal ActivityEventQueueManager aeqm = ac.getLocalActivityContext().getEventQueueManager();\n\t\t\t\taeqm.createBarrier(barrierTx);\n\t\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\taeqm.removeBarrier(barrierTx);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal TransactionContext tc = barrierTx.getTransactionContext();\n\t\t\t\ttc.getAfterCommitActions().add(action);\n\t\t\t\ttc.getAfterRollbackActions().add(action);\n\t\t\t}\n\t\t\t// end the activity\n\t\t\tac.endActivity();\n\t\t} else {\n\t\t\tthrow new UnrecognizedActivityHandleException(handle.toString());\n\t\t}\n\t}", "language": "java", "code": "void _endActivity(ActivityHandle handle, final SleeTransaction barrierTx)\n\t\t\tthrows UnrecognizedActivityHandleException {\n\t\tfinal ActivityContextHandle ach = new ResourceAdaptorActivityContextHandleImpl(\n\t\t\t\traEntity, handle);\n\t\t// get ac\n\t\tfinal ActivityContext ac = acFactory.getActivityContext(ach);\n\t\tif (ac != null) {\n\t\t\t// suspend activity if needed\n\t\t\tif (barrierTx != null) {\n\t\t\t\tfinal ActivityEventQueueManager aeqm = ac.getLocalActivityContext().getEventQueueManager();\n\t\t\t\taeqm.createBarrier(barrierTx);\n\t\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\taeqm.removeBarrier(barrierTx);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfinal TransactionContext tc = barrierTx.getTransactionContext();\n\t\t\t\ttc.getAfterCommitActions().add(action);\n\t\t\t\ttc.getAfterRollbackActions().add(action);\n\t\t\t}\n\t\t\t// end the activity\n\t\t\tac.endActivity();\n\t\t} else {\n\t\t\tthrow new UnrecognizedActivityHandleException(handle.toString());\n\t\t}\n\t}", "code_tokens": ["void", "_endActivity", "(", "ActivityHandle", "handle", ",", "final", "SleeTransaction", "barrierTx", ")", "throws", "UnrecognizedActivityHandleException", "{", "final", "ActivityContextHandle", "ach", "=", "new", "ResourceAdaptorActivityContextHandleImpl", "(", "raEntity", ",", "handle", ")", ";", "// get ac", "final", "ActivityContext", "ac", "=", "acFactory", ".", "getActivityContext", "(", "ach", ")", ";", "if", "(", "ac", "!=", "null", ")", "{", "// suspend activity if needed", "if", "(", "barrierTx", "!=", "null", ")", "{", "final", "ActivityEventQueueManager", "aeqm", "=", "ac", ".", "getLocalActivityContext", "(", ")", ".", "getEventQueueManager", "(", ")", ";", "aeqm", ".", "createBarrier", "(", "barrierTx", ")", ";", "TransactionalAction", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "aeqm", ".", "removeBarrier", "(", "barrierTx", ")", ";", "}", "}", ";", "final", "TransactionContext", "tc", "=", "barrierTx", ".", "getTransactionContext", "(", ")", ";", "tc", ".", "getAfterCommitActions", "(", ")", ".", "add", "(", "action", ")", ";", "tc", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "action", ")", ";", "}", "// end the activity", "ac", ".", "endActivity", "(", ")", ";", "}", "else", "{", "throw", "new", "UnrecognizedActivityHandleException", "(", "handle", ".", "toString", "(", ")", ")", ";", "}", "}"], "docstring": "End activity logic independent of transaction management.\n@param handle\n@param barrierTx\n@throws UnrecognizedActivityHandleException", "docstring_tokens": ["End", "activity", "logic", "independent", "of", "transaction", "management", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointImpl.java#L433-L458", "partition": "test", "index": 7055, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/spi/src/main/java/org/mobicents/slee/container/SleeContainer.java", "func_name": "SleeContainer.validateStateTransition", "original_string": "private void validateStateTransition(SleeState oldState, SleeState newState)\n\t\t\tthrows InvalidStateException {\n\t\tif (oldState == SleeState.STOPPED) {\n\t\t\tif (newState == SleeState.STARTING) {\n\t\t\t\treturn;\n\t\t\t}\t\t\n\t\t} else if (oldState == SleeState.STARTING) {\n\t\t\tif (newState == SleeState.RUNNING || newState == SleeState.STOPPING) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (oldState == SleeState.RUNNING) {\n\t\t\tif (newState == SleeState.STOPPING) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (oldState == SleeState.STOPPING) {\n\t\t\tif (newState == SleeState.STOPPED) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthrow new InvalidStateException(\"illegal slee state transition: \" + oldState + \" -> \"+ newState);\n\t}", "language": "java", "code": "private void validateStateTransition(SleeState oldState, SleeState newState)\n\t\t\tthrows InvalidStateException {\n\t\tif (oldState == SleeState.STOPPED) {\n\t\t\tif (newState == SleeState.STARTING) {\n\t\t\t\treturn;\n\t\t\t}\t\t\n\t\t} else if (oldState == SleeState.STARTING) {\n\t\t\tif (newState == SleeState.RUNNING || newState == SleeState.STOPPING) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (oldState == SleeState.RUNNING) {\n\t\t\tif (newState == SleeState.STOPPING) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (oldState == SleeState.STOPPING) {\n\t\t\tif (newState == SleeState.STOPPED) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthrow new InvalidStateException(\"illegal slee state transition: \" + oldState + \" -> \"+ newState);\n\t}", "code_tokens": ["private", "void", "validateStateTransition", "(", "SleeState", "oldState", ",", "SleeState", "newState", ")", "throws", "InvalidStateException", "{", "if", "(", "oldState", "==", "SleeState", ".", "STOPPED", ")", "{", "if", "(", "newState", "==", "SleeState", ".", "STARTING", ")", "{", "return", ";", "}", "}", "else", "if", "(", "oldState", "==", "SleeState", ".", "STARTING", ")", "{", "if", "(", "newState", "==", "SleeState", ".", "RUNNING", "||", "newState", "==", "SleeState", ".", "STOPPING", ")", "{", "return", ";", "}", "}", "else", "if", "(", "oldState", "==", "SleeState", ".", "RUNNING", ")", "{", "if", "(", "newState", "==", "SleeState", ".", "STOPPING", ")", "{", "return", ";", "}", "}", "else", "if", "(", "oldState", "==", "SleeState", ".", "STOPPING", ")", "{", "if", "(", "newState", "==", "SleeState", ".", "STOPPED", ")", "{", "return", ";", "}", "}", "throw", "new", "InvalidStateException", "(", "\"illegal slee state transition: \"", "+", "oldState", "+", "\" -> \"", "+", "newState", ")", ";", "}"], "docstring": "Ensures the standard SLEE lifecycle.\n\n@param oldState\n@param newState\n@throws InvalidStateException", "docstring_tokens": ["Ensures", "the", "standard", "SLEE", "lifecycle", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/spi/src/main/java/org/mobicents/slee/container/SleeContainer.java#L666-L686", "partition": "test", "index": 7170, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointEndActivityNotTransactedExecutor.java", "func_name": "SleeEndpointEndActivityNotTransactedExecutor.execute", "original_string": "void execute(final ActivityHandle handle)\n\t\t\tthrows UnrecognizedActivityHandleException {\n\n\t\tfinal SleeTransaction tx = super.suspendTransaction();\n\t\ttry {\n\t\t\tsleeEndpoint._endActivity(handle,tx);\n\t\t} finally {\n\t\t\tif (tx != null) {\n\t\t\t\tsuper.resumeTransaction(tx);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "void execute(final ActivityHandle handle)\n\t\t\tthrows UnrecognizedActivityHandleException {\n\n\t\tfinal SleeTransaction tx = super.suspendTransaction();\n\t\ttry {\n\t\t\tsleeEndpoint._endActivity(handle,tx);\n\t\t} finally {\n\t\t\tif (tx != null) {\n\t\t\t\tsuper.resumeTransaction(tx);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["void", "execute", "(", "final", "ActivityHandle", "handle", ")", "throws", "UnrecognizedActivityHandleException", "{", "final", "SleeTransaction", "tx", "=", "super", ".", "suspendTransaction", "(", ")", ";", "try", "{", "sleeEndpoint", ".", "_endActivity", "(", "handle", ",", "tx", ")", ";", "}", "finally", "{", "if", "(", "tx", "!=", "null", ")", "{", "super", ".", "resumeTransaction", "(", "tx", ")", ";", "}", "}", "}"], "docstring": "Executes a non transacted End Activity operation.\n\n@param handle\n@throws UnrecognizedActivityHandleException", "docstring_tokens": ["Executes", "a", "non", "transacted", "End", "Activity", "operation", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointEndActivityNotTransactedExecutor.java#L55-L66", "partition": "test", "index": 7053, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbObjectPoolManagementImpl.java", "func_name": "SbbObjectPoolManagementImpl.getObjectPool", "original_string": "public SbbObjectPoolImpl getObjectPool(ServiceID serviceID, SbbID sbbID) {\n\t\treturn pools.get(new ObjectPoolMapKey(serviceID,sbbID));\n\t}", "language": "java", "code": "public SbbObjectPoolImpl getObjectPool(ServiceID serviceID, SbbID sbbID) {\n\t\treturn pools.get(new ObjectPoolMapKey(serviceID,sbbID));\n\t}", "code_tokens": ["public", "SbbObjectPoolImpl", "getObjectPool", "(", "ServiceID", "serviceID", ",", "SbbID", "sbbID", ")", "{", "return", "pools", ".", "get", "(", "new", "ObjectPoolMapKey", "(", "serviceID", ",", "sbbID", ")", ")", ";", "}"], "docstring": "Retrieves the object pool for the specified sbb and service.\n@param serviceID\n@param sbbID\n@return", "docstring_tokens": ["Retrieves", "the", "object", "pool", "for", "the", "specified", "sbb", "and", "service", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbObjectPoolManagementImpl.java#L99-L101", "partition": "test", "index": 7051, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java", "func_name": "ConcreteSbbGenerator.createSbbEntityGetterAndSetter", "original_string": "private void createSbbEntityGetterAndSetter(CtClass sbbConcrete)\n\t\t\tthrows DeploymentException {\n\t\ttry {\n\t\t\tCtMethod getSbbEntity = CtNewMethod\n\t\t\t\t\t.make(\"public \" + SbbEntity.class.getName()\n\t\t\t\t\t\t\t+ \" getSbbEntity() { return this.sbbEntity; }\",\n\t\t\t\t\t\t\tsbbConcrete);\n\t\t\tgetSbbEntity.setModifiers(Modifier.PUBLIC);\n\t\t\tsbbConcrete.addMethod(getSbbEntity);\n\t\t\tCtMethod setSbbEntity = CtNewMethod.make(\n\t\t\t\t\t\"public void setSbbEntity ( \" + SbbEntity.class.getName()\n\t\t\t\t\t\t\t+ \" sbbEntity )\" + \"{\"\n\t\t\t\t\t\t\t+ \"this.sbbEntity = sbbEntity;\" + \"}\", sbbConcrete);\n\n\t\t\tsetSbbEntity.setModifiers(Modifier.PUBLIC);\n\t\t\tsbbConcrete.addMethod(setSbbEntity);\n\t\t} catch (Exception e) {\n\t\t\tthrow new DeploymentException(e.getMessage(), e);\n\t\t}\n\t}", "language": "java", "code": "private void createSbbEntityGetterAndSetter(CtClass sbbConcrete)\n\t\t\tthrows DeploymentException {\n\t\ttry {\n\t\t\tCtMethod getSbbEntity = CtNewMethod\n\t\t\t\t\t.make(\"public \" + SbbEntity.class.getName()\n\t\t\t\t\t\t\t+ \" getSbbEntity() { return this.sbbEntity; }\",\n\t\t\t\t\t\t\tsbbConcrete);\n\t\t\tgetSbbEntity.setModifiers(Modifier.PUBLIC);\n\t\t\tsbbConcrete.addMethod(getSbbEntity);\n\t\t\tCtMethod setSbbEntity = CtNewMethod.make(\n\t\t\t\t\t\"public void setSbbEntity ( \" + SbbEntity.class.getName()\n\t\t\t\t\t\t\t+ \" sbbEntity )\" + \"{\"\n\t\t\t\t\t\t\t+ \"this.sbbEntity = sbbEntity;\" + \"}\", sbbConcrete);\n\n\t\t\tsetSbbEntity.setModifiers(Modifier.PUBLIC);\n\t\t\tsbbConcrete.addMethod(setSbbEntity);\n\t\t} catch (Exception e) {\n\t\t\tthrow new DeploymentException(e.getMessage(), e);\n\t\t}\n\t}", "code_tokens": ["private", "void", "createSbbEntityGetterAndSetter", "(", "CtClass", "sbbConcrete", ")", "throws", "DeploymentException", "{", "try", "{", "CtMethod", "getSbbEntity", "=", "CtNewMethod", ".", "make", "(", "\"public \"", "+", "SbbEntity", ".", "class", ".", "getName", "(", ")", "+", "\" getSbbEntity() { return this.sbbEntity; }\"", ",", "sbbConcrete", ")", ";", "getSbbEntity", ".", "setModifiers", "(", "Modifier", ".", "PUBLIC", ")", ";", "sbbConcrete", ".", "addMethod", "(", "getSbbEntity", ")", ";", "CtMethod", "setSbbEntity", "=", "CtNewMethod", ".", "make", "(", "\"public void setSbbEntity ( \"", "+", "SbbEntity", ".", "class", ".", "getName", "(", ")", "+", "\" sbbEntity )\"", "+", "\"{\"", "+", "\"this.sbbEntity = sbbEntity;\"", "+", "\"}\"", ",", "sbbConcrete", ")", ";", "setSbbEntity", ".", "setModifiers", "(", "Modifier", ".", "PUBLIC", ")", ";", "sbbConcrete", ".", "addMethod", "(", "setSbbEntity", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "DeploymentException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Create a method to retrive the entity from the SbbObject.\n\n@param sbbConcrete\n@throws DeploymentException", "docstring_tokens": ["Create", "a", "method", "to", "retrive", "the", "entity", "from", "the", "SbbObject", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java#L680-L699", "partition": "test", "index": 7104, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/management/jmx/TraceMBeanImpl.java", "func_name": "TraceMBeanImpl.checkTracerName", "original_string": "public static void checkTracerName(String tracerName, NotificationSource notificationSource) throws IllegalArgumentException {\r\n\r\n\t\tif (tracerName.compareTo(\"\") == 0) {\r\n\t\t\t// This is root\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// String[] splitName = tracerName.split(\"\\\\.\");\r\n\t\tStringTokenizer stringTokenizer = new StringTokenizer(tracerName, \".\", true);\r\n\r\n\t\tint fqdnPartIndex = 0;\r\n\r\n\t\t// if(splitName.length==0)\r\n\t\t// {\r\n\t\t// throw new IllegalArgumentException(\"Passed tracer:\" + tracerName +\r\n\t\t// \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t// }\r\n\r\n\t\tString lastToken = null;\r\n\r\n\t\twhile (stringTokenizer.hasMoreTokens()) {\r\n\t\t\tString token = stringTokenizer.nextToken();\r\n\t\t\tif (lastToken == null) {\r\n\t\t\t\t// this is start\r\n\t\t\t\tlastToken = token;\r\n\t\t\t}\r\n\r\n\t\t\tif (lastToken.compareTo(token) == 0 && token.compareTo(\".\") == 0) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Passed tracer:\" + tracerName + \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t\t}\r\n\r\n\t\t\tif (token.compareTo(\".\") != 0) {\r\n\t\t\t\tfor (int charIndex = 0; charIndex < token.length(); charIndex++) {\r\n\t\t\t\t\tCharacter c = token.charAt(charIndex);\r\n\t\t\t\t\tif (Character.isLetter(c) || Character.isDigit(c)) {\r\n\t\t\t\t\t\t// Its ok?\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"Passed tracer:\" + tracerName + \" Token[\" + token + \"], name for source: \" + notificationSource\r\n\t\t\t\t\t\t\t\t+ \", is illegal, contains illegal character: \" + charIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfqdnPartIndex++;\r\n\t\t\t}\r\n\t\t\tlastToken = token;\r\n\r\n\t\t}\r\n\r\n\t\tif (lastToken.compareTo(\".\") == 0) {\r\n\t\t\tthrow new IllegalArgumentException(\"Passed tracer:\" + tracerName + \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t}\r\n\r\n\t}", "language": "java", "code": "public static void checkTracerName(String tracerName, NotificationSource notificationSource) throws IllegalArgumentException {\r\n\r\n\t\tif (tracerName.compareTo(\"\") == 0) {\r\n\t\t\t// This is root\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// String[] splitName = tracerName.split(\"\\\\.\");\r\n\t\tStringTokenizer stringTokenizer = new StringTokenizer(tracerName, \".\", true);\r\n\r\n\t\tint fqdnPartIndex = 0;\r\n\r\n\t\t// if(splitName.length==0)\r\n\t\t// {\r\n\t\t// throw new IllegalArgumentException(\"Passed tracer:\" + tracerName +\r\n\t\t// \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t// }\r\n\r\n\t\tString lastToken = null;\r\n\r\n\t\twhile (stringTokenizer.hasMoreTokens()) {\r\n\t\t\tString token = stringTokenizer.nextToken();\r\n\t\t\tif (lastToken == null) {\r\n\t\t\t\t// this is start\r\n\t\t\t\tlastToken = token;\r\n\t\t\t}\r\n\r\n\t\t\tif (lastToken.compareTo(token) == 0 && token.compareTo(\".\") == 0) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Passed tracer:\" + tracerName + \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t\t}\r\n\r\n\t\t\tif (token.compareTo(\".\") != 0) {\r\n\t\t\t\tfor (int charIndex = 0; charIndex < token.length(); charIndex++) {\r\n\t\t\t\t\tCharacter c = token.charAt(charIndex);\r\n\t\t\t\t\tif (Character.isLetter(c) || Character.isDigit(c)) {\r\n\t\t\t\t\t\t// Its ok?\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"Passed tracer:\" + tracerName + \" Token[\" + token + \"], name for source: \" + notificationSource\r\n\t\t\t\t\t\t\t\t+ \", is illegal, contains illegal character: \" + charIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfqdnPartIndex++;\r\n\t\t\t}\r\n\t\t\tlastToken = token;\r\n\r\n\t\t}\r\n\r\n\t\tif (lastToken.compareTo(\".\") == 0) {\r\n\t\t\tthrow new IllegalArgumentException(\"Passed tracer:\" + tracerName + \", name for source: \" + notificationSource + \", is illegal\");\r\n\t\t}\r\n\r\n\t}", "code_tokens": ["public", "static", "void", "checkTracerName", "(", "String", "tracerName", ",", "NotificationSource", "notificationSource", ")", "throws", "IllegalArgumentException", "{", "if", "(", "tracerName", ".", "compareTo", "(", "\"\"", ")", "==", "0", ")", "{", "// This is root\r", "return", ";", "}", "// String[] splitName = tracerName.split(\"\\\\.\");\r", "StringTokenizer", "stringTokenizer", "=", "new", "StringTokenizer", "(", "tracerName", ",", "\".\"", ",", "true", ")", ";", "int", "fqdnPartIndex", "=", "0", ";", "// if(splitName.length==0)\r", "// {\r", "// throw new IllegalArgumentException(\"Passed tracer:\" + tracerName +\r", "// \", name for source: \" + notificationSource + \", is illegal\");\r", "// }\r", "String", "lastToken", "=", "null", ";", "while", "(", "stringTokenizer", ".", "hasMoreTokens", "(", ")", ")", "{", "String", "token", "=", "stringTokenizer", ".", "nextToken", "(", ")", ";", "if", "(", "lastToken", "==", "null", ")", "{", "// this is start\r", "lastToken", "=", "token", ";", "}", "if", "(", "lastToken", ".", "compareTo", "(", "token", ")", "==", "0", "&&", "token", ".", "compareTo", "(", "\".\"", ")", "==", "0", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Passed tracer:\"", "+", "tracerName", "+", "\", name for source: \"", "+", "notificationSource", "+", "\", is illegal\"", ")", ";", "}", "if", "(", "token", ".", "compareTo", "(", "\".\"", ")", "!=", "0", ")", "{", "for", "(", "int", "charIndex", "=", "0", ";", "charIndex", "<", "token", ".", "length", "(", ")", ";", "charIndex", "++", ")", "{", "Character", "c", "=", "token", ".", "charAt", "(", "charIndex", ")", ";", "if", "(", "Character", ".", "isLetter", "(", "c", ")", "||", "Character", ".", "isDigit", "(", "c", ")", ")", "{", "// Its ok?\r", "}", "else", "{", "throw", "new", "IllegalArgumentException", "(", "\"Passed tracer:\"", "+", "tracerName", "+", "\" Token[\"", "+", "token", "+", "\"], name for source: \"", "+", "notificationSource", "+", "\", is illegal, contains illegal character: \"", "+", "charIndex", ")", ";", "}", "}", "fqdnPartIndex", "++", ";", "}", "lastToken", "=", "token", ";", "}", "if", "(", "lastToken", ".", "compareTo", "(", "\".\"", ")", "==", "0", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Passed tracer:\"", "+", "tracerName", "+", "\", name for source: \"", "+", "notificationSource", "+", "\", is illegal\"", ")", ";", "}", "}"], "docstring": "This checks if tracer name is ok. It must not be null;\n\n@param split\n@throws IllegalArgumentException", "docstring_tokens": ["This", "checks", "if", "tracer", "name", "is", "ok", ".", "It", "must", "not", "be", "null", ";"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/management/jmx/TraceMBeanImpl.java#L387-L439", "partition": "test", "index": 7133, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/security/Utility.java", "func_name": "Utility.makeSafeProxyCall", "original_string": "public static Object makeSafeProxyCall(final Object proxy,final String methodToCallname,final  Class[] signature,final  Object[] values) throws PrivilegedActionException\n\t{\n\t\t//Here we execute in sbb/profile or any other slee component domain\n\t\t// so no security calls can be made\n\t\ttry {\n\t\t\t\n\t\t\t//AccessControlContext acc = new AccessControlContext(new ProtectionDomain[]{proxy.getClass().getProtectionDomain()});\n\t\t\t\n\t\t\treturn AccessController.doPrivileged(new PrivilegedExceptionAction(){\n\n\t\t\t\tpublic Object run() throws Exception {\n\t\t\t\t\tfinal Method m = proxy.getClass().getMethod(methodToCallname, signature);\n\t\t\t\t\t//Here we cross to org.mobicents domain, with all perms, once m.invoke is called, we go into proxy object domain, effective rightsd are cross section of All + proxy object domain permissions\n\t\t\t\t\t//This is used when isolate security permissions is set to true;\n\t\t\t\t\t\n\t\t\t\t\treturn m.invoke(proxy, values);\n\t\t\t\t//}},acc);\n\t\t\t\t}});\n\t\t} catch (SecurityException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}catch(PrivilegedActionException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t\t\n\t}", "language": "java", "code": "public static Object makeSafeProxyCall(final Object proxy,final String methodToCallname,final  Class[] signature,final  Object[] values) throws PrivilegedActionException\n\t{\n\t\t//Here we execute in sbb/profile or any other slee component domain\n\t\t// so no security calls can be made\n\t\ttry {\n\t\t\t\n\t\t\t//AccessControlContext acc = new AccessControlContext(new ProtectionDomain[]{proxy.getClass().getProtectionDomain()});\n\t\t\t\n\t\t\treturn AccessController.doPrivileged(new PrivilegedExceptionAction(){\n\n\t\t\t\tpublic Object run() throws Exception {\n\t\t\t\t\tfinal Method m = proxy.getClass().getMethod(methodToCallname, signature);\n\t\t\t\t\t//Here we cross to org.mobicents domain, with all perms, once m.invoke is called, we go into proxy object domain, effective rightsd are cross section of All + proxy object domain permissions\n\t\t\t\t\t//This is used when isolate security permissions is set to true;\n\t\t\t\t\t\n\t\t\t\t\treturn m.invoke(proxy, values);\n\t\t\t\t//}},acc);\n\t\t\t\t}});\n\t\t} catch (SecurityException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}catch(PrivilegedActionException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t\t\n\t}", "code_tokens": ["public", "static", "Object", "makeSafeProxyCall", "(", "final", "Object", "proxy", ",", "final", "String", "methodToCallname", ",", "final", "Class", "[", "]", "signature", ",", "final", "Object", "[", "]", "values", ")", "throws", "PrivilegedActionException", "{", "//Here we execute in sbb/profile or any other slee component domain", "// so no security calls can be made", "try", "{", "//AccessControlContext acc = new AccessControlContext(new ProtectionDomain[]{proxy.getClass().getProtectionDomain()});", "return", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedExceptionAction", "(", ")", "{", "public", "Object", "run", "(", ")", "throws", "Exception", "{", "final", "Method", "m", "=", "proxy", ".", "getClass", "(", ")", ".", "getMethod", "(", "methodToCallname", ",", "signature", ")", ";", "//Here we cross to org.mobicents domain, with all perms, once m.invoke is called, we go into proxy object domain, effective rightsd are cross section of All + proxy object domain permissions", "//This is used when isolate security permissions is set to true;", "return", "m", ".", "invoke", "(", "proxy", ",", "values", ")", ";", "//}},acc);", "}", "}", ")", ";", "}", "catch", "(", "SecurityException", "e", ")", "{", "// TODO Auto-generated catch block", "e", ".", "printStackTrace", "(", ")", ";", "}", "catch", "(", "PrivilegedActionException", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Its used to embed calls in AccessController in case of insturmented code, cause javassist does not support anonmous inner class.\n@param proxy\n@param methodToCallname\n@param signature\n@param values\n@return", "docstring_tokens": ["Its", "used", "to", "embed", "calls", "in", "AccessController", "in", "case", "of", "insturmented", "code", "cause", "javassist", "does", "not", "support", "anonmous", "inner", "class", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/security/Utility.java#L178-L205", "partition": "test", "index": 7140, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java", "func_name": "ConcreteSbbGenerator.createDefaultUsageParameterGetter", "original_string": "private void createDefaultUsageParameterGetter(CtClass sbbConcrete)\n\t\t\tthrows DeploymentException {\n\t\tString methodName = \"getDefaultSbbUsageParameterSet\";\n\t\tCtMethod method = (CtMethod) abstractMethods.get(methodName);\n\t\tif (method == null) {\n\t\t\tmethod = (CtMethod) superClassesAbstractMethods.get(methodName);\n\t\t}\n\t\tif (method != null) {\n\t\t\ttry {\n\t\t\t\t// copy method from abstract to concrete class\n\t\t\t\tCtMethod concreteMethod = CtNewMethod.copy(method,\n\t\t\t\t\t\tsbbConcreteClass, null);\n\t\t\t\t// create the method body\n\t\t\t\tString concreteMethodBody = \"{ return ($r)\"\n\t\t\t\t\t\t+ SbbAbstractMethodHandler.class.getName()\n\t\t\t\t\t\t+ \".getDefaultSbbUsageParameterSet(sbbEntity); }\";\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t            logger.trace(\"Generated method \" + methodName\n\t\t\t\t\t\t\t+ \" , body = \" + concreteMethodBody);\n\t\t\t\t}\n\t\t\t\tconcreteMethod.setBody(concreteMethodBody);\n\t\t\t\tsbbConcreteClass.addMethod(concreteMethod);\n\t\t\t} catch (CannotCompileException cce) {\n\t\t\t\tthrow new SLEEException(\"Cannot compile method \"\n\t\t\t\t\t\t+ method.getName(), cce);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private void createDefaultUsageParameterGetter(CtClass sbbConcrete)\n\t\t\tthrows DeploymentException {\n\t\tString methodName = \"getDefaultSbbUsageParameterSet\";\n\t\tCtMethod method = (CtMethod) abstractMethods.get(methodName);\n\t\tif (method == null) {\n\t\t\tmethod = (CtMethod) superClassesAbstractMethods.get(methodName);\n\t\t}\n\t\tif (method != null) {\n\t\t\ttry {\n\t\t\t\t// copy method from abstract to concrete class\n\t\t\t\tCtMethod concreteMethod = CtNewMethod.copy(method,\n\t\t\t\t\t\tsbbConcreteClass, null);\n\t\t\t\t// create the method body\n\t\t\t\tString concreteMethodBody = \"{ return ($r)\"\n\t\t\t\t\t\t+ SbbAbstractMethodHandler.class.getName()\n\t\t\t\t\t\t+ \".getDefaultSbbUsageParameterSet(sbbEntity); }\";\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t            logger.trace(\"Generated method \" + methodName\n\t\t\t\t\t\t\t+ \" , body = \" + concreteMethodBody);\n\t\t\t\t}\n\t\t\t\tconcreteMethod.setBody(concreteMethodBody);\n\t\t\t\tsbbConcreteClass.addMethod(concreteMethod);\n\t\t\t} catch (CannotCompileException cce) {\n\t\t\t\tthrow new SLEEException(\"Cannot compile method \"\n\t\t\t\t\t\t+ method.getName(), cce);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "void", "createDefaultUsageParameterGetter", "(", "CtClass", "sbbConcrete", ")", "throws", "DeploymentException", "{", "String", "methodName", "=", "\"getDefaultSbbUsageParameterSet\"", ";", "CtMethod", "method", "=", "(", "CtMethod", ")", "abstractMethods", ".", "get", "(", "methodName", ")", ";", "if", "(", "method", "==", "null", ")", "{", "method", "=", "(", "CtMethod", ")", "superClassesAbstractMethods", ".", "get", "(", "methodName", ")", ";", "}", "if", "(", "method", "!=", "null", ")", "{", "try", "{", "// copy method from abstract to concrete class", "CtMethod", "concreteMethod", "=", "CtNewMethod", ".", "copy", "(", "method", ",", "sbbConcreteClass", ",", "null", ")", ";", "// create the method body", "String", "concreteMethodBody", "=", "\"{ return ($r)\"", "+", "SbbAbstractMethodHandler", ".", "class", ".", "getName", "(", ")", "+", "\".getDefaultSbbUsageParameterSet(sbbEntity); }\"", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Generated method \"", "+", "methodName", "+", "\" , body = \"", "+", "concreteMethodBody", ")", ";", "}", "concreteMethod", ".", "setBody", "(", "concreteMethodBody", ")", ";", "sbbConcreteClass", ".", "addMethod", "(", "concreteMethod", ")", ";", "}", "catch", "(", "CannotCompileException", "cce", ")", "{", "throw", "new", "SLEEException", "(", "\"Cannot compile method \"", "+", "method", ".", "getName", "(", ")", ",", "cce", ")", ";", "}", "}", "}"], "docstring": "Create a default usage parameter getter and setter.\n\n@param sbbConcrete\n@throws DeploymentException", "docstring_tokens": ["Create", "a", "default", "usage", "parameter", "getter", "and", "setter", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java#L609-L636", "partition": "test", "index": 7103, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbActivityContextInterfaceImpl.java", "func_name": "SbbActivityContextInterfaceImpl.getFieldValue", "original_string": "public Object getFieldValue(String fieldName, Class<?> returnType) {\n\n\t\tString realFieldName = getRealFieldName(fieldName);\n\n\t\tObject value = aciImpl.getActivityContext().getDataAttribute(\n\t\t\t\trealFieldName);\n\n\t\tif (value == null) {\n\t\t\tif (returnType.isPrimitive()) {\n\t\t\t\tif (returnType.equals(Integer.TYPE)) {\n\t\t\t\t\treturn Integer.valueOf(0);\n\t\t\t\t} else if (returnType.equals(Boolean.TYPE)) {\n\t\t\t\t\treturn Boolean.FALSE;\n\t\t\t\t} else if (returnType.equals(Long.TYPE)) {\n\t\t\t\t\treturn Long.valueOf(0);\n\t\t\t\t} else if (returnType.equals(Double.TYPE)) {\n\t\t\t\t\treturn Double.valueOf(0);\n\t\t\t\t} else if (returnType.equals(Float.TYPE)) {\n\t\t\t\t\treturn Float.valueOf(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}", "language": "java", "code": "public Object getFieldValue(String fieldName, Class<?> returnType) {\n\n\t\tString realFieldName = getRealFieldName(fieldName);\n\n\t\tObject value = aciImpl.getActivityContext().getDataAttribute(\n\t\t\t\trealFieldName);\n\n\t\tif (value == null) {\n\t\t\tif (returnType.isPrimitive()) {\n\t\t\t\tif (returnType.equals(Integer.TYPE)) {\n\t\t\t\t\treturn Integer.valueOf(0);\n\t\t\t\t} else if (returnType.equals(Boolean.TYPE)) {\n\t\t\t\t\treturn Boolean.FALSE;\n\t\t\t\t} else if (returnType.equals(Long.TYPE)) {\n\t\t\t\t\treturn Long.valueOf(0);\n\t\t\t\t} else if (returnType.equals(Double.TYPE)) {\n\t\t\t\t\treturn Double.valueOf(0);\n\t\t\t\t} else if (returnType.equals(Float.TYPE)) {\n\t\t\t\t\treturn Float.valueOf(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}", "code_tokens": ["public", "Object", "getFieldValue", "(", "String", "fieldName", ",", "Class", "<", "?", ">", "returnType", ")", "{", "String", "realFieldName", "=", "getRealFieldName", "(", "fieldName", ")", ";", "Object", "value", "=", "aciImpl", ".", "getActivityContext", "(", ")", ".", "getDataAttribute", "(", "realFieldName", ")", ";", "if", "(", "value", "==", "null", ")", "{", "if", "(", "returnType", ".", "isPrimitive", "(", ")", ")", "{", "if", "(", "returnType", ".", "equals", "(", "Integer", ".", "TYPE", ")", ")", "{", "return", "Integer", ".", "valueOf", "(", "0", ")", ";", "}", "else", "if", "(", "returnType", ".", "equals", "(", "Boolean", ".", "TYPE", ")", ")", "{", "return", "Boolean", ".", "FALSE", ";", "}", "else", "if", "(", "returnType", ".", "equals", "(", "Long", ".", "TYPE", ")", ")", "{", "return", "Long", ".", "valueOf", "(", "0", ")", ";", "}", "else", "if", "(", "returnType", ".", "equals", "(", "Double", ".", "TYPE", ")", ")", "{", "return", "Double", ".", "valueOf", "(", "0", ")", ";", "}", "else", "if", "(", "returnType", ".", "equals", "(", "Float", ".", "TYPE", ")", ")", "{", "return", "Float", ".", "valueOf", "(", "0", ")", ";", "}", "}", "}", "return", "value", ";", "}"], "docstring": "Retrieves an sbb aci data field value\n\n@param fieldName\n@param returnType\n@return", "docstring_tokens": ["Retrieves", "an", "sbb", "aci", "data", "field", "value"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbActivityContextInterfaceImpl.java#L237-L261", "partition": "test", "index": 7114, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/AbstractActivityContextInterfaceFactory.java", "func_name": "AbstractActivityContextInterfaceFactory.getACI", "original_string": "protected ActivityContextInterface getACI(Object activity)\n\t\t\tthrows NullPointerException, UnrecognizedActivityException,\n\t\t\tFactoryException {\n\t\tif (activity == null) {\n\t\t\tthrow new NullPointerException(\"null activity object\");\n\t\t}\n\t\tActivityHandle handle = null;\n\t\tfor (ResourceAdaptorEntity raEntity : sleeContainer\n\t\t\t\t.getResourceManagement().getResourceAdaptorEntitiesPerType(resourceAdaptorTypeID)) {\n\t\t\thandle = raEntity.getResourceAdaptorObject().getActivityHandle(\n\t\t\t\t\tactivity);\n\t\t\tif (handle != null) {\n\t\t\t\tActivityContextHandle ach = new ResourceAdaptorActivityContextHandleImpl(raEntity, handle);\n\t\t\t\tActivityContext ac = sleeContainer.getActivityContextFactory()\n\t\t\t\t\t\t.getActivityContext(ach);\n\t\t\t\tif (ac != null) {\n\t\t\t\t\treturn ac.getActivityContextInterface();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthrow new UnrecognizedActivityException(activity.toString());\n\t}", "language": "java", "code": "protected ActivityContextInterface getACI(Object activity)\n\t\t\tthrows NullPointerException, UnrecognizedActivityException,\n\t\t\tFactoryException {\n\t\tif (activity == null) {\n\t\t\tthrow new NullPointerException(\"null activity object\");\n\t\t}\n\t\tActivityHandle handle = null;\n\t\tfor (ResourceAdaptorEntity raEntity : sleeContainer\n\t\t\t\t.getResourceManagement().getResourceAdaptorEntitiesPerType(resourceAdaptorTypeID)) {\n\t\t\thandle = raEntity.getResourceAdaptorObject().getActivityHandle(\n\t\t\t\t\tactivity);\n\t\t\tif (handle != null) {\n\t\t\t\tActivityContextHandle ach = new ResourceAdaptorActivityContextHandleImpl(raEntity, handle);\n\t\t\t\tActivityContext ac = sleeContainer.getActivityContextFactory()\n\t\t\t\t\t\t.getActivityContext(ach);\n\t\t\t\tif (ac != null) {\n\t\t\t\t\treturn ac.getActivityContextInterface();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthrow new UnrecognizedActivityException(activity.toString());\n\t}", "code_tokens": ["protected", "ActivityContextInterface", "getACI", "(", "Object", "activity", ")", "throws", "NullPointerException", ",", "UnrecognizedActivityException", ",", "FactoryException", "{", "if", "(", "activity", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"null activity object\"", ")", ";", "}", "ActivityHandle", "handle", "=", "null", ";", "for", "(", "ResourceAdaptorEntity", "raEntity", ":", "sleeContainer", ".", "getResourceManagement", "(", ")", ".", "getResourceAdaptorEntitiesPerType", "(", "resourceAdaptorTypeID", ")", ")", "{", "handle", "=", "raEntity", ".", "getResourceAdaptorObject", "(", ")", ".", "getActivityHandle", "(", "activity", ")", ";", "if", "(", "handle", "!=", "null", ")", "{", "ActivityContextHandle", "ach", "=", "new", "ResourceAdaptorActivityContextHandleImpl", "(", "raEntity", ",", "handle", ")", ";", "ActivityContext", "ac", "=", "sleeContainer", ".", "getActivityContextFactory", "(", ")", ".", "getActivityContext", "(", "ach", ")", ";", "if", "(", "ac", "!=", "null", ")", "{", "return", "ac", ".", "getActivityContextInterface", "(", ")", ";", "}", "break", ";", "}", "}", "throw", "new", "UnrecognizedActivityException", "(", "activity", ".", "toString", "(", ")", ")", ";", "}"], "docstring": "This method returns the aci for the specified activity, if exists, it\nshould be invoked by each impl of methods of an ra type aci factory.\n\n@param activity\n@return\n@throws NullPointerException\n@throws UnrecognizedActivityException\n@throws FactoryException", "docstring_tokens": ["This", "method", "returns", "the", "aci", "for", "the", "specified", "activity", "if", "exists", "it", "should", "be", "invoked", "by", "each", "impl", "of", "methods", "of", "an", "ra", "type", "aci", "factory", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/AbstractActivityContextInterfaceFactory.java#L86-L109", "partition": "test", "index": 7125, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java", "func_name": "DeployableUnit.hasReferringDU", "original_string": "private boolean hasReferringDU() throws Exception {\r\n\r\n    // Get SleeContainer instance from JNDI\r\n    SleeContainer sC = SleeContainer.lookupFromJndi();\r\n\r\n    for (String componentIdString : this.getComponents()) {\r\n      ComponentIDPropertyEditor cidpe = new ComponentIDPropertyEditor();\r\n      cidpe.setAsText( componentIdString );\r\n\r\n      ComponentID componentId = (ComponentID) cidpe.getValue();\r\n\r\n      for (ComponentID referringComponentId : sC.getComponentRepository().getReferringComponents(componentId)) {\r\n        ComponentIDPropertyEditor rcidpe = new ComponentIDPropertyEditor();\r\n        rcidpe.setValue( referringComponentId );\r\n\r\n        String referringComponentIdString = rcidpe.getAsText();\r\n\r\n        if (!this.getComponents().contains( referringComponentIdString )) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }", "language": "java", "code": "private boolean hasReferringDU() throws Exception {\r\n\r\n    // Get SleeContainer instance from JNDI\r\n    SleeContainer sC = SleeContainer.lookupFromJndi();\r\n\r\n    for (String componentIdString : this.getComponents()) {\r\n      ComponentIDPropertyEditor cidpe = new ComponentIDPropertyEditor();\r\n      cidpe.setAsText( componentIdString );\r\n\r\n      ComponentID componentId = (ComponentID) cidpe.getValue();\r\n\r\n      for (ComponentID referringComponentId : sC.getComponentRepository().getReferringComponents(componentId)) {\r\n        ComponentIDPropertyEditor rcidpe = new ComponentIDPropertyEditor();\r\n        rcidpe.setValue( referringComponentId );\r\n\r\n        String referringComponentIdString = rcidpe.getAsText();\r\n\r\n        if (!this.getComponents().contains( referringComponentIdString )) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }", "code_tokens": ["private", "boolean", "hasReferringDU", "(", ")", "throws", "Exception", "{", "// Get SleeContainer instance from JNDI\r", "SleeContainer", "sC", "=", "SleeContainer", ".", "lookupFromJndi", "(", ")", ";", "for", "(", "String", "componentIdString", ":", "this", ".", "getComponents", "(", ")", ")", "{", "ComponentIDPropertyEditor", "cidpe", "=", "new", "ComponentIDPropertyEditor", "(", ")", ";", "cidpe", ".", "setAsText", "(", "componentIdString", ")", ";", "ComponentID", "componentId", "=", "(", "ComponentID", ")", "cidpe", ".", "getValue", "(", ")", ";", "for", "(", "ComponentID", "referringComponentId", ":", "sC", ".", "getComponentRepository", "(", ")", ".", "getReferringComponents", "(", "componentId", ")", ")", "{", "ComponentIDPropertyEditor", "rcidpe", "=", "new", "ComponentIDPropertyEditor", "(", ")", ";", "rcidpe", ".", "setValue", "(", "referringComponentId", ")", ";", "String", "referringComponentIdString", "=", "rcidpe", ".", "getAsText", "(", ")", ";", "if", "(", "!", "this", ".", "getComponents", "(", ")", ".", "contains", "(", "referringComponentIdString", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "docstring": "Method for checking if this DU components are referred by any others.\n@return true if there are other DUs installed referring this.\n@throws Exception", "docstring_tokens": ["Method", "for", "checking", "if", "this", "DU", "components", "are", "referred", "by", "any", "others", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java#L313-L337", "partition": "test", "index": 7091, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java", "func_name": "ConcreteSbbGenerator.createGetSbbActivityContextInterfaceMethod", "original_string": "protected void createGetSbbActivityContextInterfaceMethod(\n\t\t\tCtClass activityContextInterface,\n\t\t\tClass<?> concreteActivityContextInterfaceClass)\n\t\t\tthrows DeploymentException {\n\t\tString methodToAdd = \"public \"\n\t\t\t\t+ activityContextInterface.getName()\n\t\t\t\t+ \" asSbbActivityContextInterface(javax.slee.ActivityContextInterface aci) {\"\n\t\t\t\t+ \"if(aci==null)\"\n\t\t\t\t+ \"     throw new \"\n\t\t\t\t+ IllegalStateException.class.getName()\n\t\t\t\t+ \"(\\\"Passed argument can not be of null value.\\\");\"\n\t\t\t\t+ \" if(sbbEntity == null || sbbEntity.getSbbObject().getState() != \"\n\t\t\t\t+ SbbObjectState.class.getName() + \".READY) { throw new \"\n\t\t\t\t+ IllegalStateException.class.getName()\n\t\t\t\t+ \"(\\\"Cannot call asSbbActivityContextInterface\\\"); } \"\n\t\t\t\t+ \"else if ( aci instanceof \"\n\t\t\t\t+ concreteActivityContextInterfaceClass.getName()\n\t\t\t\t+ \") return aci;\" + \"else return  new \"\n\t\t\t\t+ concreteActivityContextInterfaceClass.getName() + \" ( (\" + ActivityContextInterface.class.getName() + \") $1, \"\n\t\t\t\t+ \"sbbEntity.getSbbComponent());\" + \"}\";\n\t\tCtMethod methodTest;\n\t\ttry {\n\t\t\tmethodTest = CtNewMethod.make(methodToAdd, sbbConcreteClass);\n\t\t\tsbbConcreteClass.addMethod(methodTest);\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Method \" + methodToAdd + \" added\");\n\t\t\t}\n\t\t} catch (CannotCompileException e) {\n\t\t\tthrow new DeploymentException(e.getMessage(), e);\n\t\t}\n\t}", "language": "java", "code": "protected void createGetSbbActivityContextInterfaceMethod(\n\t\t\tCtClass activityContextInterface,\n\t\t\tClass<?> concreteActivityContextInterfaceClass)\n\t\t\tthrows DeploymentException {\n\t\tString methodToAdd = \"public \"\n\t\t\t\t+ activityContextInterface.getName()\n\t\t\t\t+ \" asSbbActivityContextInterface(javax.slee.ActivityContextInterface aci) {\"\n\t\t\t\t+ \"if(aci==null)\"\n\t\t\t\t+ \"     throw new \"\n\t\t\t\t+ IllegalStateException.class.getName()\n\t\t\t\t+ \"(\\\"Passed argument can not be of null value.\\\");\"\n\t\t\t\t+ \" if(sbbEntity == null || sbbEntity.getSbbObject().getState() != \"\n\t\t\t\t+ SbbObjectState.class.getName() + \".READY) { throw new \"\n\t\t\t\t+ IllegalStateException.class.getName()\n\t\t\t\t+ \"(\\\"Cannot call asSbbActivityContextInterface\\\"); } \"\n\t\t\t\t+ \"else if ( aci instanceof \"\n\t\t\t\t+ concreteActivityContextInterfaceClass.getName()\n\t\t\t\t+ \") return aci;\" + \"else return  new \"\n\t\t\t\t+ concreteActivityContextInterfaceClass.getName() + \" ( (\" + ActivityContextInterface.class.getName() + \") $1, \"\n\t\t\t\t+ \"sbbEntity.getSbbComponent());\" + \"}\";\n\t\tCtMethod methodTest;\n\t\ttry {\n\t\t\tmethodTest = CtNewMethod.make(methodToAdd, sbbConcreteClass);\n\t\t\tsbbConcreteClass.addMethod(methodTest);\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Method \" + methodToAdd + \" added\");\n\t\t\t}\n\t\t} catch (CannotCompileException e) {\n\t\t\tthrow new DeploymentException(e.getMessage(), e);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "createGetSbbActivityContextInterfaceMethod", "(", "CtClass", "activityContextInterface", ",", "Class", "<", "?", ">", "concreteActivityContextInterfaceClass", ")", "throws", "DeploymentException", "{", "String", "methodToAdd", "=", "\"public \"", "+", "activityContextInterface", ".", "getName", "(", ")", "+", "\" asSbbActivityContextInterface(javax.slee.ActivityContextInterface aci) {\"", "+", "\"if(aci==null)\"", "+", "\"     throw new \"", "+", "IllegalStateException", ".", "class", ".", "getName", "(", ")", "+", "\"(\\\"Passed argument can not be of null value.\\\");\"", "+", "\" if(sbbEntity == null || sbbEntity.getSbbObject().getState() != \"", "+", "SbbObjectState", ".", "class", ".", "getName", "(", ")", "+", "\".READY) { throw new \"", "+", "IllegalStateException", ".", "class", ".", "getName", "(", ")", "+", "\"(\\\"Cannot call asSbbActivityContextInterface\\\"); } \"", "+", "\"else if ( aci instanceof \"", "+", "concreteActivityContextInterfaceClass", ".", "getName", "(", ")", "+", "\") return aci;\"", "+", "\"else return  new \"", "+", "concreteActivityContextInterfaceClass", ".", "getName", "(", ")", "+", "\" ( (\"", "+", "ActivityContextInterface", ".", "class", ".", "getName", "(", ")", "+", "\") $1, \"", "+", "\"sbbEntity.getSbbComponent());\"", "+", "\"}\"", ";", "CtMethod", "methodTest", ";", "try", "{", "methodTest", "=", "CtNewMethod", ".", "make", "(", "methodToAdd", ",", "sbbConcreteClass", ")", ";", "sbbConcreteClass", ".", "addMethod", "(", "methodTest", ")", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Method \"", "+", "methodToAdd", "+", "\" added\"", ")", ";", "}", "}", "catch", "(", "CannotCompileException", "e", ")", "{", "throw", "new", "DeploymentException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Create the narrow method to get the activity context interface\n\n@param activityContextInterface\nthe activity context interface return type of the narrow\nmethod\n@param concreteActivityContextInterfaceClass\n@throws DeploymentException", "docstring_tokens": ["Create", "the", "narrow", "method", "to", "get", "the", "activity", "context", "interface"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java#L1063-L1093", "partition": "test", "index": 7106, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java", "func_name": "DeployableUnit.getUninstallActions", "original_string": "public Collection<ManagementAction> getUninstallActions() {\r\n\t  Collection<ManagementAction> uActions = new ArrayList<ManagementAction>(uninstallActions);\r\n\r\n\t  // ensures uninstall is the last action related with DU components\r\n\t  uActions.add(new UninstallDeployableUnitAction(diURL.toString(), sleeContainerDeployer.getDeploymentMBean()));\r\n\r\n\t  // if we have some remaining uninstall actions it means it is actions related with components not in DU\r\n\t  // thus should be executed last\r\n\t  if (!preUninstallActions.values().isEmpty()) {\r\n\t\t  for (String componentId : preUninstallActions.keySet()) {\r\n\t\t\t  uActions.addAll(preUninstallActions.get(componentId));\r\n\t\t  }\r\n\t  }\r\n\r\n\t  return uActions;\r\n  }", "language": "java", "code": "public Collection<ManagementAction> getUninstallActions() {\r\n\t  Collection<ManagementAction> uActions = new ArrayList<ManagementAction>(uninstallActions);\r\n\r\n\t  // ensures uninstall is the last action related with DU components\r\n\t  uActions.add(new UninstallDeployableUnitAction(diURL.toString(), sleeContainerDeployer.getDeploymentMBean()));\r\n\r\n\t  // if we have some remaining uninstall actions it means it is actions related with components not in DU\r\n\t  // thus should be executed last\r\n\t  if (!preUninstallActions.values().isEmpty()) {\r\n\t\t  for (String componentId : preUninstallActions.keySet()) {\r\n\t\t\t  uActions.addAll(preUninstallActions.get(componentId));\r\n\t\t  }\r\n\t  }\r\n\r\n\t  return uActions;\r\n  }", "code_tokens": ["public", "Collection", "<", "ManagementAction", ">", "getUninstallActions", "(", ")", "{", "Collection", "<", "ManagementAction", ">", "uActions", "=", "new", "ArrayList", "<", "ManagementAction", ">", "(", "uninstallActions", ")", ";", "// ensures uninstall is the last action related with DU components\r", "uActions", ".", "add", "(", "new", "UninstallDeployableUnitAction", "(", "diURL", ".", "toString", "(", ")", ",", "sleeContainerDeployer", ".", "getDeploymentMBean", "(", ")", ")", ")", ";", "// if we have some remaining uninstall actions it means it is actions related with components not in DU\r", "// thus should be executed last\r", "if", "(", "!", "preUninstallActions", ".", "values", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "for", "(", "String", "componentId", ":", "preUninstallActions", ".", "keySet", "(", ")", ")", "{", "uActions", ".", "addAll", "(", "preUninstallActions", ".", "get", "(", "componentId", ")", ")", ";", "}", "}", "return", "uActions", ";", "}"], "docstring": "Getter for the Uninstall Actions.\n@return a Collection of actions.", "docstring_tokens": ["Getter", "for", "the", "Uninstall", "Actions", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java#L273-L288", "partition": "test", "index": 7090, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbActivityContextInterfaceImpl.java", "func_name": "SbbActivityContextInterfaceImpl.setFieldValue", "original_string": "public void setFieldValue(String fieldName, Object value) {\n\t\tString realFieldName = getRealFieldName(fieldName);\n\t\taciImpl.getActivityContext().setDataAttribute(realFieldName, value);\n\t}", "language": "java", "code": "public void setFieldValue(String fieldName, Object value) {\n\t\tString realFieldName = getRealFieldName(fieldName);\n\t\taciImpl.getActivityContext().setDataAttribute(realFieldName, value);\n\t}", "code_tokens": ["public", "void", "setFieldValue", "(", "String", "fieldName", ",", "Object", "value", ")", "{", "String", "realFieldName", "=", "getRealFieldName", "(", "fieldName", ")", ";", "aciImpl", ".", "getActivityContext", "(", ")", ".", "setDataAttribute", "(", "realFieldName", ",", "value", ")", ";", "}"], "docstring": "Sets an sbb aci data field value\n\n@param fieldName\n@param value", "docstring_tokens": ["Sets", "an", "sbb", "aci", "data", "field", "value"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbActivityContextInterfaceImpl.java#L137-L140", "partition": "test", "index": 7113, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbActivityContextInterfaceImpl.java", "func_name": "SbbActivityContextInterfaceImpl.getRealFieldName", "original_string": "private String getRealFieldName(String fieldName) {\n\t\tString realFieldName = sbbComponent.getDescriptor()\n\t\t\t\t.getActivityContextAttributeAliases().get(fieldName);\n\t\tif (realFieldName == null) {\n\t\t\t// not there then it has no alias, lets set one based on sbb id\n\t\t\trealFieldName = sbbComponent.getSbbID().toString() + \".\"\n\t\t\t\t\t+ fieldName;\n\t\t\tfinal Map<String, String> aliases = sbbComponent.getDescriptor()\n\t\t\t\t\t.getActivityContextAttributeAliases();\n\t\t\tsynchronized (aliases) {\n\t\t\t\taliases.put(fieldName, realFieldName);\n\t\t\t}\n\t\t}\n\t\treturn realFieldName;\n\t}", "language": "java", "code": "private String getRealFieldName(String fieldName) {\n\t\tString realFieldName = sbbComponent.getDescriptor()\n\t\t\t\t.getActivityContextAttributeAliases().get(fieldName);\n\t\tif (realFieldName == null) {\n\t\t\t// not there then it has no alias, lets set one based on sbb id\n\t\t\trealFieldName = sbbComponent.getSbbID().toString() + \".\"\n\t\t\t\t\t+ fieldName;\n\t\t\tfinal Map<String, String> aliases = sbbComponent.getDescriptor()\n\t\t\t\t\t.getActivityContextAttributeAliases();\n\t\t\tsynchronized (aliases) {\n\t\t\t\taliases.put(fieldName, realFieldName);\n\t\t\t}\n\t\t}\n\t\treturn realFieldName;\n\t}", "code_tokens": ["private", "String", "getRealFieldName", "(", "String", "fieldName", ")", "{", "String", "realFieldName", "=", "sbbComponent", ".", "getDescriptor", "(", ")", ".", "getActivityContextAttributeAliases", "(", ")", ".", "get", "(", "fieldName", ")", ";", "if", "(", "realFieldName", "==", "null", ")", "{", "// not there then it has no alias, lets set one based on sbb id", "realFieldName", "=", "sbbComponent", ".", "getSbbID", "(", ")", ".", "toString", "(", ")", "+", "\".\"", "+", "fieldName", ";", "final", "Map", "<", "String", ",", "String", ">", "aliases", "=", "sbbComponent", ".", "getDescriptor", "(", ")", ".", "getActivityContextAttributeAliases", "(", ")", ";", "synchronized", "(", "aliases", ")", "{", "aliases", ".", "put", "(", "fieldName", ",", "realFieldName", ")", ";", "}", "}", "return", "realFieldName", ";", "}"], "docstring": "Computes the real aci data field name\n\n@param fieldName\n@return", "docstring_tokens": ["Computes", "the", "real", "aci", "data", "field", "name"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbActivityContextInterfaceImpl.java#L115-L129", "partition": "test", "index": 7112, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java", "func_name": "DeployableUnit.getInstallActions", "original_string": "public Collection<ManagementAction> getInstallActions() {\r\n    \r\n\t  ArrayList<ManagementAction> iActions = new ArrayList<ManagementAction>();\r\n\r\n\t  // if we have some remaining post install actions it means it is actions related with components already installed\r\n\t  // thus should be executed first\r\n\t  if (!postInstallActions.values().isEmpty()) {\r\n\t\t  for (String componentId : postInstallActions.keySet()) {\r\n\t\t\t  iActions.addAll(postInstallActions.get(componentId));\r\n\t\t  }\r\n\t  }\r\n\r\n\t  iActions.addAll(installActions);\r\n\r\n\t  return iActions;\r\n  }", "language": "java", "code": "public Collection<ManagementAction> getInstallActions() {\r\n    \r\n\t  ArrayList<ManagementAction> iActions = new ArrayList<ManagementAction>();\r\n\r\n\t  // if we have some remaining post install actions it means it is actions related with components already installed\r\n\t  // thus should be executed first\r\n\t  if (!postInstallActions.values().isEmpty()) {\r\n\t\t  for (String componentId : postInstallActions.keySet()) {\r\n\t\t\t  iActions.addAll(postInstallActions.get(componentId));\r\n\t\t  }\r\n\t  }\r\n\r\n\t  iActions.addAll(installActions);\r\n\r\n\t  return iActions;\r\n  }", "code_tokens": ["public", "Collection", "<", "ManagementAction", ">", "getInstallActions", "(", ")", "{", "ArrayList", "<", "ManagementAction", ">", "iActions", "=", "new", "ArrayList", "<", "ManagementAction", ">", "(", ")", ";", "// if we have some remaining post install actions it means it is actions related with components already installed\r", "// thus should be executed first\r", "if", "(", "!", "postInstallActions", ".", "values", "(", ")", ".", "isEmpty", "(", ")", ")", "{", "for", "(", "String", "componentId", ":", "postInstallActions", ".", "keySet", "(", ")", ")", "{", "iActions", ".", "addAll", "(", "postInstallActions", ".", "get", "(", "componentId", ")", ")", ";", "}", "}", "iActions", ".", "addAll", "(", "installActions", ")", ";", "return", "iActions", ";", "}"], "docstring": "Getter for the Install Actions.\n@return a Collection of actions.", "docstring_tokens": ["Getter", "for", "the", "Install", "Actions", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java#L252-L267", "partition": "test", "index": 7089, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/ChildRelationImpl.java", "func_name": "ChildRelationImpl.removeAll", "original_string": "@SuppressWarnings(\"rawtypes\")\n    public boolean removeAll(Collection c) {\n        boolean flag = true;\n        if (c == null)\n            throw new NullPointerException(\" null collection ! \");\n        for ( Iterator it = c.iterator(); it.hasNext();\t) {\n           flag &= this.remove( it.next());\n            \n        }\n        return flag;\n    }", "language": "java", "code": "@SuppressWarnings(\"rawtypes\")\n    public boolean removeAll(Collection c) {\n        boolean flag = true;\n        if (c == null)\n            throw new NullPointerException(\" null collection ! \");\n        for ( Iterator it = c.iterator(); it.hasNext();\t) {\n           flag &= this.remove( it.next());\n            \n        }\n        return flag;\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"rawtypes\"", ")", "public", "boolean", "removeAll", "(", "Collection", "c", ")", "{", "boolean", "flag", "=", "true", ";", "if", "(", "c", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\" null collection ! \"", ")", ";", "for", "(", "Iterator", "it", "=", "c", ".", "iterator", "(", ")", ";", "it", ".", "hasNext", "(", ")", ";", ")", "{", "flag", "&=", "this", ".", "remove", "(", "it", ".", "next", "(", ")", ")", ";", "}", "return", "flag", ";", "}"], "docstring": "Removing an SBB entity from a child relation initiates a cascading\nremoval of the SBB entity tree rooted by the SBB entity, similar to\ninvoking the remove method on an SBB local object that represents the SBB\nentity.", "docstring_tokens": ["Removing", "an", "SBB", "entity", "from", "a", "child", "relation", "initiates", "a", "cascading", "removal", "of", "the", "SBB", "entity", "tree", "rooted", "by", "the", "SBB", "entity", "similar", "to", "invoking", "the", "remove", "method", "on", "an", "SBB", "local", "object", "that", "represents", "the", "SBB", "entity", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/ChildRelationImpl.java#L314-L324", "partition": "test", "index": 7065, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java", "func_name": "DeployableUnit.hasDuplicates", "original_string": "public boolean hasDuplicates() {\r\n    ArrayList<String> duplicates = new ArrayList<String>();\r\n\r\n    // For each component in the DU ..\r\n    for (String componentId : componentIDs) {\r\n      // Check if it is already deployed\r\n      if (sleeContainerDeployer.getDeploymentManager().getDeployedComponents().contains(componentId)) {\r\n        duplicates.add(componentId);\r\n      }\r\n    }\r\n\r\n    if (!duplicates.isEmpty()) {\r\n      logger.warn(\"The deployable unit '\" + this.diShortName + \"' contains components that are already deployed. The following are already installed:\");\r\n\r\n      for (String dupComponent : duplicates) {\r\n        logger.warn(\" - \" + dupComponent);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    // If we got here, there's no dups.\r\n    return false;\r\n  }", "language": "java", "code": "public boolean hasDuplicates() {\r\n    ArrayList<String> duplicates = new ArrayList<String>();\r\n\r\n    // For each component in the DU ..\r\n    for (String componentId : componentIDs) {\r\n      // Check if it is already deployed\r\n      if (sleeContainerDeployer.getDeploymentManager().getDeployedComponents().contains(componentId)) {\r\n        duplicates.add(componentId);\r\n      }\r\n    }\r\n\r\n    if (!duplicates.isEmpty()) {\r\n      logger.warn(\"The deployable unit '\" + this.diShortName + \"' contains components that are already deployed. The following are already installed:\");\r\n\r\n      for (String dupComponent : duplicates) {\r\n        logger.warn(\" - \" + dupComponent);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    // If we got here, there's no dups.\r\n    return false;\r\n  }", "code_tokens": ["public", "boolean", "hasDuplicates", "(", ")", "{", "ArrayList", "<", "String", ">", "duplicates", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "// For each component in the DU ..\r", "for", "(", "String", "componentId", ":", "componentIDs", ")", "{", "// Check if it is already deployed\r", "if", "(", "sleeContainerDeployer", ".", "getDeploymentManager", "(", ")", ".", "getDeployedComponents", "(", ")", ".", "contains", "(", "componentId", ")", ")", "{", "duplicates", ".", "add", "(", "componentId", ")", ";", "}", "}", "if", "(", "!", "duplicates", ".", "isEmpty", "(", ")", ")", "{", "logger", ".", "warn", "(", "\"The deployable unit '\"", "+", "this", ".", "diShortName", "+", "\"' contains components that are already deployed. The following are already installed:\"", ")", ";", "for", "(", "String", "dupComponent", ":", "duplicates", ")", "{", "logger", ".", "warn", "(", "\" - \"", "+", "dupComponent", ")", ";", "}", "return", "true", ";", "}", "// If we got here, there's no dups.\r", "return", "false", ";", "}"], "docstring": "Method for checking if this DU contains any component that is already deployed.\n@return true if there's a component that is already deployed.", "docstring_tokens": ["Method", "for", "checking", "if", "this", "DU", "contains", "any", "component", "that", "is", "already", "deployed", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java#L213-L236", "partition": "test", "index": 7088, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java", "func_name": "DeployableUnit.getExternalDependencies", "original_string": "public Collection<String> getExternalDependencies() {\r\n    // Take all dependencies...\r\n    Collection<String> externalDependencies = new HashSet<String>(dependencies);\r\n\r\n    // Remove those which are contained in this DU\r\n    externalDependencies.removeAll(componentIDs);\r\n\r\n    // Return what's left.\r\n    return externalDependencies;\r\n  }", "language": "java", "code": "public Collection<String> getExternalDependencies() {\r\n    // Take all dependencies...\r\n    Collection<String> externalDependencies = new HashSet<String>(dependencies);\r\n\r\n    // Remove those which are contained in this DU\r\n    externalDependencies.removeAll(componentIDs);\r\n\r\n    // Return what's left.\r\n    return externalDependencies;\r\n  }", "code_tokens": ["public", "Collection", "<", "String", ">", "getExternalDependencies", "(", ")", "{", "// Take all dependencies...\r", "Collection", "<", "String", ">", "externalDependencies", "=", "new", "HashSet", "<", "String", ">", "(", "dependencies", ")", ";", "// Remove those which are contained in this DU\r", "externalDependencies", ".", "removeAll", "(", "componentIDs", ")", ";", "// Return what's left.\r", "return", "externalDependencies", ";", "}"], "docstring": "Method for obtaining the external dependencies for this DU, if any.\n@return a Collection of external dependencies identifiers.", "docstring_tokens": ["Method", "for", "obtaining", "the", "external", "dependencies", "for", "this", "DU", "if", "any", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java#L161-L170", "partition": "test", "index": 7086, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java", "func_name": "DeployableUnit.addComponent", "original_string": "public void addComponent(DeployableComponent dc) {\r\n    if (logger.isTraceEnabled())\r\n      logger.trace(\"Adding Component \" + dc.getComponentKey());\r\n\r\n    // Add the component ..\r\n    components.add(dc);\r\n\r\n    // .. the key ..\r\n    componentIDs.add(dc.getComponentKey());\r\n\r\n    // .. the dependencies ..\r\n    dependencies.addAll(dc.getDependencies());\r\n\r\n    // .. the install actions to be taken ..\r\n    installActions.addAll(dc.getInstallActions());\r\n\r\n    // .. post-install actions (if any) ..\r\n    Collection<ManagementAction> postInstallActionsStrings = postInstallActions\r\n    .remove(dc.getComponentKey());\r\n\r\n    if (postInstallActionsStrings != null\r\n        && !postInstallActionsStrings.isEmpty()) {\r\n      installActions.addAll(postInstallActionsStrings);\r\n    }\r\n    \r\n    // .. pre-uninstall actions (if any) ..\r\n    Collection<ManagementAction> preUninstallActionsStrings = preUninstallActions\r\n    .remove(dc.getComponentKey());\r\n\r\n    if (preUninstallActionsStrings != null)\r\n      uninstallActions.addAll(preUninstallActionsStrings);\r\n\r\n    // .. and finally the uninstall actions to the DU.\r\n    uninstallActions.addAll(dc.getUninstallActions());\r\n  }", "language": "java", "code": "public void addComponent(DeployableComponent dc) {\r\n    if (logger.isTraceEnabled())\r\n      logger.trace(\"Adding Component \" + dc.getComponentKey());\r\n\r\n    // Add the component ..\r\n    components.add(dc);\r\n\r\n    // .. the key ..\r\n    componentIDs.add(dc.getComponentKey());\r\n\r\n    // .. the dependencies ..\r\n    dependencies.addAll(dc.getDependencies());\r\n\r\n    // .. the install actions to be taken ..\r\n    installActions.addAll(dc.getInstallActions());\r\n\r\n    // .. post-install actions (if any) ..\r\n    Collection<ManagementAction> postInstallActionsStrings = postInstallActions\r\n    .remove(dc.getComponentKey());\r\n\r\n    if (postInstallActionsStrings != null\r\n        && !postInstallActionsStrings.isEmpty()) {\r\n      installActions.addAll(postInstallActionsStrings);\r\n    }\r\n    \r\n    // .. pre-uninstall actions (if any) ..\r\n    Collection<ManagementAction> preUninstallActionsStrings = preUninstallActions\r\n    .remove(dc.getComponentKey());\r\n\r\n    if (preUninstallActionsStrings != null)\r\n      uninstallActions.addAll(preUninstallActionsStrings);\r\n\r\n    // .. and finally the uninstall actions to the DU.\r\n    uninstallActions.addAll(dc.getUninstallActions());\r\n  }", "code_tokens": ["public", "void", "addComponent", "(", "DeployableComponent", "dc", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "logger", ".", "trace", "(", "\"Adding Component \"", "+", "dc", ".", "getComponentKey", "(", ")", ")", ";", "// Add the component ..\r", "components", ".", "add", "(", "dc", ")", ";", "// .. the key ..\r", "componentIDs", ".", "add", "(", "dc", ".", "getComponentKey", "(", ")", ")", ";", "// .. the dependencies ..\r", "dependencies", ".", "addAll", "(", "dc", ".", "getDependencies", "(", ")", ")", ";", "// .. the install actions to be taken ..\r", "installActions", ".", "addAll", "(", "dc", ".", "getInstallActions", "(", ")", ")", ";", "// .. post-install actions (if any) ..\r", "Collection", "<", "ManagementAction", ">", "postInstallActionsStrings", "=", "postInstallActions", ".", "remove", "(", "dc", ".", "getComponentKey", "(", ")", ")", ";", "if", "(", "postInstallActionsStrings", "!=", "null", "&&", "!", "postInstallActionsStrings", ".", "isEmpty", "(", ")", ")", "{", "installActions", ".", "addAll", "(", "postInstallActionsStrings", ")", ";", "}", "// .. pre-uninstall actions (if any) ..\r", "Collection", "<", "ManagementAction", ">", "preUninstallActionsStrings", "=", "preUninstallActions", ".", "remove", "(", "dc", ".", "getComponentKey", "(", ")", ")", ";", "if", "(", "preUninstallActionsStrings", "!=", "null", ")", "uninstallActions", ".", "addAll", "(", "preUninstallActionsStrings", ")", ";", "// .. and finally the uninstall actions to the DU.\r", "uninstallActions", ".", "addAll", "(", "dc", ".", "getUninstallActions", "(", ")", ")", ";", "}"], "docstring": "Adder method for a Deployable Component.\n@param dc the deployable component object.", "docstring_tokens": ["Adder", "method", "for", "a", "Deployable", "Component", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java#L112-L146", "partition": "test", "index": 7085, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/deployment/interceptors/SbbLocalObjectInterceptor.java", "func_name": "SbbLocalObjectInterceptor.invokeAndReturnvoid", "original_string": "public void invokeAndReturnvoid(SbbConcrete proxy, String methodName,\n\t\t\tObject[] args, Class<?>[] argTypes) throws Exception {\n\t\tinvokeAndReturnObject(proxy, methodName, args, argTypes);\n\t}", "language": "java", "code": "public void invokeAndReturnvoid(SbbConcrete proxy, String methodName,\n\t\t\tObject[] args, Class<?>[] argTypes) throws Exception {\n\t\tinvokeAndReturnObject(proxy, methodName, args, argTypes);\n\t}", "code_tokens": ["public", "void", "invokeAndReturnvoid", "(", "SbbConcrete", "proxy", ",", "String", "methodName", ",", "Object", "[", "]", "args", ",", "Class", "<", "?", ">", "[", "]", "argTypes", ")", "throws", "Exception", "{", "invokeAndReturnObject", "(", "proxy", ",", "methodName", ",", "args", ",", "argTypes", ")", ";", "}"], "docstring": "Invokers for the simple types", "docstring_tokens": ["Invokers", "for", "the", "simple", "types"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/deployment/interceptors/SbbLocalObjectInterceptor.java#L157-L160", "partition": "test", "index": 7111, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteActivityContextInterfaceGenerator.java", "func_name": "ConcreteActivityContextInterfaceGenerator.generateConcreteMethods", "original_string": "private void generateConcreteMethods(Map interfaceMethods) {\r\n\t\tif (interfaceMethods == null)\r\n\t\t\treturn;\r\n\r\n\t\tIterator it = interfaceMethods.values().iterator();\r\n\t\twhile (it.hasNext()) {\r\n\t\t\tCtMethod interfaceMethod = (CtMethod) it.next();\r\n\t\t\tif (interfaceMethod != null\r\n\t\t\t\t\t//&& isBaseInterfaceMethod(interfaceMethod.getName()))\r\n\t\t\t\t\t&& (interfaceMethod.getDeclaringClass().getName().equals(\r\n\t\t\t\t\t\t\tjavax.slee.ActivityContextInterface.class.getName()) || interfaceMethod.getDeclaringClass().getName().equals(\r\n\t\t\t\t\t\t\t\t\tActivityContextInterfaceExt.class.getName())))\r\n\t\t\t\tcontinue; // @todo: need to check args also\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// copy method from abstract to concrete class\r\n\t\t\t\tCtMethod concreteMethod = CtNewMethod.copy(interfaceMethod,\r\n\t\t\t\t\t\tconcreteActivityContextInterface, null);\r\n\t\t\t\t// create the method body\r\n\t\t\t\tString fieldName = interfaceMethod.getName().substring(3);\r\n\t\t\t\tfieldName = fieldName.substring(0, 1).toLowerCase()\r\n\t\t\t\t\t\t+ fieldName.substring(1);\r\n\t\t\t\tString concreteMethodBody = null;\r\n\t\t\t\tif (interfaceMethod.getName().startsWith(\"get\")) {\r\n\t\t\t\t\tconcreteMethodBody = \"{ return ($r)getFieldValue(\\\"\"\r\n\t\t\t\t\t\t\t+ fieldName + \"\\\",\"+concreteMethod.getReturnType().getName()+\".class); }\";\r\n\t\t\t\t} else if (interfaceMethod.getName().startsWith(\"set\")) {\r\n\t\t\t\t\tconcreteMethodBody = \"{ setFieldValue(\\\"\" + fieldName\r\n\t\t\t\t\t\t\t+ \"\\\",$1); }\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new SLEEException(\"unexpected method name <\"\r\n\t\t\t\t\t\t\t+ interfaceMethod.getName()\r\n\t\t\t\t\t\t\t+ \"> to implement in sbb aci interface\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (logger.isTraceEnabled()) {\r\n\t\t            logger.trace(\"Generated method \"\r\n\t\t\t\t\t\t\t+ interfaceMethod.getName() + \" , body = \"\r\n\t\t\t\t\t\t\t+ concreteMethodBody);\r\n\t\t\t\t}\r\n\t\t\t\tconcreteMethod.setBody(concreteMethodBody);\r\n\t\t\t\tconcreteActivityContextInterface.addMethod(concreteMethod);\r\n\t\t\t} catch (Exception cce) {\r\n\t\t\t\tthrow new SLEEException(\"Cannot compile method \"\r\n\t\t\t\t\t\t+ interfaceMethod.getName(), cce);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}", "language": "java", "code": "private void generateConcreteMethods(Map interfaceMethods) {\r\n\t\tif (interfaceMethods == null)\r\n\t\t\treturn;\r\n\r\n\t\tIterator it = interfaceMethods.values().iterator();\r\n\t\twhile (it.hasNext()) {\r\n\t\t\tCtMethod interfaceMethod = (CtMethod) it.next();\r\n\t\t\tif (interfaceMethod != null\r\n\t\t\t\t\t//&& isBaseInterfaceMethod(interfaceMethod.getName()))\r\n\t\t\t\t\t&& (interfaceMethod.getDeclaringClass().getName().equals(\r\n\t\t\t\t\t\t\tjavax.slee.ActivityContextInterface.class.getName()) || interfaceMethod.getDeclaringClass().getName().equals(\r\n\t\t\t\t\t\t\t\t\tActivityContextInterfaceExt.class.getName())))\r\n\t\t\t\tcontinue; // @todo: need to check args also\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// copy method from abstract to concrete class\r\n\t\t\t\tCtMethod concreteMethod = CtNewMethod.copy(interfaceMethod,\r\n\t\t\t\t\t\tconcreteActivityContextInterface, null);\r\n\t\t\t\t// create the method body\r\n\t\t\t\tString fieldName = interfaceMethod.getName().substring(3);\r\n\t\t\t\tfieldName = fieldName.substring(0, 1).toLowerCase()\r\n\t\t\t\t\t\t+ fieldName.substring(1);\r\n\t\t\t\tString concreteMethodBody = null;\r\n\t\t\t\tif (interfaceMethod.getName().startsWith(\"get\")) {\r\n\t\t\t\t\tconcreteMethodBody = \"{ return ($r)getFieldValue(\\\"\"\r\n\t\t\t\t\t\t\t+ fieldName + \"\\\",\"+concreteMethod.getReturnType().getName()+\".class); }\";\r\n\t\t\t\t} else if (interfaceMethod.getName().startsWith(\"set\")) {\r\n\t\t\t\t\tconcreteMethodBody = \"{ setFieldValue(\\\"\" + fieldName\r\n\t\t\t\t\t\t\t+ \"\\\",$1); }\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new SLEEException(\"unexpected method name <\"\r\n\t\t\t\t\t\t\t+ interfaceMethod.getName()\r\n\t\t\t\t\t\t\t+ \"> to implement in sbb aci interface\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (logger.isTraceEnabled()) {\r\n\t\t            logger.trace(\"Generated method \"\r\n\t\t\t\t\t\t\t+ interfaceMethod.getName() + \" , body = \"\r\n\t\t\t\t\t\t\t+ concreteMethodBody);\r\n\t\t\t\t}\r\n\t\t\t\tconcreteMethod.setBody(concreteMethodBody);\r\n\t\t\t\tconcreteActivityContextInterface.addMethod(concreteMethod);\r\n\t\t\t} catch (Exception cce) {\r\n\t\t\t\tthrow new SLEEException(\"Cannot compile method \"\r\n\t\t\t\t\t\t+ interfaceMethod.getName(), cce);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}", "code_tokens": ["private", "void", "generateConcreteMethods", "(", "Map", "interfaceMethods", ")", "{", "if", "(", "interfaceMethods", "==", "null", ")", "return", ";", "Iterator", "it", "=", "interfaceMethods", ".", "values", "(", ")", ".", "iterator", "(", ")", ";", "while", "(", "it", ".", "hasNext", "(", ")", ")", "{", "CtMethod", "interfaceMethod", "=", "(", "CtMethod", ")", "it", ".", "next", "(", ")", ";", "if", "(", "interfaceMethod", "!=", "null", "//&& isBaseInterfaceMethod(interfaceMethod.getName()))\r", "&&", "(", "interfaceMethod", ".", "getDeclaringClass", "(", ")", ".", "getName", "(", ")", ".", "equals", "(", "javax", ".", "slee", ".", "ActivityContextInterface", ".", "class", ".", "getName", "(", ")", ")", "||", "interfaceMethod", ".", "getDeclaringClass", "(", ")", ".", "getName", "(", ")", ".", "equals", "(", "ActivityContextInterfaceExt", ".", "class", ".", "getName", "(", ")", ")", ")", ")", "continue", ";", "// @todo: need to check args also\r", "try", "{", "// copy method from abstract to concrete class\r", "CtMethod", "concreteMethod", "=", "CtNewMethod", ".", "copy", "(", "interfaceMethod", ",", "concreteActivityContextInterface", ",", "null", ")", ";", "// create the method body\r", "String", "fieldName", "=", "interfaceMethod", ".", "getName", "(", ")", ".", "substring", "(", "3", ")", ";", "fieldName", "=", "fieldName", ".", "substring", "(", "0", ",", "1", ")", ".", "toLowerCase", "(", ")", "+", "fieldName", ".", "substring", "(", "1", ")", ";", "String", "concreteMethodBody", "=", "null", ";", "if", "(", "interfaceMethod", ".", "getName", "(", ")", ".", "startsWith", "(", "\"get\"", ")", ")", "{", "concreteMethodBody", "=", "\"{ return ($r)getFieldValue(\\\"\"", "+", "fieldName", "+", "\"\\\",\"", "+", "concreteMethod", ".", "getReturnType", "(", ")", ".", "getName", "(", ")", "+", "\".class); }\"", ";", "}", "else", "if", "(", "interfaceMethod", ".", "getName", "(", ")", ".", "startsWith", "(", "\"set\"", ")", ")", "{", "concreteMethodBody", "=", "\"{ setFieldValue(\\\"\"", "+", "fieldName", "+", "\"\\\",$1); }\"", ";", "}", "else", "{", "throw", "new", "SLEEException", "(", "\"unexpected method name <\"", "+", "interfaceMethod", ".", "getName", "(", ")", "+", "\"> to implement in sbb aci interface\"", ")", ";", "}", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Generated method \"", "+", "interfaceMethod", ".", "getName", "(", ")", "+", "\" , body = \"", "+", "concreteMethodBody", ")", ";", "}", "concreteMethod", ".", "setBody", "(", "concreteMethodBody", ")", ";", "concreteActivityContextInterface", ".", "addMethod", "(", "concreteMethod", ")", ";", "}", "catch", "(", "Exception", "cce", ")", "{", "throw", "new", "SLEEException", "(", "\"Cannot compile method \"", "+", "interfaceMethod", ".", "getName", "(", ")", ",", "cce", ")", ";", "}", "}", "}"], "docstring": "Generates the concrete methods of the class It generates a specific\nmethod implementation for the javax.slee.ActivityContextInterface methods\nfor the methods coming from the ActivityContextInterface developer the\ncall is routed to the base asbtract class\n\n@param interfaceMethods\nthe methods to implement coming from the\nActivityContextInterface developer", "docstring_tokens": ["Generates", "the", "concrete", "methods", "of", "the", "class", "It", "generates", "a", "specific", "method", "implementation", "for", "the", "javax", ".", "slee", ".", "ActivityContextInterface", "methods", "for", "the", "methods", "coming", "from", "the", "ActivityContextInterface", "developer", "the", "call", "is", "routed", "to", "the", "base", "asbtract", "class"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteActivityContextInterfaceGenerator.java#L180-L228", "partition": "test", "index": 7074, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteActivityContextInterfaceGenerator.java", "func_name": "ConcreteActivityContextInterfaceGenerator.generateActivityContextInterfaceConcreteClass", "original_string": "public Class generateActivityContextInterfaceConcreteClass()\r\n\t\t\tthrows DeploymentException {\r\n\r\n\t\tString tmpClassName = ConcreteClassGeneratorUtils.CONCRETE_ACTIVITY_INTERFACE_CLASS_NAME_PREFIX\r\n\t\t\t\t+ activityContextInterfaceName\r\n\t\t\t\t+ ConcreteClassGeneratorUtils.CONCRETE_ACTIVITY_INTERFACE_CLASS_NAME_SUFFIX;\r\n\r\n\t\tconcreteActivityContextInterface = pool.makeClass(tmpClassName);\r\n\t\tCtClass sbbActivityContextInterface = null;\r\n\t\ttry {\r\n\t\t\tactivityContextInterface = pool.get(activityContextInterfaceName);\r\n\t\t\tsbbActivityContextInterface = pool\r\n\t\t\t\t\t.get(SbbActivityContextInterfaceImpl.class.getName());\r\n\t\t} catch (NotFoundException nfe) {\r\n\t\t\tthrow new DeploymentException(\"Could not find aci \"\r\n\t\t\t\t\t+ activityContextInterfaceName, nfe);\r\n\t\t}\r\n\r\n\t\t// Generates the extends link\r\n\t\tConcreteClassGeneratorUtils.createInheritanceLink(\r\n\t\t\t\tconcreteActivityContextInterface, sbbActivityContextInterface);\r\n\r\n\t\t// Generates the implements link\r\n\t\tConcreteClassGeneratorUtils.createInterfaceLinks(\r\n\t\t\t\tconcreteActivityContextInterface,\r\n\t\t\t\tnew CtClass[] { activityContextInterface });\r\n\t\t\r\n\t\t// Generates the methods to implement from the interface\r\n\t\tMap interfaceMethods = ClassUtils\r\n\t\t\t\t.getInterfaceMethodsFromInterface(activityContextInterface);\r\n\t\tgenerateConcreteMethods(interfaceMethods);\r\n\t\t// generates the class\r\n\t\tString sbbDeploymentPathStr = deployDir;\r\n\r\n\t\ttry {\r\n\t\t\tconcreteActivityContextInterface.writeFile(sbbDeploymentPathStr);\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Concrete Class \" + tmpClassName\r\n\t\t\t\t\t\t+ \" generated in the following path \"\r\n\t\t\t\t\t\t+ sbbDeploymentPathStr);\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\r\n\t\t\tlogger.error(\"problem generating concrete class\", e);\r\n\t\t\tthrow new DeploymentException(\r\n\t\t\t\t\t\"problem generating concrete class! \", e);\r\n\t\t}\r\n\r\n\t\t// load the class\r\n\t\tClass clazz = null;\r\n\t\ttry {\r\n\t\t\tclazz = Thread.currentThread().getContextClassLoader().loadClass(\r\n\t\t\t\t\ttmpClassName);\r\n\t\t} catch (Exception e1) {\r\n\t\t\tlogger.error(\"problem loading generated class\", e1);\r\n\t\t\tthrow new DeploymentException(\r\n\t\t\t\t\t\"problem loading the generated class! \", e1);\r\n\t\t}\r\n\r\n\t\tthis.concreteActivityContextInterface.defrost();\r\n\r\n\t\treturn clazz;\r\n\r\n\t}", "language": "java", "code": "public Class generateActivityContextInterfaceConcreteClass()\r\n\t\t\tthrows DeploymentException {\r\n\r\n\t\tString tmpClassName = ConcreteClassGeneratorUtils.CONCRETE_ACTIVITY_INTERFACE_CLASS_NAME_PREFIX\r\n\t\t\t\t+ activityContextInterfaceName\r\n\t\t\t\t+ ConcreteClassGeneratorUtils.CONCRETE_ACTIVITY_INTERFACE_CLASS_NAME_SUFFIX;\r\n\r\n\t\tconcreteActivityContextInterface = pool.makeClass(tmpClassName);\r\n\t\tCtClass sbbActivityContextInterface = null;\r\n\t\ttry {\r\n\t\t\tactivityContextInterface = pool.get(activityContextInterfaceName);\r\n\t\t\tsbbActivityContextInterface = pool\r\n\t\t\t\t\t.get(SbbActivityContextInterfaceImpl.class.getName());\r\n\t\t} catch (NotFoundException nfe) {\r\n\t\t\tthrow new DeploymentException(\"Could not find aci \"\r\n\t\t\t\t\t+ activityContextInterfaceName, nfe);\r\n\t\t}\r\n\r\n\t\t// Generates the extends link\r\n\t\tConcreteClassGeneratorUtils.createInheritanceLink(\r\n\t\t\t\tconcreteActivityContextInterface, sbbActivityContextInterface);\r\n\r\n\t\t// Generates the implements link\r\n\t\tConcreteClassGeneratorUtils.createInterfaceLinks(\r\n\t\t\t\tconcreteActivityContextInterface,\r\n\t\t\t\tnew CtClass[] { activityContextInterface });\r\n\t\t\r\n\t\t// Generates the methods to implement from the interface\r\n\t\tMap interfaceMethods = ClassUtils\r\n\t\t\t\t.getInterfaceMethodsFromInterface(activityContextInterface);\r\n\t\tgenerateConcreteMethods(interfaceMethods);\r\n\t\t// generates the class\r\n\t\tString sbbDeploymentPathStr = deployDir;\r\n\r\n\t\ttry {\r\n\t\t\tconcreteActivityContextInterface.writeFile(sbbDeploymentPathStr);\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Concrete Class \" + tmpClassName\r\n\t\t\t\t\t\t+ \" generated in the following path \"\r\n\t\t\t\t\t\t+ sbbDeploymentPathStr);\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\r\n\t\t\tlogger.error(\"problem generating concrete class\", e);\r\n\t\t\tthrow new DeploymentException(\r\n\t\t\t\t\t\"problem generating concrete class! \", e);\r\n\t\t}\r\n\r\n\t\t// load the class\r\n\t\tClass clazz = null;\r\n\t\ttry {\r\n\t\t\tclazz = Thread.currentThread().getContextClassLoader().loadClass(\r\n\t\t\t\t\ttmpClassName);\r\n\t\t} catch (Exception e1) {\r\n\t\t\tlogger.error(\"problem loading generated class\", e1);\r\n\t\t\tthrow new DeploymentException(\r\n\t\t\t\t\t\"problem loading the generated class! \", e1);\r\n\t\t}\r\n\r\n\t\tthis.concreteActivityContextInterface.defrost();\r\n\r\n\t\treturn clazz;\r\n\r\n\t}", "code_tokens": ["public", "Class", "generateActivityContextInterfaceConcreteClass", "(", ")", "throws", "DeploymentException", "{", "String", "tmpClassName", "=", "ConcreteClassGeneratorUtils", ".", "CONCRETE_ACTIVITY_INTERFACE_CLASS_NAME_PREFIX", "+", "activityContextInterfaceName", "+", "ConcreteClassGeneratorUtils", ".", "CONCRETE_ACTIVITY_INTERFACE_CLASS_NAME_SUFFIX", ";", "concreteActivityContextInterface", "=", "pool", ".", "makeClass", "(", "tmpClassName", ")", ";", "CtClass", "sbbActivityContextInterface", "=", "null", ";", "try", "{", "activityContextInterface", "=", "pool", ".", "get", "(", "activityContextInterfaceName", ")", ";", "sbbActivityContextInterface", "=", "pool", ".", "get", "(", "SbbActivityContextInterfaceImpl", ".", "class", ".", "getName", "(", ")", ")", ";", "}", "catch", "(", "NotFoundException", "nfe", ")", "{", "throw", "new", "DeploymentException", "(", "\"Could not find aci \"", "+", "activityContextInterfaceName", ",", "nfe", ")", ";", "}", "// Generates the extends link\r", "ConcreteClassGeneratorUtils", ".", "createInheritanceLink", "(", "concreteActivityContextInterface", ",", "sbbActivityContextInterface", ")", ";", "// Generates the implements link\r", "ConcreteClassGeneratorUtils", ".", "createInterfaceLinks", "(", "concreteActivityContextInterface", ",", "new", "CtClass", "[", "]", "{", "activityContextInterface", "}", ")", ";", "// Generates the methods to implement from the interface\r", "Map", "interfaceMethods", "=", "ClassUtils", ".", "getInterfaceMethodsFromInterface", "(", "activityContextInterface", ")", ";", "generateConcreteMethods", "(", "interfaceMethods", ")", ";", "// generates the class\r", "String", "sbbDeploymentPathStr", "=", "deployDir", ";", "try", "{", "concreteActivityContextInterface", ".", "writeFile", "(", "sbbDeploymentPathStr", ")", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Concrete Class \"", "+", "tmpClassName", "+", "\" generated in the following path \"", "+", "sbbDeploymentPathStr", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "error", "(", "\"problem generating concrete class\"", ",", "e", ")", ";", "throw", "new", "DeploymentException", "(", "\"problem generating concrete class! \"", ",", "e", ")", ";", "}", "// load the class\r", "Class", "clazz", "=", "null", ";", "try", "{", "clazz", "=", "Thread", ".", "currentThread", "(", ")", ".", "getContextClassLoader", "(", ")", ".", "loadClass", "(", "tmpClassName", ")", ";", "}", "catch", "(", "Exception", "e1", ")", "{", "logger", ".", "error", "(", "\"problem loading generated class\"", ",", "e1", ")", ";", "throw", "new", "DeploymentException", "(", "\"problem loading the generated class! \"", ",", "e1", ")", ";", "}", "this", ".", "concreteActivityContextInterface", ".", "defrost", "(", ")", ";", "return", "clazz", ";", "}"], "docstring": "Generate the Activity Context Interface Class\n\n@param activityContextInterfaceName\nthe name of the Activity Context Interface\n@return the concrete Activity Context Interface class implementing the\nActivity Context Interface", "docstring_tokens": ["Generate", "the", "Activity", "Context", "Interface", "Class"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteActivityContextInterfaceGenerator.java#L105-L168", "partition": "test", "index": 7073, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointStartActivityNotTransactedExecutor.java", "func_name": "SleeEndpointStartActivityNotTransactedExecutor.execute", "original_string": "void execute(final ActivityHandle handle, final int activityFlags, boolean suspendActivity)\n\t\t\tthrows SLEEException {\n\n\t\tfinal SleeTransaction tx = super.suspendTransaction();\n\t\tActivityContextHandle ach = null;\n\t\ttry {\n\t\t\tach = sleeEndpoint._startActivity(handle, activityFlags, suspendActivity ? tx : null);\n\t\t} finally {\n\t\t\tif (tx != null) {\n\t\t\t\tsuper.resumeTransaction(tx);\n\t\t\t\t// the activity was started out of the tx but it will be suspended, if the flags request the unreferenced callback then\n\t\t\t\t// we can load the ac now, which will schedule a check for references in the end of the tx, this ensures that the callback is received if no events are fired or \n\t\t\t\t// events are fired but not handled, that is, no reference is ever ever created\n\t\t\t\tif (ach != null && ActivityFlags.hasRequestSleeActivityGCCallback(activityFlags)) {\n\t\t\t\t\tacFactory.getActivityContext(ach);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "void execute(final ActivityHandle handle, final int activityFlags, boolean suspendActivity)\n\t\t\tthrows SLEEException {\n\n\t\tfinal SleeTransaction tx = super.suspendTransaction();\n\t\tActivityContextHandle ach = null;\n\t\ttry {\n\t\t\tach = sleeEndpoint._startActivity(handle, activityFlags, suspendActivity ? tx : null);\n\t\t} finally {\n\t\t\tif (tx != null) {\n\t\t\t\tsuper.resumeTransaction(tx);\n\t\t\t\t// the activity was started out of the tx but it will be suspended, if the flags request the unreferenced callback then\n\t\t\t\t// we can load the ac now, which will schedule a check for references in the end of the tx, this ensures that the callback is received if no events are fired or \n\t\t\t\t// events are fired but not handled, that is, no reference is ever ever created\n\t\t\t\tif (ach != null && ActivityFlags.hasRequestSleeActivityGCCallback(activityFlags)) {\n\t\t\t\t\tacFactory.getActivityContext(ach);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["void", "execute", "(", "final", "ActivityHandle", "handle", ",", "final", "int", "activityFlags", ",", "boolean", "suspendActivity", ")", "throws", "SLEEException", "{", "final", "SleeTransaction", "tx", "=", "super", ".", "suspendTransaction", "(", ")", ";", "ActivityContextHandle", "ach", "=", "null", ";", "try", "{", "ach", "=", "sleeEndpoint", ".", "_startActivity", "(", "handle", ",", "activityFlags", ",", "suspendActivity", "?", "tx", ":", "null", ")", ";", "}", "finally", "{", "if", "(", "tx", "!=", "null", ")", "{", "super", ".", "resumeTransaction", "(", "tx", ")", ";", "// the activity was started out of the tx but it will be suspended, if the flags request the unreferenced callback then", "// we can load the ac now, which will schedule a check for references in the end of the tx, this ensures that the callback is received if no events are fired or ", "// events are fired but not handled, that is, no reference is ever ever created", "if", "(", "ach", "!=", "null", "&&", "ActivityFlags", ".", "hasRequestSleeActivityGCCallback", "(", "activityFlags", ")", ")", "{", "acFactory", ".", "getActivityContext", "(", "ach", ")", ";", "}", "}", "}", "}"], "docstring": "Executes a non transacted start activity operation.\n@param handle\n@param activityFlags\n@throws SLEEException", "docstring_tokens": ["Executes", "a", "non", "transacted", "start", "activity", "operation", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointStartActivityNotTransactedExecutor.java#L57-L75", "partition": "test", "index": 7129, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java", "func_name": "ConcreteSbbGenerator.createFireEventMethods", "original_string": "protected void createFireEventMethods(Collection<EventEntryDescriptor> mEventEntries) {\n\t\tif (mEventEntries == null)\n\t\t\treturn;\n\t\tfor (EventEntryDescriptor mEventEntry : mEventEntries) {\n\t\t\tif (mEventEntry.isFired()) {\n\t\t\t\tString methodName = \"fire\" + mEventEntry.getEventName();\n\t\t\t\tCtMethod method = (CtMethod) abstractMethods.get(methodName);\n\t\t\t\tif (method == null) {\n\t\t\t\t\tmethod = (CtMethod) superClassesAbstractMethods\n\t\t\t\t\t\t\t.get(methodName);\n\t\t\t\t}\n\t\t\t\tif (method != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// copy method from abstract to concrete class\n\t\t\t\t\t\tCtMethod concreteMethod = CtNewMethod.copy(method,\n\t\t\t\t\t\t\t\tsbbConcreteClass, null);\n\t\t\t\t\t\t// create the method body\n\t\t\t\t\t\tString concreteMethodBody = \"{\";\n\t\t\t\t\t\tconcreteMethodBody += getEventTypeIDInstantionString(mEventEntry);\n\t\t\t\t\t\tconcreteMethodBody += SbbAbstractMethodHandler.class\n\t\t\t\t\t\t\t\t.getName()\n\t\t\t\t\t\t\t\t+ \".fireEvent(sbbEntity,eventTypeID\";\n\t\t\t\t\t\tfor (int i = 0; i < method.getParameterTypes().length; i++) {\n\t\t\t\t\t\t\tconcreteMethodBody += \",$\" + (i + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconcreteMethodBody += \");}\";\n\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t            logger.trace(\"Generated method \" + methodName\n\t\t\t\t\t\t\t\t\t+ \" , body = \" + concreteMethodBody);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconcreteMethod.setBody(concreteMethodBody);\n\t\t\t\t\t\tsbbConcreteClass.addMethod(concreteMethod);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tthrow new SLEEException(\"Cannot compile method \"\n\t\t\t\t\t\t\t\t+ method.getName(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "protected void createFireEventMethods(Collection<EventEntryDescriptor> mEventEntries) {\n\t\tif (mEventEntries == null)\n\t\t\treturn;\n\t\tfor (EventEntryDescriptor mEventEntry : mEventEntries) {\n\t\t\tif (mEventEntry.isFired()) {\n\t\t\t\tString methodName = \"fire\" + mEventEntry.getEventName();\n\t\t\t\tCtMethod method = (CtMethod) abstractMethods.get(methodName);\n\t\t\t\tif (method == null) {\n\t\t\t\t\tmethod = (CtMethod) superClassesAbstractMethods\n\t\t\t\t\t\t\t.get(methodName);\n\t\t\t\t}\n\t\t\t\tif (method != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// copy method from abstract to concrete class\n\t\t\t\t\t\tCtMethod concreteMethod = CtNewMethod.copy(method,\n\t\t\t\t\t\t\t\tsbbConcreteClass, null);\n\t\t\t\t\t\t// create the method body\n\t\t\t\t\t\tString concreteMethodBody = \"{\";\n\t\t\t\t\t\tconcreteMethodBody += getEventTypeIDInstantionString(mEventEntry);\n\t\t\t\t\t\tconcreteMethodBody += SbbAbstractMethodHandler.class\n\t\t\t\t\t\t\t\t.getName()\n\t\t\t\t\t\t\t\t+ \".fireEvent(sbbEntity,eventTypeID\";\n\t\t\t\t\t\tfor (int i = 0; i < method.getParameterTypes().length; i++) {\n\t\t\t\t\t\t\tconcreteMethodBody += \",$\" + (i + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconcreteMethodBody += \");}\";\n\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t            logger.trace(\"Generated method \" + methodName\n\t\t\t\t\t\t\t\t\t+ \" , body = \" + concreteMethodBody);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconcreteMethod.setBody(concreteMethodBody);\n\t\t\t\t\t\tsbbConcreteClass.addMethod(concreteMethod);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tthrow new SLEEException(\"Cannot compile method \"\n\t\t\t\t\t\t\t\t+ method.getName(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["protected", "void", "createFireEventMethods", "(", "Collection", "<", "EventEntryDescriptor", ">", "mEventEntries", ")", "{", "if", "(", "mEventEntries", "==", "null", ")", "return", ";", "for", "(", "EventEntryDescriptor", "mEventEntry", ":", "mEventEntries", ")", "{", "if", "(", "mEventEntry", ".", "isFired", "(", ")", ")", "{", "String", "methodName", "=", "\"fire\"", "+", "mEventEntry", ".", "getEventName", "(", ")", ";", "CtMethod", "method", "=", "(", "CtMethod", ")", "abstractMethods", ".", "get", "(", "methodName", ")", ";", "if", "(", "method", "==", "null", ")", "{", "method", "=", "(", "CtMethod", ")", "superClassesAbstractMethods", ".", "get", "(", "methodName", ")", ";", "}", "if", "(", "method", "!=", "null", ")", "{", "try", "{", "// copy method from abstract to concrete class", "CtMethod", "concreteMethod", "=", "CtNewMethod", ".", "copy", "(", "method", ",", "sbbConcreteClass", ",", "null", ")", ";", "// create the method body", "String", "concreteMethodBody", "=", "\"{\"", ";", "concreteMethodBody", "+=", "getEventTypeIDInstantionString", "(", "mEventEntry", ")", ";", "concreteMethodBody", "+=", "SbbAbstractMethodHandler", ".", "class", ".", "getName", "(", ")", "+", "\".fireEvent(sbbEntity,eventTypeID\"", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "method", ".", "getParameterTypes", "(", ")", ".", "length", ";", "i", "++", ")", "{", "concreteMethodBody", "+=", "\",$\"", "+", "(", "i", "+", "1", ")", ";", "}", "concreteMethodBody", "+=", "\");}\"", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Generated method \"", "+", "methodName", "+", "\" , body = \"", "+", "concreteMethodBody", ")", ";", "}", "concreteMethod", ".", "setBody", "(", "concreteMethodBody", ")", ";", "sbbConcreteClass", ".", "addMethod", "(", "concreteMethod", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "SLEEException", "(", "\"Cannot compile method \"", "+", "method", ".", "getName", "(", ")", ",", "e", ")", ";", "}", "}", "}", "}", "}"], "docstring": "Create the implementation of the fire event methods\n\n@param mEventEntries\nthe set of fire event", "docstring_tokens": ["Create", "the", "implementation", "of", "the", "fire", "event", "methods"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java#L914-L953", "partition": "test", "index": 7105, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/management/jmx/SleeManagementMBeanImpl.java", "func_name": "SleeManagementMBeanImpl.start", "original_string": "public void start() throws InvalidStateException, ManagementException {\r\n\r\n\t\ttry {\r\n\t\t\t// request to change to STARTING\r\n\t\t\tfinal SleeStateChangeRequest startingRequest = new SleeStateChangeRequest() {\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void stateChanged(SleeState oldState) {\r\n\t\t\t\t\tif(logger.isDebugEnabled()) {\r\n\t\t\t\t\t\tlogger.debug(generateMessageWithLogo(\"starting\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnotifyStateChange(oldState, getNewState());\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void requestCompleted() {\r\n\t\t\t\t\t// inner request, executed when the parent completes, to change to RUNNING\r\n\t\t\t\t\tfinal SleeStateChangeRequest runningRequest = new SleeStateChangeRequest() {\r\n\r\n\t\t\t\t\t\tprivate SleeState oldState;\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic void stateChanged(SleeState oldState) {\r\n\t\t\t\t\t\t\tlogger.info(generateMessageWithLogo(\"started\"));\r\n\t\t\t\t\t\t\tthis.oldState = oldState;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic void requestCompleted() {\r\n\t\t\t\t\t\t\tnotifyStateChange(oldState, getNewState());\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic boolean isBlockingRequest() {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic SleeState getNewState() {\r\n\t\t\t\t\t\t\treturn SleeState.RUNNING;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tsleeContainer.setSleeState(runningRequest);\r\n\t\t\t\t\t} catch (Throwable e) {\r\n\t\t\t\t\t\tlogger.error(\r\n\t\t\t\t\t\t\t\t\"Failed to set container in RUNNING state\", e);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tstop(false);\r\n\t\t\t\t\t\t} catch (Throwable f) {\r\n\t\t\t\t\t\t\tlogger.error(\r\n\t\t\t\t\t\t\t\t\t\"Failed to set container in STOPPED state, after failure to set in RUNNING state\",\r\n\t\t\t\t\t\t\t\t\te);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic boolean isBlockingRequest() {\r\n\t\t\t\t\t// should be false, but the tck doesn't like it\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic SleeState getNewState() {\r\n\t\t\t\t\treturn SleeState.STARTING;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tsleeContainer.setSleeState(startingRequest);\r\n\r\n\t\t} catch (InvalidStateException ex) {\r\n\t\t\tthrow ex;\r\n\t\t} catch (Exception ex) {\r\n\t\t\tthrow new ManagementException(ex.getMessage(), ex);\r\n\t\t}\r\n\t}", "language": "java", "code": "public void start() throws InvalidStateException, ManagementException {\r\n\r\n\t\ttry {\r\n\t\t\t// request to change to STARTING\r\n\t\t\tfinal SleeStateChangeRequest startingRequest = new SleeStateChangeRequest() {\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void stateChanged(SleeState oldState) {\r\n\t\t\t\t\tif(logger.isDebugEnabled()) {\r\n\t\t\t\t\t\tlogger.debug(generateMessageWithLogo(\"starting\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnotifyStateChange(oldState, getNewState());\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void requestCompleted() {\r\n\t\t\t\t\t// inner request, executed when the parent completes, to change to RUNNING\r\n\t\t\t\t\tfinal SleeStateChangeRequest runningRequest = new SleeStateChangeRequest() {\r\n\r\n\t\t\t\t\t\tprivate SleeState oldState;\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic void stateChanged(SleeState oldState) {\r\n\t\t\t\t\t\t\tlogger.info(generateMessageWithLogo(\"started\"));\r\n\t\t\t\t\t\t\tthis.oldState = oldState;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic void requestCompleted() {\r\n\t\t\t\t\t\t\tnotifyStateChange(oldState, getNewState());\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic boolean isBlockingRequest() {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic SleeState getNewState() {\r\n\t\t\t\t\t\t\treturn SleeState.RUNNING;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tsleeContainer.setSleeState(runningRequest);\r\n\t\t\t\t\t} catch (Throwable e) {\r\n\t\t\t\t\t\tlogger.error(\r\n\t\t\t\t\t\t\t\t\"Failed to set container in RUNNING state\", e);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tstop(false);\r\n\t\t\t\t\t\t} catch (Throwable f) {\r\n\t\t\t\t\t\t\tlogger.error(\r\n\t\t\t\t\t\t\t\t\t\"Failed to set container in STOPPED state, after failure to set in RUNNING state\",\r\n\t\t\t\t\t\t\t\t\te);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic boolean isBlockingRequest() {\r\n\t\t\t\t\t// should be false, but the tck doesn't like it\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic SleeState getNewState() {\r\n\t\t\t\t\treturn SleeState.STARTING;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tsleeContainer.setSleeState(startingRequest);\r\n\r\n\t\t} catch (InvalidStateException ex) {\r\n\t\t\tthrow ex;\r\n\t\t} catch (Exception ex) {\r\n\t\t\tthrow new ManagementException(ex.getMessage(), ex);\r\n\t\t}\r\n\t}", "code_tokens": ["public", "void", "start", "(", ")", "throws", "InvalidStateException", ",", "ManagementException", "{", "try", "{", "// request to change to STARTING\r", "final", "SleeStateChangeRequest", "startingRequest", "=", "new", "SleeStateChangeRequest", "(", ")", "{", "@", "Override", "public", "void", "stateChanged", "(", "SleeState", "oldState", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "generateMessageWithLogo", "(", "\"starting\"", ")", ")", ";", "}", "notifyStateChange", "(", "oldState", ",", "getNewState", "(", ")", ")", ";", "}", "@", "Override", "public", "void", "requestCompleted", "(", ")", "{", "// inner request, executed when the parent completes, to change to RUNNING\r", "final", "SleeStateChangeRequest", "runningRequest", "=", "new", "SleeStateChangeRequest", "(", ")", "{", "private", "SleeState", "oldState", ";", "@", "Override", "public", "void", "stateChanged", "(", "SleeState", "oldState", ")", "{", "logger", ".", "info", "(", "generateMessageWithLogo", "(", "\"started\"", ")", ")", ";", "this", ".", "oldState", "=", "oldState", ";", "}", "@", "Override", "public", "void", "requestCompleted", "(", ")", "{", "notifyStateChange", "(", "oldState", ",", "getNewState", "(", ")", ")", ";", "}", "@", "Override", "public", "boolean", "isBlockingRequest", "(", ")", "{", "return", "true", ";", "}", "@", "Override", "public", "SleeState", "getNewState", "(", ")", "{", "return", "SleeState", ".", "RUNNING", ";", "}", "}", ";", "try", "{", "sleeContainer", ".", "setSleeState", "(", "runningRequest", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "\"Failed to set container in RUNNING state\"", ",", "e", ")", ";", "try", "{", "stop", "(", "false", ")", ";", "}", "catch", "(", "Throwable", "f", ")", "{", "logger", ".", "error", "(", "\"Failed to set container in STOPPED state, after failure to set in RUNNING state\"", ",", "e", ")", ";", "}", "}", "}", "@", "Override", "public", "boolean", "isBlockingRequest", "(", ")", "{", "// should be false, but the tck doesn't like it\r", "return", "true", ";", "}", "@", "Override", "public", "SleeState", "getNewState", "(", ")", "{", "return", "SleeState", ".", "STARTING", ";", "}", "}", ";", "sleeContainer", ".", "setSleeState", "(", "startingRequest", ")", ";", "}", "catch", "(", "InvalidStateException", "ex", ")", "{", "throw", "ex", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "throw", "new", "ManagementException", "(", "ex", ".", "getMessage", "(", ")", ",", "ex", ")", ";", "}", "}"], "docstring": "Start the SLEE container\n\n@see javax.slee.management.SleeManagementMBean#start()", "docstring_tokens": ["Start", "the", "SLEE", "container"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/management/jmx/SleeManagementMBeanImpl.java#L133-L208", "partition": "test", "index": 7138, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/security/Utility.java", "func_name": "Utility.switchSafelyClassLoader", "original_string": "public static ClassLoader switchSafelyClassLoader(final ClassLoader cl,final ProfileObject po)\n\t{\n\t\tClassLoader _cl = null;\n\t\tif(System.getSecurityManager()!=null)\n\t\t{\n\t\t\t_cl =\t(ClassLoader) AccessController.doPrivileged(new PrivilegedAction(){\n\n\t\t\t\tpublic Object run() {\n\t\t\t\t\t\n\t\t\t\t\treturn _switchSafelyClassLoader(cl,po);\n\t\t\t\t}});\n\t\t}else\n\t\t{\n\t\t\t_cl = _switchSafelyClassLoader(cl, po);\n\t\t}\n\t\t\n\t\treturn _cl;\n\t\t\n\t}", "language": "java", "code": "public static ClassLoader switchSafelyClassLoader(final ClassLoader cl,final ProfileObject po)\n\t{\n\t\tClassLoader _cl = null;\n\t\tif(System.getSecurityManager()!=null)\n\t\t{\n\t\t\t_cl =\t(ClassLoader) AccessController.doPrivileged(new PrivilegedAction(){\n\n\t\t\t\tpublic Object run() {\n\t\t\t\t\t\n\t\t\t\t\treturn _switchSafelyClassLoader(cl,po);\n\t\t\t\t}});\n\t\t}else\n\t\t{\n\t\t\t_cl = _switchSafelyClassLoader(cl, po);\n\t\t}\n\t\t\n\t\treturn _cl;\n\t\t\n\t}", "code_tokens": ["public", "static", "ClassLoader", "switchSafelyClassLoader", "(", "final", "ClassLoader", "cl", ",", "final", "ProfileObject", "po", ")", "{", "ClassLoader", "_cl", "=", "null", ";", "if", "(", "System", ".", "getSecurityManager", "(", ")", "!=", "null", ")", "{", "_cl", "=", "(", "ClassLoader", ")", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "(", ")", "{", "public", "Object", "run", "(", ")", "{", "return", "_switchSafelyClassLoader", "(", "cl", ",", "po", ")", ";", "}", "}", ")", ";", "}", "else", "{", "_cl", "=", "_switchSafelyClassLoader", "(", "cl", ",", "po", ")", ";", "}", "return", "_cl", ";", "}"], "docstring": "This method depending if SecurityManger is present switches class loader using priviledged action,\nthis is requried as some action may be initiated by unsecure domains.\n@param cl\n@param po\n@return", "docstring_tokens": ["This", "method", "depending", "if", "SecurityManger", "is", "present", "switches", "class", "loader", "using", "priviledged", "action", "this", "is", "requried", "as", "some", "action", "may", "be", "initiated", "by", "unsecure", "domains", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/security/Utility.java#L129-L147", "partition": "test", "index": 7139, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java", "func_name": "DeployableUnit.hasDependenciesSatisfied", "original_string": "public boolean hasDependenciesSatisfied(boolean showMissing) {\r\n    // First of all check if it is self-sufficient\r\n    if (isSelfSufficient())\r\n      return true;\r\n\r\n    // If not self-sufficient, get the remaining dependencies\r\n    Collection<String> externalDependencies = getExternalDependencies();\r\n\r\n    // Remove those that are already installed...\r\n    externalDependencies.removeAll(sleeContainerDeployer.getDeploymentManager().getDeployedComponents());\r\n\r\n    // Some remaining?\r\n    if (!externalDependencies.isEmpty()) {\r\n      if (showMissing) {\r\n        // List them to the user...\r\n        String missingDepList = \"\";\r\n\r\n        for (String missingDep : externalDependencies)\r\n          missingDepList += \"\\r\\n +-- \" + missingDep;\r\n\r\n        logger.info(\"Missing dependencies for \" + this.diShortName\r\n            + \":\" + missingDepList);\r\n      }\r\n\r\n      // Return dependencies not satified.\r\n      return false;\r\n    }\r\n\r\n    // OK, dependencies satisfied!\r\n    return true;\r\n  }", "language": "java", "code": "public boolean hasDependenciesSatisfied(boolean showMissing) {\r\n    // First of all check if it is self-sufficient\r\n    if (isSelfSufficient())\r\n      return true;\r\n\r\n    // If not self-sufficient, get the remaining dependencies\r\n    Collection<String> externalDependencies = getExternalDependencies();\r\n\r\n    // Remove those that are already installed...\r\n    externalDependencies.removeAll(sleeContainerDeployer.getDeploymentManager().getDeployedComponents());\r\n\r\n    // Some remaining?\r\n    if (!externalDependencies.isEmpty()) {\r\n      if (showMissing) {\r\n        // List them to the user...\r\n        String missingDepList = \"\";\r\n\r\n        for (String missingDep : externalDependencies)\r\n          missingDepList += \"\\r\\n +-- \" + missingDep;\r\n\r\n        logger.info(\"Missing dependencies for \" + this.diShortName\r\n            + \":\" + missingDepList);\r\n      }\r\n\r\n      // Return dependencies not satified.\r\n      return false;\r\n    }\r\n\r\n    // OK, dependencies satisfied!\r\n    return true;\r\n  }", "code_tokens": ["public", "boolean", "hasDependenciesSatisfied", "(", "boolean", "showMissing", ")", "{", "// First of all check if it is self-sufficient\r", "if", "(", "isSelfSufficient", "(", ")", ")", "return", "true", ";", "// If not self-sufficient, get the remaining dependencies\r", "Collection", "<", "String", ">", "externalDependencies", "=", "getExternalDependencies", "(", ")", ";", "// Remove those that are already installed...\r", "externalDependencies", ".", "removeAll", "(", "sleeContainerDeployer", ".", "getDeploymentManager", "(", ")", ".", "getDeployedComponents", "(", ")", ")", ";", "// Some remaining?\r", "if", "(", "!", "externalDependencies", ".", "isEmpty", "(", ")", ")", "{", "if", "(", "showMissing", ")", "{", "// List them to the user...\r", "String", "missingDepList", "=", "\"\"", ";", "for", "(", "String", "missingDep", ":", "externalDependencies", ")", "missingDepList", "+=", "\"", "\\", "r", "\\", "n", "+", "--", "\"", "+", "missingDep", ";", "logger", ".", "info", "(", "\"Missing dependencies for \"", "+", "this", ".", "diShortName", "+", "\":\"", "+", "missingDepList", ")", ";", "}", "// Return dependencies not satified.\r", "return", "false", ";", "}", "// OK, dependencies satisfied!\r", "return", "true", ";", "}"], "docstring": "Method for checking if the DU has all the dependencies needed to be deployed.\n@param showMissing param to set whether to show or not missing dependencies.\n@return true if all the dependencies are satisfied.", "docstring_tokens": ["Method", "for", "checking", "if", "the", "DU", "has", "all", "the", "dependencies", "needed", "to", "be", "deployed", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeployableUnit.java#L177-L207", "partition": "test", "index": 7087, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java", "func_name": "ConcreteSbbGenerator.createDefaultConstructor", "original_string": "protected void createDefaultConstructor() throws DeploymentException {\n\n\t\tCtConstructor defaultConstructor = new CtConstructor(null,\n\t\t\t\tsbbConcreteClass);\n\t\t// We need a \"do nothing\" constructor because the\n\t\t// convergence name creation method may need to actually\n\t\t// create the object instance to run the method that\n\t\t// creates the convergence name.\n\n\t\tString constructorBody = \"{ }\";\n\n\t\ttry {\n\t\t\tdefaultConstructor.setBody(constructorBody);\n\t\t\tsbbConcreteClass.addConstructor(defaultConstructor);\n\t\t\tlogger.trace(\"DefaultConstructor created\");\n\t\t} catch (CannotCompileException e) {\n\t\t\tthrow new DeploymentException(e.getMessage(), e);\n\t\t}\n\t}", "language": "java", "code": "protected void createDefaultConstructor() throws DeploymentException {\n\n\t\tCtConstructor defaultConstructor = new CtConstructor(null,\n\t\t\t\tsbbConcreteClass);\n\t\t// We need a \"do nothing\" constructor because the\n\t\t// convergence name creation method may need to actually\n\t\t// create the object instance to run the method that\n\t\t// creates the convergence name.\n\n\t\tString constructorBody = \"{ }\";\n\n\t\ttry {\n\t\t\tdefaultConstructor.setBody(constructorBody);\n\t\t\tsbbConcreteClass.addConstructor(defaultConstructor);\n\t\t\tlogger.trace(\"DefaultConstructor created\");\n\t\t} catch (CannotCompileException e) {\n\t\t\tthrow new DeploymentException(e.getMessage(), e);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "createDefaultConstructor", "(", ")", "throws", "DeploymentException", "{", "CtConstructor", "defaultConstructor", "=", "new", "CtConstructor", "(", "null", ",", "sbbConcreteClass", ")", ";", "// We need a \"do nothing\" constructor because the", "// convergence name creation method may need to actually", "// create the object instance to run the method that", "// creates the convergence name.", "String", "constructorBody", "=", "\"{ }\"", ";", "try", "{", "defaultConstructor", ".", "setBody", "(", "constructorBody", ")", ";", "sbbConcreteClass", ".", "addConstructor", "(", "defaultConstructor", ")", ";", "logger", ".", "trace", "(", "\"DefaultConstructor created\"", ")", ";", "}", "catch", "(", "CannotCompileException", "e", ")", "{", "throw", "new", "DeploymentException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Create a default constructor on the Sbb Concrete Class\n\n@throws DeploymentException", "docstring_tokens": ["Create", "a", "default", "constructor", "on", "the", "Sbb", "Concrete", "Class"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/deployment/ConcreteSbbGenerator.java#L583-L601", "partition": "test", "index": 7102, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointImpl.java", "func_name": "SleeEndpointImpl._startActivity", "original_string": "ActivityContextHandle _startActivity(ActivityHandle handle,\n\t\t\tint activityFlags, final SleeTransaction barrierTx) {\n\n\t\tActivityContext ac = null;\n\t\tif (raEntity.getHandleReferenceFactory() != null\n\t\t\t\t&& !ActivityFlags.hasSleeMayMarshal(activityFlags)) {\n\t\t\tfinal ActivityHandleReference reference = raEntity\n\t\t\t\t\t.getHandleReferenceFactory().createActivityHandleReference(\n\t\t\t\t\t\t\thandle);\n\t\t\ttry {\n\t\t\t\t// create activity context with ref instead\n\t\t\t\tac = acFactory.createActivityContext(\n\t\t\t\t\t\tnew ResourceAdaptorActivityContextHandleImpl(raEntity,\n\t\t\t\t\t\t\t\treference), activityFlags);\t\t\t\t\n\t\t\t} catch (ActivityAlreadyExistsException e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\traEntity.getHandleReferenceFactory()\n\t\t\t\t\t\t.removeActivityHandleReference(reference);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t} else {\n\t\t\t// create activity context\n\t\t\tac = acFactory.createActivityContext(\n\t\t\t\t\tnew ResourceAdaptorActivityContextHandleImpl(raEntity,\n\t\t\t\t\t\t\thandle), activityFlags);\t\t\t\n\t\t}\n\t\t// suspend activity if needed\n\t\tif (barrierTx != null && ac != null) {\n\t\t\tfinal ActivityEventQueueManager aeqm = ac.getLocalActivityContext().getEventQueueManager();\n\t\t\taeqm.createBarrier(barrierTx);\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\taeqm.removeBarrier(barrierTx);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tfinal TransactionContext tc = barrierTx.getTransactionContext();\n\t\t\ttc.getAfterCommitActions().add(action);\n\t\t\ttc.getAfterRollbackActions().add(action);\n\t\t}\n\t\treturn ac.getActivityContextHandle();\n\t}", "language": "java", "code": "ActivityContextHandle _startActivity(ActivityHandle handle,\n\t\t\tint activityFlags, final SleeTransaction barrierTx) {\n\n\t\tActivityContext ac = null;\n\t\tif (raEntity.getHandleReferenceFactory() != null\n\t\t\t\t&& !ActivityFlags.hasSleeMayMarshal(activityFlags)) {\n\t\t\tfinal ActivityHandleReference reference = raEntity\n\t\t\t\t\t.getHandleReferenceFactory().createActivityHandleReference(\n\t\t\t\t\t\t\thandle);\n\t\t\ttry {\n\t\t\t\t// create activity context with ref instead\n\t\t\t\tac = acFactory.createActivityContext(\n\t\t\t\t\t\tnew ResourceAdaptorActivityContextHandleImpl(raEntity,\n\t\t\t\t\t\t\t\treference), activityFlags);\t\t\t\t\n\t\t\t} catch (ActivityAlreadyExistsException e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\traEntity.getHandleReferenceFactory()\n\t\t\t\t\t\t.removeActivityHandleReference(reference);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t} else {\n\t\t\t// create activity context\n\t\t\tac = acFactory.createActivityContext(\n\t\t\t\t\tnew ResourceAdaptorActivityContextHandleImpl(raEntity,\n\t\t\t\t\t\t\thandle), activityFlags);\t\t\t\n\t\t}\n\t\t// suspend activity if needed\n\t\tif (barrierTx != null && ac != null) {\n\t\t\tfinal ActivityEventQueueManager aeqm = ac.getLocalActivityContext().getEventQueueManager();\n\t\t\taeqm.createBarrier(barrierTx);\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\taeqm.removeBarrier(barrierTx);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tfinal TransactionContext tc = barrierTx.getTransactionContext();\n\t\t\ttc.getAfterCommitActions().add(action);\n\t\t\ttc.getAfterRollbackActions().add(action);\n\t\t}\n\t\treturn ac.getActivityContextHandle();\n\t}", "code_tokens": ["ActivityContextHandle", "_startActivity", "(", "ActivityHandle", "handle", ",", "int", "activityFlags", ",", "final", "SleeTransaction", "barrierTx", ")", "{", "ActivityContext", "ac", "=", "null", ";", "if", "(", "raEntity", ".", "getHandleReferenceFactory", "(", ")", "!=", "null", "&&", "!", "ActivityFlags", ".", "hasSleeMayMarshal", "(", "activityFlags", ")", ")", "{", "final", "ActivityHandleReference", "reference", "=", "raEntity", ".", "getHandleReferenceFactory", "(", ")", ".", "createActivityHandleReference", "(", "handle", ")", ";", "try", "{", "// create activity context with ref instead", "ac", "=", "acFactory", ".", "createActivityContext", "(", "new", "ResourceAdaptorActivityContextHandleImpl", "(", "raEntity", ",", "reference", ")", ",", "activityFlags", ")", ";", "}", "catch", "(", "ActivityAlreadyExistsException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "RuntimeException", "e", ")", "{", "raEntity", ".", "getHandleReferenceFactory", "(", ")", ".", "removeActivityHandleReference", "(", "reference", ")", ";", "throw", "e", ";", "}", "}", "else", "{", "// create activity context", "ac", "=", "acFactory", ".", "createActivityContext", "(", "new", "ResourceAdaptorActivityContextHandleImpl", "(", "raEntity", ",", "handle", ")", ",", "activityFlags", ")", ";", "}", "// suspend activity if needed", "if", "(", "barrierTx", "!=", "null", "&&", "ac", "!=", "null", ")", "{", "final", "ActivityEventQueueManager", "aeqm", "=", "ac", ".", "getLocalActivityContext", "(", ")", ".", "getEventQueueManager", "(", ")", ";", "aeqm", ".", "createBarrier", "(", "barrierTx", ")", ";", "TransactionalAction", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "aeqm", ".", "removeBarrier", "(", "barrierTx", ")", ";", "}", "}", ";", "final", "TransactionContext", "tc", "=", "barrierTx", ".", "getTransactionContext", "(", ")", ";", "tc", ".", "getAfterCommitActions", "(", ")", ".", "add", "(", "action", ")", ";", "tc", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "action", ")", ";", "}", "return", "ac", ".", "getActivityContextHandle", "(", ")", ";", "}"], "docstring": "Start activity logic, independent of transaction management.\n@param handle\n@param activityFlags\n@param barrierTx\n@return", "docstring_tokens": ["Start", "activity", "logic", "independent", "of", "transaction", "management", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointImpl.java#L289-L330", "partition": "test", "index": 7054, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.scheduleAllActivitiesEnd", "original_string": "private void scheduleAllActivitiesEnd() throws TransactionRequiredLocalException {\r\n\r\n\t\t// schedule the end of all activities if the node is the single member of the cluster\r\n\t\tboolean skipActivityEnding = !sleeContainer.getCluster().isSingleMember();\r\n\t\t\r\n\t\tif (!skipActivityEnding && hasActivities()) {\r\n\t\t\tlogger.info(\"RA entity \"+name+\" activities end scheduled.\");\r\n\t\t\ttimerTask = new EndAllActivitiesRAEntityTimerTask(this,sleeContainer);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tallActivitiesEnded();\r\n\t\t}\r\n\t}", "language": "java", "code": "private void scheduleAllActivitiesEnd() throws TransactionRequiredLocalException {\r\n\r\n\t\t// schedule the end of all activities if the node is the single member of the cluster\r\n\t\tboolean skipActivityEnding = !sleeContainer.getCluster().isSingleMember();\r\n\t\t\r\n\t\tif (!skipActivityEnding && hasActivities()) {\r\n\t\t\tlogger.info(\"RA entity \"+name+\" activities end scheduled.\");\r\n\t\t\ttimerTask = new EndAllActivitiesRAEntityTimerTask(this,sleeContainer);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tallActivitiesEnded();\r\n\t\t}\r\n\t}", "code_tokens": ["private", "void", "scheduleAllActivitiesEnd", "(", ")", "throws", "TransactionRequiredLocalException", "{", "// schedule the end of all activities if the node is the single member of the cluster\r", "boolean", "skipActivityEnding", "=", "!", "sleeContainer", ".", "getCluster", "(", ")", ".", "isSingleMember", "(", ")", ";", "if", "(", "!", "skipActivityEnding", "&&", "hasActivities", "(", ")", ")", "{", "logger", ".", "info", "(", "\"RA entity \"", "+", "name", "+", "\" activities end scheduled.\"", ")", ";", "timerTask", "=", "new", "EndAllActivitiesRAEntityTimerTask", "(", "this", ",", "sleeContainer", ")", ";", "}", "else", "{", "allActivitiesEnded", "(", ")", ";", "}", "}"], "docstring": "schedules the ending of all the entity activities, this is needed on ra\nentity deactivation or slee container stop, once the process ends it will\ninvoke allActivitiesEnded to complete those processes\n@throws TransactionRequiredLocalException", "docstring_tokens": ["schedules", "the", "ending", "of", "all", "the", "entity", "activities", "this", "is", "needed", "on", "ra", "entity", "deactivation", "or", "slee", "container", "stop", "once", "the", "process", "ends", "it", "will", "invoke", "allActivitiesEnded", "to", "complete", "those", "processes"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L428-L440", "partition": "test", "index": 7005, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.remove", "original_string": "public void remove() throws InvalidStateException {\r\n\t\tif (!this.state.isInactive()) {\r\n\t\t\tthrow new InvalidStateException(\"entity \" + name + \" is in state: \"\r\n\t\t\t\t\t\t+ this.state);\r\n\t\t}\r\n\t\tobject.raUnconfigure();\r\n\t\tif (object.isFaultTolerant()) {\r\n\t\t\tobject.unsetFaultTolerantResourceAdaptorContext();\r\n\t\t\tftResourceAdaptorContext.shutdown();\r\n\t\t}\r\n\t\tobject.unsetResourceAdaptorContext();\r\n\t\tthis.sleeContainer.getTraceManagement()\r\n\t\t\t\t.deregisterNotificationSource(this.getNotificationSource());\r\n\t\tstate = null;\r\n\t}", "language": "java", "code": "public void remove() throws InvalidStateException {\r\n\t\tif (!this.state.isInactive()) {\r\n\t\t\tthrow new InvalidStateException(\"entity \" + name + \" is in state: \"\r\n\t\t\t\t\t\t+ this.state);\r\n\t\t}\r\n\t\tobject.raUnconfigure();\r\n\t\tif (object.isFaultTolerant()) {\r\n\t\t\tobject.unsetFaultTolerantResourceAdaptorContext();\r\n\t\t\tftResourceAdaptorContext.shutdown();\r\n\t\t}\r\n\t\tobject.unsetResourceAdaptorContext();\r\n\t\tthis.sleeContainer.getTraceManagement()\r\n\t\t\t\t.deregisterNotificationSource(this.getNotificationSource());\r\n\t\tstate = null;\r\n\t}", "code_tokens": ["public", "void", "remove", "(", ")", "throws", "InvalidStateException", "{", "if", "(", "!", "this", ".", "state", ".", "isInactive", "(", ")", ")", "{", "throw", "new", "InvalidStateException", "(", "\"entity \"", "+", "name", "+", "\" is in state: \"", "+", "this", ".", "state", ")", ";", "}", "object", ".", "raUnconfigure", "(", ")", ";", "if", "(", "object", ".", "isFaultTolerant", "(", ")", ")", "{", "object", ".", "unsetFaultTolerantResourceAdaptorContext", "(", ")", ";", "ftResourceAdaptorContext", ".", "shutdown", "(", ")", ";", "}", "object", ".", "unsetResourceAdaptorContext", "(", ")", ";", "this", ".", "sleeContainer", ".", "getTraceManagement", "(", ")", ".", "deregisterNotificationSource", "(", "this", ".", "getNotificationSource", "(", ")", ")", ";", "state", "=", "null", ";", "}"], "docstring": "Removes the entity, it will unconfigure and unset the ra context, the\nentity object can not be reused\n\n@throws InvalidStateException", "docstring_tokens": ["Removes", "the", "entity", "it", "will", "unconfigure", "and", "unset", "the", "ra", "context", "the", "entity", "object", "can", "not", "be", "reused"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L487-L501", "partition": "test", "index": 7006, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java", "func_name": "ActivityContextNamingFacilityCacheData.bindName", "original_string": "public void bindName(Object ach, String name)\n\t\t\tthrows NameAlreadyBoundException {\n\t\tfinal Node node = getNode();\n\t\tif (node.hasChild(name)) {\n\t\t\tthrow new NameAlreadyBoundException(\"name already bound\");\n\t\t} else {\n\t\t\tnode.addChild(Fqn.fromElements(name)).put(CACHE_NODE_MAP_KEY, ach);\n\t\t}\n\t}", "language": "java", "code": "public void bindName(Object ach, String name)\n\t\t\tthrows NameAlreadyBoundException {\n\t\tfinal Node node = getNode();\n\t\tif (node.hasChild(name)) {\n\t\t\tthrow new NameAlreadyBoundException(\"name already bound\");\n\t\t} else {\n\t\t\tnode.addChild(Fqn.fromElements(name)).put(CACHE_NODE_MAP_KEY, ach);\n\t\t}\n\t}", "code_tokens": ["public", "void", "bindName", "(", "Object", "ach", ",", "String", "name", ")", "throws", "NameAlreadyBoundException", "{", "final", "Node", "node", "=", "getNode", "(", ")", ";", "if", "(", "node", ".", "hasChild", "(", "name", ")", ")", "{", "throw", "new", "NameAlreadyBoundException", "(", "\"name already bound\"", ")", ";", "}", "else", "{", "node", ".", "addChild", "(", "Fqn", ".", "fromElements", "(", "name", ")", ")", ".", "put", "(", "CACHE_NODE_MAP_KEY", ",", "ach", ")", ";", "}", "}"], "docstring": "Binds the specified aci name with the specified activity context handle\n@param ach\n@param name\n@throws NameAlreadyBoundException", "docstring_tokens": ["Binds", "the", "specified", "aci", "name", "with", "the", "specified", "activity", "context", "handle"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java#L68-L76", "partition": "test", "index": 6960, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.deactivate", "original_string": "public void deactivate() throws InvalidStateException, TransactionRequiredLocalException {\r\n\t\tif (!this.state.isActive()) {\r\n\t\t\tthrow new InvalidStateException(\"entity \" + name + \" is in state: \"\r\n\t\t\t\t\t+ this.state);\r\n\t\t}\r\n\t\tthis.state = ResourceAdaptorEntityState.STOPPING;\r\n\t\tif (object.getState() == ResourceAdaptorObjectState.ACTIVE) {\r\n\t\t\tobject.raStopping();\r\n\t\t}\r\n\t\t// tck requires that the method returns with stopping state so do\r\n\t\t// all deactivation logic half a sec later\r\n\t\tTimerTask t = new TimerTask() {\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcancel();\r\n\t\t\t\t\tif (state == ResourceAdaptorEntityState.STOPPING) {\r\n\t\t\t\t\t\tif (object.getState() == ResourceAdaptorObjectState.STOPPING) {\t\r\n\t\t\t\t\t\t\tscheduleAllActivitiesEnd();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tallActivitiesEnded();\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (Throwable e) {\r\n\t\t\t\t\tlogger.error(e.getMessage(),e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tresourceAdaptorContext.getTimer().schedule(t,500);\r\n\t}", "language": "java", "code": "public void deactivate() throws InvalidStateException, TransactionRequiredLocalException {\r\n\t\tif (!this.state.isActive()) {\r\n\t\t\tthrow new InvalidStateException(\"entity \" + name + \" is in state: \"\r\n\t\t\t\t\t+ this.state);\r\n\t\t}\r\n\t\tthis.state = ResourceAdaptorEntityState.STOPPING;\r\n\t\tif (object.getState() == ResourceAdaptorObjectState.ACTIVE) {\r\n\t\t\tobject.raStopping();\r\n\t\t}\r\n\t\t// tck requires that the method returns with stopping state so do\r\n\t\t// all deactivation logic half a sec later\r\n\t\tTimerTask t = new TimerTask() {\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcancel();\r\n\t\t\t\t\tif (state == ResourceAdaptorEntityState.STOPPING) {\r\n\t\t\t\t\t\tif (object.getState() == ResourceAdaptorObjectState.STOPPING) {\t\r\n\t\t\t\t\t\t\tscheduleAllActivitiesEnd();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tallActivitiesEnded();\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (Throwable e) {\r\n\t\t\t\t\tlogger.error(e.getMessage(),e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tresourceAdaptorContext.getTimer().schedule(t,500);\r\n\t}", "code_tokens": ["public", "void", "deactivate", "(", ")", "throws", "InvalidStateException", ",", "TransactionRequiredLocalException", "{", "if", "(", "!", "this", ".", "state", ".", "isActive", "(", ")", ")", "{", "throw", "new", "InvalidStateException", "(", "\"entity \"", "+", "name", "+", "\" is in state: \"", "+", "this", ".", "state", ")", ";", "}", "this", ".", "state", "=", "ResourceAdaptorEntityState", ".", "STOPPING", ";", "if", "(", "object", ".", "getState", "(", ")", "==", "ResourceAdaptorObjectState", ".", "ACTIVE", ")", "{", "object", ".", "raStopping", "(", ")", ";", "}", "// tck requires that the method returns with stopping state so do\r", "// all deactivation logic half a sec later\r", "TimerTask", "t", "=", "new", "TimerTask", "(", ")", "{", "@", "Override", "public", "void", "run", "(", ")", "{", "try", "{", "cancel", "(", ")", ";", "if", "(", "state", "==", "ResourceAdaptorEntityState", ".", "STOPPING", ")", "{", "if", "(", "object", ".", "getState", "(", ")", "==", "ResourceAdaptorObjectState", ".", "STOPPING", ")", "{", "scheduleAllActivitiesEnd", "(", ")", ";", "}", "else", "{", "allActivitiesEnded", "(", ")", ";", "}", "}", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}", ";", "resourceAdaptorContext", ".", "getTimer", "(", ")", ".", "schedule", "(", "t", ",", "500", ")", ";", "}"], "docstring": "Deactivates the ra entity\n\n@throws InvalidStateException\nif the entity is not in ACTIVE state\n@throws TransactionRequiredLocalException", "docstring_tokens": ["Deactivates", "the", "ra", "entity"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L389-L420", "partition": "test", "index": 7004, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.activate", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n\tpublic void activate() throws InvalidStateException {\r\n\t\tif (!this.state.isInactive()) {\r\n\t\t\tthrow new InvalidStateException(\"entity \" + name + \" is in state: \"\r\n\t\t\t\t\t+ this.state);\r\n\t\t}\r\n\t\tthis.state = ResourceAdaptorEntityState.ACTIVE;\r\n\t\t// if slee is running then activate ra object\r\n\t\tif (sleeContainer.getSleeState() == SleeState.RUNNING) {\r\n\t\t\tif (setFTContext) {\r\n\t\t\t\tsetFTContext = false;\r\n\t\t\t\tif (object.isFaultTolerant()) {\r\n\t\t\t\t\t// set fault tolerant context, it is a ft ra\r\n\t\t\t\t\ttry {\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.ftResourceAdaptorContext = new FaultTolerantResourceAdaptorContextImpl(name,sleeContainer,(FaultTolerantResourceAdaptor) object.getResourceAdaptorObject());\r\n\t\t\t\t\t\tobject.setFaultTolerantResourceAdaptorContext(ftResourceAdaptorContext);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Throwable t) {\r\n\t\t\t\t\t\tlogger.error(\"Got exception invoking setFaultTolerantResourceAdaptorContext(...) for entity \"+name, t);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tobject.raActive();\r\n\t\t\t}\r\n\t\t\tcatch (Throwable t) {\r\n\t\t\t\tlogger.error(\"Got exception invoking raActive() for entity \"+name, t);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n\tpublic void activate() throws InvalidStateException {\r\n\t\tif (!this.state.isInactive()) {\r\n\t\t\tthrow new InvalidStateException(\"entity \" + name + \" is in state: \"\r\n\t\t\t\t\t+ this.state);\r\n\t\t}\r\n\t\tthis.state = ResourceAdaptorEntityState.ACTIVE;\r\n\t\t// if slee is running then activate ra object\r\n\t\tif (sleeContainer.getSleeState() == SleeState.RUNNING) {\r\n\t\t\tif (setFTContext) {\r\n\t\t\t\tsetFTContext = false;\r\n\t\t\t\tif (object.isFaultTolerant()) {\r\n\t\t\t\t\t// set fault tolerant context, it is a ft ra\r\n\t\t\t\t\ttry {\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.ftResourceAdaptorContext = new FaultTolerantResourceAdaptorContextImpl(name,sleeContainer,(FaultTolerantResourceAdaptor) object.getResourceAdaptorObject());\r\n\t\t\t\t\t\tobject.setFaultTolerantResourceAdaptorContext(ftResourceAdaptorContext);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Throwable t) {\r\n\t\t\t\t\t\tlogger.error(\"Got exception invoking setFaultTolerantResourceAdaptorContext(...) for entity \"+name, t);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tobject.raActive();\r\n\t\t\t}\r\n\t\t\tcatch (Throwable t) {\r\n\t\t\t\tlogger.error(\"Got exception invoking raActive() for entity \"+name, t);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "public", "void", "activate", "(", ")", "throws", "InvalidStateException", "{", "if", "(", "!", "this", ".", "state", ".", "isInactive", "(", ")", ")", "{", "throw", "new", "InvalidStateException", "(", "\"entity \"", "+", "name", "+", "\" is in state: \"", "+", "this", ".", "state", ")", ";", "}", "this", ".", "state", "=", "ResourceAdaptorEntityState", ".", "ACTIVE", ";", "// if slee is running then activate ra object\r", "if", "(", "sleeContainer", ".", "getSleeState", "(", ")", "==", "SleeState", ".", "RUNNING", ")", "{", "if", "(", "setFTContext", ")", "{", "setFTContext", "=", "false", ";", "if", "(", "object", ".", "isFaultTolerant", "(", ")", ")", "{", "// set fault tolerant context, it is a ft ra\r", "try", "{", "this", ".", "ftResourceAdaptorContext", "=", "new", "FaultTolerantResourceAdaptorContextImpl", "(", "name", ",", "sleeContainer", ",", "(", "FaultTolerantResourceAdaptor", ")", "object", ".", "getResourceAdaptorObject", "(", ")", ")", ";", "object", ".", "setFaultTolerantResourceAdaptorContext", "(", "ftResourceAdaptorContext", ")", ";", "}", "catch", "(", "Throwable", "t", ")", "{", "logger", ".", "error", "(", "\"Got exception invoking setFaultTolerantResourceAdaptorContext(...) for entity \"", "+", "name", ",", "t", ")", ";", "}", "}", "}", "try", "{", "object", ".", "raActive", "(", ")", ";", "}", "catch", "(", "Throwable", "t", ")", "{", "logger", ".", "error", "(", "\"Got exception invoking raActive() for entity \"", "+", "name", ",", "t", ")", ";", "}", "}", "}"], "docstring": "Activates the ra entity\n\n@throws InvalidStateException\nif the entity is not in INACTIVE state", "docstring_tokens": ["Activates", "the", "ra", "entity"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L351-L380", "partition": "test", "index": 7003, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.sleeStopping", "original_string": "public void sleeStopping() throws InvalidStateException, TransactionRequiredLocalException {\r\n\t\tif (state != null && state.isActive()) {\r\n\t\t\ttry {\r\n\t\t\t\tobject.raStopping();\r\n\t\t\t}\r\n\t\t\tcatch (Throwable t) {\r\n\t\t\t\tlogger.error(\"Got exception from RA object\",t);\r\n\t\t\t}\r\n\t\t\tscheduleAllActivitiesEnd();\r\n\t\t}\r\n\t}", "language": "java", "code": "public void sleeStopping() throws InvalidStateException, TransactionRequiredLocalException {\r\n\t\tif (state != null && state.isActive()) {\r\n\t\t\ttry {\r\n\t\t\t\tobject.raStopping();\r\n\t\t\t}\r\n\t\t\tcatch (Throwable t) {\r\n\t\t\t\tlogger.error(\"Got exception from RA object\",t);\r\n\t\t\t}\r\n\t\t\tscheduleAllActivitiesEnd();\r\n\t\t}\r\n\t}", "code_tokens": ["public", "void", "sleeStopping", "(", ")", "throws", "InvalidStateException", ",", "TransactionRequiredLocalException", "{", "if", "(", "state", "!=", "null", "&&", "state", ".", "isActive", "(", ")", ")", "{", "try", "{", "object", ".", "raStopping", "(", ")", ";", "}", "catch", "(", "Throwable", "t", ")", "{", "logger", ".", "error", "(", "\"Got exception from RA object\"", ",", "t", ")", ";", "}", "scheduleAllActivitiesEnd", "(", ")", ";", "}", "}"], "docstring": "Signals that the container is in STOPPING state\n@throws TransactionRequiredLocalException", "docstring_tokens": ["Signals", "that", "the", "container", "is", "in", "STOPPING", "state"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L311-L321", "partition": "test", "index": 7002, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.sleeRunning", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n\tpublic void sleeRunning() throws InvalidStateException {\t\t\r\n\t\t// if entity is active then activate the ra object\r\n\t\tif (this.state.isActive()) {\r\n\t\t\tif (setFTContext) {\r\n\t\t\t\tsetFTContext = false;\r\n\t\t\t\tif (object.isFaultTolerant()) {\r\n\t\t\t\t\t// set fault tolerant context, it is a ft ra\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tthis.ftResourceAdaptorContext = new FaultTolerantResourceAdaptorContextImpl(name,sleeContainer,(FaultTolerantResourceAdaptor) object.getResourceAdaptorObject());\r\n\t\t\t\t\t\tobject.setFaultTolerantResourceAdaptorContext(ftResourceAdaptorContext);\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Throwable t) {\r\n\t\t\t\t\t\tlogger.error(\"Got exception invoking setFaultTolerantResourceAdaptorContext(...) for entity \"+name, t);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tobject.raActive();\r\n\t\t\t}\r\n\t\t\tcatch (Throwable t) {\r\n\t\t\t\tlogger.error(\"Got exception invoking raActive() for entity \"+name, t);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n\tpublic void sleeRunning() throws InvalidStateException {\t\t\r\n\t\t// if entity is active then activate the ra object\r\n\t\tif (this.state.isActive()) {\r\n\t\t\tif (setFTContext) {\r\n\t\t\t\tsetFTContext = false;\r\n\t\t\t\tif (object.isFaultTolerant()) {\r\n\t\t\t\t\t// set fault tolerant context, it is a ft ra\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tthis.ftResourceAdaptorContext = new FaultTolerantResourceAdaptorContextImpl(name,sleeContainer,(FaultTolerantResourceAdaptor) object.getResourceAdaptorObject());\r\n\t\t\t\t\t\tobject.setFaultTolerantResourceAdaptorContext(ftResourceAdaptorContext);\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Throwable t) {\r\n\t\t\t\t\t\tlogger.error(\"Got exception invoking setFaultTolerantResourceAdaptorContext(...) for entity \"+name, t);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tobject.raActive();\r\n\t\t\t}\r\n\t\t\tcatch (Throwable t) {\r\n\t\t\t\tlogger.error(\"Got exception invoking raActive() for entity \"+name, t);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "public", "void", "sleeRunning", "(", ")", "throws", "InvalidStateException", "{", "// if entity is active then activate the ra object\r", "if", "(", "this", ".", "state", ".", "isActive", "(", ")", ")", "{", "if", "(", "setFTContext", ")", "{", "setFTContext", "=", "false", ";", "if", "(", "object", ".", "isFaultTolerant", "(", ")", ")", "{", "// set fault tolerant context, it is a ft ra\r", "try", "{", "this", ".", "ftResourceAdaptorContext", "=", "new", "FaultTolerantResourceAdaptorContextImpl", "(", "name", ",", "sleeContainer", ",", "(", "FaultTolerantResourceAdaptor", ")", "object", ".", "getResourceAdaptorObject", "(", ")", ")", ";", "object", ".", "setFaultTolerantResourceAdaptorContext", "(", "ftResourceAdaptorContext", ")", ";", "}", "catch", "(", "Throwable", "t", ")", "{", "logger", ".", "error", "(", "\"Got exception invoking setFaultTolerantResourceAdaptorContext(...) for entity \"", "+", "name", ",", "t", ")", ";", "}", "}", "}", "try", "{", "object", ".", "raActive", "(", ")", ";", "}", "catch", "(", "Throwable", "t", ")", "{", "logger", ".", "error", "(", "\"Got exception invoking raActive() for entity \"", "+", "name", ",", "t", ")", ";", "}", "}", "}"], "docstring": "Signals that the container is in RUNNING state", "docstring_tokens": ["Signals", "that", "the", "container", "is", "in", "RUNNING", "state"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L281-L305", "partition": "test", "index": 7001, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.updateConfigurationProperties", "original_string": "public void updateConfigurationProperties(ConfigProperties properties)\r\n\t\t\tthrows InvalidConfigurationException, InvalidStateException {\r\n\t\tif (!component.getDescriptor().getSupportsActiveReconfiguration()\r\n\t\t\t\t&& (sleeContainer.getSleeState() != SleeState.STOPPED)\r\n\t\t\t\t&& (state == ResourceAdaptorEntityState.ACTIVE || state == ResourceAdaptorEntityState.STOPPING)) {\r\n\t\t\tthrow new InvalidStateException(\r\n\t\t\t\t\t\"the value of the supports-active-reconfiguration attribute of the resource-adaptor-class element in the deployment descriptor of the Resource Adaptor of the resource adaptor entity is False and the resource adaptor entity is in the Active or Stopping state and the SLEE is in the Starting, Running, or Stopping state\");\r\n\t\t} else {\r\n\t\t\tobject.raConfigurationUpdate(properties);\r\n\t\t}\r\n\t}", "language": "java", "code": "public void updateConfigurationProperties(ConfigProperties properties)\r\n\t\t\tthrows InvalidConfigurationException, InvalidStateException {\r\n\t\tif (!component.getDescriptor().getSupportsActiveReconfiguration()\r\n\t\t\t\t&& (sleeContainer.getSleeState() != SleeState.STOPPED)\r\n\t\t\t\t&& (state == ResourceAdaptorEntityState.ACTIVE || state == ResourceAdaptorEntityState.STOPPING)) {\r\n\t\t\tthrow new InvalidStateException(\r\n\t\t\t\t\t\"the value of the supports-active-reconfiguration attribute of the resource-adaptor-class element in the deployment descriptor of the Resource Adaptor of the resource adaptor entity is False and the resource adaptor entity is in the Active or Stopping state and the SLEE is in the Starting, Running, or Stopping state\");\r\n\t\t} else {\r\n\t\t\tobject.raConfigurationUpdate(properties);\r\n\t\t}\r\n\t}", "code_tokens": ["public", "void", "updateConfigurationProperties", "(", "ConfigProperties", "properties", ")", "throws", "InvalidConfigurationException", ",", "InvalidStateException", "{", "if", "(", "!", "component", ".", "getDescriptor", "(", ")", ".", "getSupportsActiveReconfiguration", "(", ")", "&&", "(", "sleeContainer", ".", "getSleeState", "(", ")", "!=", "SleeState", ".", "STOPPED", ")", "&&", "(", "state", "==", "ResourceAdaptorEntityState", ".", "ACTIVE", "||", "state", "==", "ResourceAdaptorEntityState", ".", "STOPPING", ")", ")", "{", "throw", "new", "InvalidStateException", "(", "\"the value of the supports-active-reconfiguration attribute of the resource-adaptor-class element in the deployment descriptor of the Resource Adaptor of the resource adaptor entity is False and the resource adaptor entity is in the Active or Stopping state and the SLEE is in the Starting, Running, or Stopping state\"", ")", ";", "}", "else", "{", "object", ".", "raConfigurationUpdate", "(", "properties", ")", ";", "}", "}"], "docstring": "Updates the ra entity config properties", "docstring_tokens": ["Updates", "the", "ra", "entity", "config", "properties"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L266-L276", "partition": "test", "index": 7000, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java", "func_name": "ConcreteClassGeneratorUtils.copyMethods", "original_string": "public static void copyMethods(CtMethod[] methods, CtClass destination,\r\n\t\t\tCtClass[] exceptions) {\r\n\t\tCtMethod methodCopy = null;\r\n\t\tfor (CtMethod method : methods) {\r\n\t\t\ttry {\r\n\t\t\t\tmethodCopy = new CtMethod(method, destination, null);\r\n\t\t\t\tif (exceptions != null) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tmethodCopy.setExceptionTypes(exceptions);\r\n\t\t\t\t\t} catch (NotFoundException e) {\r\n\t\t\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdestination.addMethod(methodCopy);\r\n\t\t\t} catch (CannotCompileException e) {\r\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "language": "java", "code": "public static void copyMethods(CtMethod[] methods, CtClass destination,\r\n\t\t\tCtClass[] exceptions) {\r\n\t\tCtMethod methodCopy = null;\r\n\t\tfor (CtMethod method : methods) {\r\n\t\t\ttry {\r\n\t\t\t\tmethodCopy = new CtMethod(method, destination, null);\r\n\t\t\t\tif (exceptions != null) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tmethodCopy.setExceptionTypes(exceptions);\r\n\t\t\t\t\t} catch (NotFoundException e) {\r\n\t\t\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdestination.addMethod(methodCopy);\r\n\t\t\t} catch (CannotCompileException e) {\r\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\r\n\t}", "code_tokens": ["public", "static", "void", "copyMethods", "(", "CtMethod", "[", "]", "methods", ",", "CtClass", "destination", ",", "CtClass", "[", "]", "exceptions", ")", "{", "CtMethod", "methodCopy", "=", "null", ";", "for", "(", "CtMethod", "method", ":", "methods", ")", "{", "try", "{", "methodCopy", "=", "new", "CtMethod", "(", "method", ",", "destination", ",", "null", ")", ";", "if", "(", "exceptions", "!=", "null", ")", "{", "try", "{", "methodCopy", ".", "setExceptionTypes", "(", "exceptions", ")", ";", "}", "catch", "(", "NotFoundException", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "destination", ".", "addMethod", "(", "methodCopy", ")", ";", "}", "catch", "(", "CannotCompileException", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}"], "docstring": "Copy methods to a class\n\n@param methods\nthe methods to copy\n@param destination\nthe class to which the methods are copied\n@param exceptions\noptional, defines the set of exceptions the methods can throw", "docstring_tokens": ["Copy", "methods", "to", "a", "class"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java#L509-L527", "partition": "test", "index": 6944, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/SbbEntityFactoryCacheData.java", "func_name": "SbbEntityFactoryCacheData.getSbbEntities", "original_string": "public Set<SbbEntityID> getSbbEntities() {\n\t\tfinal Node node = getNode();\n\t\tif (node == null) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\t\tHashSet<SbbEntityID> result = new HashSet<SbbEntityID>();\n\t\tServiceID serviceID = null;\n\t\tfor (Object obj : node.getChildrenNames()) {\n\t\t\tserviceID = (ServiceID) obj;\n\t\t\tfor (SbbEntityID sbbEntityID : getRootSbbEntityIDs(serviceID)) {\n\t\t\t\tresult.add(sbbEntityID);\n\t\t\t\tcollectSbbEntities(sbbEntityID,result);\n\t\t\t}\n\t\t}\t\t\n\t\treturn result;\n\t}", "language": "java", "code": "public Set<SbbEntityID> getSbbEntities() {\n\t\tfinal Node node = getNode();\n\t\tif (node == null) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\t\tHashSet<SbbEntityID> result = new HashSet<SbbEntityID>();\n\t\tServiceID serviceID = null;\n\t\tfor (Object obj : node.getChildrenNames()) {\n\t\t\tserviceID = (ServiceID) obj;\n\t\t\tfor (SbbEntityID sbbEntityID : getRootSbbEntityIDs(serviceID)) {\n\t\t\t\tresult.add(sbbEntityID);\n\t\t\t\tcollectSbbEntities(sbbEntityID,result);\n\t\t\t}\n\t\t}\t\t\n\t\treturn result;\n\t}", "code_tokens": ["public", "Set", "<", "SbbEntityID", ">", "getSbbEntities", "(", ")", "{", "final", "Node", "node", "=", "getNode", "(", ")", ";", "if", "(", "node", "==", "null", ")", "{", "return", "Collections", ".", "emptySet", "(", ")", ";", "}", "HashSet", "<", "SbbEntityID", ">", "result", "=", "new", "HashSet", "<", "SbbEntityID", ">", "(", ")", ";", "ServiceID", "serviceID", "=", "null", ";", "for", "(", "Object", "obj", ":", "node", ".", "getChildrenNames", "(", ")", ")", "{", "serviceID", "=", "(", "ServiceID", ")", "obj", ";", "for", "(", "SbbEntityID", "sbbEntityID", ":", "getRootSbbEntityIDs", "(", "serviceID", ")", ")", "{", "result", ".", "add", "(", "sbbEntityID", ")", ";", "collectSbbEntities", "(", "sbbEntityID", ",", "result", ")", ";", "}", "}", "return", "result", ";", "}"], "docstring": "Retrieves a set containing sbb entity ids in the factory\ncache data\n\n@return", "docstring_tokens": ["Retrieves", "a", "set", "containing", "sbb", "entity", "ids", "in", "the", "factory", "cache", "data"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/SbbEntityFactoryCacheData.java#L68-L83", "partition": "test", "index": 6995, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/spi/src/main/java/org/mobicents/slee/container/MobicentsLogFilter.java", "func_name": "MobicentsLogFilter.getLogger", "original_string": "private Logger getLogger(LogRecord record) \r\n  {\r\n    String loggerName = record.getLoggerName();\r\n    Logger logger = loggerCache.get(loggerName);\r\n    if (logger == null) \r\n    {\r\n      logger = Logger.getLogger(loggerName);\r\n      loggerCache.put(loggerName, logger);\r\n    }\r\n\r\n    return logger;\r\n  }", "language": "java", "code": "private Logger getLogger(LogRecord record) \r\n  {\r\n    String loggerName = record.getLoggerName();\r\n    Logger logger = loggerCache.get(loggerName);\r\n    if (logger == null) \r\n    {\r\n      logger = Logger.getLogger(loggerName);\r\n      loggerCache.put(loggerName, logger);\r\n    }\r\n\r\n    return logger;\r\n  }", "code_tokens": ["private", "Logger", "getLogger", "(", "LogRecord", "record", ")", "{", "String", "loggerName", "=", "record", ".", "getLoggerName", "(", ")", ";", "Logger", "logger", "=", "loggerCache", ".", "get", "(", "loggerName", ")", ";", "if", "(", "logger", "==", "null", ")", "{", "logger", "=", "Logger", ".", "getLogger", "(", "loggerName", ")", ";", "loggerCache", ".", "put", "(", "loggerName", ",", "logger", ")", ";", "}", "return", "logger", ";", "}"], "docstring": "get the Log4J logger corresponding to the java.util.logger.LogRecord", "docstring_tokens": ["get", "the", "Log4J", "logger", "corresponding", "to", "the", "java", ".", "util", ".", "logger", ".", "LogRecord"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/spi/src/main/java/org/mobicents/slee/container/MobicentsLogFilter.java#L158-L169", "partition": "test", "index": 6993, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/SbbEntityFactoryImpl.java", "func_name": "SbbEntityFactoryImpl.removeSbbEntityWithCurrentClassLoader", "original_string": "private void removeSbbEntityWithCurrentClassLoader(\r\n\t\t\tfinal SbbEntity sbbEntity) {\t\t\r\n\t\t// remove entity\r\n\t\tsbbEntity.remove();\r\n\t\t// remove from tx data\r\n\t\tfinal TransactionContext txContext = sleeContainer.getTransactionManager().getTransactionContext();\r\n\t\tfinal SbbEntityID sbbEntityID = sbbEntity.getSbbEntityId();\r\n\t\ttxContext.getData().remove(sbbEntityID);\t\r\n\t\t// if sbb entity is root add a tx action to ensure lock is removed\r\n\t\tif (sbbEntityID.isRootSbbEntity()) {\r\n\t\t\tTransactionalAction txAction = new TransactionalAction() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void execute() {\r\n\t\t\t\t\tlockFacility.remove(sbbEntityID);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttxContext.getAfterCommitActions().add(txAction);\r\n\t\t}\r\n\t}", "language": "java", "code": "private void removeSbbEntityWithCurrentClassLoader(\r\n\t\t\tfinal SbbEntity sbbEntity) {\t\t\r\n\t\t// remove entity\r\n\t\tsbbEntity.remove();\r\n\t\t// remove from tx data\r\n\t\tfinal TransactionContext txContext = sleeContainer.getTransactionManager().getTransactionContext();\r\n\t\tfinal SbbEntityID sbbEntityID = sbbEntity.getSbbEntityId();\r\n\t\ttxContext.getData().remove(sbbEntityID);\t\r\n\t\t// if sbb entity is root add a tx action to ensure lock is removed\r\n\t\tif (sbbEntityID.isRootSbbEntity()) {\r\n\t\t\tTransactionalAction txAction = new TransactionalAction() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void execute() {\r\n\t\t\t\t\tlockFacility.remove(sbbEntityID);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttxContext.getAfterCommitActions().add(txAction);\r\n\t\t}\r\n\t}", "code_tokens": ["private", "void", "removeSbbEntityWithCurrentClassLoader", "(", "final", "SbbEntity", "sbbEntity", ")", "{", "// remove entity\r", "sbbEntity", ".", "remove", "(", ")", ";", "// remove from tx data\r", "final", "TransactionContext", "txContext", "=", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "getTransactionContext", "(", ")", ";", "final", "SbbEntityID", "sbbEntityID", "=", "sbbEntity", ".", "getSbbEntityId", "(", ")", ";", "txContext", ".", "getData", "(", ")", ".", "remove", "(", "sbbEntityID", ")", ";", "// if sbb entity is root add a tx action to ensure lock is removed\r", "if", "(", "sbbEntityID", ".", "isRootSbbEntity", "(", ")", ")", "{", "TransactionalAction", "txAction", "=", "new", "TransactionalAction", "(", ")", "{", "@", "Override", "public", "void", "execute", "(", ")", "{", "lockFacility", ".", "remove", "(", "sbbEntityID", ")", ";", "}", "}", ";", "txContext", ".", "getAfterCommitActions", "(", ")", ".", "add", "(", "txAction", ")", ";", "}", "}"], "docstring": "Removes the specified sbb entity but without changing to sbb's class\nloader first.\n\n@param sbbEntity\nthe sbb entity to remove", "docstring_tokens": ["Removes", "the", "specified", "sbb", "entity", "but", "without", "changing", "to", "sbb", "s", "class", "loader", "first", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbbentity/SbbEntityFactoryImpl.java#L271-L289", "partition": "test", "index": 6946, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/usage/src/main/java/org/mobicents/slee/container/management/jmx/UsageNotificationManagerMBeanImpl.java", "func_name": "UsageNotificationManagerMBeanImpl.getNotificationsEnabled", "original_string": "public boolean getNotificationsEnabled(String paramName) {\n\t\t\n\t\tBoolean areNotificationsEnabled = paramNames.get(paramName);\n\t\t\n\t\tif(!isSlee11)\n\t\t{\n\t\t\tif (areNotificationsEnabled == null\n\t\t\t\t|| areNotificationsEnabled.booleanValue()) {\n\t\t\t// considering that notifications are enabled, by default, for each\n\t\t\t// param\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}else\n\t\t{\n\t\t\tif (areNotificationsEnabled != null\n\t\t\t\t\t&& areNotificationsEnabled.booleanValue()) {\n\t\t\t\t// considering that notifications are enabled, by default, for each\n\t\t\t\t// param\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public boolean getNotificationsEnabled(String paramName) {\n\t\t\n\t\tBoolean areNotificationsEnabled = paramNames.get(paramName);\n\t\t\n\t\tif(!isSlee11)\n\t\t{\n\t\t\tif (areNotificationsEnabled == null\n\t\t\t\t|| areNotificationsEnabled.booleanValue()) {\n\t\t\t// considering that notifications are enabled, by default, for each\n\t\t\t// param\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}else\n\t\t{\n\t\t\tif (areNotificationsEnabled != null\n\t\t\t\t\t&& areNotificationsEnabled.booleanValue()) {\n\t\t\t\t// considering that notifications are enabled, by default, for each\n\t\t\t\t// param\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "boolean", "getNotificationsEnabled", "(", "String", "paramName", ")", "{", "Boolean", "areNotificationsEnabled", "=", "paramNames", ".", "get", "(", "paramName", ")", ";", "if", "(", "!", "isSlee11", ")", "{", "if", "(", "areNotificationsEnabled", "==", "null", "||", "areNotificationsEnabled", ".", "booleanValue", "(", ")", ")", "{", "// considering that notifications are enabled, by default, for each", "// param", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}", "else", "{", "if", "(", "areNotificationsEnabled", "!=", "null", "&&", "areNotificationsEnabled", ".", "booleanValue", "(", ")", ")", "{", "// considering that notifications are enabled, by default, for each", "// param", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}", "}"], "docstring": "Indicates if notifications are enabled for the specified parameter name\n\n@param paramName\n@return", "docstring_tokens": ["Indicates", "if", "notifications", "are", "enabled", "for", "the", "specified", "parameter", "name"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/usage/src/main/java/org/mobicents/slee/container/management/jmx/UsageNotificationManagerMBeanImpl.java#L88-L113", "partition": "test", "index": 6947, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java", "func_name": "ServiceManagementImpl.getReferencedRAEntityLinksWhichNotExists", "original_string": "public Set<String> getReferencedRAEntityLinksWhichNotExists(\n\t\t\tServiceComponent serviceComponent) {\n\t\tSet<String> result = new HashSet<String>();\n\t\tSet<String> raLinkNames = sleeContainer.getResourceManagement()\n\t\t\t\t.getLinkNamesSet();\n\t\tfor (String raLink : serviceComponent\n\t\t\t\t.getResourceAdaptorEntityLinks(componentRepositoryImpl)) {\n\t\t\tif (!raLinkNames.contains(raLink)) {\n\t\t\t\tresult.add(raLink);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public Set<String> getReferencedRAEntityLinksWhichNotExists(\n\t\t\tServiceComponent serviceComponent) {\n\t\tSet<String> result = new HashSet<String>();\n\t\tSet<String> raLinkNames = sleeContainer.getResourceManagement()\n\t\t\t\t.getLinkNamesSet();\n\t\tfor (String raLink : serviceComponent\n\t\t\t\t.getResourceAdaptorEntityLinks(componentRepositoryImpl)) {\n\t\t\tif (!raLinkNames.contains(raLink)) {\n\t\t\t\tresult.add(raLink);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "Set", "<", "String", ">", "getReferencedRAEntityLinksWhichNotExists", "(", "ServiceComponent", "serviceComponent", ")", "{", "Set", "<", "String", ">", "result", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "Set", "<", "String", ">", "raLinkNames", "=", "sleeContainer", ".", "getResourceManagement", "(", ")", ".", "getLinkNamesSet", "(", ")", ";", "for", "(", "String", "raLink", ":", "serviceComponent", ".", "getResourceAdaptorEntityLinks", "(", "componentRepositoryImpl", ")", ")", "{", "if", "(", "!", "raLinkNames", ".", "contains", "(", "raLink", ")", ")", "{", "result", ".", "add", "(", "raLink", ")", ";", "}", "}", "return", "result", ";", "}"], "docstring": "Retrieves the set of ra entity link names referenced by the service\ncomponen, which do not exist\n\n@param serviceComponent", "docstring_tokens": ["Retrieves", "the", "set", "of", "ra", "entity", "link", "names", "referenced", "by", "the", "service", "componen", "which", "do", "not", "exist"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java#L196-L208", "partition": "test", "index": 6948, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java", "func_name": "ServiceManagementImpl.installService", "original_string": "public void installService(final ServiceComponent serviceComponent)\n\t\t\tthrows Exception {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Installing Service \" + serviceComponent);\n\t\t}\n\n\t\t// creates and registers the service usage mbean\n\t\tfinal ServiceUsageMBean serviceUsageMBean = sleeContainer\n\t\t\t\t.getUsageParametersManagement().newServiceUsageMBean(\n\t\t\t\t\t\tserviceComponent);\n\t\t// add rollback action to remove state created\n\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\ttry {\n\t\t\t\t\tserviceUsageMBean.remove();\n\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tfinal TransactionContext txContext = sleeContainer\n\t\t\t\t.getTransactionManager().getTransactionContext();\n\t\ttxContext.getAfterRollbackActions().add(action);\n\n\t\t// register notification sources for all sbbs\n\t\t//\n\t\tfinal TraceManagement traceMBeanImpl = sleeContainer\n\t\t\t\t.getTraceManagement();\n\t\tfor (final SbbID sbbID : serviceComponent\n\t\t\t\t.getSbbIDs(componentRepositoryImpl)) {\n\n\t\t\t// Tracer must be available for both 1.1 and 1.0 sbb components\n\t\t\t// SbbComponent sbbComponent =\n\t\t\t// componentRepositoryImpl.getComponentByID(sbbID);\n\t\t\t// if(sbbComponent.isSlee11())\n\t\t\t{\n\t\t\t\ttraceMBeanImpl.registerNotificationSource(new SbbNotification(\n\t\t\t\t\t\tserviceComponent.getServiceID(), sbbID));\n\n\t\t\t\t// add rollback action to remove state created\n\t\t\t\taction = new TransactionalAction() {\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\t// remove notification sources for all sbbs\n\t\t\t\t\t\ttraceMBeanImpl\n\t\t\t\t\t\t\t\t.deregisterNotificationSource(new SbbNotification(\n\t\t\t\t\t\t\t\t\t\tserviceComponent.getServiceID(), sbbID));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\ttxContext.getAfterRollbackActions().add(action);\n\t\t\t}\n\n\t\t\t// this might be used not only by 1.1 sbbs...\n\t\t\tNotificationSourceWrapperImpl sbbMNotificationSource = new NotificationSourceWrapperImpl(\n\t\t\t\t\tnew SbbNotification(serviceComponent.getServiceID(), sbbID));\n\t\t\tserviceComponent.getAlarmNotificationSources().putIfAbsent(sbbID,\n\t\t\t\t\tsbbMNotificationSource);\n\t\t}\n\n\t\tsleeContainer.getSbbManagement().serviceInstall(serviceComponent);\n\t}", "language": "java", "code": "public void installService(final ServiceComponent serviceComponent)\n\t\t\tthrows Exception {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Installing Service \" + serviceComponent);\n\t\t}\n\n\t\t// creates and registers the service usage mbean\n\t\tfinal ServiceUsageMBean serviceUsageMBean = sleeContainer\n\t\t\t\t.getUsageParametersManagement().newServiceUsageMBean(\n\t\t\t\t\t\tserviceComponent);\n\t\t// add rollback action to remove state created\n\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\ttry {\n\t\t\t\t\tserviceUsageMBean.remove();\n\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tfinal TransactionContext txContext = sleeContainer\n\t\t\t\t.getTransactionManager().getTransactionContext();\n\t\ttxContext.getAfterRollbackActions().add(action);\n\n\t\t// register notification sources for all sbbs\n\t\t//\n\t\tfinal TraceManagement traceMBeanImpl = sleeContainer\n\t\t\t\t.getTraceManagement();\n\t\tfor (final SbbID sbbID : serviceComponent\n\t\t\t\t.getSbbIDs(componentRepositoryImpl)) {\n\n\t\t\t// Tracer must be available for both 1.1 and 1.0 sbb components\n\t\t\t// SbbComponent sbbComponent =\n\t\t\t// componentRepositoryImpl.getComponentByID(sbbID);\n\t\t\t// if(sbbComponent.isSlee11())\n\t\t\t{\n\t\t\t\ttraceMBeanImpl.registerNotificationSource(new SbbNotification(\n\t\t\t\t\t\tserviceComponent.getServiceID(), sbbID));\n\n\t\t\t\t// add rollback action to remove state created\n\t\t\t\taction = new TransactionalAction() {\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\t// remove notification sources for all sbbs\n\t\t\t\t\t\ttraceMBeanImpl\n\t\t\t\t\t\t\t\t.deregisterNotificationSource(new SbbNotification(\n\t\t\t\t\t\t\t\t\t\tserviceComponent.getServiceID(), sbbID));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\ttxContext.getAfterRollbackActions().add(action);\n\t\t\t}\n\n\t\t\t// this might be used not only by 1.1 sbbs...\n\t\t\tNotificationSourceWrapperImpl sbbMNotificationSource = new NotificationSourceWrapperImpl(\n\t\t\t\t\tnew SbbNotification(serviceComponent.getServiceID(), sbbID));\n\t\t\tserviceComponent.getAlarmNotificationSources().putIfAbsent(sbbID,\n\t\t\t\t\tsbbMNotificationSource);\n\t\t}\n\n\t\tsleeContainer.getSbbManagement().serviceInstall(serviceComponent);\n\t}", "code_tokens": ["public", "void", "installService", "(", "final", "ServiceComponent", "serviceComponent", ")", "throws", "Exception", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Installing Service \"", "+", "serviceComponent", ")", ";", "}", "// creates and registers the service usage mbean", "final", "ServiceUsageMBean", "serviceUsageMBean", "=", "sleeContainer", ".", "getUsageParametersManagement", "(", ")", ".", "newServiceUsageMBean", "(", "serviceComponent", ")", ";", "// add rollback action to remove state created", "TransactionalAction", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "try", "{", "serviceUsageMBean", ".", "remove", "(", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}", ";", "final", "TransactionContext", "txContext", "=", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "getTransactionContext", "(", ")", ";", "txContext", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "action", ")", ";", "// register notification sources for all sbbs", "//", "final", "TraceManagement", "traceMBeanImpl", "=", "sleeContainer", ".", "getTraceManagement", "(", ")", ";", "for", "(", "final", "SbbID", "sbbID", ":", "serviceComponent", ".", "getSbbIDs", "(", "componentRepositoryImpl", ")", ")", "{", "// Tracer must be available for both 1.1 and 1.0 sbb components", "// SbbComponent sbbComponent =", "// componentRepositoryImpl.getComponentByID(sbbID);", "// if(sbbComponent.isSlee11())", "{", "traceMBeanImpl", ".", "registerNotificationSource", "(", "new", "SbbNotification", "(", "serviceComponent", ".", "getServiceID", "(", ")", ",", "sbbID", ")", ")", ";", "// add rollback action to remove state created", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "// remove notification sources for all sbbs", "traceMBeanImpl", ".", "deregisterNotificationSource", "(", "new", "SbbNotification", "(", "serviceComponent", ".", "getServiceID", "(", ")", ",", "sbbID", ")", ")", ";", "}", "}", ";", "txContext", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "action", ")", ";", "}", "// this might be used not only by 1.1 sbbs...", "NotificationSourceWrapperImpl", "sbbMNotificationSource", "=", "new", "NotificationSourceWrapperImpl", "(", "new", "SbbNotification", "(", "serviceComponent", ".", "getServiceID", "(", ")", ",", "sbbID", ")", ")", ";", "serviceComponent", ".", "getAlarmNotificationSources", "(", ")", ".", "putIfAbsent", "(", "sbbID", ",", "sbbMNotificationSource", ")", ";", "}", "sleeContainer", ".", "getSbbManagement", "(", ")", ".", "serviceInstall", "(", "serviceComponent", ")", ";", "}"], "docstring": "Install a service into SLEE\n\n@param serviceComponent\n@throws Exception", "docstring_tokens": ["Install", "a", "service", "into", "SLEE"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java#L639-L699", "partition": "test", "index": 6949, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.getResourceAdaptorInterface", "original_string": "public Object getResourceAdaptorInterface(ResourceAdaptorTypeID raType) {\r\n\t\treturn object.getResourceAdaptorInterface(sleeContainer\r\n\t\t\t\t.getComponentRepository().getComponentByID(raType)\r\n\t\t\t\t.getDescriptor().getResourceAdaptorInterface());\r\n\t}", "language": "java", "code": "public Object getResourceAdaptorInterface(ResourceAdaptorTypeID raType) {\r\n\t\treturn object.getResourceAdaptorInterface(sleeContainer\r\n\t\t\t\t.getComponentRepository().getComponentByID(raType)\r\n\t\t\t\t.getDescriptor().getResourceAdaptorInterface());\r\n\t}", "code_tokens": ["public", "Object", "getResourceAdaptorInterface", "(", "ResourceAdaptorTypeID", "raType", ")", "{", "return", "object", ".", "getResourceAdaptorInterface", "(", "sleeContainer", ".", "getComponentRepository", "(", ")", ".", "getComponentByID", "(", "raType", ")", ".", "getDescriptor", "(", ")", ".", "getResourceAdaptorInterface", "(", ")", ")", ";", "}"], "docstring": "Retrieves the ra interface for this entity and the specified ra type\n\n@param raType\n@return", "docstring_tokens": ["Retrieves", "the", "ra", "interface", "for", "this", "entity", "and", "the", "specified", "ra", "type"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L536-L540", "partition": "test", "index": 7007, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java", "func_name": "ServiceManagementImpl.uninstallService", "original_string": "public void uninstallService(final ServiceComponent serviceComponent)\n\t\t\tthrows SystemException, UnrecognizedServiceException,\n\t\t\tInstanceNotFoundException, MBeanRegistrationException,\n\t\t\tNullPointerException, UnrecognizedResourceAdaptorEntityException,\n\t\t\tManagementException, InvalidStateException {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Uninstalling service with id \"\n\t\t\t\t\t+ serviceComponent.getServiceID());\n\t\t}\n\n\t\tif (serviceComponent.getServiceState().isStopping()) {\n\t\t\t// let's be friendly and give it a few secs\n\t\t\tfor (int i = 0; i < 15; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\tlogger.info(\"Waiting for \"\n\t\t\t\t\t\t\t+ serviceComponent.getServiceID()\n\t\t\t\t\t\t\t+ \" to stop, current state is \"\n\t\t\t\t\t\t\t+ serviceComponent.getServiceState());\n\t\t\t\t\tif (serviceComponent.getServiceState().isInactive()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!serviceComponent.getServiceState().isInactive()) {\n\t\t\tthrow new InvalidStateException(serviceComponent.toString()\n\t\t\t\t\t+ \" is not inactive\");\n\t\t}\n\n\t\tfinal TransactionContext txContext = sleeContainer\n\t\t\t\t.getTransactionManager().getTransactionContext();\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Closing Usage MBean of service \"\n\t\t\t\t\t+ serviceComponent.getServiceID());\n\t\t}\n\n\t\tServiceUsageMBean serviceUsageMBean = serviceComponent.getServiceUsageMBean();\n\t\tif (serviceUsageMBean != null) {\n\t\t\tserviceUsageMBean.remove();\n\t\t\t// add rollback action to re-create the mbean\n\t\t\t// FIXME this doesn't make sense, this restore looses all old data,\n\t\t\t// it shoudl only remove on\n\t\t\t// commit but as it is right now, the needed sbb components are\n\t\t\t// already removed\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsleeContainer.getUsageParametersManagement()\n\t\t\t\t\t\t\t\t.newServiceUsageMBean(serviceComponent);\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttxContext.getAfterRollbackActions().add(action);\n\t\t}\n\n\t\t// register notification sources for all sbbs\n\t\tfinal TraceManagement traceMBeanImpl = sleeContainer\n\t\t\t\t.getTraceManagement();\n\t\tfor (final SbbID sbbID : serviceComponent\n\t\t\t\t.getSbbIDs(componentRepositoryImpl)) {\n\n\t\t\t// Tracer must be available for both 1.1 and 1.0 sbb components\n\t\t\t// SbbComponent sbbComponent =\n\t\t\t// componentRepositoryImpl.getComponentByID(sbbID);\n\t\t\t// if(sbbComponent.isSlee11())\n\t\t\t{\n\t\t\t\ttraceMBeanImpl\n\t\t\t\t\t\t.deregisterNotificationSource(new SbbNotification(\n\t\t\t\t\t\t\t\tserviceComponent.getServiceID(), sbbID));\n\n\t\t\t\t// add rollback action to re-add state removed\n\t\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\t// remove notification sources for all sbbs\n\t\t\t\t\t\ttraceMBeanImpl\n\t\t\t\t\t\t\t\t.registerNotificationSource(new SbbNotification(\n\t\t\t\t\t\t\t\t\t\tserviceComponent.getServiceID(), sbbID));\n\t\t\t\t\t}\n\n\t\t\t\t};\n\t\t\t\ttxContext.getAfterRollbackActions().add(action);\n\t\t\t}\n\t\t}\n\n\t\t// warn sbb management that the service is being uninstalled, giving it\n\t\t// the option to clear any related resources\n\t\tsleeContainer.getSbbManagement().serviceUninstall(serviceComponent);\n\n\t}", "language": "java", "code": "public void uninstallService(final ServiceComponent serviceComponent)\n\t\t\tthrows SystemException, UnrecognizedServiceException,\n\t\t\tInstanceNotFoundException, MBeanRegistrationException,\n\t\t\tNullPointerException, UnrecognizedResourceAdaptorEntityException,\n\t\t\tManagementException, InvalidStateException {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Uninstalling service with id \"\n\t\t\t\t\t+ serviceComponent.getServiceID());\n\t\t}\n\n\t\tif (serviceComponent.getServiceState().isStopping()) {\n\t\t\t// let's be friendly and give it a few secs\n\t\t\tfor (int i = 0; i < 15; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\tlogger.info(\"Waiting for \"\n\t\t\t\t\t\t\t+ serviceComponent.getServiceID()\n\t\t\t\t\t\t\t+ \" to stop, current state is \"\n\t\t\t\t\t\t\t+ serviceComponent.getServiceState());\n\t\t\t\t\tif (serviceComponent.getServiceState().isInactive()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!serviceComponent.getServiceState().isInactive()) {\n\t\t\tthrow new InvalidStateException(serviceComponent.toString()\n\t\t\t\t\t+ \" is not inactive\");\n\t\t}\n\n\t\tfinal TransactionContext txContext = sleeContainer\n\t\t\t\t.getTransactionManager().getTransactionContext();\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Closing Usage MBean of service \"\n\t\t\t\t\t+ serviceComponent.getServiceID());\n\t\t}\n\n\t\tServiceUsageMBean serviceUsageMBean = serviceComponent.getServiceUsageMBean();\n\t\tif (serviceUsageMBean != null) {\n\t\t\tserviceUsageMBean.remove();\n\t\t\t// add rollback action to re-create the mbean\n\t\t\t// FIXME this doesn't make sense, this restore looses all old data,\n\t\t\t// it shoudl only remove on\n\t\t\t// commit but as it is right now, the needed sbb components are\n\t\t\t// already removed\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsleeContainer.getUsageParametersManagement()\n\t\t\t\t\t\t\t\t.newServiceUsageMBean(serviceComponent);\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttxContext.getAfterRollbackActions().add(action);\n\t\t}\n\n\t\t// register notification sources for all sbbs\n\t\tfinal TraceManagement traceMBeanImpl = sleeContainer\n\t\t\t\t.getTraceManagement();\n\t\tfor (final SbbID sbbID : serviceComponent\n\t\t\t\t.getSbbIDs(componentRepositoryImpl)) {\n\n\t\t\t// Tracer must be available for both 1.1 and 1.0 sbb components\n\t\t\t// SbbComponent sbbComponent =\n\t\t\t// componentRepositoryImpl.getComponentByID(sbbID);\n\t\t\t// if(sbbComponent.isSlee11())\n\t\t\t{\n\t\t\t\ttraceMBeanImpl\n\t\t\t\t\t\t.deregisterNotificationSource(new SbbNotification(\n\t\t\t\t\t\t\t\tserviceComponent.getServiceID(), sbbID));\n\n\t\t\t\t// add rollback action to re-add state removed\n\t\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\t\tpublic void execute() {\n\t\t\t\t\t\t// remove notification sources for all sbbs\n\t\t\t\t\t\ttraceMBeanImpl\n\t\t\t\t\t\t\t\t.registerNotificationSource(new SbbNotification(\n\t\t\t\t\t\t\t\t\t\tserviceComponent.getServiceID(), sbbID));\n\t\t\t\t\t}\n\n\t\t\t\t};\n\t\t\t\ttxContext.getAfterRollbackActions().add(action);\n\t\t\t}\n\t\t}\n\n\t\t// warn sbb management that the service is being uninstalled, giving it\n\t\t// the option to clear any related resources\n\t\tsleeContainer.getSbbManagement().serviceUninstall(serviceComponent);\n\n\t}", "code_tokens": ["public", "void", "uninstallService", "(", "final", "ServiceComponent", "serviceComponent", ")", "throws", "SystemException", ",", "UnrecognizedServiceException", ",", "InstanceNotFoundException", ",", "MBeanRegistrationException", ",", "NullPointerException", ",", "UnrecognizedResourceAdaptorEntityException", ",", "ManagementException", ",", "InvalidStateException", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Uninstalling service with id \"", "+", "serviceComponent", ".", "getServiceID", "(", ")", ")", ";", "}", "if", "(", "serviceComponent", ".", "getServiceState", "(", ")", ".", "isStopping", "(", ")", ")", "{", "// let's be friendly and give it a few secs", "for", "(", "int", "i", "=", "0", ";", "i", "<", "15", ";", "i", "++", ")", "{", "try", "{", "Thread", ".", "sleep", "(", "1000", ")", ";", "logger", ".", "info", "(", "\"Waiting for \"", "+", "serviceComponent", ".", "getServiceID", "(", ")", "+", "\" to stop, current state is \"", "+", "serviceComponent", ".", "getServiceState", "(", ")", ")", ";", "if", "(", "serviceComponent", ".", "getServiceState", "(", ")", ".", "isInactive", "(", ")", ")", "{", "break", ";", "}", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}", "if", "(", "!", "serviceComponent", ".", "getServiceState", "(", ")", ".", "isInactive", "(", ")", ")", "{", "throw", "new", "InvalidStateException", "(", "serviceComponent", ".", "toString", "(", ")", "+", "\" is not inactive\"", ")", ";", "}", "final", "TransactionContext", "txContext", "=", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "getTransactionContext", "(", ")", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Closing Usage MBean of service \"", "+", "serviceComponent", ".", "getServiceID", "(", ")", ")", ";", "}", "ServiceUsageMBean", "serviceUsageMBean", "=", "serviceComponent", ".", "getServiceUsageMBean", "(", ")", ";", "if", "(", "serviceUsageMBean", "!=", "null", ")", "{", "serviceUsageMBean", ".", "remove", "(", ")", ";", "// add rollback action to re-create the mbean", "// FIXME this doesn't make sense, this restore looses all old data,", "// it shoudl only remove on", "// commit but as it is right now, the needed sbb components are", "// already removed", "TransactionalAction", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "try", "{", "sleeContainer", ".", "getUsageParametersManagement", "(", ")", ".", "newServiceUsageMBean", "(", "serviceComponent", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}", ";", "txContext", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "action", ")", ";", "}", "// register notification sources for all sbbs", "final", "TraceManagement", "traceMBeanImpl", "=", "sleeContainer", ".", "getTraceManagement", "(", ")", ";", "for", "(", "final", "SbbID", "sbbID", ":", "serviceComponent", ".", "getSbbIDs", "(", "componentRepositoryImpl", ")", ")", "{", "// Tracer must be available for both 1.1 and 1.0 sbb components", "// SbbComponent sbbComponent =", "// componentRepositoryImpl.getComponentByID(sbbID);", "// if(sbbComponent.isSlee11())", "{", "traceMBeanImpl", ".", "deregisterNotificationSource", "(", "new", "SbbNotification", "(", "serviceComponent", ".", "getServiceID", "(", ")", ",", "sbbID", ")", ")", ";", "// add rollback action to re-add state removed", "TransactionalAction", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "// remove notification sources for all sbbs", "traceMBeanImpl", ".", "registerNotificationSource", "(", "new", "SbbNotification", "(", "serviceComponent", ".", "getServiceID", "(", ")", ",", "sbbID", ")", ")", ";", "}", "}", ";", "txContext", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "action", ")", ";", "}", "}", "// warn sbb management that the service is being uninstalled, giving it", "// the option to clear any related resources", "sleeContainer", ".", "getSbbManagement", "(", ")", ".", "serviceUninstall", "(", "serviceComponent", ")", ";", "}"], "docstring": "uninstall a service.\n\n@throws SystemException\n@throws UnrecognizedServiceException\n@throws MBeanRegistrationException\n@throws InstanceNotFoundException\n@throws UnrecognizedResourceAdaptorEntityException\n@throws NullPointerException\n@throws InvalidStateException", "docstring_tokens": ["uninstall", "a", "service", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java#L713-L808", "partition": "test", "index": 6950, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/spi/src/main/java/org/mobicents/slee/container/MobicentsLogFilter.java", "func_name": "MobicentsLogFilter.isLoggable", "original_string": "public boolean isLoggable(LogRecord record) \r\n  {\r\n\r\n    Logger logger = getLogger(record);\r\n\r\n    if (record.getThrown() != null) \r\n    {\r\n      logWithThrowable(logger, record);\r\n    } \r\n    else \r\n    {\r\n      logWithoutThrowable(logger, record);\r\n    }\r\n\r\n    return false;\r\n  }", "language": "java", "code": "public boolean isLoggable(LogRecord record) \r\n  {\r\n\r\n    Logger logger = getLogger(record);\r\n\r\n    if (record.getThrown() != null) \r\n    {\r\n      logWithThrowable(logger, record);\r\n    } \r\n    else \r\n    {\r\n      logWithoutThrowable(logger, record);\r\n    }\r\n\r\n    return false;\r\n  }", "code_tokens": ["public", "boolean", "isLoggable", "(", "LogRecord", "record", ")", "{", "Logger", "logger", "=", "getLogger", "(", "record", ")", ";", "if", "(", "record", ".", "getThrown", "(", ")", "!=", "null", ")", "{", "logWithThrowable", "(", "logger", ",", "record", ")", ";", "}", "else", "{", "logWithoutThrowable", "(", "logger", ",", "record", ")", ";", "}", "return", "false", ";", "}"], "docstring": "If the message should be logged, convert the JDK 1.4\nLogRecord to a Log4J message.\n\n@return <code>false</code> because JDK 1.4 logging should not happen\nif this filter is active.", "docstring_tokens": ["If", "the", "message", "should", "be", "logged", "convert", "the", "JDK", "1", ".", "4", "LogRecord", "to", "a", "Log4J", "message", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/spi/src/main/java/org/mobicents/slee/container/MobicentsLogFilter.java#L59-L74", "partition": "test", "index": 6992, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java", "func_name": "DeploymentManager.showStatus", "original_string": "public String showStatus() {\n    // Update the currently deployed components.\n    updateDeployedComponents();\n\n    String output = \"\";\n\n    output += \"<p>Deployable Units Waiting For Install:</p>\";\n    for (DeployableUnit waitingDU : waitingForInstallDUs) {\n      output += \"+-- \" + waitingDU.getDeploymentInfoShortName() + \"<br>\";\n      for (String dependency : waitingDU.getExternalDependencies()) {\n        if (!deployedComponents.contains(dependency))\n          dependency += \" <strong>MISSING!</strong>\";\n\n        output += \"  +-- depends on \" + dependency + \"<br>\";\n      }\n    }\n\n    output += \"<p>Deployable Units Waiting For Uninstall:</p>\";\n    for (DeployableUnit waitingDU : waitingForUninstallDUs) {\n      output += \"+-- \" + waitingDU.getDeploymentInfoShortName() + \"<br>\";\n    }\n\n    return output;\n  }", "language": "java", "code": "public String showStatus() {\n    // Update the currently deployed components.\n    updateDeployedComponents();\n\n    String output = \"\";\n\n    output += \"<p>Deployable Units Waiting For Install:</p>\";\n    for (DeployableUnit waitingDU : waitingForInstallDUs) {\n      output += \"+-- \" + waitingDU.getDeploymentInfoShortName() + \"<br>\";\n      for (String dependency : waitingDU.getExternalDependencies()) {\n        if (!deployedComponents.contains(dependency))\n          dependency += \" <strong>MISSING!</strong>\";\n\n        output += \"  +-- depends on \" + dependency + \"<br>\";\n      }\n    }\n\n    output += \"<p>Deployable Units Waiting For Uninstall:</p>\";\n    for (DeployableUnit waitingDU : waitingForUninstallDUs) {\n      output += \"+-- \" + waitingDU.getDeploymentInfoShortName() + \"<br>\";\n    }\n\n    return output;\n  }", "code_tokens": ["public", "String", "showStatus", "(", ")", "{", "// Update the currently deployed components.", "updateDeployedComponents", "(", ")", ";", "String", "output", "=", "\"\"", ";", "output", "+=", "\"<p>Deployable Units Waiting For Install:</p>\"", ";", "for", "(", "DeployableUnit", "waitingDU", ":", "waitingForInstallDUs", ")", "{", "output", "+=", "\"+-- \"", "+", "waitingDU", ".", "getDeploymentInfoShortName", "(", ")", "+", "\"<br>\"", ";", "for", "(", "String", "dependency", ":", "waitingDU", ".", "getExternalDependencies", "(", ")", ")", "{", "if", "(", "!", "deployedComponents", ".", "contains", "(", "dependency", ")", ")", "dependency", "+=", "\" <strong>MISSING!</strong>\"", ";", "output", "+=", "\"  +-- depends on \"", "+", "dependency", "+", "\"<br>\"", ";", "}", "}", "output", "+=", "\"<p>Deployable Units Waiting For Uninstall:</p>\"", ";", "for", "(", "DeployableUnit", "waitingDU", ":", "waitingForUninstallDUs", ")", "{", "output", "+=", "\"+-- \"", "+", "waitingDU", ".", "getDeploymentInfoShortName", "(", ")", "+", "\"<br>\"", ";", "}", "return", "output", ";", "}"], "docstring": "Method for showing current status of the Deployment Manager.\n@return a HTML string with the status.", "docstring_tokens": ["Method", "for", "showing", "current", "status", "of", "the", "Deployment", "Manager", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java#L394-L417", "partition": "test", "index": 6991, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java", "func_name": "DeploymentManager.processInternalUndeploy", "original_string": "private void processInternalUndeploy(DeployableUnit du) throws Exception {\n    // Set the DU as not installed\n    du.setInstalled(false);\n\n    // Remove if it was present in waiting list\n    waitingForUninstallDUs.remove(du);\n\n    // Update the deployed components from SLEE\n    updateDeployedComponents();\n\n    // Go through the remaining DUs waiting for uninstallation\n    Iterator<DeployableUnit> duIt = waitingForUninstallDUs.iterator();\n\n    while (duIt.hasNext()) {\n      DeployableUnit waitingDU = duIt.next();\n\n      // If it is ready for being uninstalled, follow the same procedure\n      if (waitingDU.isReadyToUninstall()) {\n        // Schedule removal\n        sleeContainerDeployer.getSleeSubDeployer().stop(waitingDU.getURL(), waitingDU.getDeploymentInfoShortName());\n\n        // Remove the DU from the waiting list. If it fails, will go back.\n        waitingForUninstallDUs.remove(waitingDU);\n\n        // Let's start all over.. :)\n        duIt = waitingForUninstallDUs.iterator();\n      }\n    }\n  }", "language": "java", "code": "private void processInternalUndeploy(DeployableUnit du) throws Exception {\n    // Set the DU as not installed\n    du.setInstalled(false);\n\n    // Remove if it was present in waiting list\n    waitingForUninstallDUs.remove(du);\n\n    // Update the deployed components from SLEE\n    updateDeployedComponents();\n\n    // Go through the remaining DUs waiting for uninstallation\n    Iterator<DeployableUnit> duIt = waitingForUninstallDUs.iterator();\n\n    while (duIt.hasNext()) {\n      DeployableUnit waitingDU = duIt.next();\n\n      // If it is ready for being uninstalled, follow the same procedure\n      if (waitingDU.isReadyToUninstall()) {\n        // Schedule removal\n        sleeContainerDeployer.getSleeSubDeployer().stop(waitingDU.getURL(), waitingDU.getDeploymentInfoShortName());\n\n        // Remove the DU from the waiting list. If it fails, will go back.\n        waitingForUninstallDUs.remove(waitingDU);\n\n        // Let's start all over.. :)\n        duIt = waitingForUninstallDUs.iterator();\n      }\n    }\n  }", "code_tokens": ["private", "void", "processInternalUndeploy", "(", "DeployableUnit", "du", ")", "throws", "Exception", "{", "// Set the DU as not installed", "du", ".", "setInstalled", "(", "false", ")", ";", "// Remove if it was present in waiting list", "waitingForUninstallDUs", ".", "remove", "(", "du", ")", ";", "// Update the deployed components from SLEE", "updateDeployedComponents", "(", ")", ";", "// Go through the remaining DUs waiting for uninstallation", "Iterator", "<", "DeployableUnit", ">", "duIt", "=", "waitingForUninstallDUs", ".", "iterator", "(", ")", ";", "while", "(", "duIt", ".", "hasNext", "(", ")", ")", "{", "DeployableUnit", "waitingDU", "=", "duIt", ".", "next", "(", ")", ";", "// If it is ready for being uninstalled, follow the same procedure", "if", "(", "waitingDU", ".", "isReadyToUninstall", "(", ")", ")", "{", "// Schedule removal", "sleeContainerDeployer", ".", "getSleeSubDeployer", "(", ")", ".", "stop", "(", "waitingDU", ".", "getURL", "(", ")", ",", "waitingDU", ".", "getDeploymentInfoShortName", "(", ")", ")", ";", "// Remove the DU from the waiting list. If it fails, will go back.", "waitingForUninstallDUs", ".", "remove", "(", "waitingDU", ")", ";", "// Let's start all over.. :)", "duIt", "=", "waitingForUninstallDUs", ".", "iterator", "(", ")", ";", "}", "}", "}"], "docstring": "Sets the DU as not installed and remove it from waiting list if present there.\nAlso, tries to undeploy DU's waiting for dependencies to be removed.\n\n@param du the DeployableUnit that was just removed\n@throws Exception", "docstring_tokens": ["Sets", "the", "DU", "as", "not", "installed", "and", "remove", "it", "from", "waiting", "list", "if", "present", "there", ".", "Also", "tries", "to", "undeploy", "DU", "s", "waiting", "for", "dependencies", "to", "be", "removed", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java#L258-L286", "partition": "test", "index": 6990, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java", "func_name": "DeploymentManager.uninstallDeployableUnit", "original_string": "public void uninstallDeployableUnit(DeployableUnit du) throws Exception {\n\n    // Update the deployed components from SLEE\n    updateDeployedComponents();\n\n    // It isn't installed?\n    if (!du.isInstalled()) {\n      // Then it should be in the waiting list... remove and we're done.\n      if (waitingForInstallDUs.remove(du)) {\n        logger.info(du.getDeploymentInfoShortName() + \" wasn't deployed. Removing from waiting list.\");\n      }\n    }\n    // Check if DU components are still present \n    else if (!du.areComponentsStillPresent()) {\n      logger.info(du.getDeploymentInfoShortName() + \" components already removed. Removing DU info.\");\n      \n      // Process internals of undeployment...\n      processInternalUndeploy(du);\n    }\n    // Check if the DU is ready to be uninstalled\n    else if (du.isReadyToUninstall()) {\n      // Get and Run the actions needed for uninstalling this DU\n      sciAction(du.getUninstallActions(), du);\n\n      // Process internals of undeployment...\n      processInternalUndeploy(du);\n    }\n    else {\n      // Have we been her already? If so, don't flood user with log messages...\n      if (!waitingForUninstallDUs.contains(du)) {\n        // Add it to the waiting list.\n        waitingForUninstallDUs.add(du);\n        logger.warn(\"Unable to UNINSTALL \" + du.getDeploymentInfoShortName() + \" right now. Waiting for dependents to be removed.\");        \n      }\n      throw new DependencyException(\"Unable to undeploy \"+du.getDeploymentInfoShortName());\n    }\n  }", "language": "java", "code": "public void uninstallDeployableUnit(DeployableUnit du) throws Exception {\n\n    // Update the deployed components from SLEE\n    updateDeployedComponents();\n\n    // It isn't installed?\n    if (!du.isInstalled()) {\n      // Then it should be in the waiting list... remove and we're done.\n      if (waitingForInstallDUs.remove(du)) {\n        logger.info(du.getDeploymentInfoShortName() + \" wasn't deployed. Removing from waiting list.\");\n      }\n    }\n    // Check if DU components are still present \n    else if (!du.areComponentsStillPresent()) {\n      logger.info(du.getDeploymentInfoShortName() + \" components already removed. Removing DU info.\");\n      \n      // Process internals of undeployment...\n      processInternalUndeploy(du);\n    }\n    // Check if the DU is ready to be uninstalled\n    else if (du.isReadyToUninstall()) {\n      // Get and Run the actions needed for uninstalling this DU\n      sciAction(du.getUninstallActions(), du);\n\n      // Process internals of undeployment...\n      processInternalUndeploy(du);\n    }\n    else {\n      // Have we been her already? If so, don't flood user with log messages...\n      if (!waitingForUninstallDUs.contains(du)) {\n        // Add it to the waiting list.\n        waitingForUninstallDUs.add(du);\n        logger.warn(\"Unable to UNINSTALL \" + du.getDeploymentInfoShortName() + \" right now. Waiting for dependents to be removed.\");        \n      }\n      throw new DependencyException(\"Unable to undeploy \"+du.getDeploymentInfoShortName());\n    }\n  }", "code_tokens": ["public", "void", "uninstallDeployableUnit", "(", "DeployableUnit", "du", ")", "throws", "Exception", "{", "// Update the deployed components from SLEE", "updateDeployedComponents", "(", ")", ";", "// It isn't installed?", "if", "(", "!", "du", ".", "isInstalled", "(", ")", ")", "{", "// Then it should be in the waiting list... remove and we're done.", "if", "(", "waitingForInstallDUs", ".", "remove", "(", "du", ")", ")", "{", "logger", ".", "info", "(", "du", ".", "getDeploymentInfoShortName", "(", ")", "+", "\" wasn't deployed. Removing from waiting list.\"", ")", ";", "}", "}", "// Check if DU components are still present ", "else", "if", "(", "!", "du", ".", "areComponentsStillPresent", "(", ")", ")", "{", "logger", ".", "info", "(", "du", ".", "getDeploymentInfoShortName", "(", ")", "+", "\" components already removed. Removing DU info.\"", ")", ";", "// Process internals of undeployment...", "processInternalUndeploy", "(", "du", ")", ";", "}", "// Check if the DU is ready to be uninstalled", "else", "if", "(", "du", ".", "isReadyToUninstall", "(", ")", ")", "{", "// Get and Run the actions needed for uninstalling this DU", "sciAction", "(", "du", ".", "getUninstallActions", "(", ")", ",", "du", ")", ";", "// Process internals of undeployment...", "processInternalUndeploy", "(", "du", ")", ";", "}", "else", "{", "// Have we been her already? If so, don't flood user with log messages...", "if", "(", "!", "waitingForUninstallDUs", ".", "contains", "(", "du", ")", ")", "{", "// Add it to the waiting list.", "waitingForUninstallDUs", ".", "add", "(", "du", ")", ";", "logger", ".", "warn", "(", "\"Unable to UNINSTALL \"", "+", "du", ".", "getDeploymentInfoShortName", "(", ")", "+", "\" right now. Waiting for dependents to be removed.\"", ")", ";", "}", "throw", "new", "DependencyException", "(", "\"Unable to undeploy \"", "+", "du", ".", "getDeploymentInfoShortName", "(", ")", ")", ";", "}", "}"], "docstring": "Method for uninstalling a Deployable Unit into SLEE.\n@param du the Deployable Unit to install.\n@throws Exception", "docstring_tokens": ["Method", "for", "uninstalling", "a", "Deployable", "Unit", "into", "SLEE", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java#L213-L249", "partition": "test", "index": 6989, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java", "func_name": "DeploymentManager.installDeployableUnit", "original_string": "public void installDeployableUnit(DeployableUnit du) throws Exception {\n\n    // Update the deployed components from SLEE\n    updateDeployedComponents();\n\n    // Check if the DU is ready to be installed\n    if (du.isReadyToInstall(true)) {\n      // Get and Run the actions needed for installing this DU\n      sciAction(du.getInstallActions(), du);\n\n      // Set the DU as installed\n      du.setInstalled(true);\n\n      // Add the DU to the installed list\n      deployedDUs.add(du);\n\n      // Update the deployed components from SLEE\n      updateDeployedComponents();\n\n      // Go through the remaining DUs waiting for installation\n      Iterator<DeployableUnit> duIt = waitingForInstallDUs.iterator();\n\n      while (duIt.hasNext()) {\n        DeployableUnit waitingDU = duIt.next();\n\n        // If it is ready for installation, follow the same procedure\n        if (waitingDU.isReadyToInstall(false)) {\n          // Get and Run the actions needed for installing this DU\n          sciAction(waitingDU.getInstallActions(), waitingDU);\n\n          // Set the DU as installed\n          waitingDU.setInstalled(true);\n\n          // Add the DU to the installed list\n          deployedDUs.add(waitingDU);\n          \n          // Update the deployed components from SLEE\n          updateDeployedComponents();\n\n          // Remove the DU from the waiting list.\n          waitingForInstallDUs.remove(waitingDU);\n\n          // Let's start all over.. :)\n          duIt = waitingForInstallDUs.iterator();\n        }\n      }\n    }\n    else {\n      logger.warn(\"Unable to INSTALL \" + du.getDeploymentInfoShortName() + \" right now. Waiting for dependencies to be resolved.\");\n\n      // The DU can't be installed now, let's wait...\n      waitingForInstallDUs.add(du);\n    }\n  }", "language": "java", "code": "public void installDeployableUnit(DeployableUnit du) throws Exception {\n\n    // Update the deployed components from SLEE\n    updateDeployedComponents();\n\n    // Check if the DU is ready to be installed\n    if (du.isReadyToInstall(true)) {\n      // Get and Run the actions needed for installing this DU\n      sciAction(du.getInstallActions(), du);\n\n      // Set the DU as installed\n      du.setInstalled(true);\n\n      // Add the DU to the installed list\n      deployedDUs.add(du);\n\n      // Update the deployed components from SLEE\n      updateDeployedComponents();\n\n      // Go through the remaining DUs waiting for installation\n      Iterator<DeployableUnit> duIt = waitingForInstallDUs.iterator();\n\n      while (duIt.hasNext()) {\n        DeployableUnit waitingDU = duIt.next();\n\n        // If it is ready for installation, follow the same procedure\n        if (waitingDU.isReadyToInstall(false)) {\n          // Get and Run the actions needed for installing this DU\n          sciAction(waitingDU.getInstallActions(), waitingDU);\n\n          // Set the DU as installed\n          waitingDU.setInstalled(true);\n\n          // Add the DU to the installed list\n          deployedDUs.add(waitingDU);\n          \n          // Update the deployed components from SLEE\n          updateDeployedComponents();\n\n          // Remove the DU from the waiting list.\n          waitingForInstallDUs.remove(waitingDU);\n\n          // Let's start all over.. :)\n          duIt = waitingForInstallDUs.iterator();\n        }\n      }\n    }\n    else {\n      logger.warn(\"Unable to INSTALL \" + du.getDeploymentInfoShortName() + \" right now. Waiting for dependencies to be resolved.\");\n\n      // The DU can't be installed now, let's wait...\n      waitingForInstallDUs.add(du);\n    }\n  }", "code_tokens": ["public", "void", "installDeployableUnit", "(", "DeployableUnit", "du", ")", "throws", "Exception", "{", "// Update the deployed components from SLEE", "updateDeployedComponents", "(", ")", ";", "// Check if the DU is ready to be installed", "if", "(", "du", ".", "isReadyToInstall", "(", "true", ")", ")", "{", "// Get and Run the actions needed for installing this DU", "sciAction", "(", "du", ".", "getInstallActions", "(", ")", ",", "du", ")", ";", "// Set the DU as installed", "du", ".", "setInstalled", "(", "true", ")", ";", "// Add the DU to the installed list", "deployedDUs", ".", "add", "(", "du", ")", ";", "// Update the deployed components from SLEE", "updateDeployedComponents", "(", ")", ";", "// Go through the remaining DUs waiting for installation", "Iterator", "<", "DeployableUnit", ">", "duIt", "=", "waitingForInstallDUs", ".", "iterator", "(", ")", ";", "while", "(", "duIt", ".", "hasNext", "(", ")", ")", "{", "DeployableUnit", "waitingDU", "=", "duIt", ".", "next", "(", ")", ";", "// If it is ready for installation, follow the same procedure", "if", "(", "waitingDU", ".", "isReadyToInstall", "(", "false", ")", ")", "{", "// Get and Run the actions needed for installing this DU", "sciAction", "(", "waitingDU", ".", "getInstallActions", "(", ")", ",", "waitingDU", ")", ";", "// Set the DU as installed", "waitingDU", ".", "setInstalled", "(", "true", ")", ";", "// Add the DU to the installed list", "deployedDUs", ".", "add", "(", "waitingDU", ")", ";", "// Update the deployed components from SLEE", "updateDeployedComponents", "(", ")", ";", "// Remove the DU from the waiting list.", "waitingForInstallDUs", ".", "remove", "(", "waitingDU", ")", ";", "// Let's start all over.. :)", "duIt", "=", "waitingForInstallDUs", ".", "iterator", "(", ")", ";", "}", "}", "}", "else", "{", "logger", ".", "warn", "(", "\"Unable to INSTALL \"", "+", "du", ".", "getDeploymentInfoShortName", "(", ")", "+", "\" right now. Waiting for dependencies to be resolved.\"", ")", ";", "// The DU can't be installed now, let's wait...", "waitingForInstallDUs", ".", "add", "(", "du", ")", ";", "}", "}"], "docstring": "Method for installing a Deployable Unit into SLEE.\n@param du the Deployable Unit to install.\n@throws Exception", "docstring_tokens": ["Method", "for", "installing", "a", "Deployable", "Unit", "into", "SLEE", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java#L153-L206", "partition": "test", "index": 6988, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java", "func_name": "DeploymentManager.updateDeployedComponents", "original_string": "public void updateDeployedComponents() {\n    try {\n      // Get the SLEE Component Repo\n      ComponentRepository componentRepository = sleeContainerDeployer.getSleeContainer().getComponentRepository();\n\n      // First we'll put the components in a temp Collection\n      ConcurrentLinkedQueue<String> newDeployedComponents = new ConcurrentLinkedQueue<String>();\n\n      // Get the deployed Profile Specifications\n      for (ComponentID componentID: componentRepository.getProfileSpecificationIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Event Types\n      for (ComponentID componentID: componentRepository.getEventComponentIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Resource Adaptor Types\n      for (ComponentID componentID: componentRepository.getResourceAdaptorTypeIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Resource Adaptors\n      for (ComponentID componentID: componentRepository.getResourceAdaptorIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Service Building Blocks (SBBs)\n      for (ComponentID componentID: componentRepository.getSbbIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Services\n      for (ComponentID componentID: componentRepository.getServiceIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Libraries\n      for (ComponentID componentID: componentRepository.getLibraryIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      ResourceManagement resourceManagement = sleeContainerDeployer.getSleeContainer().getResourceManagement();\n      \n      // Get the existing Resource Adaptor Entity links\n      String[] entityNames = resourceManagement.getResourceAdaptorEntities();\n\n      for (String entityName : entityNames) {\n        newDeployedComponents.addAll(Arrays.asList(resourceManagement.getLinkNames(entityName)));\n      }\n\n      // All good.. Make the temp the good one.\n      deployedComponents = newDeployedComponents;\n    }\n    catch (Exception e) {\n      logger.warn(\"Failure while updating deployed components.\", e);\n    }\n  }", "language": "java", "code": "public void updateDeployedComponents() {\n    try {\n      // Get the SLEE Component Repo\n      ComponentRepository componentRepository = sleeContainerDeployer.getSleeContainer().getComponentRepository();\n\n      // First we'll put the components in a temp Collection\n      ConcurrentLinkedQueue<String> newDeployedComponents = new ConcurrentLinkedQueue<String>();\n\n      // Get the deployed Profile Specifications\n      for (ComponentID componentID: componentRepository.getProfileSpecificationIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Event Types\n      for (ComponentID componentID: componentRepository.getEventComponentIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Resource Adaptor Types\n      for (ComponentID componentID: componentRepository.getResourceAdaptorTypeIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Resource Adaptors\n      for (ComponentID componentID: componentRepository.getResourceAdaptorIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Service Building Blocks (SBBs)\n      for (ComponentID componentID: componentRepository.getSbbIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Services\n      for (ComponentID componentID: componentRepository.getServiceIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      // Get the deployed Libraries\n      for (ComponentID componentID: componentRepository.getLibraryIDs()) {\n        newDeployedComponents.add(componentID.toString());\n      }\n\n      ResourceManagement resourceManagement = sleeContainerDeployer.getSleeContainer().getResourceManagement();\n      \n      // Get the existing Resource Adaptor Entity links\n      String[] entityNames = resourceManagement.getResourceAdaptorEntities();\n\n      for (String entityName : entityNames) {\n        newDeployedComponents.addAll(Arrays.asList(resourceManagement.getLinkNames(entityName)));\n      }\n\n      // All good.. Make the temp the good one.\n      deployedComponents = newDeployedComponents;\n    }\n    catch (Exception e) {\n      logger.warn(\"Failure while updating deployed components.\", e);\n    }\n  }", "code_tokens": ["public", "void", "updateDeployedComponents", "(", ")", "{", "try", "{", "// Get the SLEE Component Repo", "ComponentRepository", "componentRepository", "=", "sleeContainerDeployer", ".", "getSleeContainer", "(", ")", ".", "getComponentRepository", "(", ")", ";", "// First we'll put the components in a temp Collection", "ConcurrentLinkedQueue", "<", "String", ">", "newDeployedComponents", "=", "new", "ConcurrentLinkedQueue", "<", "String", ">", "(", ")", ";", "// Get the deployed Profile Specifications", "for", "(", "ComponentID", "componentID", ":", "componentRepository", ".", "getProfileSpecificationIDs", "(", ")", ")", "{", "newDeployedComponents", ".", "add", "(", "componentID", ".", "toString", "(", ")", ")", ";", "}", "// Get the deployed Event Types", "for", "(", "ComponentID", "componentID", ":", "componentRepository", ".", "getEventComponentIDs", "(", ")", ")", "{", "newDeployedComponents", ".", "add", "(", "componentID", ".", "toString", "(", ")", ")", ";", "}", "// Get the deployed Resource Adaptor Types", "for", "(", "ComponentID", "componentID", ":", "componentRepository", ".", "getResourceAdaptorTypeIDs", "(", ")", ")", "{", "newDeployedComponents", ".", "add", "(", "componentID", ".", "toString", "(", ")", ")", ";", "}", "// Get the deployed Resource Adaptors", "for", "(", "ComponentID", "componentID", ":", "componentRepository", ".", "getResourceAdaptorIDs", "(", ")", ")", "{", "newDeployedComponents", ".", "add", "(", "componentID", ".", "toString", "(", ")", ")", ";", "}", "// Get the deployed Service Building Blocks (SBBs)", "for", "(", "ComponentID", "componentID", ":", "componentRepository", ".", "getSbbIDs", "(", ")", ")", "{", "newDeployedComponents", ".", "add", "(", "componentID", ".", "toString", "(", ")", ")", ";", "}", "// Get the deployed Services", "for", "(", "ComponentID", "componentID", ":", "componentRepository", ".", "getServiceIDs", "(", ")", ")", "{", "newDeployedComponents", ".", "add", "(", "componentID", ".", "toString", "(", ")", ")", ";", "}", "// Get the deployed Libraries", "for", "(", "ComponentID", "componentID", ":", "componentRepository", ".", "getLibraryIDs", "(", ")", ")", "{", "newDeployedComponents", ".", "add", "(", "componentID", ".", "toString", "(", ")", ")", ";", "}", "ResourceManagement", "resourceManagement", "=", "sleeContainerDeployer", ".", "getSleeContainer", "(", ")", ".", "getResourceManagement", "(", ")", ";", "// Get the existing Resource Adaptor Entity links", "String", "[", "]", "entityNames", "=", "resourceManagement", ".", "getResourceAdaptorEntities", "(", ")", ";", "for", "(", "String", "entityName", ":", "entityNames", ")", "{", "newDeployedComponents", ".", "addAll", "(", "Arrays", ".", "asList", "(", "resourceManagement", ".", "getLinkNames", "(", "entityName", ")", ")", ")", ";", "}", "// All good.. Make the temp the good one.", "deployedComponents", "=", "newDeployedComponents", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warn", "(", "\"Failure while updating deployed components.\"", ",", "e", ")", ";", "}", "}"], "docstring": "Updates the list of components already deployed to SLEE.", "docstring_tokens": ["Updates", "the", "list", "of", "components", "already", "deployed", "to", "SLEE", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManager.java#L88-L146", "partition": "test", "index": 6987, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/usage/src/main/java/org/mobicents/slee/container/management/jmx/ServiceUsageMBeanImpl.java", "func_name": "ServiceUsageMBeanImpl.getUsageParameterSets", "original_string": "public synchronized String[] getUsageParameterSets(SbbID sbbId)\r\n\t\t\tthrows NullPointerException, UnrecognizedSbbException,\r\n\t\t\tInvalidArgumentException, ManagementException {\r\n\r\n\t\tif (sbbId == null)\r\n\t\t\tthrow new NullPointerException(\"Sbb ID is null!\");\r\n\t\t\r\n\t\t// get the sbb component\r\n\t\tSbbComponent sbbComponent = sleeContainer.getComponentRepository()\r\n\t\t\t\t.getComponentByID(sbbId);\r\n\t\tif (sbbComponent == null) {\r\n\t\t\tthrow new UnrecognizedSbbException(sbbId.toString());\r\n\t\t} else {\r\n\t\t\tif (sbbComponent.getUsageParametersInterface() == null) {\r\n\t\t\t\tthrow new InvalidArgumentException(\r\n\t\t\t\t\t\t\"no usage parameter interface for \" + sbbId);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// get service component and check if the sbb belongs to the service\r\n\t\tServiceComponent serviceComponent = sleeContainer\r\n\t\t\t\t.getComponentRepository().getComponentByID(getService());\r\n\t\tif (!serviceComponent.getSbbIDs(\r\n\t\t\t\tsleeContainer.getComponentRepository()).contains(sbbId)) {\r\n\t\t\tthrow new UnrecognizedSbbException(sbbId.toString()\r\n\t\t\t\t\t+ \" is not part of \" + getService());\r\n\t\t}\r\n\t\tSet<String> resultSet = new HashSet<String>();\r\n\t\tfor (UsageMBeanImpl usageMBeanImpl : usageMBeans.values()) {\r\n\t\t\tif (((SbbNotification) usageMBeanImpl.getNotificationSource())\r\n\t\t\t\t\t.getSbb().equals(sbbId)) {\r\n\t\t\t\tString name = usageMBeanImpl.getUsageParameterSet();\r\n\t\t\t\tif (name != null) {\r\n\t\t\t\t\tresultSet.add(name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn resultSet.toArray(new String[resultSet.size()]);\r\n\t}", "language": "java", "code": "public synchronized String[] getUsageParameterSets(SbbID sbbId)\r\n\t\t\tthrows NullPointerException, UnrecognizedSbbException,\r\n\t\t\tInvalidArgumentException, ManagementException {\r\n\r\n\t\tif (sbbId == null)\r\n\t\t\tthrow new NullPointerException(\"Sbb ID is null!\");\r\n\t\t\r\n\t\t// get the sbb component\r\n\t\tSbbComponent sbbComponent = sleeContainer.getComponentRepository()\r\n\t\t\t\t.getComponentByID(sbbId);\r\n\t\tif (sbbComponent == null) {\r\n\t\t\tthrow new UnrecognizedSbbException(sbbId.toString());\r\n\t\t} else {\r\n\t\t\tif (sbbComponent.getUsageParametersInterface() == null) {\r\n\t\t\t\tthrow new InvalidArgumentException(\r\n\t\t\t\t\t\t\"no usage parameter interface for \" + sbbId);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// get service component and check if the sbb belongs to the service\r\n\t\tServiceComponent serviceComponent = sleeContainer\r\n\t\t\t\t.getComponentRepository().getComponentByID(getService());\r\n\t\tif (!serviceComponent.getSbbIDs(\r\n\t\t\t\tsleeContainer.getComponentRepository()).contains(sbbId)) {\r\n\t\t\tthrow new UnrecognizedSbbException(sbbId.toString()\r\n\t\t\t\t\t+ \" is not part of \" + getService());\r\n\t\t}\r\n\t\tSet<String> resultSet = new HashSet<String>();\r\n\t\tfor (UsageMBeanImpl usageMBeanImpl : usageMBeans.values()) {\r\n\t\t\tif (((SbbNotification) usageMBeanImpl.getNotificationSource())\r\n\t\t\t\t\t.getSbb().equals(sbbId)) {\r\n\t\t\t\tString name = usageMBeanImpl.getUsageParameterSet();\r\n\t\t\t\tif (name != null) {\r\n\t\t\t\t\tresultSet.add(name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn resultSet.toArray(new String[resultSet.size()]);\r\n\t}", "code_tokens": ["public", "synchronized", "String", "[", "]", "getUsageParameterSets", "(", "SbbID", "sbbId", ")", "throws", "NullPointerException", ",", "UnrecognizedSbbException", ",", "InvalidArgumentException", ",", "ManagementException", "{", "if", "(", "sbbId", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"Sbb ID is null!\"", ")", ";", "// get the sbb component\r", "SbbComponent", "sbbComponent", "=", "sleeContainer", ".", "getComponentRepository", "(", ")", ".", "getComponentByID", "(", "sbbId", ")", ";", "if", "(", "sbbComponent", "==", "null", ")", "{", "throw", "new", "UnrecognizedSbbException", "(", "sbbId", ".", "toString", "(", ")", ")", ";", "}", "else", "{", "if", "(", "sbbComponent", ".", "getUsageParametersInterface", "(", ")", "==", "null", ")", "{", "throw", "new", "InvalidArgumentException", "(", "\"no usage parameter interface for \"", "+", "sbbId", ")", ";", "}", "}", "// get service component and check if the sbb belongs to the service\r", "ServiceComponent", "serviceComponent", "=", "sleeContainer", ".", "getComponentRepository", "(", ")", ".", "getComponentByID", "(", "getService", "(", ")", ")", ";", "if", "(", "!", "serviceComponent", ".", "getSbbIDs", "(", "sleeContainer", ".", "getComponentRepository", "(", ")", ")", ".", "contains", "(", "sbbId", ")", ")", "{", "throw", "new", "UnrecognizedSbbException", "(", "sbbId", ".", "toString", "(", ")", "+", "\" is not part of \"", "+", "getService", "(", ")", ")", ";", "}", "Set", "<", "String", ">", "resultSet", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "for", "(", "UsageMBeanImpl", "usageMBeanImpl", ":", "usageMBeans", ".", "values", "(", ")", ")", "{", "if", "(", "(", "(", "SbbNotification", ")", "usageMBeanImpl", ".", "getNotificationSource", "(", ")", ")", ".", "getSbb", "(", ")", ".", "equals", "(", "sbbId", ")", ")", "{", "String", "name", "=", "usageMBeanImpl", ".", "getUsageParameterSet", "(", ")", ";", "if", "(", "name", "!=", "null", ")", "{", "resultSet", ".", "add", "(", "name", ")", ";", "}", "}", "}", "return", "resultSet", ".", "toArray", "(", "new", "String", "[", "resultSet", ".", "size", "(", ")", "]", ")", ";", "}"], "docstring": "This method returns a list containing the names of the named SBB usage\nparameter sets that belong to the SBB specified by the sbbID argument and\nthe Service represented by the ServiceUsageMBean object.\n\n@see javax.slee.management.ServiceUsageMBean#getUsageParameterSets(javax.slee.SbbID)", "docstring_tokens": ["This", "method", "returns", "a", "list", "containing", "the", "names", "of", "the", "named", "SBB", "usage", "parameter", "sets", "that", "belong", "to", "the", "SBB", "specified", "by", "the", "sbbID", "argument", "and", "the", "Service", "represented", "by", "the", "ServiceUsageMBean", "object", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/usage/src/main/java/org/mobicents/slee/container/management/jmx/ServiceUsageMBeanImpl.java#L454-L491", "partition": "test", "index": 6952, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/usage/src/main/java/org/mobicents/slee/container/management/jmx/UsageMBeanImpl.java", "func_name": "UsageMBeanImpl.sendUsageNotification", "original_string": "public void sendUsageNotification(long value, long seqno,\n\t\t\tString usageParameterSetName, String usageParameterName,\n\t\t\tboolean isCounter) {\n\t\tUsageNotificationManagerMBeanImpl notificationManager = parent\n\t\t\t\t.getUsageNotificationManagerMBean(notificationSource);\n\t\tif (notificationManager == null\n\t\t\t\t|| notificationManager\n\t\t\t\t\t\t.getNotificationsEnabled(usageParameterName)) {\n\t\t\t// if the notification manager is null we consider the notification\n\t\t\t// can be sent\n\t\t\tUsageNotification notification = createUsageNotification(value,\n\t\t\t\t\tseqno, usageParameterSetName, usageParameterName, isCounter);\n\t\t\tfor (ListenerFilterHandbackTriplet triplet : listeners.values()) {\n\t\t\t\tif (triplet.notificationFilter == null\n\t\t\t\t\t\t|| triplet.notificationFilter\n\t\t\t\t\t\t\t\t.isNotificationEnabled(notification)) {\n\t\t\t\t\ttriplet.notificationListener.handleNotification(\n\t\t\t\t\t\t\tnotification, triplet.handbackObject);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void sendUsageNotification(long value, long seqno,\n\t\t\tString usageParameterSetName, String usageParameterName,\n\t\t\tboolean isCounter) {\n\t\tUsageNotificationManagerMBeanImpl notificationManager = parent\n\t\t\t\t.getUsageNotificationManagerMBean(notificationSource);\n\t\tif (notificationManager == null\n\t\t\t\t|| notificationManager\n\t\t\t\t\t\t.getNotificationsEnabled(usageParameterName)) {\n\t\t\t// if the notification manager is null we consider the notification\n\t\t\t// can be sent\n\t\t\tUsageNotification notification = createUsageNotification(value,\n\t\t\t\t\tseqno, usageParameterSetName, usageParameterName, isCounter);\n\t\t\tfor (ListenerFilterHandbackTriplet triplet : listeners.values()) {\n\t\t\t\tif (triplet.notificationFilter == null\n\t\t\t\t\t\t|| triplet.notificationFilter\n\t\t\t\t\t\t\t\t.isNotificationEnabled(notification)) {\n\t\t\t\t\ttriplet.notificationListener.handleNotification(\n\t\t\t\t\t\t\tnotification, triplet.handbackObject);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "sendUsageNotification", "(", "long", "value", ",", "long", "seqno", ",", "String", "usageParameterSetName", ",", "String", "usageParameterName", ",", "boolean", "isCounter", ")", "{", "UsageNotificationManagerMBeanImpl", "notificationManager", "=", "parent", ".", "getUsageNotificationManagerMBean", "(", "notificationSource", ")", ";", "if", "(", "notificationManager", "==", "null", "||", "notificationManager", ".", "getNotificationsEnabled", "(", "usageParameterName", ")", ")", "{", "// if the notification manager is null we consider the notification", "// can be sent", "UsageNotification", "notification", "=", "createUsageNotification", "(", "value", ",", "seqno", ",", "usageParameterSetName", ",", "usageParameterName", ",", "isCounter", ")", ";", "for", "(", "ListenerFilterHandbackTriplet", "triplet", ":", "listeners", ".", "values", "(", ")", ")", "{", "if", "(", "triplet", ".", "notificationFilter", "==", "null", "||", "triplet", ".", "notificationFilter", ".", "isNotificationEnabled", "(", "notification", ")", ")", "{", "triplet", ".", "notificationListener", ".", "handleNotification", "(", "notification", ",", "triplet", ".", "handbackObject", ")", ";", "}", "}", "}", "}"], "docstring": "Send the notification.\n\n@param value\n@param seqno\n@param usageParameterSetName\n@param usageParameterName\n@param isCounter", "docstring_tokens": ["Send", "the", "notification", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/usage/src/main/java/org/mobicents/slee/container/management/jmx/UsageMBeanImpl.java#L168-L189", "partition": "test", "index": 6985, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/usage/src/main/java/org/mobicents/slee/container/management/jmx/UsageMBeanImpl.java", "func_name": "UsageMBeanImpl.initNotificationInfo", "original_string": "private static MBeanNotificationInfo[] initNotificationInfo() {\n\t\tString[] notificationTypes = new String[] { \n\t\t\t\tProfileTableNotification.USAGE_NOTIFICATION_TYPE,\n\t\t\t\tResourceAdaptorEntityNotification.USAGE_NOTIFICATION_TYPE,\n\t\t\t\tSbbNotification.USAGE_NOTIFICATION_TYPE,\n\t\t\t\tSubsystemNotification.USAGE_NOTIFICATION_TYPE\n\t\t\t\t};\n\t\treturn new MBeanNotificationInfo[] { new MBeanNotificationInfo(\n\t\t\t\tnotificationTypes, UsageNotification.class.getName(),\n\t\t\t\t\"JAIN SLEE 1.1 Usage MBean Notification\") };\n\n\t}", "language": "java", "code": "private static MBeanNotificationInfo[] initNotificationInfo() {\n\t\tString[] notificationTypes = new String[] { \n\t\t\t\tProfileTableNotification.USAGE_NOTIFICATION_TYPE,\n\t\t\t\tResourceAdaptorEntityNotification.USAGE_NOTIFICATION_TYPE,\n\t\t\t\tSbbNotification.USAGE_NOTIFICATION_TYPE,\n\t\t\t\tSubsystemNotification.USAGE_NOTIFICATION_TYPE\n\t\t\t\t};\n\t\treturn new MBeanNotificationInfo[] { new MBeanNotificationInfo(\n\t\t\t\tnotificationTypes, UsageNotification.class.getName(),\n\t\t\t\t\"JAIN SLEE 1.1 Usage MBean Notification\") };\n\n\t}", "code_tokens": ["private", "static", "MBeanNotificationInfo", "[", "]", "initNotificationInfo", "(", ")", "{", "String", "[", "]", "notificationTypes", "=", "new", "String", "[", "]", "{", "ProfileTableNotification", ".", "USAGE_NOTIFICATION_TYPE", ",", "ResourceAdaptorEntityNotification", ".", "USAGE_NOTIFICATION_TYPE", ",", "SbbNotification", ".", "USAGE_NOTIFICATION_TYPE", ",", "SubsystemNotification", ".", "USAGE_NOTIFICATION_TYPE", "}", ";", "return", "new", "MBeanNotificationInfo", "[", "]", "{", "new", "MBeanNotificationInfo", "(", "notificationTypes", ",", "UsageNotification", ".", "class", ".", "getName", "(", ")", ",", "\"JAIN SLEE 1.1 Usage MBean Notification\"", ")", "}", ";", "}"], "docstring": "Initiates the notification info for usage mbeans\n@return", "docstring_tokens": ["Initiates", "the", "notification", "info", "for", "usage", "mbeans"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/usage/src/main/java/org/mobicents/slee/container/management/jmx/UsageMBeanImpl.java#L57-L68", "partition": "test", "index": 6984, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/router/src/main/java/org/mobicents/slee/runtime/eventrouter/routingtask/NextSbbEntityFinder.java", "func_name": "NextSbbEntityFinder.next", "original_string": "public Result next(ActivityContext ac,\n\t\t\tEventContext sleeEvent, Set<SbbEntityID> sbbEntitiesThatHandledCurrentEvent, SleeContainer sleeContainer) {\n\t\t\n\t\tSbbEntityID sbbEntityId = null;\n\t\tSbbEntity sbbEntity = null;\n\t\tEventEntryDescriptor mEventEntry = null;\n\t\t\t\t\n\t\t// get the highest priority sbb from sbb entities attached to AC\n\t\tfor (Iterator<SbbEntityID> iter = ac.getSortedSbbAttachmentSet(sbbEntitiesThatHandledCurrentEvent).iterator(); iter\n\t\t\t\t.hasNext();) {\n\t\t\tsbbEntityId = iter.next();\n\t\t\tsbbEntity = sleeContainer.getSbbEntityFactory().getSbbEntity(sbbEntityId,true);\n\t\t\tif (sbbEntity == null) {\n\t\t\t\t// ignore, sbb entity has been removed\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (eventRouterConfiguration.isConfirmSbbEntityAttachement() && !sbbEntity.isAttached(ac.getActivityContextHandle())) {\n\t\t\t\t// detached by a concurrent tx, see Issue 2313 \t\t\t\t\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (sleeEvent.getService() != null && !sleeEvent.getService().equals(sbbEntityId.getServiceID())) {\n\t\t\t\tif (!sleeEvent.isActivityEndEvent()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn new Result(sbbEntity, false);\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t// check event is allowed to be handled by the sbb\n\t\t\tmEventEntry = sbbEntity.getSbbComponent().getDescriptor().getEventEntries().get(sleeEvent.getEventTypeId());\n\t\t\tif (mEventEntry != null && mEventEntry.isReceived()) {\n\t\t\t\treturn new Result(sbbEntity, true);\t\t\t\t\t\n\t\t\t} else {\n\t\t\t\tif (!sleeEvent.isActivityEndEvent()) {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger\n\t\t\t\t\t\t.debug(\"Event is not received by sbb descriptor of entity \"\n\t\t\t\t\t\t\t\t+ sbbEntityId + \", will not deliver event to sbb entity ...\");\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn new Result(sbbEntity, false);\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\n\t\treturn null;\n\n\t}", "language": "java", "code": "public Result next(ActivityContext ac,\n\t\t\tEventContext sleeEvent, Set<SbbEntityID> sbbEntitiesThatHandledCurrentEvent, SleeContainer sleeContainer) {\n\t\t\n\t\tSbbEntityID sbbEntityId = null;\n\t\tSbbEntity sbbEntity = null;\n\t\tEventEntryDescriptor mEventEntry = null;\n\t\t\t\t\n\t\t// get the highest priority sbb from sbb entities attached to AC\n\t\tfor (Iterator<SbbEntityID> iter = ac.getSortedSbbAttachmentSet(sbbEntitiesThatHandledCurrentEvent).iterator(); iter\n\t\t\t\t.hasNext();) {\n\t\t\tsbbEntityId = iter.next();\n\t\t\tsbbEntity = sleeContainer.getSbbEntityFactory().getSbbEntity(sbbEntityId,true);\n\t\t\tif (sbbEntity == null) {\n\t\t\t\t// ignore, sbb entity has been removed\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (eventRouterConfiguration.isConfirmSbbEntityAttachement() && !sbbEntity.isAttached(ac.getActivityContextHandle())) {\n\t\t\t\t// detached by a concurrent tx, see Issue 2313 \t\t\t\t\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (sleeEvent.getService() != null && !sleeEvent.getService().equals(sbbEntityId.getServiceID())) {\n\t\t\t\tif (!sleeEvent.isActivityEndEvent()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn new Result(sbbEntity, false);\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t// check event is allowed to be handled by the sbb\n\t\t\tmEventEntry = sbbEntity.getSbbComponent().getDescriptor().getEventEntries().get(sleeEvent.getEventTypeId());\n\t\t\tif (mEventEntry != null && mEventEntry.isReceived()) {\n\t\t\t\treturn new Result(sbbEntity, true);\t\t\t\t\t\n\t\t\t} else {\n\t\t\t\tif (!sleeEvent.isActivityEndEvent()) {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger\n\t\t\t\t\t\t.debug(\"Event is not received by sbb descriptor of entity \"\n\t\t\t\t\t\t\t\t+ sbbEntityId + \", will not deliver event to sbb entity ...\");\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn new Result(sbbEntity, false);\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\n\t\treturn null;\n\n\t}", "code_tokens": ["public", "Result", "next", "(", "ActivityContext", "ac", ",", "EventContext", "sleeEvent", ",", "Set", "<", "SbbEntityID", ">", "sbbEntitiesThatHandledCurrentEvent", ",", "SleeContainer", "sleeContainer", ")", "{", "SbbEntityID", "sbbEntityId", "=", "null", ";", "SbbEntity", "sbbEntity", "=", "null", ";", "EventEntryDescriptor", "mEventEntry", "=", "null", ";", "// get the highest priority sbb from sbb entities attached to AC", "for", "(", "Iterator", "<", "SbbEntityID", ">", "iter", "=", "ac", ".", "getSortedSbbAttachmentSet", "(", "sbbEntitiesThatHandledCurrentEvent", ")", ".", "iterator", "(", ")", ";", "iter", ".", "hasNext", "(", ")", ";", ")", "{", "sbbEntityId", "=", "iter", ".", "next", "(", ")", ";", "sbbEntity", "=", "sleeContainer", ".", "getSbbEntityFactory", "(", ")", ".", "getSbbEntity", "(", "sbbEntityId", ",", "true", ")", ";", "if", "(", "sbbEntity", "==", "null", ")", "{", "// ignore, sbb entity has been removed", "continue", ";", "}", "if", "(", "eventRouterConfiguration", ".", "isConfirmSbbEntityAttachement", "(", ")", "&&", "!", "sbbEntity", ".", "isAttached", "(", "ac", ".", "getActivityContextHandle", "(", ")", ")", ")", "{", "// detached by a concurrent tx, see Issue 2313 \t\t\t\t", "continue", ";", "}", "if", "(", "sleeEvent", ".", "getService", "(", ")", "!=", "null", "&&", "!", "sleeEvent", ".", "getService", "(", ")", ".", "equals", "(", "sbbEntityId", ".", "getServiceID", "(", ")", ")", ")", "{", "if", "(", "!", "sleeEvent", ".", "isActivityEndEvent", "(", ")", ")", "{", "continue", ";", "}", "else", "{", "return", "new", "Result", "(", "sbbEntity", ",", "false", ")", ";", "}", "}", "// check event is allowed to be handled by the sbb", "mEventEntry", "=", "sbbEntity", ".", "getSbbComponent", "(", ")", ".", "getDescriptor", "(", ")", ".", "getEventEntries", "(", ")", ".", "get", "(", "sleeEvent", ".", "getEventTypeId", "(", ")", ")", ";", "if", "(", "mEventEntry", "!=", "null", "&&", "mEventEntry", ".", "isReceived", "(", ")", ")", "{", "return", "new", "Result", "(", "sbbEntity", ",", "true", ")", ";", "}", "else", "{", "if", "(", "!", "sleeEvent", ".", "isActivityEndEvent", "(", ")", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Event is not received by sbb descriptor of entity \"", "+", "sbbEntityId", "+", "\", will not deliver event to sbb entity ...\"", ")", ";", "}", "continue", ";", "}", "else", "{", "return", "new", "Result", "(", "sbbEntity", ",", "false", ")", ";", "}", "}", "}", "return", "null", ";", "}"], "docstring": "Retrieves the next sbb entity to handle the event.\n\n@param ac\n@param sleeEvent\n@param sbbEntitiesThatHandledCurrentEvent\n@return Result that indicates the next sbb entity to handle the event,\nnote that sbb entities that are not entitled to *deliver* the\nevent (service id is set or the event is not defined in sbb\ndescriptor) will only be returned in case event is activity end\nevent.", "docstring_tokens": ["Retrieves", "the", "next", "sbb", "entity", "to", "handle", "the", "event", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/router/src/main/java/org/mobicents/slee/runtime/eventrouter/routingtask/NextSbbEntityFinder.java#L78-L127", "partition": "test", "index": 6964, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java", "func_name": "ActivityContextNamingFacilityCacheData.getNameBindings", "original_string": "public Map getNameBindings() {\n\n\t\tMap result = new HashMap();\n\t\tNode childNode = null;\n\t\tObject name = null;\n\t\tfor (Object obj : getNode().getChildren()) {\n\t\t\tchildNode = (Node) obj;\n\t\t\tname = childNode.getFqn().getLastElement();\n\t\t\tresult.put(name, childNode.get(CACHE_NODE_MAP_KEY));\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public Map getNameBindings() {\n\n\t\tMap result = new HashMap();\n\t\tNode childNode = null;\n\t\tObject name = null;\n\t\tfor (Object obj : getNode().getChildren()) {\n\t\t\tchildNode = (Node) obj;\n\t\t\tname = childNode.getFqn().getLastElement();\n\t\t\tresult.put(name, childNode.get(CACHE_NODE_MAP_KEY));\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "Map", "getNameBindings", "(", ")", "{", "Map", "result", "=", "new", "HashMap", "(", ")", ";", "Node", "childNode", "=", "null", ";", "Object", "name", "=", "null", ";", "for", "(", "Object", "obj", ":", "getNode", "(", ")", ".", "getChildren", "(", ")", ")", "{", "childNode", "=", "(", "Node", ")", "obj", ";", "name", "=", "childNode", ".", "getFqn", "(", ")", ".", "getLastElement", "(", ")", ";", "result", ".", "put", "(", "name", ",", "childNode", ".", "get", "(", "CACHE_NODE_MAP_KEY", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Retrieves a map of the bindings. Key is the aci name and Value is the activity context handle\n@return", "docstring_tokens": ["Retrieves", "a", "map", "of", "the", "bindings", ".", "Key", "is", "the", "aci", "name", "and", "Value", "is", "the", "activity", "context", "handle"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java#L114-L125", "partition": "test", "index": 6963, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java", "func_name": "ActivityContextNamingFacilityCacheData.lookupName", "original_string": "public Object lookupName(String name) {\n\t\tfinal Node childNode = getNode().getChild(name);\n\t\tif (childNode == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn childNode.get(CACHE_NODE_MAP_KEY);\n\t\t}\n\t}", "language": "java", "code": "public Object lookupName(String name) {\n\t\tfinal Node childNode = getNode().getChild(name);\n\t\tif (childNode == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn childNode.get(CACHE_NODE_MAP_KEY);\n\t\t}\n\t}", "code_tokens": ["public", "Object", "lookupName", "(", "String", "name", ")", "{", "final", "Node", "childNode", "=", "getNode", "(", ")", ".", "getChild", "(", "name", ")", ";", "if", "(", "childNode", "==", "null", ")", "{", "return", "null", ";", "}", "else", "{", "return", "childNode", ".", "get", "(", "CACHE_NODE_MAP_KEY", ")", ";", "}", "}"], "docstring": "Lookup of the activity context id bound to the specified aci name\n@param name\n@return", "docstring_tokens": ["Lookup", "of", "the", "activity", "context", "id", "bound", "to", "the", "specified", "aci", "name"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java#L101-L108", "partition": "test", "index": 6962, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/usage/src/main/java/org/mobicents/slee/container/management/jmx/ServiceUsageMBeanImpl.java", "func_name": "ServiceUsageMBeanImpl.resetAllUsageParameters", "original_string": "public synchronized void resetAllUsageParameters()\r\n\t\t\tthrows ManagementException {\r\n\t\ttry {\r\n\t\t\t//FIXME: hmm, how to check here for clustered... ghmp\r\n\t\t\tfor (UsageMBeanImpl usageMBeanImpl : usageMBeans.values()) {\r\n\t\t\t\tusageMBeanImpl.resetAllUsageParameters();\r\n\t\t\t}\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new ManagementException(e.getMessage(), e);\r\n\t\t}\r\n\t}", "language": "java", "code": "public synchronized void resetAllUsageParameters()\r\n\t\t\tthrows ManagementException {\r\n\t\ttry {\r\n\t\t\t//FIXME: hmm, how to check here for clustered... ghmp\r\n\t\t\tfor (UsageMBeanImpl usageMBeanImpl : usageMBeans.values()) {\r\n\t\t\t\tusageMBeanImpl.resetAllUsageParameters();\r\n\t\t\t}\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new ManagementException(e.getMessage(), e);\r\n\t\t}\r\n\t}", "code_tokens": ["public", "synchronized", "void", "resetAllUsageParameters", "(", ")", "throws", "ManagementException", "{", "try", "{", "//FIXME: hmm, how to check here for clustered... ghmp\r", "for", "(", "UsageMBeanImpl", "usageMBeanImpl", ":", "usageMBeans", ".", "values", "(", ")", ")", "{", "usageMBeanImpl", ".", "resetAllUsageParameters", "(", ")", ";", "}", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "ManagementException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Resets the usage parameters of all SBBs within the Service represented by\nthe ServiceUsageMBean object. The SLEE sets counter-type usage parameters\nto zero and removes all samples from sample-type usage parameters.\n\n@see javax.slee.management.ServiceUsageMBean#resetAllUsageParameters()", "docstring_tokens": ["Resets", "the", "usage", "parameters", "of", "all", "SBBs", "within", "the", "Service", "represented", "by", "the", "ServiceUsageMBean", "object", ".", "The", "SLEE", "sets", "counter", "-", "type", "usage", "parameters", "to", "zero", "and", "removes", "all", "samples", "from", "sample", "-", "type", "usage", "parameters", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/usage/src/main/java/org/mobicents/slee/container/management/jmx/ServiceUsageMBeanImpl.java#L628-L638", "partition": "test", "index": 6953, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointFireEventNotTransactedExecutor.java", "func_name": "SleeEndpointFireEventNotTransactedExecutor.execute", "original_string": "void execute(final ActivityHandle realHandle, final ActivityHandle refHandle,\n\t\t\tfinal FireableEventType eventType, final Object event,\n\t\t\tfinal Address address, final ReceivableService receivableService,\n\t\t\tfinal int eventFlags) throws ActivityIsEndingException,\n\t\t\tFireEventException, SLEEException,\n\t\t\tUnrecognizedActivityHandleException {\n\t\t\n\t\tfinal SleeTransaction tx = super.suspendTransaction();\n\t\ttry {\n\t\t\tsleeEndpoint._fireEvent(realHandle, refHandle, eventType, event, address,\n\t\t\t\t\treceivableService, eventFlags,tx);\n\t\t} finally {\n\t\t\tif (tx != null) {\n\t\t\t\tsuper.resumeTransaction(tx);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "void execute(final ActivityHandle realHandle, final ActivityHandle refHandle,\n\t\t\tfinal FireableEventType eventType, final Object event,\n\t\t\tfinal Address address, final ReceivableService receivableService,\n\t\t\tfinal int eventFlags) throws ActivityIsEndingException,\n\t\t\tFireEventException, SLEEException,\n\t\t\tUnrecognizedActivityHandleException {\n\t\t\n\t\tfinal SleeTransaction tx = super.suspendTransaction();\n\t\ttry {\n\t\t\tsleeEndpoint._fireEvent(realHandle, refHandle, eventType, event, address,\n\t\t\t\t\treceivableService, eventFlags,tx);\n\t\t} finally {\n\t\t\tif (tx != null) {\n\t\t\t\tsuper.resumeTransaction(tx);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["void", "execute", "(", "final", "ActivityHandle", "realHandle", ",", "final", "ActivityHandle", "refHandle", ",", "final", "FireableEventType", "eventType", ",", "final", "Object", "event", ",", "final", "Address", "address", ",", "final", "ReceivableService", "receivableService", ",", "final", "int", "eventFlags", ")", "throws", "ActivityIsEndingException", ",", "FireEventException", ",", "SLEEException", ",", "UnrecognizedActivityHandleException", "{", "final", "SleeTransaction", "tx", "=", "super", ".", "suspendTransaction", "(", ")", ";", "try", "{", "sleeEndpoint", ".", "_fireEvent", "(", "realHandle", ",", "refHandle", ",", "eventType", ",", "event", ",", "address", ",", "receivableService", ",", "eventFlags", ",", "tx", ")", ";", "}", "finally", "{", "if", "(", "tx", "!=", "null", ")", "{", "super", ".", "resumeTransaction", "(", "tx", ")", ";", "}", "}", "}"], "docstring": "Executes a non transacted fire event operation.\n\n@param realHandle\n@param refHandle\n@param eventType\n@param event\n@param address\n@param receivableService\n@param eventFlags\n@throws ActivityIsEndingException\n@throws FireEventException\n@throws SLEEException\n@throws UnrecognizedActivityHandleException", "docstring_tokens": ["Executes", "a", "non", "transacted", "fire", "event", "operation", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/SleeEndpointFireEventNotTransactedExecutor.java#L70-L86", "partition": "test", "index": 6959, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java", "func_name": "ServiceManagementImpl.isRAEntityLinkNameReferenced", "original_string": "public boolean isRAEntityLinkNameReferenced(String raLinkName) {\n\t\tif (raLinkName == null) {\n\t\t\tthrow new NullPointerException(\"null ra link name\");\n\t\t}\n\n\t\tboolean b = false;\n\t\ttry {\n\t\t\tb = transactionManager.requireTransaction();\n\t\t\tfor (ServiceID serviceID : componentRepositoryImpl.getServiceIDs()) {\n\t\t\t\tServiceComponent serviceComponent = componentRepositoryImpl\n\t\t\t\t\t\t.getComponentByID(serviceID);\n\t\t\t\tif (serviceComponent.getServiceState() != ServiceState.INACTIVE\n\t\t\t\t\t\t&& serviceComponent.getResourceAdaptorEntityLinks(\n\t\t\t\t\t\t\t\tcomponentRepositoryImpl).contains(raLinkName)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\ttransactionManager.requireTransactionEnd(b, false);\n\t\t\t} catch (Throwable ex) {\n\t\t\t\tthrow new SLEEException(ex.getMessage(), ex);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public boolean isRAEntityLinkNameReferenced(String raLinkName) {\n\t\tif (raLinkName == null) {\n\t\t\tthrow new NullPointerException(\"null ra link name\");\n\t\t}\n\n\t\tboolean b = false;\n\t\ttry {\n\t\t\tb = transactionManager.requireTransaction();\n\t\t\tfor (ServiceID serviceID : componentRepositoryImpl.getServiceIDs()) {\n\t\t\t\tServiceComponent serviceComponent = componentRepositoryImpl\n\t\t\t\t\t\t.getComponentByID(serviceID);\n\t\t\t\tif (serviceComponent.getServiceState() != ServiceState.INACTIVE\n\t\t\t\t\t\t&& serviceComponent.getResourceAdaptorEntityLinks(\n\t\t\t\t\t\t\t\tcomponentRepositoryImpl).contains(raLinkName)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\ttransactionManager.requireTransactionEnd(b, false);\n\t\t\t} catch (Throwable ex) {\n\t\t\t\tthrow new SLEEException(ex.getMessage(), ex);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "boolean", "isRAEntityLinkNameReferenced", "(", "String", "raLinkName", ")", "{", "if", "(", "raLinkName", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"null ra link name\"", ")", ";", "}", "boolean", "b", "=", "false", ";", "try", "{", "b", "=", "transactionManager", ".", "requireTransaction", "(", ")", ";", "for", "(", "ServiceID", "serviceID", ":", "componentRepositoryImpl", ".", "getServiceIDs", "(", ")", ")", "{", "ServiceComponent", "serviceComponent", "=", "componentRepositoryImpl", ".", "getComponentByID", "(", "serviceID", ")", ";", "if", "(", "serviceComponent", ".", "getServiceState", "(", ")", "!=", "ServiceState", ".", "INACTIVE", "&&", "serviceComponent", ".", "getResourceAdaptorEntityLinks", "(", "componentRepositoryImpl", ")", ".", "contains", "(", "raLinkName", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}", "finally", "{", "try", "{", "transactionManager", ".", "requireTransactionEnd", "(", "b", ",", "false", ")", ";", "}", "catch", "(", "Throwable", "ex", ")", "{", "throw", "new", "SLEEException", "(", "ex", ".", "getMessage", "(", ")", ",", "ex", ")", ";", "}", "}", "}"], "docstring": "Verifies if the specified ra entity link name is referenced by a non\ninactive service.\n\n@param raLinkName\n@return", "docstring_tokens": ["Verifies", "if", "the", "specified", "ra", "entity", "link", "name", "is", "referenced", "by", "a", "non", "inactive", "service", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/management/ServiceManagementImpl.java#L933-L958", "partition": "test", "index": 6951, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.serviceActive", "original_string": "public void serviceActive(ServiceID serviceID) {\r\n\t\ttry {\r\n\t\t\tReceivableService receivableService = resourceAdaptorContext\r\n\t\t\t\t\t.getServiceLookupFacility().getReceivableService(serviceID);\r\n\t\t\tif (receivableService.getReceivableEvents().length > 0) {\r\n\t\t\t\tobject.serviceActive(receivableService);\r\n\t\t\t}\r\n\t\t} catch (Throwable e) {\r\n\t\t\tlogger.warn(\"invocation resulted in unchecked exception\", e);\r\n\t\t}\r\n\t}", "language": "java", "code": "public void serviceActive(ServiceID serviceID) {\r\n\t\ttry {\r\n\t\t\tReceivableService receivableService = resourceAdaptorContext\r\n\t\t\t\t\t.getServiceLookupFacility().getReceivableService(serviceID);\r\n\t\t\tif (receivableService.getReceivableEvents().length > 0) {\r\n\t\t\t\tobject.serviceActive(receivableService);\r\n\t\t\t}\r\n\t\t} catch (Throwable e) {\r\n\t\t\tlogger.warn(\"invocation resulted in unchecked exception\", e);\r\n\t\t}\r\n\t}", "code_tokens": ["public", "void", "serviceActive", "(", "ServiceID", "serviceID", ")", "{", "try", "{", "ReceivableService", "receivableService", "=", "resourceAdaptorContext", ".", "getServiceLookupFacility", "(", ")", ".", "getReceivableService", "(", "serviceID", ")", ";", "if", "(", "receivableService", ".", "getReceivableEvents", "(", ")", ".", "length", ">", "0", ")", "{", "object", ".", "serviceActive", "(", "receivableService", ")", ";", "}", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "warn", "(", "\"invocation resulted in unchecked exception\"", ",", "e", ")", ";", "}", "}"], "docstring": "Indicates a service was activated, the entity will forward this\nnotification to the ra object.\n\n@param serviceInfo", "docstring_tokens": ["Indicates", "a", "service", "was", "activated", "the", "entity", "will", "forward", "this", "notification", "to", "the", "ra", "object", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L557-L567", "partition": "test", "index": 7008, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java", "func_name": "ActivityContextNamingFacilityCacheData.unbindName", "original_string": "public Object unbindName(String name) throws NameNotBoundException {\n\t\tfinal Node node = getNode();\n\t\tfinal Node childNode = node.getChild(name);\n\t\tif (childNode == null) {\n\t\t\tthrow new NameNotBoundException(\"name not bound\");\n\t\t} else {\n\t\t\tfinal Object ach = childNode.get(CACHE_NODE_MAP_KEY);\n\t\t\tnode.removeChild(name);\n\t\t\treturn ach;\n\t\t}\n\t}", "language": "java", "code": "public Object unbindName(String name) throws NameNotBoundException {\n\t\tfinal Node node = getNode();\n\t\tfinal Node childNode = node.getChild(name);\n\t\tif (childNode == null) {\n\t\t\tthrow new NameNotBoundException(\"name not bound\");\n\t\t} else {\n\t\t\tfinal Object ach = childNode.get(CACHE_NODE_MAP_KEY);\n\t\t\tnode.removeChild(name);\n\t\t\treturn ach;\n\t\t}\n\t}", "code_tokens": ["public", "Object", "unbindName", "(", "String", "name", ")", "throws", "NameNotBoundException", "{", "final", "Node", "node", "=", "getNode", "(", ")", ";", "final", "Node", "childNode", "=", "node", ".", "getChild", "(", "name", ")", ";", "if", "(", "childNode", "==", "null", ")", "{", "throw", "new", "NameNotBoundException", "(", "\"name not bound\"", ")", ";", "}", "else", "{", "final", "Object", "ach", "=", "childNode", ".", "get", "(", "CACHE_NODE_MAP_KEY", ")", ";", "node", ".", "removeChild", "(", "name", ")", ";", "return", "ach", ";", "}", "}"], "docstring": "Unbinds the specified aci name with the specified activity context id\n@param name\n@return\n@throws NameNotBoundException", "docstring_tokens": ["Unbinds", "the", "specified", "aci", "name", "with", "the", "specified", "activity", "context", "id"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/ActivityContextNamingFacilityCacheData.java#L84-L94", "partition": "test", "index": 6961, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.activityEnded", "original_string": "public void activityEnded(final ActivityHandle handle, int activityFlags) {\r\n\t\tlogger.trace(\"activityEnded( handle = \" + handle + \" )\");\r\n\t\tActivityHandle ah = null;\r\n\t\tif (handle instanceof ActivityHandleReference) {\r\n\t\t\t// handle is a ref, derrefer and remove the ref\r\n\t\t\tah = resourceManagement.getHandleReferenceFactory().removeActivityHandleReference((ActivityHandleReference) handle);\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// handle is not a reference\r\n\t\t\tah = handle;\r\n\t\t}\r\n\t\tif (ah != null && ActivityFlags.hasRequestEndedCallback(activityFlags)) {\r\n\t\t\tobject.activityEnded(ah);\r\n\t\t}\r\n\t\tif (object.getState() == ResourceAdaptorObjectState.STOPPING) {\r\n\t\t\tsynchronized (this) {\r\n\t\t\t\t// the ra object is stopping, check if the timer task is still\r\n\t\t\t\t// needed\r\n\t\t\t\tif (!hasActivities()) {\r\n\t\t\t\t\tif (timerTask != null) {\r\n\t\t\t\t\t\ttimerTask.cancel();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tallActivitiesEnded();\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}", "language": "java", "code": "public void activityEnded(final ActivityHandle handle, int activityFlags) {\r\n\t\tlogger.trace(\"activityEnded( handle = \" + handle + \" )\");\r\n\t\tActivityHandle ah = null;\r\n\t\tif (handle instanceof ActivityHandleReference) {\r\n\t\t\t// handle is a ref, derrefer and remove the ref\r\n\t\t\tah = resourceManagement.getHandleReferenceFactory().removeActivityHandleReference((ActivityHandleReference) handle);\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// handle is not a reference\r\n\t\t\tah = handle;\r\n\t\t}\r\n\t\tif (ah != null && ActivityFlags.hasRequestEndedCallback(activityFlags)) {\r\n\t\t\tobject.activityEnded(ah);\r\n\t\t}\r\n\t\tif (object.getState() == ResourceAdaptorObjectState.STOPPING) {\r\n\t\t\tsynchronized (this) {\r\n\t\t\t\t// the ra object is stopping, check if the timer task is still\r\n\t\t\t\t// needed\r\n\t\t\t\tif (!hasActivities()) {\r\n\t\t\t\t\tif (timerTask != null) {\r\n\t\t\t\t\t\ttimerTask.cancel();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tallActivitiesEnded();\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}", "code_tokens": ["public", "void", "activityEnded", "(", "final", "ActivityHandle", "handle", ",", "int", "activityFlags", ")", "{", "logger", ".", "trace", "(", "\"activityEnded( handle = \"", "+", "handle", "+", "\" )\"", ")", ";", "ActivityHandle", "ah", "=", "null", ";", "if", "(", "handle", "instanceof", "ActivityHandleReference", ")", "{", "// handle is a ref, derrefer and remove the ref\r", "ah", "=", "resourceManagement", ".", "getHandleReferenceFactory", "(", ")", ".", "removeActivityHandleReference", "(", "(", "ActivityHandleReference", ")", "handle", ")", ";", "}", "else", "{", "// handle is not a reference\r", "ah", "=", "handle", ";", "}", "if", "(", "ah", "!=", "null", "&&", "ActivityFlags", ".", "hasRequestEndedCallback", "(", "activityFlags", ")", ")", "{", "object", ".", "activityEnded", "(", "ah", ")", ";", "}", "if", "(", "object", ".", "getState", "(", ")", "==", "ResourceAdaptorObjectState", ".", "STOPPING", ")", "{", "synchronized", "(", "this", ")", "{", "// the ra object is stopping, check if the timer task is still\r", "// needed\r", "if", "(", "!", "hasActivities", "(", ")", ")", "{", "if", "(", "timerTask", "!=", "null", ")", "{", "timerTask", ".", "cancel", "(", ")", ";", "}", "allActivitiesEnded", "(", ")", ";", "}", "}", "}", "}"], "docstring": "Callback to notify the entity and possibly the ra object, informing activity handled ended.\n@param handle\n@param activityFlags", "docstring_tokens": ["Callback", "to", "notify", "the", "entity", "and", "possibly", "the", "ra", "object", "informing", "activity", "handled", "ended", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L682-L708", "partition": "test", "index": 7010, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/management/jmx/AlarmMBeanImpl.java", "func_name": "AlarmMBeanImpl.raiseAlarm", "original_string": "public String raiseAlarm(NotificationSourceWrapper notificationSource, String alarmType, String instanceID, AlarmLevel level, String message, Throwable cause) {\r\n\r\n\t\tsynchronized (notificationSource) {\r\n\t\t\tif (isAlarmAlive(notificationSource, alarmType, instanceID)) {\r\n\t\t\t\t// Alarm a = this.placeHolderToAlarm.get(new\r\n\t\t\t\t// AlarmPlaceHolder(notificationSource, alarmType, instanceID));\r\n\r\n\t\t\t\tAlarm a = null;\r\n\t\t\t\t// unconveniant....\r\n\t\t\t\ttry {\r\n\t\t\t\t\tAlarmPlaceHolder localAPH = new AlarmPlaceHolder(notificationSource, alarmType, instanceID);\r\n\t\t\t\t\tfor (Map.Entry<String, AlarmPlaceHolder> e : this.alarmIdToAlarm.entrySet()) {\r\n\t\t\t\t\t\tif (e.getValue().equals(localAPH)) {\r\n\t\t\t\t\t\t\ta = e.getValue().getAlarm();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t// ignore\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (a != null) {\r\n\r\n\t\t\t\t\treturn a.getAlarmID();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.raiseAlarm(notificationSource, alarmType, instanceID, level, message, cause);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tAlarm a = new Alarm(UUID.randomUUID().toString(), notificationSource.getNotificationSource(), alarmType, instanceID, level, message, cause, System.currentTimeMillis());\r\n\t\t\t\tAlarmPlaceHolder aph = new AlarmPlaceHolder(notificationSource, alarmType, instanceID, a);\r\n\t\t\t\tthis.alarmIdToAlarm.put(a.getAlarmID(), aph);\r\n\t\t\t\t// this.placeHolderToAlarm.put(aph, a);\r\n\t\t\t\tthis.placeHolderToNotificationSource.put(aph, aph.getNotificationSource().getNotificationSource());\r\n\t\t\t\tgenerateNotification(aph, false);\r\n\t\t\t\treturn a.getAlarmID();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}", "language": "java", "code": "public String raiseAlarm(NotificationSourceWrapper notificationSource, String alarmType, String instanceID, AlarmLevel level, String message, Throwable cause) {\r\n\r\n\t\tsynchronized (notificationSource) {\r\n\t\t\tif (isAlarmAlive(notificationSource, alarmType, instanceID)) {\r\n\t\t\t\t// Alarm a = this.placeHolderToAlarm.get(new\r\n\t\t\t\t// AlarmPlaceHolder(notificationSource, alarmType, instanceID));\r\n\r\n\t\t\t\tAlarm a = null;\r\n\t\t\t\t// unconveniant....\r\n\t\t\t\ttry {\r\n\t\t\t\t\tAlarmPlaceHolder localAPH = new AlarmPlaceHolder(notificationSource, alarmType, instanceID);\r\n\t\t\t\t\tfor (Map.Entry<String, AlarmPlaceHolder> e : this.alarmIdToAlarm.entrySet()) {\r\n\t\t\t\t\t\tif (e.getValue().equals(localAPH)) {\r\n\t\t\t\t\t\t\ta = e.getValue().getAlarm();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t// ignore\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (a != null) {\r\n\r\n\t\t\t\t\treturn a.getAlarmID();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.raiseAlarm(notificationSource, alarmType, instanceID, level, message, cause);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tAlarm a = new Alarm(UUID.randomUUID().toString(), notificationSource.getNotificationSource(), alarmType, instanceID, level, message, cause, System.currentTimeMillis());\r\n\t\t\t\tAlarmPlaceHolder aph = new AlarmPlaceHolder(notificationSource, alarmType, instanceID, a);\r\n\t\t\t\tthis.alarmIdToAlarm.put(a.getAlarmID(), aph);\r\n\t\t\t\t// this.placeHolderToAlarm.put(aph, a);\r\n\t\t\t\tthis.placeHolderToNotificationSource.put(aph, aph.getNotificationSource().getNotificationSource());\r\n\t\t\t\tgenerateNotification(aph, false);\r\n\t\t\t\treturn a.getAlarmID();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}", "code_tokens": ["public", "String", "raiseAlarm", "(", "NotificationSourceWrapper", "notificationSource", ",", "String", "alarmType", ",", "String", "instanceID", ",", "AlarmLevel", "level", ",", "String", "message", ",", "Throwable", "cause", ")", "{", "synchronized", "(", "notificationSource", ")", "{", "if", "(", "isAlarmAlive", "(", "notificationSource", ",", "alarmType", ",", "instanceID", ")", ")", "{", "// Alarm a = this.placeHolderToAlarm.get(new\r", "// AlarmPlaceHolder(notificationSource, alarmType, instanceID));\r", "Alarm", "a", "=", "null", ";", "// unconveniant....\r", "try", "{", "AlarmPlaceHolder", "localAPH", "=", "new", "AlarmPlaceHolder", "(", "notificationSource", ",", "alarmType", ",", "instanceID", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "AlarmPlaceHolder", ">", "e", ":", "this", ".", "alarmIdToAlarm", ".", "entrySet", "(", ")", ")", "{", "if", "(", "e", ".", "getValue", "(", ")", ".", "equals", "(", "localAPH", ")", ")", "{", "a", "=", "e", ".", "getValue", "(", ")", ".", "getAlarm", "(", ")", ";", "break", ";", "}", "}", "}", "catch", "(", "Exception", "e", ")", "{", "// ignore\r", "}", "if", "(", "a", "!=", "null", ")", "{", "return", "a", ".", "getAlarmID", "(", ")", ";", "}", "else", "{", "return", "this", ".", "raiseAlarm", "(", "notificationSource", ",", "alarmType", ",", "instanceID", ",", "level", ",", "message", ",", "cause", ")", ";", "}", "}", "else", "{", "Alarm", "a", "=", "new", "Alarm", "(", "UUID", ".", "randomUUID", "(", ")", ".", "toString", "(", ")", ",", "notificationSource", ".", "getNotificationSource", "(", ")", ",", "alarmType", ",", "instanceID", ",", "level", ",", "message", ",", "cause", ",", "System", ".", "currentTimeMillis", "(", ")", ")", ";", "AlarmPlaceHolder", "aph", "=", "new", "AlarmPlaceHolder", "(", "notificationSource", ",", "alarmType", ",", "instanceID", ",", "a", ")", ";", "this", ".", "alarmIdToAlarm", ".", "put", "(", "a", ".", "getAlarmID", "(", ")", ",", "aph", ")", ";", "// this.placeHolderToAlarm.put(aph, a);\r", "this", ".", "placeHolderToNotificationSource", ".", "put", "(", "aph", ",", "aph", ".", "getNotificationSource", "(", ")", ".", "getNotificationSource", "(", ")", ")", ";", "generateNotification", "(", "aph", ",", "false", ")", ";", "return", "a", ".", "getAlarmID", "(", ")", ";", "}", "}", "}"], "docstring": "THis methods raises alarm. It MUST not receive AlarmLevel.CLEAR, it has\nto be filtered.\n\n@param notificationSource\n@param alarmType\n@param instanceID\n@param level\n@param message\n@param cause\n@return - AlarmId", "docstring_tokens": ["THis", "methods", "raises", "alarm", ".", "It", "MUST", "not", "receive", "AlarmLevel", ".", "CLEAR", "it", "has", "to", "be", "filtered", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/management/jmx/AlarmMBeanImpl.java#L328-L366", "partition": "test", "index": 7033, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/ClassUtils.java", "func_name": "ClassUtils.getInterfaceMethodsFromInterface", "original_string": "public static Map getInterfaceMethodsFromInterface(CtClass interfaceClass,\n            Map exceptMethods) {\n    \n        HashMap interfaceMethods = new HashMap();\n        CtMethod[] methods = interfaceClass.getDeclaredMethods();\n        for (int i = 0; i < methods.length; i++)\n        {\n            if (exceptMethods.get(methods[i].getName()) == null)\n            {\n                    ConcreteClassGeneratorUtils.logger.trace(methods[i].getName());\n                    interfaceMethods.put(getMethodKey(methods[i]), methods[i]);\n            }\n        }\n    \n        Map temp = getSuperClassesAbstractMethodsFromInterface(interfaceClass);\n        for (Iterator i= temp.keySet().iterator(); i.hasNext(); )\n        {\n            String key = (String)i.next();\n            if (!exceptMethods.containsKey(key)) {\n                    interfaceMethods.put(key, temp.get(key));\n            }\n        }\n    \n        return interfaceMethods;\n    }", "language": "java", "code": "public static Map getInterfaceMethodsFromInterface(CtClass interfaceClass,\n            Map exceptMethods) {\n    \n        HashMap interfaceMethods = new HashMap();\n        CtMethod[] methods = interfaceClass.getDeclaredMethods();\n        for (int i = 0; i < methods.length; i++)\n        {\n            if (exceptMethods.get(methods[i].getName()) == null)\n            {\n                    ConcreteClassGeneratorUtils.logger.trace(methods[i].getName());\n                    interfaceMethods.put(getMethodKey(methods[i]), methods[i]);\n            }\n        }\n    \n        Map temp = getSuperClassesAbstractMethodsFromInterface(interfaceClass);\n        for (Iterator i= temp.keySet().iterator(); i.hasNext(); )\n        {\n            String key = (String)i.next();\n            if (!exceptMethods.containsKey(key)) {\n                    interfaceMethods.put(key, temp.get(key));\n            }\n        }\n    \n        return interfaceMethods;\n    }", "code_tokens": ["public", "static", "Map", "getInterfaceMethodsFromInterface", "(", "CtClass", "interfaceClass", ",", "Map", "exceptMethods", ")", "{", "HashMap", "interfaceMethods", "=", "new", "HashMap", "(", ")", ";", "CtMethod", "[", "]", "methods", "=", "interfaceClass", ".", "getDeclaredMethods", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "methods", ".", "length", ";", "i", "++", ")", "{", "if", "(", "exceptMethods", ".", "get", "(", "methods", "[", "i", "]", ".", "getName", "(", ")", ")", "==", "null", ")", "{", "ConcreteClassGeneratorUtils", ".", "logger", ".", "trace", "(", "methods", "[", "i", "]", ".", "getName", "(", ")", ")", ";", "interfaceMethods", ".", "put", "(", "getMethodKey", "(", "methods", "[", "i", "]", ")", ",", "methods", "[", "i", "]", ")", ";", "}", "}", "Map", "temp", "=", "getSuperClassesAbstractMethodsFromInterface", "(", "interfaceClass", ")", ";", "for", "(", "Iterator", "i", "=", "temp", ".", "keySet", "(", ")", ".", "iterator", "(", ")", ";", "i", ".", "hasNext", "(", ")", ";", ")", "{", "String", "key", "=", "(", "String", ")", "i", ".", "next", "(", ")", ";", "if", "(", "!", "exceptMethods", ".", "containsKey", "(", "key", ")", ")", "{", "interfaceMethods", ".", "put", "(", "key", ",", "temp", ".", "get", "(", "key", ")", ")", ";", "}", "}", "return", "interfaceMethods", ";", "}"], "docstring": "Retrieve all methods from an interface, including super interfaces, except the ones specified in the provided map\n@param interfaceClass\n@param exceptMethods\n@return", "docstring_tokens": ["Retrieve", "all", "methods", "from", "an", "interface", "including", "super", "interfaces", "except", "the", "ones", "specified", "in", "the", "provided", "map"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/ClassUtils.java#L425-L449", "partition": "test", "index": 7029, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/ClassUtils.java", "func_name": "ClassUtils.getAbstractMethodsFromClass", "original_string": "public static Map getAbstractMethodsFromClass(CtClass sbbAbstractClass) {\n    \tHashMap abstractMethods = new HashMap();\n    \tCtMethod[] methods = sbbAbstractClass.getDeclaredMethods();\n    \tfor (int i = 0; i < methods.length; i++) {\n    \t\tif (Modifier.isAbstract(methods[i].getModifiers())) {\n    \t\t\tabstractMethods.put(methods[i].getName(), methods[i]);\n    \t\t}\n    \t}\n    \t\n    \treturn abstractMethods;\n    }", "language": "java", "code": "public static Map getAbstractMethodsFromClass(CtClass sbbAbstractClass) {\n    \tHashMap abstractMethods = new HashMap();\n    \tCtMethod[] methods = sbbAbstractClass.getDeclaredMethods();\n    \tfor (int i = 0; i < methods.length; i++) {\n    \t\tif (Modifier.isAbstract(methods[i].getModifiers())) {\n    \t\t\tabstractMethods.put(methods[i].getName(), methods[i]);\n    \t\t}\n    \t}\n    \t\n    \treturn abstractMethods;\n    }", "code_tokens": ["public", "static", "Map", "getAbstractMethodsFromClass", "(", "CtClass", "sbbAbstractClass", ")", "{", "HashMap", "abstractMethods", "=", "new", "HashMap", "(", ")", ";", "CtMethod", "[", "]", "methods", "=", "sbbAbstractClass", ".", "getDeclaredMethods", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "methods", ".", "length", ";", "i", "++", ")", "{", "if", "(", "Modifier", ".", "isAbstract", "(", "methods", "[", "i", "]", ".", "getModifiers", "(", ")", ")", ")", "{", "abstractMethods", ".", "put", "(", "methods", "[", "i", "]", ".", "getName", "(", ")", ",", "methods", "[", "i", "]", ")", ";", "}", "}", "return", "abstractMethods", ";", "}"], "docstring": "Retrieve all abstract methods from a class\n\n@param sbbAbstractClass\nthe class to extract the abstract methods\n@return all abstract methods from a class", "docstring_tokens": ["Retrieve", "all", "abstract", "methods", "from", "a", "class"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/ClassUtils.java#L268-L278", "partition": "test", "index": 7028, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbAbstractMethodHandler.java", "func_name": "SbbAbstractMethodHandler.getSbbUsageParameterSet", "original_string": "public static Object getSbbUsageParameterSet(SbbEntity sbbEntity, String name)\n\t\t\tthrows UnrecognizedUsageParameterSetNameException {\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"getSbbUsageParameterSet(): serviceId = \"\n\t\t\t\t\t+ sbbEntity.getSbbEntityId().getServiceID() + \" , sbbID = \"\n\t\t\t\t\t+ sbbEntity.getSbbId() + \" , name = \" + name);\n\t\t}\n\t\treturn getServiceUsageMBeanImpl(sbbEntity.getSbbEntityId().getServiceID())\n\t\t\t\t.getInstalledUsageParameterSet(sbbEntity.getSbbId(), name);\n\t}", "language": "java", "code": "public static Object getSbbUsageParameterSet(SbbEntity sbbEntity, String name)\n\t\t\tthrows UnrecognizedUsageParameterSetNameException {\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"getSbbUsageParameterSet(): serviceId = \"\n\t\t\t\t\t+ sbbEntity.getSbbEntityId().getServiceID() + \" , sbbID = \"\n\t\t\t\t\t+ sbbEntity.getSbbId() + \" , name = \" + name);\n\t\t}\n\t\treturn getServiceUsageMBeanImpl(sbbEntity.getSbbEntityId().getServiceID())\n\t\t\t\t.getInstalledUsageParameterSet(sbbEntity.getSbbId(), name);\n\t}", "code_tokens": ["public", "static", "Object", "getSbbUsageParameterSet", "(", "SbbEntity", "sbbEntity", ",", "String", "name", ")", "throws", "UnrecognizedUsageParameterSetNameException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"getSbbUsageParameterSet(): serviceId = \"", "+", "sbbEntity", ".", "getSbbEntityId", "(", ")", ".", "getServiceID", "(", ")", "+", "\" , sbbID = \"", "+", "sbbEntity", ".", "getSbbId", "(", ")", "+", "\" , name = \"", "+", "name", ")", ";", "}", "return", "getServiceUsageMBeanImpl", "(", "sbbEntity", ".", "getSbbEntityId", "(", ")", ".", "getServiceID", "(", ")", ")", ".", "getInstalledUsageParameterSet", "(", "sbbEntity", ".", "getSbbId", "(", ")", ",", "name", ")", ";", "}"], "docstring": "SBB USAGE PARAMS", "docstring_tokens": ["SBB", "USAGE", "PARAMS"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbAbstractMethodHandler.java#L590-L599", "partition": "test", "index": 7027, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbAbstractMethodHandler.java", "func_name": "SbbAbstractMethodHandler.getProfileCMPMethod", "original_string": "public static Object getProfileCMPMethod(SbbEntity sbbEntity,\n\t\t\tString getProfileCMPMethodName, ProfileID profileID)\n\t\t\tthrows UnrecognizedProfileTableNameException,\n\t\t\tUnrecognizedProfileNameException {\n\n\t\tGetProfileCMPMethodDescriptor mGetProfileCMPMethod = sbbEntity.getSbbComponent()\n\t\t\t\t.getDescriptor().getGetProfileCMPMethods().get(\n\t\t\t\t\t\tgetProfileCMPMethodName);\n\t\tif (mGetProfileCMPMethod == null)\n\t\t\tthrow new AbstractMethodError(\"Profile CMP Method not found\");\n\n\t\tif (sbbEntity.getSbbObject().getState() != SbbObjectState.READY) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Could not invoke getProfileCMP Method, Sbb Object is not in the READY state!\");\n\t\t}\n\n\t\tProfileManagement sleeProfileManager = sleeContainer\n\t\t\t\t.getSleeProfileTableManager();\n\n\t\tProfileTable profileTable = sleeProfileManager.getProfileTable(profileID.getProfileTableName());\n\n\t\tif (!profileTable.profileExists(profileID.getProfileName())) {\n\t\t\tthrow new UnrecognizedProfileNameException(profileID.toString());\n\t\t}\n\t\n\t\treturn profileTable.getProfile(profileID.getProfileName()).getProfileCmpSlee10Wrapper();\t\t\n\t}", "language": "java", "code": "public static Object getProfileCMPMethod(SbbEntity sbbEntity,\n\t\t\tString getProfileCMPMethodName, ProfileID profileID)\n\t\t\tthrows UnrecognizedProfileTableNameException,\n\t\t\tUnrecognizedProfileNameException {\n\n\t\tGetProfileCMPMethodDescriptor mGetProfileCMPMethod = sbbEntity.getSbbComponent()\n\t\t\t\t.getDescriptor().getGetProfileCMPMethods().get(\n\t\t\t\t\t\tgetProfileCMPMethodName);\n\t\tif (mGetProfileCMPMethod == null)\n\t\t\tthrow new AbstractMethodError(\"Profile CMP Method not found\");\n\n\t\tif (sbbEntity.getSbbObject().getState() != SbbObjectState.READY) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Could not invoke getProfileCMP Method, Sbb Object is not in the READY state!\");\n\t\t}\n\n\t\tProfileManagement sleeProfileManager = sleeContainer\n\t\t\t\t.getSleeProfileTableManager();\n\n\t\tProfileTable profileTable = sleeProfileManager.getProfileTable(profileID.getProfileTableName());\n\n\t\tif (!profileTable.profileExists(profileID.getProfileName())) {\n\t\t\tthrow new UnrecognizedProfileNameException(profileID.toString());\n\t\t}\n\t\n\t\treturn profileTable.getProfile(profileID.getProfileName()).getProfileCmpSlee10Wrapper();\t\t\n\t}", "code_tokens": ["public", "static", "Object", "getProfileCMPMethod", "(", "SbbEntity", "sbbEntity", ",", "String", "getProfileCMPMethodName", ",", "ProfileID", "profileID", ")", "throws", "UnrecognizedProfileTableNameException", ",", "UnrecognizedProfileNameException", "{", "GetProfileCMPMethodDescriptor", "mGetProfileCMPMethod", "=", "sbbEntity", ".", "getSbbComponent", "(", ")", ".", "getDescriptor", "(", ")", ".", "getGetProfileCMPMethods", "(", ")", ".", "get", "(", "getProfileCMPMethodName", ")", ";", "if", "(", "mGetProfileCMPMethod", "==", "null", ")", "throw", "new", "AbstractMethodError", "(", "\"Profile CMP Method not found\"", ")", ";", "if", "(", "sbbEntity", ".", "getSbbObject", "(", ")", ".", "getState", "(", ")", "!=", "SbbObjectState", ".", "READY", ")", "{", "throw", "new", "IllegalStateException", "(", "\"Could not invoke getProfileCMP Method, Sbb Object is not in the READY state!\"", ")", ";", "}", "ProfileManagement", "sleeProfileManager", "=", "sleeContainer", ".", "getSleeProfileTableManager", "(", ")", ";", "ProfileTable", "profileTable", "=", "sleeProfileManager", ".", "getProfileTable", "(", "profileID", ".", "getProfileTableName", "(", ")", ")", ";", "if", "(", "!", "profileTable", ".", "profileExists", "(", "profileID", ".", "getProfileName", "(", ")", ")", ")", "{", "throw", "new", "UnrecognizedProfileNameException", "(", "profileID", ".", "toString", "(", ")", ")", ";", "}", "return", "profileTable", ".", "getProfile", "(", "profileID", ".", "getProfileName", "(", ")", ")", ".", "getProfileCmpSlee10Wrapper", "(", ")", ";", "}"], "docstring": "Retrieves a profile given the cmp method name and profile id", "docstring_tokens": ["Retrieves", "a", "profile", "given", "the", "cmp", "method", "name", "and", "profile", "id"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbAbstractMethodHandler.java#L560-L586", "partition": "test", "index": 7026, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java", "func_name": "ConcreteClassGeneratorUtils.createInheritanceLink", "original_string": "public static void createInheritanceLink(CtClass concreteClass,\r\n\t\t\tCtClass superClass) {\r\n\t\tif (superClass == null)\r\n\t\t\treturn;\r\n\t\ttry {\r\n\t\t\tconcreteClass.setSuperclass(superClass);\r\n\t\t\tlogger.trace(concreteClass.getName() + \" Inheritance link with \"\r\n\t\t\t\t\t+ superClass.getName() + \" class created\");\r\n\t\t} catch (CannotCompileException cce) {\r\n\t\t\tcce.printStackTrace();\r\n\t\t}\r\n\t}", "language": "java", "code": "public static void createInheritanceLink(CtClass concreteClass,\r\n\t\t\tCtClass superClass) {\r\n\t\tif (superClass == null)\r\n\t\t\treturn;\r\n\t\ttry {\r\n\t\t\tconcreteClass.setSuperclass(superClass);\r\n\t\t\tlogger.trace(concreteClass.getName() + \" Inheritance link with \"\r\n\t\t\t\t\t+ superClass.getName() + \" class created\");\r\n\t\t} catch (CannotCompileException cce) {\r\n\t\t\tcce.printStackTrace();\r\n\t\t}\r\n\t}", "code_tokens": ["public", "static", "void", "createInheritanceLink", "(", "CtClass", "concreteClass", ",", "CtClass", "superClass", ")", "{", "if", "(", "superClass", "==", "null", ")", "return", ";", "try", "{", "concreteClass", ".", "setSuperclass", "(", "superClass", ")", ";", "logger", ".", "trace", "(", "concreteClass", ".", "getName", "(", ")", "+", "\" Inheritance link with \"", "+", "superClass", ".", "getName", "(", ")", "+", "\" class created\"", ")", ";", "}", "catch", "(", "CannotCompileException", "cce", ")", "{", "cce", ".", "printStackTrace", "(", ")", ";", "}", "}"], "docstring": "Create the inheritance link with the sbb absract class provided by the\nsbb developer\n\n@param concreteClass\nthe concrete class to which to add the inheritance link\n@param superClass\nthe superClass to set", "docstring_tokens": ["Create", "the", "inheritance", "link", "with", "the", "sbb", "absract", "class", "provided", "by", "the", "sbb", "developer"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java#L222-L233", "partition": "test", "index": 6942, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java", "func_name": "ConcreteClassGeneratorUtils.copyMethods", "original_string": "public static void copyMethods(CtClass source, CtClass destination,\r\n\t\t\tCtClass[] exceptions) {\r\n\t\tcopyMethods(source.getDeclaredMethods(), destination, exceptions);\r\n\t}", "language": "java", "code": "public static void copyMethods(CtClass source, CtClass destination,\r\n\t\t\tCtClass[] exceptions) {\r\n\t\tcopyMethods(source.getDeclaredMethods(), destination, exceptions);\r\n\t}", "code_tokens": ["public", "static", "void", "copyMethods", "(", "CtClass", "source", ",", "CtClass", "destination", ",", "CtClass", "[", "]", "exceptions", ")", "{", "copyMethods", "(", "source", ".", "getDeclaredMethods", "(", ")", ",", "destination", ",", "exceptions", ")", ";", "}"], "docstring": "Copy declared methods from one class to another\n\n@param source\nthe class from which the methods are copied\n@param destination\nthe class to which the methods are copied\n@param exceptions\noptionnal, defines the set of exceptions the methods can throw", "docstring_tokens": ["Copy", "declared", "methods", "from", "one", "class", "to", "another"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java#L478-L481", "partition": "test", "index": 6943, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbAbstractMethodHandler.java", "func_name": "SbbAbstractMethodHandler.fireEvent", "original_string": "public static void fireEvent(SbbEntity sbbEntity, EventTypeID eventTypeID,\n\t\t\tObject eventObject, ActivityContextInterface aci, Address address,\n\t\t\tServiceID serviceID) {\n\n\t\tif (sleeContainer.getCongestionControl().refuseFireEvent()) {\n\t\t\tthrow new SLEEException(\"congestion control refused event\");\n\t\t}\n\n\t\t// JAIN SLEE (TM) specs - Section 8.4.1\n\t\t// The SBB object must have an assigned SBB entity when it invokes this\n\t\t// method.\n\t\t// Otherwise, this method throws a java.lang.IllegalStateException.\n\t\tif (sbbEntity == null || sbbEntity.getSbbObject() == null\n\t\t\t\t|| sbbEntity.getSbbObject().getState() != SbbObjectState.READY)\n\t\t\tthrow new IllegalStateException(\"SbbObject not assigned!\");\n\n\t\t// JAIN SLEE (TM) specs - Section 8.4.1\n\t\t// The event ... cannot be null. If ... argument is null, the fire\n\t\t// event method throws a java.lang.NullPointerException.\n\t\tif (eventObject == null)\n\t\t\tthrow new NullPointerException(\n\t\t\t\t\t\"JAIN SLEE (TM) specs - Section 8.4.1: The event ... cannot be null. If ... argument is null, the fire event method throws a java.lang.NullPointerException.\");\n\n\t\t// JAIN SLEE (TM) specs - Section 8.4.1\n\t\t// The activity ... cannot be null. If ... argument is null, the fire\n\t\t// event method throws a java.lang.NullPointerException.\n\t\tif (aci == null)\n\t\t\tthrow new NullPointerException(\n\t\t\t\t\t\"JAIN SLEE (TM) specs - Section 8.4.1: The activity ... cannot be null. If ... argument is null, the fire event method throws a java.lang.NullPointerException.\");\n\n\t\t// JAIN SLEE (TM) specs - Section 8.4.1\n\t\t// It is a mandatory transactional method (see Section 9.6.1).\n\t\tfinal SleeTransactionManager txManager = sleeContainer.getTransactionManager();\n\t\ttxManager.mandateTransaction();\n\n\t\t// rebuild the ac from the aci in the 2nd argument of the invoked\n\t\t// method, check it's state\n\t\tActivityContext ac = ((org.mobicents.slee.container.activity.ActivityContextInterface) aci)\n\t\t\t\t.getActivityContext();\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"invoke(): firing event on \"\n\t\t\t\t\t+ ac);\n\t\t}\n\t\t\n\t\t// exception not in specs by mandated by\n\t\t// tests/activities/activitycontext/Test560Test.xml , it's preferable to\n\t\t// do double check on here than have the aci fire method throwing it and\n\t\t// the ra slee endpoint having to translate it to activity ending\n\t\t// exception, it is not common to have custom event firing in sbbs\n\t\tif (ac.isEnding()) {\n\t\t\tthrow new IllegalStateException(\"activity context \"\n\t\t\t\t\t+ ac.getActivityContextHandle() + \" is ending\");\n\t\t}\n\t\t\n\t\tfinal EventRoutingTransactionData transactionData = txManager.getTransactionContext().getEventRoutingTransactionData();\n\t\tif (transactionData != null) {\n\t\t\tfinal EventContext eventBeingDelivered = transactionData.getEventBeingDelivered();\n\t\t\tif (eventBeingDelivered != null && eventBeingDelivered.getEvent() == eventObject) {\n\t\t\t\t// there is an event being delivered by this tx and it matches the event being fired, lets copy the ref handler\n\t\t\t\t// fire the event\n\t\t\t\tac.fireEvent(eventTypeID, eventObject, (Address) address, serviceID, eventBeingDelivered);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t// seems it is not a refire\n\t\tac.fireEvent(eventTypeID, eventObject, (Address) address, serviceID, null, null, null);\t\n\n\t}", "language": "java", "code": "public static void fireEvent(SbbEntity sbbEntity, EventTypeID eventTypeID,\n\t\t\tObject eventObject, ActivityContextInterface aci, Address address,\n\t\t\tServiceID serviceID) {\n\n\t\tif (sleeContainer.getCongestionControl().refuseFireEvent()) {\n\t\t\tthrow new SLEEException(\"congestion control refused event\");\n\t\t}\n\n\t\t// JAIN SLEE (TM) specs - Section 8.4.1\n\t\t// The SBB object must have an assigned SBB entity when it invokes this\n\t\t// method.\n\t\t// Otherwise, this method throws a java.lang.IllegalStateException.\n\t\tif (sbbEntity == null || sbbEntity.getSbbObject() == null\n\t\t\t\t|| sbbEntity.getSbbObject().getState() != SbbObjectState.READY)\n\t\t\tthrow new IllegalStateException(\"SbbObject not assigned!\");\n\n\t\t// JAIN SLEE (TM) specs - Section 8.4.1\n\t\t// The event ... cannot be null. If ... argument is null, the fire\n\t\t// event method throws a java.lang.NullPointerException.\n\t\tif (eventObject == null)\n\t\t\tthrow new NullPointerException(\n\t\t\t\t\t\"JAIN SLEE (TM) specs - Section 8.4.1: The event ... cannot be null. If ... argument is null, the fire event method throws a java.lang.NullPointerException.\");\n\n\t\t// JAIN SLEE (TM) specs - Section 8.4.1\n\t\t// The activity ... cannot be null. If ... argument is null, the fire\n\t\t// event method throws a java.lang.NullPointerException.\n\t\tif (aci == null)\n\t\t\tthrow new NullPointerException(\n\t\t\t\t\t\"JAIN SLEE (TM) specs - Section 8.4.1: The activity ... cannot be null. If ... argument is null, the fire event method throws a java.lang.NullPointerException.\");\n\n\t\t// JAIN SLEE (TM) specs - Section 8.4.1\n\t\t// It is a mandatory transactional method (see Section 9.6.1).\n\t\tfinal SleeTransactionManager txManager = sleeContainer.getTransactionManager();\n\t\ttxManager.mandateTransaction();\n\n\t\t// rebuild the ac from the aci in the 2nd argument of the invoked\n\t\t// method, check it's state\n\t\tActivityContext ac = ((org.mobicents.slee.container.activity.ActivityContextInterface) aci)\n\t\t\t\t.getActivityContext();\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"invoke(): firing event on \"\n\t\t\t\t\t+ ac);\n\t\t}\n\t\t\n\t\t// exception not in specs by mandated by\n\t\t// tests/activities/activitycontext/Test560Test.xml , it's preferable to\n\t\t// do double check on here than have the aci fire method throwing it and\n\t\t// the ra slee endpoint having to translate it to activity ending\n\t\t// exception, it is not common to have custom event firing in sbbs\n\t\tif (ac.isEnding()) {\n\t\t\tthrow new IllegalStateException(\"activity context \"\n\t\t\t\t\t+ ac.getActivityContextHandle() + \" is ending\");\n\t\t}\n\t\t\n\t\tfinal EventRoutingTransactionData transactionData = txManager.getTransactionContext().getEventRoutingTransactionData();\n\t\tif (transactionData != null) {\n\t\t\tfinal EventContext eventBeingDelivered = transactionData.getEventBeingDelivered();\n\t\t\tif (eventBeingDelivered != null && eventBeingDelivered.getEvent() == eventObject) {\n\t\t\t\t// there is an event being delivered by this tx and it matches the event being fired, lets copy the ref handler\n\t\t\t\t// fire the event\n\t\t\t\tac.fireEvent(eventTypeID, eventObject, (Address) address, serviceID, eventBeingDelivered);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t// seems it is not a refire\n\t\tac.fireEvent(eventTypeID, eventObject, (Address) address, serviceID, null, null, null);\t\n\n\t}", "code_tokens": ["public", "static", "void", "fireEvent", "(", "SbbEntity", "sbbEntity", ",", "EventTypeID", "eventTypeID", ",", "Object", "eventObject", ",", "ActivityContextInterface", "aci", ",", "Address", "address", ",", "ServiceID", "serviceID", ")", "{", "if", "(", "sleeContainer", ".", "getCongestionControl", "(", ")", ".", "refuseFireEvent", "(", ")", ")", "{", "throw", "new", "SLEEException", "(", "\"congestion control refused event\"", ")", ";", "}", "// JAIN SLEE (TM) specs - Section 8.4.1", "// The SBB object must have an assigned SBB entity when it invokes this", "// method.", "// Otherwise, this method throws a java.lang.IllegalStateException.", "if", "(", "sbbEntity", "==", "null", "||", "sbbEntity", ".", "getSbbObject", "(", ")", "==", "null", "||", "sbbEntity", ".", "getSbbObject", "(", ")", ".", "getState", "(", ")", "!=", "SbbObjectState", ".", "READY", ")", "throw", "new", "IllegalStateException", "(", "\"SbbObject not assigned!\"", ")", ";", "// JAIN SLEE (TM) specs - Section 8.4.1", "// The event ... cannot be null. If ... argument is null, the fire", "// event method throws a java.lang.NullPointerException.", "if", "(", "eventObject", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"JAIN SLEE (TM) specs - Section 8.4.1: The event ... cannot be null. If ... argument is null, the fire event method throws a java.lang.NullPointerException.\"", ")", ";", "// JAIN SLEE (TM) specs - Section 8.4.1", "// The activity ... cannot be null. If ... argument is null, the fire", "// event method throws a java.lang.NullPointerException.", "if", "(", "aci", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"JAIN SLEE (TM) specs - Section 8.4.1: The activity ... cannot be null. If ... argument is null, the fire event method throws a java.lang.NullPointerException.\"", ")", ";", "// JAIN SLEE (TM) specs - Section 8.4.1", "// It is a mandatory transactional method (see Section 9.6.1).", "final", "SleeTransactionManager", "txManager", "=", "sleeContainer", ".", "getTransactionManager", "(", ")", ";", "txManager", ".", "mandateTransaction", "(", ")", ";", "// rebuild the ac from the aci in the 2nd argument of the invoked", "// method, check it's state", "ActivityContext", "ac", "=", "(", "(", "org", ".", "mobicents", ".", "slee", ".", "container", ".", "activity", ".", "ActivityContextInterface", ")", "aci", ")", ".", "getActivityContext", "(", ")", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"invoke(): firing event on \"", "+", "ac", ")", ";", "}", "// exception not in specs by mandated by", "// tests/activities/activitycontext/Test560Test.xml , it's preferable to", "// do double check on here than have the aci fire method throwing it and", "// the ra slee endpoint having to translate it to activity ending", "// exception, it is not common to have custom event firing in sbbs", "if", "(", "ac", ".", "isEnding", "(", ")", ")", "{", "throw", "new", "IllegalStateException", "(", "\"activity context \"", "+", "ac", ".", "getActivityContextHandle", "(", ")", "+", "\" is ending\"", ")", ";", "}", "final", "EventRoutingTransactionData", "transactionData", "=", "txManager", ".", "getTransactionContext", "(", ")", ".", "getEventRoutingTransactionData", "(", ")", ";", "if", "(", "transactionData", "!=", "null", ")", "{", "final", "EventContext", "eventBeingDelivered", "=", "transactionData", ".", "getEventBeingDelivered", "(", ")", ";", "if", "(", "eventBeingDelivered", "!=", "null", "&&", "eventBeingDelivered", ".", "getEvent", "(", ")", "==", "eventObject", ")", "{", "// there is an event being delivered by this tx and it matches the event being fired, lets copy the ref handler", "// fire the event", "ac", ".", "fireEvent", "(", "eventTypeID", ",", "eventObject", ",", "(", "Address", ")", "address", ",", "serviceID", ",", "eventBeingDelivered", ")", ";", "return", ";", "}", "}", "// seems it is not a refire", "ac", ".", "fireEvent", "(", "eventTypeID", ",", "eventObject", ",", "(", "Address", ")", "address", ",", "serviceID", ",", "null", ",", "null", ",", "null", ")", ";", "}"], "docstring": "The logic to fire an event from an SLEE 1.1 Sbb\n\n@param sbbEntity\nan sbb entity with an object assigned\n@param eventTypeID\nthe id of the event to fire\n@param eventObject\nthe event object, can't be null\n@param aci\nthe activity context where the event will be fired, can't be\nnull\n@param address\nthe optional address to fire the event\n@param serviceID\nthe optional service id to fire the event", "docstring_tokens": ["The", "logic", "to", "fire", "an", "event", "from", "an", "SLEE", "1", ".", "1", "Sbb"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbAbstractMethodHandler.java#L486-L553", "partition": "test", "index": 7025, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java", "func_name": "ResourceAdaptorEntityImpl.derreferActivityHandle", "original_string": "ActivityHandle derreferActivityHandle(ActivityHandle handle) {\r\n\t\tActivityHandle ah = null;\r\n\t\tif (resourceManagement.getHandleReferenceFactory() != null && handle.getClass() == ActivityHandleReference.class) {\r\n\t\t\tActivityHandleReference ahReference = (ActivityHandleReference) handle;\r\n\t\t\tah = resourceManagement.getHandleReferenceFactory().getActivityHandle(ahReference);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tah = handle;\r\n\t\t}\r\n\t\treturn ah;\r\n\t}", "language": "java", "code": "ActivityHandle derreferActivityHandle(ActivityHandle handle) {\r\n\t\tActivityHandle ah = null;\r\n\t\tif (resourceManagement.getHandleReferenceFactory() != null && handle.getClass() == ActivityHandleReference.class) {\r\n\t\t\tActivityHandleReference ahReference = (ActivityHandleReference) handle;\r\n\t\t\tah = resourceManagement.getHandleReferenceFactory().getActivityHandle(ahReference);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tah = handle;\r\n\t\t}\r\n\t\treturn ah;\r\n\t}", "code_tokens": ["ActivityHandle", "derreferActivityHandle", "(", "ActivityHandle", "handle", ")", "{", "ActivityHandle", "ah", "=", "null", ";", "if", "(", "resourceManagement", ".", "getHandleReferenceFactory", "(", ")", "!=", "null", "&&", "handle", ".", "getClass", "(", ")", "==", "ActivityHandleReference", ".", "class", ")", "{", "ActivityHandleReference", "ahReference", "=", "(", "ActivityHandleReference", ")", "handle", ";", "ah", "=", "resourceManagement", ".", "getHandleReferenceFactory", "(", ")", ".", "getActivityHandle", "(", "ahReference", ")", ";", "}", "else", "{", "ah", "=", "handle", ";", "}", "return", "ah", ";", "}"], "docstring": "if it is a handle reference it gets the referred handle\n@param handle\n@return", "docstring_tokens": ["if", "it", "is", "a", "handle", "reference", "it", "gets", "the", "referred", "handle"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorEntityImpl.java#L665-L675", "partition": "test", "index": 7009, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbAbstractMethodHandler.java", "func_name": "SbbAbstractMethodHandler.fireEvent", "original_string": "public static void fireEvent(SbbEntity sbbEntity, EventTypeID eventTypeID,\n\t\t\tObject eventObject, ActivityContextInterface aci, Address address) {\n\t\tfireEvent(sbbEntity, eventTypeID, eventObject, aci, address, null);\n\t}", "language": "java", "code": "public static void fireEvent(SbbEntity sbbEntity, EventTypeID eventTypeID,\n\t\t\tObject eventObject, ActivityContextInterface aci, Address address) {\n\t\tfireEvent(sbbEntity, eventTypeID, eventObject, aci, address, null);\n\t}", "code_tokens": ["public", "static", "void", "fireEvent", "(", "SbbEntity", "sbbEntity", ",", "EventTypeID", "eventTypeID", ",", "Object", "eventObject", ",", "ActivityContextInterface", "aci", ",", "Address", "address", ")", "{", "fireEvent", "(", "sbbEntity", ",", "eventTypeID", ",", "eventObject", ",", "aci", ",", "address", ",", "null", ")", ";", "}"], "docstring": "The logic to fire an event from an SLEE 1.0 Sbb\n\n@param sbbEntity\nan sbb entity with an object assigned\n@param eventTypeID\nthe id of the event to fire\n@param eventObject\nthe event object, can't be null\n@param aci\nthe activity context where the event will be fired, can't be\nnull\n@param address\nthe optional address to fire the event", "docstring_tokens": ["The", "logic", "to", "fire", "an", "event", "from", "an", "SLEE", "1", ".", "0", "Sbb"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/runtime/sbb/SbbAbstractMethodHandler.java#L464-L467", "partition": "test", "index": 7024, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/usage/src/main/java/org/mobicents/slee/container/management/jmx/AbstractUsageMBeanImplParent.java", "func_name": "AbstractUsageMBeanImplParent.getUsageMBean", "original_string": "public ObjectName getUsageMBean(String paramSetName)\n\t\t\tthrows NullPointerException,\n\t\t\tUnrecognizedUsageParameterSetNameException, ManagementException {\n\t\tif (paramSetName == null)\n\t\t\tthrow new NullPointerException(\"Sbb usage param set is null\");\n\t\treturn _getUsageMBean(paramSetName);\n\t}", "language": "java", "code": "public ObjectName getUsageMBean(String paramSetName)\n\t\t\tthrows NullPointerException,\n\t\t\tUnrecognizedUsageParameterSetNameException, ManagementException {\n\t\tif (paramSetName == null)\n\t\t\tthrow new NullPointerException(\"Sbb usage param set is null\");\n\t\treturn _getUsageMBean(paramSetName);\n\t}", "code_tokens": ["public", "ObjectName", "getUsageMBean", "(", "String", "paramSetName", ")", "throws", "NullPointerException", ",", "UnrecognizedUsageParameterSetNameException", ",", "ManagementException", "{", "if", "(", "paramSetName", "==", "null", ")", "throw", "new", "NullPointerException", "(", "\"Sbb usage param set is null\"", ")", ";", "return", "_getUsageMBean", "(", "paramSetName", ")", ";", "}"], "docstring": "Retrieves the object name for the usage param mbean with the specified\nname\n\n@param paramSetName\n@return\n@throws NullPointerException\n@throws UnrecognizedUsageParameterSetNameException\n@throws ManagementException", "docstring_tokens": ["Retrieves", "the", "object", "name", "for", "the", "usage", "param", "mbean", "with", "the", "specified", "name"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/usage/src/main/java/org/mobicents/slee/container/management/jmx/AbstractUsageMBeanImplParent.java#L393-L399", "partition": "test", "index": 7022, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java", "func_name": "ConcreteClassGeneratorUtils.validateDirectory", "original_string": "static private void validateDirectory(File aDirectory)\r\n\t\t\tthrows FileNotFoundException {\r\n\t\tif (aDirectory == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Directory should not be null.\");\r\n\t\t}\r\n\t\tif (!aDirectory.exists()) {\r\n\t\t\tthrow new FileNotFoundException(\"Directory does not exist: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t\tif (!aDirectory.isDirectory()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Is not a directory: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t\tif (!aDirectory.canRead()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Directory cannot be read: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t}", "language": "java", "code": "static private void validateDirectory(File aDirectory)\r\n\t\t\tthrows FileNotFoundException {\r\n\t\tif (aDirectory == null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Directory should not be null.\");\r\n\t\t}\r\n\t\tif (!aDirectory.exists()) {\r\n\t\t\tthrow new FileNotFoundException(\"Directory does not exist: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t\tif (!aDirectory.isDirectory()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Is not a directory: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t\tif (!aDirectory.canRead()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Directory cannot be read: \"\r\n\t\t\t\t\t+ aDirectory);\r\n\t\t}\r\n\t}", "code_tokens": ["static", "private", "void", "validateDirectory", "(", "File", "aDirectory", ")", "throws", "FileNotFoundException", "{", "if", "(", "aDirectory", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Directory should not be null.\"", ")", ";", "}", "if", "(", "!", "aDirectory", ".", "exists", "(", ")", ")", "{", "throw", "new", "FileNotFoundException", "(", "\"Directory does not exist: \"", "+", "aDirectory", ")", ";", "}", "if", "(", "!", "aDirectory", ".", "isDirectory", "(", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Is not a directory: \"", "+", "aDirectory", ")", ";", "}", "if", "(", "!", "aDirectory", ".", "canRead", "(", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Directory cannot be read: \"", "+", "aDirectory", ")", ";", "}", "}"], "docstring": "Directory is valid if it exists, does not represent a file, and can be read.", "docstring_tokens": ["Directory", "is", "valid", "if", "it", "exists", "does", "not", "represent", "a", "file", "and", "can", "be", "read", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/ConcreteClassGeneratorUtils.java#L159-L176", "partition": "test", "index": 6941, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/management/jmx/AlarmMBeanImpl.java", "func_name": "AlarmMBeanImpl.isSourceOwnerOfAlarm", "original_string": "public boolean isSourceOwnerOfAlarm(NotificationSourceWrapper notificationSource, String alarmID) {\r\n\t\tAlarmPlaceHolder aph = this.alarmIdToAlarm.get(alarmID);\r\n\t\tif (aph == null)\r\n\t\t\treturn false;\r\n\r\n\t\treturn aph.getNotificationSource().getNotificationSource().equals(notificationSource.getNotificationSource());\r\n\t}", "language": "java", "code": "public boolean isSourceOwnerOfAlarm(NotificationSourceWrapper notificationSource, String alarmID) {\r\n\t\tAlarmPlaceHolder aph = this.alarmIdToAlarm.get(alarmID);\r\n\t\tif (aph == null)\r\n\t\t\treturn false;\r\n\r\n\t\treturn aph.getNotificationSource().getNotificationSource().equals(notificationSource.getNotificationSource());\r\n\t}", "code_tokens": ["public", "boolean", "isSourceOwnerOfAlarm", "(", "NotificationSourceWrapper", "notificationSource", ",", "String", "alarmID", ")", "{", "AlarmPlaceHolder", "aph", "=", "this", ".", "alarmIdToAlarm", ".", "get", "(", "alarmID", ")", ";", "if", "(", "aph", "==", "null", ")", "return", "false", ";", "return", "aph", ".", "getNotificationSource", "(", ")", ".", "getNotificationSource", "(", ")", ".", "equals", "(", "notificationSource", ".", "getNotificationSource", "(", ")", ")", ";", "}"], "docstring": "NON MBEAN - used only internal, those methods are not exposed via jmx", "docstring_tokens": ["NON", "MBEAN", "-", "used", "only", "internal", "those", "methods", "are", "not", "exposed", "via", "jmx"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/management/jmx/AlarmMBeanImpl.java#L280-L286", "partition": "test", "index": 7032, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/events/src/main/java/org/mobicents/slee/container/event/EventContextSuspensionHandler.java", "func_name": "EventContextSuspensionHandler.resume", "original_string": "private void resume() {\n\n\t\t// create runnable to resume the event context\n\t\tRunnable runnable = new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tif (scheduledFuture == null) {\n\t\t\t\t\t// already resumed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// cancel timer task\n\t\t\t\tscheduledFuture.cancel(false);\n\t\t\t\tscheduledFuture = null;\n\t\t\t\t// send events frozen to event router again, will be processed only after this one ends (this one is already being executed)\n\t\t\t\tfor (EventContext ec : barriedEvents) {\n\t\t\t\t\tec.getLocalActivityContext().getExecutorService().routeEvent(ec);\n\t\t\t\t}\n\t\t\t\tbarriedEvents = null;\n\t\t\t\t// remove barrier on activity event queue\n\t\t\t\tevent.getLocalActivityContext().getEventQueueManager().removeBarrier(transaction);\n\t\t\t\t// remove suspension\n\t\t\t\tsuspended = false;\n\t\t\t\t// continue routing the event related with this context\n\t\t\t\tevent.getLocalActivityContext().getCurrentEventRoutingTask().run();\t\t\t\t\n\t\t\t}\n\t\t};\n\t\t// run it using the activity executor service to avoid thread concurrency\n\t\tevent.getLocalActivityContext().getExecutorService().execute(runnable);\n\t}", "language": "java", "code": "private void resume() {\n\n\t\t// create runnable to resume the event context\n\t\tRunnable runnable = new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tif (scheduledFuture == null) {\n\t\t\t\t\t// already resumed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// cancel timer task\n\t\t\t\tscheduledFuture.cancel(false);\n\t\t\t\tscheduledFuture = null;\n\t\t\t\t// send events frozen to event router again, will be processed only after this one ends (this one is already being executed)\n\t\t\t\tfor (EventContext ec : barriedEvents) {\n\t\t\t\t\tec.getLocalActivityContext().getExecutorService().routeEvent(ec);\n\t\t\t\t}\n\t\t\t\tbarriedEvents = null;\n\t\t\t\t// remove barrier on activity event queue\n\t\t\t\tevent.getLocalActivityContext().getEventQueueManager().removeBarrier(transaction);\n\t\t\t\t// remove suspension\n\t\t\t\tsuspended = false;\n\t\t\t\t// continue routing the event related with this context\n\t\t\t\tevent.getLocalActivityContext().getCurrentEventRoutingTask().run();\t\t\t\t\n\t\t\t}\n\t\t};\n\t\t// run it using the activity executor service to avoid thread concurrency\n\t\tevent.getLocalActivityContext().getExecutorService().execute(runnable);\n\t}", "code_tokens": ["private", "void", "resume", "(", ")", "{", "// create runnable to resume the event context", "Runnable", "runnable", "=", "new", "Runnable", "(", ")", "{", "public", "void", "run", "(", ")", "{", "if", "(", "scheduledFuture", "==", "null", ")", "{", "// already resumed", "return", ";", "}", "// cancel timer task", "scheduledFuture", ".", "cancel", "(", "false", ")", ";", "scheduledFuture", "=", "null", ";", "// send events frozen to event router again, will be processed only after this one ends (this one is already being executed)", "for", "(", "EventContext", "ec", ":", "barriedEvents", ")", "{", "ec", ".", "getLocalActivityContext", "(", ")", ".", "getExecutorService", "(", ")", ".", "routeEvent", "(", "ec", ")", ";", "}", "barriedEvents", "=", "null", ";", "// remove barrier on activity event queue", "event", ".", "getLocalActivityContext", "(", ")", ".", "getEventQueueManager", "(", ")", ".", "removeBarrier", "(", "transaction", ")", ";", "// remove suspension", "suspended", "=", "false", ";", "// continue routing the event related with this context", "event", ".", "getLocalActivityContext", "(", ")", ".", "getCurrentEventRoutingTask", "(", ")", ".", "run", "(", ")", ";", "}", "}", ";", "// run it using the activity executor service to avoid thread concurrency", "event", ".", "getLocalActivityContext", "(", ")", ".", "getExecutorService", "(", ")", ".", "execute", "(", "runnable", ")", ";", "}"], "docstring": "the real logic to resume the event context", "docstring_tokens": ["the", "real", "logic", "to", "resume", "the", "event", "context"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/events/src/main/java/org/mobicents/slee/container/event/EventContextSuspensionHandler.java#L185-L212", "partition": "test", "index": 7019, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java", "func_name": "ResourceAdaptorObjectImpl.raConfigurationUpdate", "original_string": "public void raConfigurationUpdate(ConfigProperties properties)\n\t\t\tthrows InvalidConfigurationException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"raConfigurationUpdate( properties = \" + properties\n\t\t\t\t\t+ \" )\");\n\t\t}\n\n\t\tverifyConfigProperties(properties);\n\t\tobject.raConfigurationUpdate(configProperties);\n\t}", "language": "java", "code": "public void raConfigurationUpdate(ConfigProperties properties)\n\t\t\tthrows InvalidConfigurationException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"raConfigurationUpdate( properties = \" + properties\n\t\t\t\t\t+ \" )\");\n\t\t}\n\n\t\tverifyConfigProperties(properties);\n\t\tobject.raConfigurationUpdate(configProperties);\n\t}", "code_tokens": ["public", "void", "raConfigurationUpdate", "(", "ConfigProperties", "properties", ")", "throws", "InvalidConfigurationException", "{", "if", "(", "doTraceLogs", ")", "{", "logger", ".", "trace", "(", "\"raConfigurationUpdate( properties = \"", "+", "properties", "+", "\" )\"", ")", ";", "}", "verifyConfigProperties", "(", "properties", ")", ";", "object", ".", "raConfigurationUpdate", "(", "configProperties", ")", ";", "}"], "docstring": "Updates the ra configuration.\n\n@param properties\n@throws InvalidConfigurationException\nif the configuration, after merging the specified properties\nwith the current properties values, results in an invalid\nconfiguration", "docstring_tokens": ["Updates", "the", "ra", "configuration", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java#L190-L200", "partition": "test", "index": 7011, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java", "func_name": "ResourceAdaptorObjectImpl.unsetFaultTolerantResourceAdaptorContext", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic void unsetFaultTolerantResourceAdaptorContext()\n\t\t\tthrows IllegalArgumentException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"unsetFaultTolerantResourceAdaptorContext()\");\n\t\t}\n\n\t\tif (isFaultTolerant()) {\n\t\t\t((FaultTolerantResourceAdaptor<Serializable, Serializable>) this.object)\n\t\t\t\t\t.unsetFaultTolerantResourceAdaptorContext();\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"RA Object is not fault tolerant!\");\n\t\t}\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic void unsetFaultTolerantResourceAdaptorContext()\n\t\t\tthrows IllegalArgumentException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"unsetFaultTolerantResourceAdaptorContext()\");\n\t\t}\n\n\t\tif (isFaultTolerant()) {\n\t\t\t((FaultTolerantResourceAdaptor<Serializable, Serializable>) this.object)\n\t\t\t\t\t.unsetFaultTolerantResourceAdaptorContext();\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"RA Object is not fault tolerant!\");\n\t\t}\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "void", "unsetFaultTolerantResourceAdaptorContext", "(", ")", "throws", "IllegalArgumentException", "{", "if", "(", "doTraceLogs", ")", "{", "logger", ".", "trace", "(", "\"unsetFaultTolerantResourceAdaptorContext()\"", ")", ";", "}", "if", "(", "isFaultTolerant", "(", ")", ")", "{", "(", "(", "FaultTolerantResourceAdaptor", "<", "Serializable", ",", "Serializable", ">", ")", "this", ".", "object", ")", ".", "unsetFaultTolerantResourceAdaptorContext", "(", ")", ";", "}", "else", "{", "throw", "new", "IllegalArgumentException", "(", "\"RA Object is not fault tolerant!\"", ")", ";", "}", "}"], "docstring": "Unsets the ft context of the ra object.\n\n@throws IllegalArgumentException\nif the ra object is not in fault tolerant", "docstring_tokens": ["Unsets", "the", "ft", "context", "of", "the", "ra", "object", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java#L349-L364", "partition": "test", "index": 7017, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java", "func_name": "ResourceAdaptorObjectImpl.unsetResourceAdaptorContext", "original_string": "public void unsetResourceAdaptorContext() throws InvalidStateException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"unsetResourceAdaptorContext()\");\n\t\t}\n\n\t\tif (state == ResourceAdaptorObjectState.UNCONFIGURED) {\n\t\t\tobject.unsetResourceAdaptorContext();\n\t\t\tstate = null;\n\t\t} else {\n\t\t\tthrow new InvalidStateException(\"ra object is in state \" + state);\n\t\t}\n\t}", "language": "java", "code": "public void unsetResourceAdaptorContext() throws InvalidStateException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"unsetResourceAdaptorContext()\");\n\t\t}\n\n\t\tif (state == ResourceAdaptorObjectState.UNCONFIGURED) {\n\t\t\tobject.unsetResourceAdaptorContext();\n\t\t\tstate = null;\n\t\t} else {\n\t\t\tthrow new InvalidStateException(\"ra object is in state \" + state);\n\t\t}\n\t}", "code_tokens": ["public", "void", "unsetResourceAdaptorContext", "(", ")", "throws", "InvalidStateException", "{", "if", "(", "doTraceLogs", ")", "{", "logger", ".", "trace", "(", "\"unsetResourceAdaptorContext()\"", ")", ";", "}", "if", "(", "state", "==", "ResourceAdaptorObjectState", ".", "UNCONFIGURED", ")", "{", "object", ".", "unsetResourceAdaptorContext", "(", ")", ";", "state", "=", "null", ";", "}", "else", "{", "throw", "new", "InvalidStateException", "(", "\"ra object is in state \"", "+", "state", ")", ";", "}", "}"], "docstring": "Unsets the context of the ra object.\n\n@throws InvalidStateException\nif the ra object is not in UNCONFIGURED state", "docstring_tokens": ["Unsets", "the", "context", "of", "the", "ra", "object", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java#L329-L341", "partition": "test", "index": 7016, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java", "func_name": "ResourceAdaptorObjectImpl.verifyConfigProperties", "original_string": "private void verifyConfigProperties(ConfigProperties newProperties)\n\t\t\tthrows InvalidConfigurationException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"verifyConfigProperties( newProperties = \"\n\t\t\t\t\t+ newProperties + \" )\");\n\t\t}\n\n\t\t// merge properties\n\t\tfor (ConfigProperties.Property configProperty : configProperties\n\t\t\t\t.getProperties()) {\n\t\t\tif (newProperties.getProperty(configProperty.getName()) == null) {\n\t\t\t\tnewProperties.addProperty(configProperty);\n\t\t\t}\n\t\t}\n\t\t// validate result\n\t\tfor (ConfigProperties.Property entityProperty : newProperties\n\t\t\t\t.getProperties()) {\n\t\t\tif (entityProperty.getValue() == null) {\n\t\t\t\tthrow new InvalidConfigurationException(\"the property \"\n\t\t\t\t\t\t+ entityProperty.getName() + \" has null value\");\n\t\t\t}\n\t\t}\n\t\t// validate in ra object\n\t\tobject.raVerifyConfiguration(newProperties);\n\t\t// ok, switch config\n\t\tconfigProperties = newProperties;\n\t}", "language": "java", "code": "private void verifyConfigProperties(ConfigProperties newProperties)\n\t\t\tthrows InvalidConfigurationException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"verifyConfigProperties( newProperties = \"\n\t\t\t\t\t+ newProperties + \" )\");\n\t\t}\n\n\t\t// merge properties\n\t\tfor (ConfigProperties.Property configProperty : configProperties\n\t\t\t\t.getProperties()) {\n\t\t\tif (newProperties.getProperty(configProperty.getName()) == null) {\n\t\t\t\tnewProperties.addProperty(configProperty);\n\t\t\t}\n\t\t}\n\t\t// validate result\n\t\tfor (ConfigProperties.Property entityProperty : newProperties\n\t\t\t\t.getProperties()) {\n\t\t\tif (entityProperty.getValue() == null) {\n\t\t\t\tthrow new InvalidConfigurationException(\"the property \"\n\t\t\t\t\t\t+ entityProperty.getName() + \" has null value\");\n\t\t\t}\n\t\t}\n\t\t// validate in ra object\n\t\tobject.raVerifyConfiguration(newProperties);\n\t\t// ok, switch config\n\t\tconfigProperties = newProperties;\n\t}", "code_tokens": ["private", "void", "verifyConfigProperties", "(", "ConfigProperties", "newProperties", ")", "throws", "InvalidConfigurationException", "{", "if", "(", "doTraceLogs", ")", "{", "logger", ".", "trace", "(", "\"verifyConfigProperties( newProperties = \"", "+", "newProperties", "+", "\" )\"", ")", ";", "}", "// merge properties", "for", "(", "ConfigProperties", ".", "Property", "configProperty", ":", "configProperties", ".", "getProperties", "(", ")", ")", "{", "if", "(", "newProperties", ".", "getProperty", "(", "configProperty", ".", "getName", "(", ")", ")", "==", "null", ")", "{", "newProperties", ".", "addProperty", "(", "configProperty", ")", ";", "}", "}", "// validate result", "for", "(", "ConfigProperties", ".", "Property", "entityProperty", ":", "newProperties", ".", "getProperties", "(", ")", ")", "{", "if", "(", "entityProperty", ".", "getValue", "(", ")", "==", "null", ")", "{", "throw", "new", "InvalidConfigurationException", "(", "\"the property \"", "+", "entityProperty", ".", "getName", "(", ")", "+", "\" has null value\"", ")", ";", "}", "}", "// validate in ra object", "object", ".", "raVerifyConfiguration", "(", "newProperties", ")", ";", "// ok, switch config", "configProperties", "=", "newProperties", ";", "}"], "docstring": "Merges the current properties values with the new ones and uses the ra to\nverify the configuration\n\n@param newProperties\n@throws InvalidConfigurationException\nif the configuration, after merging the specified properties\nwith the current properties values, results in an invalid\nconfiguration", "docstring_tokens": ["Merges", "the", "current", "properties", "values", "with", "the", "new", "ones", "and", "uses", "the", "ra", "to", "verify", "the", "configuration"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java#L212-L239", "partition": "test", "index": 7012, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/usage/src/main/java/org/mobicents/slee/container/management/jmx/AbstractUsageMBeanImplParent.java", "func_name": "AbstractUsageMBeanImplParent.remove", "original_string": "public void remove() {\n\n\t\tLogger logger = getLogger();\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Closing \" + toString());\n\t\t}\n\t\tfinal MBeanServer mbeanServer = sleeContainer.getMBeanServer();\n\t\ttry {\n\t\t\tmbeanServer.unregisterMBean(getObjectName());\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"failed to remove \" + toString(), e);\n\t\t}\n\t\t// remove all usage param\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger\n\t\t\t\t\t.debug(\"Removing all named usage parameters of \"\n\t\t\t\t\t\t\t+ toString());\n\t\t}\n\t\tfor (String name : usageMBeans.keySet()) {\n\t\t\ttry {\n\t\t\t\t_removeUsageParameterSet(name,false);\n\t\t\t} catch (Throwable e) {\n\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t\t// also remove the default\n\t\ttry {\n\t\t\tremoveUsageParameterSet();\n\t\t} catch (Throwable e) {\n\t\t\tlogger.error(e.getMessage(), e);\n\t\t}\n\t}", "language": "java", "code": "public void remove() {\n\n\t\tLogger logger = getLogger();\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Closing \" + toString());\n\t\t}\n\t\tfinal MBeanServer mbeanServer = sleeContainer.getMBeanServer();\n\t\ttry {\n\t\t\tmbeanServer.unregisterMBean(getObjectName());\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"failed to remove \" + toString(), e);\n\t\t}\n\t\t// remove all usage param\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger\n\t\t\t\t\t.debug(\"Removing all named usage parameters of \"\n\t\t\t\t\t\t\t+ toString());\n\t\t}\n\t\tfor (String name : usageMBeans.keySet()) {\n\t\t\ttry {\n\t\t\t\t_removeUsageParameterSet(name,false);\n\t\t\t} catch (Throwable e) {\n\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t\t// also remove the default\n\t\ttry {\n\t\t\tremoveUsageParameterSet();\n\t\t} catch (Throwable e) {\n\t\t\tlogger.error(e.getMessage(), e);\n\t\t}\n\t}", "code_tokens": ["public", "void", "remove", "(", ")", "{", "Logger", "logger", "=", "getLogger", "(", ")", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Closing \"", "+", "toString", "(", ")", ")", ";", "}", "final", "MBeanServer", "mbeanServer", "=", "sleeContainer", ".", "getMBeanServer", "(", ")", ";", "try", "{", "mbeanServer", ".", "unregisterMBean", "(", "getObjectName", "(", ")", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "error", "(", "\"failed to remove \"", "+", "toString", "(", ")", ",", "e", ")", ";", "}", "// remove all usage param", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Removing all named usage parameters of \"", "+", "toString", "(", ")", ")", ";", "}", "for", "(", "String", "name", ":", "usageMBeans", ".", "keySet", "(", ")", ")", "{", "try", "{", "_removeUsageParameterSet", "(", "name", ",", "false", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "// also remove the default", "try", "{", "removeUsageParameterSet", "(", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Removes the mbean", "docstring_tokens": ["Removes", "the", "mbean"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/usage/src/main/java/org/mobicents/slee/container/management/jmx/AbstractUsageMBeanImplParent.java#L152-L183", "partition": "test", "index": 7021, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java", "func_name": "ResourceAdaptorObjectImpl.raUnconfigure", "original_string": "public void raUnconfigure() throws InvalidStateException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"raUnconfigure()\");\n\t\t}\n\n\t\tif (state == ResourceAdaptorObjectState.INACTIVE) {\n\t\t\tstate = ResourceAdaptorObjectState.UNCONFIGURED;\n\t\t\tobject.raUnconfigure();\n\t\t} else {\n\t\t\tthrow new InvalidStateException(\"ra object is in state \" + state);\n\t\t}\n\t}", "language": "java", "code": "public void raUnconfigure() throws InvalidStateException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"raUnconfigure()\");\n\t\t}\n\n\t\tif (state == ResourceAdaptorObjectState.INACTIVE) {\n\t\t\tstate = ResourceAdaptorObjectState.UNCONFIGURED;\n\t\t\tobject.raUnconfigure();\n\t\t} else {\n\t\t\tthrow new InvalidStateException(\"ra object is in state \" + state);\n\t\t}\n\t}", "code_tokens": ["public", "void", "raUnconfigure", "(", ")", "throws", "InvalidStateException", "{", "if", "(", "doTraceLogs", ")", "{", "logger", ".", "trace", "(", "\"raUnconfigure()\"", ")", ";", "}", "if", "(", "state", "==", "ResourceAdaptorObjectState", ".", "INACTIVE", ")", "{", "state", "=", "ResourceAdaptorObjectState", ".", "UNCONFIGURED", ";", "object", ".", "raUnconfigure", "(", ")", ";", "}", "else", "{", "throw", "new", "InvalidStateException", "(", "\"ra object is in state \"", "+", "state", ")", ";", "}", "}"], "docstring": "Unconfigures the ra object\n\n@throws InvalidStateException\nif the ra object is not in INACTIVE state", "docstring_tokens": ["Unconfigures", "the", "ra", "object"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java#L309-L321", "partition": "test", "index": 7015, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java", "func_name": "ResourceAdaptorObjectImpl.raInactive", "original_string": "public void raInactive() throws InvalidStateException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"raInactive()\");\n\t\t}\n\n\t\tif (state == ResourceAdaptorObjectState.STOPPING) {\n\t\t\tstate = ResourceAdaptorObjectState.INACTIVE;\n\t\t\tobject.raInactive();\n\t\t} else {\n\t\t\tthrow new InvalidStateException(\"ra object is in state \" + state);\n\t\t}\n\t}", "language": "java", "code": "public void raInactive() throws InvalidStateException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"raInactive()\");\n\t\t}\n\n\t\tif (state == ResourceAdaptorObjectState.STOPPING) {\n\t\t\tstate = ResourceAdaptorObjectState.INACTIVE;\n\t\t\tobject.raInactive();\n\t\t} else {\n\t\t\tthrow new InvalidStateException(\"ra object is in state \" + state);\n\t\t}\n\t}", "code_tokens": ["public", "void", "raInactive", "(", ")", "throws", "InvalidStateException", "{", "if", "(", "doTraceLogs", ")", "{", "logger", ".", "trace", "(", "\"raInactive()\"", ")", ";", "}", "if", "(", "state", "==", "ResourceAdaptorObjectState", ".", "STOPPING", ")", "{", "state", "=", "ResourceAdaptorObjectState", ".", "INACTIVE", ";", "object", ".", "raInactive", "(", ")", ";", "}", "else", "{", "throw", "new", "InvalidStateException", "(", "\"ra object is in state \"", "+", "state", ")", ";", "}", "}"], "docstring": "Requests the deactivation of the ra object. If the operation succeeds the\nra will transition to INACTIVE state.\n\n@throws InvalidStateException\nif the ra object is not in STOPPING state", "docstring_tokens": ["Requests", "the", "deactivation", "of", "the", "ra", "object", ".", "If", "the", "operation", "succeeds", "the", "ra", "will", "transition", "to", "INACTIVE", "state", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java#L289-L301", "partition": "test", "index": 7014, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java", "func_name": "ResourceAdaptorObjectImpl.raStopping", "original_string": "public void raStopping() throws InvalidStateException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"raStopping()\");\n\t\t}\n\n\t\tif (state == ResourceAdaptorObjectState.ACTIVE) {\n\t\t\tstate = ResourceAdaptorObjectState.STOPPING;\n\t\t\tobject.raStopping();\n\t\t} else {\n\t\t\tthrow new InvalidStateException(\"ra object is in state \" + state);\n\t\t}\n\t}", "language": "java", "code": "public void raStopping() throws InvalidStateException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"raStopping()\");\n\t\t}\n\n\t\tif (state == ResourceAdaptorObjectState.ACTIVE) {\n\t\t\tstate = ResourceAdaptorObjectState.STOPPING;\n\t\t\tobject.raStopping();\n\t\t} else {\n\t\t\tthrow new InvalidStateException(\"ra object is in state \" + state);\n\t\t}\n\t}", "code_tokens": ["public", "void", "raStopping", "(", ")", "throws", "InvalidStateException", "{", "if", "(", "doTraceLogs", ")", "{", "logger", ".", "trace", "(", "\"raStopping()\"", ")", ";", "}", "if", "(", "state", "==", "ResourceAdaptorObjectState", ".", "ACTIVE", ")", "{", "state", "=", "ResourceAdaptorObjectState", ".", "STOPPING", ";", "object", ".", "raStopping", "(", ")", ";", "}", "else", "{", "throw", "new", "InvalidStateException", "(", "\"ra object is in state \"", "+", "state", ")", ";", "}", "}"], "docstring": "Requests the stopping of the ra object. If the operation succeeds the ra\nwill transition to STOPPING state.\n\n@throws InvalidStateException\nif the ra object is not in ACTIVE state", "docstring_tokens": ["Requests", "the", "stopping", "of", "the", "ra", "object", ".", "If", "the", "operation", "succeeds", "the", "ra", "will", "transition", "to", "STOPPING", "state", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/resource/src/main/java/org/mobicents/slee/resource/ResourceAdaptorObjectImpl.java#L268-L280", "partition": "test", "index": 7013, "time": "2010-04-26 15:37:10"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManagerMBeanImpl.java", "func_name": "DeploymentManagerMBeanImpl.downloadRemoteDU", "original_string": "private File downloadRemoteDU(URL duURL, File deploymentRoot) throws Exception {\r\n    InputStream in = null;\r\n    OutputStream out = null;\r\n\r\n    try {\r\n      // Get the filename out of the URL\r\n      String filename = new File(duURL.getPath()).getName();\r\n\r\n      // Prepare for creating the file at deploy folder\r\n      File tempFile = new File(deploymentRoot, filename);\r\n\r\n      out = new BufferedOutputStream(new FileOutputStream(tempFile));\r\n      URLConnection conn = duURL.openConnection();\r\n      in = conn.getInputStream();\r\n\r\n      // Get the data\r\n      byte[] buffer = new byte[1024];\r\n      int numRead;\r\n      while ((numRead = in.read(buffer)) != -1) {\r\n        out.write(buffer, 0, numRead);\r\n      }\r\n\r\n      // Done! Successful.\r\n      return tempFile;\r\n    }\r\n    finally {\r\n      // Do the clean up.\r\n      try {\r\n        if (in != null) {\r\n          in.close();\r\n          in = null;\r\n        }\r\n        if (out != null) {\r\n          out.close();\r\n          out = null;\r\n        }\r\n      }\r\n      catch (IOException ioe) {\r\n        // Shouldn't happen, let's ignore.\r\n      }\r\n    }\r\n  }", "language": "java", "code": "private File downloadRemoteDU(URL duURL, File deploymentRoot) throws Exception {\r\n    InputStream in = null;\r\n    OutputStream out = null;\r\n\r\n    try {\r\n      // Get the filename out of the URL\r\n      String filename = new File(duURL.getPath()).getName();\r\n\r\n      // Prepare for creating the file at deploy folder\r\n      File tempFile = new File(deploymentRoot, filename);\r\n\r\n      out = new BufferedOutputStream(new FileOutputStream(tempFile));\r\n      URLConnection conn = duURL.openConnection();\r\n      in = conn.getInputStream();\r\n\r\n      // Get the data\r\n      byte[] buffer = new byte[1024];\r\n      int numRead;\r\n      while ((numRead = in.read(buffer)) != -1) {\r\n        out.write(buffer, 0, numRead);\r\n      }\r\n\r\n      // Done! Successful.\r\n      return tempFile;\r\n    }\r\n    finally {\r\n      // Do the clean up.\r\n      try {\r\n        if (in != null) {\r\n          in.close();\r\n          in = null;\r\n        }\r\n        if (out != null) {\r\n          out.close();\r\n          out = null;\r\n        }\r\n      }\r\n      catch (IOException ioe) {\r\n        // Shouldn't happen, let's ignore.\r\n      }\r\n    }\r\n  }", "code_tokens": ["private", "File", "downloadRemoteDU", "(", "URL", "duURL", ",", "File", "deploymentRoot", ")", "throws", "Exception", "{", "InputStream", "in", "=", "null", ";", "OutputStream", "out", "=", "null", ";", "try", "{", "// Get the filename out of the URL\r", "String", "filename", "=", "new", "File", "(", "duURL", ".", "getPath", "(", ")", ")", ".", "getName", "(", ")", ";", "// Prepare for creating the file at deploy folder\r", "File", "tempFile", "=", "new", "File", "(", "deploymentRoot", ",", "filename", ")", ";", "out", "=", "new", "BufferedOutputStream", "(", "new", "FileOutputStream", "(", "tempFile", ")", ")", ";", "URLConnection", "conn", "=", "duURL", ".", "openConnection", "(", ")", ";", "in", "=", "conn", ".", "getInputStream", "(", ")", ";", "// Get the data\r", "byte", "[", "]", "buffer", "=", "new", "byte", "[", "1024", "]", ";", "int", "numRead", ";", "while", "(", "(", "numRead", "=", "in", ".", "read", "(", "buffer", ")", ")", "!=", "-", "1", ")", "{", "out", ".", "write", "(", "buffer", ",", "0", ",", "numRead", ")", ";", "}", "// Done! Successful.\r", "return", "tempFile", ";", "}", "finally", "{", "// Do the clean up.\r", "try", "{", "if", "(", "in", "!=", "null", ")", "{", "in", ".", "close", "(", ")", ";", "in", "=", "null", ";", "}", "if", "(", "out", "!=", "null", ")", "{", "out", ".", "close", "(", ")", ";", "out", "=", "null", ";", "}", "}", "catch", "(", "IOException", "ioe", ")", "{", "// Shouldn't happen, let's ignore.\r", "}", "}", "}"], "docstring": "Downloads a remote DU to a local folder\n\n@param duURL URL where the DU can be fetched from\n@param deploymentRoot the location where it will be saved to\n@return a File related to the downloaded DU\n@throws Exception", "docstring_tokens": ["Downloads", "a", "remote", "DU", "to", "a", "local", "folder"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/DeploymentManagerMBeanImpl.java#L162-L203", "partition": "test", "index": 6986, "time": "2010-05-10 12:58:59"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java", "func_name": "URLClassLoaderDomainImpl.findResourceLocally", "original_string": "protected URL findResourceLocally(String name) {\n\t\tif (logger.isTraceEnabled())\n\t\t\tlogger.trace(toString() + \" findResourceLocally: \" + name);\n\n\t\treturn super.findResource(name);\n\t}", "language": "java", "code": "protected URL findResourceLocally(String name) {\n\t\tif (logger.isTraceEnabled())\n\t\t\tlogger.trace(toString() + \" findResourceLocally: \" + name);\n\n\t\treturn super.findResource(name);\n\t}", "code_tokens": ["protected", "URL", "findResourceLocally", "(", "String", "name", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "logger", ".", "trace", "(", "toString", "(", ")", "+", "\" findResourceLocally: \"", "+", "name", ")", ";", "return", "super", ".", "findResource", "(", "name", ")", ";", "}"], "docstring": "Finds a resource locally, i.e., in the URLs managed by the extended\nURLClassLoader.\n\n@param name\n@return", "docstring_tokens": ["Finds", "a", "resource", "locally", "i", ".", "e", ".", "in", "the", "URLs", "managed", "by", "the", "extended", "URLClassLoader", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java#L316-L321", "partition": "test", "index": 7162, "time": "2010-05-25 20:37:09"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java", "func_name": "TracerImpl.resetCacheFlags", "original_string": "void resetCacheFlags(boolean resetChilds) {\r\n\t\tif (isTraceable(TraceLevel.FINEST)) {\r\n\t\t\tfinestEnabled = true;\r\n\t\t\tfinerEnabled = true;\r\n\t\t\tfineEnabled = true;\r\n\t\t\tconfigEnabled = true;\r\n\t\t\tinfoEnabled = true;\r\n\t\t\twarningEnabled = true;\r\n\t\t\tsevereEnabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfinestEnabled = false;\r\n\t\t\tif (isTraceable(TraceLevel.FINER)) {\r\n\t\t\t\tfinerEnabled = true;\r\n\t\t\t\tfineEnabled = true;\r\n\t\t\t\tconfigEnabled = true;\r\n\t\t\t\tinfoEnabled = true;\r\n\t\t\t\twarningEnabled = true;\r\n\t\t\t\tsevereEnabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfinerEnabled = false;\r\n\t\t\t\tif (isTraceable(TraceLevel.FINE)) {\r\n\t\t\t\t\tfineEnabled = true;\r\n\t\t\t\t\tconfigEnabled = true;\r\n\t\t\t\t\tinfoEnabled = true;\r\n\t\t\t\t\twarningEnabled = true;\r\n\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfineEnabled = false;\r\n\t\t\t\t\tif (isTraceable(TraceLevel.CONFIG)) {\r\n\t\t\t\t\t\tconfigEnabled = true;\r\n\t\t\t\t\t\tinfoEnabled = true;\r\n\t\t\t\t\t\twarningEnabled = true;\r\n\t\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (isTraceable(TraceLevel.INFO)) {\r\n\t\t\t\t\t\t\tinfoEnabled = true;\r\n\t\t\t\t\t\t\twarningEnabled = true;\r\n\t\t\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinfoEnabled = false;\r\n\t\t\t\t\t\t\tif (isTraceable(TraceLevel.WARNING)) {\r\n\t\t\t\t\t\t\t\twarningEnabled = true;\r\n\t\t\t\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\twarningEnabled = false;\r\n\t\t\t\t\t\t\t\tif (isTraceable(TraceLevel.SEVERE)) {\r\n\t\t\t\t\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tsevereEnabled = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (resetChilds) {\r\n\t\t\t// implicit change of level demands that we update reset flags on childs without level\r\n\t\t\tfor(TracerImpl child : childs) {\r\n\t\t\t\tif (child.level == null) {\r\n\t\t\t\t\tchild.resetCacheFlags(true);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}", "language": "java", "code": "void resetCacheFlags(boolean resetChilds) {\r\n\t\tif (isTraceable(TraceLevel.FINEST)) {\r\n\t\t\tfinestEnabled = true;\r\n\t\t\tfinerEnabled = true;\r\n\t\t\tfineEnabled = true;\r\n\t\t\tconfigEnabled = true;\r\n\t\t\tinfoEnabled = true;\r\n\t\t\twarningEnabled = true;\r\n\t\t\tsevereEnabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfinestEnabled = false;\r\n\t\t\tif (isTraceable(TraceLevel.FINER)) {\r\n\t\t\t\tfinerEnabled = true;\r\n\t\t\t\tfineEnabled = true;\r\n\t\t\t\tconfigEnabled = true;\r\n\t\t\t\tinfoEnabled = true;\r\n\t\t\t\twarningEnabled = true;\r\n\t\t\t\tsevereEnabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfinerEnabled = false;\r\n\t\t\t\tif (isTraceable(TraceLevel.FINE)) {\r\n\t\t\t\t\tfineEnabled = true;\r\n\t\t\t\t\tconfigEnabled = true;\r\n\t\t\t\t\tinfoEnabled = true;\r\n\t\t\t\t\twarningEnabled = true;\r\n\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfineEnabled = false;\r\n\t\t\t\t\tif (isTraceable(TraceLevel.CONFIG)) {\r\n\t\t\t\t\t\tconfigEnabled = true;\r\n\t\t\t\t\t\tinfoEnabled = true;\r\n\t\t\t\t\t\twarningEnabled = true;\r\n\t\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (isTraceable(TraceLevel.INFO)) {\r\n\t\t\t\t\t\t\tinfoEnabled = true;\r\n\t\t\t\t\t\t\twarningEnabled = true;\r\n\t\t\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinfoEnabled = false;\r\n\t\t\t\t\t\t\tif (isTraceable(TraceLevel.WARNING)) {\r\n\t\t\t\t\t\t\t\twarningEnabled = true;\r\n\t\t\t\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\twarningEnabled = false;\r\n\t\t\t\t\t\t\t\tif (isTraceable(TraceLevel.SEVERE)) {\r\n\t\t\t\t\t\t\t\t\tsevereEnabled = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tsevereEnabled = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (resetChilds) {\r\n\t\t\t// implicit change of level demands that we update reset flags on childs without level\r\n\t\t\tfor(TracerImpl child : childs) {\r\n\t\t\t\tif (child.level == null) {\r\n\t\t\t\t\tchild.resetCacheFlags(true);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}", "code_tokens": ["void", "resetCacheFlags", "(", "boolean", "resetChilds", ")", "{", "if", "(", "isTraceable", "(", "TraceLevel", ".", "FINEST", ")", ")", "{", "finestEnabled", "=", "true", ";", "finerEnabled", "=", "true", ";", "fineEnabled", "=", "true", ";", "configEnabled", "=", "true", ";", "infoEnabled", "=", "true", ";", "warningEnabled", "=", "true", ";", "severeEnabled", "=", "true", ";", "}", "else", "{", "finestEnabled", "=", "false", ";", "if", "(", "isTraceable", "(", "TraceLevel", ".", "FINER", ")", ")", "{", "finerEnabled", "=", "true", ";", "fineEnabled", "=", "true", ";", "configEnabled", "=", "true", ";", "infoEnabled", "=", "true", ";", "warningEnabled", "=", "true", ";", "severeEnabled", "=", "true", ";", "}", "else", "{", "finerEnabled", "=", "false", ";", "if", "(", "isTraceable", "(", "TraceLevel", ".", "FINE", ")", ")", "{", "fineEnabled", "=", "true", ";", "configEnabled", "=", "true", ";", "infoEnabled", "=", "true", ";", "warningEnabled", "=", "true", ";", "severeEnabled", "=", "true", ";", "}", "else", "{", "fineEnabled", "=", "false", ";", "if", "(", "isTraceable", "(", "TraceLevel", ".", "CONFIG", ")", ")", "{", "configEnabled", "=", "true", ";", "infoEnabled", "=", "true", ";", "warningEnabled", "=", "true", ";", "severeEnabled", "=", "true", ";", "}", "else", "{", "if", "(", "isTraceable", "(", "TraceLevel", ".", "INFO", ")", ")", "{", "infoEnabled", "=", "true", ";", "warningEnabled", "=", "true", ";", "severeEnabled", "=", "true", ";", "}", "else", "{", "infoEnabled", "=", "false", ";", "if", "(", "isTraceable", "(", "TraceLevel", ".", "WARNING", ")", ")", "{", "warningEnabled", "=", "true", ";", "severeEnabled", "=", "true", ";", "}", "else", "{", "warningEnabled", "=", "false", ";", "if", "(", "isTraceable", "(", "TraceLevel", ".", "SEVERE", ")", ")", "{", "severeEnabled", "=", "true", ";", "}", "else", "{", "severeEnabled", "=", "false", ";", "}", "}", "}", "}", "}", "}", "}", "if", "(", "resetChilds", ")", "{", "// implicit change of level demands that we update reset flags on childs without level\r", "for", "(", "TracerImpl", "child", ":", "childs", ")", "{", "if", "(", "child", ".", "level", "==", "null", ")", "{", "child", ".", "resetCacheFlags", "(", "true", ")", ";", "}", "}", "}", "}"], "docstring": "manages the flags which cache if levels are enabled", "docstring_tokens": ["manages", "the", "flags", "which", "cache", "if", "levels", "are", "enabled"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java#L167-L238", "partition": "test", "index": 7154, "time": "2010-09-13 22:23:11"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java", "func_name": "TracerImpl.assignLog4JLevel", "original_string": "private void assignLog4JLevel(Level log4jLevel) {\r\n\t\tif (log4jLevel == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (log4jLevel == Level.DEBUG) {\r\n\t\t\tlevel = TraceLevel.FINE;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.INFO) {\r\n\t\t\tlevel = TraceLevel.INFO;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.WARN) {\r\n\t\t\tlevel = TraceLevel.WARNING;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.ERROR) {\r\n\t\t\tlevel = TraceLevel.SEVERE;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.TRACE) {\r\n\t\t\tlevel = TraceLevel.FINEST;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.OFF) {\r\n\t\t\tlevel = TraceLevel.OFF;\r\n\t\t}\r\n\t}", "language": "java", "code": "private void assignLog4JLevel(Level log4jLevel) {\r\n\t\tif (log4jLevel == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (log4jLevel == Level.DEBUG) {\r\n\t\t\tlevel = TraceLevel.FINE;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.INFO) {\r\n\t\t\tlevel = TraceLevel.INFO;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.WARN) {\r\n\t\t\tlevel = TraceLevel.WARNING;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.ERROR) {\r\n\t\t\tlevel = TraceLevel.SEVERE;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.TRACE) {\r\n\t\t\tlevel = TraceLevel.FINEST;\r\n\t\t}\r\n\t\telse if (log4jLevel == Level.OFF) {\r\n\t\t\tlevel = TraceLevel.OFF;\r\n\t\t}\r\n\t}", "code_tokens": ["private", "void", "assignLog4JLevel", "(", "Level", "log4jLevel", ")", "{", "if", "(", "log4jLevel", "==", "null", ")", "{", "return", ";", "}", "if", "(", "log4jLevel", "==", "Level", ".", "DEBUG", ")", "{", "level", "=", "TraceLevel", ".", "FINE", ";", "}", "else", "if", "(", "log4jLevel", "==", "Level", ".", "INFO", ")", "{", "level", "=", "TraceLevel", ".", "INFO", ";", "}", "else", "if", "(", "log4jLevel", "==", "Level", ".", "WARN", ")", "{", "level", "=", "TraceLevel", ".", "WARNING", ";", "}", "else", "if", "(", "log4jLevel", "==", "Level", ".", "ERROR", ")", "{", "level", "=", "TraceLevel", ".", "SEVERE", ";", "}", "else", "if", "(", "log4jLevel", "==", "Level", ".", "TRACE", ")", "{", "level", "=", "TraceLevel", ".", "FINEST", ";", "}", "else", "if", "(", "log4jLevel", "==", "Level", ".", "OFF", ")", "{", "level", "=", "TraceLevel", ".", "OFF", ";", "}", "}"], "docstring": "assigns the equiv log4j level to the tracer\n@param log4jLevel", "docstring_tokens": ["assigns", "the", "equiv", "log4j", "level", "to", "the", "tracer"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java#L140-L162", "partition": "test", "index": 7153, "time": "2010-09-13 22:23:11"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java", "func_name": "TracerImpl.syncLevelWithLog4j", "original_string": "void syncLevelWithLog4j() {\r\n\t\t// get the level from log4j, only the root one uses effective level\r\n\t\tLevel log4jLevel = parent == null ? logger.getEffectiveLevel() : logger.getLevel();\r\n\t\tif (level == null) {\r\n\t\t\t// set the level\r\n\t\t\tassignLog4JLevel(log4jLevel);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// set the level only if differs, otherwise we may loose levels not present in log4j\r\n\t\t\tif (tracerToLog4JLevel(level) != log4jLevel) {\r\n\t\t\t\tassignLog4JLevel(log4jLevel);\t\t\t\t\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t// the root must always have a level\r\n\t\tif (parent == null && level == null) {\r\n\t\t\t// defaults to INFO\r\n\t\t\tlogger.setLevel(Level.INFO);\r\n\t\t\tlevel = TraceLevel.INFO;\t\t\t\r\n\t\t}\r\n\t\t// reset the flags\r\n\t\tresetCacheFlags(false);\r\n\t}", "language": "java", "code": "void syncLevelWithLog4j() {\r\n\t\t// get the level from log4j, only the root one uses effective level\r\n\t\tLevel log4jLevel = parent == null ? logger.getEffectiveLevel() : logger.getLevel();\r\n\t\tif (level == null) {\r\n\t\t\t// set the level\r\n\t\t\tassignLog4JLevel(log4jLevel);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// set the level only if differs, otherwise we may loose levels not present in log4j\r\n\t\t\tif (tracerToLog4JLevel(level) != log4jLevel) {\r\n\t\t\t\tassignLog4JLevel(log4jLevel);\t\t\t\t\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t// the root must always have a level\r\n\t\tif (parent == null && level == null) {\r\n\t\t\t// defaults to INFO\r\n\t\t\tlogger.setLevel(Level.INFO);\r\n\t\t\tlevel = TraceLevel.INFO;\t\t\t\r\n\t\t}\r\n\t\t// reset the flags\r\n\t\tresetCacheFlags(false);\r\n\t}", "code_tokens": ["void", "syncLevelWithLog4j", "(", ")", "{", "// get the level from log4j, only the root one uses effective level\r", "Level", "log4jLevel", "=", "parent", "==", "null", "?", "logger", ".", "getEffectiveLevel", "(", ")", ":", "logger", ".", "getLevel", "(", ")", ";", "if", "(", "level", "==", "null", ")", "{", "// set the level\r", "assignLog4JLevel", "(", "log4jLevel", ")", ";", "}", "else", "{", "// set the level only if differs, otherwise we may loose levels not present in log4j\r", "if", "(", "tracerToLog4JLevel", "(", "level", ")", "!=", "log4jLevel", ")", "{", "assignLog4JLevel", "(", "log4jLevel", ")", ";", "}", "}", "// the root must always have a level\r", "if", "(", "parent", "==", "null", "&&", "level", "==", "null", ")", "{", "// defaults to INFO\r", "logger", ".", "setLevel", "(", "Level", ".", "INFO", ")", ";", "level", "=", "TraceLevel", ".", "INFO", ";", "}", "// reset the flags\r", "resetCacheFlags", "(", "false", ")", ";", "}"], "docstring": "syncs the slee tracer level with the one that related logger has in log4j", "docstring_tokens": ["syncs", "the", "slee", "tracer", "level", "with", "the", "one", "that", "related", "logger", "has", "in", "log4j"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/runtime/facilities/TracerImpl.java#L113-L134", "partition": "test", "index": 7152, "time": "2010-09-13 22:23:11"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java", "func_name": "SLEESubDeployer.accepts", "original_string": "public boolean accepts(URL deployableUnitURL, String deployableUnitName) {\n\t\tDeployableUnitWrapper du = new DeployableUnitWrapper(deployableUnitURL, deployableUnitName);\n\n\t\tURL url = du.getUrl();\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method accepts called for \" + url + \" [DU: \" + deployableUnitName + \"]\");\n\t\t}\n\n\t\ttry {\n\t\t\tString fullPath = url.getFile();\n\t\t\tString fileName = fullPath.substring(fullPath.lastIndexOf('/') + 1,\n\t\t\t\t\tfullPath.length());\n\n\t\t\t// Is it in the toAccept list ? Direct accept.\n\t\t\tif (toAccept.containsKey(fileName)) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"Accepting \" + url.toString() + \".\");\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// If not it the accept list but it's a jar might be a DU jar...\n\t\t\telse if (fileName.endsWith(\".jar\")) {\n\t\t\t\tJarFile duJarFile = null;\n\n\t\t\t\ttry {\n\t\t\t\t\t// Try to obtain the DU descriptor, if we got it, we're\n\t\t\t\t\t// accepting it!\n\t\t\t\t\tif (du.getEntry(\"META-INF/deployable-unit.xml\") != null) {\n\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\t\tlogger.trace(\"Accepting \" + url.toString() + \".\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// Clean up!\n\t\t\t\t\tif (duJarFile != null) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tduJarFile.close();\n\t\t\t\t\t\t} catch (IOException ignore) {\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tduJarFile = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ignore) {\n\t\t\t// Ignore.. will reject.\n\t\t}\n\n\t\t// Uh-oh.. looks like it will stay outside.\n\t\treturn false;\n\t}", "language": "java", "code": "public boolean accepts(URL deployableUnitURL, String deployableUnitName) {\n\t\tDeployableUnitWrapper du = new DeployableUnitWrapper(deployableUnitURL, deployableUnitName);\n\n\t\tURL url = du.getUrl();\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method accepts called for \" + url + \" [DU: \" + deployableUnitName + \"]\");\n\t\t}\n\n\t\ttry {\n\t\t\tString fullPath = url.getFile();\n\t\t\tString fileName = fullPath.substring(fullPath.lastIndexOf('/') + 1,\n\t\t\t\t\tfullPath.length());\n\n\t\t\t// Is it in the toAccept list ? Direct accept.\n\t\t\tif (toAccept.containsKey(fileName)) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"Accepting \" + url.toString() + \".\");\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// If not it the accept list but it's a jar might be a DU jar...\n\t\t\telse if (fileName.endsWith(\".jar\")) {\n\t\t\t\tJarFile duJarFile = null;\n\n\t\t\t\ttry {\n\t\t\t\t\t// Try to obtain the DU descriptor, if we got it, we're\n\t\t\t\t\t// accepting it!\n\t\t\t\t\tif (du.getEntry(\"META-INF/deployable-unit.xml\") != null) {\n\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\t\tlogger.trace(\"Accepting \" + url.toString() + \".\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// Clean up!\n\t\t\t\t\tif (duJarFile != null) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tduJarFile.close();\n\t\t\t\t\t\t} catch (IOException ignore) {\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tduJarFile = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ignore) {\n\t\t\t// Ignore.. will reject.\n\t\t}\n\n\t\t// Uh-oh.. looks like it will stay outside.\n\t\treturn false;\n\t}", "code_tokens": ["public", "boolean", "accepts", "(", "URL", "deployableUnitURL", ",", "String", "deployableUnitName", ")", "{", "DeployableUnitWrapper", "du", "=", "new", "DeployableUnitWrapper", "(", "deployableUnitURL", ",", "deployableUnitName", ")", ";", "URL", "url", "=", "du", ".", "getUrl", "(", ")", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Method accepts called for \"", "+", "url", "+", "\" [DU: \"", "+", "deployableUnitName", "+", "\"]\"", ")", ";", "}", "try", "{", "String", "fullPath", "=", "url", ".", "getFile", "(", ")", ";", "String", "fileName", "=", "fullPath", ".", "substring", "(", "fullPath", ".", "lastIndexOf", "(", "'", "'", ")", "+", "1", ",", "fullPath", ".", "length", "(", ")", ")", ";", "// Is it in the toAccept list ? Direct accept.", "if", "(", "toAccept", ".", "containsKey", "(", "fileName", ")", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Accepting \"", "+", "url", ".", "toString", "(", ")", "+", "\".\"", ")", ";", "}", "return", "true", ";", "}", "// If not it the accept list but it's a jar might be a DU jar...", "else", "if", "(", "fileName", ".", "endsWith", "(", "\".jar\"", ")", ")", "{", "JarFile", "duJarFile", "=", "null", ";", "try", "{", "// Try to obtain the DU descriptor, if we got it, we're", "// accepting it!", "if", "(", "du", ".", "getEntry", "(", "\"META-INF/deployable-unit.xml\"", ")", "!=", "null", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Accepting \"", "+", "url", ".", "toString", "(", ")", "+", "\".\"", ")", ";", "}", "return", "true", ";", "}", "}", "finally", "{", "// Clean up!", "if", "(", "duJarFile", "!=", "null", ")", "{", "try", "{", "duJarFile", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "ignore", ")", "{", "}", "finally", "{", "duJarFile", "=", "null", ";", "}", "}", "}", "}", "}", "catch", "(", "Exception", "ignore", ")", "{", "// Ignore.. will reject.", "}", "// Uh-oh.. looks like it will stay outside.", "return", "false", ";", "}"], "docstring": "Method for deciding whether or not to accept the file.", "docstring_tokens": ["Method", "for", "deciding", "whether", "or", "not", "to", "accept", "the", "file", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java#L78-L132", "partition": "test", "index": 7036, "time": "2011-02-28 14:56:32"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java", "func_name": "SLEESubDeployer.init", "original_string": "public void init(URL deployableUnitURL, String deployableUnitName) throws DeploymentException {\n\t\tURL url = deployableUnitURL;\n\t\tDeployableUnitWrapper du = new DeployableUnitWrapper(deployableUnitURL, deployableUnitName);\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method init called for \" + deployableUnitURL + \" [DU: \" + deployableUnitName + \"]\");\n\t\t}\n\n\t\t// Get the full path and filename for this du\n\t\tString fullPath = du.getFullPath();\n\t\tString fileName = du.getFileName();\n\n\t\ttry {\n\t\t\tDeployableUnitWrapper duWrapper = null;\n\n\t\t\t// If we're able to remove it from toAccept was because it was\n\t\t\t// there!\n\t\t\tif ((duWrapper = toAccept.remove(fileName)) != null) {\n\t\t\t\t// Create a new Deployable Component from this DI.\n\t\t\t\tDeployableComponent dc = new DeployableComponent(du, url,\n\t\t\t\t\t\tfileName, sleeContainerDeployer);\n\n\t\t\t\t// Also get the deployable unit for this (it exists, we've\n\t\t\t\t// checked!)\n\t\t\t\tDeployableUnit deployerDU = deployableUnits.get(duWrapper\n\t\t\t\t\t\t.getFileName());\n\n\t\t\t\tfor (DeployableComponent subDC : dc.getSubComponents()) {\n\t\t\t\t\t// Add the sub-component to the DU object.\n\t\t\t\t\tdeployerDU.addComponent(subDC);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the DU for this component doesn't exists.. it's a new DU!\n\t\t\telse if (fileName.endsWith(\".jar\")) {\n\t\t\t\tJarFile duJarFile = null;\n\n\t\t\t\ttry {\n\t\t\t\t\t// Get a reference to the DU jar file\n\t\t\t\t\tduJarFile = new JarFile(fullPath);\n\n\t\t\t\t\t// Try to get the Deployable Unit descriptor\n\t\t\t\t\tJarEntry duXmlEntry = duJarFile\n\t\t\t\t\t\t\t.getJarEntry(\"META-INF/deployable-unit.xml\");\n\n\t\t\t\t\t// Got descriptor?\n\t\t\t\t\tif (duXmlEntry != null) {\n\t\t\t\t\t\t// Create a new Deployable Unit object.\n\t\t\t\t\t\tDeployableUnit deployerDU = new DeployableUnit(du,sleeContainerDeployer);\n\n\t\t\t\t\t\t// Let's parse the descriptor to see what we've got...\n\t\t\t\t\t\tDeployableUnitDescriptorFactory dudf = sleeContainerDeployer\n\t\t\t\t\t\t\t\t.getSleeContainer().getComponentManagement()\n\t\t\t\t\t\t\t\t.getDeployableUnitManagement()\n\t\t\t\t\t\t\t\t.getDeployableUnitDescriptorFactory();\n\t\t\t\t\t\tDeployableUnitDescriptor duDesc = dudf.parse(duJarFile\n\t\t\t\t\t\t\t\t.getInputStream(duXmlEntry));\n\n\t\t\t\t\t\t// If the filename is present, an undeploy in on the way... let's wait\n\t\t\t\t\t\twhile(deployableUnits.containsKey(fileName)) {\n\t\t\t\t\t\t\tThread.sleep(getWaitTimeBetweenOperations());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Add it to the deployable units map.\n\t\t\t\t\t\tdeployableUnits.put(fileName, deployerDU);\n\n\t\t\t\t\t\t// Go through each jar entry in the DU descriptor\n\t\t\t\t\t\tfor (String componentJarName : duDesc.getJarEntries()) {\n\t\t\t\t\t\t\t// Might have path... strip it!\n\t\t\t\t\t\t\tint beginIndex;\n\n\t\t\t\t\t\t\tif ((beginIndex = componentJarName.lastIndexOf('/')) == -1)\n\t\t\t\t\t\t\t\tbeginIndex = componentJarName.lastIndexOf('\\\\');\n\n\t\t\t\t\t\t\tbeginIndex++;\n\n\t\t\t\t\t\t\t// Got a clean jar name, no paths.\n\t\t\t\t\t\t\tcomponentJarName = componentJarName.substring(\n\t\t\t\t\t\t\t\t\tbeginIndex, componentJarName.length());\n\n\t\t\t\t\t\t\t// Put it in the accept list.\n\t\t\t\t\t\t\ttoAccept.put(componentJarName, du);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do the same as above... but for services\n\t\t\t\t\t\tfor (String serviceXMLName : duDesc.getServiceEntries()) {\n\t\t\t\t\t\t\t// Might have path... strip it!\n\t\t\t\t\t\t\tint beginIndex;\n\n\t\t\t\t\t\t\tif ((beginIndex = serviceXMLName.lastIndexOf('/')) == -1)\n\t\t\t\t\t\t\t\tbeginIndex = serviceXMLName.lastIndexOf('\\\\');\n\n\t\t\t\t\t\t\tbeginIndex++;\n\n\t\t\t\t\t\t\t// Got a clean XML filename\n\t\t\t\t\t\t\tserviceXMLName = serviceXMLName.substring(\n\t\t\t\t\t\t\t\t\tbeginIndex, serviceXMLName.length());\n\n\t\t\t\t\t\t\t// Add it to the accept list.\n\t\t\t\t\t\t\ttoAccept.put(serviceXMLName, du);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// Clean up!\n\t\t\t\t\tif (duJarFile != null) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tduJarFile.close();\n\t\t\t\t\t\t} catch (IOException ignore) {\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tduJarFile = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// Something went wrong...\n\t\t\tlogger.error(\"Deployment of \" + fileName + \" failed. \", e);\n\n\t\t\treturn;\n\t\t}\n\t}", "language": "java", "code": "public void init(URL deployableUnitURL, String deployableUnitName) throws DeploymentException {\n\t\tURL url = deployableUnitURL;\n\t\tDeployableUnitWrapper du = new DeployableUnitWrapper(deployableUnitURL, deployableUnitName);\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method init called for \" + deployableUnitURL + \" [DU: \" + deployableUnitName + \"]\");\n\t\t}\n\n\t\t// Get the full path and filename for this du\n\t\tString fullPath = du.getFullPath();\n\t\tString fileName = du.getFileName();\n\n\t\ttry {\n\t\t\tDeployableUnitWrapper duWrapper = null;\n\n\t\t\t// If we're able to remove it from toAccept was because it was\n\t\t\t// there!\n\t\t\tif ((duWrapper = toAccept.remove(fileName)) != null) {\n\t\t\t\t// Create a new Deployable Component from this DI.\n\t\t\t\tDeployableComponent dc = new DeployableComponent(du, url,\n\t\t\t\t\t\tfileName, sleeContainerDeployer);\n\n\t\t\t\t// Also get the deployable unit for this (it exists, we've\n\t\t\t\t// checked!)\n\t\t\t\tDeployableUnit deployerDU = deployableUnits.get(duWrapper\n\t\t\t\t\t\t.getFileName());\n\n\t\t\t\tfor (DeployableComponent subDC : dc.getSubComponents()) {\n\t\t\t\t\t// Add the sub-component to the DU object.\n\t\t\t\t\tdeployerDU.addComponent(subDC);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the DU for this component doesn't exists.. it's a new DU!\n\t\t\telse if (fileName.endsWith(\".jar\")) {\n\t\t\t\tJarFile duJarFile = null;\n\n\t\t\t\ttry {\n\t\t\t\t\t// Get a reference to the DU jar file\n\t\t\t\t\tduJarFile = new JarFile(fullPath);\n\n\t\t\t\t\t// Try to get the Deployable Unit descriptor\n\t\t\t\t\tJarEntry duXmlEntry = duJarFile\n\t\t\t\t\t\t\t.getJarEntry(\"META-INF/deployable-unit.xml\");\n\n\t\t\t\t\t// Got descriptor?\n\t\t\t\t\tif (duXmlEntry != null) {\n\t\t\t\t\t\t// Create a new Deployable Unit object.\n\t\t\t\t\t\tDeployableUnit deployerDU = new DeployableUnit(du,sleeContainerDeployer);\n\n\t\t\t\t\t\t// Let's parse the descriptor to see what we've got...\n\t\t\t\t\t\tDeployableUnitDescriptorFactory dudf = sleeContainerDeployer\n\t\t\t\t\t\t\t\t.getSleeContainer().getComponentManagement()\n\t\t\t\t\t\t\t\t.getDeployableUnitManagement()\n\t\t\t\t\t\t\t\t.getDeployableUnitDescriptorFactory();\n\t\t\t\t\t\tDeployableUnitDescriptor duDesc = dudf.parse(duJarFile\n\t\t\t\t\t\t\t\t.getInputStream(duXmlEntry));\n\n\t\t\t\t\t\t// If the filename is present, an undeploy in on the way... let's wait\n\t\t\t\t\t\twhile(deployableUnits.containsKey(fileName)) {\n\t\t\t\t\t\t\tThread.sleep(getWaitTimeBetweenOperations());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Add it to the deployable units map.\n\t\t\t\t\t\tdeployableUnits.put(fileName, deployerDU);\n\n\t\t\t\t\t\t// Go through each jar entry in the DU descriptor\n\t\t\t\t\t\tfor (String componentJarName : duDesc.getJarEntries()) {\n\t\t\t\t\t\t\t// Might have path... strip it!\n\t\t\t\t\t\t\tint beginIndex;\n\n\t\t\t\t\t\t\tif ((beginIndex = componentJarName.lastIndexOf('/')) == -1)\n\t\t\t\t\t\t\t\tbeginIndex = componentJarName.lastIndexOf('\\\\');\n\n\t\t\t\t\t\t\tbeginIndex++;\n\n\t\t\t\t\t\t\t// Got a clean jar name, no paths.\n\t\t\t\t\t\t\tcomponentJarName = componentJarName.substring(\n\t\t\t\t\t\t\t\t\tbeginIndex, componentJarName.length());\n\n\t\t\t\t\t\t\t// Put it in the accept list.\n\t\t\t\t\t\t\ttoAccept.put(componentJarName, du);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do the same as above... but for services\n\t\t\t\t\t\tfor (String serviceXMLName : duDesc.getServiceEntries()) {\n\t\t\t\t\t\t\t// Might have path... strip it!\n\t\t\t\t\t\t\tint beginIndex;\n\n\t\t\t\t\t\t\tif ((beginIndex = serviceXMLName.lastIndexOf('/')) == -1)\n\t\t\t\t\t\t\t\tbeginIndex = serviceXMLName.lastIndexOf('\\\\');\n\n\t\t\t\t\t\t\tbeginIndex++;\n\n\t\t\t\t\t\t\t// Got a clean XML filename\n\t\t\t\t\t\t\tserviceXMLName = serviceXMLName.substring(\n\t\t\t\t\t\t\t\t\tbeginIndex, serviceXMLName.length());\n\n\t\t\t\t\t\t\t// Add it to the accept list.\n\t\t\t\t\t\t\ttoAccept.put(serviceXMLName, du);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// Clean up!\n\t\t\t\t\tif (duJarFile != null) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tduJarFile.close();\n\t\t\t\t\t\t} catch (IOException ignore) {\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tduJarFile = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// Something went wrong...\n\t\t\tlogger.error(\"Deployment of \" + fileName + \" failed. \", e);\n\n\t\t\treturn;\n\t\t}\n\t}", "code_tokens": ["public", "void", "init", "(", "URL", "deployableUnitURL", ",", "String", "deployableUnitName", ")", "throws", "DeploymentException", "{", "URL", "url", "=", "deployableUnitURL", ";", "DeployableUnitWrapper", "du", "=", "new", "DeployableUnitWrapper", "(", "deployableUnitURL", ",", "deployableUnitName", ")", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Method init called for \"", "+", "deployableUnitURL", "+", "\" [DU: \"", "+", "deployableUnitName", "+", "\"]\"", ")", ";", "}", "// Get the full path and filename for this du", "String", "fullPath", "=", "du", ".", "getFullPath", "(", ")", ";", "String", "fileName", "=", "du", ".", "getFileName", "(", ")", ";", "try", "{", "DeployableUnitWrapper", "duWrapper", "=", "null", ";", "// If we're able to remove it from toAccept was because it was", "// there!", "if", "(", "(", "duWrapper", "=", "toAccept", ".", "remove", "(", "fileName", ")", ")", "!=", "null", ")", "{", "// Create a new Deployable Component from this DI.", "DeployableComponent", "dc", "=", "new", "DeployableComponent", "(", "du", ",", "url", ",", "fileName", ",", "sleeContainerDeployer", ")", ";", "// Also get the deployable unit for this (it exists, we've", "// checked!)", "DeployableUnit", "deployerDU", "=", "deployableUnits", ".", "get", "(", "duWrapper", ".", "getFileName", "(", ")", ")", ";", "for", "(", "DeployableComponent", "subDC", ":", "dc", ".", "getSubComponents", "(", ")", ")", "{", "// Add the sub-component to the DU object.", "deployerDU", ".", "addComponent", "(", "subDC", ")", ";", "}", "}", "// If the DU for this component doesn't exists.. it's a new DU!", "else", "if", "(", "fileName", ".", "endsWith", "(", "\".jar\"", ")", ")", "{", "JarFile", "duJarFile", "=", "null", ";", "try", "{", "// Get a reference to the DU jar file", "duJarFile", "=", "new", "JarFile", "(", "fullPath", ")", ";", "// Try to get the Deployable Unit descriptor", "JarEntry", "duXmlEntry", "=", "duJarFile", ".", "getJarEntry", "(", "\"META-INF/deployable-unit.xml\"", ")", ";", "// Got descriptor?", "if", "(", "duXmlEntry", "!=", "null", ")", "{", "// Create a new Deployable Unit object.", "DeployableUnit", "deployerDU", "=", "new", "DeployableUnit", "(", "du", ",", "sleeContainerDeployer", ")", ";", "// Let's parse the descriptor to see what we've got...", "DeployableUnitDescriptorFactory", "dudf", "=", "sleeContainerDeployer", ".", "getSleeContainer", "(", ")", ".", "getComponentManagement", "(", ")", ".", "getDeployableUnitManagement", "(", ")", ".", "getDeployableUnitDescriptorFactory", "(", ")", ";", "DeployableUnitDescriptor", "duDesc", "=", "dudf", ".", "parse", "(", "duJarFile", ".", "getInputStream", "(", "duXmlEntry", ")", ")", ";", "// If the filename is present, an undeploy in on the way... let's wait", "while", "(", "deployableUnits", ".", "containsKey", "(", "fileName", ")", ")", "{", "Thread", ".", "sleep", "(", "getWaitTimeBetweenOperations", "(", ")", ")", ";", "}", "// Add it to the deployable units map.", "deployableUnits", ".", "put", "(", "fileName", ",", "deployerDU", ")", ";", "// Go through each jar entry in the DU descriptor", "for", "(", "String", "componentJarName", ":", "duDesc", ".", "getJarEntries", "(", ")", ")", "{", "// Might have path... strip it!", "int", "beginIndex", ";", "if", "(", "(", "beginIndex", "=", "componentJarName", ".", "lastIndexOf", "(", "'", "'", ")", ")", "==", "-", "1", ")", "beginIndex", "=", "componentJarName", ".", "lastIndexOf", "(", "'", "'", ")", ";", "beginIndex", "++", ";", "// Got a clean jar name, no paths.", "componentJarName", "=", "componentJarName", ".", "substring", "(", "beginIndex", ",", "componentJarName", ".", "length", "(", ")", ")", ";", "// Put it in the accept list.", "toAccept", ".", "put", "(", "componentJarName", ",", "du", ")", ";", "}", "// Do the same as above... but for services", "for", "(", "String", "serviceXMLName", ":", "duDesc", ".", "getServiceEntries", "(", ")", ")", "{", "// Might have path... strip it!", "int", "beginIndex", ";", "if", "(", "(", "beginIndex", "=", "serviceXMLName", ".", "lastIndexOf", "(", "'", "'", ")", ")", "==", "-", "1", ")", "beginIndex", "=", "serviceXMLName", ".", "lastIndexOf", "(", "'", "'", ")", ";", "beginIndex", "++", ";", "// Got a clean XML filename", "serviceXMLName", "=", "serviceXMLName", ".", "substring", "(", "beginIndex", ",", "serviceXMLName", ".", "length", "(", ")", ")", ";", "// Add it to the accept list.", "toAccept", ".", "put", "(", "serviceXMLName", ",", "du", ")", ";", "}", "}", "}", "finally", "{", "// Clean up!", "if", "(", "duJarFile", "!=", "null", ")", "{", "try", "{", "duJarFile", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "ignore", ")", "{", "}", "finally", "{", "duJarFile", "=", "null", ";", "}", "}", "}", "}", "}", "catch", "(", "Exception", "e", ")", "{", "// Something went wrong...", "logger", ".", "error", "(", "\"Deployment of \"", "+", "fileName", "+", "\" failed. \"", ",", "e", ")", ";", "return", ";", "}", "}"], "docstring": "Initializer method for accepted files. Will parse descriptors at this\npoint.", "docstring_tokens": ["Initializer", "method", "for", "accepted", "files", ".", "Will", "parse", "descriptors", "at", "this", "point", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java#L138-L257", "partition": "test", "index": 7037, "time": "2011-02-28 14:56:32"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java", "func_name": "SLEESubDeployer.start", "original_string": "public void start(URL deployableUnitURL, String deployableUnitName) throws DeploymentException {\n\t\tDeployableUnitWrapper du = new DeployableUnitWrapper(deployableUnitURL, deployableUnitName);\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method start called for \" + du.getUrl() + \" [DU: \" + deployableUnitName + \"]\");\n\t\t}\n\n\t\ttry {\n\t\t\t// Get the deployable unit object\n\t\t\tDeployableUnit realDU = deployableUnits.get(du.getFileName());\n\n\t\t\t// If it exists, install it.\n\t\t\tif (realDU != null) {\n\t\t\t\twhile (isInUndeployList(du.getFileName())) {\n\t\t\t\t\tThread.sleep(getWaitTimeBetweenOperations());\n\t\t\t\t}\n\t\t\t\tsleeContainerDeployer.getDeploymentManager().installDeployableUnit(realDU);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"\", e);\n\t\t}\n\t}", "language": "java", "code": "public void start(URL deployableUnitURL, String deployableUnitName) throws DeploymentException {\n\t\tDeployableUnitWrapper du = new DeployableUnitWrapper(deployableUnitURL, deployableUnitName);\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method start called for \" + du.getUrl() + \" [DU: \" + deployableUnitName + \"]\");\n\t\t}\n\n\t\ttry {\n\t\t\t// Get the deployable unit object\n\t\t\tDeployableUnit realDU = deployableUnits.get(du.getFileName());\n\n\t\t\t// If it exists, install it.\n\t\t\tif (realDU != null) {\n\t\t\t\twhile (isInUndeployList(du.getFileName())) {\n\t\t\t\t\tThread.sleep(getWaitTimeBetweenOperations());\n\t\t\t\t}\n\t\t\t\tsleeContainerDeployer.getDeploymentManager().installDeployableUnit(realDU);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"\", e);\n\t\t}\n\t}", "code_tokens": ["public", "void", "start", "(", "URL", "deployableUnitURL", ",", "String", "deployableUnitName", ")", "throws", "DeploymentException", "{", "DeployableUnitWrapper", "du", "=", "new", "DeployableUnitWrapper", "(", "deployableUnitURL", ",", "deployableUnitName", ")", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Method start called for \"", "+", "du", ".", "getUrl", "(", ")", "+", "\" [DU: \"", "+", "deployableUnitName", "+", "\"]\"", ")", ";", "}", "try", "{", "// Get the deployable unit object", "DeployableUnit", "realDU", "=", "deployableUnits", ".", "get", "(", "du", ".", "getFileName", "(", ")", ")", ";", "// If it exists, install it.", "if", "(", "realDU", "!=", "null", ")", "{", "while", "(", "isInUndeployList", "(", "du", ".", "getFileName", "(", ")", ")", ")", "{", "Thread", ".", "sleep", "(", "getWaitTimeBetweenOperations", "(", ")", ")", ";", "}", "sleeContainerDeployer", ".", "getDeploymentManager", "(", ")", ".", "installDeployableUnit", "(", "realDU", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "error", "(", "\"\"", ",", "e", ")", ";", "}", "}"], "docstring": "This is where the fun begins. Time to deploy!", "docstring_tokens": ["This", "is", "where", "the", "fun", "begins", ".", "Time", "to", "deploy!"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java#L262-L283", "partition": "test", "index": 7038, "time": "2011-02-28 14:56:32"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java", "func_name": "SLEESubDeployer.stop", "original_string": "public void stop(URL deployableUnitURL, String deployableUnitName) throws DeploymentException {\n\t\t\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"stop( deployableUnitURL = : \" + deployableUnitURL+\" )\");\n\t\t}\n\t\t\n\t\tDeployableUnitWrapper du = new DeployableUnitWrapper(deployableUnitURL, deployableUnitName);\n\n\t\tDeployableUnit realDU = null;\n\n\t\tString fileName = du.getFileName();\n\n\t\tif ((realDU = deployableUnits.get(du.getFileName())) != null) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Got DU: \" + realDU.getDeploymentInfoShortName());\n\t\t\t}\n\n\t\t\tif (!isInUndeployList(fileName)) {\n\t\t\t\taddToUndeployList(fileName);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Uninstall it\n\t\t\t\tsleeContainerDeployer.getDeploymentManager().uninstallDeployableUnit(realDU);\n\t\t\t\t// Remove it from list if successful\n\t\t\t\tdeployableUnits.remove(fileName);\n\t\t\t\tremoveFromUndeployList(fileName);\t\t\t\t\n\t\t\t} catch (DependencyException e) {\n\t\t\t\t// ignore, will be tried again once there is another undeployment\n\t\t\t} catch (Exception e) {\n\t\t\t\tThrowable cause = e.getCause();\n\t\t\t\tif (cause instanceof InvalidStateException) {\n\t\t\t\t\tlogger.warn(cause.getLocalizedMessage() + \"... WAITING ...\");\n\t\t\t\t} else if (e instanceof DeploymentException) {\n\t\t\t\t\tthrow new IllegalStateException(e.getLocalizedMessage(), e);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\t\t\t\t\t\t\n\t\t}\n\t}", "language": "java", "code": "public void stop(URL deployableUnitURL, String deployableUnitName) throws DeploymentException {\n\t\t\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"stop( deployableUnitURL = : \" + deployableUnitURL+\" )\");\n\t\t}\n\t\t\n\t\tDeployableUnitWrapper du = new DeployableUnitWrapper(deployableUnitURL, deployableUnitName);\n\n\t\tDeployableUnit realDU = null;\n\n\t\tString fileName = du.getFileName();\n\n\t\tif ((realDU = deployableUnits.get(du.getFileName())) != null) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Got DU: \" + realDU.getDeploymentInfoShortName());\n\t\t\t}\n\n\t\t\tif (!isInUndeployList(fileName)) {\n\t\t\t\taddToUndeployList(fileName);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Uninstall it\n\t\t\t\tsleeContainerDeployer.getDeploymentManager().uninstallDeployableUnit(realDU);\n\t\t\t\t// Remove it from list if successful\n\t\t\t\tdeployableUnits.remove(fileName);\n\t\t\t\tremoveFromUndeployList(fileName);\t\t\t\t\n\t\t\t} catch (DependencyException e) {\n\t\t\t\t// ignore, will be tried again once there is another undeployment\n\t\t\t} catch (Exception e) {\n\t\t\t\tThrowable cause = e.getCause();\n\t\t\t\tif (cause instanceof InvalidStateException) {\n\t\t\t\t\tlogger.warn(cause.getLocalizedMessage() + \"... WAITING ...\");\n\t\t\t\t} else if (e instanceof DeploymentException) {\n\t\t\t\t\tthrow new IllegalStateException(e.getLocalizedMessage(), e);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\t\t\t\t\t\t\n\t\t}\n\t}", "code_tokens": ["public", "void", "stop", "(", "URL", "deployableUnitURL", ",", "String", "deployableUnitName", ")", "throws", "DeploymentException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"stop( deployableUnitURL = : \"", "+", "deployableUnitURL", "+", "\" )\"", ")", ";", "}", "DeployableUnitWrapper", "du", "=", "new", "DeployableUnitWrapper", "(", "deployableUnitURL", ",", "deployableUnitName", ")", ";", "DeployableUnit", "realDU", "=", "null", ";", "String", "fileName", "=", "du", ".", "getFileName", "(", ")", ";", "if", "(", "(", "realDU", "=", "deployableUnits", ".", "get", "(", "du", ".", "getFileName", "(", ")", ")", ")", "!=", "null", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Got DU: \"", "+", "realDU", ".", "getDeploymentInfoShortName", "(", ")", ")", ";", "}", "if", "(", "!", "isInUndeployList", "(", "fileName", ")", ")", "{", "addToUndeployList", "(", "fileName", ")", ";", "}", "try", "{", "// Uninstall it", "sleeContainerDeployer", ".", "getDeploymentManager", "(", ")", ".", "uninstallDeployableUnit", "(", "realDU", ")", ";", "// Remove it from list if successful", "deployableUnits", ".", "remove", "(", "fileName", ")", ";", "removeFromUndeployList", "(", "fileName", ")", ";", "}", "catch", "(", "DependencyException", "e", ")", "{", "// ignore, will be tried again once there is another undeployment", "}", "catch", "(", "Exception", "e", ")", "{", "Throwable", "cause", "=", "e", ".", "getCause", "(", ")", ";", "if", "(", "cause", "instanceof", "InvalidStateException", ")", "{", "logger", ".", "warn", "(", "cause", ".", "getLocalizedMessage", "(", ")", "+", "\"... WAITING ...\"", ")", ";", "}", "else", "if", "(", "e", "instanceof", "DeploymentException", ")", "{", "throw", "new", "IllegalStateException", "(", "e", ".", "getLocalizedMessage", "(", ")", ",", "e", ")", ";", "}", "else", "{", "logger", ".", "error", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}", "}"], "docstring": "Fun has ended. Time to undeploy.", "docstring_tokens": ["Fun", "has", "ended", ".", "Time", "to", "undeploy", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java#L288-L328", "partition": "test", "index": 7039, "time": "2011-02-28 14:56:32"}
{"repo": "RestComm/jain-slee", "path": "container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java", "func_name": "SLEESubDeployer.showStatus", "original_string": "public String showStatus() throws DeploymentException {\n\t\tString output = \"\";\n\n\t\toutput += \"<p>Deployable Units List:</p>\";\n\n\t\tfor (String key : deployableUnits.keySet()) {\n\t\t\toutput += \"&lt;\" + key + \"&gt; [\" + deployableUnits.get(key)\n\t\t\t\t\t+ \"]<br>\";\n\n\t\t\tfor (String duComponent : deployableUnits.get(key).getComponents()) {\n\t\t\t\toutput += \"+-- \" + duComponent + \"<br>\";\n\t\t\t}\n\t\t}\n\n\t\toutput += \"<p>To Accept List:</p>\";\n\n\t\tfor (String key : toAccept.keySet()) {\n\t\t\toutput += \"&lt;\" + key + \"&gt; [\" + toAccept.get(key) + \"]<br>\";\n\t\t}\n\n\t\toutput += \"<p>Undeployments running:</p>\";\n\n\t\tfor (String undeploy : undeploys) {\n\t\t\toutput += \"+-- \" + undeploy + \"<br>\";\n\t\t}\n\n\t\toutput += \"<p>Deployment Manager Status</p>\";\n\n\t\toutput += sleeContainerDeployer.getDeploymentManager().showStatus();\n\n\t\treturn output;\n\t}", "language": "java", "code": "public String showStatus() throws DeploymentException {\n\t\tString output = \"\";\n\n\t\toutput += \"<p>Deployable Units List:</p>\";\n\n\t\tfor (String key : deployableUnits.keySet()) {\n\t\t\toutput += \"&lt;\" + key + \"&gt; [\" + deployableUnits.get(key)\n\t\t\t\t\t+ \"]<br>\";\n\n\t\t\tfor (String duComponent : deployableUnits.get(key).getComponents()) {\n\t\t\t\toutput += \"+-- \" + duComponent + \"<br>\";\n\t\t\t}\n\t\t}\n\n\t\toutput += \"<p>To Accept List:</p>\";\n\n\t\tfor (String key : toAccept.keySet()) {\n\t\t\toutput += \"&lt;\" + key + \"&gt; [\" + toAccept.get(key) + \"]<br>\";\n\t\t}\n\n\t\toutput += \"<p>Undeployments running:</p>\";\n\n\t\tfor (String undeploy : undeploys) {\n\t\t\toutput += \"+-- \" + undeploy + \"<br>\";\n\t\t}\n\n\t\toutput += \"<p>Deployment Manager Status</p>\";\n\n\t\toutput += sleeContainerDeployer.getDeploymentManager().showStatus();\n\n\t\treturn output;\n\t}", "code_tokens": ["public", "String", "showStatus", "(", ")", "throws", "DeploymentException", "{", "String", "output", "=", "\"\"", ";", "output", "+=", "\"<p>Deployable Units List:</p>\"", ";", "for", "(", "String", "key", ":", "deployableUnits", ".", "keySet", "(", ")", ")", "{", "output", "+=", "\"&lt;\"", "+", "key", "+", "\"&gt; [\"", "+", "deployableUnits", ".", "get", "(", "key", ")", "+", "\"]<br>\"", ";", "for", "(", "String", "duComponent", ":", "deployableUnits", ".", "get", "(", "key", ")", ".", "getComponents", "(", ")", ")", "{", "output", "+=", "\"+-- \"", "+", "duComponent", "+", "\"<br>\"", ";", "}", "}", "output", "+=", "\"<p>To Accept List:</p>\"", ";", "for", "(", "String", "key", ":", "toAccept", ".", "keySet", "(", ")", ")", "{", "output", "+=", "\"&lt;\"", "+", "key", "+", "\"&gt; [\"", "+", "toAccept", ".", "get", "(", "key", ")", "+", "\"]<br>\"", ";", "}", "output", "+=", "\"<p>Undeployments running:</p>\"", ";", "for", "(", "String", "undeploy", ":", "undeploys", ")", "{", "output", "+=", "\"+-- \"", "+", "undeploy", "+", "\"<br>\"", ";", "}", "output", "+=", "\"<p>Deployment Manager Status</p>\"", ";", "output", "+=", "sleeContainerDeployer", ".", "getDeploymentManager", "(", ")", ".", "showStatus", "(", ")", ";", "return", "output", ";", "}"], "docstring": "MBean operation for getting Deployer status.", "docstring_tokens": ["MBean", "operation", "for", "getting", "Deployer", "status", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/common/src/main/java/org/mobicents/slee/container/deployment/jboss/SLEESubDeployer.java#L338-L369", "partition": "test", "index": 7040, "time": "2011-02-28 14:56:32"}
{"repo": "RestComm/jain-slee", "path": "container/spi/src/main/java/org/mobicents/slee/container/SleeContainer.java", "func_name": "SleeContainer.shutdownSlee", "original_string": "public void shutdownSlee() throws InvalidStateException {\n\t\tif (sleeState != SleeState.STOPPED) {\n\t\t\tthrow new InvalidStateException(\"slee in \"+sleeState+\" state\");\n\t\t}\n\t\t// slee shutdown\n\t\tbeforeModulesShutdown();\n\t\tfor (Iterator<SleeContainerModule> i = modules\n\t\t\t\t.descendingIterator(); i.hasNext();) {\n\t\t\ti.next().sleeShutdown();\n\t\t}\n\t\tafterModulesShutdown();\n\t\tsleeState = null;\n\t}", "language": "java", "code": "public void shutdownSlee() throws InvalidStateException {\n\t\tif (sleeState != SleeState.STOPPED) {\n\t\t\tthrow new InvalidStateException(\"slee in \"+sleeState+\" state\");\n\t\t}\n\t\t// slee shutdown\n\t\tbeforeModulesShutdown();\n\t\tfor (Iterator<SleeContainerModule> i = modules\n\t\t\t\t.descendingIterator(); i.hasNext();) {\n\t\t\ti.next().sleeShutdown();\n\t\t}\n\t\tafterModulesShutdown();\n\t\tsleeState = null;\n\t}", "code_tokens": ["public", "void", "shutdownSlee", "(", ")", "throws", "InvalidStateException", "{", "if", "(", "sleeState", "!=", "SleeState", ".", "STOPPED", ")", "{", "throw", "new", "InvalidStateException", "(", "\"slee in \"", "+", "sleeState", "+", "\" state\"", ")", ";", "}", "// slee shutdown", "beforeModulesShutdown", "(", ")", ";", "for", "(", "Iterator", "<", "SleeContainerModule", ">", "i", "=", "modules", ".", "descendingIterator", "(", ")", ";", "i", ".", "hasNext", "(", ")", ";", ")", "{", "i", ".", "next", "(", ")", ".", "sleeShutdown", "(", ")", ";", "}", "afterModulesShutdown", "(", ")", ";", "sleeState", "=", "null", ";", "}"], "docstring": "Shutdown of the SLEE container\n@throws InvalidStateException", "docstring_tokens": ["Shutdown", "of", "the", "SLEE", "container"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/spi/src/main/java/org/mobicents/slee/container/SleeContainer.java#L576-L588", "partition": "test", "index": 7169, "time": "2011-04-06 18:46:01"}
{"repo": "RestComm/jain-slee", "path": "container/spi/src/main/java/org/mobicents/slee/container/SleeContainer.java", "func_name": "SleeContainer.initSlee", "original_string": "public void initSlee() throws InvalidStateException {\n\t\tif (sleeState != null) {\n\t\t\tthrow new InvalidStateException(\"slee in \"+sleeState+\" state\");\n\t\t}\n\t\t// slee init\n\t\tbeforeModulesInitialization();\n\t\tfor (Iterator<SleeContainerModule> i = modules.iterator(); i\n\t\t\t.hasNext();) {\n\t\t\ti.next().sleeInitialization();\n\t\t}\n\t\tafterModulesInitialization();\n\t\tsleeState = SleeState.STOPPED;\t\t\n\t}", "language": "java", "code": "public void initSlee() throws InvalidStateException {\n\t\tif (sleeState != null) {\n\t\t\tthrow new InvalidStateException(\"slee in \"+sleeState+\" state\");\n\t\t}\n\t\t// slee init\n\t\tbeforeModulesInitialization();\n\t\tfor (Iterator<SleeContainerModule> i = modules.iterator(); i\n\t\t\t.hasNext();) {\n\t\t\ti.next().sleeInitialization();\n\t\t}\n\t\tafterModulesInitialization();\n\t\tsleeState = SleeState.STOPPED;\t\t\n\t}", "code_tokens": ["public", "void", "initSlee", "(", ")", "throws", "InvalidStateException", "{", "if", "(", "sleeState", "!=", "null", ")", "{", "throw", "new", "InvalidStateException", "(", "\"slee in \"", "+", "sleeState", "+", "\" state\"", ")", ";", "}", "// slee init", "beforeModulesInitialization", "(", ")", ";", "for", "(", "Iterator", "<", "SleeContainerModule", ">", "i", "=", "modules", ".", "iterator", "(", ")", ";", "i", ".", "hasNext", "(", ")", ";", ")", "{", "i", ".", "next", "(", ")", ".", "sleeInitialization", "(", ")", ";", "}", "afterModulesInitialization", "(", ")", ";", "sleeState", "=", "SleeState", ".", "STOPPED", ";", "}"], "docstring": "Initiates the SLEE container", "docstring_tokens": ["Initiates", "the", "SLEE", "container"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/spi/src/main/java/org/mobicents/slee/container/SleeContainer.java#L558-L570", "partition": "test", "index": 7168, "time": "2011-04-06 18:46:01"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java", "func_name": "URLClassLoaderDomainImpl.findClassLocally", "original_string": "protected Class<?> findClassLocally(String name)\n            throws ClassNotFoundException {\n        if (logger.isTraceEnabled()) {\n            logger.trace(toString() + \" findClassLocally: \" + name);\n        }\n        final boolean acquiredLock = acquireGlobalLock();\n        try {\n            return findClassLocallyLocked(name);\n        } finally {\n            if (acquiredLock) {\n                releaseGlobalLock();\n            }\n        }\n    }", "language": "java", "code": "protected Class<?> findClassLocally(String name)\n            throws ClassNotFoundException {\n        if (logger.isTraceEnabled()) {\n            logger.trace(toString() + \" findClassLocally: \" + name);\n        }\n        final boolean acquiredLock = acquireGlobalLock();\n        try {\n            return findClassLocallyLocked(name);\n        } finally {\n            if (acquiredLock) {\n                releaseGlobalLock();\n            }\n        }\n    }", "code_tokens": ["protected", "Class", "<", "?", ">", "findClassLocally", "(", "String", "name", ")", "throws", "ClassNotFoundException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "toString", "(", ")", "+", "\" findClassLocally: \"", "+", "name", ")", ";", "}", "final", "boolean", "acquiredLock", "=", "acquireGlobalLock", "(", ")", ";", "try", "{", "return", "findClassLocallyLocked", "(", "name", ")", ";", "}", "finally", "{", "if", "(", "acquiredLock", ")", "{", "releaseGlobalLock", "(", ")", ";", "}", "}", "}"], "docstring": "Finds a class locally, i.e., in the URLs managed by the extended\nURLClassLoader.\n\n@param name\n@return\n@throws ClassNotFoundException", "docstring_tokens": ["Finds", "a", "class", "locally", "i", ".", "e", ".", "in", "the", "URLs", "managed", "by", "the", "extended", "URLClassLoader", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java#L270-L283", "partition": "test", "index": 7161, "time": "2011-05-28 07:32:14"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java", "func_name": "URLClassLoaderDomainImpl.findResourcesLocally", "original_string": "protected Enumeration<URL> findResourcesLocally(String name)\n\t\t\tthrows IOException {\n\t\tif (logger.isTraceEnabled())\n\t\t\tlogger.trace(toString() + \" findResourcesLocally: \" + name);\n\n\t\treturn super.findResources(name);\n\t}", "language": "java", "code": "protected Enumeration<URL> findResourcesLocally(String name)\n\t\t\tthrows IOException {\n\t\tif (logger.isTraceEnabled())\n\t\t\tlogger.trace(toString() + \" findResourcesLocally: \" + name);\n\n\t\treturn super.findResources(name);\n\t}", "code_tokens": ["protected", "Enumeration", "<", "URL", ">", "findResourcesLocally", "(", "String", "name", ")", "throws", "IOException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "logger", ".", "trace", "(", "toString", "(", ")", "+", "\" findResourcesLocally: \"", "+", "name", ")", ";", "return", "super", ".", "findResources", "(", "name", ")", ";", "}"], "docstring": "Finds resources locally, i.e., in the URLs managed by the extended\nURLClassLoader.\n\n@param name\n@return\n@throws IOException", "docstring_tokens": ["Finds", "resources", "locally", "i", ".", "e", ".", "in", "the", "URLs", "managed", "by", "the", "extended", "URLClassLoader", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java#L353-L359", "partition": "test", "index": 7163, "time": "2011-05-28 07:32:14"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java", "func_name": "URLClassLoaderDomainImpl.addDirectDependency", "original_string": "public void addDirectDependency(URLClassLoaderDomainImpl domain) {\n\t\tif (logger.isTraceEnabled())\n\t\t\tlogger.trace(toString() + \" adding domain \" + domain\n\t\t\t\t\t+ \" to direct dependencies\");\n\t\tdirectDependencies.add(domain);\n\t}", "language": "java", "code": "public void addDirectDependency(URLClassLoaderDomainImpl domain) {\n\t\tif (logger.isTraceEnabled())\n\t\t\tlogger.trace(toString() + \" adding domain \" + domain\n\t\t\t\t\t+ \" to direct dependencies\");\n\t\tdirectDependencies.add(domain);\n\t}", "code_tokens": ["public", "void", "addDirectDependency", "(", "URLClassLoaderDomainImpl", "domain", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "logger", ".", "trace", "(", "toString", "(", ")", "+", "\" adding domain \"", "+", "domain", "+", "\" to direct dependencies\"", ")", ";", "directDependencies", ".", "add", "(", "domain", ")", ";", "}"], "docstring": "Adds a direct dependency to this domain. Direct dependencies are other\ndomains which the domain depends on.\n\n@param domain", "docstring_tokens": ["Adds", "a", "direct", "dependency", "to", "this", "domain", ".", "Direct", "dependencies", "are", "other", "domains", "which", "the", "domain", "depends", "on", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java#L81-L86", "partition": "test", "index": 7159, "time": "2012-06-04 23:13:14"}
{"repo": "RestComm/jain-slee", "path": "container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java", "func_name": "URLClassLoaderDomainImpl.getAllDependencies", "original_string": "public List<URLClassLoaderDomainImpl> getAllDependencies() {\n\t\tList<URLClassLoaderDomainImpl> result = new ArrayList<URLClassLoaderDomainImpl>();\n\t\tthis.getAllDependencies(result);\n\t\treturn result;\n\t}", "language": "java", "code": "public List<URLClassLoaderDomainImpl> getAllDependencies() {\n\t\tList<URLClassLoaderDomainImpl> result = new ArrayList<URLClassLoaderDomainImpl>();\n\t\tthis.getAllDependencies(result);\n\t\treturn result;\n\t}", "code_tokens": ["public", "List", "<", "URLClassLoaderDomainImpl", ">", "getAllDependencies", "(", ")", "{", "List", "<", "URLClassLoaderDomainImpl", ">", "result", "=", "new", "ArrayList", "<", "URLClassLoaderDomainImpl", ">", "(", ")", ";", "this", ".", "getAllDependencies", "(", "result", ")", ";", "return", "result", ";", "}"], "docstring": "Retrieves a flat list containing all dependencies for the domain, i.e., all direct dependencies and their own dependencies.\n@return", "docstring_tokens": ["Retrieves", "a", "flat", "list", "containing", "all", "dependencies", "for", "the", "domain", "i", ".", "e", ".", "all", "direct", "dependencies", "and", "their", "own", "dependencies", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/components/components/src/main/java/org/mobicents/slee/container/component/deployment/classloading/URLClassLoaderDomainImpl.java#L101-L105", "partition": "test", "index": 7160, "time": "2012-06-04 23:13:14"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/management/NonSerializableFactory.java", "func_name": "NonSerializableFactory.bind", "original_string": "public static synchronized void bind(String key, Object target) throws NameAlreadyBoundException\r\n    {\r\n        if( wrapperMap.containsKey(key) == true )\r\n            throw new NameAlreadyBoundException(key+\" already exists in the NonSerializableFactory map\");\r\n        wrapperMap.put(key, target);\r\n    }", "language": "java", "code": "public static synchronized void bind(String key, Object target) throws NameAlreadyBoundException\r\n    {\r\n        if( wrapperMap.containsKey(key) == true )\r\n            throw new NameAlreadyBoundException(key+\" already exists in the NonSerializableFactory map\");\r\n        wrapperMap.put(key, target);\r\n    }", "code_tokens": ["public", "static", "synchronized", "void", "bind", "(", "String", "key", ",", "Object", "target", ")", "throws", "NameAlreadyBoundException", "{", "if", "(", "wrapperMap", ".", "containsKey", "(", "key", ")", "==", "true", ")", "throw", "new", "NameAlreadyBoundException", "(", "key", "+", "\" already exists in the NonSerializableFactory map\"", ")", ";", "wrapperMap", ".", "put", "(", "key", ",", "target", ")", ";", "}"], "docstring": "Place an object into the NonSerializableFactory namespace for subsequent\naccess by getObject. There cannot be an already existing binding for key.\n\n@param key the name to bind target under. This should typically be the\nname that will be used to bind target in the JNDI namespace, but it does\nnot have to be.\n@param target the non-Serializable object to bind.\n@throws javax.naming.NameAlreadyBoundException thrown if key already exists in the\nNonSerializableFactory map", "docstring_tokens": ["Place", "an", "object", "into", "the", "NonSerializableFactory", "namespace", "for", "subsequent", "access", "by", "getObject", ".", "There", "cannot", "be", "an", "already", "existing", "binding", "for", "key", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/management/NonSerializableFactory.java#L103-L108", "partition": "test", "index": 7108, "time": "2013-07-25 01:33:06"}
{"repo": "RestComm/jain-slee", "path": "container/services/src/main/java/org/mobicents/slee/container/management/NonSerializableFactory.java", "func_name": "NonSerializableFactory.rebind", "original_string": "public static synchronized void rebind(Name name, Object target) throws NamingException\r\n   {\r\n      rebind(name, target, false);\r\n   }", "language": "java", "code": "public static synchronized void rebind(Name name, Object target) throws NamingException\r\n   {\r\n      rebind(name, target, false);\r\n   }", "code_tokens": ["public", "static", "synchronized", "void", "rebind", "(", "Name", "name", ",", "Object", "target", ")", "throws", "NamingException", "{", "rebind", "(", "name", ",", "target", ",", "false", ")", ";", "}"], "docstring": "A convience method that simplifies the process of rebinding a\nnon-zerializable object into a JNDI context. This version binds the\ntarget object into the default IntitialContext using name path.\n\n@param name the name to use as JNDI path name. The key into the\nNonSerializableFactory map is obtained from the toString() value of name.\nThe name parameter cannot be a 0 length name.\nAny subcontexts between the root and the name must exist.\n@param target the non-Serializable object to bind.\n@throws javax.naming.NamingException thrown on failure to rebind key into ctx.", "docstring_tokens": ["A", "convience", "method", "that", "simplifies", "the", "process", "of", "rebinding", "a", "non", "-", "zerializable", "object", "into", "a", "JNDI", "context", ".", "This", "version", "binds", "the", "target", "object", "into", "the", "default", "IntitialContext", "using", "name", "path", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/services/src/main/java/org/mobicents/slee/container/management/NonSerializableFactory.java#L197-L200", "partition": "test", "index": 7109, "time": "2013-07-25 01:33:06"}
{"repo": "RestComm/jain-slee", "path": "tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AbstractOperation.java", "func_name": "AbstractOperation.unfoldArray", "original_string": "protected String unfoldArray(String prefix, Object[] array, PropertyEditor editor)\r\n\t{\r\n\t\t//StringBuffer sb = new StringBuffer(\"\\n\");\r\n        StringBuffer sb = new StringBuffer(\"[\");\r\n\t\tfor (int index = 0; index<array.length; index++) {\r\n\t\t\tif (editor != null) {\r\n\t\t\t\teditor.setValue(array[index]);\r\n\t\t\t\tsb.append(editor.getAsText());\r\n\t\t\t} else {\r\n\t\t\t\tsb.append(array[index].toString());\r\n\t\t\t}\r\n\t\t\t \r\n            if (index < array.length-1) {\r\n                sb.append(CID_SEPARATOR);\r\n                //sb.append(\"\\n\");\r\n            }\r\n\t\t}\r\n\t\tsb.append(\"]\");\r\n\t\t\r\n\t\treturn sb.toString();\r\n\t}", "language": "java", "code": "protected String unfoldArray(String prefix, Object[] array, PropertyEditor editor)\r\n\t{\r\n\t\t//StringBuffer sb = new StringBuffer(\"\\n\");\r\n        StringBuffer sb = new StringBuffer(\"[\");\r\n\t\tfor (int index = 0; index<array.length; index++) {\r\n\t\t\tif (editor != null) {\r\n\t\t\t\teditor.setValue(array[index]);\r\n\t\t\t\tsb.append(editor.getAsText());\r\n\t\t\t} else {\r\n\t\t\t\tsb.append(array[index].toString());\r\n\t\t\t}\r\n\t\t\t \r\n            if (index < array.length-1) {\r\n                sb.append(CID_SEPARATOR);\r\n                //sb.append(\"\\n\");\r\n            }\r\n\t\t}\r\n\t\tsb.append(\"]\");\r\n\t\t\r\n\t\treturn sb.toString();\r\n\t}", "code_tokens": ["protected", "String", "unfoldArray", "(", "String", "prefix", ",", "Object", "[", "]", "array", ",", "PropertyEditor", "editor", ")", "{", "//StringBuffer sb = new StringBuffer(\"\\n\");\r", "StringBuffer", "sb", "=", "new", "StringBuffer", "(", "\"[\"", ")", ";", "for", "(", "int", "index", "=", "0", ";", "index", "<", "array", ".", "length", ";", "index", "++", ")", "{", "if", "(", "editor", "!=", "null", ")", "{", "editor", ".", "setValue", "(", "array", "[", "index", "]", ")", ";", "sb", ".", "append", "(", "editor", ".", "getAsText", "(", ")", ")", ";", "}", "else", "{", "sb", ".", "append", "(", "array", "[", "index", "]", ".", "toString", "(", ")", ")", ";", "}", "if", "(", "index", "<", "array", ".", "length", "-", "1", ")", "{", "sb", ".", "append", "(", "CID_SEPARATOR", ")", ";", "//sb.append(\"\\n\");\r", "}", "}", "sb", ".", "append", "(", "\"]\"", ")", ";", "return", "sb", ".", "toString", "(", ")", ";", "}"], "docstring": "Default implementation.\n@param prefix\n@param array\n@return", "docstring_tokens": ["Default", "implementation", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AbstractOperation.java#L201-L221", "partition": "test", "index": 6958, "time": "2016-05-20 16:39:02"}
{"repo": "RestComm/jain-slee", "path": "container/build/as7/extension/src/main/java/org/restcomm/slee/container/build/as7/deployment/SleeDeployerEntityResolver.java", "func_name": "SleeDeployerEntityResolver.resolveEntity", "original_string": "public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException\r\n    {\r\n        URL resourceURL = resources.get(publicId);\r\n\r\n        if(resourceURL != null) {\r\n            InputStream resourceStream = resourceURL.openStream();\r\n            InputSource is = new InputSource(resourceStream);\r\n            is.setPublicId(publicId);\r\n            is.setSystemId(resourceURL.toExternalForm());\r\n            return is;\r\n        }\r\n\r\n        return null;\r\n    }", "language": "java", "code": "public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException\r\n    {\r\n        URL resourceURL = resources.get(publicId);\r\n\r\n        if(resourceURL != null) {\r\n            InputStream resourceStream = resourceURL.openStream();\r\n            InputSource is = new InputSource(resourceStream);\r\n            is.setPublicId(publicId);\r\n            is.setSystemId(resourceURL.toExternalForm());\r\n            return is;\r\n        }\r\n\r\n        return null;\r\n    }", "code_tokens": ["public", "InputSource", "resolveEntity", "(", "String", "publicId", ",", "String", "systemId", ")", "throws", "SAXException", ",", "IOException", "{", "URL", "resourceURL", "=", "resources", ".", "get", "(", "publicId", ")", ";", "if", "(", "resourceURL", "!=", "null", ")", "{", "InputStream", "resourceStream", "=", "resourceURL", ".", "openStream", "(", ")", ";", "InputSource", "is", "=", "new", "InputSource", "(", "resourceStream", ")", ";", "is", ".", "setPublicId", "(", "publicId", ")", ";", "is", ".", "setSystemId", "(", "resourceURL", ".", "toExternalForm", "(", ")", ")", ";", "return", "is", ";", "}", "return", "null", ";", "}"], "docstring": "Creates an InputSource with a SystemID corresponding to a local dtd file.\n\n@param publicId The public identifier of the external entity being referenced, or null if none was supplied.\n@param systemId The system identifier of the external entity being referenced (This is a dummy parameter and is overridden by the resource names\nearlier specified by the <code>registrerResource</code>) method to correspond to the publicID.\n@return An InputSource object describing the new input source, or null to request that the parser open a regular URI connection to the system identifier.\n@exception org.xml.sax.SAXException Any SAX exception, possibly wrapping another exception.\n@exception java.io.IOException A Java-specific IO exception, possibly the result of creating a new InputStream or Reader for the InputSource.", "docstring_tokens": ["Creates", "an", "InputSource", "with", "a", "SystemID", "corresponding", "to", "a", "local", "dtd", "file", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/build/as7/extension/src/main/java/org/restcomm/slee/container/build/as7/deployment/SleeDeployerEntityResolver.java#L102-L115", "partition": "test", "index": 7132, "time": "2016-09-12 15:17:11"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectPoolManagement.java", "func_name": "ProfileObjectPoolManagement.removeObjectPool", "original_string": "public void removeObjectPool(final ProfileTableImpl profileTable,\n\t\t\tfinal SleeTransactionManager sleeTransactionManager) {\n\n\t\t\n\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t            logger.trace(\"Removing Pool for \" + profileTable);\n\t\t\t\t}\n\n\t\t\t\tremoveObjectPool(profileTable);\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (sleeTransactionManager != null) {\n\t\t\tsleeTransactionManager.getTransactionContext().getAfterCommitActions().add(action);\t\t\t\n\t\t}\n\t\telse {\n\t\t\taction.execute();\n\t\t}\n\t}", "language": "java", "code": "public void removeObjectPool(final ProfileTableImpl profileTable,\n\t\t\tfinal SleeTransactionManager sleeTransactionManager) {\n\n\t\t\n\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t            logger.trace(\"Removing Pool for \" + profileTable);\n\t\t\t\t}\n\n\t\t\t\tremoveObjectPool(profileTable);\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (sleeTransactionManager != null) {\n\t\t\tsleeTransactionManager.getTransactionContext().getAfterCommitActions().add(action);\t\t\t\n\t\t}\n\t\telse {\n\t\t\taction.execute();\n\t\t}\n\t}", "code_tokens": ["public", "void", "removeObjectPool", "(", "final", "ProfileTableImpl", "profileTable", ",", "final", "SleeTransactionManager", "sleeTransactionManager", ")", "{", "TransactionalAction", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Removing Pool for \"", "+", "profileTable", ")", ";", "}", "removeObjectPool", "(", "profileTable", ")", ";", "}", "}", ";", "if", "(", "sleeTransactionManager", "!=", "null", ")", "{", "sleeTransactionManager", ".", "getTransactionContext", "(", ")", ".", "getAfterCommitActions", "(", ")", ".", "add", "(", "action", ")", ";", "}", "else", "{", "action", ".", "execute", "(", ")", ";", "}", "}"], "docstring": "Removes the object pool for the specified profile table. If a\ntransaction manager is used then the removal is only after the tx commit.\n\n@param sleeTransactionManager\n@throws Exception", "docstring_tokens": ["Removes", "the", "object", "pool", "for", "the", "specified", "profile", "table", ".", "If", "a", "transaction", "manager", "is", "used", "then", "the", "removal", "is", "only", "after", "the", "tx", "commit", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectPoolManagement.java#L170-L190", "partition": "test", "index": 7031, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectPoolManagement.java", "func_name": "ProfileObjectPoolManagement.createObjectPool", "original_string": "public void createObjectPool(final ProfileTableImpl profileTable,\n\t\t\tfinal SleeTransactionManager sleeTransactionManager) {\n\n\t\tif (logger.isTraceEnabled()) {\n            logger.trace(\"Creating Pool for \" + profileTable);\n\t\t}\n\n\t\tcreateObjectPool(profileTable);\n\n\t\tif (sleeTransactionManager != null) {\n\t\t\t// add a rollback action to remove sbb object pool\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger\n\t\t\t\t\t\t\t\t.debug(\"Due to tx rollback, removing pool for \" + profileTable);\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tremoveObjectPool(profileTable);\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tlogger.error(\"Failed to remove table's \" + profileTable + \" object pool\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tsleeTransactionManager.getTransactionContext().getAfterRollbackActions().add(action);\t\t\t\n\t\t}\n\t}", "language": "java", "code": "public void createObjectPool(final ProfileTableImpl profileTable,\n\t\t\tfinal SleeTransactionManager sleeTransactionManager) {\n\n\t\tif (logger.isTraceEnabled()) {\n            logger.trace(\"Creating Pool for \" + profileTable);\n\t\t}\n\n\t\tcreateObjectPool(profileTable);\n\n\t\tif (sleeTransactionManager != null) {\n\t\t\t// add a rollback action to remove sbb object pool\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger\n\t\t\t\t\t\t\t\t.debug(\"Due to tx rollback, removing pool for \" + profileTable);\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tremoveObjectPool(profileTable);\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tlogger.error(\"Failed to remove table's \" + profileTable + \" object pool\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tsleeTransactionManager.getTransactionContext().getAfterRollbackActions().add(action);\t\t\t\n\t\t}\n\t}", "code_tokens": ["public", "void", "createObjectPool", "(", "final", "ProfileTableImpl", "profileTable", ",", "final", "SleeTransactionManager", "sleeTransactionManager", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Creating Pool for \"", "+", "profileTable", ")", ";", "}", "createObjectPool", "(", "profileTable", ")", ";", "if", "(", "sleeTransactionManager", "!=", "null", ")", "{", "// add a rollback action to remove sbb object pool", "TransactionalAction", "action", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Due to tx rollback, removing pool for \"", "+", "profileTable", ")", ";", "}", "try", "{", "removeObjectPool", "(", "profileTable", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "\"Failed to remove table's \"", "+", "profileTable", "+", "\" object pool\"", ",", "e", ")", ";", "}", "}", "}", ";", "sleeTransactionManager", ".", "getTransactionContext", "(", ")", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "action", ")", ";", "}", "}"], "docstring": "Creates an object pool for the specified profile table. If a\ntransaction manager is used then, and if the tx rollbacks, the pool will\nbe removed.\n\n@param\n@param sleeTransactionManager", "docstring_tokens": ["Creates", "an", "object", "pool", "for", "the", "specified", "profile", "table", ".", "If", "a", "transaction", "manager", "is", "used", "then", "and", "if", "the", "tx", "rollbacks", "the", "pool", "will", "be", "removed", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectPoolManagement.java#L109-L135", "partition": "test", "index": 7030, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/management/jmx/ProfileProvisioningMBeanImpl.java", "func_name": "ProfileProvisioningMBeanImpl.createAndRegisterProfileMBean", "original_string": "private AbstractProfileMBeanImpl createAndRegisterProfileMBean(String profileName, ProfileTableImpl profileTable) throws ManagementException {\r\n\t\t\r\n\t\tif (logger.isDebugEnabled()) {\r\n\t\t\tlogger.debug(\"createAndRegisterProfileMBean( profileTable = \"+profileTable+\" , profileName = \"+profileName+\" )\");\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tProfileSpecificationComponent component = profileTable.getProfileSpecificationComponent();\r\n\t\t\tConstructor<?> constructor = component.getProfileMBeanConcreteImplClass().getConstructor(Class.class, String.class, ProfileTableImpl.class);\r\n\t\t\tfinal AbstractProfileMBeanImpl profileMBean = (AbstractProfileMBeanImpl) constructor.newInstance(component.getProfileMBeanConcreteInterfaceClass(), profileName, profileTable);\r\n\t\t\tprofileMBean.register();\r\n\t\t\t// add a rollback action to unregister the mbean\r\n\t\t\tTransactionalAction rollbackAction = new TransactionalAction() {\r\n\t\t\t\tpublic void execute() {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tprofileMBean.unregister();\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} catch (Throwable e) {\r\n\t\t\t\t\t\tlogger.error(e.getMessage(),e);\r\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tsleeTransactionManagement.getTransactionContext().getAfterRollbackActions().add(rollbackAction);\t\t\t\t\r\n\t\t\treturn profileMBean;\t\t\t\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new ManagementException(e.getMessage(),e);\r\n\t\t} \r\n\t}", "language": "java", "code": "private AbstractProfileMBeanImpl createAndRegisterProfileMBean(String profileName, ProfileTableImpl profileTable) throws ManagementException {\r\n\t\t\r\n\t\tif (logger.isDebugEnabled()) {\r\n\t\t\tlogger.debug(\"createAndRegisterProfileMBean( profileTable = \"+profileTable+\" , profileName = \"+profileName+\" )\");\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tProfileSpecificationComponent component = profileTable.getProfileSpecificationComponent();\r\n\t\t\tConstructor<?> constructor = component.getProfileMBeanConcreteImplClass().getConstructor(Class.class, String.class, ProfileTableImpl.class);\r\n\t\t\tfinal AbstractProfileMBeanImpl profileMBean = (AbstractProfileMBeanImpl) constructor.newInstance(component.getProfileMBeanConcreteInterfaceClass(), profileName, profileTable);\r\n\t\t\tprofileMBean.register();\r\n\t\t\t// add a rollback action to unregister the mbean\r\n\t\t\tTransactionalAction rollbackAction = new TransactionalAction() {\r\n\t\t\t\tpublic void execute() {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tprofileMBean.unregister();\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} catch (Throwable e) {\r\n\t\t\t\t\t\tlogger.error(e.getMessage(),e);\r\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tsleeTransactionManagement.getTransactionContext().getAfterRollbackActions().add(rollbackAction);\t\t\t\t\r\n\t\t\treturn profileMBean;\t\t\t\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new ManagementException(e.getMessage(),e);\r\n\t\t} \r\n\t}", "code_tokens": ["private", "AbstractProfileMBeanImpl", "createAndRegisterProfileMBean", "(", "String", "profileName", ",", "ProfileTableImpl", "profileTable", ")", "throws", "ManagementException", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"createAndRegisterProfileMBean( profileTable = \"", "+", "profileTable", "+", "\" , profileName = \"", "+", "profileName", "+", "\" )\"", ")", ";", "}", "try", "{", "ProfileSpecificationComponent", "component", "=", "profileTable", ".", "getProfileSpecificationComponent", "(", ")", ";", "Constructor", "<", "?", ">", "constructor", "=", "component", ".", "getProfileMBeanConcreteImplClass", "(", ")", ".", "getConstructor", "(", "Class", ".", "class", ",", "String", ".", "class", ",", "ProfileTableImpl", ".", "class", ")", ";", "final", "AbstractProfileMBeanImpl", "profileMBean", "=", "(", "AbstractProfileMBeanImpl", ")", "constructor", ".", "newInstance", "(", "component", ".", "getProfileMBeanConcreteInterfaceClass", "(", ")", ",", "profileName", ",", "profileTable", ")", ";", "profileMBean", ".", "register", "(", ")", ";", "// add a rollback action to unregister the mbean\r", "TransactionalAction", "rollbackAction", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "try", "{", "profileMBean", ".", "unregister", "(", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}", ";", "sleeTransactionManagement", ".", "getTransactionContext", "(", ")", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "rollbackAction", ")", ";", "return", "profileMBean", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "ManagementException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Creates and registers a profile mbean for the specified object.\n@param profileObject\n@return\n@throws ManagementException", "docstring_tokens": ["Creates", "and", "registers", "a", "profile", "mbean", "for", "the", "specified", "object", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/management/jmx/ProfileProvisioningMBeanImpl.java#L189-L215", "partition": "test", "index": 7164, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileCallRecorderTransactionData.java", "func_name": "ProfileCallRecorderTransactionData.addProfileCall", "original_string": "@SuppressWarnings(\"unchecked\")\r\n\tpublic static void addProfileCall(ProfileObjectImpl po) throws SLEEException\r\n\t{\r\n    SleeTransactionManager sleeTransactionManager = sleeContainer.getTransactionManager();\r\n    \r\n    try {\r\n      if(sleeTransactionManager.getTransaction() == null) {\r\n        return;\r\n      }\r\n    }\r\n    catch ( SystemException se ) {\r\n      throw new SLEEException(\"Unable to verify SLEE Transaction.\", se);\r\n    }\r\n    \r\n\t  String key = makeKey(po);\r\n\t  \r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"Recording call to profile. Key[\" + key + \"]\");\r\n\t\t}\r\n\t\t\r\n\t\tfinal TransactionContext txContext = sleeTransactionManager.getTransactionContext();\r\n\t\tProfileCallRecorderTransactionData data = (ProfileCallRecorderTransactionData) txContext.getData().get(TRANSACTION_CONTEXT_KEY);\r\n\r\n\t\t// If data does not exist, create it\r\n\t\tif (data == null) {\r\n\t\t\tdata = new ProfileCallRecorderTransactionData();\r\n\t\t\ttxContext.getData().put(TRANSACTION_CONTEXT_KEY, data);\r\n\t\t}\r\n\r\n\t\tif (!po.isProfileReentrant())\r\n\t\t{\r\n\t\t\t// we need to check\r\n\t\t\tif (data.invokedProfiles.contains(key) && data.invokedProfiles.getLast().compareTo(key) != 0) {\r\n\t\t\t\tthrow new SLEEException(\"Detected loopback call. Call sequence: \" + data.invokedProfiles);\r\n\t\t\t}\r\n\t\t\tdata.invokedProfiles.add(key);\r\n\t\t\tdata.invokedProfileTablesNames.add(po.getProfileTable().getProfileTableName());\r\n\t\t}\r\n\r\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\r\n\tpublic static void addProfileCall(ProfileObjectImpl po) throws SLEEException\r\n\t{\r\n    SleeTransactionManager sleeTransactionManager = sleeContainer.getTransactionManager();\r\n    \r\n    try {\r\n      if(sleeTransactionManager.getTransaction() == null) {\r\n        return;\r\n      }\r\n    }\r\n    catch ( SystemException se ) {\r\n      throw new SLEEException(\"Unable to verify SLEE Transaction.\", se);\r\n    }\r\n    \r\n\t  String key = makeKey(po);\r\n\t  \r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"Recording call to profile. Key[\" + key + \"]\");\r\n\t\t}\r\n\t\t\r\n\t\tfinal TransactionContext txContext = sleeTransactionManager.getTransactionContext();\r\n\t\tProfileCallRecorderTransactionData data = (ProfileCallRecorderTransactionData) txContext.getData().get(TRANSACTION_CONTEXT_KEY);\r\n\r\n\t\t// If data does not exist, create it\r\n\t\tif (data == null) {\r\n\t\t\tdata = new ProfileCallRecorderTransactionData();\r\n\t\t\ttxContext.getData().put(TRANSACTION_CONTEXT_KEY, data);\r\n\t\t}\r\n\r\n\t\tif (!po.isProfileReentrant())\r\n\t\t{\r\n\t\t\t// we need to check\r\n\t\t\tif (data.invokedProfiles.contains(key) && data.invokedProfiles.getLast().compareTo(key) != 0) {\r\n\t\t\t\tthrow new SLEEException(\"Detected loopback call. Call sequence: \" + data.invokedProfiles);\r\n\t\t\t}\r\n\t\t\tdata.invokedProfiles.add(key);\r\n\t\t\tdata.invokedProfileTablesNames.add(po.getProfileTable().getProfileTableName());\r\n\t\t}\r\n\r\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "static", "void", "addProfileCall", "(", "ProfileObjectImpl", "po", ")", "throws", "SLEEException", "{", "SleeTransactionManager", "sleeTransactionManager", "=", "sleeContainer", ".", "getTransactionManager", "(", ")", ";", "try", "{", "if", "(", "sleeTransactionManager", ".", "getTransaction", "(", ")", "==", "null", ")", "{", "return", ";", "}", "}", "catch", "(", "SystemException", "se", ")", "{", "throw", "new", "SLEEException", "(", "\"Unable to verify SLEE Transaction.\"", ",", "se", ")", ";", "}", "String", "key", "=", "makeKey", "(", "po", ")", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Recording call to profile. Key[\"", "+", "key", "+", "\"]\"", ")", ";", "}", "final", "TransactionContext", "txContext", "=", "sleeTransactionManager", ".", "getTransactionContext", "(", ")", ";", "ProfileCallRecorderTransactionData", "data", "=", "(", "ProfileCallRecorderTransactionData", ")", "txContext", ".", "getData", "(", ")", ".", "get", "(", "TRANSACTION_CONTEXT_KEY", ")", ";", "// If data does not exist, create it\r", "if", "(", "data", "==", "null", ")", "{", "data", "=", "new", "ProfileCallRecorderTransactionData", "(", ")", ";", "txContext", ".", "getData", "(", ")", ".", "put", "(", "TRANSACTION_CONTEXT_KEY", ",", "data", ")", ";", "}", "if", "(", "!", "po", ".", "isProfileReentrant", "(", ")", ")", "{", "// we need to check\r", "if", "(", "data", ".", "invokedProfiles", ".", "contains", "(", "key", ")", "&&", "data", ".", "invokedProfiles", ".", "getLast", "(", ")", ".", "compareTo", "(", "key", ")", "!=", "0", ")", "{", "throw", "new", "SLEEException", "(", "\"Detected loopback call. Call sequence: \"", "+", "data", ".", "invokedProfiles", ")", ";", "}", "data", ".", "invokedProfiles", ".", "add", "(", "key", ")", ";", "data", ".", "invokedProfileTablesNames", ".", "add", "(", "po", ".", "getProfileTable", "(", ")", ".", "getProfileTableName", "(", ")", ")", ";", "}", "}"], "docstring": "Adds call to this profile.\n\n@param po\n@throws SLEEException", "docstring_tokens": ["Adds", "call", "to", "this", "profile", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileCallRecorderTransactionData.java#L80-L119", "partition": "test", "index": 7069, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileTableTransactionView.java", "func_name": "ProfileTableTransactionView.getProfile", "original_string": "public ProfileObjectImpl getProfile(String profileName)\n\t\t\tthrows TransactionRequiredLocalException, SLEEException {\n\n\t\tMap txData = getTxData();\n\t\tProfileTransactionID key = new ProfileTransactionID(profileName,\n\t\t\t\tprofileTable.getProfileTableName());\n\t\tProfileObjectImpl value = (ProfileObjectImpl) txData.get(key);\n\t\tif (value == null) {\n\t\t\tProfileObjectPool pool = profileTable.getProfileManagement()\n\t\t\t\t.getObjectPoolManagement().getObjectPool(\n\t\t\t\t\t\t\tprofileTable.getProfileTableName());\n\t\t\tvalue = pool.borrowObject();\n\t\t\tpassivateProfileObjectOnTxEnd(profileTable.getSleeContainer()\n\t\t\t\t\t.getTransactionManager(), value, pool);\n\t\t\ttry {\n\t\t\t\tvalue.profileActivate(profileName);\n\t\t\t} catch (UnrecognizedProfileNameException e) {\n\t\t\t\tvalue.invalidateObject();\n\t\t\t\tpool.invalidateObject(value);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\ttxData.put(key, value);\n\t\t}\n\t\treturn value;\n\t}", "language": "java", "code": "public ProfileObjectImpl getProfile(String profileName)\n\t\t\tthrows TransactionRequiredLocalException, SLEEException {\n\n\t\tMap txData = getTxData();\n\t\tProfileTransactionID key = new ProfileTransactionID(profileName,\n\t\t\t\tprofileTable.getProfileTableName());\n\t\tProfileObjectImpl value = (ProfileObjectImpl) txData.get(key);\n\t\tif (value == null) {\n\t\t\tProfileObjectPool pool = profileTable.getProfileManagement()\n\t\t\t\t.getObjectPoolManagement().getObjectPool(\n\t\t\t\t\t\t\tprofileTable.getProfileTableName());\n\t\t\tvalue = pool.borrowObject();\n\t\t\tpassivateProfileObjectOnTxEnd(profileTable.getSleeContainer()\n\t\t\t\t\t.getTransactionManager(), value, pool);\n\t\t\ttry {\n\t\t\t\tvalue.profileActivate(profileName);\n\t\t\t} catch (UnrecognizedProfileNameException e) {\n\t\t\t\tvalue.invalidateObject();\n\t\t\t\tpool.invalidateObject(value);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\ttxData.put(key, value);\n\t\t}\n\t\treturn value;\n\t}", "code_tokens": ["public", "ProfileObjectImpl", "getProfile", "(", "String", "profileName", ")", "throws", "TransactionRequiredLocalException", ",", "SLEEException", "{", "Map", "txData", "=", "getTxData", "(", ")", ";", "ProfileTransactionID", "key", "=", "new", "ProfileTransactionID", "(", "profileName", ",", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "ProfileObjectImpl", "value", "=", "(", "ProfileObjectImpl", ")", "txData", ".", "get", "(", "key", ")", ";", "if", "(", "value", "==", "null", ")", "{", "ProfileObjectPool", "pool", "=", "profileTable", ".", "getProfileManagement", "(", ")", ".", "getObjectPoolManagement", "(", ")", ".", "getObjectPool", "(", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "value", "=", "pool", ".", "borrowObject", "(", ")", ";", "passivateProfileObjectOnTxEnd", "(", "profileTable", ".", "getSleeContainer", "(", ")", ".", "getTransactionManager", "(", ")", ",", "value", ",", "pool", ")", ";", "try", "{", "value", ".", "profileActivate", "(", "profileName", ")", ";", "}", "catch", "(", "UnrecognizedProfileNameException", "e", ")", "{", "value", ".", "invalidateObject", "(", ")", ";", "pool", ".", "invalidateObject", "(", "value", ")", ";", "return", "null", ";", "}", "txData", ".", "put", "(", "key", ",", "value", ")", ";", "}", "return", "value", ";", "}"], "docstring": "Retrieves a profile object for the table and specified profile name,\nthere is only one profile object per profile entity per transaction\n\n@param profileName\n@return\n@throws TransactionRequiredLocalException\n@throws SLEEException", "docstring_tokens": ["Retrieves", "a", "profile", "object", "for", "the", "table", "and", "specified", "profile", "name", "there", "is", "only", "one", "profile", "object", "per", "profile", "entity", "per", "transaction"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileTableTransactionView.java#L79-L103", "partition": "test", "index": 7070, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileTableTransactionView.java", "func_name": "ProfileTableTransactionView.passivateProfileObjectOnTxEnd", "original_string": "public static void passivateProfileObjectOnTxEnd(\n\t\t\tSleeTransactionManager txManager,\n\t\t\tfinal ProfileObjectImpl profileObject, final ProfileObjectPool pool) {\n\t\tTransactionalAction afterRollbackAction = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\tprofileObject.invalidateObject();\n\t\t\t\tpool.returnObject(profileObject);\n\t\t\t}\n\t\t};\n\t\tTransactionalAction beforeCommitAction = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\tif (profileObject.getState() == ProfileObjectState.READY) {\n\t\t\t\t\tif (!profileObject.getProfileEntity().isRemove()) {\n\t\t\t\t\t\tprofileObject.fireAddOrUpdatedEventIfNeeded();\n\t\t\t\t\t\tprofileObject.profilePassivate();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprofileObject.profileRemove(true, false);\n\t\t\t\t\t}\n\t\t\t\t\tpool.returnObject(profileObject);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tfinal TransactionContext txContext = txManager.getTransactionContext();\n\t\ttxContext.getAfterRollbackActions().add(afterRollbackAction);\n\t\ttxContext.getBeforeCommitActions().add(beforeCommitAction);\t\t\n\t}", "language": "java", "code": "public static void passivateProfileObjectOnTxEnd(\n\t\t\tSleeTransactionManager txManager,\n\t\t\tfinal ProfileObjectImpl profileObject, final ProfileObjectPool pool) {\n\t\tTransactionalAction afterRollbackAction = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\tprofileObject.invalidateObject();\n\t\t\t\tpool.returnObject(profileObject);\n\t\t\t}\n\t\t};\n\t\tTransactionalAction beforeCommitAction = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\tif (profileObject.getState() == ProfileObjectState.READY) {\n\t\t\t\t\tif (!profileObject.getProfileEntity().isRemove()) {\n\t\t\t\t\t\tprofileObject.fireAddOrUpdatedEventIfNeeded();\n\t\t\t\t\t\tprofileObject.profilePassivate();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprofileObject.profileRemove(true, false);\n\t\t\t\t\t}\n\t\t\t\t\tpool.returnObject(profileObject);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tfinal TransactionContext txContext = txManager.getTransactionContext();\n\t\ttxContext.getAfterRollbackActions().add(afterRollbackAction);\n\t\ttxContext.getBeforeCommitActions().add(beforeCommitAction);\t\t\n\t}", "code_tokens": ["public", "static", "void", "passivateProfileObjectOnTxEnd", "(", "SleeTransactionManager", "txManager", ",", "final", "ProfileObjectImpl", "profileObject", ",", "final", "ProfileObjectPool", "pool", ")", "{", "TransactionalAction", "afterRollbackAction", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "profileObject", ".", "invalidateObject", "(", ")", ";", "pool", ".", "returnObject", "(", "profileObject", ")", ";", "}", "}", ";", "TransactionalAction", "beforeCommitAction", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "if", "(", "profileObject", ".", "getState", "(", ")", "==", "ProfileObjectState", ".", "READY", ")", "{", "if", "(", "!", "profileObject", ".", "getProfileEntity", "(", ")", ".", "isRemove", "(", ")", ")", "{", "profileObject", ".", "fireAddOrUpdatedEventIfNeeded", "(", ")", ";", "profileObject", ".", "profilePassivate", "(", ")", ";", "}", "else", "{", "profileObject", ".", "profileRemove", "(", "true", ",", "false", ")", ";", "}", "pool", ".", "returnObject", "(", "profileObject", ")", ";", "}", "}", "}", ";", "final", "TransactionContext", "txContext", "=", "txManager", ".", "getTransactionContext", "(", ")", ";", "txContext", ".", "getAfterRollbackActions", "(", ")", ".", "add", "(", "afterRollbackAction", ")", ";", "txContext", ".", "getBeforeCommitActions", "(", ")", ".", "add", "(", "beforeCommitAction", ")", ";", "}"], "docstring": "Adds transactional actions to the active transaction to passivate a\nprofile object.\n\n@param txManager\n@param profileObject\n@param pool", "docstring_tokens": ["Adds", "transactional", "actions", "to", "the", "active", "transaction", "to", "passivate", "a", "profile", "object", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileTableTransactionView.java#L172-L197", "partition": "test", "index": 7071, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileLocalObjectImpl.java", "func_name": "ProfileLocalObjectImpl.checkTransaction", "original_string": "protected void checkTransaction() throws IllegalStateException {\r\n\t\ttry {\r\n\t\t\tif (!sleeContainer.getTransactionManager().getTransaction().equals(this.transaction)) {\r\n\t\t\t\tthrow new IllegalStateException();\r\n\t\t\t}\r\n\t\t} catch (SystemException e) {\r\n\t\t\tthrow new IllegalStateException();\r\n\t\t}\t\t\r\n\t}", "language": "java", "code": "protected void checkTransaction() throws IllegalStateException {\r\n\t\ttry {\r\n\t\t\tif (!sleeContainer.getTransactionManager().getTransaction().equals(this.transaction)) {\r\n\t\t\t\tthrow new IllegalStateException();\r\n\t\t\t}\r\n\t\t} catch (SystemException e) {\r\n\t\t\tthrow new IllegalStateException();\r\n\t\t}\t\t\r\n\t}", "code_tokens": ["protected", "void", "checkTransaction", "(", ")", "throws", "IllegalStateException", "{", "try", "{", "if", "(", "!", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "getTransaction", "(", ")", ".", "equals", "(", "this", ".", "transaction", ")", ")", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "}", "catch", "(", "SystemException", "e", ")", "{", "throw", "new", "IllegalStateException", "(", ")", ";", "}", "}"], "docstring": "Verifies that the current transaction is still the one used to create the object\n@throws IllegalStateException", "docstring_tokens": ["Verifies", "that", "the", "current", "transaction", "is", "still", "the", "one", "used", "to", "create", "the", "object"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileLocalObjectImpl.java#L209-L217", "partition": "test", "index": 7141, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileTableImpl.java", "func_name": "ProfileTableImpl.remove", "original_string": "public void remove(boolean isUninstall) throws SLEEException {\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"removeProfileTable: removing profileTable=\"\n\t\t\t\t\t+ profileTableName);\n\t\t}\n\t\t\n\t\t// remove the table profiles, at this stage they may use notification source, lets leave it.\n\t\tfor (ProfileID profileID : getProfiles()) {\n\t\t\t// don't invoke the profile concrete object, to avoid evil profile lifecycle impls \n\t\t\t// that rollbacks tx, as Test1110251Test\n\t\t\tthis.removeProfile(profileID.getProfileName(), false, isUninstall);\n\t\t}\n\n\t\t// remove default profile\n\t\tif (getDefaultProfileEntity() != null) {\n\t\t\tthis.removeProfile(null, false, false);\n\t\t}\n\t\t\n\t\t// add action after commit to remove tracer and close uncommitted mbeans\n\t\tTransactionalAction commitAction = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\t// remove notification sources for profile table\n\t\t\t\tfinal TraceManagement traceMBeanImpl = sleeContainer.getTraceManagement();\n\t\t\t\ttraceMBeanImpl.deregisterNotificationSource(new ProfileTableNotification(profileTableName));\n\t\t\t\t// close uncommitted mbeans\n\t\t\t\tcloseUncommittedProfileMBeans();\t\t\t\t\t\n\t\t\t}\n\t\t};\n\t\tsleeContainer.getTransactionManager().getTransactionContext().getAfterCommitActions().add(commitAction);\n\t\t\n\n\t\tif (sleeContainer.getSleeState() == SleeState.RUNNING) {\n\t\t\tendActivity();\n\t\t}\n\n\t\t// unregister mbean\n\t\tunregisterUsageMBean();\n\n\t\t// remove object pool\n\t\tprofileManagement.getObjectPoolManagement().removeObjectPool(this, sleeContainer.getTransactionManager());\n\n\t}", "language": "java", "code": "public void remove(boolean isUninstall) throws SLEEException {\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"removeProfileTable: removing profileTable=\"\n\t\t\t\t\t+ profileTableName);\n\t\t}\n\t\t\n\t\t// remove the table profiles, at this stage they may use notification source, lets leave it.\n\t\tfor (ProfileID profileID : getProfiles()) {\n\t\t\t// don't invoke the profile concrete object, to avoid evil profile lifecycle impls \n\t\t\t// that rollbacks tx, as Test1110251Test\n\t\t\tthis.removeProfile(profileID.getProfileName(), false, isUninstall);\n\t\t}\n\n\t\t// remove default profile\n\t\tif (getDefaultProfileEntity() != null) {\n\t\t\tthis.removeProfile(null, false, false);\n\t\t}\n\t\t\n\t\t// add action after commit to remove tracer and close uncommitted mbeans\n\t\tTransactionalAction commitAction = new TransactionalAction() {\n\t\t\tpublic void execute() {\n\t\t\t\t// remove notification sources for profile table\n\t\t\t\tfinal TraceManagement traceMBeanImpl = sleeContainer.getTraceManagement();\n\t\t\t\ttraceMBeanImpl.deregisterNotificationSource(new ProfileTableNotification(profileTableName));\n\t\t\t\t// close uncommitted mbeans\n\t\t\t\tcloseUncommittedProfileMBeans();\t\t\t\t\t\n\t\t\t}\n\t\t};\n\t\tsleeContainer.getTransactionManager().getTransactionContext().getAfterCommitActions().add(commitAction);\n\t\t\n\n\t\tif (sleeContainer.getSleeState() == SleeState.RUNNING) {\n\t\t\tendActivity();\n\t\t}\n\n\t\t// unregister mbean\n\t\tunregisterUsageMBean();\n\n\t\t// remove object pool\n\t\tprofileManagement.getObjectPoolManagement().removeObjectPool(this, sleeContainer.getTransactionManager());\n\n\t}", "code_tokens": ["public", "void", "remove", "(", "boolean", "isUninstall", ")", "throws", "SLEEException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"removeProfileTable: removing profileTable=\"", "+", "profileTableName", ")", ";", "}", "// remove the table profiles, at this stage they may use notification source, lets leave it.", "for", "(", "ProfileID", "profileID", ":", "getProfiles", "(", ")", ")", "{", "// don't invoke the profile concrete object, to avoid evil profile lifecycle impls ", "// that rollbacks tx, as Test1110251Test", "this", ".", "removeProfile", "(", "profileID", ".", "getProfileName", "(", ")", ",", "false", ",", "isUninstall", ")", ";", "}", "// remove default profile", "if", "(", "getDefaultProfileEntity", "(", ")", "!=", "null", ")", "{", "this", ".", "removeProfile", "(", "null", ",", "false", ",", "false", ")", ";", "}", "// add action after commit to remove tracer and close uncommitted mbeans", "TransactionalAction", "commitAction", "=", "new", "TransactionalAction", "(", ")", "{", "public", "void", "execute", "(", ")", "{", "// remove notification sources for profile table", "final", "TraceManagement", "traceMBeanImpl", "=", "sleeContainer", ".", "getTraceManagement", "(", ")", ";", "traceMBeanImpl", ".", "deregisterNotificationSource", "(", "new", "ProfileTableNotification", "(", "profileTableName", ")", ")", ";", "// close uncommitted mbeans", "closeUncommittedProfileMBeans", "(", ")", ";", "}", "}", ";", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "getTransactionContext", "(", ")", ".", "getAfterCommitActions", "(", ")", ".", "add", "(", "commitAction", ")", ";", "if", "(", "sleeContainer", ".", "getSleeState", "(", ")", "==", "SleeState", ".", "RUNNING", ")", "{", "endActivity", "(", ")", ";", "}", "// unregister mbean", "unregisterUsageMBean", "(", ")", ";", "// remove object pool", "profileManagement", ".", "getObjectPoolManagement", "(", ")", ".", "removeObjectPool", "(", "this", ",", "sleeContainer", ".", "getTransactionManager", "(", ")", ")", ";", "}"], "docstring": "Triggers remove operation on this profile table.\n\n@throws UnrecognizedProfileTableNameException", "docstring_tokens": ["Triggers", "remove", "operation", "on", "this", "profile", "table", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileTableImpl.java#L671-L713", "partition": "test", "index": 6999, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileTableImpl.java", "func_name": "ProfileTableImpl.profileExists", "original_string": "public boolean profileExists(String profileName) {\n\t\t\n\t\tboolean result = component.getProfileEntityFramework().findProfile(this.getProfileTableName(), profileName) != null;\n\t\t\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Profile named \"+profileName+(result ? \"\" : \" does not\")+\" exists on table named \" + this.getProfileTableName());\n\t\t} \n\t\t\n\t\treturn result;\n\t}", "language": "java", "code": "public boolean profileExists(String profileName) {\n\t\t\n\t\tboolean result = component.getProfileEntityFramework().findProfile(this.getProfileTableName(), profileName) != null;\n\t\t\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Profile named \"+profileName+(result ? \"\" : \" does not\")+\" exists on table named \" + this.getProfileTableName());\n\t\t} \n\t\t\n\t\treturn result;\n\t}", "code_tokens": ["public", "boolean", "profileExists", "(", "String", "profileName", ")", "{", "boolean", "result", "=", "component", ".", "getProfileEntityFramework", "(", ")", ".", "findProfile", "(", "this", ".", "getProfileTableName", "(", ")", ",", "profileName", ")", "!=", "null", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Profile named \"", "+", "profileName", "+", "(", "result", "?", "\"\"", ":", "\" does not\"", ")", "+", "\" exists on table named \"", "+", "this", ".", "getProfileTableName", "(", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Determines if profile is in back end storage == visible to other\ncompoenents than MBean, if null is passed as argumetn it must check for\nany other than defualt?", "docstring_tokens": ["Determines", "if", "profile", "is", "in", "back", "end", "storage", "==", "visible", "to", "other", "compoenents", "than", "MBean", "if", "null", "is", "passed", "as", "argumetn", "it", "must", "check", "for", "any", "other", "than", "defualt?"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileTableImpl.java#L631-L640", "partition": "test", "index": 6998, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java", "func_name": "ProfileObjectImpl.fireAddOrUpdatedEventIfNeeded", "original_string": "public void fireAddOrUpdatedEventIfNeeded() {\n\t\t\n\t\tif (state == ProfileObjectState.READY) {\n\t\t\tif (profileEntity.isDirty()) {\n\t\t\t\t// check the table fires events and the object is not assigned to a default profile\n\t\t\t\tif (profileTable.doesFireEvents() && profileEntity.getProfileName() != null && profileTable.getSleeContainer().getSleeState() == SleeState.RUNNING) {\n\t\t\t\t\t// Fire a Profile Added or Updated Event\n\t\t\t\t\tActivityContext ac = profileTable.getActivityContext();\n\t\t\t\t\tAbstractProfileEvent event = null;\n\t\t\t\t\tif (profileEntity.isCreate()) {\n\t\t\t\t\t\tif (persisted) {\n\t\t\t\t\t\t\tevent = new ProfileAddedEventImpl(profileEntity,profileTable.getProfileManagement());\n\t\t\t\t\t\t\tpersisted = false;\n\t\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\t\t\tlogger.trace(\"firing profile added event for profile named \"+profileEntity);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tevent = new ProfileUpdatedEventImpl(profileEntitySnapshot,profileEntity,profileTable.getProfileManagement());\t\t\n\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\t\tlogger.trace(\"firing profile updated event for profile named \"+profileEntity);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tac.fireEvent(event.getEventTypeID(), event,\n\t\t\t\t\t\t\tevent.getProfileAddress(), null, null,null,null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}", "language": "java", "code": "public void fireAddOrUpdatedEventIfNeeded() {\n\t\t\n\t\tif (state == ProfileObjectState.READY) {\n\t\t\tif (profileEntity.isDirty()) {\n\t\t\t\t// check the table fires events and the object is not assigned to a default profile\n\t\t\t\tif (profileTable.doesFireEvents() && profileEntity.getProfileName() != null && profileTable.getSleeContainer().getSleeState() == SleeState.RUNNING) {\n\t\t\t\t\t// Fire a Profile Added or Updated Event\n\t\t\t\t\tActivityContext ac = profileTable.getActivityContext();\n\t\t\t\t\tAbstractProfileEvent event = null;\n\t\t\t\t\tif (profileEntity.isCreate()) {\n\t\t\t\t\t\tif (persisted) {\n\t\t\t\t\t\t\tevent = new ProfileAddedEventImpl(profileEntity,profileTable.getProfileManagement());\n\t\t\t\t\t\t\tpersisted = false;\n\t\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\t\t\tlogger.trace(\"firing profile added event for profile named \"+profileEntity);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tevent = new ProfileUpdatedEventImpl(profileEntitySnapshot,profileEntity,profileTable.getProfileManagement());\t\t\n\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\t\tlogger.trace(\"firing profile updated event for profile named \"+profileEntity);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tac.fireEvent(event.getEventTypeID(), event,\n\t\t\t\t\t\t\tevent.getProfileAddress(), null, null,null,null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}", "code_tokens": ["public", "void", "fireAddOrUpdatedEventIfNeeded", "(", ")", "{", "if", "(", "state", "==", "ProfileObjectState", ".", "READY", ")", "{", "if", "(", "profileEntity", ".", "isDirty", "(", ")", ")", "{", "// check the table fires events and the object is not assigned to a default profile", "if", "(", "profileTable", ".", "doesFireEvents", "(", ")", "&&", "profileEntity", ".", "getProfileName", "(", ")", "!=", "null", "&&", "profileTable", ".", "getSleeContainer", "(", ")", ".", "getSleeState", "(", ")", "==", "SleeState", ".", "RUNNING", ")", "{", "// Fire a Profile Added or Updated Event", "ActivityContext", "ac", "=", "profileTable", ".", "getActivityContext", "(", ")", ";", "AbstractProfileEvent", "event", "=", "null", ";", "if", "(", "profileEntity", ".", "isCreate", "(", ")", ")", "{", "if", "(", "persisted", ")", "{", "event", "=", "new", "ProfileAddedEventImpl", "(", "profileEntity", ",", "profileTable", ".", "getProfileManagement", "(", ")", ")", ";", "persisted", "=", "false", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"firing profile added event for profile named \"", "+", "profileEntity", ")", ";", "}", "}", "else", "{", "return", ";", "}", "}", "else", "{", "event", "=", "new", "ProfileUpdatedEventImpl", "(", "profileEntitySnapshot", ",", "profileEntity", ",", "profileTable", ".", "getProfileManagement", "(", ")", ")", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"firing profile updated event for profile named \"", "+", "profileEntity", ")", ";", "}", "}", "ac", ".", "fireEvent", "(", "event", ".", "getEventTypeID", "(", ")", ",", "event", ",", "event", ".", "getProfileAddress", "(", ")", ",", "null", ",", "null", ",", "null", ",", "null", ")", ";", "}", "}", "}", "}"], "docstring": "Fires a profile added or updated event if the profile object state is ready and the persistent state is dirty", "docstring_tokens": ["Fires", "a", "profile", "added", "or", "updated", "event", "if", "the", "profile", "object", "state", "is", "ready", "and", "the", "persistent", "state", "is", "dirty"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java#L769-L802", "partition": "test", "index": 7119, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/AbstractProfileEvent.java", "func_name": "AbstractProfileEvent.getProfileObjectValidInCurrentTransaction", "original_string": "ProfileObjectImpl getProfileObjectValidInCurrentTransaction(ProfileEntity profileEntity) throws TransactionRequiredLocalException {\r\n\t\t// check tx\r\n\t\tfinal SleeTransactionManager txManager = profileManagement.getSleeContainer().getTransactionManager();\r\n\t\ttxManager.mandateTransaction();\r\n\t\t\r\n\t\t// look for an assigned object in local map\r\n\t\tif (txData == null) {\r\n\t\t\ttxData = new HashMap<ProfileEntity, ProfileObjectImpl>();\r\n\t\t}\r\n\t\tProfileObjectImpl profileObject = (ProfileObjectImpl) txData.get(profileEntity);\r\n\t\tif (profileObject == null) {\r\n\t\t\t// get an object from the table\r\n\t\t\tprofileEntity.setReadOnly(true);\r\n\t\t\tprofileEntity.setDirty(false);\r\n\t\t\tProfileObjectPool pool = profileManagement.getObjectPoolManagement().getObjectPool(profileEntity.getTableName());\r\n\t\t\tprofileObject = pool.borrowObject();\r\n\t\t\tprofileObject.profileActivate(profileEntity);\r\n\t\t\tProfileTableTransactionView.passivateProfileObjectOnTxEnd(txManager, profileObject, pool);\r\n\t\t\ttxData.put(profileEntity, profileObject);\r\n\t\t}\r\n\t\treturn profileObject;\r\n\t}", "language": "java", "code": "ProfileObjectImpl getProfileObjectValidInCurrentTransaction(ProfileEntity profileEntity) throws TransactionRequiredLocalException {\r\n\t\t// check tx\r\n\t\tfinal SleeTransactionManager txManager = profileManagement.getSleeContainer().getTransactionManager();\r\n\t\ttxManager.mandateTransaction();\r\n\t\t\r\n\t\t// look for an assigned object in local map\r\n\t\tif (txData == null) {\r\n\t\t\ttxData = new HashMap<ProfileEntity, ProfileObjectImpl>();\r\n\t\t}\r\n\t\tProfileObjectImpl profileObject = (ProfileObjectImpl) txData.get(profileEntity);\r\n\t\tif (profileObject == null) {\r\n\t\t\t// get an object from the table\r\n\t\t\tprofileEntity.setReadOnly(true);\r\n\t\t\tprofileEntity.setDirty(false);\r\n\t\t\tProfileObjectPool pool = profileManagement.getObjectPoolManagement().getObjectPool(profileEntity.getTableName());\r\n\t\t\tprofileObject = pool.borrowObject();\r\n\t\t\tprofileObject.profileActivate(profileEntity);\r\n\t\t\tProfileTableTransactionView.passivateProfileObjectOnTxEnd(txManager, profileObject, pool);\r\n\t\t\ttxData.put(profileEntity, profileObject);\r\n\t\t}\r\n\t\treturn profileObject;\r\n\t}", "code_tokens": ["ProfileObjectImpl", "getProfileObjectValidInCurrentTransaction", "(", "ProfileEntity", "profileEntity", ")", "throws", "TransactionRequiredLocalException", "{", "// check tx\r", "final", "SleeTransactionManager", "txManager", "=", "profileManagement", ".", "getSleeContainer", "(", ")", ".", "getTransactionManager", "(", ")", ";", "txManager", ".", "mandateTransaction", "(", ")", ";", "// look for an assigned object in local map\r", "if", "(", "txData", "==", "null", ")", "{", "txData", "=", "new", "HashMap", "<", "ProfileEntity", ",", "ProfileObjectImpl", ">", "(", ")", ";", "}", "ProfileObjectImpl", "profileObject", "=", "(", "ProfileObjectImpl", ")", "txData", ".", "get", "(", "profileEntity", ")", ";", "if", "(", "profileObject", "==", "null", ")", "{", "// get an object from the table\r", "profileEntity", ".", "setReadOnly", "(", "true", ")", ";", "profileEntity", ".", "setDirty", "(", "false", ")", ";", "ProfileObjectPool", "pool", "=", "profileManagement", ".", "getObjectPoolManagement", "(", ")", ".", "getObjectPool", "(", "profileEntity", ".", "getTableName", "(", ")", ")", ";", "profileObject", "=", "pool", ".", "borrowObject", "(", ")", ";", "profileObject", ".", "profileActivate", "(", "profileEntity", ")", ";", "ProfileTableTransactionView", ".", "passivateProfileObjectOnTxEnd", "(", "txManager", ",", "profileObject", ",", "pool", ")", ";", "txData", ".", "put", "(", "profileEntity", ",", "profileObject", ")", ";", "}", "return", "profileObject", ";", "}"], "docstring": "Retrieves a local object valid for thus current transaction.\n\n@param profilePojo\n@return\n@throws TransactionRequiredLocalException", "docstring_tokens": ["Retrieves", "a", "local", "object", "valid", "for", "thus", "current", "transaction", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/AbstractProfileEvent.java#L121-L142", "partition": "test", "index": 7144, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/AbstractProfileEvent.java", "func_name": "AbstractProfileEvent.isProfileClassVisible", "original_string": "boolean isProfileClassVisible() {\r\n\t\ttry {\r\n\t\t\tThread.currentThread().getContextClassLoader().loadClass(profileAfterAction.getClass().getName());\r\n\t\t\treturn true;\r\n\t\t} catch (Throwable e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}", "language": "java", "code": "boolean isProfileClassVisible() {\r\n\t\ttry {\r\n\t\t\tThread.currentThread().getContextClassLoader().loadClass(profileAfterAction.getClass().getName());\r\n\t\t\treturn true;\r\n\t\t} catch (Throwable e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}", "code_tokens": ["boolean", "isProfileClassVisible", "(", ")", "{", "try", "{", "Thread", ".", "currentThread", "(", ")", ".", "getContextClassLoader", "(", ")", ".", "loadClass", "(", "profileAfterAction", ".", "getClass", "(", ")", ".", "getName", "(", ")", ")", ";", "return", "true", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "return", "false", ";", "}", "}"], "docstring": "Verifies if the specified class can be loaded by current thread class loader\n@return", "docstring_tokens": ["Verifies", "if", "the", "specified", "class", "can", "be", "loaded", "by", "current", "thread", "class", "loader"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/AbstractProfileEvent.java#L105-L112", "partition": "test", "index": 7143, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileManagementHandler.java", "func_name": "ProfileManagementHandler.getUsageParameterSet", "original_string": "public static Object getUsageParameterSet(ProfileObjectImpl profileObject,\r\n\t\t\tString name) throws UnrecognizedUsageParameterSetNameException {\r\n\t\tif (logger.isDebugEnabled()) {\r\n\t\t\tlogger.info(\"[getUsageParameterSet(\" + name + \")] @ \"\r\n\t\t\t\t\t+ profileObject);\r\n\t\t}\r\n\r\n\t\tif (name == null) {\r\n\t\t\tthrow new NullPointerException(\r\n\t\t\t\t\t\"UsageParameterSet name must not be null.\");\r\n\t\t}\r\n\t\tProfileTableImpl profileTable = profileObject\r\n\t\t\t\t.getProfileTable();\r\n\t\tObject result = profileTable.getProfileTableUsageMBean()\r\n\t\t\t\t.getInstalledUsageParameterSet(name);\r\n\t\tif (result == null) {\r\n\t\t\tthrow new UnrecognizedUsageParameterSetNameException();\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}", "language": "java", "code": "public static Object getUsageParameterSet(ProfileObjectImpl profileObject,\r\n\t\t\tString name) throws UnrecognizedUsageParameterSetNameException {\r\n\t\tif (logger.isDebugEnabled()) {\r\n\t\t\tlogger.info(\"[getUsageParameterSet(\" + name + \")] @ \"\r\n\t\t\t\t\t+ profileObject);\r\n\t\t}\r\n\r\n\t\tif (name == null) {\r\n\t\t\tthrow new NullPointerException(\r\n\t\t\t\t\t\"UsageParameterSet name must not be null.\");\r\n\t\t}\r\n\t\tProfileTableImpl profileTable = profileObject\r\n\t\t\t\t.getProfileTable();\r\n\t\tObject result = profileTable.getProfileTableUsageMBean()\r\n\t\t\t\t.getInstalledUsageParameterSet(name);\r\n\t\tif (result == null) {\r\n\t\t\tthrow new UnrecognizedUsageParameterSetNameException();\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}", "code_tokens": ["public", "static", "Object", "getUsageParameterSet", "(", "ProfileObjectImpl", "profileObject", ",", "String", "name", ")", "throws", "UnrecognizedUsageParameterSetNameException", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "info", "(", "\"[getUsageParameterSet(\"", "+", "name", "+", "\")] @ \"", "+", "profileObject", ")", ";", "}", "if", "(", "name", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"UsageParameterSet name must not be null.\"", ")", ";", "}", "ProfileTableImpl", "profileTable", "=", "profileObject", ".", "getProfileTable", "(", ")", ";", "Object", "result", "=", "profileTable", ".", "getProfileTableUsageMBean", "(", ")", ".", "getInstalledUsageParameterSet", "(", "name", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "new", "UnrecognizedUsageParameterSetNameException", "(", ")", ";", "}", "else", "{", "return", "result", ";", "}", "}"], "docstring": "Usage methods. Here we can be static for sure. Rest must be tested.", "docstring_tokens": ["Usage", "methods", ".", "Here", "we", "can", "be", "static", "for", "sure", ".", "Rest", "must", "be", "tested", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileManagementHandler.java#L102-L123", "partition": "test", "index": 7034, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java", "func_name": "ProfileObjectImpl.getProfileCmpSlee10Wrapper", "original_string": "public AbstractProfileCmpSlee10Wrapper getProfileCmpSlee10Wrapper() {\n\t\tif (profileCmpSlee10Wrapper == null) {\n\t\t\ttry {\n\t\t\t\tprofileCmpSlee10Wrapper = (AbstractProfileCmpSlee10Wrapper) profileTable.getProfileSpecificationComponent().getProfileCmpSlee10WrapperClass().getConstructor(ProfileObjectImpl.class).newInstance(this);\n\t\t\t} catch (Throwable e) {\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\n\t\t\t}\n\t\t}\n\t\treturn profileCmpSlee10Wrapper;\n\t}", "language": "java", "code": "public AbstractProfileCmpSlee10Wrapper getProfileCmpSlee10Wrapper() {\n\t\tif (profileCmpSlee10Wrapper == null) {\n\t\t\ttry {\n\t\t\t\tprofileCmpSlee10Wrapper = (AbstractProfileCmpSlee10Wrapper) profileTable.getProfileSpecificationComponent().getProfileCmpSlee10WrapperClass().getConstructor(ProfileObjectImpl.class).newInstance(this);\n\t\t\t} catch (Throwable e) {\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\n\t\t\t}\n\t\t}\n\t\treturn profileCmpSlee10Wrapper;\n\t}", "code_tokens": ["public", "AbstractProfileCmpSlee10Wrapper", "getProfileCmpSlee10Wrapper", "(", ")", "{", "if", "(", "profileCmpSlee10Wrapper", "==", "null", ")", "{", "try", "{", "profileCmpSlee10Wrapper", "=", "(", "AbstractProfileCmpSlee10Wrapper", ")", "profileTable", ".", "getProfileSpecificationComponent", "(", ")", ".", "getProfileCmpSlee10WrapperClass", "(", ")", ".", "getConstructor", "(", "ProfileObjectImpl", ".", "class", ")", ".", "newInstance", "(", "this", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "return", "profileCmpSlee10Wrapper", ";", "}"], "docstring": "Retrieves the profile cmp slee 1.0 wrapper for this profile object\n@return", "docstring_tokens": ["Retrieves", "the", "profile", "cmp", "slee", "1", ".", "0", "wrapper", "for", "this", "profile", "object"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java#L813-L822", "partition": "test", "index": 7120, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/jpa/ConcreteProfileGenerator.java", "func_name": "ConcreteProfileGenerator.generateNamedUsageParameterGetter", "original_string": "private void generateNamedUsageParameterGetter(CtClass profileConcreteClass) {\r\n\t\tString methodName = \"getUsageParameterSet\";\r\n\t\tfor (CtMethod ctMethod : profileConcreteClass.getMethods()) {\r\n\t\t\tif (ctMethod.getName().equals(methodName)) {\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// copy method, we can't just add body becase it is in super\r\n\t\t\t\t\t// class and does not sees profileObject field\r\n\t\t\t\t\tCtMethod ctMethodCopy =  CtNewMethod.copy(ctMethod, profileConcreteClass, null);\r\n\t\t\t\t\t// create the method body\r\n\t\t\t\t\tString methodBody = \"{ return ($r)\"\r\n\t\t\t\t\t\t+ ClassGeneratorUtils.MANAGEMENT_HANDLER\r\n\t\t\t\t\t\t+ \".getUsageParameterSet(profileObject,$1); }\";\r\n\t\t\t\t\tif (logger.isTraceEnabled())\r\n\t\t\t\t\t\tlogger.trace(\"Implemented method \" + methodName\r\n\t\t\t\t\t\t\t\t+ \" , body = \" + methodBody);\r\n\t\t\t\t\tctMethodCopy.setBody(methodBody);\r\n\t\t\t\t\tprofileConcreteClass.addMethod(ctMethodCopy);\r\n\t\t\t\t} catch (CannotCompileException e) {\r\n\t\t\t\t\tthrow new SLEEException(e.getMessage(), e);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}", "language": "java", "code": "private void generateNamedUsageParameterGetter(CtClass profileConcreteClass) {\r\n\t\tString methodName = \"getUsageParameterSet\";\r\n\t\tfor (CtMethod ctMethod : profileConcreteClass.getMethods()) {\r\n\t\t\tif (ctMethod.getName().equals(methodName)) {\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// copy method, we can't just add body becase it is in super\r\n\t\t\t\t\t// class and does not sees profileObject field\r\n\t\t\t\t\tCtMethod ctMethodCopy =  CtNewMethod.copy(ctMethod, profileConcreteClass, null);\r\n\t\t\t\t\t// create the method body\r\n\t\t\t\t\tString methodBody = \"{ return ($r)\"\r\n\t\t\t\t\t\t+ ClassGeneratorUtils.MANAGEMENT_HANDLER\r\n\t\t\t\t\t\t+ \".getUsageParameterSet(profileObject,$1); }\";\r\n\t\t\t\t\tif (logger.isTraceEnabled())\r\n\t\t\t\t\t\tlogger.trace(\"Implemented method \" + methodName\r\n\t\t\t\t\t\t\t\t+ \" , body = \" + methodBody);\r\n\t\t\t\t\tctMethodCopy.setBody(methodBody);\r\n\t\t\t\t\tprofileConcreteClass.addMethod(ctMethodCopy);\r\n\t\t\t\t} catch (CannotCompileException e) {\r\n\t\t\t\t\tthrow new SLEEException(e.getMessage(), e);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}", "code_tokens": ["private", "void", "generateNamedUsageParameterGetter", "(", "CtClass", "profileConcreteClass", ")", "{", "String", "methodName", "=", "\"getUsageParameterSet\"", ";", "for", "(", "CtMethod", "ctMethod", ":", "profileConcreteClass", ".", "getMethods", "(", ")", ")", "{", "if", "(", "ctMethod", ".", "getName", "(", ")", ".", "equals", "(", "methodName", ")", ")", "{", "try", "{", "// copy method, we can't just add body becase it is in super\r", "// class and does not sees profileObject field\r", "CtMethod", "ctMethodCopy", "=", "CtNewMethod", ".", "copy", "(", "ctMethod", ",", "profileConcreteClass", ",", "null", ")", ";", "// create the method body\r", "String", "methodBody", "=", "\"{ return ($r)\"", "+", "ClassGeneratorUtils", ".", "MANAGEMENT_HANDLER", "+", "\".getUsageParameterSet(profileObject,$1); }\"", ";", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "logger", ".", "trace", "(", "\"Implemented method \"", "+", "methodName", "+", "\" , body = \"", "+", "methodBody", ")", ";", "ctMethodCopy", ".", "setBody", "(", "methodBody", ")", ";", "profileConcreteClass", ".", "addMethod", "(", "ctMethodCopy", ")", ";", "}", "catch", "(", "CannotCompileException", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}", "}"], "docstring": "Create a named usage parameter getter.\n\n@param profileConcreteClass\n@throws SLEEException", "docstring_tokens": ["Create", "a", "named", "usage", "parameter", "getter", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/jpa/ConcreteProfileGenerator.java#L248-L270", "partition": "test", "index": 7171, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java", "func_name": "ProfileObjectImpl.getProfileLocalObject", "original_string": "public ProfileLocalObject getProfileLocalObject() {\n\t\tfinal Class<?> profileLocalObjectConcreteClass = profileTable.getProfileSpecificationComponent().getProfileLocalObjectConcreteClass();\n\t\tProfileLocalObject profileLocalObject = null;\n\t\tif (profileLocalObjectConcreteClass == null) {\n\t\t\tprofileLocalObject = new ProfileLocalObjectImpl(this);\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tprofileLocalObject = (ProfileLocalObject) profileLocalObjectConcreteClass.getConstructor(ProfileObjectImpl.class).newInstance(this);\n\t\t\t} catch (Throwable e) {\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn profileLocalObject;\n\t}", "language": "java", "code": "public ProfileLocalObject getProfileLocalObject() {\n\t\tfinal Class<?> profileLocalObjectConcreteClass = profileTable.getProfileSpecificationComponent().getProfileLocalObjectConcreteClass();\n\t\tProfileLocalObject profileLocalObject = null;\n\t\tif (profileLocalObjectConcreteClass == null) {\n\t\t\tprofileLocalObject = new ProfileLocalObjectImpl(this);\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tprofileLocalObject = (ProfileLocalObject) profileLocalObjectConcreteClass.getConstructor(ProfileObjectImpl.class).newInstance(this);\n\t\t\t} catch (Throwable e) {\n\t\t\t\tthrow new SLEEException(e.getMessage(),e);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn profileLocalObject;\n\t}", "code_tokens": ["public", "ProfileLocalObject", "getProfileLocalObject", "(", ")", "{", "final", "Class", "<", "?", ">", "profileLocalObjectConcreteClass", "=", "profileTable", ".", "getProfileSpecificationComponent", "(", ")", ".", "getProfileLocalObjectConcreteClass", "(", ")", ";", "ProfileLocalObject", "profileLocalObject", "=", "null", ";", "if", "(", "profileLocalObjectConcreteClass", "==", "null", ")", "{", "profileLocalObject", "=", "new", "ProfileLocalObjectImpl", "(", "this", ")", ";", "}", "else", "{", "try", "{", "profileLocalObject", "=", "(", "ProfileLocalObject", ")", "profileLocalObjectConcreteClass", ".", "getConstructor", "(", "ProfileObjectImpl", ".", "class", ")", ".", "newInstance", "(", "this", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "return", "profileLocalObject", ";", "}"], "docstring": "Retrieves the local representation for this profile object\n@return", "docstring_tokens": ["Retrieves", "the", "local", "representation", "for", "this", "profile", "object"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java#L651-L666", "partition": "test", "index": 7118, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/ClassGeneratorUtils.java", "func_name": "ClassGeneratorUtils.addAnnotation", "original_string": "public static void addAnnotation(String annotation, LinkedHashMap<String, Object> memberValues, Object toAnnotate)\n  {\n    if(toAnnotate instanceof CtClass)\n    {\n      CtClass classToAnnotate = (CtClass) toAnnotate;\n\n      ClassFile cf = classToAnnotate.getClassFile();\n      ConstPool cp = cf.getConstPool();\n\n      AnnotationsAttribute attr = (AnnotationsAttribute) cf.getAttribute(AnnotationsAttribute.visibleTag);\n\n      if(attr == null)\n      {\n        attr = new AnnotationsAttribute(cp, AnnotationsAttribute.visibleTag);\n      }\n\n      Annotation a = new Annotation(annotation, cp);\n\n      if(memberValues != null)\n      {\n        addMemberValuesToAnnotation(a, cp, memberValues);\n      }\n\n      attr.addAnnotation( a );\n\n      cf.addAttribute( attr );\n    }\n    else if(toAnnotate instanceof CtMethod)\n    {\n      CtMethod methodToAnnotate = (CtMethod) toAnnotate;\n\n      MethodInfo mi = methodToAnnotate.getMethodInfo();\n      ConstPool cp = mi.getConstPool();\n\n      AnnotationsAttribute attr = (AnnotationsAttribute) mi.getAttribute(AnnotationsAttribute.visibleTag);\n\n      if(attr == null)\n      {\n        attr = new AnnotationsAttribute(cp, AnnotationsAttribute.visibleTag);\n      }\n\n      Annotation a = new Annotation(annotation, cp);\n\n      if(memberValues != null)\n      {\n        addMemberValuesToAnnotation(a, cp, memberValues);\n      }\n\n      attr.addAnnotation( a );\n\n      mi.addAttribute( attr );\n    }\n    else if(toAnnotate instanceof CtField)\n    {\n      CtField fieldToAnnotate = (CtField) toAnnotate;\n\n      FieldInfo fi = fieldToAnnotate.getFieldInfo();\n      ConstPool cp = fi.getConstPool();\n\n      AnnotationsAttribute attr = (AnnotationsAttribute) fi.getAttribute(AnnotationsAttribute.visibleTag);\n\n      if(attr == null)\n      {\n        attr = new AnnotationsAttribute(cp, AnnotationsAttribute.visibleTag);\n      }\n\n      Annotation a = new Annotation(annotation, cp);\n\n      if(memberValues != null)\n      {\n        addMemberValuesToAnnotation(a, cp, memberValues);\n      }\n\n      attr.addAnnotation( a );\n\n      fi.addAttribute( attr );\n    }\n    else\n    {\n      throw new UnsupportedOperationException(\"Unknown object type: \" + toAnnotate.getClass());\n    }\n  }", "language": "java", "code": "public static void addAnnotation(String annotation, LinkedHashMap<String, Object> memberValues, Object toAnnotate)\n  {\n    if(toAnnotate instanceof CtClass)\n    {\n      CtClass classToAnnotate = (CtClass) toAnnotate;\n\n      ClassFile cf = classToAnnotate.getClassFile();\n      ConstPool cp = cf.getConstPool();\n\n      AnnotationsAttribute attr = (AnnotationsAttribute) cf.getAttribute(AnnotationsAttribute.visibleTag);\n\n      if(attr == null)\n      {\n        attr = new AnnotationsAttribute(cp, AnnotationsAttribute.visibleTag);\n      }\n\n      Annotation a = new Annotation(annotation, cp);\n\n      if(memberValues != null)\n      {\n        addMemberValuesToAnnotation(a, cp, memberValues);\n      }\n\n      attr.addAnnotation( a );\n\n      cf.addAttribute( attr );\n    }\n    else if(toAnnotate instanceof CtMethod)\n    {\n      CtMethod methodToAnnotate = (CtMethod) toAnnotate;\n\n      MethodInfo mi = methodToAnnotate.getMethodInfo();\n      ConstPool cp = mi.getConstPool();\n\n      AnnotationsAttribute attr = (AnnotationsAttribute) mi.getAttribute(AnnotationsAttribute.visibleTag);\n\n      if(attr == null)\n      {\n        attr = new AnnotationsAttribute(cp, AnnotationsAttribute.visibleTag);\n      }\n\n      Annotation a = new Annotation(annotation, cp);\n\n      if(memberValues != null)\n      {\n        addMemberValuesToAnnotation(a, cp, memberValues);\n      }\n\n      attr.addAnnotation( a );\n\n      mi.addAttribute( attr );\n    }\n    else if(toAnnotate instanceof CtField)\n    {\n      CtField fieldToAnnotate = (CtField) toAnnotate;\n\n      FieldInfo fi = fieldToAnnotate.getFieldInfo();\n      ConstPool cp = fi.getConstPool();\n\n      AnnotationsAttribute attr = (AnnotationsAttribute) fi.getAttribute(AnnotationsAttribute.visibleTag);\n\n      if(attr == null)\n      {\n        attr = new AnnotationsAttribute(cp, AnnotationsAttribute.visibleTag);\n      }\n\n      Annotation a = new Annotation(annotation, cp);\n\n      if(memberValues != null)\n      {\n        addMemberValuesToAnnotation(a, cp, memberValues);\n      }\n\n      attr.addAnnotation( a );\n\n      fi.addAttribute( attr );\n    }\n    else\n    {\n      throw new UnsupportedOperationException(\"Unknown object type: \" + toAnnotate.getClass());\n    }\n  }", "code_tokens": ["public", "static", "void", "addAnnotation", "(", "String", "annotation", ",", "LinkedHashMap", "<", "String", ",", "Object", ">", "memberValues", ",", "Object", "toAnnotate", ")", "{", "if", "(", "toAnnotate", "instanceof", "CtClass", ")", "{", "CtClass", "classToAnnotate", "=", "(", "CtClass", ")", "toAnnotate", ";", "ClassFile", "cf", "=", "classToAnnotate", ".", "getClassFile", "(", ")", ";", "ConstPool", "cp", "=", "cf", ".", "getConstPool", "(", ")", ";", "AnnotationsAttribute", "attr", "=", "(", "AnnotationsAttribute", ")", "cf", ".", "getAttribute", "(", "AnnotationsAttribute", ".", "visibleTag", ")", ";", "if", "(", "attr", "==", "null", ")", "{", "attr", "=", "new", "AnnotationsAttribute", "(", "cp", ",", "AnnotationsAttribute", ".", "visibleTag", ")", ";", "}", "Annotation", "a", "=", "new", "Annotation", "(", "annotation", ",", "cp", ")", ";", "if", "(", "memberValues", "!=", "null", ")", "{", "addMemberValuesToAnnotation", "(", "a", ",", "cp", ",", "memberValues", ")", ";", "}", "attr", ".", "addAnnotation", "(", "a", ")", ";", "cf", ".", "addAttribute", "(", "attr", ")", ";", "}", "else", "if", "(", "toAnnotate", "instanceof", "CtMethod", ")", "{", "CtMethod", "methodToAnnotate", "=", "(", "CtMethod", ")", "toAnnotate", ";", "MethodInfo", "mi", "=", "methodToAnnotate", ".", "getMethodInfo", "(", ")", ";", "ConstPool", "cp", "=", "mi", ".", "getConstPool", "(", ")", ";", "AnnotationsAttribute", "attr", "=", "(", "AnnotationsAttribute", ")", "mi", ".", "getAttribute", "(", "AnnotationsAttribute", ".", "visibleTag", ")", ";", "if", "(", "attr", "==", "null", ")", "{", "attr", "=", "new", "AnnotationsAttribute", "(", "cp", ",", "AnnotationsAttribute", ".", "visibleTag", ")", ";", "}", "Annotation", "a", "=", "new", "Annotation", "(", "annotation", ",", "cp", ")", ";", "if", "(", "memberValues", "!=", "null", ")", "{", "addMemberValuesToAnnotation", "(", "a", ",", "cp", ",", "memberValues", ")", ";", "}", "attr", ".", "addAnnotation", "(", "a", ")", ";", "mi", ".", "addAttribute", "(", "attr", ")", ";", "}", "else", "if", "(", "toAnnotate", "instanceof", "CtField", ")", "{", "CtField", "fieldToAnnotate", "=", "(", "CtField", ")", "toAnnotate", ";", "FieldInfo", "fi", "=", "fieldToAnnotate", ".", "getFieldInfo", "(", ")", ";", "ConstPool", "cp", "=", "fi", ".", "getConstPool", "(", ")", ";", "AnnotationsAttribute", "attr", "=", "(", "AnnotationsAttribute", ")", "fi", ".", "getAttribute", "(", "AnnotationsAttribute", ".", "visibleTag", ")", ";", "if", "(", "attr", "==", "null", ")", "{", "attr", "=", "new", "AnnotationsAttribute", "(", "cp", ",", "AnnotationsAttribute", ".", "visibleTag", ")", ";", "}", "Annotation", "a", "=", "new", "Annotation", "(", "annotation", ",", "cp", ")", ";", "if", "(", "memberValues", "!=", "null", ")", "{", "addMemberValuesToAnnotation", "(", "a", ",", "cp", ",", "memberValues", ")", ";", "}", "attr", ".", "addAnnotation", "(", "a", ")", ";", "fi", ".", "addAttribute", "(", "attr", ")", ";", "}", "else", "{", "throw", "new", "UnsupportedOperationException", "(", "\"Unknown object type: \"", "+", "toAnnotate", ".", "getClass", "(", ")", ")", ";", "}", "}"], "docstring": "Adds the selected annotation to the Object, along with the specified memberValues.\n\n@param annotation the FQDN of the annotation\n@param memberValues the member values HashMap (name=value)\n@param toAnnotate the object to be annotated", "docstring_tokens": ["Adds", "the", "selected", "annotation", "to", "the", "Object", "along", "with", "the", "specified", "memberValues", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/ClassGeneratorUtils.java#L398-L479", "partition": "test", "index": 7123, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java", "func_name": "ProfileObjectImpl.unsetProfileContext", "original_string": "public void unsetProfileContext() {\n\n\t\tif(logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"[unsetProfileContext] \"+this);\n\t\t}\n\n\t\tif (state == ProfileObjectState.POOLED  && profileConcreteClassInfo.isInvokeUnsetProfileContext()) {\n\n\t\t\tfinal ClassLoader oldClassLoader = SleeContainerUtils.getCurrentThreadClassLoader();\n\t\t\ttry\t{\n\t\t\t\tfinal ClassLoader cl = profileTable.getProfileSpecificationComponent().getClassLoader();\n\t\t\t\tif (System.getSecurityManager()!=null) {\n\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\t\tpublic Object run()\t{\n\t\t\t\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t\t}\n\n\t\t\t\tif (isSlee11) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tprofileConcrete.unsetProfileContext();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\truntimeExceptionOnProfileInvocation(e);\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\tprofileContext.setProfileObject(null);\n\t\t\t\tstate = ProfileObjectState.DOES_NOT_EXIST;\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (System.getSecurityManager()!=null) {\n\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\t\tpublic Object run() {\n\t\t\t\t\t\t\tThread.currentThread().setContextClassLoader(oldClassLoader);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tThread.currentThread().setContextClassLoader(oldClassLoader);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void unsetProfileContext() {\n\n\t\tif(logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"[unsetProfileContext] \"+this);\n\t\t}\n\n\t\tif (state == ProfileObjectState.POOLED  && profileConcreteClassInfo.isInvokeUnsetProfileContext()) {\n\n\t\t\tfinal ClassLoader oldClassLoader = SleeContainerUtils.getCurrentThreadClassLoader();\n\t\t\ttry\t{\n\t\t\t\tfinal ClassLoader cl = profileTable.getProfileSpecificationComponent().getClassLoader();\n\t\t\t\tif (System.getSecurityManager()!=null) {\n\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\t\tpublic Object run()\t{\n\t\t\t\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t\t}\n\n\t\t\t\tif (isSlee11) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tprofileConcrete.unsetProfileContext();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\truntimeExceptionOnProfileInvocation(e);\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\tprofileContext.setProfileObject(null);\n\t\t\t\tstate = ProfileObjectState.DOES_NOT_EXIST;\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (System.getSecurityManager()!=null) {\n\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\t\tpublic Object run() {\n\t\t\t\t\t\t\tThread.currentThread().setContextClassLoader(oldClassLoader);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tThread.currentThread().setContextClassLoader(oldClassLoader);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "unsetProfileContext", "(", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"[unsetProfileContext] \"", "+", "this", ")", ";", "}", "if", "(", "state", "==", "ProfileObjectState", ".", "POOLED", "&&", "profileConcreteClassInfo", ".", "isInvokeUnsetProfileContext", "(", ")", ")", "{", "final", "ClassLoader", "oldClassLoader", "=", "SleeContainerUtils", ".", "getCurrentThreadClassLoader", "(", ")", ";", "try", "{", "final", "ClassLoader", "cl", "=", "profileTable", ".", "getProfileSpecificationComponent", "(", ")", ".", "getClassLoader", "(", ")", ";", "if", "(", "System", ".", "getSecurityManager", "(", ")", "!=", "null", ")", "{", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "<", "Object", ">", "(", ")", "{", "public", "Object", "run", "(", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "setContextClassLoader", "(", "cl", ")", ";", "return", "null", ";", "}", "}", ")", ";", "}", "else", "{", "Thread", ".", "currentThread", "(", ")", ".", "setContextClassLoader", "(", "cl", ")", ";", "}", "if", "(", "isSlee11", ")", "{", "try", "{", "profileConcrete", ".", "unsetProfileContext", "(", ")", ";", "}", "catch", "(", "RuntimeException", "e", ")", "{", "runtimeExceptionOnProfileInvocation", "(", "e", ")", ";", "}", "}", "profileContext", ".", "setProfileObject", "(", "null", ")", ";", "state", "=", "ProfileObjectState", ".", "DOES_NOT_EXIST", ";", "}", "finally", "{", "if", "(", "System", ".", "getSecurityManager", "(", ")", "!=", "null", ")", "{", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "<", "Object", ">", "(", ")", "{", "public", "Object", "run", "(", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "setContextClassLoader", "(", "oldClassLoader", ")", ";", "return", "null", ";", "}", "}", ")", ";", "}", "else", "{", "Thread", ".", "currentThread", "(", ")", ".", "setContextClassLoader", "(", "oldClassLoader", ")", ";", "}", "}", "}", "}"], "docstring": "Invoked when pool removes object", "docstring_tokens": ["Invoked", "when", "pool", "removes", "object"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java#L581-L629", "partition": "test", "index": 7117, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java", "func_name": "ProfileFacilityImpl.getProfileByIndexedAttribute", "original_string": "public ProfileID getProfileByIndexedAttribute(\r\n\t\t\tjava.lang.String profileTableName, java.lang.String attributeName,\r\n\t\t\tjava.lang.Object attributeValue) throws NullPointerException,\r\n\t\t\tUnrecognizedProfileTableNameException,\r\n\t\t\tUnrecognizedAttributeException, AttributeNotIndexedException,\r\n\t\t\tAttributeTypeMismatchException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfileByIndexedAttribute( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" , attributeName = \" + attributeName\r\n\t\t\t\t\t+ \" , attributeValue = \" + attributeValue + \" )\");\r\n\t\t}\r\n\t\t\r\n\t\tprofileManagement.getSleeContainer().getTransactionManager().mandateTransaction();\r\n\r\n\t\ttry {\r\n\t\t\tProfileTableImpl profileTable = profileManagement.getProfileTable(\r\n\t\t\t\t\t\t\tprofileTableName);\r\n\t\t\tif (profileTable.getProfileSpecificationComponent().isSlee11()) {\r\n\t\t\t\tthrow new FacilityException(\r\n\t\t\t\t\t\t\"JAIN SLEE 1.1 Specs forbidden the usage of this method on SLEE 1.1 Profile Tables\");\r\n\t\t\t}\r\n\t\t\tCollection<ProfileID> profileIDs = profileTable.getProfilesByAttribute(attributeName,attributeValue,false);\r\n\t\t\tif (profileIDs.isEmpty()) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn profileIDs.iterator().next();\r\n\t\t\t}\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedAttributeException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (AttributeNotIndexedException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (AttributeTypeMismatchException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(e.getMessage(), e);\r\n\t\t}\r\n\t}", "language": "java", "code": "public ProfileID getProfileByIndexedAttribute(\r\n\t\t\tjava.lang.String profileTableName, java.lang.String attributeName,\r\n\t\t\tjava.lang.Object attributeValue) throws NullPointerException,\r\n\t\t\tUnrecognizedProfileTableNameException,\r\n\t\t\tUnrecognizedAttributeException, AttributeNotIndexedException,\r\n\t\t\tAttributeTypeMismatchException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfileByIndexedAttribute( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" , attributeName = \" + attributeName\r\n\t\t\t\t\t+ \" , attributeValue = \" + attributeValue + \" )\");\r\n\t\t}\r\n\t\t\r\n\t\tprofileManagement.getSleeContainer().getTransactionManager().mandateTransaction();\r\n\r\n\t\ttry {\r\n\t\t\tProfileTableImpl profileTable = profileManagement.getProfileTable(\r\n\t\t\t\t\t\t\tprofileTableName);\r\n\t\t\tif (profileTable.getProfileSpecificationComponent().isSlee11()) {\r\n\t\t\t\tthrow new FacilityException(\r\n\t\t\t\t\t\t\"JAIN SLEE 1.1 Specs forbidden the usage of this method on SLEE 1.1 Profile Tables\");\r\n\t\t\t}\r\n\t\t\tCollection<ProfileID> profileIDs = profileTable.getProfilesByAttribute(attributeName,attributeValue,false);\r\n\t\t\tif (profileIDs.isEmpty()) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn profileIDs.iterator().next();\r\n\t\t\t}\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedAttributeException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (AttributeNotIndexedException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (AttributeTypeMismatchException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(e.getMessage(), e);\r\n\t\t}\r\n\t}", "code_tokens": ["public", "ProfileID", "getProfileByIndexedAttribute", "(", "java", ".", "lang", ".", "String", "profileTableName", ",", "java", ".", "lang", ".", "String", "attributeName", ",", "java", ".", "lang", ".", "Object", "attributeValue", ")", "throws", "NullPointerException", ",", "UnrecognizedProfileTableNameException", ",", "UnrecognizedAttributeException", ",", "AttributeNotIndexedException", ",", "AttributeTypeMismatchException", ",", "TransactionRolledbackLocalException", ",", "FacilityException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"getProfileByIndexedAttribute( profileTableName = \"", "+", "profileTableName", "+", "\" , attributeName = \"", "+", "attributeName", "+", "\" , attributeValue = \"", "+", "attributeValue", "+", "\" )\"", ")", ";", "}", "profileManagement", ".", "getSleeContainer", "(", ")", ".", "getTransactionManager", "(", ")", ".", "mandateTransaction", "(", ")", ";", "try", "{", "ProfileTableImpl", "profileTable", "=", "profileManagement", ".", "getProfileTable", "(", "profileTableName", ")", ";", "if", "(", "profileTable", ".", "getProfileSpecificationComponent", "(", ")", ".", "isSlee11", "(", ")", ")", "{", "throw", "new", "FacilityException", "(", "\"JAIN SLEE 1.1 Specs forbidden the usage of this method on SLEE 1.1 Profile Tables\"", ")", ";", "}", "Collection", "<", "ProfileID", ">", "profileIDs", "=", "profileTable", ".", "getProfilesByAttribute", "(", "attributeName", ",", "attributeValue", ",", "false", ")", ";", "if", "(", "profileIDs", ".", "isEmpty", "(", ")", ")", "{", "return", "null", ";", "}", "else", "{", "return", "profileIDs", ".", "iterator", "(", ")", ".", "next", "(", ")", ";", "}", "}", "catch", "(", "NullPointerException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "UnrecognizedProfileTableNameException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "UnrecognizedAttributeException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "AttributeNotIndexedException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "AttributeTypeMismatchException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "FacilityException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Get a ProfileID object that identifies the profile contained in the\nspecified profile table, where the specified profile attribute is set to\nthe specified value. In the case of a profile attribute of an array type,\nthe type of the specified value must be the base component type of the\narray, not the array type itself, and the SLEE will return the profile\nidentifier of any profile that contains the value within the array.\n\nNote: The profile table's default profile is not considered when\ndetermining matching profiles as it has no profile identifier that can be\nreturned by this method.\n\nThis method is a required transactional method.\n\nThis method can only be invoked against profile tables created from SLEE\n1.0 profile specifications. Attempting to invoke it on a profile table\ncreated from a SLEE 1.1 profile specification causes a FacilityException\nto be thrown.\n\n@deprecated\n@param profileTableName\n- the name of the profile table.\n@param attributeName\n- the name of the profile's attribute to check.\n@param attributeValue\n- the value to compare the attribute with. Returns: the\nprofile identifier for the first matching profile, or null if\nno matching profile was found.\n@throws java.lang.NullPointerException\n- if any attribute is null.\n@throws UnrecognizedProfileTableNameException\n- if a profile table with the specified name does not exist.\n@throws UnrecognizedAttributeException\n- if an attribute with the specified name is not defined in\nthe profile specification for the specified profile table.\n@throws AttributeNotIndexedException\n- if the specified attribute is not indexed in the profile\nspecification for the specified profile table.\n@throws AttributeTypeMismatchException\n- if the type of the supplied attribute value does not match\nthe type of the specified indexed attribute.\n@throws TransactionRolledbackLocalException\n- if this method was invoked without a valid transaction\ncontext and the transaction started by this method failed to\ncommit.\n@throws FacilityException\n- if the profile identifier could not be obtained due to a\nsystem-level failure.", "docstring_tokens": ["Get", "a", "ProfileID", "object", "that", "identifies", "the", "profile", "contained", "in", "the", "specified", "profile", "table", "where", "the", "specified", "profile", "attribute", "is", "set", "to", "the", "specified", "value", ".", "In", "the", "case", "of", "a", "profile", "attribute", "of", "an", "array", "type", "the", "type", "of", "the", "specified", "value", "must", "be", "the", "base", "component", "type", "of", "the", "array", "not", "the", "array", "type", "itself", "and", "the", "SLEE", "will", "return", "the", "profile", "identifier", "of", "any", "profile", "that", "contains", "the", "value", "within", "the", "array", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java#L282-L325", "partition": "test", "index": 6956, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/jpa/JPAProfileEntityFramework.java", "func_name": "JPAProfileEntityFramework.getEntityManager", "original_string": "@SuppressWarnings(\"unchecked\")\n\tprivate EntityManager getEntityManager() {\n\n\t\tif (txDataKey == null) {\n\t\t\ttxDataKey = new StringBuilder(\"jpapef.em.\").append(component.getProfileSpecificationID()).toString();\n\t\t}\n\n\t\tfinal TransactionContext txContext = sleeTransactionManager.getTransactionContext();\n\t\t// look in tx\n\t\tMap transactionContextData = txContext.getData();\n\t\t\n\t\tEntityManager result = (EntityManager) transactionContextData\n\t\t\t\t.get(txDataKey);\n\t\tif (result == null) {\n\t\t\t// create using factory\n\t\t\tresult = entityManagerFactory.createEntityManager();\n\t\t\t// store in tx context data\n\t\t\ttransactionContextData.put(txDataKey, result);\n\t\t\t// add a tx action to close it before tx commits\n\n\t\t\t// FIXME: Do we need this after-rollback action here\n\t\t\t/*\n\t\t\tfinal EntityManager em = result;\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tem.close();\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttxContext.getAfterRollbackActions().add(action);\n\t\t\t*/\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tprivate EntityManager getEntityManager() {\n\n\t\tif (txDataKey == null) {\n\t\t\ttxDataKey = new StringBuilder(\"jpapef.em.\").append(component.getProfileSpecificationID()).toString();\n\t\t}\n\n\t\tfinal TransactionContext txContext = sleeTransactionManager.getTransactionContext();\n\t\t// look in tx\n\t\tMap transactionContextData = txContext.getData();\n\t\t\n\t\tEntityManager result = (EntityManager) transactionContextData\n\t\t\t\t.get(txDataKey);\n\t\tif (result == null) {\n\t\t\t// create using factory\n\t\t\tresult = entityManagerFactory.createEntityManager();\n\t\t\t// store in tx context data\n\t\t\ttransactionContextData.put(txDataKey, result);\n\t\t\t// add a tx action to close it before tx commits\n\n\t\t\t// FIXME: Do we need this after-rollback action here\n\t\t\t/*\n\t\t\tfinal EntityManager em = result;\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tem.close();\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttxContext.getAfterRollbackActions().add(action);\n\t\t\t*/\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "private", "EntityManager", "getEntityManager", "(", ")", "{", "if", "(", "txDataKey", "==", "null", ")", "{", "txDataKey", "=", "new", "StringBuilder", "(", "\"jpapef.em.\"", ")", ".", "append", "(", "component", ".", "getProfileSpecificationID", "(", ")", ")", ".", "toString", "(", ")", ";", "}", "final", "TransactionContext", "txContext", "=", "sleeTransactionManager", ".", "getTransactionContext", "(", ")", ";", "// look in tx", "Map", "transactionContextData", "=", "txContext", ".", "getData", "(", ")", ";", "EntityManager", "result", "=", "(", "EntityManager", ")", "transactionContextData", ".", "get", "(", "txDataKey", ")", ";", "if", "(", "result", "==", "null", ")", "{", "// create using factory", "result", "=", "entityManagerFactory", ".", "createEntityManager", "(", ")", ";", "// store in tx context data", "transactionContextData", ".", "put", "(", "txDataKey", ",", "result", ")", ";", "// add a tx action to close it before tx commits", "// FIXME: Do we need this after-rollback action here", "/*\n\t\t\tfinal EntityManager em = result;\n\t\t\tTransactionalAction action = new TransactionalAction() {\n\t\t\t\tpublic void execute() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tem.close();\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttxContext.getAfterRollbackActions().add(action);\n\t\t\t*/", "}", "return", "result", ";", "}"], "docstring": "Retrieves the entity manager for the current tx and the framework profile\nspec\n\n@return", "docstring_tokens": ["Retrieves", "the", "entity", "manager", "for", "the", "current", "tx", "and", "the", "framework", "profile", "spec"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/jpa/JPAProfileEntityFramework.java#L731-L768", "partition": "test", "index": 7137, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java", "func_name": "ProfileFacilityImpl.getProfileTableActivity", "original_string": "public ProfileTableActivity getProfileTableActivity(String profileTableName)\r\n\t\t\tthrows NullPointerException, UnrecognizedProfileTableNameException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfileTableActivity( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" )\");\r\n\t\t}\r\n\t\t\t\t\r\n\t\tfinal SleeTransactionManager sleeTransactionManager = profileManagement.getSleeContainer()\r\n\t\t\t\t.getTransactionManager();\t\t\r\n\t\tboolean terminateTx = sleeTransactionManager.requireTransaction();\r\n\t\ttry {\r\n\t\t\treturn profileManagement.getProfileTable(profileTableName).getActivity();\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(\"Failed to obtain profile table.\", e);\r\n\t\t} finally {\r\n\t\t\t// never rollback\r\n\t\t\ttry {\r\n\t\t\t\tsleeTransactionManager.requireTransactionEnd(terminateTx,false);\t\r\n\t\t\t} catch (Throwable e) {\r\n\t\t\t\tthrow new FacilityException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}", "language": "java", "code": "public ProfileTableActivity getProfileTableActivity(String profileTableName)\r\n\t\t\tthrows NullPointerException, UnrecognizedProfileTableNameException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfileTableActivity( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" )\");\r\n\t\t}\r\n\t\t\t\t\r\n\t\tfinal SleeTransactionManager sleeTransactionManager = profileManagement.getSleeContainer()\r\n\t\t\t\t.getTransactionManager();\t\t\r\n\t\tboolean terminateTx = sleeTransactionManager.requireTransaction();\r\n\t\ttry {\r\n\t\t\treturn profileManagement.getProfileTable(profileTableName).getActivity();\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(\"Failed to obtain profile table.\", e);\r\n\t\t} finally {\r\n\t\t\t// never rollback\r\n\t\t\ttry {\r\n\t\t\t\tsleeTransactionManager.requireTransactionEnd(terminateTx,false);\t\r\n\t\t\t} catch (Throwable e) {\r\n\t\t\t\tthrow new FacilityException(e.getMessage(),e);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}", "code_tokens": ["public", "ProfileTableActivity", "getProfileTableActivity", "(", "String", "profileTableName", ")", "throws", "NullPointerException", ",", "UnrecognizedProfileTableNameException", ",", "TransactionRolledbackLocalException", ",", "FacilityException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"getProfileTableActivity( profileTableName = \"", "+", "profileTableName", "+", "\" )\"", ")", ";", "}", "final", "SleeTransactionManager", "sleeTransactionManager", "=", "profileManagement", ".", "getSleeContainer", "(", ")", ".", "getTransactionManager", "(", ")", ";", "boolean", "terminateTx", "=", "sleeTransactionManager", ".", "requireTransaction", "(", ")", ";", "try", "{", "return", "profileManagement", ".", "getProfileTable", "(", "profileTableName", ")", ".", "getActivity", "(", ")", ";", "}", "catch", "(", "NullPointerException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "UnrecognizedProfileTableNameException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "FacilityException", "(", "\"Failed to obtain profile table.\"", ",", "e", ")", ";", "}", "finally", "{", "// never rollback\r", "try", "{", "sleeTransactionManager", ".", "requireTransactionEnd", "(", "terminateTx", ",", "false", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "FacilityException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}"], "docstring": "Get a ProfileTableActivity object for a profile table.\n\nThis method is a required transactional method.\n\n@param profileTableName\n- the name of the profile table.\n@return a ProfileTableActivity object for the profile table.\n@throws java.lang.NullPointerException\n- if profileTableName is null.\n@throws UnrecognizedProfileTableNameException\n- if a profile table with the specified name does not exist.\n@throws TransactionRolledbackLocalException\n- if this method was invoked without a valid transaction\ncontext and the transaction started by this method failed to\ncommit.\n@throws FacilityException\n- if the activity could not be obtained due to a system-level\nfailure. This exception is also thrown if the method is\ninvoked on a ProfileFacility object provided to a resource\nadaptor via its ResourceAdaptorContext.", "docstring_tokens": ["Get", "a", "ProfileTableActivity", "object", "for", "a", "profile", "table", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java#L203-L231", "partition": "test", "index": 6955, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/ClassGeneratorUtils.java", "func_name": "ClassGeneratorUtils.addMemberValuesToAnnotation", "original_string": "private static void addMemberValuesToAnnotation(Annotation annotation, ConstPool cp, LinkedHashMap<String, Object> memberValues)\n  {\n    // Get the member value object\n    for(String mvName : memberValues.keySet())\n    {\n      Object mvValue = memberValues.get(mvName);\n      MemberValue mv = getMemberValue(mvValue, cp);\n      annotation.addMemberValue( mvName, mv );\n    }\n  }", "language": "java", "code": "private static void addMemberValuesToAnnotation(Annotation annotation, ConstPool cp, LinkedHashMap<String, Object> memberValues)\n  {\n    // Get the member value object\n    for(String mvName : memberValues.keySet())\n    {\n      Object mvValue = memberValues.get(mvName);\n      MemberValue mv = getMemberValue(mvValue, cp);\n      annotation.addMemberValue( mvName, mv );\n    }\n  }", "code_tokens": ["private", "static", "void", "addMemberValuesToAnnotation", "(", "Annotation", "annotation", ",", "ConstPool", "cp", ",", "LinkedHashMap", "<", "String", ",", "Object", ">", "memberValues", ")", "{", "// Get the member value object", "for", "(", "String", "mvName", ":", "memberValues", ".", "keySet", "(", ")", ")", "{", "Object", "mvValue", "=", "memberValues", ".", "get", "(", "mvName", ")", ";", "MemberValue", "mv", "=", "getMemberValue", "(", "mvValue", ",", "cp", ")", ";", "annotation", ".", "addMemberValue", "(", "mvName", ",", "mv", ")", ";", "}", "}"], "docstring": "Private method to add member values to annotation\n\n@param annotation\n@param cp\n@param memberValues", "docstring_tokens": ["Private", "method", "to", "add", "member", "values", "to", "annotation"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/ClassGeneratorUtils.java#L712-L721", "partition": "test", "index": 7124, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileQueryHandler.java", "func_name": "ProfileQueryHandler.handle", "original_string": "public static Collection<ProfileLocalObject> handle(\r\n\t\t\tProfileTableImpl profileTable, String queryName, Object[] arguments)\r\n\t\t\tthrows NullPointerException, TransactionRequiredLocalException, SLEEException,\r\n\t\t\tUnrecognizedQueryNameException, AttributeTypeMismatchException,\r\n\t\t\tInvalidArgumentException {\r\n\t\treturn profileTable.getProfilesByStaticQuery(queryName, arguments);\r\n\t}", "language": "java", "code": "public static Collection<ProfileLocalObject> handle(\r\n\t\t\tProfileTableImpl profileTable, String queryName, Object[] arguments)\r\n\t\t\tthrows NullPointerException, TransactionRequiredLocalException, SLEEException,\r\n\t\t\tUnrecognizedQueryNameException, AttributeTypeMismatchException,\r\n\t\t\tInvalidArgumentException {\r\n\t\treturn profileTable.getProfilesByStaticQuery(queryName, arguments);\r\n\t}", "code_tokens": ["public", "static", "Collection", "<", "ProfileLocalObject", ">", "handle", "(", "ProfileTableImpl", "profileTable", ",", "String", "queryName", ",", "Object", "[", "]", "arguments", ")", "throws", "NullPointerException", ",", "TransactionRequiredLocalException", ",", "SLEEException", ",", "UnrecognizedQueryNameException", ",", "AttributeTypeMismatchException", ",", "InvalidArgumentException", "{", "return", "profileTable", ".", "getProfilesByStaticQuery", "(", "queryName", ",", "arguments", ")", ";", "}"], "docstring": "Method that does lookup and creates PLOs\n\n@param profileTable\n@param queryName\n@param arguments\n@return\n@throws InvalidArgumentException\n@throws AttributeTypeMismatchException\n@throws UnrecognizedQueryNameException\n@throws SLEEException\n@throws NullPointerException", "docstring_tokens": ["Method", "that", "does", "lookup", "and", "creates", "PLOs"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileQueryHandler.java#L59-L65", "partition": "test", "index": 7134, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java", "func_name": "ProfileObjectImpl.profileInitialize", "original_string": "private void profileInitialize(String profileName) {\n\t\t\n\t\tif(logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"[profileInitialize] \"+this+\" , profileName = \"+profileName);\n\t\t}\n\t\t\t\t\n\t\tif (this.state != ProfileObjectState.POOLED) {\n\t\t\tthrow new SLEEException(this.toString());\n\t\t}\n\t\t\n\t\tif (profileName == null) {\n\t\t\t// default profile creation\n\t\t\t// create instance of entity\n\t\t\tprofileEntity = profileEntityFramework.getProfileEntityFactory().newInstance(profileTable.getProfileTableName(), null);\n\t\t\t// change state\n\t\t\tthis.state = ProfileObjectState.PROFILE_INITIALIZATION;\n\t\t\t// invoke life cycle method on profile\n\t\t\tif (profileConcreteClassInfo.isInvokeProfileInitialize()) {\n\t\t\t\ttry {\n\t\t\t\t\tprofileConcrete.profileInitialize();\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\truntimeExceptionOnProfileInvocation(e);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// load the default profile entity\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Copying state from default profile on object \"+this);\n\t\t\t}\n\t\t\tprofileEntity = cloneEntity(profileTable.getDefaultProfileEntity());\n\t\t\tprofileEntity.setProfileName(profileName);\n\t\t}\n\t\t\t\t\n\t\t// mark entity as dirty and for creation\n\t\tprofileEntity.create();\n\t\tprofileEntity.setDirty(true);\n\t}", "language": "java", "code": "private void profileInitialize(String profileName) {\n\t\t\n\t\tif(logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"[profileInitialize] \"+this+\" , profileName = \"+profileName);\n\t\t}\n\t\t\t\t\n\t\tif (this.state != ProfileObjectState.POOLED) {\n\t\t\tthrow new SLEEException(this.toString());\n\t\t}\n\t\t\n\t\tif (profileName == null) {\n\t\t\t// default profile creation\n\t\t\t// create instance of entity\n\t\t\tprofileEntity = profileEntityFramework.getProfileEntityFactory().newInstance(profileTable.getProfileTableName(), null);\n\t\t\t// change state\n\t\t\tthis.state = ProfileObjectState.PROFILE_INITIALIZATION;\n\t\t\t// invoke life cycle method on profile\n\t\t\tif (profileConcreteClassInfo.isInvokeProfileInitialize()) {\n\t\t\t\ttry {\n\t\t\t\t\tprofileConcrete.profileInitialize();\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\truntimeExceptionOnProfileInvocation(e);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// load the default profile entity\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Copying state from default profile on object \"+this);\n\t\t\t}\n\t\t\tprofileEntity = cloneEntity(profileTable.getDefaultProfileEntity());\n\t\t\tprofileEntity.setProfileName(profileName);\n\t\t}\n\t\t\t\t\n\t\t// mark entity as dirty and for creation\n\t\tprofileEntity.create();\n\t\tprofileEntity.setDirty(true);\n\t}", "code_tokens": ["private", "void", "profileInitialize", "(", "String", "profileName", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"[profileInitialize] \"", "+", "this", "+", "\" , profileName = \"", "+", "profileName", ")", ";", "}", "if", "(", "this", ".", "state", "!=", "ProfileObjectState", ".", "POOLED", ")", "{", "throw", "new", "SLEEException", "(", "this", ".", "toString", "(", ")", ")", ";", "}", "if", "(", "profileName", "==", "null", ")", "{", "// default profile creation", "// create instance of entity", "profileEntity", "=", "profileEntityFramework", ".", "getProfileEntityFactory", "(", ")", ".", "newInstance", "(", "profileTable", ".", "getProfileTableName", "(", ")", ",", "null", ")", ";", "// change state", "this", ".", "state", "=", "ProfileObjectState", ".", "PROFILE_INITIALIZATION", ";", "// invoke life cycle method on profile", "if", "(", "profileConcreteClassInfo", ".", "isInvokeProfileInitialize", "(", ")", ")", "{", "try", "{", "profileConcrete", ".", "profileInitialize", "(", ")", ";", "}", "catch", "(", "RuntimeException", "e", ")", "{", "runtimeExceptionOnProfileInvocation", "(", "e", ")", ";", "}", "}", "}", "else", "{", "// load the default profile entity", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"Copying state from default profile on object \"", "+", "this", ")", ";", "}", "profileEntity", "=", "cloneEntity", "(", "profileTable", ".", "getDefaultProfileEntity", "(", ")", ")", ";", "profileEntity", ".", "setProfileName", "(", "profileName", ")", ";", "}", "// mark entity as dirty and for creation", "profileEntity", ".", "create", "(", ")", ";", "profileEntity", ".", "setDirty", "(", "true", ")", ";", "}"], "docstring": "initialize state from default profile", "docstring_tokens": ["initialize", "state", "from", "default", "profile"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java#L261-L299", "partition": "test", "index": 7116, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java", "func_name": "ProfileObjectImpl.setProfileContext", "original_string": "public void setProfileContext(ProfileContextImpl profileContext) {\n\t\t\n\t\tif(logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"[setProfileContext] \"+this);\n\t\t}\n\n\t\tif (profileContext == null) {\n\t\t\tthrow new NullPointerException(\"Passed context must not be null.\");\n\t\t}\n\t\t\n\t\tif (state != ProfileObjectState.DOES_NOT_EXIST) {\n\t\t\tthrow new IllegalStateException(\"Wrong state: \" + this.state + \",on profile set context operation, for profile table: \"\n\t\t\t\t\t+ this.profileTable.getProfileTableName() + \" with specification: \" + this.profileTable.getProfileSpecificationComponent().getProfileSpecificationID());\n\t\t}\n\n\t\tthis.profileContext = profileContext;\n\t\tthis.profileContext.setProfileObject(this);\n\t\t\n\t\tif (profileConcreteClassInfo.isInvokeSetProfileContext()) {\n\t\t\tfinal ClassLoader oldClassLoader = SleeContainerUtils.getCurrentThreadClassLoader();\n\n\t\t\ttry {\n\t\t\t\tfinal ClassLoader cl = this.profileTable.getProfileSpecificationComponent().getClassLoader();\n\n\t\t\t\tif (System.getSecurityManager()!=null) {\n\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\t\tpublic Object run() {\n\t\t\t\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (isSlee11) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tprofileConcrete.setProfileContext(profileContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\t\truntimeExceptionOnProfileInvocation(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\tif (logger.isDebugEnabled())\n\t\t\t\t\t\tlogger.debug(\"Exception encountered while setting profile context for profile table: \"\n\t\t\t\t\t\t\t\t+ this.profileTable.getProfileTableName() + \" with specification: \" + this.profileTable.getProfileSpecificationComponent().getProfileSpecificationID(), e);\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (System.getSecurityManager()!=null) {\n\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\t\tpublic Object run() {\n\t\t\t\t\t\t\tThread.currentThread().setContextClassLoader(oldClassLoader);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tThread.currentThread().setContextClassLoader(oldClassLoader);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate = ProfileObjectState.POOLED;\n\n\t}", "language": "java", "code": "public void setProfileContext(ProfileContextImpl profileContext) {\n\t\t\n\t\tif(logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"[setProfileContext] \"+this);\n\t\t}\n\n\t\tif (profileContext == null) {\n\t\t\tthrow new NullPointerException(\"Passed context must not be null.\");\n\t\t}\n\t\t\n\t\tif (state != ProfileObjectState.DOES_NOT_EXIST) {\n\t\t\tthrow new IllegalStateException(\"Wrong state: \" + this.state + \",on profile set context operation, for profile table: \"\n\t\t\t\t\t+ this.profileTable.getProfileTableName() + \" with specification: \" + this.profileTable.getProfileSpecificationComponent().getProfileSpecificationID());\n\t\t}\n\n\t\tthis.profileContext = profileContext;\n\t\tthis.profileContext.setProfileObject(this);\n\t\t\n\t\tif (profileConcreteClassInfo.isInvokeSetProfileContext()) {\n\t\t\tfinal ClassLoader oldClassLoader = SleeContainerUtils.getCurrentThreadClassLoader();\n\n\t\t\ttry {\n\t\t\t\tfinal ClassLoader cl = this.profileTable.getProfileSpecificationComponent().getClassLoader();\n\n\t\t\t\tif (System.getSecurityManager()!=null) {\n\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\t\tpublic Object run() {\n\t\t\t\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (isSlee11) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tprofileConcrete.setProfileContext(profileContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\t\truntimeExceptionOnProfileInvocation(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\tif (logger.isDebugEnabled())\n\t\t\t\t\t\tlogger.debug(\"Exception encountered while setting profile context for profile table: \"\n\t\t\t\t\t\t\t\t+ this.profileTable.getProfileTableName() + \" with specification: \" + this.profileTable.getProfileSpecificationComponent().getProfileSpecificationID(), e);\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (System.getSecurityManager()!=null) {\n\t\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\t\tpublic Object run() {\n\t\t\t\t\t\t\tThread.currentThread().setContextClassLoader(oldClassLoader);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tThread.currentThread().setContextClassLoader(oldClassLoader);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate = ProfileObjectState.POOLED;\n\n\t}", "code_tokens": ["public", "void", "setProfileContext", "(", "ProfileContextImpl", "profileContext", ")", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"[setProfileContext] \"", "+", "this", ")", ";", "}", "if", "(", "profileContext", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"Passed context must not be null.\"", ")", ";", "}", "if", "(", "state", "!=", "ProfileObjectState", ".", "DOES_NOT_EXIST", ")", "{", "throw", "new", "IllegalStateException", "(", "\"Wrong state: \"", "+", "this", ".", "state", "+", "\",on profile set context operation, for profile table: \"", "+", "this", ".", "profileTable", ".", "getProfileTableName", "(", ")", "+", "\" with specification: \"", "+", "this", ".", "profileTable", ".", "getProfileSpecificationComponent", "(", ")", ".", "getProfileSpecificationID", "(", ")", ")", ";", "}", "this", ".", "profileContext", "=", "profileContext", ";", "this", ".", "profileContext", ".", "setProfileObject", "(", "this", ")", ";", "if", "(", "profileConcreteClassInfo", ".", "isInvokeSetProfileContext", "(", ")", ")", "{", "final", "ClassLoader", "oldClassLoader", "=", "SleeContainerUtils", ".", "getCurrentThreadClassLoader", "(", ")", ";", "try", "{", "final", "ClassLoader", "cl", "=", "this", ".", "profileTable", ".", "getProfileSpecificationComponent", "(", ")", ".", "getClassLoader", "(", ")", ";", "if", "(", "System", ".", "getSecurityManager", "(", ")", "!=", "null", ")", "{", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "<", "Object", ">", "(", ")", "{", "public", "Object", "run", "(", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "setContextClassLoader", "(", "cl", ")", ";", "return", "null", ";", "}", "}", ")", ";", "}", "else", "{", "Thread", ".", "currentThread", "(", ")", ".", "setContextClassLoader", "(", "cl", ")", ";", "}", "try", "{", "if", "(", "isSlee11", ")", "{", "try", "{", "profileConcrete", ".", "setProfileContext", "(", "profileContext", ")", ";", "}", "catch", "(", "RuntimeException", "e", ")", "{", "runtimeExceptionOnProfileInvocation", "(", "e", ")", ";", "}", "}", "}", "catch", "(", "Exception", "e", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "logger", ".", "debug", "(", "\"Exception encountered while setting profile context for profile table: \"", "+", "this", ".", "profileTable", ".", "getProfileTableName", "(", ")", "+", "\" with specification: \"", "+", "this", ".", "profileTable", ".", "getProfileSpecificationComponent", "(", ")", ".", "getProfileSpecificationID", "(", ")", ",", "e", ")", ";", "}", "}", "finally", "{", "if", "(", "System", ".", "getSecurityManager", "(", ")", "!=", "null", ")", "{", "AccessController", ".", "doPrivileged", "(", "new", "PrivilegedAction", "<", "Object", ">", "(", ")", "{", "public", "Object", "run", "(", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "setContextClassLoader", "(", "oldClassLoader", ")", ";", "return", "null", ";", "}", "}", ")", ";", "}", "else", "{", "Thread", ".", "currentThread", "(", ")", ".", "setContextClassLoader", "(", "oldClassLoader", ")", ";", "}", "}", "}", "state", "=", "ProfileObjectState", ".", "POOLED", ";", "}"], "docstring": "Invoked from pool.\n\n@param profileContext", "docstring_tokens": ["Invoked", "from", "pool", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/ProfileObjectImpl.java#L170-L239", "partition": "test", "index": 7115, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/ClassGeneratorUtils.java", "func_name": "ClassGeneratorUtils.createInheritanceLink", "original_string": "public static void createInheritanceLink(CtClass concreteClass, String superClassName)\n  {\n    if(superClassName != null && superClassName.length() >= 0)\n    {\n      try\n      {\n        concreteClass.setSuperclass(classPool.get(superClassName));\n      }\n      catch ( CannotCompileException e ) {\n        e.printStackTrace();\n      }\n      catch ( NotFoundException e ) {\n        e.printStackTrace();\n      }\n    }\n  }", "language": "java", "code": "public static void createInheritanceLink(CtClass concreteClass, String superClassName)\n  {\n    if(superClassName != null && superClassName.length() >= 0)\n    {\n      try\n      {\n        concreteClass.setSuperclass(classPool.get(superClassName));\n      }\n      catch ( CannotCompileException e ) {\n        e.printStackTrace();\n      }\n      catch ( NotFoundException e ) {\n        e.printStackTrace();\n      }\n    }\n  }", "code_tokens": ["public", "static", "void", "createInheritanceLink", "(", "CtClass", "concreteClass", ",", "String", "superClassName", ")", "{", "if", "(", "superClassName", "!=", "null", "&&", "superClassName", ".", "length", "(", ")", ">=", "0", ")", "{", "try", "{", "concreteClass", ".", "setSuperclass", "(", "classPool", ".", "get", "(", "superClassName", ")", ")", ";", "}", "catch", "(", "CannotCompileException", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "}", "catch", "(", "NotFoundException", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "}", "}", "}"], "docstring": "Create the inheritance link with the absract class provided by the developer\n\n@param concreteClass the concrete class to which to add the inheritance link\n@param superClass the superClass to set", "docstring_tokens": ["Create", "the", "inheritance", "link", "with", "the", "absract", "class", "provided", "by", "the", "developer"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/ClassGeneratorUtils.java#L164-L179", "partition": "test", "index": 7122, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/ClassGeneratorUtils.java", "func_name": "ClassGeneratorUtils.createClass", "original_string": "public static CtClass createClass(String className, String[] interfaces) throws Exception\n  {\n    if(className == null)\n    {\n      throw new NullPointerException(\"Class name cannot be null\");\n    }\n\n    CtClass clazz = classPool.makeClass(className);\n\n    if(interfaces != null && interfaces.length > 0)\n    {\n      clazz.setInterfaces( classPool.get( interfaces ) );\n    }\n    \n    return clazz;\n  }", "language": "java", "code": "public static CtClass createClass(String className, String[] interfaces) throws Exception\n  {\n    if(className == null)\n    {\n      throw new NullPointerException(\"Class name cannot be null\");\n    }\n\n    CtClass clazz = classPool.makeClass(className);\n\n    if(interfaces != null && interfaces.length > 0)\n    {\n      clazz.setInterfaces( classPool.get( interfaces ) );\n    }\n    \n    return clazz;\n  }", "code_tokens": ["public", "static", "CtClass", "createClass", "(", "String", "className", ",", "String", "[", "]", "interfaces", ")", "throws", "Exception", "{", "if", "(", "className", "==", "null", ")", "{", "throw", "new", "NullPointerException", "(", "\"Class name cannot be null\"", ")", ";", "}", "CtClass", "clazz", "=", "classPool", ".", "makeClass", "(", "className", ")", ";", "if", "(", "interfaces", "!=", "null", "&&", "interfaces", ".", "length", ">", "0", ")", "{", "clazz", ".", "setInterfaces", "(", "classPool", ".", "get", "(", "interfaces", ")", ")", ";", "}", "return", "clazz", ";", "}"], "docstring": "Creates a class with the desired name and linked to the mentioned interfaces.\n\n@param className\n@param interfaces\n@return\n@throws Exception", "docstring_tokens": ["Creates", "a", "class", "with", "the", "desired", "name", "and", "linked", "to", "the", "mentioned", "interfaces", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/deployment/profile/ClassGeneratorUtils.java#L98-L113", "partition": "test", "index": 7121, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java", "func_name": "ProfileFacilityImpl.getProfiles", "original_string": "public Collection<ProfileID> getProfiles(String profileTableName)\r\n\t\t\tthrows NullPointerException, UnrecognizedProfileTableNameException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfiles( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" )\");\r\n\t\t}\r\n\t\t\r\n\t\tprofileManagement.getSleeContainer().getTransactionManager().mandateTransaction();\r\n\r\n\t\ttry {\r\n\t\t\treturn profileManagement.getProfileTable(\r\n\t\t\t\t\t\t\tprofileTableName).getProfiles();\t\t\t\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\t\t\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(e.getMessage(), e);\r\n\t\t}\r\n\t}", "language": "java", "code": "public Collection<ProfileID> getProfiles(String profileTableName)\r\n\t\t\tthrows NullPointerException, UnrecognizedProfileTableNameException,\r\n\t\t\tTransactionRolledbackLocalException, FacilityException {\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"getProfiles( profileTableName = \"\r\n\t\t\t\t\t+ profileTableName + \" )\");\r\n\t\t}\r\n\t\t\r\n\t\tprofileManagement.getSleeContainer().getTransactionManager().mandateTransaction();\r\n\r\n\t\ttry {\r\n\t\t\treturn profileManagement.getProfileTable(\r\n\t\t\t\t\t\t\tprofileTableName).getProfiles();\t\t\t\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tthrow e;\r\n\t\t} catch (UnrecognizedProfileTableNameException e) {\r\n\t\t\tthrow e;\t\t\r\n\t\t} catch (Throwable e) {\r\n\t\t\tthrow new FacilityException(e.getMessage(), e);\r\n\t\t}\r\n\t}", "code_tokens": ["public", "Collection", "<", "ProfileID", ">", "getProfiles", "(", "String", "profileTableName", ")", "throws", "NullPointerException", ",", "UnrecognizedProfileTableNameException", ",", "TransactionRolledbackLocalException", ",", "FacilityException", "{", "if", "(", "logger", ".", "isTraceEnabled", "(", ")", ")", "{", "logger", ".", "trace", "(", "\"getProfiles( profileTableName = \"", "+", "profileTableName", "+", "\" )\"", ")", ";", "}", "profileManagement", ".", "getSleeContainer", "(", ")", ".", "getTransactionManager", "(", ")", ".", "mandateTransaction", "(", ")", ";", "try", "{", "return", "profileManagement", ".", "getProfileTable", "(", "profileTableName", ")", ".", "getProfiles", "(", ")", ";", "}", "catch", "(", "NullPointerException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "UnrecognizedProfileTableNameException", "e", ")", "{", "throw", "e", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "FacilityException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Get a collection of ProfileID objects that identify all the profiles\ncontained in the specified profile table. The collection returned is\nimmutable. Any attempt to modify it, either directly or indirectly, will\nresult in a java.lang.UnsupportedOperationException being thrown.\n\nNote: A profile identifier for the profile table's default profile will\nnot be included in the collection returned by this method as the default\nprofile has no such identifier.\n\nThis method is a required transactional method.\n\n@deprecated\n@param profileTableName\n- the name of the profile table.\n@return a read-only collection of ProfileID objects identifying the\nprofiles contained in the specified profile table.\n@throws java.lang.NullPointerException\n- if profileTableName is null.\n@throws UnrecognizedProfileTableNameException\n- if a profile table with the specified name does not exist.\n@throws TransactionRolledbackLocalException\n- if this method was invoked without a valid transaction\ncontext and the transaction started by this method failed to\ncommit.\n@throws FacilityException\n- if the profile identifies could not be obtained due to a\nsystem-level failure.", "docstring_tokens": ["Get", "a", "collection", "of", "ProfileID", "objects", "that", "identify", "all", "the", "profiles", "contained", "in", "the", "specified", "profile", "table", ".", "The", "collection", "returned", "is", "immutable", ".", "Any", "attempt", "to", "modify", "it", "either", "directly", "or", "indirectly", "will", "result", "in", "a", "java", ".", "lang", ".", "UnsupportedOperationException", "being", "thrown", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/runtime/facilities/profile/ProfileFacilityImpl.java#L158-L179", "partition": "test", "index": 6954, "time": "2016-10-13 14:24:51"}
{"repo": "RestComm/jain-slee", "path": "tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AbstractOperation.java", "func_name": "AbstractOperation.displayResult", "original_string": "public void displayResult() {\r\n\t\t//default impl of display;\r\n\t\tif (!context.isQuiet()) {\r\n\t\t\t// Translate the result to text\r\n\t\t\tString resultText = prepareResultText();\r\n\r\n\t\t\t// render results to out\r\n\t\t\tPrintWriter out = context.getWriter();\r\n\t\t\tout.println(resultText);\r\n\t\t\tout.flush();\r\n\t\t}\r\n\t}", "language": "java", "code": "public void displayResult() {\r\n\t\t//default impl of display;\r\n\t\tif (!context.isQuiet()) {\r\n\t\t\t// Translate the result to text\r\n\t\t\tString resultText = prepareResultText();\r\n\r\n\t\t\t// render results to out\r\n\t\t\tPrintWriter out = context.getWriter();\r\n\t\t\tout.println(resultText);\r\n\t\t\tout.flush();\r\n\t\t}\r\n\t}", "code_tokens": ["public", "void", "displayResult", "(", ")", "{", "//default impl of display;\r", "if", "(", "!", "context", ".", "isQuiet", "(", ")", ")", "{", "// Translate the result to text\r", "String", "resultText", "=", "prepareResultText", "(", ")", ";", "// render results to out\r", "PrintWriter", "out", "=", "context", ".", "getWriter", "(", ")", ";", "out", ".", "println", "(", "resultText", ")", ";", "out", ".", "flush", "(", ")", ";", "}", "}"], "docstring": "Method to display result of operation.", "docstring_tokens": ["Method", "to", "display", "result", "of", "operation", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AbstractOperation.java#L102-L113", "partition": "test", "index": 6957, "time": "2016-10-21 15:33:54"}
{"repo": "RestComm/jain-slee", "path": "tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AccessorOperation.java", "func_name": "AccessorOperation.makeGetter", "original_string": "protected void makeGetter() {\r\n\t\tif(fieldClass.equals(boolean.class) || fieldClass.equals(Boolean.class)) {\r\n\t\t\tsuper.operationName = \"is\" + this.beanFieldName;\r\n\t\t} else {\r\n\t\t\tsuper.operationName = \"get\" + this.beanFieldName;\r\n\t\t}\r\n\t}", "language": "java", "code": "protected void makeGetter() {\r\n\t\tif(fieldClass.equals(boolean.class) || fieldClass.equals(Boolean.class)) {\r\n\t\t\tsuper.operationName = \"is\" + this.beanFieldName;\r\n\t\t} else {\r\n\t\t\tsuper.operationName = \"get\" + this.beanFieldName;\r\n\t\t}\r\n\t}", "code_tokens": ["protected", "void", "makeGetter", "(", ")", "{", "if", "(", "fieldClass", ".", "equals", "(", "boolean", ".", "class", ")", "||", "fieldClass", ".", "equals", "(", "Boolean", ".", "class", ")", ")", "{", "super", ".", "operationName", "=", "\"is\"", "+", "this", ".", "beanFieldName", ";", "}", "else", "{", "super", ".", "operationName", "=", "\"get\"", "+", "this", ".", "beanFieldName", ";", "}", "}"], "docstring": "User should overide it to provide different name, for instance for boolean \\\"is\\\" prefix", "docstring_tokens": ["User", "should", "overide", "it", "to", "provide", "different", "name", "for", "instance", "for", "boolean", "\\", "is", "\\", "prefix"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AccessorOperation.java#L66-L72", "partition": "test", "index": 7059, "time": "2016-10-24 15:11:54"}
{"repo": "RestComm/jain-slee", "path": "tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AccessorOperation.java", "func_name": "AccessorOperation.convert", "original_string": "protected Object convert(String optArg) throws SecurityException, NoSuchMethodException, IllegalArgumentException,\r\n\t\t\tInstantiationException, IllegalAccessException, InvocationTargetException, CommandException {\r\n\t\tif (fieldClass.isPrimitive()) {\r\n\t\t\t// TODO: to optimize, to rework new to valueOf\r\n\t\t\tif (fieldClass.equals(int.class)) {\r\n\t\t\t\treturn new Integer(optArg);\r\n\t\t\t} else if (fieldClass.equals(long.class)) {\r\n\t\t\t\treturn new Long(optArg);\r\n\t\t\t} else if (fieldClass.equals(int.class)) {\r\n\t\t\t\treturn new Integer(optArg);\r\n\t\t\t} else if (fieldClass.equals(byte.class)) {\r\n\t\t\t\treturn new Byte(optArg);\r\n\t\t\t} else if (fieldClass.equals(short.class)) {\r\n\t\t\t\treturn new Short(optArg);\r\n\t\t\t} else if (fieldClass.equals(float.class)) {\r\n\t\t\t\treturn new Float(optArg);\r\n\t\t\t} else if (fieldClass.equals(double.class)) {\r\n\t\t\t\treturn new Double(optArg);\r\n\t\t\t} else if (fieldClass.equals(boolean.class)) {\r\n\t\t\t\treturn new Boolean(optArg);\r\n\t\t\t} else if(fieldClass.equals(char.class)) {\r\n\t\t\t\treturn new Character(optArg.charAt(0));\r\n\t\t\t} //?\r\n\r\n\t\t\tthrow new CommandException(\"Unpredicted place. Please report.\");\r\n\t\t} else if (isClassNumber()) {\r\n\t\t\t//Handle Long, Integer, .., Boolean\r\n\t\t\tConstructor<?> con = fieldClass.getConstructor(String.class);\r\n\t\t\treturn con.newInstance(optArg);\r\n\t\t}\r\n\r\n\t\treturn optArg;\r\n\t}", "language": "java", "code": "protected Object convert(String optArg) throws SecurityException, NoSuchMethodException, IllegalArgumentException,\r\n\t\t\tInstantiationException, IllegalAccessException, InvocationTargetException, CommandException {\r\n\t\tif (fieldClass.isPrimitive()) {\r\n\t\t\t// TODO: to optimize, to rework new to valueOf\r\n\t\t\tif (fieldClass.equals(int.class)) {\r\n\t\t\t\treturn new Integer(optArg);\r\n\t\t\t} else if (fieldClass.equals(long.class)) {\r\n\t\t\t\treturn new Long(optArg);\r\n\t\t\t} else if (fieldClass.equals(int.class)) {\r\n\t\t\t\treturn new Integer(optArg);\r\n\t\t\t} else if (fieldClass.equals(byte.class)) {\r\n\t\t\t\treturn new Byte(optArg);\r\n\t\t\t} else if (fieldClass.equals(short.class)) {\r\n\t\t\t\treturn new Short(optArg);\r\n\t\t\t} else if (fieldClass.equals(float.class)) {\r\n\t\t\t\treturn new Float(optArg);\r\n\t\t\t} else if (fieldClass.equals(double.class)) {\r\n\t\t\t\treturn new Double(optArg);\r\n\t\t\t} else if (fieldClass.equals(boolean.class)) {\r\n\t\t\t\treturn new Boolean(optArg);\r\n\t\t\t} else if(fieldClass.equals(char.class)) {\r\n\t\t\t\treturn new Character(optArg.charAt(0));\r\n\t\t\t} //?\r\n\r\n\t\t\tthrow new CommandException(\"Unpredicted place. Please report.\");\r\n\t\t} else if (isClassNumber()) {\r\n\t\t\t//Handle Long, Integer, .., Boolean\r\n\t\t\tConstructor<?> con = fieldClass.getConstructor(String.class);\r\n\t\t\treturn con.newInstance(optArg);\r\n\t\t}\r\n\r\n\t\treturn optArg;\r\n\t}", "code_tokens": ["protected", "Object", "convert", "(", "String", "optArg", ")", "throws", "SecurityException", ",", "NoSuchMethodException", ",", "IllegalArgumentException", ",", "InstantiationException", ",", "IllegalAccessException", ",", "InvocationTargetException", ",", "CommandException", "{", "if", "(", "fieldClass", ".", "isPrimitive", "(", ")", ")", "{", "// TODO: to optimize, to rework new to valueOf\r", "if", "(", "fieldClass", ".", "equals", "(", "int", ".", "class", ")", ")", "{", "return", "new", "Integer", "(", "optArg", ")", ";", "}", "else", "if", "(", "fieldClass", ".", "equals", "(", "long", ".", "class", ")", ")", "{", "return", "new", "Long", "(", "optArg", ")", ";", "}", "else", "if", "(", "fieldClass", ".", "equals", "(", "int", ".", "class", ")", ")", "{", "return", "new", "Integer", "(", "optArg", ")", ";", "}", "else", "if", "(", "fieldClass", ".", "equals", "(", "byte", ".", "class", ")", ")", "{", "return", "new", "Byte", "(", "optArg", ")", ";", "}", "else", "if", "(", "fieldClass", ".", "equals", "(", "short", ".", "class", ")", ")", "{", "return", "new", "Short", "(", "optArg", ")", ";", "}", "else", "if", "(", "fieldClass", ".", "equals", "(", "float", ".", "class", ")", ")", "{", "return", "new", "Float", "(", "optArg", ")", ";", "}", "else", "if", "(", "fieldClass", ".", "equals", "(", "double", ".", "class", ")", ")", "{", "return", "new", "Double", "(", "optArg", ")", ";", "}", "else", "if", "(", "fieldClass", ".", "equals", "(", "boolean", ".", "class", ")", ")", "{", "return", "new", "Boolean", "(", "optArg", ")", ";", "}", "else", "if", "(", "fieldClass", ".", "equals", "(", "char", ".", "class", ")", ")", "{", "return", "new", "Character", "(", "optArg", ".", "charAt", "(", "0", ")", ")", ";", "}", "//?\r", "throw", "new", "CommandException", "(", "\"Unpredicted place. Please report.\"", ")", ";", "}", "else", "if", "(", "isClassNumber", "(", ")", ")", "{", "//Handle Long, Integer, .., Boolean\r", "Constructor", "<", "?", ">", "con", "=", "fieldClass", ".", "getConstructor", "(", "String", ".", "class", ")", ";", "return", "con", ".", "newInstance", "(", "optArg", ")", ";", "}", "return", "optArg", ";", "}"], "docstring": "This method is called to convert optArg from string form, if no conversion is needed it should return passed object.\n@param optArg\n@return\n@throws NoSuchMethodException\n@throws SecurityException\n@throws InvocationTargetException\n@throws IllegalAccessException\n@throws InstantiationException\n@throws IllegalArgumentException\n@throws CommandException", "docstring_tokens": ["This", "method", "is", "called", "to", "convert", "optArg", "from", "string", "form", "if", "no", "conversion", "is", "needed", "it", "should", "return", "passed", "object", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/twiddle/cli/src/main/java/org/mobicents/tools/twiddle/op/AccessorOperation.java#L90-L122", "partition": "test", "index": 7060, "time": "2016-10-24 15:11:54"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/war/src/main/java/org/mobicents/slee/container/management/console/client/log/LogStructureTreePanel.java", "func_name": "LogStructureTreePanel.doTree", "original_string": "private TreeItem doTree(FQDNNode localRoot) {\r\n\r\n    TreeItem localLeaf = new TreeItem();\r\n\r\n    LogTreeNode logTreeNode = new LogTreeNode(browseContainer, localRoot.getShortName(), localRoot.getFqdName(), localRoot.isWasLeaf(), this);\r\n\r\n    localLeaf.setWidget(logTreeNode);\r\n\r\n    if (localRoot.getChildren().size() > 0) {\r\n\r\n      Tree t = new Tree();\r\n\r\n      ArrayList names = new ArrayList(localRoot.getChildrenNames());\r\n      Collections.sort(names);\r\n      Iterator it = names.iterator();\r\n      while (it.hasNext()) {\r\n        t.addItem(doTree(localRoot.getChild((String) it.next())));\r\n      }\r\n      localLeaf.addItem(t);\r\n    }\r\n\r\n    return localLeaf;\r\n\r\n  }", "language": "java", "code": "private TreeItem doTree(FQDNNode localRoot) {\r\n\r\n    TreeItem localLeaf = new TreeItem();\r\n\r\n    LogTreeNode logTreeNode = new LogTreeNode(browseContainer, localRoot.getShortName(), localRoot.getFqdName(), localRoot.isWasLeaf(), this);\r\n\r\n    localLeaf.setWidget(logTreeNode);\r\n\r\n    if (localRoot.getChildren().size() > 0) {\r\n\r\n      Tree t = new Tree();\r\n\r\n      ArrayList names = new ArrayList(localRoot.getChildrenNames());\r\n      Collections.sort(names);\r\n      Iterator it = names.iterator();\r\n      while (it.hasNext()) {\r\n        t.addItem(doTree(localRoot.getChild((String) it.next())));\r\n      }\r\n      localLeaf.addItem(t);\r\n    }\r\n\r\n    return localLeaf;\r\n\r\n  }", "code_tokens": ["private", "TreeItem", "doTree", "(", "FQDNNode", "localRoot", ")", "{", "TreeItem", "localLeaf", "=", "new", "TreeItem", "(", ")", ";", "LogTreeNode", "logTreeNode", "=", "new", "LogTreeNode", "(", "browseContainer", ",", "localRoot", ".", "getShortName", "(", ")", ",", "localRoot", ".", "getFqdName", "(", ")", ",", "localRoot", ".", "isWasLeaf", "(", ")", ",", "this", ")", ";", "localLeaf", ".", "setWidget", "(", "logTreeNode", ")", ";", "if", "(", "localRoot", ".", "getChildren", "(", ")", ".", "size", "(", ")", ">", "0", ")", "{", "Tree", "t", "=", "new", "Tree", "(", ")", ";", "ArrayList", "names", "=", "new", "ArrayList", "(", "localRoot", ".", "getChildrenNames", "(", ")", ")", ";", "Collections", ".", "sort", "(", "names", ")", ";", "Iterator", "it", "=", "names", ".", "iterator", "(", ")", ";", "while", "(", "it", ".", "hasNext", "(", ")", ")", "{", "t", ".", "addItem", "(", "doTree", "(", "localRoot", ".", "getChild", "(", "(", "String", ")", "it", ".", "next", "(", ")", ")", ")", ")", ";", "}", "localLeaf", ".", "addItem", "(", "t", ")", ";", "}", "return", "localLeaf", ";", "}"], "docstring": "TMP DEV METHODS", "docstring_tokens": ["TMP", "DEV", "METHODS"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/war/src/main/java/org/mobicents/slee/container/management/console/client/log/LogStructureTreePanel.java#L140-L163", "partition": "test", "index": 6945, "time": "2016-11-01 16:07:25"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/war/src/main/java/org/mobicents/slee/container/management/console/client/deployableunits/DeployableUnitInstallPanel.java", "func_name": "DeployableUnitInstallPanel.extractMessage", "original_string": "private String extractMessage(String result) {\r\n\r\n    // Fix:\r\n    // Firefox 2 encapsulates the text inside <pre> tag\r\n    String startPreTag = \"<pre>\";\r\n    String endPreTag = \"</pre>\";\r\n\r\n    result = result.trim();\r\n\r\n    if (result.startsWith(startPreTag) && result.endsWith(endPreTag)) {\r\n      result = result.substring(startPreTag.length(), result.length() - endPreTag.length());\r\n    }\r\n\r\n    return result;\r\n  }", "language": "java", "code": "private String extractMessage(String result) {\r\n\r\n    // Fix:\r\n    // Firefox 2 encapsulates the text inside <pre> tag\r\n    String startPreTag = \"<pre>\";\r\n    String endPreTag = \"</pre>\";\r\n\r\n    result = result.trim();\r\n\r\n    if (result.startsWith(startPreTag) && result.endsWith(endPreTag)) {\r\n      result = result.substring(startPreTag.length(), result.length() - endPreTag.length());\r\n    }\r\n\r\n    return result;\r\n  }", "code_tokens": ["private", "String", "extractMessage", "(", "String", "result", ")", "{", "// Fix:\r", "// Firefox 2 encapsulates the text inside <pre> tag\r", "String", "startPreTag", "=", "\"<pre>\"", ";", "String", "endPreTag", "=", "\"</pre>\"", ";", "result", "=", "result", ".", "trim", "(", ")", ";", "if", "(", "result", ".", "startsWith", "(", "startPreTag", ")", "&&", "result", ".", "endsWith", "(", "endPreTag", ")", ")", "{", "result", "=", "result", ".", "substring", "(", "startPreTag", ".", "length", "(", ")", ",", "result", ".", "length", "(", ")", "-", "endPreTag", ".", "length", "(", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "protected DeployableUnitsCard deployableUnitsCard;", "docstring_tokens": ["protected", "DeployableUnitsCard", "deployableUnitsCard", ";"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/war/src/main/java/org/mobicents/slee/container/management/console/client/deployableunits/DeployableUnitInstallPanel.java#L47-L61", "partition": "test", "index": 7062, "time": "2016-11-01 16:07:25"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java", "func_name": "LogManagementMBeanUtils.getLoggerNames", "original_string": "public List<String> getLoggerNames(String regex) throws ManagementConsoleException {\r\n    try {\r\n      return (List<String>) this.mbeanServer.invoke(logMgmtMBeanName, \"getLoggerNames\", new Object[] { regex }, new String[] { \"java.lang.String\" });\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "language": "java", "code": "public List<String> getLoggerNames(String regex) throws ManagementConsoleException {\r\n    try {\r\n      return (List<String>) this.mbeanServer.invoke(logMgmtMBeanName, \"getLoggerNames\", new Object[] { regex }, new String[] { \"java.lang.String\" });\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "code_tokens": ["public", "List", "<", "String", ">", "getLoggerNames", "(", "String", "regex", ")", "throws", "ManagementConsoleException", "{", "try", "{", "return", "(", "List", "<", "String", ">", ")", "this", ".", "mbeanServer", ".", "invoke", "(", "logMgmtMBeanName", ",", "\"getLoggerNames\"", ",", "new", "Object", "[", "]", "{", "regex", "}", ",", "new", "String", "[", "]", "{", "\"java.lang.String\"", "}", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "throw", "new", "ManagementConsoleException", "(", "SleeManagementMBeanUtils", ".", "doMessage", "(", "e", ")", ")", ";", "}", "}"], "docstring": "SImilar to LoggingMXBean, return list of available loggers. Filter is string that has to occur in loggers name.\n\n@param - specifies string that has to occur in loggers name, if null - all names are returned. (Simply regex)\n@return", "docstring_tokens": ["SImilar", "to", "LoggingMXBean", "return", "list", "of", "available", "loggers", ".", "Filter", "is", "string", "that", "has", "to", "occur", "in", "loggers", "name", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java#L168-L176", "partition": "test", "index": 7145, "time": "2016-11-01 16:07:25"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java", "func_name": "LogManagementMBeanUtils.addLogger", "original_string": "public boolean addLogger(String name, Level level) throws NullPointerException, ManagementConsoleException {\r\n    try {\r\n      return ((Boolean) this.mbeanServer.invoke(logMgmtMBeanName, \"addLogger\", new Object[] { name, level }, new String[] { \"java.lang.String\",\r\n          \"java.util.logging.Level\" })).booleanValue();\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "language": "java", "code": "public boolean addLogger(String name, Level level) throws NullPointerException, ManagementConsoleException {\r\n    try {\r\n      return ((Boolean) this.mbeanServer.invoke(logMgmtMBeanName, \"addLogger\", new Object[] { name, level }, new String[] { \"java.lang.String\",\r\n          \"java.util.logging.Level\" })).booleanValue();\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "code_tokens": ["public", "boolean", "addLogger", "(", "String", "name", ",", "Level", "level", ")", "throws", "NullPointerException", ",", "ManagementConsoleException", "{", "try", "{", "return", "(", "(", "Boolean", ")", "this", ".", "mbeanServer", ".", "invoke", "(", "logMgmtMBeanName", ",", "\"addLogger\"", ",", "new", "Object", "[", "]", "{", "name", ",", "level", "}", ",", "new", "String", "[", "]", "{", "\"java.lang.String\"", ",", "\"java.util.logging.Level\"", "}", ")", ")", ".", "booleanValue", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "throw", "new", "ManagementConsoleException", "(", "SleeManagementMBeanUtils", ".", "doMessage", "(", "e", ")", ")", ";", "}", "}"], "docstring": "Tries to add logger if it doesnt exist\n\n@param name\n- name of logger\n@param level\n- level for this logger, if <b>null</b> than default level for logger is used\n@return <ul>\n<li><b>true</b> - if logger didnt exist and it was created</li>\n<li><b>false</b> - if logger did exist and it was not created</li>\n</ul>\n@throws NullPointerException\n- when arg is null{}", "docstring_tokens": ["Tries", "to", "add", "logger", "if", "it", "doesnt", "exist"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java#L301-L310", "partition": "test", "index": 7148, "time": "2016-11-01 16:07:25"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java", "func_name": "LogManagementMBeanUtils.clearLoggers", "original_string": "public void clearLoggers(String name) throws ManagementConsoleException {\r\n\r\n    try {\r\n      this.mbeanServer.invoke(logMgmtMBeanName, \"clearLoggers\", new Object[] { name }, new String[] { \"java.lang.String\" });\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n\r\n  }", "language": "java", "code": "public void clearLoggers(String name) throws ManagementConsoleException {\r\n\r\n    try {\r\n      this.mbeanServer.invoke(logMgmtMBeanName, \"clearLoggers\", new Object[] { name }, new String[] { \"java.lang.String\" });\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n\r\n  }", "code_tokens": ["public", "void", "clearLoggers", "(", "String", "name", ")", "throws", "ManagementConsoleException", "{", "try", "{", "this", ".", "mbeanServer", ".", "invoke", "(", "logMgmtMBeanName", ",", "\"clearLoggers\"", ",", "new", "Object", "[", "]", "{", "name", "}", ",", "new", "String", "[", "]", "{", "\"java.lang.String\"", "}", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "throw", "new", "ManagementConsoleException", "(", "SleeManagementMBeanUtils", ".", "doMessage", "(", "e", ")", ")", ";", "}", "}"], "docstring": "Removes all loggers under certain branch.\n\n@param name\n- logger name(branch name)", "docstring_tokens": ["Removes", "all", "loggers", "under", "certain", "branch", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java#L275-L285", "partition": "test", "index": 7147, "time": "2016-11-01 16:07:25"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java", "func_name": "LogManagementMBeanUtils.resetLoggerLevels", "original_string": "public void resetLoggerLevels() throws ManagementConsoleException {\r\n\r\n    try {\r\n      this.mbeanServer.invoke(logMgmtMBeanName, \"resetLoggerLevels\", null, null);\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n\r\n  }", "language": "java", "code": "public void resetLoggerLevels() throws ManagementConsoleException {\r\n\r\n    try {\r\n      this.mbeanServer.invoke(logMgmtMBeanName, \"resetLoggerLevels\", null, null);\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n\r\n  }", "code_tokens": ["public", "void", "resetLoggerLevels", "(", ")", "throws", "ManagementConsoleException", "{", "try", "{", "this", ".", "mbeanServer", ".", "invoke", "(", "logMgmtMBeanName", ",", "\"resetLoggerLevels\"", ",", "null", ",", "null", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "throw", "new", "ManagementConsoleException", "(", "SleeManagementMBeanUtils", ".", "doMessage", "(", "e", ")", ")", ";", "}", "}"], "docstring": "Resets all loggers level to default one", "docstring_tokens": ["Resets", "all", "loggers", "level", "to", "default", "one"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java#L225-L235", "partition": "test", "index": 7146, "time": "2016-11-01 16:07:25"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/activity/ActivityServiceImpl.java", "func_name": "ActivityServiceImpl.toTTL", "original_string": "private static String toTTL(String lastAccess, long timeout) {\r\n    Long ttl = timeout - ((System.currentTimeMillis() - Long.parseLong(lastAccess)) / 1000);\r\n    return ttl.toString();\r\n  }", "language": "java", "code": "private static String toTTL(String lastAccess, long timeout) {\r\n    Long ttl = timeout - ((System.currentTimeMillis() - Long.parseLong(lastAccess)) / 1000);\r\n    return ttl.toString();\r\n  }", "code_tokens": ["private", "static", "String", "toTTL", "(", "String", "lastAccess", ",", "long", "timeout", ")", "{", "Long", "ttl", "=", "timeout", "-", "(", "(", "System", ".", "currentTimeMillis", "(", ")", "-", "Long", ".", "parseLong", "(", "lastAccess", ")", ")", "/", "1000", ")", ";", "return", "ttl", ".", "toString", "(", ")", ";", "}"], "docstring": "Calculates the Activity TTL\n\n@param lastAccess time of last access to activity (in milliseconds)\n@param timeout activity max idle time (in seconds)\n@return a String with TTL value (in seconds)", "docstring_tokens": ["Calculates", "the", "Activity", "TTL"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/activity/ActivityServiceImpl.java#L208-L211", "partition": "test", "index": 7142, "time": "2016-11-01 16:07:25"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java", "func_name": "LogManagementMBeanUtils.addSocketHandler", "original_string": "public void addSocketHandler(String loggerName, Level handlerLevel, String handlerName, String formaterClassName, String filterClassName, String host,\r\n      int port) throws ManagementConsoleException {\r\n\r\n    try {\r\n      this.mbeanServer.invoke(logMgmtMBeanName, \"addSocketHandler\", new Object[] { loggerName, handlerLevel, handlerName, formaterClassName, filterClassName,\r\n          host, port }, new String[] { \"java.lang.String\", \"java.util.logging.Level\", \"java.lang.String\", \"java.lang.String\", \"java.lang.String\",\r\n          \"java.lang.String\", \"int\" });\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n\r\n  }", "language": "java", "code": "public void addSocketHandler(String loggerName, Level handlerLevel, String handlerName, String formaterClassName, String filterClassName, String host,\r\n      int port) throws ManagementConsoleException {\r\n\r\n    try {\r\n      this.mbeanServer.invoke(logMgmtMBeanName, \"addSocketHandler\", new Object[] { loggerName, handlerLevel, handlerName, formaterClassName, filterClassName,\r\n          host, port }, new String[] { \"java.lang.String\", \"java.util.logging.Level\", \"java.lang.String\", \"java.lang.String\", \"java.lang.String\",\r\n          \"java.lang.String\", \"int\" });\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n\r\n  }", "code_tokens": ["public", "void", "addSocketHandler", "(", "String", "loggerName", ",", "Level", "handlerLevel", ",", "String", "handlerName", ",", "String", "formaterClassName", ",", "String", "filterClassName", ",", "String", "host", ",", "int", "port", ")", "throws", "ManagementConsoleException", "{", "try", "{", "this", ".", "mbeanServer", ".", "invoke", "(", "logMgmtMBeanName", ",", "\"addSocketHandler\"", ",", "new", "Object", "[", "]", "{", "loggerName", ",", "handlerLevel", ",", "handlerName", ",", "formaterClassName", ",", "filterClassName", ",", "host", ",", "port", "}", ",", "new", "String", "[", "]", "{", "\"java.lang.String\"", ",", "\"java.util.logging.Level\"", ",", "\"java.lang.String\"", ",", "\"java.lang.String\"", ",", "\"java.lang.String\"", ",", "\"java.lang.String\"", ",", "\"int\"", "}", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "throw", "new", "ManagementConsoleException", "(", "SleeManagementMBeanUtils", ".", "doMessage", "(", "e", ")", ")", ";", "}", "}"], "docstring": "Adds SocketHandler to certain logger, this logger must exist prior this function is called\n\n@param loggerName\n- name of the logger, cant be null\n@param handlerLevel\n- level for this handler, if its null default level for handlers will be used\n@param handlerName\n- name for this handler, cant be duplicate.\n@param formaterClassName\n- name of formater class for this handler, can be null.\n@param filterClassName\n- name of filter class for this handler, can be null.\n@param host\n- host address\n@param port\n- port address\n@throws IllegalArgumentException\n- thrown when:\n<ul>\n<li>host is not a valid inet address</li>\n<li>port <0</li>\n</ul>\n@throws NullPointerException\n- if arg other than:\n<ul>\n<li>formaterClassName</li>\n<li>filterClassName</li>\n<li>handlerLevel</li>\n</ul>\nis null.\n@throws IllegalStateException\n:- thrown when:\n<ul>\n<li>Logger under certain name doesnt exist</li>\n<li>handler name is duplicate of another handler for this logger or is reserved one ->NOTIFICATION</li>\n</ul>\n@throw IOException - when host cant be reached", "docstring_tokens": ["Adds", "SocketHandler", "to", "certain", "logger", "this", "logger", "must", "exist", "prior", "this", "function", "is", "called"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java#L379-L392", "partition": "test", "index": 7149, "time": "2016-11-01 16:07:25"}
{"repo": "RestComm/jain-slee", "path": "tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java", "func_name": "LogManagementMBeanUtils.removeHandler", "original_string": "public boolean removeHandler(String loggerName, String handlerName) throws ManagementConsoleException {\r\n    try {\r\n      return ((Boolean) this.mbeanServer.invoke(logMgmtMBeanName, \"removeHandler\", new Object[] { loggerName, handlerName }, new String[] { \"java.lang.String\",\r\n          \"java.lang.String\" })).booleanValue();\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "language": "java", "code": "public boolean removeHandler(String loggerName, String handlerName) throws ManagementConsoleException {\r\n    try {\r\n      return ((Boolean) this.mbeanServer.invoke(logMgmtMBeanName, \"removeHandler\", new Object[] { loggerName, handlerName }, new String[] { \"java.lang.String\",\r\n          \"java.lang.String\" })).booleanValue();\r\n    }\r\n    catch (Exception e) {\r\n      e.printStackTrace();\r\n      throw new ManagementConsoleException(SleeManagementMBeanUtils.doMessage(e));\r\n    }\r\n  }", "code_tokens": ["public", "boolean", "removeHandler", "(", "String", "loggerName", ",", "String", "handlerName", ")", "throws", "ManagementConsoleException", "{", "try", "{", "return", "(", "(", "Boolean", ")", "this", ".", "mbeanServer", ".", "invoke", "(", "logMgmtMBeanName", ",", "\"removeHandler\"", ",", "new", "Object", "[", "]", "{", "loggerName", ",", "handlerName", "}", ",", "new", "String", "[", "]", "{", "\"java.lang.String\"", ",", "\"java.lang.String\"", "}", ")", ")", ".", "booleanValue", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "e", ".", "printStackTrace", "(", ")", ";", "throw", "new", "ManagementConsoleException", "(", "SleeManagementMBeanUtils", ".", "doMessage", "(", "e", ")", ")", ";", "}", "}"], "docstring": "Tries to remove handler from logger.\n\n@param loggerName\n- name of the logger\n@param handlerName\n- handler name that has been added by this MBean\n@return <ul>\n<li><b>true</b> - if logger exists, and it was removed</li>\n<li><b>false</b> - otherwise</li>\n</ul>", "docstring_tokens": ["Tries", "to", "remove", "handler", "from", "logger", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/tools/slee-management-console/server/src/main/java/org/mobicents/slee/container/management/console/server/mbeans/LogManagementMBeanUtils.java#L462-L471", "partition": "test", "index": 7150, "time": "2016-11-01 16:07:25"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java", "func_name": "AbstractProfileMBeanImpl.afterManagementMethodInvocation", "original_string": "protected void afterManagementMethodInvocation(boolean activatedTransaction) throws ManagementException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"afterManagementMethodInvocation( activatedTransaction = \" + activatedTransaction + \" ) on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        afterNonSetCmpField(activatedTransaction);\n\n        jndiManagement.popJndiContext();\n    }", "language": "java", "code": "protected void afterManagementMethodInvocation(boolean activatedTransaction) throws ManagementException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"afterManagementMethodInvocation( activatedTransaction = \" + activatedTransaction + \" ) on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        afterNonSetCmpField(activatedTransaction);\n\n        jndiManagement.popJndiContext();\n    }", "code_tokens": ["protected", "void", "afterManagementMethodInvocation", "(", "boolean", "activatedTransaction", ")", "throws", "ManagementException", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"afterManagementMethodInvocation( activatedTransaction = \"", "+", "activatedTransaction", "+", "\" ) on profile with name \"", "+", "profileName", "+", "\" of table \"", "+", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "}", "afterNonSetCmpField", "(", "activatedTransaction", ")", ";", "jndiManagement", ".", "popJndiContext", "(", ")", ";", "}"], "docstring": "Logic to execute after invoking a management method on the mbean\n\n@param activatedTransaction if the method beforeManagementMethodInvocation() initiated or resumed a transaction\n@throws ManagementException", "docstring_tokens": ["Logic", "to", "execute", "after", "invoking", "a", "management", "method", "on", "the", "mbean"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java#L652-L660", "partition": "test", "index": 7100, "time": "2017-01-06 15:10:23"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java", "func_name": "AbstractProfileMBeanImpl.getObjectName", "original_string": "public static ObjectName getObjectName(\n            String profileTableName, String profileName) {\n        // FIXME use only the \"quoted\" version when issue is fully solved at the JMX Console side\n        try {\n            return new ObjectName(ProfileMBean.BASE_OBJECT_NAME + ','\n                    + ProfileMBean.PROFILE_TABLE_NAME_KEY + '='\n                    + profileTableName + ','\n                    + ProfileMBean.PROFILE_NAME_KEY + '='\n                    + (profileName != null ? profileName : \"\"));\n        } catch (Throwable e) {\n            try {\n                return new ObjectName(ProfileMBean.BASE_OBJECT_NAME + ','\n                        + ProfileMBean.PROFILE_TABLE_NAME_KEY + '='\n                        + ObjectName.quote(profileTableName) + ','\n                        + ProfileMBean.PROFILE_NAME_KEY + '='\n                        + ObjectName.quote(profileName != null ? profileName : \"\"));\n            } catch (Throwable f) {\n                throw new SLEEException(e.getMessage(), e);\n            }\n        }\n    }", "language": "java", "code": "public static ObjectName getObjectName(\n            String profileTableName, String profileName) {\n        // FIXME use only the \"quoted\" version when issue is fully solved at the JMX Console side\n        try {\n            return new ObjectName(ProfileMBean.BASE_OBJECT_NAME + ','\n                    + ProfileMBean.PROFILE_TABLE_NAME_KEY + '='\n                    + profileTableName + ','\n                    + ProfileMBean.PROFILE_NAME_KEY + '='\n                    + (profileName != null ? profileName : \"\"));\n        } catch (Throwable e) {\n            try {\n                return new ObjectName(ProfileMBean.BASE_OBJECT_NAME + ','\n                        + ProfileMBean.PROFILE_TABLE_NAME_KEY + '='\n                        + ObjectName.quote(profileTableName) + ','\n                        + ProfileMBean.PROFILE_NAME_KEY + '='\n                        + ObjectName.quote(profileName != null ? profileName : \"\"));\n            } catch (Throwable f) {\n                throw new SLEEException(e.getMessage(), e);\n            }\n        }\n    }", "code_tokens": ["public", "static", "ObjectName", "getObjectName", "(", "String", "profileTableName", ",", "String", "profileName", ")", "{", "// FIXME use only the \"quoted\" version when issue is fully solved at the JMX Console side", "try", "{", "return", "new", "ObjectName", "(", "ProfileMBean", ".", "BASE_OBJECT_NAME", "+", "'", "'", "+", "ProfileMBean", ".", "PROFILE_TABLE_NAME_KEY", "+", "'", "'", "+", "profileTableName", "+", "'", "'", "+", "ProfileMBean", ".", "PROFILE_NAME_KEY", "+", "'", "'", "+", "(", "profileName", "!=", "null", "?", "profileName", ":", "\"\"", ")", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "try", "{", "return", "new", "ObjectName", "(", "ProfileMBean", ".", "BASE_OBJECT_NAME", "+", "'", "'", "+", "ProfileMBean", ".", "PROFILE_TABLE_NAME_KEY", "+", "'", "'", "+", "ObjectName", ".", "quote", "(", "profileTableName", ")", "+", "'", "'", "+", "ProfileMBean", ".", "PROFILE_NAME_KEY", "+", "'", "'", "+", "ObjectName", ".", "quote", "(", "profileName", "!=", "null", "?", "profileName", ":", "\"\"", ")", ")", ";", "}", "catch", "(", "Throwable", "f", ")", "{", "throw", "new", "SLEEException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}"], "docstring": "Retrieves the JMX ObjectName for a profile, given its profile name and\nprofile table name\n\n@param profileTableName\n@param profileName\n@return\n@throws MalformedObjectNameException", "docstring_tokens": ["Retrieves", "the", "JMX", "ObjectName", "for", "a", "profile", "given", "its", "profile", "name", "and", "profile", "table", "name"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java#L195-L215", "partition": "test", "index": 7093, "time": "2017-01-06 15:10:23"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java", "func_name": "AbstractProfileMBeanImpl.beforeSetCmpField", "original_string": "protected void beforeSetCmpField() throws ManagementException, InvalidStateException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"beforeSetCmpField() on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        if (isProfileWriteable()) {\n            try {\n                sleeContainer.getTransactionManager().resume(transaction);\n            } catch (Throwable e) {\n                throw new ManagementException(e.getMessage(), e);\n            }\n        } else {\n            throw new InvalidStateException();\n        }\n    }", "language": "java", "code": "protected void beforeSetCmpField() throws ManagementException, InvalidStateException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"beforeSetCmpField() on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        if (isProfileWriteable()) {\n            try {\n                sleeContainer.getTransactionManager().resume(transaction);\n            } catch (Throwable e) {\n                throw new ManagementException(e.getMessage(), e);\n            }\n        } else {\n            throw new InvalidStateException();\n        }\n    }", "code_tokens": ["protected", "void", "beforeSetCmpField", "(", ")", "throws", "ManagementException", ",", "InvalidStateException", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"beforeSetCmpField() on profile with name \"", "+", "profileName", "+", "\" of table \"", "+", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "}", "if", "(", "isProfileWriteable", "(", ")", ")", "{", "try", "{", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "resume", "(", "transaction", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "ManagementException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "else", "{", "throw", "new", "InvalidStateException", "(", ")", ";", "}", "}"], "docstring": "Logic to execute before invoking a cmp setter method on the mbean\n\n@return true if the method resumed a transaction\n@throws ManagementException", "docstring_tokens": ["Logic", "to", "execute", "before", "invoking", "a", "cmp", "setter", "method", "on", "the", "mbean"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java#L506-L521", "partition": "test", "index": 7095, "time": "2017-01-06 15:10:23"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java", "func_name": "AbstractProfileMBeanImpl.afterSetCmpField", "original_string": "protected void afterSetCmpField() throws ManagementException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"afterSetCmpField() on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        try {\n            sleeContainer.getTransactionManager().suspend();\n        } catch (Throwable e) {\n            throw new ManagementException(e.getMessage(), e);\n        }\n    }", "language": "java", "code": "protected void afterSetCmpField() throws ManagementException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"afterSetCmpField() on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        try {\n            sleeContainer.getTransactionManager().suspend();\n        } catch (Throwable e) {\n            throw new ManagementException(e.getMessage(), e);\n        }\n    }", "code_tokens": ["protected", "void", "afterSetCmpField", "(", ")", "throws", "ManagementException", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"afterSetCmpField() on profile with name \"", "+", "profileName", "+", "\" of table \"", "+", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "}", "try", "{", "sleeContainer", ".", "getTransactionManager", "(", ")", ".", "suspend", "(", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "new", "ManagementException", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "docstring": "Logic to execute after invoking a cmp setter method on the mbean\n\n@throws ManagementException", "docstring_tokens": ["Logic", "to", "execute", "after", "invoking", "a", "cmp", "setter", "method", "on", "the", "mbean"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java#L528-L539", "partition": "test", "index": 7096, "time": "2017-01-06 15:10:23"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java", "func_name": "AbstractProfileMBeanImpl.beforeGetCmpField", "original_string": "protected boolean beforeGetCmpField() throws ManagementException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"beforeGetCmpField() on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        return beforeNonSetCmpField();\n    }", "language": "java", "code": "protected boolean beforeGetCmpField() throws ManagementException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"beforeGetCmpField() on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        return beforeNonSetCmpField();\n    }", "code_tokens": ["protected", "boolean", "beforeGetCmpField", "(", ")", "throws", "ManagementException", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"beforeGetCmpField() on profile with name \"", "+", "profileName", "+", "\" of table \"", "+", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "}", "return", "beforeNonSetCmpField", "(", ")", ";", "}"], "docstring": "Logic to execute before invoking a cmp getter method on the mbean\n\n@return true if the method initiated or resumed a transaction\n@throws ManagementException", "docstring_tokens": ["Logic", "to", "execute", "before", "invoking", "a", "cmp", "getter", "method", "on", "the", "mbean"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java#L547-L554", "partition": "test", "index": 7097, "time": "2017-01-06 15:10:23"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java", "func_name": "AbstractProfileMBeanImpl.afterGetCmpField", "original_string": "protected void afterGetCmpField(boolean activatedTransaction) throws ManagementException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"afterGetCmpField( activatedTransaction = \" + activatedTransaction + \" ) on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        afterNonSetCmpField(activatedTransaction);\n    }", "language": "java", "code": "protected void afterGetCmpField(boolean activatedTransaction) throws ManagementException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"afterGetCmpField( activatedTransaction = \" + activatedTransaction + \" ) on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        afterNonSetCmpField(activatedTransaction);\n    }", "code_tokens": ["protected", "void", "afterGetCmpField", "(", "boolean", "activatedTransaction", ")", "throws", "ManagementException", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"afterGetCmpField( activatedTransaction = \"", "+", "activatedTransaction", "+", "\" ) on profile with name \"", "+", "profileName", "+", "\" of table \"", "+", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "}", "afterNonSetCmpField", "(", "activatedTransaction", ")", ";", "}"], "docstring": "Logic to execute after invoking a cmp getter method on the mbean\n\n@param activatedTransaction if the method beforeGetCmpField() initiated or resumed a transaction\n@throws ManagementException", "docstring_tokens": ["Logic", "to", "execute", "after", "invoking", "a", "cmp", "getter", "method", "on", "the", "mbean"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java#L562-L569", "partition": "test", "index": 7098, "time": "2017-01-06 15:10:23"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java", "func_name": "AbstractProfileMBeanImpl.beforeManagementMethodInvocation", "original_string": "protected boolean beforeManagementMethodInvocation() throws ManagementException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"beforeManagementMethodInvocation() on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        jndiManagement = sleeContainer.getJndiManagement();\n        jndiManagement.pushJndiContext(profileTable.getProfileSpecificationComponent());\n\n        return beforeNonSetCmpField();\n    }", "language": "java", "code": "protected boolean beforeManagementMethodInvocation() throws ManagementException {\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"beforeManagementMethodInvocation() on profile with name \" + profileName + \" of table \" + profileTable.getProfileTableName());\n        }\n\n        jndiManagement = sleeContainer.getJndiManagement();\n        jndiManagement.pushJndiContext(profileTable.getProfileSpecificationComponent());\n\n        return beforeNonSetCmpField();\n    }", "code_tokens": ["protected", "boolean", "beforeManagementMethodInvocation", "(", ")", "throws", "ManagementException", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"beforeManagementMethodInvocation() on profile with name \"", "+", "profileName", "+", "\" of table \"", "+", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "}", "jndiManagement", "=", "sleeContainer", ".", "getJndiManagement", "(", ")", ";", "jndiManagement", ".", "pushJndiContext", "(", "profileTable", ".", "getProfileSpecificationComponent", "(", ")", ")", ";", "return", "beforeNonSetCmpField", "(", ")", ";", "}"], "docstring": "Logic to execute before invoking a management method on the mbean\n\n@return true if the method initiated or resumed a transaction\n@throws ManagementException", "docstring_tokens": ["Logic", "to", "execute", "before", "invoking", "a", "management", "method", "on", "the", "mbean"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java#L634-L644", "partition": "test", "index": 7099, "time": "2017-01-06 15:10:23"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java", "func_name": "AbstractProfileMBeanImpl.close", "original_string": "public static void close(String profileTableName, String profileName) {\n        final ObjectName objectName = getObjectName(profileTableName, profileName);\n        if (sleeContainer.getMBeanServer().isRegistered(objectName)) {\n            Runnable r = new Runnable() {\n                public void run() {\n                    try {\n                        sleeContainer.getMBeanServer().invoke(objectName, \"close\", new Object[]{}, new String[]{});\n                    } catch (Throwable e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            };\n            Thread t = new Thread(r);\n            t.start();\n        }\n    }", "language": "java", "code": "public static void close(String profileTableName, String profileName) {\n        final ObjectName objectName = getObjectName(profileTableName, profileName);\n        if (sleeContainer.getMBeanServer().isRegistered(objectName)) {\n            Runnable r = new Runnable() {\n                public void run() {\n                    try {\n                        sleeContainer.getMBeanServer().invoke(objectName, \"close\", new Object[]{}, new String[]{});\n                    } catch (Throwable e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            };\n            Thread t = new Thread(r);\n            t.start();\n        }\n    }", "code_tokens": ["public", "static", "void", "close", "(", "String", "profileTableName", ",", "String", "profileName", ")", "{", "final", "ObjectName", "objectName", "=", "getObjectName", "(", "profileTableName", ",", "profileName", ")", ";", "if", "(", "sleeContainer", ".", "getMBeanServer", "(", ")", ".", "isRegistered", "(", "objectName", ")", ")", "{", "Runnable", "r", "=", "new", "Runnable", "(", ")", "{", "public", "void", "run", "(", ")", "{", "try", "{", "sleeContainer", ".", "getMBeanServer", "(", ")", ".", "invoke", "(", "objectName", ",", "\"close\"", ",", "new", "Object", "[", "]", "{", "}", ",", "new", "String", "[", "]", "{", "}", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "logger", ".", "error", "(", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}", "}", ";", "Thread", "t", "=", "new", "Thread", "(", "r", ")", ";", "t", ".", "start", "(", ")", ";", "}", "}"], "docstring": "Closes and unregisters the mbean for the specified profile, if exists\n\n@param profileTableName\n@param profileName", "docstring_tokens": ["Closes", "and", "unregisters", "the", "mbean", "for", "the", "specified", "profile", "if", "exists"], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java#L160-L175", "partition": "test", "index": 7092, "time": "2017-01-06 15:10:23"}
{"repo": "RestComm/jain-slee", "path": "container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java", "func_name": "AbstractProfileMBeanImpl.writeMode", "original_string": "private void writeMode() throws SLEEException, ManagementException {\n        if (!isProfileWriteable()) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Changing state to read-write, for profile mbean with name \" + profileName + \", from table with name \" + this.profileTable.getProfileTableName());\n            }\n            // get object & make it writable\n            ProfileObjectImpl profileObject = profileTable.getProfile(profileName);\n            profileObject.getProfileEntity().setReadOnly(false);\n            // change state\n            state = State.write;\n        } else {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Already in write state, for profile mbean with name \" + profileName + \", from table with name \" + this.profileTable.getProfileTableName());\n            }\n        }\n    }", "language": "java", "code": "private void writeMode() throws SLEEException, ManagementException {\n        if (!isProfileWriteable()) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Changing state to read-write, for profile mbean with name \" + profileName + \", from table with name \" + this.profileTable.getProfileTableName());\n            }\n            // get object & make it writable\n            ProfileObjectImpl profileObject = profileTable.getProfile(profileName);\n            profileObject.getProfileEntity().setReadOnly(false);\n            // change state\n            state = State.write;\n        } else {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Already in write state, for profile mbean with name \" + profileName + \", from table with name \" + this.profileTable.getProfileTableName());\n            }\n        }\n    }", "code_tokens": ["private", "void", "writeMode", "(", ")", "throws", "SLEEException", ",", "ManagementException", "{", "if", "(", "!", "isProfileWriteable", "(", ")", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Changing state to read-write, for profile mbean with name \"", "+", "profileName", "+", "\", from table with name \"", "+", "this", ".", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "}", "// get object & make it writable", "ProfileObjectImpl", "profileObject", "=", "profileTable", ".", "getProfile", "(", "profileName", ")", ";", "profileObject", ".", "getProfileEntity", "(", ")", ".", "setReadOnly", "(", "false", ")", ";", "// change state", "state", "=", "State", ".", "write", ";", "}", "else", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Already in write state, for profile mbean with name \"", "+", "profileName", "+", "\", from table with name \"", "+", "this", ".", "profileTable", ".", "getProfileTableName", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Moves to the write mode, using specified object. The current java transaction will be suspended.\n\n@throws ManagementException", "docstring_tokens": ["Moves", "to", "the", "write", "mode", "using", "specified", "object", ".", "The", "current", "java", "transaction", "will", "be", "suspended", "."], "sha": "0eaa16ff2d4b6faf43f0d99260e88878fd54dee0", "url": "https://github.com/RestComm/jain-slee/blob/0eaa16ff2d4b6faf43f0d99260e88878fd54dee0/container/profiles/src/main/java/org/mobicents/slee/container/profile/AbstractProfileMBeanImpl.java#L240-L255", "partition": "test", "index": 7094, "time": "2017-01-06 15:10:23"}
